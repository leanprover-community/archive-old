[
    {
        "content": "<p>So I've been occasionally running into situations where I have repeated existential qualifiers that I later on want to hit with <code>classical.some</code> in other proofs. To do this, I more or less iterate <code>some</code>, <code>some_spec</code> until I have the statement I want. However, this gets kinda gross at a certain point, and I get the feeling there should be some more idiomatic way to unpack all the qualifiers.</p>\n<p>Also, I end up with a lot of extra intermediate hypotheses from all of the non-ultimate <code>some_spec</code>s that clutter up my tactic state. Is there anyway to drop these hypotheses from my tactic state?</p>\n<p>Here's a (contrived) example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">all_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">all_zero</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">some_spec</span> <span class=\"n\">all_zero</span><span class=\"o\">,</span> <span class=\"c1\">-- Only to be used by some</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">some_spec</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"c1\">-- Only to be used by some</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">some_spec</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"c1\">-- The actual statement I want</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271450447,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1644508230
    },
    {
        "content": "<p>this isn't really much nicer, but you can use <code>all_zero.some_spec.some_spec.some</code>. I wish there was a better way too, though</p>",
        "id": 271450969,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644508429
    },
    {
        "content": "<p>i think we're still waiting for an upgrade of <code>obtain/rcases</code> that does this for us</p>",
        "id": 271451064,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644508459
    },
    {
        "content": "<p>(with an <code>!</code> to satisfy the constructivists)</p>",
        "id": 271451078,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644508468
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#choose\">tactic#choose</a> might help here</p>",
        "id": 271451142,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644508497
    },
    {
        "content": "<p>Nice! <code>choose</code> was exactly what I wanted</p>",
        "id": 271451532,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1644508650
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467358\">Daniel Packer</span> has marked this topic as resolved.</p>",
        "id": 271451547,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644508657
    },
    {
        "content": "<p>but when your goal is a proposition (as <code>1 = 1</code> is here) then you can just use <code>rcases</code>/<code>obtain</code> on the proof of the existential, no need for any choice</p>",
        "id": 271452821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644509116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> in case this isn't clear, Reid means:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">all_zero</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271453175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644509249
    },
    {
        "content": "<p>But, as Reid pointed out, this works only because the end goal is a proof, not building more data.</p>",
        "id": 271453251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644509278
    },
    {
        "content": "<p>Ah, I see. That's also helpful. I was imagining the case where we're actually constructing more data, but this also clarifies Eric's point about an <code>obtain/rcases</code> upgrade.</p>",
        "id": 271456460,
        "sender_full_name": "Daniel Packer",
        "timestamp": 1644510629
    },
    {
        "content": "<p>Btw, if we ignore the fact that this would break the heuristic of <code>obtain</code>, why can't it use <code>classical.some</code>/<code>classical.some_spec</code> under the hood so that it works even when the goal is data?</p>",
        "id": 271459842,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644512021
    },
    {
        "content": "<p>It could be a special case like how <code>rcases</code>/<code>obtain</code> can handle quotient induction -- maybe it can slip in <code>classical.indefinite_description</code> when necessary?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">all_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Exists.choose</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.indefinite_description</span> <span class=\"n\">p</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">all_zero.choose</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.choose</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h.choose</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 271463166,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644513372
    },
    {
        "content": "<p>Though I find this sort of worrisome because it's giving <em>the</em> choice.</p>\n<p>Sometimes I wish our axiom of choice were more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">classical.choice'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">trunc</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trunc.mk</span> <span class=\"n\">h.some</span>\n</code></pre></div>\n<p>so that you're obligated to prove the choice doesn't matter.</p>",
        "id": 271464090,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644513777
    },
    {
        "content": "<p>this really bit us in flt-regular; specifically <code>↑zeta ℤ ℤ[ζₚ]</code> is not guaranteed to be equal to <code>zeta ℚ ℚ[ζₚ]</code>, and so we had to rewrite all of our lemmas to use <code>is_primitive_root</code> instead of <code>zeta</code></p>",
        "id": 271464353,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644513877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20How.20to.20use.20classical.2Esome.20repeatedly/near/271464090\">said</a>:</p>\n<blockquote>\n<p>Sometimes I wish our axiom of choice were more like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">classical.choice'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">trunc</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">trunc.mk</span> <span class=\"n\">h.some</span>\n</code></pre></div>\n<p>so that you're obligated to prove the choice doesn't matter.</p>\n</blockquote>\n<p>Well that wouldn't be the axiom of choice then would it?</p>",
        "id": 271464553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644513972
    },
    {
        "content": "<p>This is unique choice, it's derivable in ZF</p>",
        "id": 271464600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514001
    },
    {
        "content": "<p>Ok, how about: sometimes I wish we used a <code>nonempty -&gt; trunc</code> interface for the axiom of choice more pervasively.</p>",
        "id": 271465019,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644514190
    },
    {
        "content": "<p>I think most uses of bare <code>choice</code> to define functions should be viewed with suspicion. But I can't tell the mathematicians what to do</p>",
        "id": 271465568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514421
    },
    {
        "content": "<p>There are examples like <code>filter.lim</code> where the choice is only unique in some cases</p>",
        "id": 271465654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514450
    },
    {
        "content": "<p>but also, this definition turns out to be the wrong thing most of the time and I'm not sure it's helping</p>",
        "id": 271465696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514474
    },
    {
        "content": "<p>and I suspect similar things end up happening whenever you use a function defined using <code>choice</code></p>",
        "id": 271465751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514502
    },
    {
        "content": "<p>I don't think it's the fault of the interface of <code>choice</code>; but it should really come with an \"are you sure\" warning</p>",
        "id": 271466024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514608
    },
    {
        "content": "<p>but I think a lot of folks will just say \"yes I'm sure, I'm a mathematician, stop talking constructive nonsense\" which misses the point</p>",
        "id": 271466278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644514696
    },
    {
        "content": "<p>It'd probably also help things if it were easier to reach for unique choice and do things with it. For example, if <code>rcases</code> could pattern match on existentials and create the uniqueness obligation for you, that would push things in this direction.</p>",
        "id": 271466419,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644514774
    },
    {
        "content": "<p>With <code>choice</code>, my main worry is having an inauspicious syzygy of choices, where you think you proved something different from what you had (though I haven't seen this happen in practice yet). Is that the sort of thing you're thinking about when you say that \"I don't care about constructive math\" misses the point?</p>",
        "id": 271467101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1644515085
    },
    {
        "content": "<p>I think that having an interface that looks like pattern matching but actually applies choice is a bad idea for most use cases, including classical mathematics</p>",
        "id": 271468405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644515634
    },
    {
        "content": "<p>If it kicked off a well definedness side condition then that would solve some problems, although it is awkward from an interface perspective</p>",
        "id": 271468565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644515691
    },
    {
        "content": "<p>note that <code>rcases</code> uses <code>quot.ind</code> and not <code>quot.rec</code> for this reason</p>",
        "id": 271468632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644515713
    },
    {
        "content": "<p><code>rcases</code> is not really in a position to make choices about <code>choice</code> vs <code>unique_choice</code> though, because it could be used in a variety of situations and it hasn't been given any indication on whether a uniqueness side condition is desirable at this point. If the difference matters, then that must mean you are proving properties about the generated term, in which case you probably shouldn't be using <code>rcases</code> in the first place and you should instead write the function you want directly</p>",
        "id": 271469346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644515989
    },
    {
        "content": "<p>That is, \"don't use tactics to produce data\"</p>",
        "id": 271469527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644516022
    },
    {
        "content": "<p>there are exceptions of course, but most of the time you should write functions in term mode, and only use tactics for proof subterms</p>",
        "id": 271469726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644516090
    },
    {
        "content": "<p>I think mathematicians are on board with the idea that if you define something by making a choice you have to prove that it is actually independent of the choice, otherwise it's not \"well-defined\". The \"bare <code>choice</code>\" approach just seems easier I guess, at least in the short term (after all you are deferring a proof obligation)--and <em>we</em> know the definition is fine anyways.</p>",
        "id": 271475132,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644518368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20How.20to.20use.20classical.2Esome.20repeatedly/near/271465568\">said</a>:</p>\n<blockquote>\n<p>I think most uses of bare <code>choice</code> to define functions should be viewed with suspicion. But I can't tell the mathematicians what to do</p>\n</blockquote>\n<p>I assume you're not talking about uses like: we are proving a theorem (about metric spaces say) and in the proof, we want to define a sequence of points or something using <code>choice</code>--much less annoying than using <code>axiom_of_choice</code> and then <code>cases</code>, particularly if we're really using dependent choice</p>",
        "id": 271475542,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644518620
    },
    {
        "content": "<p>No, I'm talking about functions that go into a <code>def</code></p>",
        "id": 271490921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644525565
    },
    {
        "content": "<p>if it's actually proof local then the <code>choose</code> tactic seems to do the job just fine</p>",
        "id": 271490970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644525591
    }
]