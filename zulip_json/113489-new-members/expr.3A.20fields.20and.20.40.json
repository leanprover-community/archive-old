[
    {
        "content": "<p>Hello everyone, in <code>meta</code> I am trying to build an <code>expr</code> for <code>@has_add.add _ _ _ _</code>. How are class/structure fields and the <code>@</code>-notation implemented? When I ask <code>expr.app_fn</code> about <code>to_expr ``(@has_add.add)</code>, I get <code>has_add.add</code>. (?)</p>",
        "id": 163597173,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555532222
    },
    {
        "content": "<p>To be more precise, I want the <code>has_add.add</code> part to be dynamic (generated from a string to also support <code>has_mul.mul</code> etc.); the <code>@</code>is always needed.</p>",
        "id": 163599659,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555534215
    },
    {
        "content": "<p>Is the <code>@</code> an <code>annotation</code>? My tests indicate no...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">diagnose</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">option</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">exp</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">),</span>\n   <span class=\"n\">res</span> <span class=\"err\">←</span> <span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">is_annotation</span> <span class=\"n\">exp</span><span class=\"o\">,</span>\n   <span class=\"n\">type</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">exp</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">type</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">res</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"n\">res</span>\n</pre></div>\n\n\n<p>--&gt; trace output:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">none</span>\n</pre></div>\n\n\n<p>without the <code>@</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n<span class=\"n\">none</span>\n</pre></div>",
        "id": 163605271,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555538888
    },
    {
        "content": "<p><code>@</code> is used by the elaborator. It is only present pre-terms (i.e. <code>pexpr</code>). Consider:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">),</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">is_annotation</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">),</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">to_raw_fmt</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">is_annotation</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">foo</span>\n</pre></div>",
        "id": 163612370,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555546383
    },
    {
        "content": "<p>It prints:</p>\n<div class=\"codehilite\"><pre><span></span>[macro annotation (const has_add.add [])]\n(some (@, has_add.add))\n(const has_add.add [])\nnone\n</pre></div>",
        "id": 163612381,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555546401
    },
    {
        "content": "<p><code> ``(@has_add.add)</code> is a pre-term but <code>to_expr</code> makes it into a term</p>",
        "id": 163612432,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555546445
    },
    {
        "content": "<p>I'm not sure what you want it to \"behave like @ for\", but be aware of <code>tactic.mk_mapp</code> which lets you provided all of the (even implicit) arguments implicitly or explicitly.</p>",
        "id": 163615437,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1555550726
    },
    {
        "content": "<p>Thanks!<br>\n<span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can I add this annotation to an arbitrary application <code>pexpr</code>? (No, because <code>meta constant macro_def : Type</code> belongs to the kernel?!)<br>\n<span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> Can I build such an <code>app</code> which involves terms of the form <code>var &lt;n&gt; I which I can bind later on? (I got </code>failed to infer type, unexpected bound variable occurrence<code> when using </code>var`terms which are not (yet) bound.)</p>",
        "id": 163940245,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555968663
    },
    {
        "content": "<p>My goal is to add a declaration like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">has_add_compatible</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">α</span> <span class=\"n\">i₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">β</span> <span class=\"n\">i₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>to the environment with <code>has_add.add</code>being a template parameter which could also be set to <code>has_mul.mul</code>.</p>",
        "id": 163940444,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1555968795
    },
    {
        "content": "<p>Do my questions make sense? Can I further elaborate on anything? Any help is appreciated <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 163997876,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556031782
    },
    {
        "content": "<p>Hey! Sorry I forgot to answer</p>",
        "id": 164000124,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556033296
    },
    {
        "content": "<p>You don't need to generate <code>@</code> to create that definition. The following has the same effect:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">do</span> <span class=\"n\">add</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mk_const</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n   <span class=\"n\">return</span> <span class=\"err\">$</span> <span class=\"n\">add</span> <span class=\"n\">α</span> <span class=\"n\">i₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 164000326,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556033428
    },
    {
        "content": "<p>or more simply: <code>mk_mapp `has_add.add [α,i₁,x,y]</code></p>",
        "id": 164000373,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556033473
    },
    {
        "content": "<p>While in writing an expression like <code>@has_add.add α i₁ x y</code> you need the added tool of <code>@</code> to specify implicit arguments, in building <code>expr</code> trees, you have to work harder if you want to omit an implicit argument. That's because <code>app f x</code> means the same whether the type of the expression <code>f</code> is <code>Π x : t, t'</code> or <code>Π {x : t}, t'</code>.</p>",
        "id": 164000645,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556033698
    },
    {
        "content": "<p>If you want to omit the first implicit argument, you have to first discover that it is indeed an implicit argument, then, you have to create a meta variable <code>v</code> of the right type and feed it to <code>f</code>: <code>app f v</code>. Then you have \"omitted\" the first arguments: you're relying on unification to figure out what it is</p>",
        "id": 164000846,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556033833
    },
    {
        "content": "<p>You can also use <code>tactic.mk_app</code> which behaves very similarly to what I described</p>",
        "id": 164000975,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556033909
    },
    {
        "content": "<p>Great, thanks, that clears up my questions about how <code>app</code> works for <code>expr</code>and <code>pexpr</code>!</p>",
        "id": 164014929,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556043380
    },
    {
        "content": "<p>I was trying to mix this with reflected code like in the following, is that possible?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_compatible_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"k\">let</span> <span class=\"n\">has_x_name</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"o\">(</span><span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"s2\">&quot;has_&quot;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">has_x_x_name</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"n\">x</span> <span class=\"n\">has_x_name</span><span class=\"o\">,</span>\n   <span class=\"n\">has_x</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">has_x_name</span><span class=\"o\">,</span>\n   <span class=\"n\">has_x_x</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">has_x_x_name</span><span class=\"o\">,</span>\n   <span class=\"n\">decl_type</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"err\">%%</span><span class=\"n\">has_x</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"err\">%%</span><span class=\"n\">has_x</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n   <span class=\"n\">decl_body</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">has_x</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">has_x</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n                          <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">has_x_x</span> <span class=\"n\">α</span> <span class=\"n\">i₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">has_x_x</span> <span class=\"n\">β</span> <span class=\"n\">i₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)),</span>\n   <span class=\"n\">decl</span> <span class=\"err\">←</span> <span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">mk_definition</span> <span class=\"bp\">`</span><span class=\"n\">compatible</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"n\">decl_type</span> <span class=\"n\">decl_body</span><span class=\"o\">,</span>\n   <span class=\"n\">add_decl</span> <span class=\"n\">decl</span>\n</pre></div>",
        "id": 164015074,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556043496
    },
    {
        "content": "<p>Currently the reflected code does not accept the arguments this way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_add</span> <span class=\"kt\">Type</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">too</span> <span class=\"n\">many</span> <span class=\"n\">arguments</span>\n</pre></div>",
        "id": 164015166,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556043569
    },
    {
        "content": "<p>Instead of using <code>Π</code> and <code>λ</code> in your quasiquotes, use <code>mk_local'</code> to create variables like <code>α</code> and <code>β</code> and the instances, then you use <code>to_expr</code> and quasiquotes to create <code> ``((%%α → %%β) → Prop)</code>and you use <code>pis</code> to create the pis and similarly with <code>lambdas</code> to create the lambdas.</p>",
        "id": 164015854,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556044030
    },
    {
        "content": "<p>very convenient :)<br>\nI tried:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_compatible_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"k\">let</span> <span class=\"n\">has_x_name</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"o\">(</span><span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"s2\">&quot;has_&quot;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">has_x_x_name</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">mk_string</span> <span class=\"n\">x</span> <span class=\"n\">has_x_name</span><span class=\"o\">,</span>\n   <span class=\"n\">has_x</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">has_x_name</span><span class=\"o\">,</span>\n   <span class=\"n\">has_x_x</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">has_x_x_name</span><span class=\"o\">,</span>\n   <span class=\"n\">α</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">α</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)),</span>\n   <span class=\"n\">β</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">β</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)),</span>\n   <span class=\"n\">i₁</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">i₁</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">inst_implicit</span> <span class=\"o\">(</span><span class=\"n\">has_x</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n   <span class=\"n\">i₂</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">i₂</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">inst_implicit</span> <span class=\"o\">(</span><span class=\"n\">has_x</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n   <span class=\"n\">type_main</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">((</span><span class=\"err\">%%</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"n\">decl_type</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pis</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">]</span> <span class=\"n\">type_main</span><span class=\"o\">,</span>\n   <span class=\"n\">f</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">f</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n   <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n   <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">y</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n   <span class=\"n\">app₁</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">has_x_x_name</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n   <span class=\"n\">app₂</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">has_x_x_name</span> <span class=\"o\">[</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)],</span>\n   <span class=\"n\">body_main</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">app₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">app₂</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"n\">decl_body</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lambdas</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pis</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">body_main</span><span class=\"o\">),</span>\n  <span class=\"c1\">--  decl_body ← to_expr ``(λ (α : Type) (β : Type) [i₁ : %%has_x α] [i₂ : %%has_x β] (f : α → β),</span>\n  <span class=\"c1\">--                         ∀ {x y : α}, f (%%has_x_x α i₁ x y) = %%has_x_x β i₂ (f x) (f y)),</span>\n   <span class=\"n\">trace</span> <span class=\"n\">decl_type</span><span class=\"o\">,</span>\n   <span class=\"n\">trace</span> <span class=\"n\">decl_body</span><span class=\"o\">,</span>\n   <span class=\"n\">decl</span> <span class=\"err\">←</span> <span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">mk_definition</span> <span class=\"bp\">`</span><span class=\"n\">compatible</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"n\">decl_type</span> <span class=\"n\">decl_body</span><span class=\"o\">,</span>\n   <span class=\"n\">add_decl</span> <span class=\"n\">decl</span>\n</pre></div>\n\n\n<p>It throws</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">app_builder</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">an</span> <span class=\"err\">&#39;</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add&#39;</span><span class=\"bp\">-</span><span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">unification</span> <span class=\"n\">constraint</span> <span class=\"n\">for</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">argument</span> <span class=\"o\">(</span><span class=\"n\">has_add</span> <span class=\"n\">α</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>What is the mistake?</p>",
        "id": 164019455,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556046263
    },
    {
        "content": "<p>use <code>mk_mapp</code> instead of <code>mk_app</code></p>",
        "id": 164019556,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556046340
    },
    {
        "content": "<p>replacing with</p>\n<div class=\"codehilite\"><pre><span></span>   <span class=\"n\">app₁</span> <span class=\"err\">←</span> <span class=\"n\">mk_mapp</span> <span class=\"n\">has_x_x_name</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">i₁</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n   <span class=\"n\">app₂</span> <span class=\"err\">←</span> <span class=\"n\">mk_mapp</span> <span class=\"n\">has_x_x_name</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">i₂</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)],</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 164019854,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556046519
    },
    {
        "content": "<p>Yes</p>",
        "id": 164020114,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556046681
    },
    {
        "content": "<p>Instead of <code>has_x_x_name</code> you can use <code> ``has_add.add</code></p>",
        "id": 164020131,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556046697
    },
    {
        "content": "<p>Replacing these lines I still get the same error</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">app_builder</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">an</span> <span class=\"err\">&#39;</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add&#39;</span><span class=\"bp\">-</span><span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">unification</span> <span class=\"n\">constraint</span> <span class=\"n\">for</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">argument</span> <span class=\"o\">(</span><span class=\"n\">has_add</span> <span class=\"n\">α</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 164020266,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556046764
    },
    {
        "content": "<blockquote>\n<p>Instead of <code>has_x_x_name</code> you can use <code> ``has_add.add</code></p>\n</blockquote>\n<p>Yes, in the end I wanted to be able to write <code>add_compatible_def \"mul\"</code> or similar</p>",
        "id": 164020322,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556046821
    },
    {
        "content": "<p>try putting <code>set_option pp.implicit true</code> before your proof</p>",
        "id": 164020329,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556046828
    },
    {
        "content": "<p>I put it above the definition, but to no effect..</p>",
        "id": 164020482,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556046911
    },
    {
        "content": "<p>The error message should change</p>",
        "id": 164020515,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556046945
    },
    {
        "content": "<p>still </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"n\">app_builder</span><span class=\"o\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">an</span> <span class=\"err\">&#39;</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add&#39;</span><span class=\"bp\">-</span><span class=\"n\">application</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">unification</span> <span class=\"n\">constraint</span> <span class=\"n\">for</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">argument</span> <span class=\"o\">(</span><span class=\"n\">has_add</span> <span class=\"n\">α</span> <span class=\"bp\">=</span><span class=\"err\">?</span><span class=\"bp\">=</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 164020598,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556046992
    },
    {
        "content": "<p>the number of the argument? <code>#1</code> and <code>#2</code></p>",
        "id": 164020628,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556047019
    },
    {
        "content": "<p>Try replacing <code>some i₁</code> with <code>none</code></p>",
        "id": 164020692,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556047065
    },
    {
        "content": "<p>[app_builder] failed to create an 'has_add.add'-application, there are missing implicit arguments</p>",
        "id": 164020804,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556047124
    },
    {
        "content": "<p>If you add <code>infer_type app₁ &gt;&gt;= trace</code> before <code>mk_mapp</code>, what does it print?</p>",
        "id": 164021444,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556047547
    },
    {
        "content": "<p>we don't reach this point</p>",
        "id": 164021614,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556047648
    },
    {
        "content": "<p>i.e. still the error</p>",
        "id": 164021706,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556047697
    },
    {
        "content": "<p>How far does it get?</p>",
        "id": 164021790,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556047762
    },
    {
        "content": "<p>till the <code>mk_mapp</code> I assume</p>",
        "id": 164021928,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556047821
    },
    {
        "content": "<p>So if you put it before, it should print something</p>",
        "id": 164021955,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556047844
    },
    {
        "content": "<p>but you want trace information on <code>app1</code>?<br>\nthen I can't put it above its definition</p>",
        "id": 164022068,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556047906
    },
    {
        "content": "<p>Right, my bad</p>",
        "id": 164022175,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556047948
    },
    {
        "content": "<blockquote>\n<p>till the <code>mk_mapp</code> I assume</p>\n</blockquote>\n<p>the error is <code>app_builder_exception, more information can be obtained using command set_option trace.app_builder true</code></p>",
        "id": 164022204,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556047970
    },
    {
        "content": "<p>I thought you had done that already</p>",
        "id": 164022252,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556047996
    },
    {
        "content": "<p>(which I already used when I pasted the error messages above)</p>",
        "id": 164022276,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556048017
    },
    {
        "content": "<p>yes</p>",
        "id": 164022318,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556048042
    },
    {
        "content": "<p><code>infer_type i₁ &gt;&gt;= trace</code> btw gives <code>has_add α</code> as expected</p>",
        "id": 164022548,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556048165
    },
    {
        "content": "<p>Then try replacing <code>app₁ ← mk_app has_x_x_name [α, i₁, x, y]</code> with <code>app₁ ← to_expr ``(@has_add.add %%α %%i₁ %%x %%y),</code> to see what kind of error we can get</p>",
        "id": 164022575,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556048188
    },
    {
        "content": "<p>strangely, it worked to replace only <code>app1</code>in this way, leaving <code>app2</code> as is</p>",
        "id": 164023028,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556048491
    },
    {
        "content": "<p>the trace of <code>decl_body</code>is <code>λ (α β : Type) [i₁ : has_add α] [i₂ : has_add β] (f : α → β), ∀ {x y : α}, f (x + y) = f x + f y</code></p>",
        "id": 164023047,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556048517
    },
    {
        "content": "<p>however, lean still reports </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">declaration</span> <span class=\"err\">&#39;</span><span class=\"n\">compatible&#39;</span> <span class=\"n\">to</span> <span class=\"n\">environment</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">has</span> <span class=\"n\">metavariables</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i₁</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">i₂</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</pre></div>",
        "id": 164023128,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556048561
    },
    {
        "content": "<p>The issue is with:</p>\n<div class=\"codehilite\"><pre><span></span>   <span class=\"n\">has_x</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">has_x_name</span><span class=\"o\">,</span>\n   <span class=\"n\">has_x_x</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">has_x_x_name</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 164023286,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556048684
    },
    {
        "content": "<p>Try putting this somewhere above your proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">universes</span> <span class=\"n\">true</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span>\n</pre></div>",
        "id": 164023344,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556048728
    },
    {
        "content": "<p>It will show you that <code>has_add.add</code> has one universe parameter <code>u_1</code>. Do you see that?</p>",
        "id": 164023368,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556048757
    },
    {
        "content": "<p>genius! here we go <code>(has_add.{0} α =?= has_add.{?l_1} α)</code> is the error from before I didn't understand</p>",
        "id": 164023685,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556048998
    },
    {
        "content": "<p>Too bad there isn't a universe-emoji...</p>",
        "id": 164023759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556049024
    },
    {
        "content": "<p>:D <span aria-label=\"night sky\" class=\"emoji emoji-1f30c\" role=\"img\" title=\"night sky\">:night_sky:</span></p>",
        "id": 164023806,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556049060
    },
    {
        "content": "<p>now the question is how to (dynamically) construct the <code>has_add</code>constant with the right universe?</p>",
        "id": 164024198,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556049341
    },
    {
        "content": "<p>use <code>unify</code> to determine the universe variables</p>",
        "id": 164024484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556049552
    },
    {
        "content": "<p>In this case, it seems like you are assuming that <code>has_x</code> already exists and has type <code>has_[x] : Type u -&gt; Type u</code>. In that case, you can replace the <code>mk_const</code> invocations, which create a universe metavariable, with an explicit <code>expr.const</code> with universe <code>u = 0</code> (replace the <code>has_x</code> and <code>has_x_x</code> lines with these):</p>\n<div class=\"codehilite\"><pre><span></span>   <span class=\"k\">let</span> <span class=\"n\">has_x</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">has_x_name</span> <span class=\"o\">[</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">],</span>\n   <span class=\"k\">let</span> <span class=\"n\">has_x_x</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">has_x_x_name</span> <span class=\"o\">[</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">],</span>\n</pre></div>",
        "id": 164025449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556050211
    },
    {
        "content": "<p>Yes that is what I assume, and it works this way!</p>",
        "id": 164025798,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556050516
    },
    {
        "content": "<p>And all predefined has_... live in universe zero?</p>",
        "id": 164025819,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556050536
    },
    {
        "content": "<p>no, they have type <code>Type u -&gt; Type u</code>, so if you want alpha to have <code>Type 0</code> then you have to set <code>u = 0</code></p>",
        "id": 164025914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556050618
    },
    {
        "content": "<p>how would I achieve the effect of  <code>α β : Type*</code>?</p>",
        "id": 164026187,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556050803
    },
    {
        "content": "<p><code>mk_meta_univ</code>?</p>",
        "id": 164026380,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556050963
    },
    {
        "content": "<p><code>(α β : Type*)</code> is short for <code>(α : Type u) (β : Type v)</code> where <code>u</code> and <code>v</code> are not meta universes but universe parameters</p>",
        "id": 164026435,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556051032
    },
    {
        "content": "<p>Be careful that last message is unfortunately inaccurate, this is a well known bug</p>",
        "id": 164026540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556051110
    },
    {
        "content": "<blockquote>\n<p><code>(α β : Type*)</code> is short for <code>(α : Type u) (β : Type v)</code> where <code>u</code> and <code>v</code> are not meta universes but universe parameters</p>\n</blockquote>\n<p>how can I declare universe parameters for my declaration?</p>",
        "id": 164026665,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556051204
    },
    {
        "content": "<p>like a normal function parameter?</p>",
        "id": 164026896,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556051385
    },
    {
        "content": "<p><code>meta def add_compatible_def (x : string) (u v : level): command</code> ?</p>",
        "id": 164027015,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556051480
    },
    {
        "content": "<p>ah, there is <code>level.param</code></p>",
        "id": 164027322,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556051713
    },
    {
        "content": "<p>and the level list in <code>declaration.defn</code></p>",
        "id": 164028913,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556052863
    },
    {
        "content": "<p>Next questions :)<br>\nWhat does <code>[app_builder] failed to create an 'mul_compatible'-application, failed to retrieve declaration</code>mean?</p>",
        "id": 164273800,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556293933
    },
    {
        "content": "<p>My code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x0</span> <span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_compatible_id&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_compatible_id_lemma</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">has_mul</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"bp\">`</span><span class=\"n\">has_mul</span><span class=\"o\">,</span>\n   <span class=\"n\">α</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">α</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)),</span>\n   <span class=\"n\">i</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">i</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">inst_implicit</span> <span class=\"o\">(</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"n\">ida</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">id</span> <span class=\"o\">[</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">],</span>\n   <span class=\"n\">stmt</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ida</span> <span class=\"n\">α</span><span class=\"o\">],</span>  <span class=\"c1\">-- &lt;-- error here</span>\n   <span class=\"k\">let</span> <span class=\"n\">decl_type</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pis</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">stmt</span><span class=\"o\">,</span>\n   <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n   <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">y</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">rf</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">rfl</span> <span class=\"o\">[</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">],</span>\n   <span class=\"n\">mcapp</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ida</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n   <span class=\"k\">let</span> <span class=\"n\">decl_body</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lambdas</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">rf</span> <span class=\"n\">mcapp</span><span class=\"o\">),</span>\n   <span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">thm</span> <span class=\"bp\">`</span><span class=\"n\">id_compatible</span> <span class=\"o\">[]</span> <span class=\"n\">decl_type</span> <span class=\"o\">(</span><span class=\"n\">task</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">decl_body</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 164273833,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556293982
    },
    {
        "content": "<p>I'd like to generate the lemma <code>mul_compatible_id'</code>by code in a way such that I can later adapt it to other <code>has_x</code>situations (hence no quasiquotations).</p>",
        "id": 164274434,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556294441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Do you have an idea what I did wrong?</p>",
        "id": 164274518,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556294518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210057\">@Fabian Glöckle</span> do you have any comments on the univalence thread going on in the main chat?</p>",
        "id": 164274604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556294574
    },
    {
        "content": "<p>That's an error given by <code>mk_app</code> or <code>mk_mapp</code></p>",
        "id": 164274763,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556294707
    },
    {
        "content": "<p>There's an option that you can set to give more details about the application you're trying to build. The error message should mention which one</p>",
        "id": 164274904,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556294832
    },
    {
        "content": "<p>The error message is </p>\n<div class=\"codehilite\"><pre><span></span>app_builder_exception, more information can be obtained using command `set_option trace.app_builder true`\n</pre></div>\n\n\n<p>what I posted is already message from activating <code>trace.app_builder</code></p>",
        "id": 164275383,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556295245
    },
    {
        "content": "<p>I got <code>[app_builder] failed to create an 'mul_compatible''-application, failed to solve unification constraint for #4 argument (has_mul α =?= has_mul α)</code></p>",
        "id": 164275410,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556295290
    },
    {
        "content": "<p>try <code>set_option pp.implicit true</code> and <code>set_option pp.universes true</code></p>",
        "id": 164275657,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556295499
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[app_builder] failed to create an &#39;mul_compatible&#39;&#39;-application, failed to solve unification constraint for #4 argument (has_mul.{0} α =?= has_mul.{?l_1} α)\n</pre></div>",
        "id": 164275716,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556295562
    },
    {
        "content": "<p>I can solve that one</p>",
        "id": 164275996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556295768
    },
    {
        "content": "<p>Maybe I should apply for a job at MS</p>",
        "id": 164276004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556295780
    },
    {
        "content": "<blockquote>\n<p>I got <code>[app_builder] failed to create an 'mul_compatible''-application, failed to solve unification constraint for #4 argument (has_mul α =?= has_mul α)</code></p>\n</blockquote>\n<p>Sorry, you are right. Replacing the first line of the metacommand with </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">let</span> <span class=\"n\">has_mul</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">has_mul</span> <span class=\"o\">[</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">],</span>\n</pre></div>\n\n\n<p>gives my error</p>",
        "id": 164276027,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556295799
    },
    {
        "content": "<p>Now we should have a minimal working example</p>",
        "id": 164276046,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556295828
    },
    {
        "content": "<p>Fabian, remember also to build a proper ZFC version of your tactic, which only allows Type and Prop for most basic definitions</p>",
        "id": 164276117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556295876
    },
    {
        "content": "<p>?</p>",
        "id": 164276173,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556295926
    },
    {
        "content": "<p>You can't talk about terms in higher universes</p>",
        "id": 164276180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556295934
    },
    {
        "content": "<p>:D no that was not the problem (though I still do not understand how to use universe parameters when building code)</p>",
        "id": 164276332,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556296055
    },
    {
        "content": "<p>Most mathematicians don't need those higher universes, so write a version that only works for things in Type and my mathematician's wager is that this never bothers us at all. I'm not really suggesting you do it, it's just that I am getting more and more weirded out by all this insistence on polymorphism when all it has done for me as a mathematician was cause me problems</p>",
        "id": 164276410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556296095
    },
    {
        "content": "<p>Ah, the problem is that <code>mk_app `mul_compatible' [α, α, i, i, ida α, x, y]</code> is not allowed because <code>mul_compatible'</code> only accepts 5 arguments.</p>",
        "id": 164276434,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556296116
    },
    {
        "content": "<p>It's a shame Lean couldn't do that unification problem.</p>",
        "id": 164276570,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556296214
    },
    {
        "content": "<p>Oh right; i had thought it appeared in the first one :o</p>",
        "id": 164276580,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556296219
    },
    {
        "content": "<p>what would i do to specify the right type for the <code>rfl</code> (and do I need to?)</p>",
        "id": 164276624,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556296257
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x0</span> <span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_compatible_id&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_compatible_id_lemma</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">has_mul</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"err\">←</span> <span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">has_mul</span> <span class=\"o\">[</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">],</span>\n   <span class=\"n\">α</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">α</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)),</span>\n   <span class=\"n\">i</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">i</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">inst_implicit</span> <span class=\"o\">(</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">),</span>\n   <span class=\"n\">ida</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"err\">←</span> <span class=\"n\">pure</span> <span class=\"err\">$</span> <span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">id</span> <span class=\"o\">[</span><span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">],</span>\n   <span class=\"n\">stmt</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ida</span> <span class=\"n\">α</span><span class=\"o\">],</span>  <span class=\"c1\">-- &lt;-- error here</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl_type</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pis</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">stmt</span><span class=\"o\">,</span>\n\n   <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n   <span class=\"n\">y</span> <span class=\"err\">←</span> <span class=\"n\">mk_local&#39;</span> <span class=\"bp\">`</span><span class=\"n\">y</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n   <span class=\"n\">xy</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n   <span class=\"n\">rf</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"bp\">`</span><span class=\"n\">rfl</span> <span class=\"o\">[</span><span class=\"n\">xy</span><span class=\"o\">],</span>\n   <span class=\"k\">let</span> <span class=\"n\">decl_body</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lambdas</span> <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">rf</span><span class=\"o\">),</span>\n   <span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">thm</span> <span class=\"bp\">`</span><span class=\"n\">id_compatible</span> <span class=\"o\">[]</span> <span class=\"n\">decl_type</span> <span class=\"o\">(</span><span class=\"n\">task</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">decl_body</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- set_option trace.app_builder true</span>\n<span class=\"c1\">-- set_option pp.all true</span>\n<span class=\"c1\">-- set_option formatter.hide_full_terms false</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"o\">{</span>\n  <span class=\"n\">add_compatible_id_lemma</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 164277125,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556296655
    },
    {
        "content": "<p><code>#check id_compatible</code> works for me.</p>",
        "id": 164277207,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556296705
    },
    {
        "content": "<p>Oh great, thanks<br>\nIt turns out these weren't issues with metaprogramming but with understanding the <code>rfl</code>proof :D</p>",
        "id": 164277631,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556297097
    },
    {
        "content": "<p>I really appreciate the helpful atmosphere here, thanks again!!</p>",
        "id": 164277858,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1556297285
    },
    {
        "content": "<p>You can get Lean to do most of the work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x0</span> <span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">x1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x0</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">x1</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_compatible_id&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_compatible_id_lemma</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n   <span class=\"n\">target</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n   <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">mk_mvar</span><span class=\"o\">,</span>\n   <span class=\"n\">gs</span> <span class=\"err\">←</span> <span class=\"n\">get_goals</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n   <span class=\"n\">change</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"n\">intro_lst</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"c1\">-- or just `intron 4`</span>\n   <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n   <span class=\"n\">set_goals</span> <span class=\"n\">gs</span><span class=\"o\">,</span>\n   <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n   <span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">thm</span> <span class=\"bp\">`</span><span class=\"n\">id_compatible</span> <span class=\"o\">[]</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">task</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span> <span class=\"o\">{</span>\n  <span class=\"n\">add_compatible_id_lemma</span>\n<span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">id_compatible</span>\n</pre></div>",
        "id": 164277888,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556297330
    },
    {
        "content": "<p>Can anyone golf this down further?</p>",
        "id": 164278099,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1556297508
    },
    {
        "content": "<p>Try:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_compatible_id_lemma</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">target</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n   <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">solve_aux</span> <span class=\"n\">target</span> <span class=\"err\">$</span> <span class=\"n\">do</span>\n   <span class=\"o\">{</span> <span class=\"n\">intro_lst</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"o\">],</span> <span class=\"c1\">-- or just `intron 4`</span>\n     <span class=\"n\">reflexivity</span> <span class=\"o\">},</span>\n   <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n   <span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">thm</span> <span class=\"bp\">`</span><span class=\"n\">id_compatible</span> <span class=\"o\">[]</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">task</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 164290603,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556306695
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_compatible_id_lemma</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span>\n   <span class=\"n\">target</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">mul_compatible&#39;</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)),</span>\n   <span class=\"n\">g</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"err\">%%</span><span class=\"n\">target</span><span class=\"o\">),</span>\n   <span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">thm</span> <span class=\"bp\">`</span><span class=\"n\">id_compatible</span> <span class=\"o\">[]</span> <span class=\"n\">target</span> <span class=\"o\">(</span><span class=\"n\">task</span><span class=\"bp\">.</span><span class=\"n\">pure</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 164294088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556309439
    },
    {
        "content": "<p>Can your tactics also add docstrings to the new declarations? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is such a thing possible?</p>",
        "id": 164857965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556960163
    },
    {
        "content": "<p>yes, you can programmatically add docstrings to decls</p>",
        "id": 164857988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556960202
    },
    {
        "content": "<p><code>alias</code> does this</p>",
        "id": 164857990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556960213
    },
    {
        "content": "<p>thank you three  for the immediate golfing instinct by the way<br>\nmy real code is for generic <code>has_xyz</code> though where i couldn't use quotations so easily<br>\nany ideas on how to improve this? <a href=\"https://github.com/faabian/mathlib/blob/meta/meta.lean\" target=\"_blank\" title=\"https://github.com/faabian/mathlib/blob/meta/meta.lean\">https://github.com/faabian/mathlib/blob/meta/meta.lean</a></p>",
        "id": 164995149,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1557159297
    },
    {
        "content": "<p>Maybe something like this. It's not much shorter but you don't have to worry about universes anywhere.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">add_compatible_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">):</span> <span class=\"n\">command</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"k\">let</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"err\">$</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"err\">$</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"bp\">`</span><span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">has_x_name</span> <span class=\"o\">:=</span> <span class=\"n\">mk_simple_name</span> <span class=\"o\">(</span><span class=\"s2\">&quot;has_&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n   <span class=\"k\">let</span> <span class=\"n\">has_x_x_name</span> <span class=\"o\">:=</span> <span class=\"n\">has_x_name</span> <span class=\"bp\">&lt;.&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n   <span class=\"n\">has_x</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">has_x_name</span><span class=\"o\">,</span>\n   <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">mk_const</span> <span class=\"n\">has_x_x_name</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">infer_type</span><span class=\"o\">,</span>\n   <span class=\"o\">((</span><span class=\"n\">ty</span> <span class=\"bp\">::</span> <span class=\"n\">cl</span> <span class=\"bp\">::</span> <span class=\"n\">domain</span><span class=\"o\">),</span> <span class=\"n\">codomain</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">mk_local_pis</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">arity</span> <span class=\"o\">:=</span> <span class=\"n\">domain</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">target_self</span> <span class=\"o\">:=</span> <span class=\"n\">codomain</span> <span class=\"bp\">=</span>  <span class=\"n\">ty</span><span class=\"o\">,</span>\n   <span class=\"n\">target_prop</span> <span class=\"err\">←</span> <span class=\"n\">is_prop</span> <span class=\"n\">codomain</span><span class=\"o\">,</span>\n   <span class=\"n\">decl_type</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span><span class=\"err\">%%</span><span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">%%</span><span class=\"n\">has_x</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"err\">%%</span><span class=\"n\">has_x</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n   <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">,</span><span class=\"n\">decl_body</span><span class=\"o\">)</span> <span class=\"err\">←</span> <span class=\"n\">solve_aux</span> <span class=\"n\">decl_type</span> <span class=\"o\">(</span><span class=\"n\">do</span>\n     <span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span><span class=\"n\">β</span><span class=\"o\">,</span><span class=\"n\">i₁</span><span class=\"o\">,</span><span class=\"n\">i₂</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"err\">←</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n     <span class=\"n\">vars</span> <span class=\"err\">←</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">mmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">do</span>\n        <span class=\"n\">refine_forall</span> <span class=\"o\">(</span><span class=\"n\">mk_simple_name</span> <span class=\"o\">(</span><span class=\"s2\">&quot;x&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">α</span>\n     <span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">arity</span><span class=\"o\">,</span>\n     <span class=\"n\">app₁</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">has_x_x_name</span> <span class=\"err\">$</span> <span class=\"n\">vars</span><span class=\"o\">,</span>\n     <span class=\"n\">app₂</span> <span class=\"err\">←</span> <span class=\"n\">mk_app</span> <span class=\"n\">has_x_x_name</span> <span class=\"err\">$</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">vars</span><span class=\"o\">,</span>\n     <span class=\"n\">body_main</span> <span class=\"err\">←</span> <span class=\"k\">if</span> <span class=\"n\">target_self</span> <span class=\"k\">then</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">app₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">app₂</span><span class=\"o\">)</span>\n                  <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">target_prop</span> <span class=\"k\">then</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">app₁</span> <span class=\"bp\">↔</span> <span class=\"err\">%%</span><span class=\"n\">app₂</span><span class=\"o\">)</span>\n                        <span class=\"k\">else</span> <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">app₁</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">app₂</span><span class=\"o\">)),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">body_main</span>\n   <span class=\"o\">),</span>\n   <span class=\"n\">decl_body</span> <span class=\"err\">←</span> <span class=\"n\">instantiate_mvars</span> <span class=\"n\">decl_body</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">decl_name</span> <span class=\"o\">:=</span> <span class=\"n\">mk_simple_name</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;_compatible&quot;</span><span class=\"o\">),</span>\n   <span class=\"n\">add_decl</span> <span class=\"err\">$</span> <span class=\"n\">mk_definition</span> <span class=\"n\">decl_name</span> <span class=\"o\">(</span><span class=\"n\">collect_univ_params</span> <span class=\"n\">decl_type</span><span class=\"o\">)</span> <span class=\"n\">decl_type</span> <span class=\"n\">decl_body</span>  <span class=\"c1\">-- universes here</span>\n   <span class=\"c1\">-- todo: allow both → and ↔ for Prop-valued?</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_compatible_def</span> <span class=\"s2\">&quot;mul&quot;</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_compatible_def</span> <span class=\"s2\">&quot;ternary&quot;</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_compatible_def</span> <span class=\"s2\">&quot;lt&quot;</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_compatible_def</span> <span class=\"s2\">&quot;to_string&quot;</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">mul_compatible</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">ternary_compatible</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">lt_compatible</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">to_string_compatible</span>\n</pre></div>",
        "id": 165011664,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1557171217
    },
    {
        "content": "<p>I defined <code>refine_forall</code> as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Take a goal `⊢ Prop` and fill with a `pi` to get a new goal `n : type ⊢ Prop` -/</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">refine_forall</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n    <span class=\"n\">f_type</span> <span class=\"err\">←</span> <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">type</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n    <span class=\"n\">f</span> <span class=\"err\">←</span> <span class=\"n\">mk_meta_var</span> <span class=\"n\">f_type</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">pi</span> <span class=\"n\">n</span> <span class=\"n\">binder_info</span><span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"n\">type</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">))),</span>\n    <span class=\"n\">set_goals</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 165012010,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1557171454
    },
    {
        "content": "<p>Your code looks fine. If you are having to explicitly write out universe terms then Lean probably provides a tactic that means you don't have to.</p>",
        "id": 165012161,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1557171551
    },
    {
        "content": "<p>I prefer always having local variables held in the tactic_state's context rather than using <code>mk_local</code> and friends. This is because you don't have to worry about pretty names and unique names etc. But there is nothing wrong with the <code>mk_local</code> way.</p>",
        "id": 165013654,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1557172671
    },
    {
        "content": "<p>There should be a way to replace <code>count_vars</code>, <code>arrow_list</code>, with <code>tactic.mk_local_pis</code>, <code>tactic.get_pi_arity</code> and so on. They are in <code>/library/init/meta/tactic.lean</code> and <code>expr.lean</code>.</p>",
        "id": 165014729,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1557173478
    },
    {
        "content": "<p>This has been a good exercise for me. Here are some problems that I had:<br>\n- If I write  <code>to_expr ```(Π {α β}, ...</code> it makes a new universe metavariable. Then I get told off for trying to make a decl with a metavariable in it. I couldn't find a nice way of telling the tactic_state to turn all remaining universe metas in to universe parameters instead. Am I not seeing the tactic? <br>\n- <code>refine_forall</code> (and <code>refine_pi</code>) is a utility function that I use a lot and find really useful. Is there a version of this in mathlib or core?<br>\n- Is it better to use <code>mk_local_pis</code> and <code>expr.pis</code> or to wrap things in tactics?</p>",
        "id": 165017839,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1557175903
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> for your tricks, that solved my universe issues!</p>",
        "id": 166707817,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1559044083
    },
    {
        "content": "<p>No problem!</p>",
        "id": 166707831,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1559044097
    }
]