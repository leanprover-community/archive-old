[
    {
        "content": "<p>Is there a way of doing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span>         <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d</span>         <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foobar</span> <span class=\"kd\">extends</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">δ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">the_foobar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foobar</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>without doing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span>         <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">d</span>         <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">foobar</span> <span class=\"kd\">extends</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">δ</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">the_foobar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foobar</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a.to_fun</span><span class=\"o\">,</span> <span class=\"n\">a.g</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>?</p>",
        "id": 240626288,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1622218217
    },
    {
        "content": "<p><code>def the_foobar (a : foo α β γ) (d : δ) : foobar α β γ δ := {d:=d, ..a}</code> is the best I know, not sure if it works with anonymous constructors</p>",
        "id": 240626513,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622218325
    },
    {
        "content": "<p>you can even do things like <code>def the_foobar (a : foo α β γ) (d : bar α β δ) : foobar α β γ δ := {..d, ..a}</code></p>",
        "id": 240626599,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1622218376
    },
    {
        "content": "<p>Ok thanks right I don't know why that did not come to my mind...</p>",
        "id": 240629480,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1622219895
    }
]