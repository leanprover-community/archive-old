[
    {
        "content": "<p>This is my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.interval</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">Function definitions-/</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">deriv</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Dn</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">D</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">D</span> <span class=\"bp\">∘</span> <span class=\"n\">Dn</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(((</span><span class=\"n\">Dn</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">Dn</span> <span class=\"n\">p</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Dnfu</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Dn</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Dn</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Dnfu</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>The output of <code>#check Dn 1 (f ∘ u)</code> is <code>Dn 1 (f ∘ u) : ℝ → ℝ</code>, which is what I'm expecting. However, <code>#check Dnfu 1</code> outputs <code>Dnfu 1 : (ℝ → ℝ) → ℕ → ℝ → ℝ</code>. Why is that?</p>",
        "id": 320354206,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673308686
    },
    {
        "content": "<p>It's because you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so <code>Dnfu (f : ℝ → ℝ) (u : ℝ → ℝ) (n : ℕ) : ℝ → ℝ := ...</code></p>",
        "id": 320354558,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673308869
    },
    {
        "content": "<p>Note that lean can interpret the symbol <code>1</code> as quite a lot of things, and in this case, it's interpreting it as a function <code>ℝ → ℝ</code>.</p>",
        "id": 320354735,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673308928
    },
    {
        "content": "<p>while neither <code>f</code> nor <code>u</code> are mentioned in the body of <code>def Dn</code>, so they are not inferred to be variables/arguments of that function.</p>",
        "id": 320354746,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673308933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/I.20can't.20make.20sense.20of.20this.20error/near/320354735\">said</a>:</p>\n<blockquote>\n<p>Note that lean can interpret the symbol <code>1</code> as quite a lot of things, and in this case, it's interpreting it as a function <code>ℝ → ℝ</code>.</p>\n</blockquote>\n<p>Wait, really? How do I just write \"one\"</p>",
        "id": 320354879,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673309010
    },
    {
        "content": "<p>As Yakov said, the first argument to <code>Dnfu</code>is actually <code>f</code>.</p>",
        "id": 320354916,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673309034
    },
    {
        "content": "<p><code>#check Dnfu f u 1</code></p>",
        "id": 320354917,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673309035
    },
    {
        "content": "<p>Oh, so it still expects <code>f</code> and <code>u</code> even though they aren't arguments of <code>Dnfu</code>?</p>",
        "id": 320355219,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673309204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/I.20can't.20make.20sense.20of.20this.20error/near/320354558\">said</a>:</p>\n<blockquote>\n<p>It's because you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so <code>Dnfu (f : ℝ → ℝ) (u : ℝ → ℝ) (n : ℕ) : ℝ → ℝ := ...</code></p>\n</blockquote>\n<p>because <code>f</code> and <code>u</code> are mentioned in the body of <code>Dnfu</code>. How could <code>f</code> and <code>u</code> not be arguments of <code>Dnfu</code> if they're mentioned in the body?</p>",
        "id": 320355234,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1673309219
    },
    {
        "content": "<p>Actually, lean detects that they <em>are</em> arguments! The keyword <code>variable</code> makes <code>f</code> and <code>u</code> parameters to any function that uses them.</p>",
        "id": 320355282,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673309255
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/I.20can't.20make.20sense.20of.20this.20error/near/320355282\">said</a>:</p>\n<blockquote>\n<p>Actually, lean detects that they <em>are</em> arguments! The keyword <code>variable</code> makes <code>f</code> and <code>u</code> parameters to any function that uses them.</p>\n</blockquote>\n<p>Oh, is there a way to make them just \"arbitrary\" functions? As some sort of constant</p>",
        "id": 320355504,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673309366
    },
    {
        "content": "<p>This is the correct way to do that.</p>",
        "id": 320355551,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673309393
    },
    {
        "content": "<p>A \"constant in the environment\" is exactly the same as a parameter to a function.</p>",
        "id": 320355613,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673309406
    },
    {
        "content": "<p>But when you used these functions in <code>#check</code>, lean didn't know if you really wanted to use the <code>f</code> from the environment or some other <code>f</code>.</p>",
        "id": 320355712,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673309469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/113489-new-members/topic/I.20can't.20make.20sense.20of.20this.20error/near/320355712\">said</a>:</p>\n<blockquote>\n<p>But when you used these functions in <code>#check</code>, lean didn't know if you really wanted to use the <code>f</code> from the environment or some other <code>f</code>.</p>\n</blockquote>\n<p>Ok, it's making sense now. How do I tell <code>#check</code> that I want to use the same <code>f</code> without having to pass it as a parameter?</p>",
        "id": 320355845,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673309542
    },
    {
        "content": "<p>I don't know of an easy way to do this. Most of the time, you won't be using <code>#check</code>, so this isn't usually a problem.</p>",
        "id": 320355883,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673309569
    },
    {
        "content": "<p>I mean, you'll only use <code>#check</code> while testing.</p>",
        "id": 320355898,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673309580
    },
    {
        "content": "<p>When you're writing theorems, you don't need to pass <code>f</code> explicitly.</p>",
        "id": 320355983,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1673309633
    },
    {
        "content": "<p>Ok, I think I can live with that.</p>",
        "id": 320356043,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673309649
    },
    {
        "content": "<p>Thanks for the help, Sky and Yakov</p>",
        "id": 320356071,
        "sender_full_name": "Icaro Costa",
        "timestamp": 1673309665
    }
]