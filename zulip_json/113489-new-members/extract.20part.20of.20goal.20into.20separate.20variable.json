[
    {
        "content": "<p>I can only find this being used in mathlib in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.gal.card_complex_roots_eq_card_real_add_card_not_gal_inv\">docs#polynomial.gal.card_complex_roots_eq_card_real_add_card_not_gal_inv</a>, it definitely should be in the tips and tricks page</p>",
        "id": 277963854,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649206950
    },
    {
        "content": "<p>We use it quite frequently in LTE.</p>",
        "id": 277964007,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649207102
    },
    {
        "content": "<p>I'm running into one other roadblock with the above code... trying to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">),</span> <span class=\"n\">beth</span> <span class=\"n\">o</span> <span class=\"bp\">≥</span> <span class=\"n\">aleph</span> <span class=\"n\">o</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and Lean isn't happy about universes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">aleph</span> <span class=\"n\">o</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">o</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ordinal.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I tried changing <code>ordinal</code> to <code>ordinal.{max (u+1) v}</code> but that just led to this new error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">aleph</span> <span class=\"n\">o</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">o</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">ordinal.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">ordinal.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there any way I can get past this? Do I need to modify my definition of <code>beth</code> to explicitly declare universe variables?</p>",
        "id": 277968318,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1649212034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380294\">Matt Diamond</span> has marked this topic as unresolved.</p>",
        "id": 277968328,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649212057
    },
    {
        "content": "<p>I think you won't get the universe issue with the definition <code>beth'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">beth'</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">ordinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ordinal.limit_rec_on</span> <span class=\"n\">o</span>\n  <span class=\"o\">(</span><span class=\"n\">cardinal.aleph</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">lim</span> <span class=\"n\">_</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">lim.brange</span> <span class=\"n\">IH</span><span class=\"o\">))</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"n\">beth</span>\n<span class=\"k\">#check</span> <span class=\"n\">beth'</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">beth.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span>\n<span class=\"n\">beth'.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>(Notice that you need <code>bdd_above</code>(using the disjoint union / Sigma type) for <code>Sup</code> to be well behaved: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_cSup\">docs#le_cSup</a> )</p>\n<p>I think it's good in this case to specify explicit universes like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">def</span> <span class=\"n\">beth'</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">ordinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 277977804,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649223824
    },
    {
        "content": "<p>The universe issue with your approach is that the indexing type <code>ι</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">cardinal.sup</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is <code>{ o // o &lt; lim } : Type (u_1+1)</code>.</p>",
        "id": 277978224,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649224406
    }
]