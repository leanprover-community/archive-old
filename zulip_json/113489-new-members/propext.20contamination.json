[
    {
        "content": "<p>Hi there, I recently found that some of my theorems written in Lean 3 accidentally depend on <code>propext</code>.<br>\nAfter some research, I discovered that one source of the dependency is simplification of <code>ite</code>; the following is MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">test3</span>\n</code></pre></div>\n<p>I wonder why this happens and how to void it.<br>\nIn fact, <code>test3</code> above can be proved simply by <code>rfl</code>.</p>",
        "id": 249813486,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1629269156
    },
    {
        "content": "<p>You can see which lemmas were used by <code>simp</code> by using <code>simp?</code>. In this case it's:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">if_congr</span>\n<span class=\"n\">if_true</span>\n<span class=\"n\">eq_self_iff_true</span>\n</code></pre></div>\n<p>I'm guessing one of those uses <code>propext</code>.</p>",
        "id": 249815532,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629271136
    },
    {
        "content": "<hr>\n<p>Well, apparently not ^^</p>",
        "id": 249815661,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629271213
    },
    {
        "content": "<p>Doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>doesn't involve <code>propext</code>. So I'm guessing it just turns up as part of whatever <code>simp</code> is doing.</p>",
        "id": 249816067,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629271527
    },
    {
        "content": "<hr>\n<p>If you <code>#print</code> your version of <code>test3</code> it also shows you where the <code>propext</code> is used:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">id</span>\n   <span class=\"o\">(((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_2</span> <span class=\"o\">:</span> <span class=\"n\">ᾰ</span> <span class=\"bp\">=</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">),</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">eq</span> <span class=\"n\">e_1</span><span class=\"o\">)</span> <span class=\"n\">e_2</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n       <span class=\"mi\">1</span>\n       <span class=\"o\">((</span><span class=\"n\">if_congr</span> <span class=\"o\">(</span><span class=\"n\">eq_self_iff_true</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"mi\">0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">if_true</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n       <span class=\"mi\">1</span>\n       <span class=\"mi\">1</span>\n       <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">propext</span> <span class=\"o\">(</span><span class=\"n\">eq_self_iff_true</span> <span class=\"mi\">1</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 249816192,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629271614
    },
    {
        "content": "<p><code>simp</code> uses <code>propext</code> to turn iff theorems into rewrite rules</p>",
        "id": 249816626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629272034
    },
    {
        "content": "<p>that is, when you give it a lemma like <code>eq_self_iff_true</code> i.e. <code>x = x &lt;-&gt; true</code> and mark it <code>@[simp]</code> it treats it like <code>(x = x) = true</code></p>",
        "id": 249816689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629272080
    },
    {
        "content": "<p>this is a matter of implementation convenience - simp could work with multiple relations but it's more complicated to do so (I think it has limited support for this but for the most part rewrites only use <code>=</code>)</p>",
        "id": 249816787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629272164
    },
    {
        "content": "<p><code>rw</code> will do the same thing</p>",
        "id": 249816847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629272206
    },
    {
        "content": "<p>Thank you guys for valuable information.<br>\nI found that <code>tactic.simp_config</code> has <code>use_axioms</code> field with default value <code>tt</code>, so setting it to <code>ff</code> does the trick.<br>\ne.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"o\">{</span><span class=\"n\">use_axioms</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">}</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">test3</span>   <span class=\"c1\">-- no axioms</span>\n</code></pre></div>",
        "id": 249818058,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1629273148
    },
    {
        "content": "<p>By the way, is it possible to set this configuration to be default in local?</p>",
        "id": 249818378,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1629273413
    },
    {
        "content": "<p>No, but you can make your own <code>simp'</code> tactic that defers most arguments to <code>simp</code> but sets the configuration differently</p>",
        "id": 249818792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629273737
    },
    {
        "content": "<p>Ah, that makes sense. Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 249819035,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1629273920
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">interactive</span> <span class=\"n\">lean.parser</span> <span class=\"n\">interactive.types</span>\n<span class=\"kn\">local</span> <span class=\"kd\">postfix</span> <span class=\"bp\">`?`</span><span class=\"o\">:</span><span class=\"mi\">9001</span> <span class=\"o\">:=</span> <span class=\"n\">optional</span>\n<span class=\"kn\">local</span> <span class=\"kd\">postfix</span> <span class=\"bp\">*</span><span class=\"o\">:</span><span class=\"mi\">9001</span> <span class=\"o\">:=</span> <span class=\"n\">many</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">simp'</span> <span class=\"o\">(</span><span class=\"n\">use_iota_eqn</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">trace_lemmas</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"?\"</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">no_dflt</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">only_flag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">attr_names</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">simp_config_ext</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">simp</span> <span class=\"n\">use_iota_eqn</span> <span class=\"n\">trace_lemmas</span> <span class=\"n\">no_dflt</span> <span class=\"n\">hs</span> <span class=\"n\">attr_names</span> <span class=\"n\">locat</span> <span class=\"o\">{</span><span class=\"n\">cfg</span> <span class=\"k\">with</span> <span class=\"n\">use_axioms</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp'</span> <span class=\"bp\">*</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">test3</span>   <span class=\"c1\">-- no axioms</span>\n</code></pre></div>",
        "id": 249819140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629273999
    }
]