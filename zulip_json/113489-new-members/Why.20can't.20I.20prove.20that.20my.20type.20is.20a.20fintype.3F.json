[
    {
        "content": "<p>I am trying to formalize some results on context free grammars. I am trying to construct a grammar using inductive types, and one of the conditions for a context free grammar is that the rules are finite. Consider the following example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">sum</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">v</span> <span class=\"bp\">|</span> <span class=\"n\">s</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">t</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">rs</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">⊕</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">r1</span> <span class=\"o\">:</span> <span class=\"n\">rs</span> <span class=\"n\">v.s</span> <span class=\"o\">[</span><span class=\"n\">inr</span> <span class=\"n\">t.a</span><span class=\"o\">,</span> <span class=\"n\">inl</span> <span class=\"n\">v.s</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"n\">t.b</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">r2</span> <span class=\"o\">:</span> <span class=\"n\">rs</span> <span class=\"n\">v.s</span> <span class=\"o\">[</span><span class=\"n\">inr</span> <span class=\"n\">t.a</span><span class=\"o\">,</span> <span class=\"n\">inr</span> <span class=\"n\">t.b</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">rs</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  fintype rs</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  rs</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  v → list (v ⊕ t) → Prop : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type ? : Type (?+1)</span>\n<span class=\"cm\"> -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Can someone help me understand what is going wrong here?</p>",
        "id": 266621228,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1641140431
    },
    {
        "content": "<p>too bad I don't speak computer science even though I'm a programmer <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> but <code>fintype rs</code> looks very very wrong to me, can you explain what you mean by that?</p>\n<p>the reason you're getting the error is because <code>rs</code> lives in the Prop universe but fintype doesn't accept that</p>",
        "id": 266621425,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1641140730
    },
    {
        "content": "<p><code>fintype</code> looks rights, but what you're trying to feed it looks wrong.</p>",
        "id": 266621589,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641140944
    },
    {
        "content": "<p>In the lean the amount of introduction rules of all inductive types are all finite. <code>fintype</code> formalizes another concept, namely that you can only construct finitely many distinct values of that type which is different of what you are trying to show <span class=\"user-mention\" data-user-id=\"370446\">@Saif Ghobash</span></p>",
        "id": 266621599,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641140955
    },
    {
        "content": "<p>I would hazard guess that what you want is <code>fintype {x : v × list (v ⊕ t) // rs x.1 x.2}</code>.</p>",
        "id": 266621675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641141034
    },
    {
        "content": "<p>That would be the statement that the language is finite though, not that the amount of rules is finite (which as I explained is trivially true) right?</p>",
        "id": 266621699,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641141076
    },
    {
        "content": "<p>Okay, then I don't know how to do that!</p>",
        "id": 266621718,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641141119
    },
    {
        "content": "<p>I don't exactly know what you mean by \"rule\" here, because if it's the stricto sensu introduction rules then there are two, just by reading the code.</p>",
        "id": 266621804,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641141221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20can't.20I.20prove.20that.20my.20type.20is.20a.20fintype.3F/near/266621425\">said</a>:</p>\n<blockquote>\n<p>the reason you're getting the error is because <code>rs</code> lives in the Prop universe but fintype doesn't accept that</p>\n</blockquote>\n<p>This is wrong. It lives in <code>v → list (v ⊕ t) → Prop</code>, not in <code>Prop</code>, and is expected to live in <code>Type*</code>.</p>",
        "id": 266621894,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641141324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Why.20can't.20I.20prove.20that.20my.20type.20is.20a.20fintype.3F/near/266621804\">said</a>:</p>\n<blockquote>\n<p>I don't exactly know what you mean by \"rule\" here, because if it's the stricto sensu introduction rules then there are two, just by reading the code.</p>\n</blockquote>\n<p>If you really wanted to prove that statement you could probably do a meta proof about the lean type theory itself though although that seems like overkill...</p>",
        "id": 266621960,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1641141380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I think this is also why <code>rs</code> isn't a <code>fintype</code> right? Because there are infinitely many functions for <code>v -&gt; list (sum v t) -&gt; Prop</code>.</p>",
        "id": 266621980,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1641141432
    },
    {
        "content": "<p>The error message says everything: <code>fintype rs</code> <strong>does not make sense</strong>. <code>rs</code> is a function, not a type. What you might be confused by is that <code>v → list (v ⊕ t) → Prop</code> is itself a type, but what we're interested in is the fact that its terms are themselves types.</p>",
        "id": 266622042,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641141549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"370446\">@Saif Ghobash</span> Are you trying to express:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">S</span> <span class=\"o\">::=</span> <span class=\"n\">a</span> <span class=\"n\">S</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>with <code>rs</code>?</p>",
        "id": 266622279,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1641141900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span>  yes that is what I am trying to express</p>",
        "id": 266622307,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1641141954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Yes essentially that is what I was confused by, v → list (v ⊕ t) → Prop is a type, so I was confused as to why I could prove that it is a fintype, I see now why it does not make any sense to show that rs is a fintype.</p>",
        "id": 266622439,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1641142128
    },
    {
        "content": "<p>In order to state that the set of rules is finite, you need a type which enumerates the rules. I think you want something like<br>\n<code>inductive r | r1 | r2</code> (which you can prove is a <code>fintype</code>)<br>\nand then a function <code>r -&gt; (v × list (v ⊕ t))</code> (or two separate functions) which encodes the contents of the rules.</p>",
        "id": 266622510,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641142211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I think that makes more sense here. I'll try that, thank you!</p>",
        "id": 266622553,
        "sender_full_name": "Saif Ghobash",
        "timestamp": 1641142285
    }
]