[
    {
        "content": "<p>the expression</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>introduces a weird forall, and the expression</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>gives an error at the third multiplication symbol. Why is this happening and how can it be avoided?</p>",
        "id": 198822191,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590527475
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 198822487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590527591
    },
    {
        "content": "<p>Probably adding parentheses will help</p>",
        "id": 198822510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590527613
    },
    {
        "content": "<p>I don't know how <code>*</code>, <code>→</code> and <code>=</code> bind... but I guess not the way we're hoping (-;</p>",
        "id": 198822555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590527641
    },
    {
        "content": "<p>parentheses don't seem to change anything:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>this still gives the error<br>\ntype mismatch at application<br>\n  has_mul.mul a<br>\nterm<br>\n  a<br>\nhas type<br>\n  a * b = a * b : Prop<br>\nbut is expected to have type<br>\n  ?m_1 : Type ?</p>",
        "id": 198822657,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590527673
    },
    {
        "content": "<p>Aha, the \"a\" bug</p>",
        "id": 198822838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590527800
    },
    {
        "content": "<p>For reference,</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n</code></pre></div>\n\n\n<p>gives a state with the goal</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">a_1</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span>\n</code></pre></div>",
        "id": 198822849,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590527813
    },
    {
        "content": "<p>The <code>a</code> bug! Long time no see</p>",
        "id": 198822918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590527867
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(((</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))),</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198822924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590527869
    },
    {
        "content": "<p>For some reason, only in tactic mode, <code>have h : a * b = a * b → a = a</code> means <code>have h : \\Pi (a : a * b = a * b), a = a</code></p>",
        "id": 198822933,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590527880
    },
    {
        "content": "<p>this is pretty wild</p>",
        "id": 198822977,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1590527889
    },
    {
        "content": "<p>Gaabrieeeel?</p>",
        "id": 198823000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590527913
    },
    {
        "content": "<p>I've been meaning to change the implicit <code>H</code> to <code>_H</code> or something, but I totally forgot about this one.</p>",
        "id": 198823016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590527930
    },
    {
        "content": "<p>I think it should be renamed to <code>\\Pi (a_bug : etc...)</code></p>",
        "id": 198823042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590527958
    },
    {
        "content": "<p>Wow, so is this only a problem because <code>a</code> is the default name? Funny (and horrifying).</p>",
        "id": 198823065,
        "sender_full_name": "Pedro Minicz",
        "timestamp": 1590527978
    },
    {
        "content": "<p>so I guess I'll just do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rename</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n</code></pre></div>\n\n\n<p>weird</p>",
        "id": 198823222,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1590528057
    },
    {
        "content": "<p>Is it the same as <a href=\"https://github.com/leanprover-community/lean/issues/130\">lean#130</a>?</p>",
        "id": 198823224,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590528060
    },
    {
        "content": "<p>This won't let you prove <code>false</code> however</p>",
        "id": 198823225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590528060
    },
    {
        "content": "<p>I'm writing this because Pedro comes from Coq where bugs usually let you prove <code>false</code>.</p>",
        "id": 198823298,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590528115
    },
    {
        "content": "<p>Does this variable even get a name at all when in term mode?</p>",
        "id": 198823304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590528117
    },
    {
        "content": "<p>Soon Sebastian will come here and tell us everything about hygiene</p>",
        "id": 198823383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590528151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/have.20giving.20error/near/198823224\">said</a>:</p>\n<blockquote>\n<p>Is it the same as <a href=\"https://github.com/leanprover-community/lean/issues/130\">lean#130</a>?</p>\n</blockquote>\n<p>No, that's the <code>H</code> bug :-) The <code>a</code> bug is <a href=\"https://github.com/leanprover-community/mathlib/issues/1285\">#1285</a></p>",
        "id": 198834091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590535675
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>  I meant \"the same\" in a very loose sense, of course. Definitely much looser than \"the mathematician's equals\".</p>",
        "id": 198836293,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590537565
    },
    {
        "content": "<p>Coq adds some numeric suffix to the name of the new variable in cases like these two.</p>",
        "id": 198839333,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590540347
    },
    {
        "content": "<p>Amusingly, if I recall correctly, Agda sometimes disambiguates by incrementing numbers at the end of identifiers - can lead to confusion with terms called <code>a=1</code> and that kind of thing</p>",
        "id": 198846502,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590550302
    },
    {
        "content": "<p>Lean does this too, but the sequence is something like <code>a</code> <code>a_2</code> <code>a_3</code> ...</p>",
        "id": 198847629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590552221
    },
    {
        "content": "<p>AFAIR coq takes the next <em>unused</em> name from the sequence.</p>",
        "id": 198847757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590552392
    },
    {
        "content": "<p>It has something like <code>mk_fresh_name prefix</code> (not sure about name).</p>",
        "id": 198847760,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590552412
    },
    {
        "content": "<p>I think lean also has something like this, but it isn't used in all circumstances, and this is one of them</p>",
        "id": 198847768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590552433
    }
]