[
    {
        "content": "<p>Hi, I'm Lucy, I'm getting into Lean in preparation for it being the <a href=\"https://codegolf.meta.stackexchange.com/questions/23916/language-of-the-month-for-october-2021-lean\">PPCG SE's language of the month</a> for October. I was particularly interested in Lean because I have some experience with Agda, and experience in formal logic more generally (though I'm a little rusty). I was working through the natural number game and was messing around trying to prove commutativity of addition without the lemmas proved earlier in addition world. When attempting to construct a proof, I attempted to perform induction inside the induction step of another induction, the induction step turned out to be this (<code>hd</code> is the hypothesis from the outer induction, <code>id</code> is the hypothesis from the inner induction):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">i</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>I was confused as to why <code>id</code> required <code>i + h = h + i</code> as a prior, which seems like it would make <code>id</code>, and therefore the second use of induction, useless to me in proving the goal. I was wondering if anyone could clarify why nested induction behaves like this, and how to mitigate it.</p>",
        "id": 255910355,
        "sender_full_name": "Lucy",
        "timestamp": 1633221846
    },
    {
        "content": "<p>I'm not sure exactly what your goal or proof-so-far is (can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?) but often the advice in this situation is that when you do the <em>first</em> induction you need with write something like <code>induction x generalizing y</code> (where <code>y</code> is the thing you're planning on doing the second induction on).</p>",
        "id": 255910676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633222207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448243\">@Lucy</span> </p>\n<p>The induction tactic isn't inferring the motive you want (In lean 3, it's the thing labelled <code>C</code> in the recursor). It's inferring it as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x.succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x.succ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>when you probably want it to be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">x.succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x.succ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You can control the motive yourself by using rec/rec_on manually instead of using the induction tactic, but I think this isn't recommended in the general case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">{</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">nat.rec_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">x.succ</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x.succ</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.add_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_add</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 255926896,
        "sender_full_name": "Chris B",
        "timestamp": 1633240671
    },
    {
        "content": "<p>Or maybe you want a different motive, what was your strategy for proving it by using induction twice without other lemmas?</p>",
        "id": 255927326,
        "sender_full_name": "Chris B",
        "timestamp": 1633241136
    },
    {
        "content": "<p>I think I agree with Chris's suggestion that it's not such a great idea to avoid using all other lemmas and to do a double induction, but it does work:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mynat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ih</span> <span class=\"n\">generalizing</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">ih'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih'</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">ih'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ih'</span><span class=\"o\">],</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">add</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ih</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 255931694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633246120
    }
]