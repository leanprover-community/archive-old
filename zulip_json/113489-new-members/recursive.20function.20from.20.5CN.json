[
    {
        "content": "<p>Hi, I've defined this function as<code>pos_num \\to \\Z</code>, but can't figure out how to define it from <code>\\N to \\Z</code> without going through pos_num</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">J_joseph</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pos_num</span><span class=\"bp\">.</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">J_joseph</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>     <span class=\"c1\">-- J(2*n)   = 2*J(n) - 1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pos_num</span><span class=\"bp\">.</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">J_joseph</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>     <span class=\"c1\">-- J(2*n+1) = 2*J(n) + 1</span>\n</code></pre></div>",
        "id": 199581818,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591163371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308587\">@Li Xuanji</span> What is <code>pos_num</code>?</p>",
        "id": 199582162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591163912
    },
    {
        "content": "<p>binary positive natural numbers</p>",
        "id": 199582171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591163938
    },
    {
        "content": "<p>I can guess... that it's positive numbers <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> But I've never seen that type before</p>",
        "id": 199582173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591163942
    },
    {
        "content": "<p>Aah... <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span></p>",
        "id": 199582177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591163946
    },
    {
        "content": "<p>it's in mathlib</p>",
        "id": 199582178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591163948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308587\">@Li Xuanji</span> I don't think it's easy to define that as function on <code>\\N</code> using recursion. But you can use <code>if .. then .. else ..</code></p>",
        "id": 199582241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591164031
    },
    {
        "content": "<p>You can use <code>nat.binary_rec_on</code> to do binary definitions on <code>nat</code> directly</p>",
        "id": 199582251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591164050
    },
    {
        "content": "<p>I guess I can go back to bed... I've already learned enough new stuff for a day, and I haven't even had breakfast yet.</p>",
        "id": 199582283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591164096
    },
    {
        "content": "<p>thanks!</p>",
        "id": 199582343,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591164149
    },
    {
        "content": "<p>wait where's binary_rec_on defined?</p>",
        "id": 199582402,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591164234
    },
    {
        "content": "<p>ah I guess it got renamed to <code>binary_rec</code></p>",
        "id": 199582449,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591164262
    },
    {
        "content": "<p>Alternatively:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"bp\">.</span><span class=\"n\">lemmas</span>\n\n<span class=\"n\">def</span> <span class=\"n\">J_joseph</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pos_num</span><span class=\"bp\">.</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">J_joseph</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>     <span class=\"c1\">-- J(2*n)   = 2*J(n) - 1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pos_num</span><span class=\"bp\">.</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">J_joseph</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>     <span class=\"c1\">-- J(2*n+1) = 2*J(n) + 1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">J_joseph₁</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">J_joseph</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ&#39;</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">20</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">J_joseph₁</span>\n<span class=\"c1\">-- [0, 1, 1, 3, 1, 3, 5, 7, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">J_joseph₂</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"mi\">20</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">J_joseph₂</span>\n<span class=\"c1\">-- [0, 1, 1, 3, 1, 3, 5, 7, 1, 3, 5, 7, 9, 11, 13, 15, 1, 3, 5, 7]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">J_joseph₁</span> <span class=\"bp\">=</span> <span class=\"n\">J_joseph₂</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>can you prove it?</p>",
        "id": 199582718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591164603
    },
    {
        "content": "<p>yeah, I'm trying to prove the same closed form of J_joseph</p>",
        "id": 199582979,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591164915
    },
    {
        "content": "<p>but I found that some of the tactics I learned for nat doesn't work for pos_num</p>",
        "id": 199582987,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591164939
    },
    {
        "content": "<p>You can also use <code>nat.binary_rec</code> for doing induction in binary</p>",
        "id": 199582997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591164955
    },
    {
        "content": "<p>induction on <code>pos_num</code> should work fine</p>",
        "id": 199583045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591164965
    },
    {
        "content": "<p>yeap induction worked</p>",
        "id": 199583058,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591165004
    },
    {
        "content": "<p>let me look up what failed</p>",
        "id": 199583062,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591165009
    },
    {
        "content": "<p>sry that took a while; I wanted to do <code>cases n</code> to prove the goal</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">pos_num</span><span class=\"bp\">.</span><span class=\"n\">of_nat_succ</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">pos_num</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 199583657,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591165817
    },
    {
        "content": "<p>with your definition of <code>J_joseph₁ </code> it works much better</p>",
        "id": 199584009,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591166195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I learnt about <code>pos_num</code> at Lean Together 2019 during the dinner. I sat next to Seul Baek and my initial reaction was \"oh no, a computer scientist, whatever do we have in common to talk about?\" but then we got talking about easy automation and then about proofs involving naturals, and then I went back to my hotel room and spent some time looking at this part of mathlib. At some point in the dinner I realised that it was a theorem that \"column addition\" (as taught to an 9 year old) agreed with natural number game addition, and after the dinner I went back to my hotel room and proved that the canonical map from posnum to nat was a morphism of additive semigroups.</p>",
        "id": 199585290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591167668
    },
    {
        "content": "<p>It's a proof that the addition beloved of computer scientists is actually the correct addition!</p>",
        "id": 199585319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591167706
    },
    {
        "content": "<p>don't think I'll get to it anytime soon, but the next recurrence to formalize is like J_joseph except using other bases</p>",
        "id": 199587725,
        "sender_full_name": "Li Xuanji",
        "timestamp": 1591169839
    },
    {
        "content": "<p>Unfortunately I don't think mathlib can help you that much for other bases. I think there is a definition of digits somewhere? But mostly you can just do strong recursion on nat using that <code>n / b &lt; n</code>.</p>",
        "id": 199588703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591170581
    },
    {
        "content": "<p>Yup <code>digits</code> was added recently.</p>",
        "id": 199588770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591170609
    },
    {
        "content": "<p>Actually, I think <code>digits</code> is still languishing in a PR I apparently abandoned: <a href=\"https://github.com/leanprover-community/mathlib/issues/2686\">#2686</a></p>",
        "id": 199592589,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591173225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Are you planning on unabandoning it in the near future?</p>",
        "id": 199593389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591173747
    },
    {
        "content": "<p>I have to admit it doesn't feel very high priority. But I think the suggestions were all easy to implement so the guilt will get to me at some point.</p>",
        "id": 199593444,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591173792
    },
    {
        "content": "<p>Otherwise, just label it with <code>please-adopt</code>. (You can adopt it yourself, when the guilt catches up.)</p>",
        "id": 199593532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591173847
    },
    {
        "content": "<p>Do we already have a version of <a href=\"https://en.wikipedia.org/wiki/Lucas%27s_theorem\">https://en.wikipedia.org/wiki/Lucas%27s_theorem</a>? That would make this PR more compelling (not that it should be included in this PR, but as possible future work).</p>",
        "id": 199608930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591184908
    },
    {
        "content": "<p>I don't think we have that</p>",
        "id": 199610404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591185931
    },
    {
        "content": "<p>I had something about digits too which i don't think I ever finished. Maybe <span class=\"user-mention\" data-user-id=\"132603\">@Calle Sönne</span> was also involved?</p>",
        "id": 199640882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591201067
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Kummer%27s_theorem\">https://en.wikipedia.org/wiki/Kummer%27s_theorem</a> is what you want for recreational purposes</p>",
        "id": 199641021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591201120
    },
    {
        "content": "<p>(olympiads etc)</p>",
        "id": 199641066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591201135
    }
]