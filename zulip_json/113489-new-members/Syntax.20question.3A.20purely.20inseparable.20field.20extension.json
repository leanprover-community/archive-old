[
    {
        "content": "<p>I am trying to define the notion of an inseparable field extension. Here is my attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> An element in a char. p field extension is purely inseparable if some p-power of it</span>\n<span class=\"cm\">lies in the smaller field. https://stacks.math.columbia.edu/tag/09HE -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">elem_purely_inseparable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ι</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extension_purely_inseparable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">elem_purely_inseparable</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>However, the last line doesn't work, I get an error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→+*</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>What does that mean and how do I fix it? Thanks!</p>",
        "id": 227488587,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614108274
    },
    {
        "content": "<p>Lean doesn't know what the <code>p</code> in <code>elem_purely_inseparable x</code> should be</p>",
        "id": 227488672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1614108319
    },
    {
        "content": "<p>you should make <code>p</code> an explicit argument</p>",
        "id": 227488695,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1614108336
    },
    {
        "content": "<p>OK, thanks. I'm still very new to this. Does \"explicit argument\" mean writing <code>(p : \\N)</code> instead of [p : \\N]?</p>",
        "id": 227489513,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614108676
    },
    {
        "content": "<p>Alternatively you can put the prime and <code>char_p</code> assumptions under the existential.</p>",
        "id": 227489541,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614108689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"247154\">Jakob Scholbach</span> <a href=\"#narrow/stream/113489-new-members/topic/Syntax.20question.3A.20purely.20inseparable.20field.20extension/near/227489513\">said</a>:</p>\n<blockquote>\n<p>OK, thanks. I'm still very new to this. Does \"explicit argument\" mean writing <code>(p : \\N)</code> instead of [p : \\N]?</p>\n</blockquote>\n<p>yes</p>",
        "id": 227489860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1614108806
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> An element in a char. p field extension is purely inseparable if some p-power of it</span>\n<span class=\"cm\">lies in the smaller field. https://stacks.math.columbia.edu/tag/09HE -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">elem_purely_inseparable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ι</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">extension_purely_inseparable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">elem_purely_inseparable</span> <span class=\"n\">ι</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 227489918,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614108829
    },
    {
        "content": "<p>The <code>[ ... ]</code> arguments are used to declare typeclass instances.</p>",
        "id": 227490072,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614108894
    },
    {
        "content": "<p>I.e. it's used for things like <code>[group G]</code>, <code>[field K]</code>, <code>[comm_ring A]</code>, etc.</p>",
        "id": 227490133,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614108917
    },
    {
        "content": "<p>So, it also doesn't make sense to put <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi></mrow><annotation encoding=\"application/x-tex\">\\iota</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ι</span></span></span></span> in square brackets. If you want the typeclass system to recognize that <code>L</code> is an extension of <code>K</code>you can say <code>[algebra K L]</code>.</p>",
        "id": 227490300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614108972
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, got it.</p>",
        "id": 227490993,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1614109265
    }
]