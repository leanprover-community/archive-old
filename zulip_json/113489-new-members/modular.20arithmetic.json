[
    {
        "content": "<p>does mathlib or lean have a system for doing modular arithmetic, or the related theorems like fermat's little theorem? i can't find anything on the mathlib docs search, but i feel like i might be searching for the wrong thing</p>",
        "id": 211778279,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601479969
    },
    {
        "content": "<p>The equivalence relation on N/Z of being congruent mod n is called <code>nat.modeq</code>/<code>int.modeq</code>, and the quotient ring is called <code>Zmod n</code>.</p>",
        "id": 211778386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480019
    },
    {
        "content": "<p>What happens if you search there for Fermat?</p>",
        "id": 211778408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480036
    },
    {
        "content": "<p>it kicks me to a google search, fermat site:<a href=\"https://leanprover-community.github.io/mathlib_docs\">https://leanprover-community.github.io/mathlib_docs</a></p>",
        "id": 211778508,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480076
    },
    {
        "content": "<p>and then the links on that google search are broken</p>",
        "id": 211778513,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480081
    },
    {
        "content": "<p>or at least the one mentioning number theory is</p>",
        "id": 211778557,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480103
    },
    {
        "content": "<p>lol I wanted Fermat and got <code>format</code></p>",
        "id": 211778582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480114
    },
    {
        "content": "<p>was there formerly a page in the docs named field_theory/finite.html ?</p>",
        "id": 211778629,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480139
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod\">docs#zmod</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.modeq\">docs#int.modeq</a>, with fermat being <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.pow_card\">docs#zmod.pow_card</a> and similar results in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/field_theory/finite/basic.lean#L282\">https://github.com/leanprover-community/mathlib/blob/master/src/field_theory/finite/basic.lean#L282</a></p>",
        "id": 211778757,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1601480177
    },
    {
        "content": "<p>eew that's pretty nasty. Yes I think there was.</p>",
        "id": 211778760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> presumably we can't do much about google returning out of date links?</p>",
        "id": 211778829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480208
    },
    {
        "content": "<p>GitHub search is sometimes better than the site-specific Google search (which seems to be always out-of-date): <a href=\"https://github.com/leanprover-community/mathlib/search?q=fermat\">https://github.com/leanprover-community/mathlib/search?q=fermat</a></p>",
        "id": 211778832,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601480211
    },
    {
        "content": "<p>And there was a discussion a few days ago with some other forms of Fermat:<br>\n<a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/p.20divides.20x-x.5Ep\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/p.20divides.20x-x.5Ep</a></p>",
        "id": 211778884,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601480231
    },
    {
        "content": "<p>ah ok - <code>src/field_theory/finite/basic.lean</code> is the file i was looking for</p>",
        "id": 211778989,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is there a sitemap? usually those prevent out of date links</p>",
        "id": 211779089,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480296
    },
    {
        "content": "<p>Bryan will I'm sure know. I'm not involved with the website.</p>",
        "id": 211779252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480363
    },
    {
        "content": "<p>The docs are generated by the code in <a href=\"https://github.com/leanprover-community/doc-gen\">the doc-gen repo</a>. <del>I don't think we're generating a site map yet.</del></p>",
        "id": 211779298,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601480382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/modular.20arithmetic/near/211778829\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> presumably we can't do much about google returning out of date links?</p>\n</blockquote>\n<p>No, AFAIK there's nothing we can do. There is a sitemap. This change happened a couple days ago.</p>",
        "id": 211779317,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601480393
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/sitemap.txt\">https://leanprover-community.github.io/mathlib_docs/sitemap.txt</a></p>",
        "id": 211779328,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601480400
    },
    {
        "content": "<p>is there a robots.txt pointing to the sitemap? i dont see one</p>",
        "id": 211779538,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480480
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/robots.txt\">https://leanprover-community.github.io/robots.txt</a> not found</p>",
        "id": 211779555,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480489
    },
    {
        "content": "<p>so google might not know to pick up the sitemap?</p>",
        "id": 211779569,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480495
    },
    {
        "content": "<p>It's registered in the Google search console.</p>",
        "id": 211779655,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601480524
    },
    {
        "content": "<p>So is it worth adding a \"github search\" option to the docs search?</p>",
        "id": 211779696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480543
    },
    {
        "content": "<p>On this occasion it fared better than google.</p>",
        "id": 211779709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480553
    },
    {
        "content": "<p>~~what with the quanta article coming out tomorrow morning¬¬</p>",
        "id": 211779805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480598
    },
    {
        "content": "<p>The builtin docs search doesn't use Google anymore either, it's strictly based on declaration names.</p>",
        "id": 211779828,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601480611
    },
    {
        "content": "<p>Right, which was why we couldn't use it to find Fermat's Little Theorem</p>",
        "id": 211779878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480638
    },
    {
        "content": "<p>the search on <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a> sent me to a google search</p>",
        "id": 211779943,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480650
    },
    {
        "content": "<p>Oh, that's sneaky. Actually clicking the search button has a different effect than hitting enter...</p>",
        "id": 211780076,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601480714
    },
    {
        "content": "<p>with currently broken links</p>",
        "id": 211780086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480718
    },
    {
        "content": "<p>hitting enter did nothing, so i clicked the search button</p>",
        "id": 211780152,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480748
    },
    {
        "content": "<p>We definitely want both since I think the declaration name search doesn't see docstrings / comments.</p>",
        "id": 211780160,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601480753
    },
    {
        "content": "<p>The point is that currently <em>neither option works</em> when searching for \"Fermat\"</p>",
        "id": 211780237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480767
    },
    {
        "content": "<p>I think this is very far from an ideal user interface, but yeah, it should be easy enough to redirect the button to GitHub.</p>",
        "id": 211780247,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601480771
    },
    {
        "content": "<p>whereas github search does work</p>",
        "id": 211780261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480776
    },
    {
        "content": "<p>Hitting enter takes you to <code>format</code> because no <code>Fermat</code> is in any name in mathlib</p>",
        "id": 211780342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480818
    },
    {
        "content": "<p>probably if you just do nothing and wait, google will fix up the links before too long</p>",
        "id": 211780371,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480839
    },
    {
        "content": "<p>presumably you aren't changing the URLs around all that frequently</p>",
        "id": 211780412,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480857
    },
    {
        "content": "<p>Unfortunately, we are...</p>",
        "id": 211780443,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601480872
    },
    {
        "content": "<p>ha</p>",
        "id": 211780453,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480875
    },
    {
        "content": "<p>we move fast and break things</p>",
        "id": 211780545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601480909
    },
    {
        "content": "<p>what does the docs search do when I hit enter - does it just send me to the <a href=\"https://github.com/leanprover-community/mathlib/issues/1\">#1</a> result?</p>",
        "id": 211780614,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480944
    },
    {
        "content": "<p>for example, i'm searching now for \"totient\" - i'm trying to figure out if the theorem that phi(ab) = phi(a)*phi(b) is anywhere</p>",
        "id": 211780667,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601480965
    },
    {
        "content": "<p>but if i type \"totient\" and hit enter, the search just takes me right to the page for nat.totient, which is like just one of the many places that do things with totients</p>",
        "id": 211780803,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481012
    },
    {
        "content": "<p>This file has a bunch of stuff:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/field_theory/finite/basic.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/field_theory/finite/basic.lean</a></p>",
        "id": 211780932,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601481071
    },
    {
        "content": "<p>But I don't see the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi></mrow><annotation encoding=\"application/x-tex\">\\varphi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">φ</span></span></span></span> is multiplicative.</p>",
        "id": 211781037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601481115
    },
    {
        "content": "<p>Neither Google nor GitHub is obviously better. Google is a good fuzzy search that keeps you in the doc pages but can be outdated. GitHub is up to date but it's a stricter search and you can't easily get from GitHub back to the docs.</p>",
        "id": 211781135,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601481134
    },
    {
        "content": "<p>\"Awesome doc search\" was supposed to be a bachelor thesis project this spring but, uh, world events got in the way. It's still in the pipeline.</p>",
        "id": 211781287,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601481217
    },
    {
        "content": "<p>But digging through the imports, there's this too:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/totient.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/data/nat/totient.lean</a></p>",
        "id": 211781299,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601481221
    },
    {
        "content": "<p>You can also do a <code>git grep</code> for <code>totient</code></p>",
        "id": 211781479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601481287
    },
    {
        "content": "<p>That will tell you all the files where it appears.</p>",
        "id": 211781505,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601481296
    },
    {
        "content": "<p>kind of an unrelated question - can you guys actually read code like: (λ m hm, have hm : m &lt; n / d ∧ gcd (n / d) m = 1, by simpa using hm,<br>\n        mem_filter.2 ⟨mem_range.2 $ nat.mul_div_cancel' hd ▸<br>\n          (mul_lt_mul_left hd0).2 hm.1,<br>\n          by rw [← nat.mul_div_cancel' hd, gcd_mul_left, hm.2, mul_one]⟩)</p>",
        "id": 211781562,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238605\">@Kevin Lacker</span> there's a cemetary at the bottom of <a href=\"https://leanprover-community.github.io/lean_projects.html\">https://leanprover-community.github.io/lean_projects.html</a>, a web page which I can never find the link to.</p>",
        "id": 211781589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481339
    },
    {
        "content": "<p>because you remember what everything like mem_filter, mem_range, gcd_mul_left, you know what those are</p>",
        "id": 211781620,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481353
    },
    {
        "content": "<p>or is it more like, this stuff is write-once, read-never</p>",
        "id": 211781643,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481361
    },
    {
        "content": "<p>the compiler accepts it, therefore it's a success</p>",
        "id": 211781695,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481371
    },
    {
        "content": "<p>i'm just trying to figure out what standards to hold myself to here</p>",
        "id": 211781717,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481381
    },
    {
        "content": "<p>Do you understand how to use the infoview?</p>",
        "id": 211781754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481399
    },
    {
        "content": "<p>Here's an interesting exercise.</p>",
        "id": 211781774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481407
    },
    {
        "content": "<p>well i'm on github so there's no infoview</p>",
        "id": 211781781,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481413
    },
    {
        "content": "<p>You don't read code on github</p>",
        "id": 211781822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481429
    },
    {
        "content": "<p>that's crazy</p>",
        "id": 211781842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481436
    },
    {
        "content": "<p>okay I am starting to understand your culture better</p>",
        "id": 211781864,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481445
    },
    {
        "content": "<p>that's like watching a movie with the sound off</p>",
        "id": 211781867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481445
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4312\">#4312</a> defines multiplicative functions, though at a first glance it doesn't have the totient.</p>",
        "id": 211781905,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601481461
    },
    {
        "content": "<p>you download the project and you read the code with the help of the infoview</p>",
        "id": 211781920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481467
    },
    {
        "content": "<p>You put your cursor just after the <code>:=</code> and you can then just keep hitting the right arrow key and you can see everything that's going on</p>",
        "id": 211782070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481512
    },
    {
        "content": "<p>you can see the state of the machine at that point</p>",
        "id": 211782090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481523
    },
    {
        "content": "<p>isn't that like saying, we don't read code, we just step through it in the debugger</p>",
        "id": 211782132,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481543
    },
    {
        "content": "<p>so basically yes, the code is unreadable</p>",
        "id": 211782156,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481553
    },
    {
        "content": "<p>I can read that code</p>",
        "id": 211782184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481565
    },
    {
        "content": "<p>can you post it again but using triple backticks so it gets highlighted correctly?</p>",
        "id": 211782265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481596
    },
    {
        "content": "<p>and I'll read it to you</p>",
        "id": 211782448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481648
    },
    {
        "content": "<p>can you just explain this part of the code: coprime_div_gcd_div_gcd</p>",
        "id": 211782493,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481670
    },
    {
        "content": "<p>do you know what that does offhand, or no</p>",
        "id": 211782521,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481680
    },
    {
        "content": "<p>if you were running this code on your computer you could just hover your mouse over that and something would pop up telling you what that meant precisely</p>",
        "id": 211782581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481709
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"o\">⟨</span><span class=\"n\">b</span> <span class=\"bp\">/</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">mem_filter.2</span> <span class=\"o\">⟨</span><span class=\"n\">mem_range.2</span> <span class=\"o\">((</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hb.2</span> <span class=\"bp\">▸</span> <span class=\"n\">hb.2.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hd0</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n            <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">hb.2</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_div_cancel'</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n              <span class=\"n\">nat.mul_div_cancel'</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">hb.1</span><span class=\"o\">)),</span>\n                <span class=\"n\">hb.2</span> <span class=\"bp\">▸</span> <span class=\"n\">coprime_div_gcd_div_gcd</span> <span class=\"o\">(</span><span class=\"n\">hb.2.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">hd0</span><span class=\"o\">)⟩,</span>\n          <span class=\"n\">hb.2</span> <span class=\"bp\">▸</span> <span class=\"n\">nat.mul_div_cancel'</span> <span class=\"o\">(</span><span class=\"n\">gcd_dvd_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)⟩))</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 211782610,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481722
    },
    {
        "content": "<p>but because I can \"speak a bit of Lean\" I can guess what that means</p>",
        "id": 211782665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481729
    },
    {
        "content": "<p>it is an assertion that two numbers are coprime, and one number is being called \"div_gcd\" and the other is also called \"div_gcd\"</p>",
        "id": 211782741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481759
    },
    {
        "content": "<p>i literally laughed out loud. not sure why</p>",
        "id": 211782802,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481792
    },
    {
        "content": "<p>and so I would conjecure that this was the statement that if a and b were numbers in some suitable system which had a notion of gcd</p>",
        "id": 211782814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481796
    },
    {
        "content": "<p>(I think Kevin L said that he uses emacs, so instead of hovering he might have to hit some ctrl- ctrl- keybind.)</p>",
        "id": 211782833,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1601481805
    },
    {
        "content": "<p>it's not clear to me which buffer is the \"info view\" in emacs-world</p>",
        "id": 211782865,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481824
    },
    {
        "content": "<p>then it's the assertion that a/gcd(a,b) and b/gcd(a,b) were coprime</p>",
        "id": 211782881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481829
    },
    {
        "content": "<p>the lean infoview is a more convenient version of any of the emacs buffers, for beginners at least</p>",
        "id": 211783006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481873
    },
    {
        "content": "<p>unless it's now possible to have the infoview in emacs, which it might be knowing this lot</p>",
        "id": 211783058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481903
    },
    {
        "content": "<p>One thing that's maybe not so clear is the notation <code>▸</code>, and the infoview would tell you precisely what this means.</p>",
        "id": 211783060,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601481903
    },
    {
        "content": "<p>the emacs docs and vscode docs don't seem to use any of the same terminology, so i can't quite tell how they compare</p>",
        "id": 211783102,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481928
    },
    {
        "content": "<p>If you're a beginner and are reading a lot of code, then having it running locally is essential because then every question you have about the code can be answered.</p>",
        "id": 211783162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601481962
    },
    {
        "content": "<p>but basically I am getting it. the code is not readable in the traditional software engineering sense that people just look at some code and know what it does. the standard practice is to be analyzing everything with the editor tooling, and also in practice to write code once and never change it</p>",
        "id": 211783246,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601481987
    },
    {
        "content": "<p>It is a bit unfortunate but I think that unreadability without the goal view is always a side effect of tactic based proofs</p>",
        "id": 211783253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601481991
    },
    {
        "content": "<p>I think what we really need is a viewer that provides this information in a static document format</p>",
        "id": 211783355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482032
    },
    {
        "content": "<p>Metamath proofs are basically that</p>",
        "id": 211783391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482040
    },
    {
        "content": "<p>it makes sense, though, you never have a proof that you want to just alter its behavior a little bit. once a proof is valid, you're done, you never need to change it</p>",
        "id": 211783424,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1601482045
    },
    {
        "content": "<p>I don't know about that... I've tried to read some agda proofs before, and found it more difficult than reading tactic blocks</p>",
        "id": 211783427,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601482045
    },
    {
        "content": "<p>Oh term mode proofs as well</p>",
        "id": 211783570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482068
    },
    {
        "content": "<p>I didn't mean to make a contrast against term mode there</p>",
        "id": 211783616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482083
    },
    {
        "content": "<p>Ah ok.</p>",
        "id": 211783632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601482084
    },
    {
        "content": "<p>If you look at a giant lambda calculus term without the types it's bewildering</p>",
        "id": 211783729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482107
    },
    {
        "content": "<p>That's the basic motivation behind <code>#explode</code></p>",
        "id": 211783782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482127
    },
    {
        "content": "<p>the real explanation is the sequence of types that appear, the proof term is just a serialization mechanism for the inference rules being applied</p>",
        "id": 211783887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482177
    },
    {
        "content": "<p>I guess we can try to run lean-formatter against the entire repo. Not sure how many CPUs it will burn though.</p>",
        "id": 211783920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601482191
    },
    {
        "content": "<p>If we can get lean running on the web this could be done dynamically on a per-proof basis</p>",
        "id": 211784028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482220
    },
    {
        "content": "<p>although some engineering would be needed to make it snappy without having to work from scratch every time</p>",
        "id": 211784108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482253
    },
    {
        "content": "<p>ideally you could just load up the oleans and be ready to step through the text</p>",
        "id": 211784338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601482333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/modular.20arithmetic/near/211781589\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> there's a cemetary at the bottom of <a href=\"https://leanprover-community.github.io/lean_projects.html\">https://leanprover-community.github.io/lean_projects.html</a>, a web page which I can never find the link to.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> now linked at the bottom of <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a> and in the \"Community\" memu.</p>",
        "id": 211786907,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1601483589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238605\">Kevin Lacker</span> <a href=\"#narrow/stream/113489-new-members/topic/modular.20arithmetic/near/211783424\">said</a>:</p>\n<blockquote>\n<p>it makes sense, though, you never have a proof that you want to just alter its behavior a little bit. once a proof is valid, you're done, you never need to change it</p>\n</blockquote>\n<p>Of course we change proofs very often when we generalize stuff or alter definitions slightly.  There is no problem at all.</p>",
        "id": 211787458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601483798
    },
    {
        "content": "<p>I think a good rule of thumb for deciding when inscrutable proofs are okay is the following:</p>\n<ul>\n<li>if it is the sort of fact that, if you started explaining it to a mathematician, they would stare at you blankly and not understand that there was even anything to explain, you can make the Lean proof as terse and inscrutable as you like</li>\n<li>if anyone could reasonably be expected to have to stop and think about a step, ideally it is possible to reconstruct that step from looking at the proof (admittedly, perhaps with the goal view)</li>\n<li>if you'd actually say it in a research paper or textbook, it deserves a human-readable comment (even if just a doc-string re-explaining the type of the <code>def</code> or <code>lemma</code>)</li>\n</ul>",
        "id": 211862598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601518886
    }
]