[
    {
        "content": "<p>What would happen if Type was of the type Type? I tried to make some sort of Russell's paradox out of this, but I cannot define a type T made of things that are not their own type.</p>",
        "id": 199740926,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1591274891
    },
    {
        "content": "<p>Sorry for a noob question</p>",
        "id": 199741040,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1591274968
    },
    {
        "content": "<p>Which type are you talking about when you say <code>Type</code>? I think you mean <code>Type u</code> for some universe <code>u</code></p>",
        "id": 199741483,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591275169
    },
    {
        "content": "<p><code>Type u</code> has type <code>Type (u +1)</code></p>",
        "id": 199741520,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591275198
    },
    {
        "content": "<p>When I type <code>#check Type</code> into VSCode it decides that I'm talking about <code>Type 1</code></p>",
        "id": 199741650,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591275256
    },
    {
        "content": "<p>If you use a recent enough Lean 3, I think the universe checks are disabled for <code>meta</code> inductive definitions, and then you can try to write your paradox.</p>",
        "id": 199741893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591275379
    },
    {
        "content": "<p>Yes, and I want to understand the need for \"+1\" in Type u : Type (u+1)</p>",
        "id": 199741926,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1591275401
    },
    {
        "content": "<p>Why there cannot be a type of all types?</p>",
        "id": 199742064,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1591275468
    },
    {
        "content": "<p>are you asking a question about Lean's type theory or a question about type theories in general?</p>",
        "id": 199742218,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591275528
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"kn\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n</code></pre></div>\n\n\n<p>With a recent enough version, Lean will accept this and then you can implement the usual paradoxes.</p>",
        "id": 199742431,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591275623
    },
    {
        "content": "<p>What's the shortest meta proof of false?</p>",
        "id": 199742596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591275694
    },
    {
        "content": "<p><code>meta def a : false := a</code>, but this isn't very exciting</p>",
        "id": 199742800,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591275780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>  The question is about Lean's type theory, but I suppose the answer to the general question should be the same.</p>",
        "id": 199746907,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1591277618
    },
    {
        "content": "<p>well, the answer for Lean's type theory is going to be something like \"Lean requires the judgement relation <code>:</code> to be well-founded\"<br>\n(with the caveat that I don't know whether the thing I'm saying is literally true. one can do real maths in Lean without understanding its type theory on a deep level)</p>",
        "id": 199747215,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591277743
    },
    {
        "content": "<p>whereas for general type theory it's going to be \"well-founded judgement relations enjoy nice properties that ill-founded ones in general do not\"</p>",
        "id": 199747360,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591277794
    },
    {
        "content": "<p>I thought we had a proof in mathlib that <code>Type (u+1)</code> is bigger than <code>Type u</code>, but it's not easy to search for.</p>",
        "id": 199747974,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591278045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> \"ill-founded ones in general do not\" - so it's not like we have a paradox instantly, just some bad behaviour?</p>",
        "id": 199748040,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1591278077
    },
    {
        "content": "<p>No, there really is a paradox.</p>",
        "id": 199748068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591278085
    },
    {
        "content": "<p>I was speaking mildly to avoid saying false things. Reid knows more than me and can speak more decisively.</p>",
        "id": 199748291,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591278176
    },
    {
        "content": "<p>Although it's not super easy to see, it follows from <a href=\"https://github.com/leanprover-community/mathlib/blob/e397b4c/src/set_theory/ordinal.lean#L1855-L1868\">https://github.com/leanprover-community/mathlib/blob/e397b4c/src/set_theory/ordinal.lean#L1855-L1868</a> that each universe has more ordinals than the previous one</p>",
        "id": 199749136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591278535
    },
    {
        "content": "<p>So, in Lean, you can prove <code>not (Type u = Type (u+1))</code>, and that should be pretty convincing that <code>Type : Type</code> would lead to inconsistency</p>",
        "id": 199749972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591278923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  Yes, that is convincing. The one more bit I'm missing is what exactly universes are, and why not u+1 = u. But that (I hope) I will learn from tutorials</p>",
        "id": 199752501,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1591279962
    },
    {
        "content": "<p>i don't think the tutorials try to teach you that, since it's not very necessary for typical lean use cases</p>",
        "id": 199752928,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591280136
    },
    {
        "content": "<p>I'm not sure what your background is, but for most people it's probably better to start out by taking on faith that <code>Type : Type</code> would lead to inconsistencies which are avoided by introducing universe levels.</p>",
        "id": 199753271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591280282
    },
    {
        "content": "<p>So one of my takeaways is that in ZFC it is really easy to say why the set of all sets doesn't exists, but it turns out that in type theory that it isn't so easy to say why there is not a type of all types, right?</p>",
        "id": 199754114,
        "sender_full_name": "Mateusz Zugaj",
        "timestamp": 1591280611
    },
    {
        "content": "<p>Yeah, somehow the global membership concept gives you easier access to these paradoxes. I guess another way to prove it in Lean should be to use its model of ZFC, and then run a proof that there is no set of all sets there.</p>",
        "id": 199755593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591281242
    },
    {
        "content": "<p>If you like ZFC then you may also want to think of the \"intended model\" of Lean as fixing a sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mn>0</mn></msub><mo>∈</mo><msub><mi mathvariant=\"script\">U</mi><mn>1</mn></msub><mo>∈</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_0 \\in \\mathcal{U}_1 \\in \\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> of Grothendieck universes, thinking of universe levels as external natural numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0, 1, \\ldots\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mclose\">}</span></span></span></span>, and interpreting a type of type <code>Type u</code> as a set belonging to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mi>u</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U}_u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">u</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 199756203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591281454
    },
    {
        "content": "<p>You should be able to derive a quick contradiction from <code>Type : Type</code> using Cantor?<br>\nLet <code>K := Σ α : Type, α</code>. Any <code>α : Type</code> injects into <code>K</code>. So assuming <code>Type : Type</code>, we get that <code>set K</code> embeds into <code>K</code>.</p>",
        "id": 199759621,
        "sender_full_name": "David Wärn",
        "timestamp": 1591282807
    },
    {
        "content": "<p>well Cantor's Theorem (or Russell's paradox) is that there is no surjection from <code>A</code> to <code>P(A)</code> right</p>",
        "id": 199761016,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591283366
    },
    {
        "content": "<p>but I guess you can noncomputably construct a surjection from an injection the other way</p>",
        "id": 199761055,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591283382
    },
    {
        "content": "<p>You can constructively prove there's no injection from the powerset.</p>",
        "id": 199763397,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591284246
    },
    {
        "content": "<p>how?</p>",
        "id": 199763966,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591284481
    },
    {
        "content": "<p>i think this is constructive:</p>\n<p>given f : set \\a \\to \\a,<br>\nmake g (x : set \\a) : \\set \\a := {a | \\ex y \\sub x, f y = a}</p>\n<p>g has a least fixpoint x := \\bigcup_n g^n \\emptyset</p>\n<p>f (g x) = f x \\in x</p>\n<p>since f x \\in x, we must have f x \\in g^n \\emptyset for some finite n, contradicting injectivity</p>",
        "id": 199766749,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591285558
    },
    {
        "content": "<p>A formal proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"err\">Σ</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">α</span>\n\n<span class=\"n\">def</span> <span class=\"n\">embed_sum</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">embed_inj</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">embed_sum</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">tidy</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">cantor</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">t</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">not_mem</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">inj</span> <span class=\"n\">ht</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">is_mem</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">not_mem</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_mem</span> <span class=\"n\">is_mem</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- fails due to some issue with universes...</span>\n<span class=\"c1\">-- theorem falso : false :=</span>\n<span class=\"c1\">-- cantor (set K) (embed_sum K) (embed_inj K)</span>\n</code></pre></div>",
        "id": 199769567,
        "sender_full_name": "David Wärn",
        "timestamp": 1591286552
    },
    {
        "content": "<p>FWIW if you're interested in the <em>general</em> question of Type in Type, rather than how it applies to Lean, I found <a href=\"http://liamoc.net/posts/2015-09-10-girards-paradox.html\">http://liamoc.net/posts/2015-09-10-girards-paradox.html</a> very clear</p>",
        "id": 199774749,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1591288827
    },
    {
        "content": "<p>Although I can read Agda, so I can't promise it's readable to people who haven't spent ages learning the syntax of Agda :P</p>",
        "id": 199774829,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1591288881
    }
]