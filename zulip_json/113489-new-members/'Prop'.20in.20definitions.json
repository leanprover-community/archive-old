[
    {
        "content": "<p>why do <code>set</code> and equivalence relations map to a <code>Prop</code> in their definitions: <code>def set (α : Type u) := α → Prop</code> and <code>\nconstant quot : Π {α : Sort u}, (α → α → Prop) → Sort u</code> where <code>r : (α → α → Prop)</code>?</p>",
        "id": 246786587,
        "sender_full_name": "Holly Liu",
        "timestamp": 1626905456
    },
    {
        "content": "<p>What is your definition of an equivalence relation, if it doesn't involve true-false statements?</p>",
        "id": 246786692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626905521
    },
    {
        "content": "<p>The answer to the set question is that lean identifies a subset S of X with the function that sends an element x of X to the true-false statement <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">x\\in S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span></p>",
        "id": 246786854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626905617
    },
    {
        "content": "<p>Although it's probably worth remarking that using this fact is breaking the abstraction barrier</p>",
        "id": 246787218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626905778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/'Prop'.20in.20definitions/near/246787218\">said</a>:</p>\n<blockquote>\n<p>breaking the abstraction barrier</p>\n</blockquote>\n<p>is that like what the end-user is not supposed to see?</p>",
        "id": 246787969,
        "sender_full_name": "Holly Liu",
        "timestamp": 1626906222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/'Prop'.20in.20definitions/near/246786692\">said</a>:</p>\n<blockquote>\n<p>What is your definition of an equivalence relation, if it doesn't involve true-false statements?</p>\n</blockquote>\n<p>i think the <code>(α → α → Prop)</code> is a bit confusing. i'm not sure what the first two <code>α</code>'s are for</p>",
        "id": 246788245,
        "sender_full_name": "Holly Liu",
        "timestamp": 1626906373
    },
    {
        "content": "<p>I'm asking you what your definition of an equivalence relation on alpha is. It should be exactly the same, or obviously equivalent, to Lean's, but you're not saying what you think it is so it's difficult to make progress</p>",
        "id": 246790163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626907564
    },
    {
        "content": "<p>If you identify <code>set A</code> with <code>A -&gt; Prop</code>, then <code>A -&gt; A -&gt; Prop</code> (which really means <code>A -&gt; (A -&gt; Prop)</code> becomes <code>A -&gt; (set A)</code>, i.e. a function which associates to any element of A a subset of A. One way to think about this is by saying that this function sends <code>a : A</code> to the \"set of all elements which are related to <code>a</code>\"</p>",
        "id": 246790599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626907868
    },
    {
        "content": "<p>There are other ways to grok this, but as Kevin said, it would be helpful to know how you usually define a relation</p>",
        "id": 246790835,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626908045
    },
    {
        "content": "<p>doesnt the equivalence relation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> take two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> as arguments and return whether or not they are equivalent (which is a proposition)?</p>",
        "id": 246793033,
        "sender_full_name": "Nicholas",
        "timestamp": 1626909776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/'Prop'.20in.20definitions/near/246790163\">said</a>:</p>\n<blockquote>\n<p>I'm asking you what your definition of an equivalence relation on alpha is. It should be exactly the same, or obviously equivalent, to Lean's, but you're not saying what you think it is so it's difficult to make progress</p>\n</blockquote>\n<p>sorry, my definition was that an equivalence relation on alpha is something that satisfies three properties, which are reflexivity, symmetry, and transitivity. i meant to say that i didn't understand why it was defined without these properties, but i see that it can be thought of as mapping each element of a set to \"a set of all elements which are related to the element\", and that it's checking for equivalence between two arguments.</p>",
        "id": 246892697,
        "sender_full_name": "Holly Liu",
        "timestamp": 1626981362
    },
    {
        "content": "<p>Yes, that's correct: but your question was about the \"something\", not about the axioms. The thing you quoted above is not an equivalence relation, it's just a binary relation.</p>",
        "id": 246892813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626981429
    },
    {
        "content": "<p>The other piece of the puzzle is that <code>quot</code> effectively takes the closure of the relation you pass it using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eqv_gen\">docs#eqv_gen</a></p>",
        "id": 246892854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626981475
    },
    {
        "content": "<p>i didn't realize it was just a binary relation. i may have confused binary relation with equivalence relations</p>",
        "id": 246893001,
        "sender_full_name": "Holly Liu",
        "timestamp": 1626981556
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient\">docs#quotient</a> is the version that takes an equivalence relation to begin with</p>",
        "id": 246893066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626981602
    },
    {
        "content": "<p>oh, equivalence relations are setoids?</p>",
        "id": 246893853,
        "sender_full_name": "Holly Liu",
        "timestamp": 1626981997
    },
    {
        "content": "<p>Well, strictly an equivalence relation is any relation that satisfies <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equivalence\">docs#equivalence</a></p>",
        "id": 246894029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626982105
    },
    {
        "content": "<p>ah ok</p>",
        "id": 246894113,
        "sender_full_name": "Holly Liu",
        "timestamp": 1626982157
    },
    {
        "content": "<p>hi all, I m I am examining in more detail the creation of definitions in lean and I have seen small differences in the type here some examples</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">upper_bounds</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">lower_bounds</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span><span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_least</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span> <span class=\"bp\">∈</span> <span class=\"n\">lower_bounds</span> <span class=\"n\">S</span>\n<span class=\"kd\">def</span> <span class=\"n\">is_lub</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">is_least</span> <span class=\"o\">(</span><span class=\"n\">upper_bounds</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I ask you, when we should use the Prop type, when we should not use any type, how does each one vary, thank you very much for your time</p>",
        "id": 258582972,
        "sender_full_name": "Esteban Estupinan",
        "timestamp": 1634836275
    },
    {
        "content": "<p>When you leave off the type, Lean will infer it if it can (if it can't it will show an error).  This should be exactly the same:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Try doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>to see what type Lean has inferred.</p>",
        "id": 258583326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634836425
    },
    {
        "content": "<p>(I personally think it's nicer to include the <code>: Prop</code>, but you don't have to.)</p>",
        "id": 258584189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1634836744
    }
]