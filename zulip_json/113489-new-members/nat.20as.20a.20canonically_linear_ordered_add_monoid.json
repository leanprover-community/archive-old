[
    {
        "content": "<p>I was writing the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.min_add_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">hb</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">le_add_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">le_add_left</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and thought to generalize. But here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of variants of the proof with different generalizations. What makes the <code>nat</code> one work, and what's wrong with the broken ones?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.cast</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">canonically_linear_ordered_add_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">canonically_ordered_add_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_add_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">hb</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">le_add_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">le_add_left</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_add_distrib_rw</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">hb</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_add_right</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_add_right</span> <span class=\"n\">hb</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">hc</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">le_add_left</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_add_left</span> <span class=\"n\">hc</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_right</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">min_eq_right</span> <span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">min_add_distrib_broken</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">hb</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_add_right</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">},</span> <span class=\"c1\">-- breaks here. different orders?</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_add_right</span> <span class=\"n\">hb</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_left</span> <span class=\"n\">hc</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">le_add_left</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">le_add_left</span> <span class=\"n\">hc</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">min_eq_right</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">min_eq_right</span> <span class=\"n\">hb</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.min_add_distrib_broken</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">min_add_distrib</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"c1\">-- does not work</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.min_add_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">hb</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"c1\">-- same proof as above</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">le_add_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">le_total</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">hc</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">le_add_left</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 225782503,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612919601
    },
    {
        "content": "<p>Aren't you putting two different preorders on \\B, since both typeclasses have the same base?</p>",
        "id": 225782890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612919941
    },
    {
        "content": "<p>Yes, that's what breaks it. But what makes the <code>nat</code> version work then? The fact that the underlying order is the same?</p>",
        "id": 225782985,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612920016
    },
    {
        "content": "<p>And if so, why is <code>nat</code> not a <code>canonically_linear_ordered_add_monoid</code>?</p>",
        "id": 225782997,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612920038
    },
    {
        "content": "<p>Yes, the elaborator(?) will deduce the two preorder structures are the same for nat, by unfolding both</p>",
        "id": 225783131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612920202
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_linear_ordered_add_monoid\">docs#canonically_linear_ordered_add_monoid</a> doesn't have an \"instances\" section at all. Maybe we just haven't gotten around to declaring any in mathlib yet?</p>",
        "id": 225783480,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612920519
    },
    {
        "content": "<p>I'd be happy to add it -- but my vscode decided to break all the webview plugins, including the Lean one...</p>",
        "id": 225783694,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612920721
    },
    {
        "content": "<p>Heh, it doesn't look like any instances were added when the class was added in <a href=\"https://github.com/leanprover-community/mathlib/issues/3335\">#3335</a>, nor in any of the commits afterwards.</p>",
        "id": 225783882,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612920849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/nat.20as.20a.20canonically_linear_ordered_add_monoid/near/225783694\">said</a>:</p>\n<blockquote>\n<p>I'd be happy to add it -- but my vscode decided to break all the webview plugins, including the Lean one...</p>\n</blockquote>\n<p>I updated VS Code a bit earlier today but I haven't seen any breakage yet. What OS are you on?</p>",
        "id": 225784042,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612920997
    },
    {
        "content": "<p>Windows, using via WSL</p>",
        "id": 225784199,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612921128
    },
    {
        "content": "<p>Git Graph is also not working, which suggests a webview problem</p>",
        "id": 225784211,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612921142
    },
    {
        "content": "<p>Ah, I see. I couldn't find any relevant-looking recent issues at <a href=\"https://github.com/microsoft/vscode/issues\">https://github.com/microsoft/vscode/issues</a> so it might be worth reporting there.</p>",
        "id": 225784438,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612921335
    },
    {
        "content": "<p>A lot of older issues referencing this from around June though =C</p>",
        "id": 225784610,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612921512
    },
    {
        "content": "<p>In any case: <a href=\"https://github.com/leanprover-community/mathlib/issues/6144\">#6144</a></p>",
        "id": 225784640,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612921556
    },
    {
        "content": "<p>What's the best solution for this sort of thing? I just made <a href=\"https://github.com/leanprover-community/mathlib/pull/6145#issuecomment-776406785\">a suggestion</a> in another of Yakov's PRs which ran into the same problem, where now the instances for <code>linear_ordered_comm_monoid_with_zero</code> and <code>ordered_cancel_add_comm_monoid</code> have orders that don't necessarily agree.</p>",
        "id": 225791308,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612928986
    },
    {
        "content": "<p>Any time you need the properties of two different typeclasses with the same base, you have to introduce a third typeclass extending both</p>",
        "id": 225802114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612942444
    },
    {
        "content": "<p>I had a branch in which I added a <code>canonically_linear_ordered_add_monoid</code> instance to nnreal, which works fine, as well as<br>\n<code>instance with_top.canonically_linear_ordered_add_monoid  </code> as done in <a href=\"https://github.com/leanprover-community/mathlib/issues/6144\">#6144</a>, with the idea of applying that to ennreal. But then the orders on ennreal conflict. ennreal would need a typeclass which is also a complete lattice (if I remember correctly). I was hoping for another solution because I did not want to add a <code>complete_canonically_linear_ordered_add_monoid</code> which would only apply to ennreal. Eric, you say that adding that other class is the only way?</p>",
        "id": 225803802,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612944019
    },
    {
        "content": "<p>Two different typeclasses which provide the same order on the same type don't conflict</p>",
        "id": 225803975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612944164
    },
    {
        "content": "<p>It's only when you define a lemma taking two typeclasses that _could_ conflict that you have a problem, because without a concrete type to look at, the two instances can't just be unfolded and checked for equality</p>",
        "id": 225804065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612944234
    },
    {
        "content": "<p>Ok. Then I don't remember it correctly, or don't describe it correctly. I think it had to do with the lattice, which can come from <code>canonically_linear_ordered_monoid.semilattice_sup_bot</code> or from the <code>complete_linear_order</code> on ennreal, but I'll test that branch again rather than conjecture based on old impressions.</p>",
        "id": 225804296,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612944375
    },
    {
        "content": "<p>When I add <code>[derive canonically_linear_ordered_add_monoid]</code> to ennreal (without removing/changing any of the other derived instances), the lemma <code>diam_triple</code> in <code>topology/metric_space/emetric_space.lean</code> fails, because of <code>ennreal.sup_eq_max</code>. The issue seems to be that there are two different <code>has_sup</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"n\">ennreal</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_sup.sup</span> <span class=\"n\">ennreal</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semilattice_sup.to_has_sup</span> <span class=\"n\">ennreal</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semilattice_sup_bot.to_semilattice_sup</span> <span class=\"n\">ennreal</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">canonically_linear_ordered_add_monoid.semilattice_sup_bot</span> <span class=\"n\">ennreal</span>\n                <span class=\"n\">ennreal.canonically_linear_ordered_add_monoid</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_edist.edist</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">emetric_space.to_has_edist</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_edist.edist</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">emetric_space.to_has_edist</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">max</span> <span class=\"n\">ennreal</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_linear_order.to_linear_order</span> <span class=\"n\">ennreal</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_linear_order_of_complete_linear_order</span> <span class=\"n\">ennreal</span> <span class=\"n\">ennreal.complete_linear_order</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_edist.edist</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">emetric_space.to_has_edist</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_edist.edist</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">emetric_space.to_has_edist</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"n\">ennreal</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_sup.sup</span> <span class=\"n\">ennreal</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semilattice_sup.to_has_sup</span> <span class=\"n\">ennreal</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semilattice_sup_bot.to_semilattice_sup</span> <span class=\"n\">ennreal</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semilattice_sup_bot_of_bounded_lattice</span> <span class=\"n\">ennreal</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice.to_bounded_lattice</span> <span class=\"n\">ennreal</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_linear_order.to_complete_lattice</span> <span class=\"n\">ennreal</span> <span class=\"n\">ennreal.complete_linear_order</span><span class=\"o\">)))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_edist.edist</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">emetric_space.to_has_edist</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_edist.edist</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">emetric_space.to_has_edist</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">max</span> <span class=\"n\">ennreal</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_linear_order.to_linear_order</span> <span class=\"n\">ennreal</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conditionally_complete_linear_order_of_complete_linear_order</span> <span class=\"n\">ennreal</span> <span class=\"n\">ennreal.complete_linear_order</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_edist.edist</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">emetric_space.to_has_edist</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_edist.edist</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">emetric_space.to_has_edist</span> <span class=\"n\">α</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Is it true that the <code>with_top</code> of a <code>canonically_linear_ordered_add_monoid</code> is a <code>complete_lattice</code>? We could remove the <code>[derive complete_linear_order]</code> on ennreal and it would remove the issue.</p>",
        "id": 225806002,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612945724
    },
    {
        "content": "<p>It is certainly a bounded lattice, but I don't know about complete</p>",
        "id": 225806148,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612945818
    },
    {
        "content": "<p>and the answer is no, if I am not mistaken. A counterexample would be the non-negative rational numbers (with top).</p>",
        "id": 225807954,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612947096
    },
    {
        "content": "<p>Can you make a branch to demo the problem?</p>",
        "id": 225808461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612947398
    },
    {
        "content": "<p>I created the branch ennreal_lattice_issue, in which I started from <a href=\"https://github.com/leanprover-community/mathlib/issues/6144\">#6144</a> and added a <code>canonically_linear_ordered_add_monoid</code> instance to ennreal. It is still building so I don't know yet if the issue I am trying to replicate is visible. I'll update this thread when it is done.</p>",
        "id": 225810021,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612948337
    },
    {
        "content": "<p>Yes, that <code>derive</code> was reverted in my last commit, because of this exact issue. You identified the lemma that breaks.</p>",
        "id": 225810542,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1612948661
    },
    {
        "content": "<p>The branch ennreal_lattice_issue finished building (the build failed). There is an issue with the use of <code>ennreal.sup_eq_max</code> in the proof of <code>diam_triple</code> in topology/metric_space/emetric_space.</p>",
        "id": 225814445,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612951088
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/ennreal_lattice_issue\">branch#ennreal_lattice_issue</a></p>",
        "id": 225822221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612956072
    },
    {
        "content": "<p>I think that I found a fix: removing <code>instance canonically_linear_ordered_monoid.semilattice_sup_bot</code>.</p>",
        "id": 225830563,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612961329
    },
    {
        "content": "<p>I am waiting for the build to succeed, to be sure that it did not break anything else.</p>",
        "id": 225830615,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1612961362
    }
]