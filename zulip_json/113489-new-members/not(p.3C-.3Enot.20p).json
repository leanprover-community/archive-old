[
    {
        "content": "<p>Is there a way in which we can prove not(p&lt;-&gt;not p) without using classical?</p>",
        "id": 160714613,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552501664
    },
    {
        "content": "<p>yes</p>",
        "id": 160715015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552501906
    },
    {
        "content": "<p>Ha ha this question should be in the FAQ, as we used to say in the heyday of USENET</p>",
        "id": 160723592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552508214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"212008\">@Manikhanta Teja</span> this comes up every few months. It's an exercise in Theorem Proving In Lean. Searching for a solution in this forum might work. It's a great exercise :-)</p>",
        "id": 160723756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552508342
    },
    {
        "content": "<p>I couldnt find it. But i tried doing it.</p>\n<div class=\"codehilite\"><pre><span></span>variable p : Prop\nexample : ¬(p &lt;-&gt; ¬p) :=\nassume h1 : (p &lt;-&gt; ¬p),\nshow false, from\n(assume h2 : p,\nhave h3 : not p, from iff.elim_left h1 h2,\nhave h4 : p, from iff.elim_right h1 h3,\nshow false, from h3 h4\n)\n</pre></div>\n\n\n<p>I get this error</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  (λ (this : false), this)\n    (λ (h2 : p),\n       have h3 : ¬p, from iff.elim_left h1 h2,\n       have h4 : p, from iff.elim_right h1 h3,\n       show false, from h3 h4)\nterm\n  λ (h2 : p), have h3 : ¬p, from iff.elim_left h1 h2, have h4 : p, from iff.elim_right h1 h3, show false, from h3 h4\nhas type\n  p → false\nbut is expected to have type\n  false\n</pre></div>\n\n\n<p>but if I do this, it works. </p>\n<div class=\"codehilite\"><pre><span></span>variable p : Prop\nvariable h2 : p\nexample : ¬(p &lt;-&gt; ¬p) :=\nassume h1 : (p &lt;-&gt; ¬p),\nshow false, from\nhave h3 : not p, from iff.elim_left h1 h2,\nhave h4 : p, from iff.elim_right h1 h3,\nshow false, from h3 h4\n</pre></div>\n\n\n<p>How do i do this without using another variable h2</p>",
        "id": 160744220,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552528079
    },
    {
        "content": "<p>i got it. But i didnt get it using the above solution</p>",
        "id": 160745287,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552529575
    },
    {
        "content": "<p>putting a variable <code>h2 : p</code> like that is basically assuming that <code>p</code> is true</p>",
        "id": 160747146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552532360
    },
    {
        "content": "<p>you actually proved <code>p -&gt; ¬(p &lt;-&gt; ¬p)</code></p>",
        "id": 160747152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552532377
    },
    {
        "content": "<p>Here's a hint: <code>not p</code> means <code>p -&gt; false</code>. Is there another way to prove <code>h3</code>?</p>",
        "id": 160747242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552532464
    },
    {
        "content": "<p>I thought for sure there was a worked solution somewhere in the chat history. Anyway, here's something ugly I threw together:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">P</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span> <span class=\"n\">h₁</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"n\">p</span>\n</pre></div>",
        "id": 160751390,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1552539051
    },
    {
        "content": "<blockquote>\n<p>I thought for sure there was a worked solution somewhere in the chat history.</p>\n</blockquote>\n<p>For sure there is, but I guess it might be hard to search for it.</p>",
        "id": 160757040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552547504
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">tidy</span><span class=\"o\">]</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">apply_assumption&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply_assumption</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">help_me</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tidy</span><span class=\"err\">?</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> `tidy` says -/</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_assumption&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">work_on_goal</span> <span class=\"mi\">0</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply_assumption&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">solve_by_elim</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply_assumption&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">solve_by_elim</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">help_me</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">help_me</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">id</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">),</span>\n       <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span> <span class=\"n\">a</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a_mp</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_mpr</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">),</span>\n            <span class=\"n\">a_mp</span> <span class=\"o\">(</span><span class=\"n\">a_mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">a_mp</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">a_mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">a_mp</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)))))</span>\n</pre></div>",
        "id": 160758354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552549509
    },
    {
        "content": "<p>I really need to finish <code>back</code>, so it can be installed as a standard part of <code>tidy</code>, so you don't need that pesky first line. :-)</p>",
        "id": 160758441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1552549584
    },
    {
        "content": "<p>Of course, <code>library_search</code> promptly says:  <code>λ (a : Prop), (iff_not_self a).mp</code>. :-)</p>",
        "id": 160758459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1552549616
    },
    {
        "content": "<p>I got it. Thanks ;)</p>",
        "id": 160758483,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552549679
    },
    {
        "content": "<p>One thing that <code>tidy</code> could optimise is recognising that it is proving the same goal twice. I've started work on a <code>dedup-goals</code> tactic... but I got weird buggy behaviour. See the <code>merge-goals</code> branch.</p>",
        "id": 160758530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552549688
    },
    {
        "content": "<p>Let me just show you Johan's proof of not(p iff not p) in tactic mode</p>",
        "id": 160759096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550509
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">help_me</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;- put your cursor here and look at the tactic state</span>\n  <span class=\"c1\">-- the key lemma</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- two goals now, the one we had and the new one we just set ourselves</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- back down to one goal, we&#39;ll leave the other one until after we finished the {}</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;- put your cursor here and see what we have, and what we want</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnP</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160759321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550685
    },
    {
        "content": "<p>I'm in the middle of writing a tactic mode proof of the question which started this thread.</p>",
        "id": 160759323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550700
    },
    {
        "content": "<p>Assuming you're using VS Code, cut and paste that code into VS Code and put your cursor at the points I suggest, and then move it up and down with the up/down arrow keys. Crucially, make sure you have the right \"lean messages\" window open as well.-- get it with Ctrl-Shift-Enter</p>",
        "id": 160759402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550792
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/EnDMCYIcfjSszDu6T5Lt_Om9/tactic_mode.png\" target=\"_blank\" title=\"tactic_mode.png\">tactic_mode.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/EnDMCYIcfjSszDu6T5Lt_Om9/tactic_mode.png\" target=\"_blank\" title=\"tactic_mode.png\"><img src=\"/user_uploads/3121/EnDMCYIcfjSszDu6T5Lt_Om9/tactic_mode.png\"></a></div>",
        "id": 160759423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550832
    },
    {
        "content": "<p>If you are a beginner then I think that the way tactic mode holds your hand is really helpful.</p>",
        "id": 160759428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550851
    },
    {
        "content": "<p>If you can get things set up so they look like the above, and you start moving your cursor up and down, you will see the tactic state and the goal changing on the right, and this set-up greatly clarifies, for me at least, exactly what you can assume and what you are supposed to be proving at any point.</p>",
        "id": 160759488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550900
    },
    {
        "content": "<p>To be fair, one should say the term mode analogue of Kevin's template is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">help_me</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnP</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>putting the cursor on the underline also tells you what is the state and what Lean wants. But I still agree with Kevin that it's much easier in tactic mode</p>",
        "id": 160759498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552550918
    },
    {
        "content": "<p>Yeah, Patrick is exactly right, but this very important trick with <code>_</code> is not as far as I remember, stressed in TPIL</p>",
        "id": 160759512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550961
    },
    {
        "content": "<p>It was extremely helpful for me when I started to learn term mode properly</p>",
        "id": 160759514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552550974
    },
    {
        "content": "<p>but with tactic mode the entire tactic state and goal are there, the moment you have understood the difference between the two windows both unfortunately called \"Lean Messages\", which I just used to open randomly</p>",
        "id": 160759584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552551035
    },
    {
        "content": "<p>One is ctrl-shift-enter, one is ctrl-alt-shift-enter, they both look indistinguishable, and one is helpful in tactic mode and the other isn't.</p>",
        "id": 160759597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552551066
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">help_me</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;- put your cursor here and look at the tactic state</span>\n  <span class=\"c1\">-- the key lemma</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnP</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- two goals now, the one we had and the new one we just set ourselves</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- back down to one goal, we&#39;ll leave the other one until after we finished the {}</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"c1\">-- &lt;- put your cursor here and see what we have, and what we want</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnP</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- after each &quot;have&quot; open some {}s to keep the number of goals down to 1</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">hP</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hnP</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">hnP</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hnP</span> <span class=\"n\">hP</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 160759688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552551213
    },
    {
        "content": "<p>I'll start with simple proofs.  This looks a lot better. Thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 160759748,
        "sender_full_name": "Manikhanta Teja",
        "timestamp": 1552551260
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html\">http://wwwf.imperial.ac.uk/~buzzard/xena/html/source/M1F_introduction/prop_exercises.html</a></p>\n<p>This is some very shoddy notes</p>",
        "id": 160759749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552551265
    },
    {
        "content": "<p>It's what I tell my students to look at. I will rewrite them properly this summer, but it pushes tactic mode from the start.</p>",
        "id": 160759758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552551292
    },
    {
        "content": "<p>Just a small note on those notes: you might want to use \"introduce\" where-ever you use \"construct\", mostly because if you're mashing ctrl-t for lemma search, introduction rules are generally marked with intro (e.g. <code>iff.intro</code>), same with elimination (<code>iff.elim</code>)</p>",
        "id": 160762385,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1552554275
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 160762669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552554590
    }
]