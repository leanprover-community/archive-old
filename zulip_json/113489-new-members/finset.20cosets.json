[
    {
        "content": "<p>Hi all!</p>\n<p>I just started learning lean (done the natural number game and some other exercices)</p>\n<p>I am having troubles in a very easy definition: I would like to define the coset of a finset of a comm_group with respect to an element of that group. Looking at how it is define the (left)coset for sets, it looks easy. But I don't know how to construct the map (λ x, g * x) for finsets. Any suggestions are very well received.  I tried diferent approaches but no one seems to work. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">coset</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">](</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">):</span> <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span>\n<span class=\"n\">def</span> <span class=\"n\">finset_coset</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">](</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"o\">)(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">):</span> <span class=\"n\">finset</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"err\">???</span>\n</code></pre></div>\n\n\n<p>Thanks in advance!</p>",
        "id": 202809652,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1593786814
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 202809908,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593786954
    },
    {
        "content": "<p>you can use <code>finset.image</code></p>",
        "id": 202809978,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593786971
    },
    {
        "content": "<p>thanks,  but I am not sure how....</p>",
        "id": 202810505,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1593787279
    },
    {
        "content": "<p><code>finset.image (λ x, g * x) s</code> I think</p>",
        "id": 202810555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593787316
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">coset</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finset_coset</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mul_right_injective</span> <span class=\"n\">g</span><span class=\"bp\">⟩</span> <span class=\"n\">s</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">finset_coset&#39;</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 202810762,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593787433
    },
    {
        "content": "<p>I see, thanks, I understand the problem was saying about computability...</p>",
        "id": 202811169,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1593787675
    },
    {
        "content": "<p>A wise mathematician once said, \"a wise mathematician puts <code>open_locale classical</code> and <code>noncomputable theory</code> on the top of their every file\"</p>",
        "id": 202812402,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593788403
    },
    {
        "content": "<p>Somewhat related, so I didn't start a new topic. If  one has<code>fs : finset ℝ</code> in the environment, can this be coerced into <code>fs : set ℝ</code>? Just this usual  coercion notation doesn't work here.</p>",
        "id": 202814033,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1593789382
    },
    {
        "content": "<p>We probably need more information about your situation here. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if possible.</p>",
        "id": 202814172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593789483
    },
    {
        "content": "<p>This is along the lines of what I need. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">w1</span>\n<span class=\"n\">def</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span>\n<span class=\"n\">def</span> <span class=\"n\">idr</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n<span class=\"n\">def</span> <span class=\"n\">fin_ne</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">equiv</span> <span class=\"n\">X</span> <span class=\"o\">(</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">idr</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">w1</span>\n</code></pre></div>",
        "id": 202815194,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1593790187
    },
    {
        "content": "<p>read all the error messages!</p>",
        "id": 202815425,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593790340
    },
    {
        "content": "<p>or wait, maybe this is an extra mwe-induced error</p>",
        "id": 202815459,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593790370
    },
    {
        "content": "<p>I think there actually isn't a coercion</p>",
        "id": 202815520,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593790410
    },
    {
        "content": "<p>as crazy as that seems</p>",
        "id": 202815554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593790437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/finset.20cosets/near/202815459\">said</a>:</p>\n<blockquote>\n<p>or wait, maybe this is an extra mwe-induced error</p>\n</blockquote>\n<p>Sorry, there's another <code>equiv</code>. I'll edit my mwe.</p>",
        "id": 202815651,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1593790490
    },
    {
        "content": "<p>ah, there's a <code>has_lift</code></p>",
        "id": 202815680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593790524
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/finset.20-.3E.20set.20coercion/near/202788552\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/finset.20-.3E.20set.20coercion/near/202788552</a></p>",
        "id": 202815701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593790547
    },
    {
        "content": "<p>Yes, but it doesn't just work like usual.</p>",
        "id": 202815783,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1593790590
    },
    {
        "content": "<p>You need the up arrow.</p>",
        "id": 202815830,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593790624
    },
    {
        "content": "<p>I tried that too. Maybe I made a mistake?</p>",
        "id": 202815865,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1593790656
    },
    {
        "content": "<p>Oh wait, I got it to work now. Thank you <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 202815937,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1593790689
    },
    {
        "content": "<p>one more think: I have a finitype subgroup of a comm_group G but I want to use it as a finset in G. I tried to make a definition but it didn't work . I am not sure how to build really definitions. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">def</span> <span class=\"n\">finset_subgroup</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">,</span>\n<span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n</code></pre></div>\n\n\n<p>Thanks</p>",
        "id": 202832819,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1593805794
    },
    {
        "content": "<p>I think the whole finset-fintype-finite set setup is a bit confusing, but I played around a bit and ended up with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">finset_subgroup</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">G</span><span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"bp\">_</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"n\">h₂</span>\n</code></pre></div>",
        "id": 202835184,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593808221
    },
    {
        "content": "<p>nice. thanks!</p>",
        "id": 202835401,
        "sender_full_name": "Xavier Xarles",
        "timestamp": 1593808523
    }
]