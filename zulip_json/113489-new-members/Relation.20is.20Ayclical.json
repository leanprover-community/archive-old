[
    {
        "content": "<p>Hello, I'm very new, so I hope this question makes sense. I'm thinking about a binary relation <code>R</code> on type  <code>σ</code>. I'm interested in this definition from a social choice theory textbook: </p>\n<blockquote>\n<p>A relation R is said to be acyclical if for all finite sequences {x₁ , . . . , xₖ} from X it is not the case that x₁ R x₂ ∧ x₂ R x₂  ∧ . . . ∧ xₖ₋₁ R xₖ and xₖ R x₁. </p>\n</blockquote>\n<p>Here is  <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=%2F-%0AFrom%20a%20social%20choice%20theory%20textbook%3A%20%0A%0A%22A%20relation%20R%20is%20said%20to%20be%20acyclical%20if%20for%20all%20finite%20sequences%20%7Bx%E2%82%81%20%2C%20.%20.%20.%20%2C%20x%E2%82%96%7D%0Afrom%20X%20it%20is%20not%20the%20case%20that%20x%E2%82%81%20R%20x%E2%82%82%20%E2%88%A7%20x%E2%82%82%20R%20x%E2%82%82%20%20%E2%88%A7%20.%20.%20.%20%E2%88%A7%20x%E2%82%96%E2%82%8B%E2%82%81%20R%20x%E2%82%96%20and%20x%E2%82%96%20R%20x%E2%82%81.%20%22%0A%0A-%2F%0A%0Avariables%20%7B%CF%83%3A%20Type%7D%0A%0Adef%20is_acyclical%20%28R%20%3A%20%CF%83%20%E2%86%92%20%CF%83%20%E2%86%92%20Prop%29%20%3A%20Prop%20%3A%3D%20%0A%20%20%20%20%E2%88%80%20%28S%20%3A%20list%20%CF%83%29%2C%20%C2%AC%20%28%20R%20%28list.nth%20S%20S.length%29%20%28list.nth%20S%201%29%20%0A%20%20%20%20%E2%88%A7%20%E2%88%80%20k%20%3A%20%E2%84%95%2C%20k%20%3C%20S.length%20%E2%86%92%20%20R%20%28list.nth%20S%20k%29%20%28list.nth%20S%20k%2B1%29%20%29%0A%0A%20%20%20%20%0A--I%20don't%20exactly%20understand%20what%20a%20list%20is!!%20trying%20to%20use%20sequences%20from%20data.seq%20also%20gave%20me%20trouble.%20\">my best attempt</a> in Lean: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_acyclical</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">σ</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">S</span> <span class=\"n\">S.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">S</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">S.length</span> <span class=\"bp\">→</span>  <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">S</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">list.nth</span> <span class=\"n\">S</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>But this gives me an error, where all the terms <code>(list.nth _ _)</code>  are type <code>option σ</code>, instead of type <code>σ</code>. Should I try to define a finite sequence in a different way? I'm still struggling to navigate mathlib. Thanks!</p>\n<p>I guess it's also worth asking: has anyone else worked on Social Choice Theory in Lean?</p>",
        "id": 217911578,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1606323610
    },
    {
        "content": "<p>Welcome <span class=\"user-mention\" data-user-id=\"366882\">@Andrew  Souther</span>! I don't think anybody has been doing social choice theory in lean. (It's the first time I hear about it.)</p>",
        "id": 217912009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606323774
    },
    {
        "content": "<p>Note that there is <code>list.nth_le</code> which avoids the <code>option _</code></p>",
        "id": 217912038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606323787
    },
    {
        "content": "<p>Another option would be to use <code>vector</code> instead of <code>list</code>, to make the length into an explicit natural number, so you would get something like<br>\n<code>\\forall n, (S : vector \\sigma n), ...</code></p>",
        "id": 217912334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606323912
    },
    {
        "content": "<p>Another option:  you could let <code>S</code> be of type <code>zmod n → σ</code> (i.e., a function from integers-mod-n to <code>σ</code>), and then you can state your result in terms of <code>S k</code> and <code>S (k + 1)</code> without needing a special case for the end term (since the last \"+ 1\" wraps around to 0).</p>",
        "id": 217913630,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1606324534
    },
    {
        "content": "<p>Another way to express it is using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.trans_gen\">docs#relation.trans_gen</a>: say there is no <code>x</code> with <code>trans_gen R x x</code></p>",
        "id": 217913847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606324642
    },
    {
        "content": "<p>Welcome to the world of design decisions <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 217914219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606324819
    },
    {
        "content": "<p>A lot to play with, thank you! I'll be be back if I have trouble.</p>",
        "id": 217914567,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1606324989
    },
    {
        "content": "<p>but wait! there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.chain\">docs#list.chain</a> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 217914772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606325077
    },
    {
        "content": "<p>If <code>σ</code> is finite it's also equivalent to wellfoundedness</p>",
        "id": 217915041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606325194
    },
    {
        "content": "<p><code>trans_gen</code> seems like a really concise solution. I'd like to make sure I understand it though.  <br>\nI think that <code>¬(∃ x : σ, trans_gen R x x)</code> roughly means \"There is no x, such that the transitive closure of R contains xRx.\" </p>\n<p>Does that sound right? I'll try to put this definition to use. If it's too hard to work with, I'll tinker more with lists and vectors and zmod. Thanks again!</p>",
        "id": 217922390,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1606329111
    },
    {
        "content": "<p>The definition you quoted -- presumably k&gt;=1 is part of the assumptions? Assuming it is, <code>¬(∃ x : σ, trans_gen R x x)</code> looks good to me. If you wanted practice you could formalise Heather's definition too (assuming n&gt;=1 there) and prove it's equivalent.</p>",
        "id": 217923131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606329516
    },
    {
        "content": "<p>Yes, I think it's fair to say k&gt;=1, but I'm not 100% sure based on the language in the textbook. I will try that proof for practice!</p>",
        "id": 217925467,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1606330896
    },
    {
        "content": "<p>Right, if it's k&gt;=2 instead, then the <code>trans_gen</code> approach isn't as convenient</p>",
        "id": 217925597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606330956
    }
]