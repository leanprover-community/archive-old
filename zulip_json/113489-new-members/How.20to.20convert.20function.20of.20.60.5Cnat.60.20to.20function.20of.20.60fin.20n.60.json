[
    {
        "content": "<p>Any function of <code>\\nat</code> can be resolved to a function of <code>fin n</code> because <code>fin n \\subset \\nat</code>, but when i try to pass a function <code>\\nat \\to A</code> as an argument that is typed as <code>fin n \\to A</code>, it gives me a type mismatch error. Can I do the conversion implicitly or do i have to explicitly make a new function to satisfy the <code>fin n \\to A</code> type constraint? Thanks</p>",
        "id": 267364700,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641744643
    },
    {
        "content": "<p>If you have a function <code>f : fin 3 -&gt; A</code>, what do you want <code>f 5</code> to be?</p>",
        "id": 267365620,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641746036
    },
    {
        "content": "<p>Sorry I think you misunderstand, I have a function <code>f : \\nat \\to A</code>, and I want to pass it as an argument of type <code>fin n \\to A</code></p>",
        "id": 267365933,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641746520
    },
    {
        "content": "<p>Also how I produce the proof that allows me to compare <code>(fin n)</code> with <code>ℕ</code>? Right now if I have the variable <code>i : fin n</code>, I can't do the comparison <code>i == 1</code>, because I believe I need the following proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">eq_decidable_fin_n</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But I'm not sure how to produce that proof. Thanks</p>",
        "id": 267366037,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641746669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462368\">Jeffrey Li</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20convert.20function.20of.20.60.5Cnat.60.20to.20function.20of.20.60fin.20n.60/near/267364700\">said</a>:</p>\n<blockquote>\n<p><code>fin n \\subset \\nat</code></p>\n</blockquote>\n<p>This isn't how it works in Lean--<code>fin n</code> and <code>nat</code> are two different types, and a type can't be a subset of another one. Rather, there is a coercion from <code>fin n</code> to <code>nat</code>. This means that if you have <code>x : fin n</code> and you write <code>x : ℕ</code> then Lean will notice that it doesn't type check and replace <code>x</code> by a coercion <code>↑x</code>, which elsewhere was defined to mean <code>x.val</code> or whatever.</p>",
        "id": 267366516,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641747329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462368\">Jeffrey Li</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20convert.20function.20of.20.60.5Cnat.60.20to.20function.20of.20.60fin.20n.60/near/267364700\">said</a>:</p>\n<blockquote>\n<p>Can I do the conversion implicitly or do i have to explicitly make a new function to satisfy the <code>fin n \\to A</code> type constraint?</p>\n</blockquote>\n<p>You will have to write something like <code>λ x, f x</code> (which really means <code>λ x, f (↑x)</code>) instead of just <code>f</code>.</p>",
        "id": 267366577,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641747373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462368\">Jeffrey Li</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20convert.20function.20of.20.60.5Cnat.60.20to.20function.20of.20.60fin.20n.60/near/267366037\">said</a>:</p>\n<blockquote>\n<p>Also how I produce the proof that allows me to compare <code>(fin n)</code> with <code>ℕ</code>? Right now if I have the variable <code>i : fin n</code>, I can't do the comparison <code>i == 1</code>, because I believe I need the following proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">eq_decidable_fin_n</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But I'm not sure how to produce that proof. Thanks</p>\n</blockquote>\n<p>This is not possible. Basically, don't use <code>==</code>.</p>",
        "id": 267366588,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641747398
    },
    {
        "content": "<p>Oh sorry, it actually is possible but <code>i == k</code> doesn't mean what you want anyways.</p>",
        "id": 267366594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641747417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20convert.20function.20of.20.60.5Cnat.60.20to.20function.20of.20.60fin.20n.60/near/267366516\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"462368\">Jeffrey Li</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20convert.20function.20of.20.60.5Cnat.60.20to.20function.20of.20.60fin.20n.60/near/267364700\">said</a>:</p>\n<blockquote>\n<p><code>fin n \\subset \\nat</code></p>\n</blockquote>\n<p>This isn't how it works in Lean--<code>fin n</code> and <code>nat</code> are two different types, and a type can't be a subset of another one. Rather, there is a coercion from <code>fin n</code> to <code>nat</code>. This means that if you have <code>x : fin n</code> and you write <code>x : ℕ</code> then Lean will notice that it doesn't type check and replace <code>x</code> by a coercion <code>↑x</code>, which elsewhere was defined to mean <code>x.val</code> or whatever.</p>\n</blockquote>\n<p>Oh thank you so much, using <code>x.val</code> makes everything work. Still new to lean so trying to figure out how the type / subtype system works.</p>",
        "id": 267367262,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1641748124
    }
]