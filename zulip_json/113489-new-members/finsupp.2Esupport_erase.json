[
    {
        "content": "<p>Could someone explain what's going wrong here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finsupp.erase</span> <span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"n\">f.support.erase</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsupp.support_erase</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The documentation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.support_erase\">docs#finsupp.support_erase</a> seems to indicate that it should be exactly what I need here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">finsupp.support_erase</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">finsupp.erase</span> <span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">=</span> <span class=\"n\">f.support.erase</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>However, the <code>rw</code> leaves me with a goal of <code>f.support.erase a = f.support.erase a</code> which <code>refl</code> doesn't close.</p>\n<p>Clicking on the two expressions in the Infoview indicates that the left side involves</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">classical.prop_decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>while the right side involves</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">_inst_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>(where <code>_inst_1: decidable_eq α</code>).</p>\n<p>But commenting out <code>[decidable_eq α]</code> produces an error.</p>\n<p>Is this perhaps an example of a diamond?</p>",
        "id": 263875802,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638808020
    },
    {
        "content": "<p>finsupp is meant to be used entirely classically.</p>",
        "id": 263876053,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638808106
    },
    {
        "content": "<p>If you want to make statements about decidable finitely supported functions, those are dfinsupp</p>",
        "id": 263876142,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638808140
    },
    {
        "content": "<p>In your case, the tactic that should be able to solve your sorry is congr. Or even \"convert finsupp.support_erase\" for the whole tactic.</p>",
        "id": 263876326,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638808204
    },
    {
        "content": "<p>This isn't a diamond, more like a triangle. You have two conflicting instances of decidable equality, one from your hypothesis, and one from your lemma.</p>",
        "id": 263876462,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638808254
    },
    {
        "content": "<p>The problem here is finsupp.support_erase is stated badly</p>",
        "id": 263878174,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638808938
    },
    {
        "content": "<p>How so?  What would be a better statement?</p>",
        "id": 263878360,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638809022
    },
    {
        "content": "<p>It's missing a <code>[decidable_eq _]</code> argument</p>",
        "id": 263878482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638809056
    },
    {
        "content": "<p>We had this discussion last time when I added erase to polynomial, that adding that type of constraint is not in line with how the rest of the polynomial library is written. And my understanding was that that was because of its finsupp implementation</p>",
        "id": 263879299,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638809386
    },
    {
        "content": "<p>It belongs in the lemmas but not the definitions</p>",
        "id": 263879453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638809433
    },
    {
        "content": "<p>Indeed the definitions should avoid such arguments</p>",
        "id": 263879516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638809454
    },
    {
        "content": "<p>PR'd as <a href=\"https://github.com/leanprover-community/mathlib/issues/10649\">#10649</a></p>",
        "id": 263936310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638831149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/113489-new-members/topic/finsupp.2Esupport_erase/near/263876142\">said</a>:</p>\n<blockquote>\n<p>If you want to make statements about decidable finitely supported functions, those are dfinsupp</p>\n</blockquote>\n<p>While true that these are \"more decidable\", the <code>d</code> stands for <code>dependent</code> not <code>decidable</code> AFAIK.</p>",
        "id": 263936346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638831179
    },
    {
        "content": "<p>I've just run into what looks like a similar issue while investigating something for <a href=\"https://github.com/leanprover-community/mathlib/issues/10651\">#10651</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">f.update</span> <span class=\"n\">q</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">support_update_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finset.subset_insert</span> <span class=\"n\">q</span> <span class=\"n\">f.support</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- exact this,   -- Doesn't work</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The <code>have</code> line produces <code>this: x ∈ insert q f.support</code>, which is the current goal.  But the <code>exact</code> line generates the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">@</span><span class=\"n\">insert</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.has_insert</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">_inst_1</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">q</span> <span class=\"n\">f.support</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">@</span><span class=\"n\">insert</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.has_insert</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">classical.prop_decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"n\">q</span> <span class=\"n\">f.support</span>\n</code></pre></div>\n<p>(where <code>_inst_1 : decidable_eq α</code>).</p>",
        "id": 264172418,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638977696
    },
    {
        "content": "<p>required header for c+p:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finsupp</span>\n</code></pre></div>",
        "id": 264176135,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638979059
    },
    {
        "content": "<p>the error befuddles me, but you should be doing this in a different way anyways, actually</p>",
        "id": 264177069,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638979403
    },
    {
        "content": "<p>if you change that <code>example</code> to a <code>lemma</code> and run <code>#lint</code>, it'll tell you that you should use <code>classical</code> as the <code>decidable_eq</code> is only needed in the proof, not the statement</p>",
        "id": 264177222,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638979449
    },
    {
        "content": "<p>so if you <code>letI := classical.prop_decidable</code> at the start of your proof, you're good</p>",
        "id": 264177272,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638979473
    },
    {
        "content": "<p>but I'm really not sure why if you feed that argument specifically anyways, it still wants to use <code>classical.prop_decidable</code></p>",
        "id": 264177318,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638979497
    },
    {
        "content": "<p><code>subset_insert</code> seems to be stated correctly, anyways</p>",
        "id": 264177394,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638979529
    },
    {
        "content": "<p>oh, the issue is that <code>support_update_ne_zero</code> doesn't take in a <code>decidable_eq</code>. how come the linter doesn't warn about this? was this part of the push to make <code>finsupp</code> mathematician-friendly?</p>",
        "id": 264178230,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638979865
    },
    {
        "content": "<p>We never wrote a linter for that</p>",
        "id": 264179663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638980486
    },
    {
        "content": "<p>I started writing one but didn't finish</p>",
        "id": 264179682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638980495
    },
    {
        "content": "<p>The whole file was written with open_locale classical, this is what I was saying the other day. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.support_update_ne_zero/src\">src#finsupp.support_update_ne_zero</a></p>",
        "id": 264180054,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638980656
    },
    {
        "content": "<p>The right outlook to take is \"the definitions in this file use noncomputable classical instances\", not \"this file uses noncomputable instances throughout\"</p>",
        "id": 264180408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638980805
    },
    {
        "content": "<p>Lemmas should always be generalized to _any_ decidable instance</p>",
        "id": 264180451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638980824
    },
    {
        "content": "<p>I agree with you in principle. But there's a larger cleanup necessary to make that actually be the case.</p>",
        "id": 264180479,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638980842
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/timeout.20when.20working.20with.20ideal.20of.20polynomial.20ring\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/timeout.20when.20working.20with.20ideal.20of.20polynomial.20ring</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/1391\">#1391</a></p>",
        "id": 264180493,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638980850
    },
    {
        "content": "<p>And the linter to catch it</p>",
        "id": 264180522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638980862
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10672\">#10672</a> fixes most of these in finsupp/basic</p>",
        "id": 264182756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638981758
    },
    {
        "content": "<p>(and CI is now happy with it)</p>",
        "id": 264200222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638988664
    }
]