[
    {
        "content": "<p>I am very perplexed by the following error I am getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">x</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n<p>I can produce a mwe, but I am wondering if there might be something hidden preventing me to see that the two <code>is_integral R x</code> are not actually the same thing.</p>",
        "id": 213774203,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603108631
    },
    {
        "content": "<p>Have you tried <code>set_option pp.all true</code>?</p>",
        "id": 213774228,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603108662
    },
    {
        "content": "<p>Before the beginning of the <code>lemma</code>?</p>",
        "id": 213774246,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603108678
    },
    {
        "content": "<p>Yes</p>",
        "id": 213774265,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603108683
    },
    {
        "content": "<p>Another trick is to use the <code>convert</code> tactic instead of <code>apply</code>, then it should make a goal for the terms that don't match.</p>",
        "id": 213774309,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603108694
    },
    {
        "content": "<p>OK, with the <code>set_option pp.all true</code> I think I see that they are not equal (although the error is some 50 lines long and I can't read it). I' ll try with <code>convert</code> and see what happens.</p>",
        "id": 213774406,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603108766
    },
    {
        "content": "<p>Thanks! The situation evolved (not that I'm in an extremely nice position, now). I keep on fighting with the fact that fractional ideals are defined in terms of the localizing morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, but the localization of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> (eg at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mi>R</mi><mo>∖</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">S=R\\setminus 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>) is not defined as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra but only as a ring.</p>",
        "id": 213774790,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603108983
    },
    {
        "content": "<p>Hmm, <code>f.codomain</code> should have an algebra instance, I think</p>",
        "id": 213774866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603109041
    },
    {
        "content": "<p>I somehow found it, I think it is <code>ring_hom.to_algebra f.to_map</code>.</p>",
        "id": 213774965,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603109091
    },
    {
        "content": "<p>Yet when I try to compare <code>f.codomain</code> with <code>K</code> they are different things when it gets to very deep coercions (at least this is how interpret the following error):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">term</span>\n  <span class=\"n\">A</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_comm_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">K</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n    <span class=\"n\">h_KRalg</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_comm_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_comm_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_3</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">K</span> <span class=\"n\">_inst_2</span><span class=\"o\">)))</span>\n    <span class=\"n\">h_RalgK</span>\n</code></pre></div>",
        "id": 213775159,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603109212
    },
    {
        "content": "<p>Well, this one is easy for now: one of them uses <code>h_KRalg</code> (whatever that is) while the other uses <code>h_RalgK</code> (whatever that is).</p>",
        "id": 213775322,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603109295
    },
    {
        "content": "<p>You're right, I am messing things up. At any rate, with Anne's advice I guess I can go a bit further in understanding what I got wrong.</p>",
        "id": 213775578,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1603109446
    }
]