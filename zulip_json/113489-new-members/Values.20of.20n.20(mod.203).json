[
    {
        "content": "<p>I'm working on the proof below but am stuck on the lines including sorry. Any help would be appreciated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.field.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">number_theory.pythagorean_triples</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.power</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring_exp</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.field_simp</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mod_three_eq_zero_or_one_or_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"bp\">▸</span> <span class=\"n\">int.mod_lt</span> <span class=\"n\">_</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int.mod_nonneg</span> <span class=\"n\">_</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h₁</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"n\">dec_trivial</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h₁</span> <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277620345,
        "sender_full_name": "Harry Pacitti",
        "timestamp": 1648987875
    },
    {
        "content": "<p>Do <code>or.inr (or.inl rfl)</code> and <code>or.inr (or.inr rfl)</code> work?</p>",
        "id": 277620893,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1648988199
    }
]