[
    {
        "content": "<p>I'm sure this is a simple thing I'm overlooking, but can someone explain why Lean is giving a <code>don't know how to synthesize placeholder</code> error at  the theorem statement here, complaining that it needs a term of type <code>A → B</code>?  Why isn't it using the implicit variable <code>l : A → B</code> declared above?  (I thought I might need to explicitly <code>include</code> it to force Lean to notice it, but that hasn't fixed the problem).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.boolean_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">boolean_algebra</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">boolean_algebra</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R_upward_closed_right</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"bp\">≤</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b1</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">omit</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 257521121,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1634212072
    },
    {
        "content": "<p>When you use <code>R</code>, <code>l</code> is treated as an implicit argument. Problem is, it doesn't appear in the definition of <code>R</code>, so Lean can't figure out what to put there!</p>",
        "id": 257527710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634215435
    },
    {
        "content": "<p>The definition of <code>R</code> doesn't \"remember\" that the particular variable it was defined with is <code>l</code>. You can achieve your expected result using <code>parameter</code>, but we advise against it.</p>",
        "id": 257527926,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634215518
    },
    {
        "content": "<p>Best thing here is to simply make <code>l</code> explicit.</p>",
        "id": 257527957,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634215531
    },
    {
        "content": "<p>Ok, thanks very much</p>",
        "id": 257543850,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1634221477
    }
]