[
    {
        "content": "<p>Hello! I'm trying to show</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">digits</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">digits_le_9</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>but I'm not really sure how to work with a list of arbitrary length.<br>\n<code>digits_aux_def</code> splits the list into <code>n % b :: digits_aux b h (n / b)</code> so long as 0 &lt; n. I thought the n=0 case doesn't really matter since the list would be empty and so I could just show a digit is %b, but it still asks about the remainder of the list <code>digits_aux b h (n / b)</code>.<br>\nThanks.</p>",
        "id": 202375558,
        "sender_full_name": "Angela Li",
        "timestamp": 1593469638
    },
    {
        "content": "<p>I guess you do strong induction on n to prove that all the elements of <code>digits_aux b h n</code> are &lt; n (for any b&gt;=2)</p>",
        "id": 202378350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593471915
    },
    {
        "content": "<p>Okay I shall try that!</p>",
        "id": 202378862,
        "sender_full_name": "Angela Li",
        "timestamp": 1593472404
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">digits</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The digits in the base b expansion of n are all less than b -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">digits_lt_base</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"n\">digits</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">digits</span> <span class=\"n\">at</span> <span class=\"n\">hd</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">digits_aux_def</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hd</span><span class=\"o\">},</span> <span class=\"c1\">-- base b+2 expansion of 0 has no digits</span>\n  <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- zero&#39;th digit</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"bp\">.</span><span class=\"n\">mod_lt</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">IH</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_self</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- the base 10 digits of a number are all at most 9</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">digits_le_9</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"mi\">10</span> <span class=\"n\">n</span><span class=\"o\">)),</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"err\">$</span> <span class=\"n\">digits_lt_base</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"n\">hd</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"304229\">@Angela Li</span></p>",
        "id": 202425029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593518342
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3246\">#3246</a></p>",
        "id": 202428009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593520348
    },
    {
        "content": "<p>Hi. I am trying to show a number will have the same or less digits than a bigger number.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">digits</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">le_digits_len_le</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">digits</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I have done cases twice to do it for base 0 and base 1, but I am stuck on base &gt;= 2. I thought I could do induction or strong induction on c where m = n + c, but I got stuck. I'm not sure when to use strong induction vs induction (I kind of used it because I didn't know what else to do).<br>\nThanks.</p>",
        "id": 203616225,
        "sender_full_name": "Angela Li",
        "timestamp": 1594506438
    },
    {
        "content": "<p>This is a great question!</p>",
        "id": 203616316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594506590
    },
    {
        "content": "<p>You could also prove it was monotonic as a function of b</p>",
        "id": 203616364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594506640
    },
    {
        "content": "<p>Why not prove that b^length n &lt;= n and n &lt; b^(1 + length n)?</p>",
        "id": 203616383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594506702
    },
    {
        "content": "<p>warning : I might have made off by one errors.</p>",
        "id": 203616425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594506727
    },
    {
        "content": "<p>I think I was trying to do that and decided to do this first because I got stuck haha.</p>",
        "id": 203616426,
        "sender_full_name": "Angela Li",
        "timestamp": 1594506730
    },
    {
        "content": "<p>I think you can do these by strong induction on n</p>",
        "id": 203616498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594506855
    },
    {
        "content": "<p>If you can prove that <code>(digits b n).length ≤ (digits b (n+1)).length</code> first as a separate lemma then you could use that (inductively), to show <code>n ≤ n+1 ≤ n + 2.... ≤ m - 1 ≤ m</code> to that <code>(digits b n).length ≤ (digits b (n+1)).length ≤ (digits b (n+2)).length ≤  ... ≤ (digits b m).length</code></p>",
        "id": 203616568,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594506977
    },
    {
        "content": "<p>There seem to be some missing lemmas about <code>digits</code>: namely that it satisfies the hypotheses of the list in <code>digits_of_digits</code></p>",
        "id": 203617008,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594507705
    },
    {
        "content": "<p>they're also stated in the docstring for <code>digits</code></p>",
        "id": 203617016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594507736
    },
    {
        "content": "<p>but as far as I can tell, not proven as lemmas</p>",
        "id": 203617019,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594507762
    },
    {
        "content": "<p>That's a good trick!</p>",
        "id": 203617388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594508422
    },
    {
        "content": "<p>If you document it, they will come</p>",
        "id": 203617389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594508436
    },
    {
        "content": "<p><code>(∀ (h : L ≠ list.nil), L.last h ≠ 0)</code> Does this mean there's no leading 0s in the number? I don't really understand the definition of last.</p>",
        "id": 203617457,
        "sender_full_name": "Angela Li",
        "timestamp": 1594508530
    },
    {
        "content": "<p>Isn't it the first digit in the expansion (the way humans write it)</p>",
        "id": 203617712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594509118
    },
    {
        "content": "<p>Sorry about the incompleteness of digits. I'll admit I wrote it thinking that the corresponding Freek problem was easy low-hanging fruit, but then got a bit bored of the subject before doing a thorough job.</p>\n<p>This is a certainly a place where someone learning Lean could add lots of the useful lemmas in a pull request.</p>",
        "id": 203623136,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594519492
    },
    {
        "content": "<p>What's the Freek problem?<br>\nI think I will be exploring digits more bc I'm not sure if I can do what I want to do with happy numbers w/o more things about digits. Hopefully can contribute...</p>",
        "id": 203625015,
        "sender_full_name": "Angela Li",
        "timestamp": 1594523569
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/100.html#85\">https://leanprover-community.github.io/100.html#85</a></p>",
        "id": 203626070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594525746
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> can <span class=\"user-mention\" data-user-id=\"304229\">@Angela Li</span> have push access to non-master mathlib branches? She's written a couple of other lemmas which would be appropriate for <code>data.nat.digits</code>. Her github userid is <code>snobbydragon</code>. Thanks.</p>",
        "id": 204359332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595177159
    },
    {
        "content": "<p>I just tried but it looks like someone beat me to it</p>",
        "id": 204359521,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595177452
    },
    {
        "content": "<p>Same. <span class=\"user-mention\" data-user-id=\"304229\">@Angela Li</span> can visit <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a> to accept.</p>",
        "id": 204359541,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1595177497
    }
]