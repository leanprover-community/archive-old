[
    {
        "content": "<p>I have a class Model  with an operation 'multiplication'  that I write infix as x*y.   But I would like to <br>\ndefine it using some stuff that has been defined after the class definition.  So after  open Model  I  have<br>\nan instance M of my class and everything takes a parameter M, e.g.,  the class DECIDABLE M  of <br>\ndecidable members of M is defined.   Now I want to use some of these things that I defined \"outside\" the <br>\nclass  (so they take a parameter M)  to define  *   (which is built into the class).    Of course I could define it <br>\noutside the class but then I would have  product M x y  instead of  x*y  and I don't think I can use infix notation <br>\nthen  (If I could that would be fine).    Of course if I  \"knew then what i know now\"  I would have done a few <br>\nmore things inside the class;  but now I have hundreds of uses of those things.   Does anyone have a helpful <br>\nsuggestion,  eg.  a way to use infix notation for product M x y  ?</p>\n<p>If this were C++  the answer would be, make it  a virtual function.</p>",
        "id": 226463687,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1613441082
    },
    {
        "content": "<p>There is no relation between infix notation and being defined inside the class</p>",
        "id": 226464047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613441628
    },
    {
        "content": "<p>infix mul is provided by the <code>has_mul M</code> typeclass, which you can prove after the definition with an instance</p>",
        "id": 226464095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613441670
    },
    {
        "content": "<blockquote>\n<p>Now I want to use some of these things that I defined \"outside\" the class (so they take a parameter M) to define * (which is built into the class). </p>\n</blockquote>\n<p>This is a contradiction: if it's built into the class, then it's not defined, it's a field of the structure</p>",
        "id": 226464169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613441767
    },
    {
        "content": "<p>I think an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would help here</p>",
        "id": 226464174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613441786
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span>  <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span><span class=\"o\">:</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"kd\">infix</span> <span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f_definition</span><span class=\"o\">:</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n<span class=\"c1\">-- (multiplication_definition:∀ (x y:M), x*y = zero)</span>\n<span class=\"c1\">--I do not want to define it here!</span>\n <span class=\"c\">/-</span><span class=\"cm\"> end of class definition because next line doesn't declare a member -/</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kd\">infix</span> <span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"c1\">--Can I get away with defining it here and still use infix?</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"c1\">-- rw multiplication_definition,</span>\n    <span class=\"c1\">--  can I finish this proof using the def of mul?</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226472664,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1613452160
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f_definition</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Model.has_mul</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f_definition</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226473193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613452798
    },
    {
        "content": "<p>Thank you Mario,  it's the has_mul  line that I was missing.   But I also do not understand  'rfl'.   I previously thought 'rfl' means, reduce the two sides of an equality and if you get the same normal form that counts as a proof, if not the tactic fails.    Here, however, evidently something else is happening.   You call mul_def a lemma but it's really just defining  what * means.   So are we just telling Lean,  reduce x*y to f x y?</p>",
        "id": 226475426,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1613455278
    },
    {
        "content": "<p>no, it does exactly as you say, it reduces both sides to a normal form. <code>mul_def</code> isn't the definition, <code>Model.has_mul</code> is</p>",
        "id": 226475976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613455940
    },
    {
        "content": "<p>Specifically, <code>Model.has_mul</code> says \"hey lean, when you need to prove <code>has_mul M</code>, try <code>Model.has_mul M</code>\", and when you write <code>x * y</code> it actually means <code>@has_mul.mul M _ x y</code> where <code>_</code> is a proof of <code>has_mul M</code>; lean will follow the above advice, and so you end up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Model.has_mul</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and since <code>Model.has_mul M</code> is defined to be <code>⟨f⟩</code> and <code>has_mul.mul</code> is defined to be projection out of this single-element class, the whole thing reduces to <code>f x y</code>, which is why <code>rfl</code> proves <code>mul_def</code>.</p>",
        "id": 226476155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613456125
    },
    {
        "content": "<p>OK,  I think I've understood your example.   Here's  one with one more feature,  the definition of multiplication can depend on M.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f_definition</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">):</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Model.has_mul</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span> <span class=\"n\">M</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_def</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f_definition</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226480745,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1613460827
    },
    {
        "content": "<p>Wel</p>",
        "id": 226481439,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1613461489
    },
    {
        "content": "<p>The definition already depended on <code>M</code>; <code>f</code> is actually <code>@Model.f M _</code> where <code>_</code> is an instance of type <code>Model M</code></p>",
        "id": 226482098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613462069
    },
    {
        "content": "<p>The difference is that <code>M</code> is an implicit argument in <code>f</code> and explicit in <code>foo</code>, which you can see if you print the types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">f</span>\n<span class=\"c1\">-- def Model.f : Π {M : Type} [c : Model M], M → M → M :=</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : Π (M : Type) [_inst_1 : Model M], M → M → M :=</span>\n</code></pre></div>",
        "id": 226482258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613462195
    },
    {
        "content": "<p>You can (and should) make <code>M</code> implicit in <code>foo</code> by setting the binder of <code>M</code> in the <code>variables</code> line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Model</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">Model</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">):</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : Π {M : Type} [_inst_1 : Model M], M → M → M :=</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Model.has_mul</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_def</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 226482406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613462317
    },
    {
        "content": "<p>Ah,  (need light-bulb-over-the-head emoji)  just by changing  ()  to {}   I could have avoided typing hundreds of explicit Ms.</p>",
        "id": 226483391,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1613462946
    },
    {
        "content": "<p>I didn't think that variables line was doing anything to speak of  as I freely use variables that are not in that list and nothing goes wrong.</p>",
        "id": 226483436,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1613462988
    },
    {
        "content": "<p>The variables line supplies variables automatically if you use them in a statement; but you have to either have declared the variable in a <code>variables</code> line or in the lemma statement itself. For example, the <code>(x y : M)</code> in <code>mul_def</code> are redundant because otherwise it would pick up <code>x y : M</code> from the <code>(a b x y: M)</code> in the variables, but if you used <code>z</code> in mul_def it would be an error, because <code>z</code> was never declared, either in the variables line or in the lemma arguments</p>",
        "id": 226485333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613464447
    }
]