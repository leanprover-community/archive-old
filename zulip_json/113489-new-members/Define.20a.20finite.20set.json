[
    {
        "content": "<p>How do I define a finite set only giving information of its cardinality? I'd like to define something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">S&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">S&#39;</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span>\n</pre></div>\n\n\n<p>(once again nonsense, but a sketch of what I want to define)</p>",
        "id": 135797911,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539560300
    },
    {
        "content": "<p><code>finset.range</code> ?</p>",
        "id": 135797918,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539560326
    },
    {
        "content": "<p>oh you want a fintype, then try <code>fin</code></p>",
        "id": 135797927,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539560361
    },
    {
        "content": "<p>Do you mean a finite type?</p>",
        "id": 135799298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539563266
    },
    {
        "content": "<p>You mean <code>def S' : Type := fin 2</code>? That does seem to work.</p>",
        "id": 135815346,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539591515
    },
    {
        "content": "<blockquote>\n<p>Do you mean a finite type?</p>\n</blockquote>\n<p>Oh, right, set only refers to subsets. I forgot.</p>",
        "id": 135815375,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539591601
    },
    {
        "content": "<p>I don’t think we understood this question</p>",
        "id": 135815434,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539591657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> <code>fin 2</code> is a type. There are exactly two distinct terms of that type. The terms are rather a mouthful to describe: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>There's another type called <code>bool</code> which also has exactly two terms. Type <code>#check bool</code> and right-click on <code>bool</code>and select \"go to definition\" to see it. The definition is completely different to <code>fin</code>. The two terms of type <code>bool</code> are <code>tt</code> and <code>ff</code>. These types <code>bool</code> and <code>fin 2</code> are not <em>equal</em>, but there is a map from <code>bool</code> to <code>fin 2</code> which is a bijection, and which you can define using the equation compiler (pattern matching).</p>\n<p>Exercise 1: <code>def f : bool → fin 2</code>. Define a function from <code>bool</code> to <code>fin 2</code> which you can prove (in maths, not in Lean) is a bijection.</p>\n<p>Exercise 2: fill in the sorry.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">bool</span> <span class=\"err\">$</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Exercise 3: find the library function which turns <code>X</code> into a proof that <code>f</code> is a bijection. Hint: which namespace do you think that function would be in?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;</span><span class=\"n\">FILL</span> <span class=\"n\">IN</span> <span class=\"n\">FUNCTION</span> <span class=\"n\">NAME</span><span class=\"bp\">&gt;</span> <span class=\"n\">X</span>\n</pre></div>",
        "id": 135831206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539610548
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> <code>fin 2</code> is a type. There are exactly two distinct terms of that type. The terms are rather a mouthful to describe: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>There's another type called <code>bool</code> which also has exactly two terms. Type <code>#check bool</code> and right-click on <code>bool</code>and select \"go to definition\" to see it. The definition is completely different to <code>fin</code>. The two terms of type <code>bool</code> are <code>tt</code> and <code>ff</code>. These types <code>bool</code> and <code>fin 2</code> are not <em>equal</em>, but there is a map from <code>bool</code> to <code>fin 2</code> which is a bijection, and which you can define using the equation compiler (pattern matching).</p>\n<p>Exercise 1: <code>def f : bool → fin 2</code>. Define a function from <code>bool</code> to <code>fin 2</code> which you can prove (in maths, not in Lean) is a bijection.</p>\n<p>Exercise 2: fill in the sorry.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">bool</span> <span class=\"err\">$</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Exercise 3: find the library function which turns <code>X</code> into a proof that <code>f</code> is a bijection. Hint: which namespace do you think that function would be in?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;</span><span class=\"n\">FILL</span> <span class=\"n\">IN</span> <span class=\"n\">FUNCTION</span> <span class=\"n\">NAME</span><span class=\"bp\">&gt;</span> <span class=\"n\">X</span>\n</pre></div>\n\n\n</blockquote>\n<p>One more question: is there any way to use statements like \"x is either the first element of fin 2 or the second element\" directly without bijecting to bool?</p>",
        "id": 135858585,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539637692
    },
    {
        "content": "<p>by \"use\" do you mean \"proof\"?</p>",
        "id": 135858626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539637757
    },
    {
        "content": "<blockquote>\n<p>by \"use\" do you mean \"proof\"?</p>\n</blockquote>\n<p>Either a proof or an existing lemma.</p>",
        "id": 135858645,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539637773
    },
    {
        "content": "<p>dec_trivial</p>",
        "id": 135858653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539637787
    },
    {
        "content": "<blockquote>\n<p>dec_trivial</p>\n</blockquote>\n<p>Oh ok -- how would I actually denote \"the first element of fin 2\" and \"the second element of fin 2\" in such a statement? Just putting down the explicit form (like <code>⟨(0 : ℕ), dec_trivial⟩</code>) gives errors.</p>",
        "id": 135858776,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539637878
    },
    {
        "content": "<p>0 and 1</p>",
        "id": 135858791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539637901
    },
    {
        "content": "<blockquote>\n<p>0 and 1</p>\n</blockquote>\n<p>Wait, don't I need to do x.val, y.val for that? or do just x and y also take the values 0 and 1? (where <code>x y : fin 2</code>). I was under the impression that <code>.val</code> indexes the elements as 0 and 1 but the elements themselves are left abstract.</p>",
        "id": 135858861,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539637939
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 135858962,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539638054
    },
    {
        "content": "<p>Oh ok -- what's the point of <code>x.val</code>, then?</p>",
        "id": 135859021,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539638143
    },
    {
        "content": "<p>that 0 is of type <code>fin 2</code></p>",
        "id": 135859126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539638272
    },
    {
        "content": "<p>for any n, <code>fin (succ n)</code> has <code>0</code> defined on it in the obvious way, and any other numeral <code>x</code> is just <code>\\&lt; x % succ n, proof\\&gt;</code>. <code>val</code> is a function <code>fin n -&gt; nat</code>, so it's useful whenever you want to turn something of type <code>fin n</code> into something of type <code>nat</code>.</p>",
        "id": 135859183,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539638293
    },
    {
        "content": "<p>you can also write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span>\n</pre></div>",
        "id": 135859184,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539638294
    },
    {
        "content": "<blockquote>\n<p>for any n, <code>fin (succ n)</code> has <code>0</code> defined on it in the obvious way, and any other numeral <code>x</code> is just <code>\\&lt; x % succ n, proof\\&gt;</code>. <code>val</code> is a function <code>fin n -&gt; nat</code>, so it's useful whenever you want to turn something of type <code>fin n</code> into something of type <code>nat</code>.</p>\n</blockquote>\n<p>So it's like a coercion?</p>",
        "id": 135859198,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539638337
    },
    {
        "content": "<p>Yes.</p>",
        "id": 135859207,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539638347
    },
    {
        "content": "<p>Thanks. I was proving that if there are three elements in fin 2, two of them must be equal -- I was trying some insanely long (relative to the triviality of the statement) proof by contradiction, ordering the elements and showing that the largest of the three will be above fin.last. Now it's easy.</p>",
        "id": 135859412,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539638543
    },
    {
        "content": "<p>By the way, does dec_trivial behave differently in term mode and tactic mode? The statement <code>have H01 : ∀ s : fin 2, s = 0 ∨ s = 1 := dec_trivial</code> works, but <code>have H01 : ∀ s : fin 2, s = 0 ∨ s = 1, exact dec_trivial,</code> doesn't.</p>",
        "id": 135859602,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539638724
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H01</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"n\">trivial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H01</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135859712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539638824
    },
    {
        "content": "<p>Weird, that doesn't work for my theorem. I'll post my code, one second.</p>",
        "id": 135859931,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539639039
    },
    {
        "content": "<p>Or maybe it does.</p>",
        "id": 135860017,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539639122
    },
    {
        "content": "<p>Ok yeah it does.</p>",
        "id": 135860103,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539639194
    },
    {
        "content": "<p>If you <code>intro s</code> it won't work.</p>",
        "id": 135860131,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539639228
    },
    {
        "content": "<p>I found my problem -- I have <code>local attribute [instance] classical.prop_decidable</code> in my code, which seems to interfere with <code>dec_trivial</code>.</p>",
        "id": 135860946,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539640081
    },
    {
        "content": "<p>How do I define the scope of a local attribute so it applies only to the theorem it is intended for?</p>",
        "id": 135861021,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539640135
    },
    {
        "content": "<blockquote>\n<p>I found my problem -- I have <code>local attribute [instance] classical.prop_decidable</code> in my code, which seems to interfere with <code>dec_trivial</code>.</p>\n</blockquote>\n<p>Remember when I suggested that <code>local attribute [instance, priority 0] classical.prop_decidable</code> was better? It's for this sort of reason.</p>",
        "id": 135861033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539640155
    },
    {
        "content": "<p>You did? Whoops, I missed it.</p>",
        "id": 135861043,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539640178
    },
    {
        "content": "<p>Yep, that works. Thanks.</p>",
        "id": 135861114,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539640210
    },
    {
        "content": "<p>But in a general scenario, is <code>section</code> the only way to define the scope of local things?</p>",
        "id": 135861127,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539640238
    },
    {
        "content": "<p><code>example (a b c : bool) : a = b ∨ b = c ∨ c = a := by cases a;cases b;cases c;simp </code></p>",
        "id": 135861487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539640651
    },
    {
        "content": "<p>This trick wouldn't work with <code>fin 2</code> though. Although maybe <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  was recently talking about a tactic which enabled you to do cases on <code>fin n</code> somehow...</p>",
        "id": 135861551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539640695
    },
    {
        "content": "<p>To make the trick work with <code>fin 2</code> you would have to define your own recursor.</p>",
        "id": 135861572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539640728
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dec_trivial</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</pre></div>",
        "id": 135861604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539640788
    },
    {
        "content": "<p>How do you do it for <code>fin 2</code>?</p>",
        "id": 135861698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539640876
    },
    {
        "content": "<p>I am surprised your code works -- I would have guessed that <code>dec_trivial</code> would have complained that it did not know the type of anything before you fed <code>a b c</code> to it</p>",
        "id": 135861765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539640931
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 135861771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539640940
    },
    {
        "content": "<blockquote>\n<p>How do you do it for <code>fin 2</code>?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dec_trivial</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n</pre></div>",
        "id": 135861778,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539640961
    },
    {
        "content": "<blockquote>\n<p>I am surprised your code works -- I would have guessed that dec_trivial would have complained that it did not know the type of anything before you fed a b c to it</p>\n</blockquote>\n<p>That's what the type ascription is for</p>",
        "id": 135861986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539641280
    },
    {
        "content": "<p>The tactic Kevin mentioned above is in the PR <a href=\"https://github.com/leanprover/mathlib/issues/352\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/352\">#352</a>.</p>",
        "id": 135862313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539641698
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I am surprised your code works -- I would have guessed that dec_trivial would have complained that it did not know the type of anything before you fed a b c to it</p>\n</blockquote>\n<p>That's what the type ascription is for</p>\n</blockquote>\n<p>Lean can't work out the types of <code>a b c</code> when it has to check that <code>dec_trivial</code> is a term of that type, in my model of how it works. It must decide to wait a bit longer and hope it gets lucky.</p>",
        "id": 135862416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539641812
    },
    {
        "content": "<blockquote>\n<p>The tactic Kevin mentioned above is in the PR <a href=\"https://github.com/leanprover/mathlib/issues/352\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/352\">#352</a>.</p>\n</blockquote>\n<p>yeah but it ain't merged</p>",
        "id": 135862435,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539641873
    },
    {
        "content": "<p>Interestingly, this fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135862505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539641952
    },
    {
        "content": "<p>aah it's the commas I guess</p>",
        "id": 135862521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539641987
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"bp\">_</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"bp\">_</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"n\">tt</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135862583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539642019
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> <code>fin 2</code> is a type. There are exactly two distinct terms of that type. The terms are rather a mouthful to describe: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>There's another type called <code>bool</code> which also has exactly two terms. Type <code>#check bool</code> and right-click on <code>bool</code>and select \"go to definition\" to see it. The definition is completely different to <code>fin</code>. The two terms of type <code>bool</code> are <code>tt</code> and <code>ff</code>. These types <code>bool</code> and <code>fin 2</code> are not <em>equal</em>, but there is a map from <code>bool</code> to <code>fin 2</code> which is a bijection, and which you can define using the equation compiler (pattern matching).</p>\n<p>Exercise 1: <code>def f : bool → fin 2</code>. Define a function from <code>bool</code> to <code>fin 2</code> which you can prove (in maths, not in Lean) is a bijection.</p>\n<p>Exercise 2: fill in the sorry.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">bool</span> <span class=\"err\">$</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Exercise 3: find the library function which turns <code>X</code> into a proof that <code>f</code> is a bijection. Hint: which namespace do you think that function would be in?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;</span><span class=\"n\">FILL</span> <span class=\"n\">IN</span> <span class=\"n\">FUNCTION</span> <span class=\"n\">NAME</span><span class=\"bp\">&gt;</span> <span class=\"n\">X</span>\n</pre></div>\n\n\n</blockquote>\n<p>Exercise 1 is easy, it's just </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But I have no clue as to how to even start exercise 2. Is there a library command that helps you prove the isomorphism?</p>",
        "id": 135911890,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539707810
    },
    {
        "content": "<p>Do you know how to build terms whose type is a structure using <code>{</code> <code>}</code>?</p>",
        "id": 135912162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708108
    },
    {
        "content": "<p>No, I'm not even sure what a structure is.</p>",
        "id": 135912238,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708162
    },
    {
        "content": "<p>A structure is just an inductive type which only has one constructor.</p>",
        "id": 135912269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708215
    },
    {
        "content": "<p>So non-examples are things like <code>nat</code> and <code>bool</code>.</p>",
        "id": 135912280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708228
    },
    {
        "content": "<p>But an example would be something like <code>and P Q</code>.</p>",
        "id": 135912327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708250
    },
    {
        "content": "<p>Wait, can't <code>and P Q</code> be considered a pi type?</p>",
        "id": 135912357,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708297
    },
    {
        "content": "<p>it's a sigma type</p>",
        "id": 135912372,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539708307
    },
    {
        "content": "<p>Since it's a function of two propositions?</p>",
        "id": 135912377,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708309
    },
    {
        "content": "<p><code>and</code> is a pi type</p>",
        "id": 135912382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539708316
    },
    {
        "content": "<p>Ok, sure, then how is it an inductive type? (\"A structure is just an inductive type...\")</p>",
        "id": 135912396,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708335
    },
    {
        "content": "<p>There's only one way you can build a term of type <code>and P Q</code> -- you have to supply a proof of <code>P</code> and a proof of <code>Q</code>. So this gives us the possibility of having a second piece of notation for defining terms of type <code>and P Q</code> where we say we're making something of type <code>and P Q</code> and then just supply the proofs of <code>P</code> and <code>Q</code></p>",
        "id": 135912411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708353
    },
    {
        "content": "<p>I said <code>and P Q</code> is an inductive type, not <code>and</code></p>",
        "id": 135912452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708366
    },
    {
        "content": "<p>Oh ok sure, that makes sense.</p>",
        "id": 135912474,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708402
    },
    {
        "content": "<p>But I'm still not sure what that has to do with inductive types.</p>",
        "id": 135912484,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708418
    },
    {
        "content": "<p><code>example (P Q : Prop) : and P Q := {}</code></p>",
        "id": 135912493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708431
    },
    {
        "content": "<p>If you type that, you get a red underline under the squiggly bracket -- this can't work currently, because we didn't supply proofs of P and Q. But the <code>{}</code> notation is clue to a new way of defining a term of type <code>and P Q</code></p>",
        "id": 135912521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708479
    },
    {
        "content": "<p>And the error is interesting -- Lean complains that some fields are missing.</p>",
        "id": 135912580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708517
    },
    {
        "content": "<p>I tried supplying the proofs, still doesn't work.</p>",
        "id": 135912589,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708524
    },
    {
        "content": "<p><code>example (P Q : Prop) (HP : P) (HQ : Q) : and P Q := {HP HQ}</code></p>",
        "id": 135912602,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708539
    },
    {
        "content": "<p>function expected at<br>\n  HP<br>\nterm has type<br>\n  P</p>",
        "id": 135912617,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708551
    },
    {
        "content": "<p>You have to know how to supply them.</p>",
        "id": 135912634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708576
    },
    {
        "content": "<p><code>example (P Q : Prop) (HP : P) (HQ : Q) : and P Q := { left := HP, right := HQ}</code> is the syntax I think.</p>",
        "id": 135912641,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539708582
    },
    {
        "content": "<p>right</p>",
        "id": 135912649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708587
    },
    {
        "content": "<p>Oh ok, so it's just standard left and right in term mode.</p>",
        "id": 135912709,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708607
    },
    {
        "content": "<p>(But I don't know how to do exercise 2 in tactic mode either.)</p>",
        "id": 135912726,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708633
    },
    {
        "content": "<p>It doesn't have anything to do with the <code>left</code> and <code>right</code> tactics if that's what you mean</p>",
        "id": 135912735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539708645
    },
    {
        "content": "<p>Oh right, that's for <code>or</code> goals.</p>",
        "id": 135912753,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708667
    },
    {
        "content": "<p>It's just that the fields of the structure <code>and P Q</code> happen to also be named <code>left</code> and <code>right</code> (I guess? I never knew this)</p>",
        "id": 135912765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1539708680
    },
    {
        "content": "<p>So you can start work on Q2 by doing this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">bool</span> <span class=\"err\">$</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 135912768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708682
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 135912786,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708709
    },
    {
        "content": "<p>I figured out the fields by writing <code>... := {}</code> and then looking at the errors.</p>",
        "id": 135912787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708711
    },
    {
        "content": "<p>I knew the fields from the definition, but I didn't know how to supply them.</p>",
        "id": 135912841,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539708735
    },
    {
        "content": "<p>If you replace <code>inv_fun := sorry</code> with <code>inv_fun := _</code> and look at the error, you'll see that <code>inv_fun</code> is supposed to be the inverse map from <code>fin 2</code> back to <code>bool</code>. So you could define that outside, like you did with <code>f</code></p>",
        "id": 135912862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708787
    },
    {
        "content": "<p>The two remaining fields are the proofs that the compositions in both directions are the identity. Of course both proofs are \"just unravel everything\" but I think it's quite good fun trying to work out how to do this.</p>",
        "id": 135912885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539708838
    },
    {
        "content": "<p>Ok, I'm defining <code>f_inv</code>, and I've gotten up to having <code>Hx01 : x = 0 ∨ x = 1</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f_inv</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">H01</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">Hx01</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H01</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But for some reason I can't do <code>cases Hx01</code>. I get <code>induction tactic failed, recursor 'or.dcases_on' can only eliminate into Prop</code> What's going on?</p>",
        "id": 135913696,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539709546
    },
    {
        "content": "<blockquote>\n<p>I figured out the fields by writing <code>... := {}</code> and then looking at the errors.</p>\n</blockquote>\n<p>This is so September 2018...</p>",
        "id": 135913805,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539709625
    },
    {
        "content": "<p>Nowadays we type <code>{!}</code> and click on the light bulb (or Ctrl-.) and choose the relevant option from the menu (I don't have Lean to check right now)</p>",
        "id": 135913874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539709678
    },
    {
        "content": "<p>I need to move with the times.</p>",
        "id": 135915076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539710728
    },
    {
        "content": "<p>Abhi -- it's not a good idea to use tactics to define data. You can use tactics for the proof, but for the data you are better off using something like the equation compiler</p>",
        "id": 135915189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539710814
    },
    {
        "content": "<p>But to answer your question about what's going on, the <code>cases</code> command runs the recursor for the type, and if you look at the definition of <code>or.rec</code> you'll see that it's only set up to spit out proofs, not data</p>",
        "id": 135915333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539710951
    },
    {
        "content": "<p>I think I once knew a good reason for this</p>",
        "id": 135915359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539710986
    },
    {
        "content": "<p>The iota reduction rule for <code>or</code>  would cause contradictions when both sides of the <code>or</code> were true if <code>or</code> could produce data.</p>",
        "id": 135915489,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539711096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  Can you give an example?</p>",
        "id": 135916915,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539712406
    },
    {
        "content": "<blockquote>\n<p>Abhi -- it's not a good idea to use tactics to define data. You can use tactics for the proof, but for the data you are better off using something like the equation compiler</p>\n</blockquote>\n<p>I'm not sure how to. I mean, I tried to use the equation compiler to produce a definition for <code>f</code>, but all I could do is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span><span class=\"o\">):</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>Which is only the value of <code>f</code>, not a function itself.</p>",
        "id": 135917107,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539712563
    },
    {
        "content": "<p>That did define a function <code>f</code>.</p>",
        "id": 135917243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539712635
    },
    {
        "content": "<p>It is the same as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"err\">\\</span><span class=\"n\">lam</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 135917292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539712676
    },
    {
        "content": "<p><code>def f (h : 1 = 1 ∨ 0 = 0) : ℕ := or.cases_on h (λ h, 0) (λ h, 1)</code>. The iota reduction rule says <code>f (or.inl rfl) = 0</code> and that <code>f (or.inr rfl) = 1)</code>, but since by proof irrelevance <code>or.inl rfl = or.inr rfl</code>, this would imply <code>0 = 1</code>, hence <code>or</code> cannot eliminate into data.</p>",
        "id": 135917376,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539712750
    },
    {
        "content": "<p>Here's your function defined using the equation compiler</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 135917466,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539712810
    },
    {
        "content": "<blockquote>\n<p><code>def f (h : 1 = 1 ∨ 0 = 0) : ℕ := or.cases_on h (λ h, 0) (λ h, 1)</code>. The iota reduction rule says <code>f (or.inl rfl) = 0</code> and that <code>f (or.inr rfl) = 1)</code>, but since by proof irrelevance <code>or.inl rfl = or.inr rfl</code>, this would imply <code>0 = 1</code>, hence <code>or</code> cannot eliminate into data.</p>\n</blockquote>\n<p>Huh -- I thought <code>0 = 0</code> and <code>1 = 1</code> would just be treated as propositions (and indeed they are equivalent).</p>",
        "id": 135917644,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539712937
    },
    {
        "content": "<blockquote>\n<p>It is the same as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"err\">\\</span><span class=\"n\">lam</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n</pre></div>\n\n\n</blockquote>\n<p>Thanks -- why doesn't <code>∀ b : bool</code> work in place of <code>λ b</code>?</p>",
        "id": 135917806,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539713095
    },
    {
        "content": "<p><code>(λ b,  proof) : (∀ b : bool, p b)</code></p>",
        "id": 135917850,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539713130
    },
    {
        "content": "<p>They are treated as propositions. That's why it's not possible to eliminate into data. If both sides of the <code>or</code> are true it breaks proof irrelevance, but without this iota reduction rule you can't compute with it.</p>",
        "id": 135917919,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539713165
    },
    {
        "content": "<p><code>\\forall</code> is only for propositions.</p>",
        "id": 135917928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539713176
    },
    {
        "content": "<p>It's only for types.</p>",
        "id": 135917973,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539713223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130500\">@Abhimanyu Pallavi Sudhir</span> here are some comments on things you said whilst I was going home. </p>\n<p>If <code>X</code> is an inductive type then it could well have been defined in something like the following way:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">:</span> <span class=\"n\">X</span>\n</pre></div>\n\n\n<p>and then you can define functions <code>X-&gt;Y</code> using the equation compiler like this (I <code>open X</code> because <code>c1</code> is really called <code>X.c1</code> etc)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">X</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span>\n<span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span>\n</pre></div>\n\n\n<p>Note that the <code>|</code> symbols are being used in two different ways here -- first to define an inductive type, and secondly to define a function from the type. The equation compiler is quite powerful. It's trickier to get it to define the map from <code>fin 2</code>, but it's possible. The equation compiler is very smart.</p>\n<p>You asked about <code>\\forall b</code> instead of <code>lam b</code> -- one is the type, and one is the term. You use Pi to make Pi types (and forall is a special case of Pi, as are function types), and lam to make terms of type Pi. This is what Kenny's post was demonstrating. It took me some time to get my head around all this but it's easy really -- somehow I never read anything which explained it all in simple terms (which was what I needed this time last year). There are propositions called things like <code>P</code> and proofs called things like <code>H</code> or <code>HP</code>. Similarly there are function types (Pi types) called things like <code>X -&gt; Y</code> and then there are actual functions (the terms) called things like <code>lam x, x + 1</code>.</p>",
        "id": 135921897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539716519
    },
    {
        "content": "<p>Thanks. This works for exercise 2 (<code>left_inv</code> only -- presumably the same thing works for <code>right_inv</code>) :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n<span class=\"c1\">--set_option pp.notation false</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f_inv</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"n\">tt</span> <span class=\"k\">else</span> <span class=\"n\">ff</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n                <span class=\"n\">rw</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inverse</span><span class=\"o\">,</span>\n                <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">Hfff</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">Hfff</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">Hftt</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">Hftt</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n              <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c1\">--&lt;FILL IN FUNCTION NAME&gt; X</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">bijective_iff_has_inverse</span>\n</pre></div>\n\n\n<p>Although <code>dec_trivial</code> did the job for me, I'm curious to know what exactly is the algorithm being tried by Lean at that point (in Lean notation, it's obvious mathematically), i.e. what could I replace <code>dec_trivial</code> with?</p>",
        "id": 135925018,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539719724
    },
    {
        "content": "<p><code>right_inv</code> might be harder, the way you've set it up.</p>",
        "id": 135925157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539719872
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n                <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">Hfff</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">Hfff</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span><span class=\"n\">refl</span><span class=\"o\">,</span>\n                <span class=\"k\">have</span> <span class=\"n\">Hftt</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                <span class=\"n\">rw</span> <span class=\"n\">Hftt</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n              <span class=\"kn\">end</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 135925232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539719915
    },
    {
        "content": "<p>we should all wait until <code>fin_cases</code> is merged</p>",
        "id": 135925250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539719937
    },
    {
        "content": "<p>Your <code>rw</code> doesn't seem to do anything. Because your goal is definitionally equal to what the rw changed it into, you can just skip it. And both of your algorithms are <code>rfl</code> -- the left hand side equals the right hand side by definition.</p>",
        "id": 135925295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539719984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I just dealt with <code>n&gt;=2</code> using contradiction. Abhi is yet to run into this issue I think.</p>",
        "id": 135925376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539720018
    },
    {
        "content": "<p>Does <code>fin_cases</code> actually allow just doing cases on <code>fin n</code>? Does it break it up into the full <code>n</code> cases even if <code>n</code> is a thousand?</p>",
        "id": 135925548,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539720185
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I just dealt with <code>n&gt;=2</code> using contradiction. Abhi is yet to run into this issue I think.</p>\n</blockquote>\n<p>Wait, which issue?</p>",
        "id": 135925570,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539720226
    },
    {
        "content": "<p>His definition of <code>f_inv</code> is \"k=1\" and \"all other cases\" so he'll have to deal with k&gt;=2 at some point.</p>",
        "id": 135925651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539720272
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n                <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span><span class=\"n\">refl</span>\n              <span class=\"kn\">end</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 135925662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539720287
    },
    {
        "content": "<p>I guess <code>refl</code> is more powerful than I thought.</p>",
        "id": 135925812,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539720401
    },
    {
        "content": "<blockquote>\n<p>His definition of <code>f_inv</code> is \"k=1\" and \"all other cases\" so he'll have to deal with k&gt;=2 at some point.</p>\n</blockquote>\n<p>I can just use exfalso and prove a contradiction using <code>2 &gt; fin.last</code>.</p>",
        "id": 135925884,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539720482
    },
    {
        "content": "<p>In fact it seems just doing <code>cases x</code> gives a statement that says <code>x.val &lt; 2</code>.</p>",
        "id": 135925975,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539720550
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">trunc</span><span class=\"bp\">.</span><span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">equiv_fin</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 135925992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720580
    },
    {
        "content": "<p>:P</p>",
        "id": 135925998,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720585
    },
    {
        "content": "<p>What??</p>",
        "id": 135926050,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539720610
    },
    {
        "content": "<p>rofl what happened there?</p>",
        "id": 135926067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539720642
    },
    {
        "content": "<p><code>fintype.card bool = 2</code></p>",
        "id": 135926096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720709
    },
    {
        "content": "<p>so <code>bool ~= fin 2</code></p>",
        "id": 135926103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720716
    },
    {
        "content": "<p>trunc</p>",
        "id": 135926145,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720725
    },
    {
        "content": "<p>Oh, that's exactly what Abhi was asking if he could do earlier. <code>fintype.equiv_fin</code> is the general proof that a type which is known to have finitely many elements (say <code>n</code>) <code>equiv</code>s with <code>fin n</code></p>",
        "id": 135926148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539720726
    },
    {
        "content": "<p>still trunc</p>",
        "id": 135926152,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720733
    },
    {
        "content": "<p>Aah, but Kenny's proof is noncomputable :O</p>",
        "id": 135926170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539720756
    },
    {
        "content": "<p>the funny part is it's not really, if you evaluate the proof you can eliminate the trunc</p>",
        "id": 135926191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720781
    },
    {
        "content": "<p>how?</p>",
        "id": 135926198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720790
    },
    {
        "content": "<p>wait, proof is irrelevant and can't be evaluated</p>",
        "id": 135926204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720800
    },
    {
        "content": "<p>false on both counts</p>",
        "id": 135926215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720812
    },
    {
        "content": "<p>it's not a proof, it's a trunc</p>",
        "id": 135926232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720821
    },
    {
        "content": "<p>and it can be evaluated</p>",
        "id": 135926236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720829
    },
    {
        "content": "<p>even if it was a proof</p>",
        "id": 135926239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720833
    },
    {
        "content": "<p>how can I do it then</p>",
        "id": 135926242,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720838
    },
    {
        "content": "<p>via <code>#reduce</code></p>",
        "id": 135926244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720840
    },
    {
        "content": "<p>oh well then you can't make it a definition</p>",
        "id": 135926289,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720848
    },
    {
        "content": "<p>could you show us the code?</p>",
        "id": 135926300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539720864
    },
    {
        "content": "<p>If you <code>#reduce</code> the proof that <code>trunc (bool ~= fin 2)</code> you will get something that starts <code>trunc.mk</code>... then you throw that away and keep the rest</p>",
        "id": 135926331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539720895
    },
    {
        "content": "<p>...or get a deterministic timeout</p>",
        "id": 135926448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539721018
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">bool</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span>  <span class=\"k\">begin</span>\n                 <span class=\"c1\">--rw function.left_inverse,</span>\n                 <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                 <span class=\"k\">have</span> <span class=\"n\">Hfff</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">ff</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                 <span class=\"n\">rw</span> <span class=\"n\">Hfff</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n                 <span class=\"k\">have</span> <span class=\"n\">Hftt</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n                 <span class=\"n\">rw</span> <span class=\"n\">Hftt</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f_inv</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n               <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n                 <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                 <span class=\"k\">have</span> <span class=\"n\">H01</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n                 <span class=\"k\">have</span> <span class=\"n\">x01</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H01</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                 <span class=\"n\">cases</span> <span class=\"n\">x01</span> <span class=\"k\">with</span> <span class=\"n\">x0</span> <span class=\"n\">x1</span><span class=\"o\">,</span>\n                 <span class=\"c1\">--case x0</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">x0</span><span class=\"o\">,</span>\n                    <span class=\"k\">have</span> <span class=\"n\">Hfarc0</span> <span class=\"o\">:</span> <span class=\"n\">f_inv</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">Hfarc0</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n                 <span class=\"c1\">--case x1</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">x1</span><span class=\"o\">,</span>\n                    <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n               <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</pre></div>",
        "id": 135926489,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539721060
    },
    {
        "content": "<p>What's <code>trunc.out</code>? Someone catch me up.</p>",
        "id": 135926558,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539721116
    },
    {
        "content": "<p>it noncomputably removes the trunc.</p>",
        "id": 135926607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539721174
    },
    {
        "content": "<p>For a type <code>\\a</code>, <code>trunc \\a</code> is the type <code>\\a</code> quotient by the equivalence relation that relates everything</p>",
        "id": 135926655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539721204
    },
    {
        "content": "<p>You can see the docstring for <code>trunc</code> by hovering over it. It's some weird CS thing.</p>",
        "id": 135926721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539721255
    },
    {
        "content": "<p>Ok, I'll need to read up a bit on that.</p>",
        "id": 135926919,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539721494
    },
    {
        "content": "<p>By the way, exercise 3 is just <code>equiv.bijective X</code> (or at least this works).</p>",
        "id": 135926937,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539721514
    },
    {
        "content": "<p>Wait, could we also have used <code>finset.card_eq_of_bijective</code> to prove bijectivity then prove <code>equiv</code> from <code>equiv.of_bijective</code>?</p>",
        "id": 135927027,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539721622
    },
    {
        "content": "<p>Oh wait that's for <code>finset</code>s.</p>",
        "id": 135927044,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539721660
    },
    {
        "content": "<blockquote>\n<p>By the way, exercise 3 is just <code>equiv.bijective X</code> (or at least this works).</p>\n</blockquote>\n<p>Great! How did you find it? I found it by writing <code>bijective</code> and hitting ctrl-space and escape a few times.</p>",
        "id": 135927279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539721915
    },
    {
        "content": "<blockquote>\n<p>Great! How did you find it? I found it by writing <code>bijective</code> and hitting ctrl-space and escape a few times.</p>\n</blockquote>\n<p>Yep, same.</p>",
        "id": 135927496,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539722150
    },
    {
        "content": "<p>Although I didn't hit escape, just scrolled.</p>",
        "id": 135927538,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539722164
    },
    {
        "content": "<p>Sometimes in VS Code the first time I try ctrl-space I don't get all the options, so I instinctively cancel and try again before I start scrolling.</p>",
        "id": 135927565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539722206
    },
    {
        "content": "<p>Yeah, I think sometimes it limits itself to a specific namespace or something.</p>",
        "id": 135927649,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539722291
    },
    {
        "content": "<p>Oh this <code>trunc</code> thing -- Lean is not keen on choosing a bijection between <code>bool</code> and <code>fin 2</code>but if you put an equivalence relation on the type of all choices, and the relation was \"it's always true\", then Lean will give you an element of the quotient type and this is well-defined! So Kenny's construction only shows that the type of <code>equiv</code>s is non-empty without producing an explicit element.</p>",
        "id": 135927702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539722337
    },
    {
        "content": "<p>It's stronger than nonempty.</p>",
        "id": 135929371,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539723733
    },
    {
        "content": "<p>because it's data. But I am very hazy about what difference this makes, and even hazier about whether I care.</p>",
        "id": 135929688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539724069
    },
    {
        "content": "<p>The definition of <code>equiv.fintype</code>, the thing that says <code>A</code> is finite implies <code>equiv A B</code> is finite uses <code>equiv_fin</code> and the lift condition is met because <code>fintype</code> is a <code>subsingleton</code>. This in turn means that determinant is computable.</p>",
        "id": 135930657,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539724951
    },
    {
        "content": "<p>They'll be pleased in M1M1 :-) I still have not got my head around how important computability is in my world.</p>",
        "id": 135931288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539725668
    },
    {
        "content": "<p>I get the impression that it's nice to be able to easily prove <code>1+1=2</code> etc., but I never use computability on naturals on numbers bigger than about 4, and the same with most other computable objects.</p>",
        "id": 135931427,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539725859
    },
    {
        "content": "<p>Also Lean computable rarely means efficiently computable, so it's kind of useless.</p>",
        "id": 135931731,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539726152
    },
    {
        "content": "<p>David Helm once said that one of the reasons he likes modular forms is that this is one of the unique opportunities in pure maths where you get to see numbers bigger than 4</p>",
        "id": 135931843,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539726298
    },
    {
        "content": "<p>I once wrote an entire paper and then looked through it to find the biggest number in it, and it was 2</p>",
        "id": 135931969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539726427
    },
    {
        "content": "<p>Maybe I'm less concerned about computability than I think</p>",
        "id": 135931985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539726453
    },
    {
        "content": "<blockquote>\n<p>I once wrote an entire paper and then looked through it to find the biggest number in it, and it was 2</p>\n</blockquote>\n<p>I'm guessing reference and equation numbering don't count.</p>",
        "id": 135932585,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1539727032
    },
    {
        "content": "<p>I'm not sure I numbered any equations but I almost certainly numbered theorems (did you notice that here they name them instead?) and no I didn't count those numbers :-)</p>",
        "id": 135933569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539727955
    }
]