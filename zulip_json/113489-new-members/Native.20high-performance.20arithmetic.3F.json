[
    {
        "content": "<p>Hi, I'm Mikhail! I'm new to Lean and very excited about what it can do.</p>\n<p>I see that when it comes to natural and integer arithmetic, Lean offloads the work to GMP. This is a reasonable thing to do, and it's unlikely at this point that there are significant bugs in GMP... but wouldn't it be nice to use high-performance verified Lean code instead?</p>\n<p>Sure, it would be a huge undertaking, but I'd be happy to work on it. I've spent the last few years porting a big chunk of GMP to Rust, so I'm fairly familiar with its code base. For \"small\" integers, say less than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>500</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{500}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span>, GMP generally uses naive algorithms, so just implementing those would be a good start.</p>\n<p><strong>My questions to the community are</strong></p>\n<ol>\n<li>\n<p>Has something like this been proposed before?</p>\n</li>\n<li>\n<p>Do you think this is a worthwhile thing to do? I know that the use of Coq-style numbers (<code>num</code>) is discouraged; what I'm imagining is a more elaborate version of that, where numbers are arrays of primitive unsigneds; so is there an argument against my idea that I'm unaware of? By the way, I'm not trying to replace <code>int</code>s when it comes to everyday proofs - I'm imaging something like a coercion to <code>fast_int</code> when it comes time to compute things.</p>\n</li>\n<li>\n<p>Would it be appropriate to wait for Lean 4? I'd need to be able to prove things about machine integers, and I don't see a lot of support for that in Lean 3. Lean 4 at least has a <a href=\"https://leanprover.github.io/lean4/doc/uint.html\">placeholder page</a>. In the meantime, I can make some fake machine integers to work with, that are just backed by <code>nat</code>. I'd need efficient <a href=\"https://leanprover.github.io/lean4/doc/array.html\">arrays</a> too.</p>\n</li>\n</ol>",
        "id": 234054260,
        "sender_full_name": "Mikhail Hogrefe",
        "timestamp": 1618154750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"402364\">@Mikhail Hogrefe</span> Welcome! I'm not an export on these kind of things. But this sounds like a useful and interesting project!</p>",
        "id": 234063682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618163752
    },
    {
        "content": "<p>I know that <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> has some experience with high-performance arithmetic.</p>",
        "id": 234063736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618163769
    },
    {
        "content": "<p>This certainly sounds like a project that is best done in Lean 4, because it is more performant, and also because we hope to transition from Lean 3 to Lean 4 in the next year or so.</p>",
        "id": 234063789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618163825
    },
    {
        "content": "<p>I think Lean 4 would be a very natural environment to do that in. You may be interested in the discussion of <code>extern</code> here:<br>\n<a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html#the-meta-keyword\">https://leanprover.github.io/lean4/doc/lean3changes.html#the-meta-keyword</a></p>",
        "id": 234074650,
        "sender_full_name": "Greg Price",
        "timestamp": 1618174169
    },
    {
        "content": "<p>The Lean 4 manual even has <a href=\"https://leanprover.github.io/lean4/doc/nat.html\">a paragraph</a> that seems almost to call for someone to take on this very project:</p>\n<blockquote>\n<p>The sharp-eyed reader will notice that GMP is part of the Lean kernel trusted code base. We believe this is not a problem because you can use external type checkers to double-check your developments, and we consider GMP very trustworthy. Existing external type checkers for Lean 3 (e.g., Trepplein and TC) can be easily adapted to Lean 4. If you are still concerned after checking your development with multiple different external checkers because they may all rely on buggy arbitrary-precision libraries, you can develop your own certified arbitrary-precision library and use it to implement your own type checker for Lean.</p>\n</blockquote>",
        "id": 234074748,
        "sender_full_name": "Greg Price",
        "timestamp": 1618174240
    },
    {
        "content": "<p>Thanks, Johan and Greg! Ok, I'll keep an eye on the development of Lean 4, and in the meantime do some experiments in Lean 3 to get a feel for what the implementation might look like.</p>",
        "id": 234082789,
        "sender_full_name": "Mikhail Hogrefe",
        "timestamp": 1618181796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"402364\">@Mikhail Hogrefe</span> Do take a look at some of the lean 4 code for this. The programming side of lean 4 is different enough that it may be worthwhile to have a look. The whole interaction with the outside world and FFI do look different in Lean 4.</p>",
        "id": 234083700,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1618182675
    }
]