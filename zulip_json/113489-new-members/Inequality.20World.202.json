[
    {
        "content": "<p>Here is the code I have in VS:<br>\n<code>theorem ge_iff_exists_add (a b: ℕ): a ≥ b ↔ ∃ (c: ℕ), a = b + c := sorry</code></p>\n<div class=\"codehilite\"><pre><span></span>theorem ge_refl(x : ℕ) : x ≥ x :=\nbegin\n    rw ge_iff_exists_add,\n    use 0,\n    rw add_zero,\nend\n</pre></div>\n\n\n<p>Here is what I want to prove:</p>\n<div class=\"codehilite\"><pre><span></span>theorem example2 (a b c : ℕ) (hba: c ≥ 1): a*b*c ≥ a*b :=\nbegin\n    rw mul_comm,\n    --Still Empty\nend\n</pre></div>\n\n\n<p>After <code>rw mul_comm,</code> the lean tactic output is:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\na b c : ℕ\n⊢ c * (a * b) ≥ a * b\n</pre></div>\n\n\n<p>However, if I substitute <code>--Still Empty</code> with <code>rw ge_refl,</code> I get the error: </p>\n<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, lemma is not an equality nor a iff\nstate:\na b c : ℕ\n⊢ c * (a * b) ≥ a * b\n</pre></div>\n\n\n<p>Since I have proven ab &gt;= ab I want the goal to be c &gt;=1. How do I achieve this?</p>",
        "id": 190620399,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584229217
    },
    {
        "content": "<p>Is <code>ge_refl</code> a real thing?</p>",
        "id": 190620639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584229643
    },
    {
        "content": "<p>oh I see, you defined it above. But you could never use it here</p>",
        "id": 190620642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584229666
    },
    {
        "content": "<p>You need a lemma that says: if <code>c &gt;= 1</code>, then <code>c * x &gt;= x</code></p>",
        "id": 190620681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584229690
    },
    {
        "content": "<p>Just curious, how would I prove this lemma. And how would I call  this lemma into my theorem?</p>",
        "id": 190620699,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584229762
    },
    {
        "content": "<p>Somehow (depending on your exact definitions and already existing lemmas) you would want to show if <code>c &gt;= 1</code> then you can write <code>c = d + 1</code>, and then <code>(d + 1) * x = d * x + x &gt;= x</code> because hopefully you know <code>y + x &gt;= x</code> for any <code>y</code></p>",
        "id": 190620757,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584229884
    },
    {
        "content": "<p>The second question you can do first: define</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">my_lemma</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">1</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>then in your proof,</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">apply</span> <span class=\"n\">my_lemma</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 190620800,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584229931
    },
    {
        "content": "<p>I suggest you do this first and finish your main proof, then prove the lemma</p>",
        "id": 190620804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584229958
    },
    {
        "content": "<p>Ok thanks I will do that.</p>",
        "id": 190620808,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584229974
    },
    {
        "content": "<p>I got this error:</p>\n<div class=\"codehilite\"><pre><span></span>invalid apply tactic, failed to unify\n  c * (a * b) ≥ a * b\nwith\n  ?m_1 * ?m_2 ≥ ?m_2\nstate:\na b c : ℕ,\nhba : c ≥ 1\n⊢ c * (a * b) ≥ a * b\n</pre></div>",
        "id": 190620821,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584230041
    },
    {
        "content": "<p>Wait, I think I can write it backwards.</p>",
        "id": 190620864,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584230091
    },
    {
        "content": "<p>Nevermind I think I got it. Thanks for the help</p>",
        "id": 190620877,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584230152
    },
    {
        "content": "<p>This is my tactic state after using apply,</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\na b c : ℕ,\nhba : c ≥ 1\n⊢ c ≥ 1\n</pre></div>\n\n\n<p>But if I say <code>rw hba</code> I get an error. Why and how do I fix it?</p>",
        "id": 190620969,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584230283
    },
    {
        "content": "<p>You can only <code>rw</code> with equalities or iff statements. Try <code>exact hba</code>.</p>",
        "id": 190620980,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584230330
    },
    {
        "content": "<p>I got it: I used apply hba</p>",
        "id": 190620985,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584230344
    },
    {
        "content": "<p>I guess its the same thing, right?</p>",
        "id": 190620989,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584230354
    },
    {
        "content": "<p>They both work, but <code>exact</code> and <code>apply</code> do different things in general.</p>",
        "id": 190620999,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584230401
    },
    {
        "content": "<p>Another question. To prove <code>my_lemma</code> defined by Reid Barton I want to use induction starting from 1. Is that possible in lean, and if so how?</p>",
        "id": 190621065,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584230467
    },
    {
        "content": "<p>Use <code>exact H</code> when <code>H</code> has the type of the goal. Use <code>apply H</code> when <code>H : a -&gt; b</code> to turn a goal <code>b</code> to a goal <code>a</code>.</p>",
        "id": 190621072,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584230489
    },
    {
        "content": "<p>Ok thanks. The clarification indeed helps. I changed it to <code>exact ba</code>.  To prove my_lemma defined by Reid Barton I want to use induction starting from 1. Is that possible in lean, and if so how?</p>",
        "id": 190621186,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584230717
    },
    {
        "content": "<p>you can use regular induction. you will get a hypothesis 0 &gt;= 1, which is false, and can hence be used to prove the base case.</p>",
        "id": 190621314,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584230930
    },
    {
        "content": "<p>But how to I show that this is false (what lean code shows this)---I see why it is false and why it proves the base case.</p>",
        "id": 190621479,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584231256
    },
    {
        "content": "<p>i'm not sure what the intended way in NNG is since i haven't played it</p>",
        "id": 190621548,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584231413
    },
    {
        "content": "<p>i'd probably do something like</p>\n<div class=\"codehilite\"><pre><span></span>intro h,\nexact (nat.not_succ_le_zero 0 h).elim\n</pre></div>",
        "id": 190621660,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584231700
    },
    {
        "content": "<p>in the inductive case you'll also see that you can only apply the induction hypothesis if you make an additional case distinction, which is where you have to prove the actual base case for 1 :)</p>",
        "id": 190621714,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1584231837
    },
    {
        "content": "<p>Here is my tatic state:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\ncase nat.succ\nx d : ℕ,\nhd : x + d ≥ x\n⊢ x + d + 1 ≥ x\n</pre></div>\n\n\n<p>How do I apply <code>hd</code> into the goal?</p>",
        "id": 190623028,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584234471
    },
    {
        "content": "<p>Here's the rest of my code (base case complete)</p>\n<div class=\"codehilite\"><pre><span></span>lemma my_lemma_helper (x y: ℕ) : y+x ≥ x :=\nbegin\n    induction y with d hd,\n    rw zero_add,\n    apply ge_refl,\n\n    rw add_comm,\n    rw nat.add_succ,\n    rw add_comm at hd,\n    rw succ_eq_add_one,\n\nend\n</pre></div>",
        "id": 190623082,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584234536
    },
    {
        "content": "<p>Still was not able to make progress on <code>lemma my_lemma_helper</code> stated above. Any Help?</p>",
        "id": 190664381,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584302409
    },
    {
        "content": "<p>What do you <em>mean</em> by \"how do I apply <code>hd</code> to the goal?\"</p>",
        "id": 190664407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584302469
    },
    {
        "content": "<p><code>hd</code> is not equal to the goal, and it's not a function so you can't apply it to anything.</p>",
        "id": 190664427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584302512
    },
    {
        "content": "<p>Nevermind, I realized my mistake and it works now</p>",
        "id": 190664623,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584302836
    },
    {
        "content": "<p>This might be a silly question, but here it is anyway:</p>\n<p>This is the theorem I am trying to prove:</p>\n<div class=\"codehilite\"><pre><span></span>theorem ge_cancel (a b : ℕ) (ha : a*b ≥ a) : b ≥ 1 :=\nbegin\n    rw ge_iff_exists_add at ha,\n\n    cases ha with u hu,\n\n    ----more work needs to be done-------\nend\n</pre></div>\n\n\n<p>Here is the tactic state:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\na b u : ℕ,\nhu : a * b = a + u\n⊢ b ≥ 1\n</pre></div>\n\n\n<p>How do I achieve this goal?</p>",
        "id": 190664917,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584303271
    },
    {
        "content": "<p><code>ge_cancel</code> is false when <code>a = 0</code> and <code>b = 0</code>.</p>",
        "id": 190664956,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584303362
    },
    {
        "content": "<p>Same question, but here is my corrected theorem:</p>\n<div class=\"codehilite\"><pre><span></span>theorem ge_cancel (a b : ℕ) (ha : a*b ≥ a) (hb: a ≥ 1) : b ≥ 1 :=\nbegin\n    rw ge_iff_exists_add at ha,\n\n    cases ha with u hu,\n\n    ----more work needs to be done-------\nend\n</pre></div>",
        "id": 190665087,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584303538
    },
    {
        "content": "<p>If you're now using Lean and mathlib, rather than doing natural number game stuff, you should use &lt;= not &gt;=, i.e. wherever you have <code>a &gt;= b</code> you should change it to <code>b &lt;= a</code>. <code>&lt;=</code> is much better supported in mathlib.</p>",
        "id": 190665834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584304630
    },
    {
        "content": "<p>Are you asking for a maths proof or a Lean proof?</p>",
        "id": 190665835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584304645
    },
    {
        "content": "<p>Lean proof</p>",
        "id": 190665880,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584304693
    },
    {
        "content": "<p>Then first explain a maths proof and we can think about how to turn it into a Lean proof.</p>",
        "id": 190665989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584304885
    },
    {
        "content": "<p>Claim: If ab &gt;= a where a is &gt;=1 and a,b are positive integers then b &gt;= 1.<br>\nProof:<br>\nAssume ab &gt;= a where a is &gt;=1, but that b &lt; 1. Then there exists a positive integer c such that b = 1 - c. Thus ab = a*(1 - c) = a - ac.<br>\nThus there exists a positive integer k such that ab = a - k. Thus ab &lt; a. Contradiction</p>",
        "id": 190666219,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584305255
    },
    {
        "content": "<p>I only know a contradiction math proof, and I do not know how to write a contradiction proof in Lean. How do I start writing a contradiction proof in Lean if I am to translate the above math proof?</p>",
        "id": 190669099,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584309656
    },
    {
        "content": "<p>What is your definition of the subtraction you're using? We should be able to simplify this proof. Did you play the natural number game? Subtraction is never defined in this game, and this is for a good reason.</p>",
        "id": 190669323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584310038
    },
    {
        "content": "<p>And do you really mean \"a,b are positive integers\"? What type do the terms a and b have?</p>\n<p>We need to be 100% clear on the maths proof before we can start the Lean proof.</p>",
        "id": 190669439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584310204
    },
    {
        "content": "<p>(a b : \\nat) (ha: a \\ge 1) (hb : b \\ge 1)</p>\n<p>For substaction, I just used the regular paper-pencil proof definition: subtraction is addition by negative number (I just wrote the proof if this were a class homework question)</p>",
        "id": 190669504,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584310350
    },
    {
        "content": "<p>PS if you cannot do basic logic like contradiction yet then you should work through the exercises in <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/\">Theorem Proving In Lean</a>. There is a ton of stuff to learn, and just asking every time you get stuck on a random question might not be the most efficient way to proceed. I spent a lot of time reading that website above and would only ask questions here if I was really stuck.</p>",
        "id": 190669505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584310351
    },
    {
        "content": "<p>What is your definition of a negative number?</p>",
        "id": 190669507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584310362
    },
    {
        "content": "<p>I am pretending to be Lean here. We have two terms a and b of type nat. If you've played the natural number game then you know the definition of addition and multiplication. Can you see that there is a problem with defining subtraction?</p>",
        "id": 190669522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584310406
    },
    {
        "content": "<p>And if you haven't played the natural number game, then you should learn to walk before you can run.</p>",
        "id": 190669527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584310432
    },
    {
        "content": "<p>Yeah I do, but I only know the paper pencil proof done in math class for this one</p>",
        "id": 190669565,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584310448
    },
    {
        "content": "<p>I played the Natural number game from the stream Inequality World</p>",
        "id": 190669571,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584310485
    },
    {
        "content": "<p>Well the pencil and paper proof unfortunately seems to assume that negative numbers exist, and this is problematic because introducing negative numbers will mean that we have to import the entire question into a question about terms in a new type, namely the integers.</p>",
        "id": 190669574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584310496
    },
    {
        "content": "<p>and this will make the formal proof much more complicated.</p>",
        "id": 190669585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584310527
    },
    {
        "content": "<p>So how do I avoid subtraction ?</p>",
        "id": 190669591,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584310548
    },
    {
        "content": "<p>Good question! Try and figure out a solution which doesn't use subtraction. If you play the natural number game you will begin to understand exactly what you can and cannot do with natural numbers.</p>",
        "id": 190669648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584310607
    },
    {
        "content": "<p>The last two lines of my tactic state is bothering me; I do not know how to go around it?</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\na b u : ℕ,\nhu : a * b = a + u\n⊢ b ≥ 1\n</pre></div>",
        "id": 190669656,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584310628
    },
    {
        "content": "<p>I did play the natural number game (in the stream Inequality World) so that's why I started to avoid substraction in my original lean proof, where I got the above tactic state. I do not know how to use hu to satisfy the goal</p>",
        "id": 190669716,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584310723
    },
    {
        "content": "<p>Can you prove that that goal is impossible to solve?</p>",
        "id": 190669942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584311116
    },
    {
        "content": "<p>This stuff is hard. Your original question basically says \"how do I work inductive types, and how do I do basic logic stuff like proof by contradiction in Lean\".</p>",
        "id": 190669960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584311155
    },
    {
        "content": "<p>I am a teacher. I have been a teacher for over 20 years.</p>",
        "id": 190670004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584311172
    },
    {
        "content": "<p>Here is the theorem I am trying to prove: (from an old stream called Prime Theorem Help)</p>\n<p>Let n &gt; 1. If n has no positive prime factor less than or equal to sqrt(n), then n is prime.</p>\n<p>Here is a proof from Hungerford's Abstract Algebra:<br>\nSuppose n has the given property but assume that n is not prime. Then n has at least two positive prime factors, say p1 and p2, so that n = p1p2k for some positive integer k. By hypothesis, n has no positive prime divisors less than or equal to sqrt(n). Hence p1 &gt; sqrt(n) and p2 &gt; sqrt(n). Hence n = p1p2k &gt;= p1*p2 &gt;n. Contradiction.</p>\n<p>And here are the things I have proved so far thanks to you and others in Zulip:<br>\n<a href=\"/user_uploads/3121/iAWaMFBfaesYlXnQwbwVcvXH/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> <br>\n<a href=\"/user_uploads/3121/dtSSy3kfa6SngyCxOcAxPMSx/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> <br>\n<a href=\"/user_uploads/3121/1XtvlLfwOnfVfwpB_8oa7iqS/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> <br>\n<a href=\"/user_uploads/3121/NlPROTyDJr-J_DU26_wXBDrn/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> <br>\n<a href=\"/user_uploads/3121/29jghxOlwP7UFI3Wrp0sgUhx/image.png\" target=\"_blank\" title=\"image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/iAWaMFBfaesYlXnQwbwVcvXH/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/iAWaMFBfaesYlXnQwbwVcvXH/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dtSSy3kfa6SngyCxOcAxPMSx/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/dtSSy3kfa6SngyCxOcAxPMSx/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/1XtvlLfwOnfVfwpB_8oa7iqS/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/1XtvlLfwOnfVfwpB_8oa7iqS/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NlPROTyDJr-J_DU26_wXBDrn/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/NlPROTyDJr-J_DU26_wXBDrn/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/29jghxOlwP7UFI3Wrp0sgUhx/image.png\" target=\"_blank\" title=\"image.png\"><img src=\"/user_uploads/3121/29jghxOlwP7UFI3Wrp0sgUhx/image.png\"></a></div><p>These theorems and lemmas are needed to prove things in the main proof in Hungerford's Algebra. I was curious about the contradiction proof because Hungerford's proof uses it and I want to mimic it.</p>",
        "id": 190670006,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584311175
    },
    {
        "content": "<p>My answer to you is \"go and read Theorem Proving In Lean. You are thinking like a mathematician. If you want to learn how to use Lean you need to learn to think more like a computer scientist. Chapters 3 and 4 tell you a lot about how to use logic in Lean. Chapter 7 tells you how to use inductive types. These chapters tell you the answer to <em>not only</em> your question, <em>but also</em> the next 5 questions which you will ask me if I just tell you how to do this one.\"</p>",
        "id": 190670037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584311264
    },
    {
        "content": "<p>Ok I will start</p>",
        "id": 190670101,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584311332
    },
    {
        "content": "<p>This stuff is hard, and you are just choosing random arithmetical statements which might be currently beyond your abilities. You need to step back and do some self study and learn about the basics. Do all of the exercises in the first seven chapters in Theorem Proving In Lean and feel free to ask if you are stuck.</p>",
        "id": 190670114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584311365
    },
    {
        "content": "<p>But Hungerford will have to wait a while.</p>",
        "id": 190670126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584311397
    },
    {
        "content": "<p>Here is a Lean code from Chapter 3 Section 4</p>\n<div class=\"codehilite\"><pre><span></span>variables p q : Prop\n\nexample (h : p ∧ q) : q ∧ p :=\nhave hp : p, from and.left h,\nhave hq : q, from and.right h,\nshow q ∧ p, from and.intro hq hp\n</pre></div>\n\n\n<p>What exactly do the lines :</p>\n<div class=\"codehilite\"><pre><span></span>have hp : p, from and.left h,\nhave hq : q, from and.right h,\n</pre></div>\n\n\n<p>mean? Am I dividing up the hypothesis or the goal?</p>",
        "id": 190673309,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584315936
    },
    {
        "content": "<p>Not sure what you mean by \"dividing up\", but <code>have</code> is a way to introduce a new named hypothesis.</p>",
        "id": 190673412,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584316000
    },
    {
        "content": "<p>So if my tactic state is:</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nn v u : ℕ,\nhu : n = v * u ∧ v ≤ u\n⊢ n = v * u ∧ v * v ≤ n\n</pre></div>\n\n\n<p>I have two goals: <code>n = v * u </code> and <code>v * v ≤ n</code>. I am guessing that <code>have</code> allows me to focus on these two individually right?</p>",
        "id": 190673466,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584316104
    },
    {
        "content": "<p>The next paragraph after that section you posted says exactly what it is under the hood... \"Internally, the expression have h : p, from s, t produces the term (λ (h : p), t) s. In other words, s is a proof of p, t is a proof of the desired conclusion assuming h : p, and the two are combined by a lambda abstraction and application. This simple device is extremely useful when it comes to structuring long proofs, since we can use intermediate have’s as stepping stones leading to the final goal.\"</p>",
        "id": 190673470,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584316137
    },
    {
        "content": "<p>But I do not know what those words mean</p>",
        "id": 190673481,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584316178
    },
    {
        "content": "<p>So I am trying to learn by example</p>",
        "id": 190673483,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584316190
    },
    {
        "content": "<p>Did you skip chapter 2 :)</p>",
        "id": 190673486,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584316196
    },
    {
        "content": "<p>I read ch 2 but I felt ch 3 would give concrete applications of ch 2 stuff</p>",
        "id": 190673542,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584316238
    },
    {
        "content": "<p>Hah, but there are exercises in Ch2 that explain lambda notation</p>",
        "id": 190673568,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584316319
    },
    {
        "content": "<p>I know it's boring and not related to the thing you actually want to do</p>",
        "id": 190673607,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584316331
    },
    {
        "content": "<p>but it's necessary</p>",
        "id": 190673630,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584316394
    },
    {
        "content": "<p><code>have</code> is for when you want to prove a lemma on the way to your theorem.</p>\n<p>So <code>have hp : p, from and.left h</code> introduces a proof of <code>p</code> into your context, and the proof is <code>and.left h</code>.</p>\n<p>Personally I don't find the explanation about <code>have</code> in terms of lambdas very helpful.</p>",
        "id": 190673757,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1584316639
    },
    {
        "content": "<p>And what does <code>and.left h</code> actually do?</p>",
        "id": 190673812,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584316751
    },
    {
        "content": "<p>suppose <code>and</code> is a structure with two members, <code>left</code> and <code>right</code></p>",
        "id": 190673941,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584316933
    },
    {
        "content": "<p><code>and.left</code> is just the first element</p>",
        "id": 190673946,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584316945
    },
    {
        "content": "<p>And <code>and.right</code> is the second element?</p>",
        "id": 190673953,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584316965
    },
    {
        "content": "<p>yup</p>",
        "id": 190673954,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584316969
    },
    {
        "content": "<p>But then it seems that <code>have</code> is breaking up my hypothesis; is that right?</p>",
        "id": 190674222,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584317461
    },
    {
        "content": "<p>Since p is part of my hypothesis p and q</p>",
        "id": 190674237,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584317490
    },
    {
        "content": "<p>I think it will become clearer as you look at more examples.</p>",
        "id": 190674347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1584317644
    },
    {
        "content": "<p>It's used here to introduce proofs of each of the parts of your hypothesis, but it's not breaking it up as I understand it.</p>",
        "id": 190674356,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584317684
    },
    {
        "content": "<p>Thanks</p>",
        "id": 190674409,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584317805
    },
    {
        "content": "<p>Is it possible to define Propositions of the form h1 \\and h2 within a proof.</p>",
        "id": 190675280,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584319136
    },
    {
        "content": "<p>You can say <code>have h1 : ..., from ...</code>, then <code>have h2 : ..., from ...</code>, then <code>have h := h1 ∧ h2</code> (in tactic mode; in term mode the idea is the same but the syntax is slightly different).</p>",
        "id": 190675329,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1584319228
    },
    {
        "content": "<p>I read ch.2 and am in still in Ch.3. I don't see what the <code>assume</code> statement does? Can anyone explain with a concrete example?</p>",
        "id": 190785326,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584395987
    },
    {
        "content": "<p>It's the same as <code>λ</code>, see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#working-with-propositions-as-types\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#working-with-propositions-as-types\">Section 3.2</a>.</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constants</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">t1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hp</span>\n</pre></div>",
        "id": 190785635,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584396152
    },
    {
        "content": "<p>I had some trouble with this myself. In Lean, <code>assume</code> has a very well-defined meaning, while we as mathematicians use it in a more encompassing way.</p>",
        "id": 190785813,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584396261
    },
    {
        "content": "<p>yes, the assume is there to make mathematicians feel at home... but it is exactly the lambda calculus' lambda operator. I do not know if it makes people more or less confused</p>",
        "id": 190786101,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584396459
    },
    {
        "content": "<p>Can we say:</p>\n<div class=\"codehilite\"><pre><span></span>constants p q : Prop\n\ntheorem t1 : p → q → p := assume hp : p, assume hq :\\not q, hp\n</pre></div>",
        "id": 190786125,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584396480
    },
    {
        "content": "<p>no, because the lambda operator doesn't work that way</p>",
        "id": 190786190,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1584396514
    },
    {
        "content": "<p>Ok I see.</p>",
        "id": 190786198,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584396525
    },
    {
        "content": "<p>So it only works with the hypotheses we have</p>",
        "id": 190786218,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584396542
    },
    {
        "content": "<p>Look for the stream \"Understanding assume\" under <code>new members</code> to see more. I don't exactly know how to send you a link, but you can search for it.</p>",
        "id": 190786471,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1584396710
    },
    {
        "content": "<p>Thanks</p>",
        "id": 190787466,
        "sender_full_name": "Debendro Mookerjee",
        "timestamp": 1584397350
    }
]