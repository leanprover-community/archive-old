[
    {
        "content": "<p>The following code doesn't work, and I don't understand why? (data.tactics and data.nat.basic)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo_hlp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">foo_hlp</span>\n</code></pre></div>",
        "id": 277871394,
        "sender_full_name": "Robert Watson",
        "timestamp": 1649162523
    },
    {
        "content": "<p>(can you add the correct imports to the code so that it just works? there is no <code>data.tactics</code> AFAIK) (I also don't understand why it doesn't work BTW)</p>",
        "id": 277871749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649162661
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactics</span>   <span class=\"c1\">-- oops!</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>  <span class=\"c1\">-- this should be incidental, right?</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">noncomputable theory</span> <span class=\"c1\">--  this should be incidental, right?</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"c1\">--  this should be incidental, right?</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo_hlp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">foo_hlp</span>\n</code></pre></div>",
        "id": 277872197,
        "sender_full_name": "Robert Watson",
        "timestamp": 1649162844
    },
    {
        "content": "<p>Aah -- now I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo_hlp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">m</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">foo_hlp</span> <span class=\"n\">m</span> <span class=\"kd\">begin</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"kd\">end</span>\n</code></pre></div>\n<p>gives the more useful information that <code>zero</code> is being interpreted as a variable. You will want to <code>open nat</code> or use <code>nat.zero</code></p>",
        "id": 277872217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649162851
    },
    {
        "content": "<p>I haven't added open.nat as I don't understand what it would do here. But just copying this code  I get the following error:</p>\n<p>invalid type ascription, term has type<br>\n  2 * m + 1 = 2 * zero<br>\nbut is expected to have type<br>\n  2 * m + 1 = 2 * 0</p>\n<p>Also, I don't get why h has to be exacted like that? why not foo_hlp m h , since h is already given ?</p>",
        "id": 277875072,
        "sender_full_name": "Robert Watson",
        "timestamp": 1649163996
    },
    {
        "content": "<p>What Kevin is saying is that the natural number 0 is called <code>nat.zero</code> not <code>zero</code></p>",
        "id": 277875381,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649164130
    },
    {
        "content": "<p><code>zero</code> isn't <code>0</code>. <code>nat.zero</code> is <code>0</code>. If you <code>open nat</code>, then <code>zero</code> means <code>nat.zero</code></p>",
        "id": 277875388,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649164135
    },
    {
        "content": "<p>Note that you can write <code>0</code> and Lean will understand it</p>",
        "id": 277875453,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649164169
    },
    {
        "content": "<p><code>open nat</code> means that if something is called <code>nat.foo</code> you can just write <code>foo</code>.</p>",
        "id": 277875808,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649164306
    },
    {
        "content": "<p>It can be confusing that there is no syntactic distinction between constants and variables in pattern matching.</p>",
        "id": 277876135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649164424
    },
    {
        "content": "<p>I didn't know there was such a thing as 'variable' zero for pattern matching!</p>",
        "id": 277876333,
        "sender_full_name": "Robert Watson",
        "timestamp": 1649164485
    },
    {
        "content": "<p>Sorry for the confusion. I mean this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo_hlp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat.zero</span> <span class=\"o\">:=</span> <span class=\"n\">foo_hlp</span>\n</code></pre></div>",
        "id": 277876349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649164494
    },
    {
        "content": "<p>Your</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">foo_hlp</span>\n</code></pre></div>\n<p>is exactly the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">foo_hlp</span>\n</code></pre></div>\n<p>as far as Lean is concerned</p>",
        "id": 277876374,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649164505
    },
    {
        "content": "<p>In pattern matching you can use variables. You used a variable called <code>zero</code>.</p>",
        "id": 277876399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649164515
    },
    {
        "content": "<p>Right, it could have been any string...and name of some variable</p>",
        "id": 277876716,
        "sender_full_name": "Robert Watson",
        "timestamp": 1649164651
    },
    {
        "content": "<p>I thought it was being a bit too clever working out my succ x for me!</p>",
        "id": 277876870,
        "sender_full_name": "Robert Watson",
        "timestamp": 1649164717
    }
]