[
    {
        "content": "<p>Hi, I'm new to Lean and not sure if there is a more straightforward way to introduce an extra condition on hypothesis like <code>(a : int, a ≠ 0)</code>, instead of defining a new type e.g. <code>int_star</code> and writing it like <code>(a : int_star)</code>?</p>",
        "id": 198021560,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1589862968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236553\">@Lucas Viana Reis</span> You can use subtypes: <code>(a : {n : int // n ≠ 0})</code>.</p>",
        "id": 198021657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589863151
    },
    {
        "content": "<p>But most of the time, I would just go for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">my</span> <span class=\"n\">statement</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 198021665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589863184
    },
    {
        "content": "<p>That is probably easier at the point where you want to use it.</p>",
        "id": 198021719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589863208
    },
    {
        "content": "<p>Interesting, thanks!</p>",
        "id": 198021805,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1589863335
    },
    {
        "content": "<p>Because of course \"a number different than 0\" is the same as having a number and a proof it is different than zero. It is indeed more useful this way, I just didn't though of it.</p>",
        "id": 198022210,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1589863928
    },
    {
        "content": "<p>How would this idea work with <code>\\exists</code>? Define a set A as cool iff <code>∃(a : nat), A = foobar a h</code> , where <code>foobar (a : nat) (h : a ≠ 0)</code> is a set</p>",
        "id": 198022596,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1589864618
    },
    {
        "content": "<p>you can say <code>\\exists a h, A = foobar a h</code></p>",
        "id": 198022634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589864644
    },
    {
        "content": "<p>(that said, we try to discourage the use of such \"partial functions\" to create data)</p>",
        "id": 198022642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589864682
    },
    {
        "content": "<p>oh, ok. better to use subtypes then?</p>",
        "id": 198022663,
        "sender_full_name": "Lucas Viana Reis",
        "timestamp": 1589864739
    },
    {
        "content": "<p>It depends a lot on the application, but we try to totalize when possible</p>",
        "id": 198022707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589864767
    },
    {
        "content": "<p>totalize means extend the domain and fill in with garbage? or shrink the source type?</p>",
        "id": 198022729,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589864803
    },
    {
        "content": "<p>If the subtype makes sense as a structure with its own suite of operations, it also makes sense to hide the subtype behind a definition and then use that</p>",
        "id": 198022732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589864816
    },
    {
        "content": "<p>Totalize means return garbage out of the proper domain</p>",
        "id": 198022740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589864850
    },
    {
        "content": "<p>or ideally, the least garbage-like garbage you can find</p>",
        "id": 198022751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589864875
    },
    {
        "content": "<p>nat subtraction being an example of this: <code>nat.sub : nat -&gt; nat -&gt; nat</code> even though it isn't \"defined\" for all inputs; when the inputs don't make sense, that is, <code>a &lt; b</code>, then <code>a - b = 0</code></p>",
        "id": 198022813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589864944
    },
    {
        "content": "<p>An example of a subtype behind a definition is <code>vector A n</code>, the subtype of <code>list A</code> of length <code>n</code>, or <code>finset A</code>, the subtype of <code>multiset A</code> with no duplicates</p>",
        "id": 198022863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589865041
    },
    {
        "content": "<p><code>finset</code> is a <code>structure</code></p>",
        "id": 198023829,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589866609
    },
    {
        "content": "<p>true, but it doesn't make too much difference once it's behind a definition. <code>subtype</code> is also a structure, of course</p>",
        "id": 198025072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589868376
    }
]