[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Cannot.20get.20lean.20to.20see.20I.20have.20declared.20an.20instance/near/306331417\">said</a>:</p>\n<blockquote>\n<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? This code doesn't compile as it stands.</p>\n</blockquote>\n<p>Apologies, forgot the first two lines,  this should now compile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">rel_cat_data</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_refl</span> <span class=\"o\">:</span> <span class=\"n\">reflexive</span> <span class=\"n\">rel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rel_trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">rel</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">rel_cat_data</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">rel_cat_data</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">rel_cat</span>  <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">ulift</span><span class=\"o\">(</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">ulift.up</span> <span class=\"o\">(</span><span class=\"n\">plift.up</span> <span class=\"o\">(</span><span class=\"n\">rel_refl</span> <span class=\"n\">a</span><span class=\"o\">)),</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">r1</span> <span class=\"n\">r2</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">let</span> <span class=\"n\">r1'</span> <span class=\"o\">:=</span> <span class=\"n\">plift.down</span> <span class=\"o\">(</span><span class=\"n\">ulift.down</span> <span class=\"n\">r1</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">r2'</span> <span class=\"o\">:=</span> <span class=\"n\">plift.down</span> <span class=\"o\">(</span><span class=\"n\">ulift.down</span> <span class=\"n\">r2</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">r3'</span> <span class=\"o\">:=</span> <span class=\"n\">rel_trans</span> <span class=\"n\">r1'</span> <span class=\"n\">r2'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ulift.up</span> <span class=\"o\">(</span><span class=\"n\">plift.up</span> <span class=\"n\">r3'</span><span class=\"o\">),</span>\n  <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">ulift</span> <span class=\"o\">(</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">S : Type u,</span>\n<span class=\"cm\">_inst_3 : rel_cat_data S,</span>\n<span class=\"cm\">a b : S</span>\n<span class=\"cm\">⊢ quiver S</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">--and yet this works ???</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rel_cat.hom</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">ulift</span> <span class=\"o\">(</span> <span class=\"n\">plift</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 306334807,
        "sender_full_name": "Will Fourie",
        "timestamp": 1666819080
    },
    {
        "content": "<p>It's a universe issue. Lean doesn't know what you want the universe of morphisms to be.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">rel_cat</span>  <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>That seems to fix it.</p>",
        "id": 306337746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666820284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Cannot.20get.20lean.20to.20see.20I.20have.20declared.20an.20instance/near/306337746\">said</a>:</p>\n<blockquote>\n<p>It's a universe issue. Lean doesn't know what you want the universe of morphisms to be.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">rel_cat</span>  <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>That seems to fix it.</p>\n</blockquote>\n<p>Indeed it does, thank you! </p>\n<p>Guess I'll be a bit more explicit when dealing with universes in future.</p>",
        "id": 306338393,
        "sender_full_name": "Will Fourie",
        "timestamp": 1666820584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"547993\">Will Fourie</span> has marked this topic as resolved.</p>",
        "id": 306338414,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666820590
    },
    {
        "content": "<p>Using <code>instance rel_cat  : category.{u} S :=</code> is a good fix, but one thing that's worthwhile to keep in mind is that when you use <code>ulift</code>, you should specify the universe unless Lean has some other way of figuring it out. In this case, by saying <code>category.{u} S</code>, Lean will expect the universe level of the morphisms types to be in <code>Type u</code>, so Lean will be able to infer that <code>ulift( plift (rel a b))</code> in the definition is really of the form <code>ulift.{u} (plift (rel a b))</code>.</p>",
        "id": 306344679,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1666823597
    }
]