[
    {
        "content": "<p>Dear All,</p>\n<p>is the lemma below already in mathlib?  Or can you suggest a better proof, such that I can do directly <code>rcases</code> on the ∃ part, simply feeding it that <code>f</code> is non-zero?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finsupp.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finsupp.nonzero_iff_exists</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp.support_eq_empty.symm</span><span class=\"o\">,</span> <span class=\"n\">finset.eq_empty_iff_forall_not_mem</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 228730260,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614844132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I guess maybe there should be a <code>support_nonempty_iff</code> lemma?</p>",
        "id": 228730443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614844267
    },
    {
        "content": "<p>I can find the negation of that statement, but not the direct one...</p>",
        "id": 228730607,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614844396
    },
    {
        "content": "<p>i.e. as you can see, I found <code>support_eq_empty</code>, but not the other one <code>support_nonempty_...</code></p>",
        "id": 228730631,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614844442
    },
    {
        "content": "<p>Right, because you could do <code>rcases</code> on <code>f.support.nonempty</code>... so it seems useful to have that version as well</p>",
        "id": 228730851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614844573
    },
    {
        "content": "<p><code>f.support.nonempty \\iff f \\ne 0</code>.</p>",
        "id": 228730873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614844585
    },
    {
        "content": "<p>Ok, so are you suggesting that I should add the first (and maybe also the second) of these lemmas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> to add -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finsupp.nonempty_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f.support.nonempty</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finsupp.support_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">finset.nonempty_iff_ne_empty</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- maybe to add</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">finsupp.nonzero_iff_exists</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp.support_eq_empty.symm</span><span class=\"o\">,</span> <span class=\"n\">finset.eq_empty_iff_forall_not_mem</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 228731379,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614845047
    },
    {
        "content": "<p>The second is <code>iff.symm</code> of the first, right?</p>",
        "id": 228731774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614845316
    },
    {
        "content": "<p>Are you suggesting what is below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finsupp.nonzero_iff_exists</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">finsupp</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp.nonempty_iff.symm</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch, term</span>\n<span class=\"cm\">  finsupp.nonempty_iff.symm</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m_4 ≠ 0 ↔ ?m_4.support.nonempty</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  f ≠ 0 ↔ ∃ (a : α), ⇑f a ≠ 0</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 228732108,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614845516
    },
    {
        "content": "<p>Ooh, sorry, I'm stupid. Should learn to read.</p>",
        "id": 228732196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614845552
    },
    {
        "content": "<p>Ok, I think both lemmas are useful.</p>",
        "id": 228732212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614845565
    },
    {
        "content": "<p>Note that the first one should be called <code>support_nonempty_iff</code></p>",
        "id": 228732234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614845582
    },
    {
        "content": "<p>Ok, I will PR both of them, then!</p>\n<p>Should they be marked as <code>simp</code>?</p>",
        "id": 228732296,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614845620
    },
    {
        "content": "<p>No, I don't think so.</p>",
        "id": 228732320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614845642
    },
    {
        "content": "<p>It's not clear to me that they bring things towards some canonical form.</p>",
        "id": 228732399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614845662
    },
    {
        "content": "<p>Ok, great!  Since otherwise, the linter would want me to change the \\ne to \\not which seems a worse form for the statements!</p>",
        "id": 228732452,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614845710
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6530\">#6530</a></p>",
        "id": 228733364,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614846158
    }
]