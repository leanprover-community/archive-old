[
    {
        "content": "<p>Given <code>V : Type _</code>, is it true that <code>↥(set.univ : set V) = V</code>? If so, how can you prove that?</p>",
        "id": 242454316,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623509110
    },
    {
        "content": "<p>not sure if they're <em>equal</em>, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.set.univ\">docs#equiv.set.univ</a></p>",
        "id": 242455116,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623510113
    },
    {
        "content": "<p>wait no, they can't be defeq, as a member of <code>↥univ</code> is  <code>⟨v, trivial⟩</code> for <code>v : V</code></p>",
        "id": 242455224,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623510184
    },
    {
        "content": "<p>(I found this with the regex <code>(univ.+≃)|(≃.+univ)</code>)</p>",
        "id": 242455238,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623510212
    },
    {
        "content": "<p>wait. you can search using regexes? how?</p>",
        "id": 242455244,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1623510229
    },
    {
        "content": "<p>locally, in VSCode</p>",
        "id": 242455294,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623510248
    },
    {
        "content": "<p>They're not equal, but you can produce an equivalence between the two types</p>",
        "id": 242455355,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623510312
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_iso.set.univ\">docs#order_iso.set.univ</a> for an order iso too</p>",
        "id": 242455363,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623510319
    },
    {
        "content": "<p>Type equality is almost never provable, even <code>inductive empty1</code> and <code>inductive empty2</code> (ie types with no constructors) are types that can't be proved equal.</p>",
        "id": 242458096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623513675
    },
    {
        "content": "<p>As far as I know, you can only either prove types are defeq, or prove they are not equal by showing they have different cardinalities</p>",
        "id": 242458191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623513829
    },
    {
        "content": "<p>what's the proof that we can't prove <code>empty1 = empty2</code>?</p>",
        "id": 242458242,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623513887
    },
    {
        "content": "<p>There is a model that associates tags to types, such that inductive types that were declared with different names are not equal</p>",
        "id": 242458332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623513979
    },
    {
        "content": "<p>I don't think there's an in-lean proof unless you model lean itself in lean, and then the proof is only about your model</p>",
        "id": 242458357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623514018
    },
    {
        "content": "<p>there can't be an in-lean proof because that means <code>empty1 != empty2</code> which as Eric said is only provable when the types have different cardinalities</p>",
        "id": 242458379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623514062
    },
    {
        "content": "<p>Can it be shown that <code>punit.{1} ≠ punit.{2}</code>, or is that not even a legal statement?</p>",
        "id": 242458442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623514100
    },
    {
        "content": "<p>Couldn't they be equal in a model that \"doesn't store universe level\"?</p>",
        "id": 242458898,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623514698
    },
    {
        "content": "<p>That would have to be a heq, right? Because the types don't match</p>",
        "id": 242460340,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1623516497
    },
    {
        "content": "<p>oh of course Horatiu, yeah</p>",
        "id": 242461057,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623517403
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heq\">docs#heq</a> even applicable here?</p>",
        "id": 242461767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623518474
    },
    {
        "content": "<p>It's not universe polymorphic</p>",
        "id": 242461775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623518507
    },
    {
        "content": "<p>So it seems equality of members or different universes isn't even a well-formed statement</p>",
        "id": 242461969,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623518798
    }
]