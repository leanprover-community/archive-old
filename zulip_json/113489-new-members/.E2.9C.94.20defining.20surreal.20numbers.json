[
    {
        "content": "<p>Thank you, this is great. I was indeed considering <code>list</code>, but I thought that having an equivalence relation ignoring ordering and duplication would make them the same as a <code>finset</code>. Perhaps it makes sense to do it due to the technical restriction with <code>quot</code> you mentioned.</p>\n<p>It also feels a bit wrong to use a type like <code>list</code> which is more concrete and artificially generalize it. I'm from a Computer Science background, it just feels inefficient to treat lists like set and always check for duplication and ordering. But the docs say that <code>finset</code> is defined with <code>list</code> anyways.</p>\n<p>Can you think of a way of redefining <code>finset</code> such that it wouldn't throw and error here?</p>",
        "id": 312817391,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669720060
    },
    {
        "content": "<p>I also tried this, but of course it's equivalent to <code>set surreal</code> and it throws the same error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">surreal</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">surreal</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">surreal</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">surreal</span>\n</code></pre></div>",
        "id": 312817643,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669720140
    },
    {
        "content": "<p>I think <code>finset</code> needs to be a <code>quot</code> (if you only dealt with totally ordered types, you could instead define <code>finset</code> to be strictly increasing lists, but <code>finset</code> is meant to handle more general types)</p>",
        "id": 312817651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669720144
    },
    {
        "content": "<p>That's a decent idea, I don't need the full generality of <code>finset</code></p>",
        "id": 312817766,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669720188
    },
    {
        "content": "<p>but then you need to define a total ordering on <code>surreal</code> to use it, while you're defining <code>surreal</code>. That seems very difficult</p>",
        "id": 312817892,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669720229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568906\">Jon Ezeiza</span> <a href=\"#narrow/stream/113489-new-members/topic/defining.20surreal.20numbers/near/312811357\">said</a>:</p>\n<blockquote>\n<p>But for the time being, I'd like to make my own isolated definition of surreal numbers. Is there a simpler way to do this without having to resort to this rather convoluted pre-game construction?</p>\n</blockquote>\n<p>Just to respond to this part: no, none of the complexity involved in defining surreals in mathlib is incidental. I'm fairly sure that you have to use something with that general kind of structure in order to get the surreal numbers with the usual power they have in ZFC</p>",
        "id": 312817942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669720252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/defining.20surreal.20numbers/near/312817892\">said</a>:</p>\n<blockquote>\n<p>but then you need to define a total ordering on <code>surreal</code> to use it, while you're defining <code>surreal</code>. That seems very difficult</p>\n</blockquote>\n<p>Right, surreal numbers don't even have a total ordering.</p>",
        "id": 312818107,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669720326
    },
    {
        "content": "<p>Surreals are totally ordered</p>",
        "id": 312818141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669720337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/defining.20surreal.20numbers/near/312818141\">said</a>:</p>\n<blockquote>\n<p>Surreals are totally ordered</p>\n</blockquote>\n<p>My bad, just getting into it.</p>",
        "id": 312818281,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669720385
    },
    {
        "content": "<p>the hard part here is that you are defining the total order on surreals mutually with the collection of surreals</p>",
        "id": 312818284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669720387
    },
    {
        "content": "<p>mathlib separates this into several stages:</p>\n<ul>\n<li>define surreals without the ordering constraint (<code>pgame</code>)</li>\n<li>define the order by induction (<code>pgame.lt</code>)</li>\n<li>define the surreal well formedness predicate (<code>pgame.numeric</code>)</li>\n<li>define the surreals as well formed pgames and take a quotient to get extensionality (<code>surreal</code>)</li>\n</ul>",
        "id": 312818644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669720502
    },
    {
        "content": "<p>the key part being that you don't need later stages to define earlier ones</p>",
        "id": 312818751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669720544
    },
    {
        "content": "<p>How about this? It's just embedding <code>pgame</code> into the definition of <code>surreal</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">surreal</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">surreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">surreal</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">surreal</span>\n</code></pre></div>\n<p>I'm missing <code>has_lt</code> here, how would I specify it?</p>",
        "id": 312819433,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669720788
    },
    {
        "content": "<p>By the way, here's partially compiling out the <code>finset</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">presurreal</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">presurreal</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">presurreal</span> <span class=\"bp\">→</span> <span class=\"n\">presurreal</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">presurreal_eqv</span> <span class=\"o\">:</span> <span class=\"n\">presurreal</span> <span class=\"bp\">→</span> <span class=\"n\">presurreal</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">xs'</span> <span class=\"n\">ys</span> <span class=\"n\">ys'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">presurreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">~</span> <span class=\"n\">xs'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hys</span> <span class=\"o\">:</span> <span class=\"n\">ys</span> <span class=\"bp\">~</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">presurreal_eqv</span> <span class=\"o\">(</span><span class=\"n\">presurreal.mk</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">presurreal.mk</span> <span class=\"n\">xs'</span> <span class=\"n\">ys'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">perm_forall</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">xs'</span> <span class=\"n\">ys</span> <span class=\"n\">ys'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">presurreal</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hxs</span> <span class=\"o\">:</span> <span class=\"n\">list.forall₂</span> <span class=\"n\">presurreal_eqv</span> <span class=\"n\">xs</span> <span class=\"n\">xs'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hys</span> <span class=\"o\">:</span> <span class=\"n\">list.forall₂</span> <span class=\"n\">presurreal_eqv</span> <span class=\"n\">ys</span> <span class=\"n\">ys'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">presurreal_eqv</span> <span class=\"o\">(</span><span class=\"n\">presurreal.mk</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">presurreal.mk</span> <span class=\"n\">xs'</span> <span class=\"n\">ys'</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Almost surreals using finite sets, but allowing duplication (so using multisets)</span>\n<span class=\"kd\">def</span> <span class=\"n\">multisurreal</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span> <span class=\"n\">presurreal_eqv</span>\n</code></pre></div>\n<p>This (should be) equivalent to the following inductive type, if Lean could handle it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">surreal</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">presurreal</span> <span class=\"bp\">→</span> <span class=\"n\">multiset</span> <span class=\"n\">presurreal</span> <span class=\"bp\">→</span> <span class=\"n\">presurreal</span>\n</code></pre></div>",
        "id": 312819720,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669720906
    },
    {
        "content": "<p>The next step would be to impose non-duplication, maybe by taking the subtype of <code>multisurreal</code> that satisfy an inductively defined non-duplication proposition</p>",
        "id": 312819911,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669720986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568906\">Jon Ezeiza</span> <a href=\"#narrow/stream/113489-new-members/topic/defining.20surreal.20numbers/near/312819433\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">surreal</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">surreal</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">surreal</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">surreal</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I suppose it's more self-contained, but it's not really much less abstract, and not sure how ergonomic this form will be for proving things with it.<br>\nLet me know what you think of this, otherwise I'll just stick to the <code>mathlib</code> definition. If I prove anything new it will be easier to merge as well.</p>",
        "id": 312819942,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669720997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/defining.20surreal.20numbers/near/312819911\">said</a>:</p>\n<blockquote>\n<p>The next step would be to impose non-duplication, maybe by taking the subtype of <code>multisurreal</code> that satisfy an inductively defined non-duplication proposition</p>\n</blockquote>\n<p>Thinking about it, non-duplication might not matter for surreal numbers due to how equivalence is defined. Can anyone confirm that this assumption makes sense?</p>",
        "id": 312820455,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669721207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568906\">Jon Ezeiza</span> <a href=\"#narrow/stream/113489-new-members/topic/defining.20surreal.20numbers/near/312817391\">said</a>:</p>\n<blockquote>\n<p>It also feels a bit wrong to use a type like <code>list</code> which is more concrete and artificially generalize it. I'm from a Computer Science background, it just feels inefficient to treat lists like set and always check for duplication and ordering.</p>\n</blockquote>\n<p>I guess I should mention that there's not something that's always checking for duplication and ordering. The function of <code>quot</code> is to make a new type with a custom <code>=</code>. Two <code>finset</code>s are (provably) equal if the two underlying lists are related by a permutation (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.perm\">docs#list.perm</a>), and there's nothing that's trying to normalize the order.</p>",
        "id": 312820533,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669721243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568906\">Jon Ezeiza</span> <a href=\"#narrow/stream/113489-new-members/topic/defining.20surreal.20numbers/near/312820455\">said</a>:</p>\n<blockquote>\n<p>Thinking about it, non-duplication might not matter for surreal numbers due to how equivalence is defined.</p>\n</blockquote>\n<p>I don't know really anything abotu surreal numbers, but the equivalence I defined only lets you say that two <code>multisurreal</code> elements are equal if you can find some way to permute their underlying lists to get equal <code>presurreal</code> elements. There might be duplication in the <code>presurreal</code> lists, and differences in multiplicity give non-equal <code>multisurreal</code> elements.</p>",
        "id": 312820882,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669721382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/defining.20surreal.20numbers/near/312820533\">said</a>:</p>\n<blockquote>\n<p>I guess I should mention that there's not something that's always checking for duplication and ordering. The function of <code>quot</code> is to make a new type with a custom <code>=</code>. Two <code>finset</code>s are (provably) equal if the two underlying lists are related by a permutation (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.perm\">docs#list.perm</a>), and there's nothing that's trying to normalize the order.</p>\n</blockquote>\n<p>But the type-checking engine will need to check all permutations for checking <code>list.perm</code> no? I suppose it is only checked when creating surreal numbers, and then it can be proven that any operations between them don't break this non-ordered property, so it doesn't need to be checked again.</p>",
        "id": 312821193,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669721491
    },
    {
        "content": "<p>Nope, the typechecker only checks for definitional equality, not propositional equality. Two <code>finset</code>s whose underlying lists are definitionally equal are definitional equal, but two <code>finset</code>s whose underlying lists are non-trivial permutations of each other are merely propositionally equal.</p>",
        "id": 312821421,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669721575
    },
    {
        "content": "<p>It's up to you (or a custom algorithm you might provide) to provide equality proofs in these cases.</p>",
        "id": 312821559,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669721617
    },
    {
        "content": "<p>For example, the first fails definitional equality, but the second uses an algorithm that's hooked into the <code>decidable</code> typeclass system to automatically (and inefficiently!) compute whether there exists a permutation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 312821899,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669721732
    },
    {
        "content": "<p>Is this the \"bogosort\" algorithm I've heard about?</p>",
        "id": 312822767,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669722028
    },
    {
        "content": "<p>I think bogosort is when you <em>randomly</em> try permutations. This one is more principled, you try <em>all</em> of them <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 312822931,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1669722100
    },
    {
        "content": "<p><code>x ≈ y ↔ x ≤ y ∧ y ≤ x</code> where <code>x ≤ y ↔ ∀ (xl ∈ x.l) xl &lt; y ∧ ∀ (yr ∈ y.r) x &lt; yr</code> (I think that's right)<br>\nBased on this, it looks like the equality relation can probably be defined with plain <code>list</code>s without issue. It doesn't really matter if there are permutations or duplicates.<br>\nI'll give it a try.</p>",
        "id": 312823115,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669722166
    },
    {
        "content": "<p>I think I'll mark this as resolved, I have enough info to push forward.<br>\nI can either:</p>\n<ol>\n<li>Define surreals with lists instead of sets</li>\n<li>Define my own simplified surreals based on the existing <code>pgame</code> from mathlib</li>\n</ol>\n<p>Thank you everyone! Very helpful.</p>",
        "id": 312824401,
        "sender_full_name": "Jon Ezeiza",
        "timestamp": 1669722598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"568906\">Jon Ezeiza</span> has marked this topic as resolved.</p>",
        "id": 312824470,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669722609
    }
]