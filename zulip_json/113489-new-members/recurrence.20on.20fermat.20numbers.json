[
    {
        "content": "<p>Hello I am new to Lean,  and I would like help with proving a recurrence on the fermat numbers, which in latex is</p>\n<div class=\"codehilite\" data-code-language=\"TeX\"><pre><span></span><code><span class=\"k\">\\prod</span><span class=\"nb\">_{</span>k=0<span class=\"nb\">}^{</span>n-1<span class=\"nb\">}</span> F<span class=\"nb\">_</span>k = F<span class=\"nb\">_</span>n-2\n</code></pre></div>\n<p>I tried to write it in Lean as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- define a fermat number</span>\n<span class=\"kd\">def</span> <span class=\"n\">fermat_number</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"c1\">-- prove the recurrence on the Fermat numbers</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fermat_recurrence</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">fermat_number</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fermat_number</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but the error said \"unexpected token\". I don't know how to solve this because I am new to using Lean, so I would appreciate it if anyone would help me.</p>",
        "id": 266732030,
        "sender_full_name": "Peter Ross",
        "timestamp": 1641240969
    },
    {
        "content": "<p>You're looking for something more like <code>∏ x in range(n-1), fermat_number x = fermat_number n - 2</code></p>",
        "id": 266732229,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641241102
    },
    {
        "content": "<p>you'll want <code>open_locale big_operators</code> too</p>",
        "id": 266732251,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641241118
    },
    {
        "content": "<p>And <code>range n</code> instead of <code>range (n - 1)</code> most likely.</p>",
        "id": 266732313,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641241160
    },
    {
        "content": "<p>(natural number subtraction is annoying in Lean)</p>",
        "id": 266732419,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641241214
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"c1\">-- define a fermat number</span>\n<span class=\"kd\">def</span> <span class=\"n\">fermat_number</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"c1\">-- prove the recurrence on the Fermat numbers</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fermat_recurrence</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fermat_number</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fermat_number</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266732691,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641241408
    },
    {
        "content": "<p>To avoid the subtraction would it be better to write this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fermat_recurrence</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">fermat_number</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fermat_number</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266732937,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1641241566
    },
    {
        "content": "<p>Nonono, the brackets aren't there. It's (fermat_number n) +2</p>",
        "id": 266733119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641241708
    },
    {
        "content": "<p>The formalisation is fine with the subtraction because the Fermat numbers are all &gt;= 3.</p>",
        "id": 266733199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641241759
    },
    {
        "content": "<p>I think that the correct way to avoid nat subtraction is not to use nat:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"c1\">-- define a Fermat number as an integer</span>\n<span class=\"kd\">def</span> <span class=\"n\">fermat_number</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"c1\">-- prove the recurrence on the Fermat numbers</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fermat_recurrence</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fermat_number</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fermat_number</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266733410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641241901
    },
    {
        "content": "<p>It appears to be true in lean:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"c1\">-- define a fermat number</span>\n<span class=\"kd\">def</span> <span class=\"n\">fermat_number</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span><span class=\"mi\">1</span>\n\n<span class=\"c1\">-- prove the recurrence on the Fermat numbers</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fermat_recurrence</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fermat_number</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fermat_number</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fermat_number</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">finset.prod_range_succ</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_sub_succ_eq_sub</span><span class=\"o\">,</span>\n      <span class=\"n\">finset.prod_congr</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.sq_sub_sq</span><span class=\"o\">,</span> <span class=\"n\">pow_succ'</span> <span class=\"n\">_</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 266733424,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641241918
    },
    {
        "content": "<p>The proof is simpler if you use integers.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"c1\">-- define a Fermat number as an integer</span>\n<span class=\"kd\">def</span> <span class=\"n\">fermat_number</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"c1\">-- prove the recurrence on the Fermat numbers</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fermat_recurrence</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∏</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">fermat_number</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">fermat_number</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fermat_number</span><span class=\"o\">],</span> <span class=\"c1\">-- replace `fermat_number` by its definition</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"c1\">-- induction on n</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span> <span class=\"c1\">-- base case is easy</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- inductive step: use prod to n = prod to n-1 * n'th term and inductive hypo,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.prod_range_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- and then just tidy up</span>\n    <span class=\"n\">ring_exp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</div></div>",
        "id": 266733742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641242118
    },
    {
        "content": "<p>Isn't it always :)</p>",
        "id": 266733758,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1641242134
    },
    {
        "content": "<p>Furthermore I would argue that the <em>moment</em> you use subtraction you're saying \"I am assuming subtraction makes sense hence I am assuming these things are integers\". I would argue that the integer version is a more correct way of translating into Lean the meaning of the original question, as well as being easier to work with.</p>",
        "id": 266733860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641242212
    }
]