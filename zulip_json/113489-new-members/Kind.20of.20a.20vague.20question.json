[
    {
        "content": "<p>I've already done all of these, but I'm not sure if I'm on the right track: this never occurs when I do math. So I'll ask for opinions.</p>\n<p>Let's say we have a <code>normed_field K</code> and a normed space <code>γ</code> over <code>K</code>. Let <code>f : α → γ</code> be an integrable function,  which means <code>∫ ∥f x∥ dx &lt; ∞</code>. Then the l1-norm of <code>f</code> is usually defined as <code>∫ ∥f x∥ dx</code>.</p>\n<p>However <code>∫</code> (called <code>lintegral</code> in library) has type <code>(α → ennreal) → ennreal</code>, thus to define the norm of f,  we first need to write <code>∥f x∥ : ℝ</code> as <code>metric_space.edist (f x) 0 : ennreal</code>, then integrate, then turn it back to <code>real</code></p>\n<div class=\"codehilite\"><pre><span></span>∥f∥ := ennreal.to_real (lintegral (λ x, metric_space.edist (f x) 0))\n</pre></div>\n\n\n<p>For example, if I want to do the following reasoning</p>\n<div class=\"codehilite\"><pre><span></span>∫ ∥c • (f x)∥ dx = ∫ ∥c∥ * ∥f x∥ dx\n</pre></div>\n\n\n<p>where <code>c : K</code> and <code>f x : γ</code>. This should be killed easily by <code>norm_smul : ∥s • x∥ = ∥s∥ * ∥x∥</code>. But we cannot do that. Because what we need to prove is</p>\n<div class=\"codehilite\"><pre><span></span>lintegral (λ x, metric_space.edist (c • (f x)) 0) = lintegral (λ x, (metric_space.edist c 0) * (metric_space.edist (f x) 0))\n</pre></div>\n\n\n<p>And to prove this, I have to first prove an \"extended\" version of <code>norm_smul</code>:</p>\n<div class=\"codehilite\"><pre><span></span>metric_space.edist (s • x) 0 = (metric_space.edist s 0) * (metric_space.edist x 0)\n</pre></div>\n\n\n<p>I need other \"extended\" version of norm lemmas, like</p>\n<div class=\"codehilite\"><pre><span></span>∥x + y∥ ≤ ∥x∥ + ∥y∥\nmetric_space.edist (x + y) 0 ≤ metric_space.edist x 0 + metric_space.edist y 0\n</pre></div>\n\n\n<p>etc. </p>\n<p>If this has to be the case, I guess I'll just prove those \"extended\" version of norm lemmas and put them somewhere? If not, then I'm not sure how to modify the definition of integral.</p>",
        "id": 165302415,
        "sender_full_name": "Joe",
        "timestamp": 1557452806
    },
    {
        "content": "<p>At least <code>metric_space.edist s 0</code> is unnecessary, because it's always finite (it's a normed field not a enormed field)</p>",
        "id": 165302968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557453775
    },
    {
        "content": "<p>But there should also be a definition of <code>enorm</code> so you don't need all these <code>dist 0</code> things</p>",
        "id": 165302983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557453802
    },
    {
        "content": "<p>wait, isn't the norm of <code>f</code> also always finite?</p>",
        "id": 165303029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557453845
    },
    {
        "content": "<p>so doesn't <code>lintegral (λ x, ∥c • (f x)∥) = lintegral (λ x, ∥c∥ * ∥f x∥)</code> work?</p>",
        "id": 165303038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557453888
    },
    {
        "content": "<p>I think this does't type check, because <code>λ x : α, ∥f x∥</code> is of type <code>α → ℝ</code>, while <code>lintegral</code> expects a <code>α → ennreal</code>. Though when I tried to check the type of <code>lintegral (λ x : α, ∥f x∥)</code>, the error message is maximum class-instance</p>",
        "id": 165303653,
        "sender_full_name": "Joe",
        "timestamp": 1557454794
    },
    {
        "content": "<p><code>#check lintegral (λ x : α, metric_space.edist (f x) 0)</code> easily type checks.</p>",
        "id": 165303715,
        "sender_full_name": "Joe",
        "timestamp": 1557454864
    },
    {
        "content": "<p><code>#check lintegral (λ x : α, ∥f x∥)</code> fails.</p>",
        "id": 165303723,
        "sender_full_name": "Joe",
        "timestamp": 1557454880
    },
    {
        "content": "<p>with </p>\n<div class=\"codehilite\"><pre><span></span>variables {α : Type u} [measure_space α]\nvariables {K : Type*} [normed_field K]\n   {γ : Type*}  [normed_space K γ] [second_countable_topology γ] [topological_add_group γ]\nvariables {c : K} {f : α → γ}\n</pre></div>",
        "id": 165303772,
        "sender_full_name": "Joe",
        "timestamp": 1557454928
    },
    {
        "content": "<p>Use <code>nnnorm</code> instead</p>",
        "id": 165304297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557455821
    },
    {
        "content": "<p>Yeah, this type checks. But I don't know. The problem is that <code>metric_space.edist</code> just appears.</p>",
        "id": 165304576,
        "sender_full_name": "Joe",
        "timestamp": 1557456273
    },
    {
        "content": "<p>It appears in proofs after I unwrap all the subtypes and quotients and definitions.</p>",
        "id": 165304599,
        "sender_full_name": "Joe",
        "timestamp": 1557456333
    },
    {
        "content": "<p>then don't unwrap all the subtypes and quotients and definitions</p>",
        "id": 165304676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557456479
    },
    {
        "content": "<p>this is a very common newbie mistake</p>",
        "id": 165304720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557456488
    },
    {
        "content": "<p>only unfold what you have to</p>",
        "id": 165304723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557456499
    }
]