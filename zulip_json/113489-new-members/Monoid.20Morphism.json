[
    {
        "content": "<p>Say I have <code>(M N : Type u) [monoid M] [monoid N](f : M -&gt; N)</code>, how do I say \"<code>f</code> is a monoid morphism\" in Lean?</p>",
        "id": 240749126,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622370124
    },
    {
        "content": "<p>Just write <code>f : M →* N</code>.</p>",
        "id": 240750032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622371794
    },
    {
        "content": "<p>We use bundled morphisms (i.e. not just a bare function), and these have a coercion to functions so you can mostly use them just as if it was an honest function.</p>",
        "id": 240750079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622371824
    },
    {
        "content": "<p>There is probably a <code>is_monoid_hom</code> predicate as well, but don't use it unless you're really sure you should be: the bundled hom is usually better.</p>",
        "id": 240750087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622371868
    },
    {
        "content": "<p>my issue though is that I'm given the bare function <code>f</code> and I want to say \"this <code>f</code> is a monoid morphism\"</p>",
        "id": 240750132,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622371925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Monoid.20Morphism/near/240750087\">said</a>:</p>\n<blockquote>\n<p>There is probably a <code>is_monoid_hom</code> predicate as well, but don't use it unless you're really sure you should be: the bundled hom is usually better.</p>\n</blockquote>\n<p>because using bundled hom is morally \"working in the category of monoids\"?</p>",
        "id": 240750157,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622372036
    },
    {
        "content": "<p>This is often an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. Usually the correct fix is to find the person giving you the bare function and make them give you the bundled function instead. :-)</p>",
        "id": 240750290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622372229
    },
    {
        "content": "<p>There is <code>is_monoid_hom</code> for exactly this purpose, but if you observe how infrequently it is used in mathlib, you'll see why I suggest you tell us here what you're doing, and we'll see if the bundled hom suits your purpose!</p>",
        "id": 240750345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622372327
    },
    {
        "content": "<p>I'm trying out an alternative definition of \"monoids internal to a category\" based on Yoneda </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Mon.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MON</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">el_mon</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">monoid</span><span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">⟶</span> <span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">tactic.apply_instance</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">funk_mon</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"n\">δ₁</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">δ₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"n\">d₁</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">⟶</span> <span class=\"n\">carrier</span><span class=\"o\">),</span>\n  <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">d₁</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">d₁</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">MON</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.carrier</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">M.el_mon</span> <span class=\"n\">δ</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">MON</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mor</span> <span class=\"o\">:</span> <span class=\"n\">M.carrier</span> <span class=\"bp\">⟶</span> <span class=\"n\">N.carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">el_map_one</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.carrier</span><span class=\"o\">)</span><span class=\"bp\">≫</span> <span class=\"n\">mor</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">el_map_mul</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">⟶</span> <span class=\"n\">M.carrier</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">mor</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">≫</span> <span class=\"n\">mor</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">≫</span> <span class=\"n\">mor</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 240750495,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622372619
    },
    {
        "content": "<p>it would be nice for <code>funk_mon</code> to say \"the (contravariant) induced map on homs is a monoid morphism\" and similarly for definition of <code>hom</code> to be \"a map such that induced map on homs is a monoid morphism\", hence my post.</p>",
        "id": 240750565,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622372736
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 240750687,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622372997
    },
    {
        "content": "<p>maybe I shld phrase everything as upgrading the Yoneda embedding \"<code>yoneda M : C^op =&gt; Type v</code>\" to \"<code>yoneda M : C^op =&gt; Mon Type v</code>\"?</p>",
        "id": 240750731,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622373032
    },
    {
        "content": "<p>I'm not quite sure what that would mean.</p>",
        "id": 240750740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622373070
    },
    {
        "content": "<p>We do have <code>Mon_ (C ⥤ D) ≌ C ⥤ Mon_ D</code>in <code>category_theory.monoidal.internal.functor_category</code>.</p>",
        "id": 240750758,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622373112
    },
    {
        "content": "<p>So it would suffice to say <code>yoneda M</code> is an internal monoid. But we don't have unbundled internal monoids! :-)</p>",
        "id": 240750803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622373162
    },
    {
        "content": "<p>I guess you could not worry about representability, and just write <code>Mon_ (Cᵒᵖ ⥤ Type)</code> as the entirety of the definition... (pro- internal- monoids? I don't know what these would be called)</p>",
        "id": 240750864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622373262
    },
    {
        "content": "<p>Or take the subcategory which under <code>Mon_ (Cᵒᵖ ⥤ Type) ≌ Cᵒᵖ ⥤ Mon_ Type</code> become representable...</p>",
        "id": 240750881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622373305
    },
    {
        "content": "<p>But I think my answer for now is that you should use <code>is_monoid_hom</code>. :-)</p>",
        "id": 240750889,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622373320
    },
    {
        "content": "<p>I will play around with both <code>is_monoid_hom</code> and <code>Mon_ (Cᵒᵖ ⥤ Type)</code>. Thanks so much!</p>",
        "id": 240750948,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622373402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Monoid.20Morphism/near/240750864\">said</a>:</p>\n<blockquote>\n<p>I guess you could not worry about representability, and just write <code>Mon_ (Cᵒᵖ ⥤ Type)</code> as the entirety of the definition... (pro- internal- monoids? I don't know what these would be called)</p>\n</blockquote>\n<p>monoid presheaves on <code>C</code> maybe?</p>",
        "id": 240751009,
        "sender_full_name": "Ken Lee",
        "timestamp": 1622373484
    }
]