[
    {
        "content": "<p>Hi. I'm working on a kata and I'm doing some actual number theory in Lean for the first time.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">solution</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_lt_q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">q_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">consecutive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is my MWE, although it's really just a sorry right now. I did one attempt but it got in such a tangle...</p>\n<p>Here is my sketch proof:<br>\np odd as non-two prime, q same. So p + q even, so there's a natural k such that 2*k = p + q. p &lt; k &lt; q, so by hypothesis k is not prime. So there's some a, 1 &lt; a &lt; k, such that a | k. Let b = (k/a). Use a, b, 2 as the a, b, c needed.</p>\n<p>Now, I'd like to avoid too much unnecessary work here. To show that p and q are odd, it makes sense that I'd use nat.prime.eq_two_or_odd. But this has the \"odd\" condition as p % 2 = 1. This doesn't seem very useful - in particular, I can't see how you make it compatible with the MOD N definition, or the definition of oddness - so while there surely must be a way to get to where I want, it isn't clear to me.</p>\n<p>To find k, I think I might want to use nat.exists_dvd_of_not_prime or nat.not_prime_iff_min_fac_lt - the former seems better. These are the only two \"number theoretic\" theorems I want - everything else seems like it ought to just be algebra. But I can't see how to run at it neat#ly.</p>",
        "id": 216679306,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605304678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/113489-new-members/topic/Primes.20and.20modular.20arithmetic.2E/near/216679306\">said</a>:</p>\n<blockquote>\n<p>Now, I'd like to avoid too much unnecessary work here. To show that p and q are odd, it makes sense that I'd use nat.prime.eq_two_or_odd. But this has the \"odd\" condition as p % 2 = 1. This doesn't seem very useful - in particular, I can't see how you make it compatible with the MOD N definition, or the definition of oddness - so while there surely must be a way to get to where I want, it isn't clear to me.</p>\n</blockquote>\n<p>It sounds like you're asking for a lemma relating oddness and <code>% 2 = 1</code> relation. You could write this lemma out explicitly and then see if <code>library_search</code> finds it.</p>",
        "id": 216679567,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605304808
    },
    {
        "content": "<p>Yes. I have had a good look before asking! But I haven't found one.</p>",
        "id": 216679606,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605304834
    },
    {
        "content": "<p>finding existing lemmas is hard, for sure</p>",
        "id": 216679631,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605304852
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a></p>",
        "id": 216679658,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605304865
    },
    {
        "content": "<p>one surprisingly useful strategy is to literally guess the name of the lemma</p>",
        "id": 216679705,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605304881
    },
    {
        "content": "<p>Yes I've got very far with that!</p>",
        "id": 216679724,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605304890
    },
    {
        "content": "<p>another strategy is using <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">tactic#library_search</a></p>",
        "id": 216679753,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605304908
    },
    {
        "content": "<p>for the latter you have to actually write a statement of the lemma you want, for this you might find <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#extract_goal\">tactic#extract_goal</a> useful</p>",
        "id": 216679856,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605304950
    },
    {
        "content": "<p>How embarassing!</p>",
        "id": 216679899,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605304972
    },
    {
        "content": "<p>Here it is: <a href=\"https://leanprover-community.github.io/mathlib_docs/data/nat/parity.html#nat.odd_iff\">https://leanprover-community.github.io/mathlib_docs/data/nat/parity.html#nat.odd_iff</a></p>",
        "id": 216679912,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605304978
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">odd_iff_one_mod_2</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This worked :)</p>",
        "id": 216679935,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605304988
    },
    {
        "content": "<p>I don't think it's embarrassing at all!</p>",
        "id": 216680008,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605305036
    },
    {
        "content": "<p>So using nat.prime.eq_two_or_odd I can get p = 2 \\\\/ p % 2 = 1.</p>",
        "id": 216680115,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605305073
    },
    {
        "content": "<p>I think I wrote the kata you're working on, and I think I found and forgot the name of this lemma literally three times during the process of writing it</p>",
        "id": 216680126,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605305079
    },
    {
        "content": "<p><code>or.resolve_left</code>?</p>",
        "id": 216680135,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605305085
    },
    {
        "content": "<p>Thanks :)</p>",
        "id": 216680170,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605305104
    },
    {
        "content": "<p>That was my next question.</p>",
        "id": 216680186,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605305109
    },
    {
        "content": "<p>It's a really nice kata, Jalex! Because it is not very hard number theory but it's just hard enough to stretch me in Lean.</p>",
        "id": 216680259,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605305151
    },
    {
        "content": "<p>(I went looking for that with <code>library_search</code> as well just now, so I guessed :))</p>",
        "id": 216680390,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605305216
    },
    {
        "content": "<p>Proving stuff like this is a kerfuffle. I can do the maths, and then I just muddle through the proofs. I think the only difference between you (Wrenna) and me is that I know a couple more tricks. I've always had a \"grind it out\" policy in maths (as you saw with my L&lt;0 proof earlier). I think people with more dignity try to write cleaner code but all I want is \"goals accomplished\".</p>",
        "id": 216680537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605305289
    },
    {
        "content": "<p>I like beauty in my code, for my sins.</p>",
        "id": 216680606,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605305337
    },
    {
        "content": "<p>Not sure if you knew this trick yet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>(given <code>hp : nat.prime p</code>, <code>nat.prime.foo hp</code> can be abbreviated <code>hp.foo</code>)</p>",
        "id": 216680900,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605305453
    },
    {
        "content": "<p>Why does it look like there are two functions with the same name here?</p>",
        "id": 216681369,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605305799
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/nat/parity.html#nat.even_add\">https://leanprover-community.github.io/mathlib_docs/data/nat/parity.html#nat.even_add</a></p>",
        "id": 216681371,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605305799
    },
    {
        "content": "<p>theorems, even, not functions</p>",
        "id": 216681377,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605305807
    },
    {
        "content": "<p>do you mean <code>nat.even_add</code> and <code>nat.even.add</code>?</p>",
        "id": 216681427,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1605305860
    },
    {
        "content": "<p>Oh I see. Ha, a punctuation mark off.</p>",
        "id": 216681523,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605305903
    },
    {
        "content": "<p>you were nat even wrong</p>",
        "id": 216681630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605306000
    },
    {
        "content": "<p>Alright, next question - this is more of a logic one.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.not_even_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">oq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.not_even_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hq.eq_two_or_odd.resolve_left</span> <span class=\"n\">q_ne_two</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">epq</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.even_add</span><span class=\"o\">,</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Here, I have even p ↔ even q as a goal, and ¬even p and ¬even q as hypotheses. So, uh, this is \"just true\", right? I tried simp (didn't work) - clearly I guess I could split the iff and so on but it seems like a lot...</p>",
        "id": 216681757,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605306054
    },
    {
        "content": "<p>I would envisage <code>simp</code> proving it by changing <code>even p</code> and <code>even q</code> to <code>false</code>, but it won't do that unless you explicitly tell it to use the hypotheses <code>not even p</code> and <code>not even q</code></p>",
        "id": 216681941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605306148
    },
    {
        "content": "<p>(<code>simp</code> doesn't use any of the hypotheses in your local context by default)</p>",
        "id": 216681961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605306167
    },
    {
        "content": "<p>So something like <code>simp [op, oq]</code>?</p>",
        "id": 216681975,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605306179
    },
    {
        "content": "<p>Yes!</p>",
        "id": 216681991,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605306187
    },
    {
        "content": "<p>that's what I'd try</p>",
        "id": 216681993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605306189
    },
    {
        "content": "<p>when I was a beginner I'd try <code>simp</code> on anything. Now I know a bit more about term rewriting I kind of get how to use it much better.</p>",
        "id": 216682096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605306247
    },
    {
        "content": "<p>Suppose I have something like p + q = 2*d and p &lt; q, and I want to show p &lt; d and d &lt; q. It feels a bit like I want to do something like p = p /2 + p/2 &lt; p/2 + q/2 = (p+q)/2 = d and so forth. However everything here is in the naturals (where I would prefer to stay I think?), even though I want to briefly soujourn into the rationals.</p>",
        "id": 216683235,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605306967
    },
    {
        "content": "<p>I agree that staying in the naturals is a PITA for this one. The moment you divide by 2 you have trouble. I would be tempted to use <code>norm_cast</code>.</p>",
        "id": 216683338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307027
    },
    {
        "content": "<p>This really reminds me of some of the first stuff of yours I read, Kevin - the way mathematicians hop between the naturals, the reals, the integers, the rationals, without ever thinking of them as different objects, and how that sort of thing is uncovered by formalising like this.</p>",
        "id": 216683351,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307035
    },
    {
        "content": "<p>Ah, I haven't encountered norm_cast before.</p>",
        "id": 216683378,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307048
    },
    {
        "content": "<p>Lemme see if I can knock something up. I would prove it for the rationals first.</p>",
        "id": 216683382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307055
    },
    {
        "content": "<p>I used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">nat.prime</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">consecutive</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 216683527,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605307129
    },
    {
        "content": "<p>Ha! Yes, indeed, linarith just does it...</p>",
        "id": 216683571,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307160
    },
    {
        "content": "<p>oh that's great! That's better than my suggestion. I had assumed linarith would only work over Q</p>",
        "id": 216683604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307193
    },
    {
        "content": "<p>This was what I was thinking; change the entire question to one about rationals and then use linarith.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hd'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216683850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307330
    },
    {
        "content": "<p>it didn't occur to me that <code>split; linarith</code> would do it over N</p>",
        "id": 216683880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307357
    },
    {
        "content": "<p>I have no intuition about when <code>linarith</code> works on N, but sometimes it does</p>",
        "id": 216683906,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605307373
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is the correct proof.</p>",
        "id": 216683948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307402
    },
    {
        "content": "<p>...</p>",
        "id": 216683964,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307422
    },
    {
        "content": "<p><code>omega</code> is a tactic designed to work on naturals, it's complete for Presburger arithmetic, he said, only barely understanding what this means</p>",
        "id": 216683972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307429
    },
    {
        "content": "<p>I think it means \"as long as you don't have two variables multiplied together, you're in good shape with <code>omega</code>\"</p>",
        "id": 216684041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307451
    },
    {
        "content": "<p>I have put it in. Next I need 2 ≤ d...</p>",
        "id": 216684077,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307477
    },
    {
        "content": "<p>Again this is obviously true as p &lt; d by omega or linarith or whatever</p>",
        "id": 216684107,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307496
    },
    {
        "content": "<p>and p is not 2 and is prime. However...</p>",
        "id": 216684119,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307502
    },
    {
        "content": "<p>you want p prime -&gt; p &gt;=2, that will be in the library. Then omega or linarith can take it from there.</p>",
        "id": 216684184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307550
    },
    {
        "content": "<p>Aye.</p>",
        "id": 216684195,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307556
    },
    {
        "content": "<p>nat.prime.one_lt is the one I think.</p>",
        "id": 216684247,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307566
    },
    {
        "content": "<p>But you need it in the local context, it's not good enough to just have it somewhere in mathlib</p>",
        "id": 216684261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307576
    },
    {
        "content": "<p>Aye.</p>",
        "id": 216684265,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307581
    },
    {
        "content": "<p>I think it doesn't like the ≠...</p>",
        "id": 216684409,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307680
    },
    {
        "content": "<p>rotten luck. Not even omega?</p>",
        "id": 216684471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307697
    },
    {
        "content": "<p>Try <code>two_le</code>?</p>",
        "id": 216684484,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605307712
    },
    {
        "content": "<p>?</p>",
        "id": 216684527,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307739
    },
    {
        "content": "<p>do you mean one_le_two?</p>",
        "id": 216684570,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307763
    },
    {
        "content": "<p>No, <code>nat.prime.two_le</code> rather than <code>nat.prime.one_lt</code></p>",
        "id": 216684637,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605307796
    },
    {
        "content": "<p><code>omega</code> works for me.</p>",
        "id": 216684700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307810
    },
    {
        "content": "<p>hmm, maybe I'm using it wrong.</p>",
        "id": 216684721,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307819
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">nat.prime.one_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">omega</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216684792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307863
    },
    {
        "content": "<p>Ah I was trying <code> omega [nat.prime.two_le hp],</code></p>",
        "id": 216684985,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307947
    },
    {
        "content": "<p>oh omega _does_ look at your local context</p>",
        "id": 216685023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307965
    },
    {
        "content": "<p>bother said pooh</p>",
        "id": 216685059,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605307983
    },
    {
        "content": "<p>and I don't know if it takes arguments</p>",
        "id": 216685064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307985
    },
    {
        "content": "<p>yeah we make it random to keep beginners on their toes</p>",
        "id": 216685094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605307999
    },
    {
        "content": "<p>The have k := syntax I either hadn't seen or had forgotton.</p>",
        "id": 216685219,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308046
    },
    {
        "content": "<p>there is some code I don't really understand that you can see when you hover over a tactic. It's something to do with parsers. If I hover over <code>omega</code> it says <code>omega id*</code></p>",
        "id": 216685224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308050
    },
    {
        "content": "<p>That's quite useful for \"I want to instantiate a theorem in some particular way.\"</p>",
        "id": 216685255,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308068
    },
    {
        "content": "<p>but if I hover over <code>simp</code> it says <code>simp !? only? (* | [(* | (- id | (&lt;- expr | expr))), ...]?) (with id*)? (at (* | (⊢ | id)*))? tactic.simp_config_ext?</code></p>",
        "id": 216685264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308076
    },
    {
        "content": "<p>which I think means \"simp can take some extra arguments\"</p>",
        "id": 216685298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308091
    },
    {
        "content": "<p>I genuinely don't know what you can put after <code>omega</code>, I only use it as a standalone tactic and I don't understand parsers well enough to know what <code>id*</code> means</p>",
        "id": 216685542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308217
    },
    {
        "content": "<p>Alright, home stretch...</p>",
        "id": 216685554,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.not_even_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">oq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.not_even_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hq.eq_two_or_odd.resolve_left</span> <span class=\"n\">q_ne_two</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">epq</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.even_add</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">op</span><span class=\"o\">,</span> <span class=\"n\">oq</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">even_iff_two_dvd</span> <span class=\"n\">at</span> <span class=\"n\">epq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">epq</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">compd</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">consecutive</span><span class=\"bp\">;</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">nat.prime.two_le</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">nat.exists_dvd_of_not_prime</span> <span class=\"n\">d2</span> <span class=\"n\">compd</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">],</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216685560,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308228
    },
    {
        "content": "<p>What's the local context at the <code>sorry</code>?</p>",
        "id": 216685593,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308250
    },
    {
        "content": "<p>(either that or post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 216685606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308261
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pq</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span>\n<span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">q</span>\n<span class=\"n\">p_lt_q</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span>\n<span class=\"n\">p_ne_two</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span>\n<span class=\"n\">q_ne_two</span><span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span>\n<span class=\"n\">consecutive</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">nat.prime</span> <span class=\"n\">k</span>\n<span class=\"n\">op</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">even</span> <span class=\"n\">p</span>\n<span class=\"n\">oq</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">even</span> <span class=\"n\">q</span>\n<span class=\"n\">epq</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span>\n<span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span>\n<span class=\"n\">compd</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">nat.prime</span> <span class=\"n\">d</span>\n<span class=\"n\">d2</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 216685610,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308266
    },
    {
        "content": "<p>still loving the cut and paste from the infoview eats random spaces bug</p>",
        "id": 216685683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308291
    },
    {
        "content": "<p>a style point: you're not supposed to ever see <code>&gt;</code> in Lean code or goals.</p>",
        "id": 216685731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308340
    },
    {
        "content": "<p>So if from hn I can get 1 &lt; n  and n &lt; d then technically I should be done...</p>",
        "id": 216685764,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308360
    },
    {
        "content": "<p><code>a &gt; b</code> desugars to <code>b &lt; a</code> but it still manages to fool some tactics, so we just decided to ban it</p>",
        "id": 216685768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308363
    },
    {
        "content": "<p>yeah this is looking good</p>",
        "id": 216685798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308401
    },
    {
        "content": "<p>I am a bit suspicious that, mmm, I haven't necessarily shown that d/n is an integer - it just seemed to accept me using it.</p>",
        "id": 216685861,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308415
    },
    {
        "content": "<p>it's natural division, so 3/2=1 and 1/0=37</p>",
        "id": 216685877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308429
    },
    {
        "content": "<p>Like it is an integer becasuse n | d but I'm not used to Lean letting me be lazy.</p>",
        "id": 216685887,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308439
    },
    {
        "content": "<p>Ah lovely.</p>",
        "id": 216685901,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308452
    },
    {
        "content": "<p>right -- it's divided and then rounded</p>",
        "id": 216685908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308461
    },
    {
        "content": "<p>So possibly I don't <em>want</em> to use the division.</p>",
        "id": 216685954,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308493
    },
    {
        "content": "<p>it should be OK, there will probably be a lemma saying that if n | d then (n / d) * d = n</p>",
        "id": 216686008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308524
    },
    {
        "content": "<p>Really I want to use n | d to find some m so that n*m = d. There should be some lemma for that.</p>",
        "id": 216686038,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308534
    },
    {
        "content": "<p>Or that, yes.</p>",
        "id": 216686045,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308537
    },
    {
        "content": "<p>in fact you can just do cases on <code>n | d</code></p>",
        "id": 216686050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308540
    },
    {
        "content": "<p><code>n | d</code> is by definition \"exists m, d = n * m`</p>",
        "id": 216686057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308546
    },
    {
        "content": "<p>Now, for some chunk series of ands, it's split, right?</p>",
        "id": 216686066,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308558
    },
    {
        "content": "<p>Repeated multiple times.</p>",
        "id": 216686071,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308562
    },
    {
        "content": "<p>yes, split if they're in the goal and cases if they're hypotheses</p>",
        "id": 216686079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308574
    },
    {
        "content": "<p>the introduction and elimination tactics for and.</p>",
        "id": 216686094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308586
    },
    {
        "content": "<p>Now, can I use rcases instead of cases, in order to get hn as three separate hypotheses originally?</p>",
        "id": 216686427,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308768
    },
    {
        "content": "<p>I'm not sure if I'll need to but...</p>",
        "id": 216686434,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308775
    },
    {
        "content": "<p>Hmm, it didn't work like I expected.</p>",
        "id": 216686485,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308819
    },
    {
        "content": "<p>I like the way that you're kind of mathsy and computer-sciency at the same time. Are you that Royal Holloway PhD student or am I confusing you with someone else?</p>",
        "id": 216686488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308823
    },
    {
        "content": "<p>That's me :)</p>",
        "id": 216686497,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308829
    },
    {
        "content": "<p>mathsy beginners have more trouble with the CS stuff and CS beginners with the maths stuff</p>",
        "id": 216686507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308838
    },
    {
        "content": "<p>And I have trouble with everything! ;P</p>",
        "id": 216686521,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308849
    },
    {
        "content": "<p>You're doing great!</p>",
        "id": 216686538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308862
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 216686546,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308866
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">hQ</span><span class=\"o\">,</span> <span class=\"n\">hR</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216686611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308904
    },
    {
        "content": "<p>I can even claim that Lean is actual research work... though the paper I'm currently trying to figure out uses Isabelle for what it does (and I don't get Isabelle and it's much less user-friendly, alas).</p>",
        "id": 216686640,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308932
    },
    {
        "content": "<p>I think the 24/7 helpline we have here is massively important</p>",
        "id": 216686672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308972
    },
    {
        "content": "<p>Yes.</p>",
        "id": 216686690,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605308987
    },
    {
        "content": "<p>It was just over 3 years ago that I was spamming the chat asking questions and other people were helping me out.</p>",
        "id": 216686696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605308995
    },
    {
        "content": "<p>Circle of life!</p>",
        "id": 216686717,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309003
    },
    {
        "content": "<p>I could do the maths no problem but I had no clue about the CS stuff.</p>",
        "id": 216686751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309009
    },
    {
        "content": "<p>Hmm, the rcases format I wanted to use hasn't worked. Before I had <code>cases (nat.exists_dvd_of_not_prime d2 compd) with n hn</code>. Now I thought <code>rcases (nat.exists_dvd_of_not_prime d2 compd) with n ⟨hn1, hn2, hn3⟩</code> might work... but it does not</p>",
        "id": 216686815,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309099
    },
    {
        "content": "<p>Try <code>rcases?</code></p>",
        "id": 216686835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309118
    },
    {
        "content": "<p>No joy.</p>",
        "id": 216686884,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309134
    },
    {
        "content": "<p>you probably want <code>\\&lt;n, hn1, hn2, hn3\\&gt; </code></p>",
        "id": 216686896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309144
    },
    {
        "content": "<p>Hmm! Yes. In my head the n was on a different level of hypothesis.</p>",
        "id": 216686915,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309174
    },
    {
        "content": "<p><code>rcases? (nat.exists_dvd_of_not_prime d2 compd)</code> should tell you what you want though</p>",
        "id": 216686916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309175
    },
    {
        "content": "<p>It actually gave me something not very helpful!</p>",
        "id": 216686947,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309216
    },
    {
        "content": "<p><code>rcases ('?' expr (: n)?) | ((h :)? expr (with patt)?)</code> should answer all your questions</p>",
        "id": 216686954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309224
    },
    {
        "content": "<p>oh well that clears that up</p>",
        "id": 216686964,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309236
    },
    {
        "content": "<p>how could i have been so blind</p>",
        "id": 216686973,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309242
    },
    {
        "content": "<p>parsers are cool. I wish I understood them a bit better.</p>",
        "id": 216687018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309259
    },
    {
        "content": "<p>The moment you start learning how to write interactive tactics you need to know this stuff, but I have never written a line of <code>meta</code> code in my life</p>",
        "id": 216687040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309282
    },
    {
        "content": "<p>the deep magic</p>",
        "id": 216687047,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309294
    },
    {
        "content": "<p>Now, I am going to want to extract 1&lt;= n &lt;= d from n|d and let omega do its work.</p>",
        "id": 216687096,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309340
    },
    {
        "content": "<p>Must be a lemma for that.</p>",
        "id": 216687104,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309348
    },
    {
        "content": "<p>I'm guessing <code>le_of_dvd</code> or something</p>",
        "id": 216687153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309365
    },
    {
        "content": "<p>for n&lt;=d</p>",
        "id": 216687158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309372
    },
    {
        "content": "<p>the naming convention is really cool</p>",
        "id": 216687164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309380
    },
    {
        "content": "<p>What does \"of\" mean?</p>",
        "id": 216687169,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309394
    },
    {
        "content": "<p>Hmm, I have it but for ints. I hope that isn't an issue...</p>",
        "id": 216687179,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309405
    },
    {
        "content": "<p><code>X_of_Y</code> means <code>Y -&gt; X</code></p>",
        "id": 216687184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309409
    },
    {
        "content": "<p>is it really not there for nats?</p>",
        "id": 216687192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309415
    },
    {
        "content": "<p>Oh it is, the search just didn't give it the first time.</p>",
        "id": 216687208,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605309432
    },
    {
        "content": "<p>oh yeah, sometimes I hit esc and then ctrl-space and get more options</p>",
        "id": 216687227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309453
    },
    {
        "content": "<p>I've never understood what's going on with that</p>",
        "id": 216687232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309460
    },
    {
        "content": "<p><code>X_of_Y_of_Z</code> means <code>Y -&gt; Z -&gt; X</code></p>",
        "id": 216687242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309472
    },
    {
        "content": "<p>e.g. <code>lt_of_le_of_lt</code>, something we used a lot before <code>linarith</code> was discovered</p>",
        "id": 216687296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309492
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a></p>",
        "id": 216687314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605309519
    },
    {
        "content": "<p>I got there in the end, but the 1 &lt; a and 1 &lt; k/a were somewhat tedious - I hope there's a better solution</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">solution</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_lt_q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">q_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">consecutive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hp1</span> <span class=\"o\">:=</span> <span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq1</span> <span class=\"o\">:=</span> <span class=\"n\">hq.eq_two_or_odd.resolve_left</span> <span class=\"n\">q_ne_two</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">nat.odd_iff</span> <span class=\"n\">at</span> <span class=\"n\">hp1</span> <span class=\"n\">hq1</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hp1</span> <span class=\"n\">hq1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hp1</span><span class=\"o\">,</span> <span class=\"n\">hq1</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">parity_simps</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">nat.prime</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">consecutive</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">hadvd</span><span class=\"o\">,</span> <span class=\"n\">hane1</span><span class=\"o\">,</span> <span class=\"n\">hanek</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">nat.exists_dvd_of_not_prime</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hp.two_le</span><span class=\"o\">,</span> <span class=\"n\">hq.two_le</span><span class=\"o\">])</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">hapos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.pos_iff_ne_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_dvd_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hadvd</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hanek</span> <span class=\"n\">hadvd.symm</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_div_cancel'</span> <span class=\"n\">hadvd</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">_</span> <span class=\"n\">hane1.symm</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_le_iff</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hadvd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hp.two_le</span><span class=\"o\">,</span> <span class=\"n\">hq.two_le</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel</span> <span class=\"n\">_</span> <span class=\"n\">hapos</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_ne</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">nat.succ_le_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.pos_iff_ne_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hanek</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hanek</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216688167,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605310199
    },
    {
        "content": "<p>Hmm my lean server crashed...</p>",
        "id": 216688422,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310360
    },
    {
        "content": "<p>Where's the 1 &lt; a proof?</p>",
        "id": 216688434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310365
    },
    {
        "content": "<p>it's difficult to follow the spoiler solution because no indents. Style point: the question should say <code>1 &lt; a \\and ...</code>, not <code>a &gt; 1</code>.</p>",
        "id": 216688504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310419
    },
    {
        "content": "<p>I'm done!</p>",
        "id": 216688600,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310463
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">solution</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_lt_q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">q_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">consecutive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.not_even_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">oq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.not_even_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hq.eq_two_or_odd.resolve_left</span> <span class=\"n\">q_ne_two</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">epq</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.even_add</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">op</span><span class=\"o\">,</span> <span class=\"n\">oq</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">even_iff_two_dvd</span> <span class=\"n\">at</span> <span class=\"n\">epq</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">epq</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">compd</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">consecutive</span><span class=\"bp\">;</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">nat.prime.two_le</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">d0</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">nat.exists_dvd_of_not_prime</span> <span class=\"n\">d2</span> <span class=\"n\">compd</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn1</span><span class=\"o\">,</span> <span class=\"n\">hn2</span><span class=\"o\">,</span> <span class=\"n\">hn3</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">npos</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pos_of_dvd_of_pos</span> <span class=\"n\">hn1</span> <span class=\"n\">d0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">nltd</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">d0</span> <span class=\"n\">hn1</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"bp\">;</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">npos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">,</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216688601,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310465
    },
    {
        "content": "<p>ctrl-shift-p and type \"Lean : restart\" to restart lean after a crash</p>",
        "id": 216688615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310478
    },
    {
        "content": "<p>(in VS Code, if you're using emacs you're on your own)</p>",
        "id": 216688632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310488
    },
    {
        "content": "<p>Would very much appreciate feedback on how making this less sprawling, although happily I do have indents.</p>",
        "id": 216688635,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Primes.20and.20modular.20arithmetic.2E/near/216685542\">said</a>:</p>\n<blockquote>\n<p>I genuinely don't know what you can put after <code>omega</code>, I only use it as a standalone tactic and I don't understand parsers well enough to know what <code>id*</code> means</p>\n</blockquote>\n<p>It means it takes 0 or more identifiers. For example, <code>omega h1 h2</code></p>",
        "id": 216688647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310501
    },
    {
        "content": "<p>I'm using VS Code, because emacs scares me.</p>",
        "id": 216688652,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310504
    },
    {
        "content": "<p>I don't know from that what the identifiers mean, though</p>",
        "id": 216688689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310527
    },
    {
        "content": "<p>but I couldn't get <code>omega (f h)</code> to work -- should I have been able to?</p>",
        "id": 216688701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310535
    },
    {
        "content": "<p>no</p>",
        "id": 216688710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310540
    },
    {
        "content": "<p><code>id</code> means an identifier or name, not an expression</p>",
        "id": 216688729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310553
    },
    {
        "content": "<p>oh, f h is not an identifier?</p>",
        "id": 216688733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310557
    },
    {
        "content": "<p>but f and h are?</p>",
        "id": 216688775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310564
    },
    {
        "content": "<p><code>f h</code> is two identifiers, <code>(f h)</code> is an expression</p>",
        "id": 216688801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310570
    },
    {
        "content": "<p><code>f h</code> is also an expression</p>",
        "id": 216688816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310580
    },
    {
        "content": "<p>Hmm, can't nest code in the spoiler tag, but since you're done as well, I just opened it up</p>",
        "id": 216688854,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605310603
    },
    {
        "content": "<p>that was what was confusing me.</p>",
        "id": 216688867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310609
    },
    {
        "content": "<p>an identifier is a sequence of letters and underscores</p>",
        "id": 216688869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310612
    },
    {
        "content": "<p>and dots</p>",
        "id": 216688875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310619
    },
    {
        "content": "<p>Can you quote code in the spoiler tag? I think spoilers are new to Zulip</p>",
        "id": 216688892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310628
    },
    {
        "content": "<p>pretty sure</p>",
        "id": 216688915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310642
    },
    {
        "content": "<p>I think my code would look pretty much the same as Ruben's or Wrenna's, except Wrenna I'd indent 2 spaces not 4.</p>",
        "id": 216689105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310759
    },
    {
        "content": "<p>Yes that is that I haven't changed the setting in VS code.</p>",
        "id": 216689132,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Primes.20and.20modular.20arithmetic.2E/near/216686954\">said</a>:</p>\n<blockquote>\n<p><code>rcases ('?' expr (: n)?) | ((h :)? expr (with patt)?)</code> should answer all your questions</p>\n</blockquote>\n<p>This says that <code>rcases</code> takes either a <code>?</code> followed by an expression, followed by optionally a colon and a number, i.e. <code>rcases? (f x)</code> or <code>rcases? f x : 5</code>, or an optional variable and a colon, followed by an expression, optionally followed by <code>with</code> and a pattern, like <code>rcases h : e with &lt;&gt;</code> or <code>rcases e with &lt;a, b, c&gt;</code></p>",
        "id": 216689208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310812
    },
    {
        "content": "<p>these things are fiddly. Did you say it was a kata? You should both post your solutions and see if any of the CS whizzes had a go at it.</p>",
        "id": 216689209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310812
    },
    {
        "content": "<p>Presumably there is some way to tell it to do two spaces for Lean files.</p>",
        "id": 216689211,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310813
    },
    {
        "content": "<p>Yeah it was. I'm just doing some basic tidying up.</p>",
        "id": 216689232,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310834
    },
    {
        "content": "<p>the syntax of patterns is not specified there because it is recursive and the notation kind of breaks down</p>",
        "id": 216689252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310846
    },
    {
        "content": "<p>That was going to be my next question :-)</p>",
        "id": 216689273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310858
    },
    {
        "content": "<p>For a pattern like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.not_even_iff</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n</code></pre></div>\n<p>Is there a one-liner way of doing it? \"have some goal, by re-writing the goal and then having it exactly\"</p>",
        "id": 216689280,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310864
    },
    {
        "content": "<p>instead of <code>rw h</code> you might well be able to just use the function <code>h.1</code> directly.</p>",
        "id": 216689327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310902
    },
    {
        "content": "<p>you can find it in the docs for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.rcases_patt_parse\">docs#tactic.rcases_patt_parse</a> though, in pseudo BNF style</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">patt</span> <span class=\"o\">::=</span> <span class=\"n\">patt_med</span> <span class=\"o\">(</span><span class=\"s2\">\":\"</span> <span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n<span class=\"n\">patt_med</span> <span class=\"o\">::=</span> <span class=\"o\">(</span><span class=\"n\">patt_hi</span> <span class=\"s2\">\"|\"</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">patt_hi</span>\n<span class=\"n\">patt_hi</span> <span class=\"o\">::=</span> <span class=\"n\">id</span> <span class=\"bp\">|</span> <span class=\"s2\">\"rfl\"</span> <span class=\"bp\">|</span> <span class=\"s2\">\"_\"</span> <span class=\"bp\">|</span> <span class=\"s2\">\"⟨\"</span> <span class=\"o\">(</span><span class=\"n\">patt</span> <span class=\"s2\">\",\"</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"n\">patt</span> <span class=\"s2\">\"⟩\"</span> <span class=\"bp\">|</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">patt</span> <span class=\"s2\">\")\"</span>\n</code></pre></div>",
        "id": 216689336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605310910
    },
    {
        "content": "<p><code>have op : ¬ even p := nat.not_even_iff.1 (hp.eq_two_or_odd.resolve_left p_ne_two),</code> or something like that should work</p>",
        "id": 216689457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605310971
    },
    {
        "content": "<p>Sadly not.</p>",
        "id": 216689488,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605310997
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">nat.not_even_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">¬</span><span class=\"n\">even</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 216689509,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311009
    },
    {
        "content": "<p><code>mpr</code>?</p>",
        "id": 216689526,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605311025
    },
    {
        "content": "<p>Looks like I should've tried throwing omega at more subgoals</p>",
        "id": 216689535,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605311034
    },
    {
        "content": "<p>then it would be rw \\l</p>",
        "id": 216689538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311035
    },
    {
        "content": "<p>no you're right</p>",
        "id": 216689594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311050
    },
    {
        "content": "<p>mpr?</p>",
        "id": 216689600,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311056
    },
    {
        "content": "<p>try <code>.2</code></p>",
        "id": 216689602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311059
    },
    {
        "content": "<p>or <code>.mpr</code>. If <code>h : a &lt;-&gt; b</code> then internally h is a pair of proofs, <code>h.1 : a -&gt; b</code> and <code>h.2 : b -&gt; a</code></p>",
        "id": 216689640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311099
    },
    {
        "content": "<p>Right.</p>",
        "id": 216689653,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311112
    },
    {
        "content": "<p>.mpr is a mnemonic of some kind?</p>",
        "id": 216689665,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311121
    },
    {
        "content": "<p>and <code>h.mp</code> is the same as <code>h.1</code> and <code>h.mpr</code> is the same as <code>h.2</code>. I think Ruben's suggestion should work.</p>",
        "id": 216689668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311123
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nat.not_even_iff.2</span> <span class=\"o\">(</span><span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 216689669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605311123
    },
    {
        "content": "<p>Modus ponens reverse</p>",
        "id": 216689676,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605311132
    },
    {
        "content": "<p>\"modus ponens reversed\" or something?</p>",
        "id": 216689679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311134
    },
    {
        "content": "<p>Right.</p>",
        "id": 216689684,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311137
    },
    {
        "content": "<p><code>omega</code> is great for nat goals because some stuff is so fiddly with nat. There are so many stupid things like <code>a + b - a = b</code> which are more painful than you think because of natural subtraction.</p>",
        "id": 216689801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311194
    },
    {
        "content": "<p>After a while the naming convention can't handle it all so you have to rely more on memory or search skillz</p>",
        "id": 216689846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311221
    },
    {
        "content": "<p>is that add_sub_self or what?</p>",
        "id": 216689884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311246
    },
    {
        "content": "<p>naming is going to become even harder as we get more and more lemmas. i think we are going to need a better <code>library_search</code> &amp; i hope lean 4 enables that</p>",
        "id": 216689898,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1605311254
    },
    {
        "content": "<p>Can we do a similar one-liner trick for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">have</span> <span class=\"n\">compd</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">consecutive</span><span class=\"bp\">;</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 216689911,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311260
    },
    {
        "content": "<p><code>:= consecutive (by omega)</code>?</p>",
        "id": 216689950,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311282
    },
    {
        "content": "<p>No.</p>",
        "id": 216689985,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311293
    },
    {
        "content": "<p>something like that could well work</p>",
        "id": 216689987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311293
    },
    {
        "content": "<p>you should be able to get it to work somehow</p>",
        "id": 216689998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311303
    },
    {
        "content": "<p>It needs two <code>(by omega)</code>s</p>",
        "id": 216689999,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605311305
    },
    {
        "content": "<p>got it</p>",
        "id": 216690020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311317
    },
    {
        "content": "<p>hence the semicolon</p>",
        "id": 216690035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311336
    },
    {
        "content": "<p>So with <code>have compd : ¬ nat.prime d := consecutive (by omega) (by omega),</code> I get <code>Cannot reify expr :  ℕ</code></p>",
        "id": 216690043,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311340
    },
    {
        "content": "<p>Which is a bit mysterious.</p>",
        "id": 216690050,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311346
    },
    {
        "content": "<p>what is the type of <code>consecutive</code>? <code>apply</code> is quite clever.</p>",
        "id": 216690076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311361
    },
    {
        "content": "<p>you might need to add some <code>_</code>s in</p>",
        "id": 216690093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311372
    },
    {
        "content": "<p><code>∀ (k : ℕ), p &lt; k → k &lt; q → ¬nat.prime k</code></p>",
        "id": 216690094,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311373
    },
    {
        "content": "<p>so try <code>consecutive _ (by omega) (by omega)</code></p>",
        "id": 216690121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311393
    },
    {
        "content": "<p>Yep</p>",
        "id": 216690131,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311398
    },
    {
        "content": "<p><code>apply</code> figured out the natural input by itself.</p>",
        "id": 216690178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311410
    },
    {
        "content": "<p>Magic.</p>",
        "id": 216690188,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311419
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nat.not_even_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">oq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">nat.not_even_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">hq.eq_two_or_odd.resolve_left</span> <span class=\"n\">q_ne_two</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">epq</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.even_add.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">op</span><span class=\"o\">,</span> <span class=\"n\">oq</span><span class=\"o\">]),</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">even_iff_two_dvd.mpr</span> <span class=\"n\">epq</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">compd</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">consecutive</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">nat.prime.two_le</span> <span class=\"n\">hp</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">d0</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">nat.exists_dvd_of_not_prime</span> <span class=\"n\">d2</span> <span class=\"n\">compd</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn1</span><span class=\"o\">,</span> <span class=\"n\">hn2</span><span class=\"o\">,</span> <span class=\"n\">hn3</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">npos</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pos_of_dvd_of_pos</span> <span class=\"n\">hn1</span> <span class=\"n\">d0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">nltd</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">d0</span> <span class=\"n\">hn1</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"bp\">;</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">npos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">,</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216690192,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311422
    },
    {
        "content": "<p>This is looking very respectable.</p>",
        "id": 216690198,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311428
    },
    {
        "content": "<p>Oh bother. It looks like the version of Lean on Codewars doesn't like it.</p>",
        "id": 216690292,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311505
    },
    {
        "content": "<p>Something to do with the even.</p>",
        "id": 216690301,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311512
    },
    {
        "content": "<p>Here's my full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.modeq</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.parity</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">solution</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_lt_q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">q_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">consecutive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nat.not_even_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">oq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">nat.not_even_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">hq.eq_two_or_odd.resolve_left</span> <span class=\"n\">q_ne_two</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">epq</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.even_add.mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">op</span><span class=\"o\">,</span> <span class=\"n\">oq</span><span class=\"o\">]),</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"o\">(</span><span class=\"n\">even_iff_two_dvd.mpr</span> <span class=\"n\">epq</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">compd</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">consecutive</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">nat.prime.two_le</span> <span class=\"n\">hp</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">d0</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">nat.exists_dvd_of_not_prime</span> <span class=\"n\">d2</span> <span class=\"n\">compd</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn1</span><span class=\"o\">,</span> <span class=\"n\">hn2</span><span class=\"o\">,</span> <span class=\"n\">hn3</span><span class=\"o\">⟩,</span>\n    <span class=\"k\">have</span> <span class=\"n\">npos</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pos_of_dvd_of_pos</span> <span class=\"n\">hn1</span> <span class=\"n\">d0</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">nltd</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">d0</span> <span class=\"n\">hn1</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"bp\">;</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">omega</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">npos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span><span class=\"o\">,</span>\n        <span class=\"n\">omega</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216690367,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311534
    },
    {
        "content": "<p>When i do codewars I use a custom repo with precisely the version of lean and mathlib supported by codewars at that time</p>",
        "id": 216690409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311561
    },
    {
        "content": "<p>Try <code>nat.even</code></p>",
        "id": 216690441,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605311585
    },
    {
        "content": "<p>There was some refactoring there recently</p>",
        "id": 216690469,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605311611
    },
    {
        "content": "<p>\"unknown identifier 'nat.even'\" on my local copy.</p>",
        "id": 216690536,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311645
    },
    {
        "content": "<p>If you're using a version of lean/mathlib which is not the same as the codewars one then you can't expect to get a piece of code which compiles both locally and on codewars.</p>",
        "id": 216690588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311691
    },
    {
        "content": "<p>Yes.</p>",
        "id": 216690595,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311697
    },
    {
        "content": "<p>Lean is not backwards compatible</p>",
        "id": 216690607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311702
    },
    {
        "content": "<p>Aye. Some progress on CodeWars using that, but even_iff_two_dvd (or nat.even_iff_two_dvd) is unrecognised - I don't know if the name of it changed.</p>",
        "id": 216690761,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311792
    },
    {
        "content": "<p>Here's my version of the compression pass:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">solution</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">nat.prime</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_lt_q</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">q_ne_two</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">consecutive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">nat.not_even_iff.2</span> <span class=\"o\">(</span><span class=\"n\">hp.eq_two_or_odd.resolve_left</span> <span class=\"n\">p_ne_two</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">oq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">even</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">nat.not_even_iff.2</span> <span class=\"o\">(</span><span class=\"n\">hq.eq_two_or_odd.resolve_left</span> <span class=\"n\">q_ne_two</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">epq</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.even_add.2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">op</span><span class=\"o\">]),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">even_iff_two_dvd</span> <span class=\"n\">at</span> <span class=\"n\">epq</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">exists_eq_mul_right_of_dvd</span> <span class=\"n\">epq</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">compd</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">nat.prime</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">consecutive</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">hp.two_le</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">d0</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">d2</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">nat.exists_dvd_of_not_prime</span> <span class=\"n\">d2</span> <span class=\"n\">compd</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn1</span><span class=\"o\">,</span> <span class=\"n\">hn2</span><span class=\"o\">,</span> <span class=\"n\">hn3</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">npos</span> <span class=\"o\">:=</span> <span class=\"n\">nat.pos_of_dvd_of_pos</span> <span class=\"n\">hn1</span> <span class=\"n\">d0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">nltd</span> <span class=\"o\">:=</span> <span class=\"n\">nat.le_of_dvd</span> <span class=\"n\">d0</span> <span class=\"n\">hn1</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat.mul_div_cancel'</span> <span class=\"n\">hn1</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">npos</span> <span class=\"n\">hn2.symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">npos</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nat.mul_div_cancel'</span> <span class=\"n\">hn1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">nltd</span> <span class=\"n\">hn3</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216690828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605311843
    },
    {
        "content": "<p>honestly the way to fix this is to make a project with the same version of lean and mathlib as codewars. They say explicitly what version they're running. It's impossible to second-guess what has changed in the interim.</p>",
        "id": 216690842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311862
    },
    {
        "content": "<p>Right.</p>",
        "id": 216690852,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311873
    },
    {
        "content": "<p>I also removed all the <code>omega</code> calls because <code>omega</code> is slow</p>",
        "id": 216690857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605311877
    },
    {
        "content": "<p>Try replacing <code>(even_iff_two_dvd.mpr epq)</code> by <code>epq</code>, I think it'll be fine definitionally</p>",
        "id": 216690862,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605311882
    },
    {
        "content": "<p>and you don't need <code>omega</code> to prove <code>1 &lt; 2</code></p>",
        "id": 216690904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605311890
    },
    {
        "content": "<p><code>linarith</code></p>",
        "id": 216690911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311900
    },
    {
        "content": "<p><code>lt_add_one</code></p>",
        "id": 216690918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311907
    },
    {
        "content": "<p>one_lt_two</p>",
        "id": 216690923,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605311910
    },
    {
        "content": "<p>lol does that work for 3 &lt; 37?</p>",
        "id": 216690933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311921
    },
    {
        "content": "<p><code>dec_trivial</code></p>",
        "id": 216690944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311931
    },
    {
        "content": "<p>:(</p>",
        "id": 216690966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605311951
    },
    {
        "content": "<p>Maybe <code>le_refl _</code> works?</p>",
        "id": 216690967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311952
    },
    {
        "content": "<p>no one loves my baby</p>",
        "id": 216690980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605311966
    },
    {
        "content": "<p>Or nat.le.intro or something like that? <code>suggest</code> tends to come up with that</p>",
        "id": 216690990,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605311972
    },
    {
        "content": "<p>:-)</p>",
        "id": 216691012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605311990
    },
    {
        "content": "<p>Replacing epq worked with some prodding. Lesson learned about setting up a project right...</p>",
        "id": 216691018,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605311998
    },
    {
        "content": "<p>Mario wrote <code>norm_num</code> precisely to solve goals like this (3 &lt; 37 etc)</p>",
        "id": 216691065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605312006
    },
    {
        "content": "<p><code>linarith</code> is good for inequalities with variables but when there's only numbers, <code>norm_num</code> works.</p>",
        "id": 216691145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605312046
    },
    {
        "content": "<p>Your baby was what convinced me not to give up! Remember in 2017 when i couldn't do anything?</p>",
        "id": 216691181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605312071
    },
    {
        "content": "<p>Plenty of options in any case</p>",
        "id": 216691191,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605312089
    },
    {
        "content": "<p>Q1 on my first example sheet needed a proof that (1 : real) != 2 and there was no way of doing it :-)</p>",
        "id": 216691195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605312092
    },
    {
        "content": "<p>Not quite sure I understand <code>simpa</code>.</p>",
        "id": 216691253,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605312124
    },
    {
        "content": "<p>Mario can tell you what that does too.</p>",
        "id": 216691267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605312140
    },
    {
        "content": "<p>It does something like: simplify all goals and assumptions, and then try closing the goal with <code>assumption</code></p>",
        "id": 216691283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605312160
    },
    {
        "content": "<p><code>simpa using h</code> = <code>simp at h |-; exact h</code></p>",
        "id": 216691288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605312167
    },
    {
        "content": "<p>so it works if an assumption and a goal simplify to the same thing</p>",
        "id": 216691295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605312176
    },
    {
        "content": "<p>Right!</p>",
        "id": 216691300,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605312184
    },
    {
        "content": "<p><code>refine</code> is nice.</p>",
        "id": 216691451,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605312316
    },
    {
        "content": "<p>In <code>{ exact lt_of_le_of_ne npos hn2.symm }</code>, npos is of type n &gt; 0, and lt_of_le_of_ne is expecting 1 &lt;= n in that spot. So 1 &lt;= n is definitionally equal to n &gt; 0?</p>",
        "id": 216691667,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605312553
    },
    {
        "content": "<p>Wew! Alright. Thank you all - this has been a really great learning experience.</p>",
        "id": 216691921,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605312839
    },
    {
        "content": "<p>Also how is it 00:14... I guess when the focus hole hits.</p>",
        "id": 216691979,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605312858
    },
    {
        "content": "<p>what better way to spend a Friday night in lockdown.</p>",
        "id": 216692188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605313117
    },
    {
        "content": "<p>Well done to both of you!</p>",
        "id": 216692215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605313146
    },
    {
        "content": "<p>Ha, yes, of course, I certainly wouldn't spend a Friday night in normal times on my computer doing compuscimaths &lt;_&lt;</p>",
        "id": 216692833,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605313785
    },
    {
        "content": "<p>By the way I have a discord server which currently has 3 Imperial UGs and a Cambridge UG solving basic analysis questions in Lean, live streaming and chatting, right now.</p>",
        "id": 216692944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605313871
    },
    {
        "content": "<p>Ooh.</p>",
        "id": 216692961,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605313883
    },
    {
        "content": "<p>voice chat -- the one thing zulip doesn't offer</p>",
        "id": 216692969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605313889
    },
    {
        "content": "<p>Yes! I really like zulip o/w.</p>",
        "id": 216693032,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605313928
    },
    {
        "content": "<p>We used it for our first year project vivas - topic per talk, could field questions during other talks.</p>",
        "id": 216693049,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605313946
    },
    {
        "content": "<p>It works like my mind works - that is, multi-stranded.</p>",
        "id": 216693056,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605313954
    },
    {
        "content": "<p>(...I would be super interested in listening in...)</p>",
        "id": 216693121,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605314028
    },
    {
        "content": "<p>I DM'ed you a link</p>",
        "id": 216693219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605314099
    },
    {
        "content": "<p>anyone is welcome, but I don't advertise the links publically any more</p>",
        "id": 216693240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605314118
    },
    {
        "content": "<p>So you did! Thank you.</p>",
        "id": 216693292,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1605314160
    }
]