[
    {
        "content": "<p>I have some code that at some point I need to deal with the mwe3 theorem below.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mwe3</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">int.of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">int.of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">int.of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>When I try to apply <code>right_distrib</code> to I think <code>int.of_nat (1 + x) * int.of_nat (1 + x)</code></p>\n<p>it fails with the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m_6</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">int.of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">int.of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">int.of_nat</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think it is becouse the int.of_nat, that the mathc does not occur. How I deal witht he int.of_nat?</p>\n<hr>\n<p>I'm toying with Lean/mathlib, trying to prove that for all integers the square is equal or greater than itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">example_1_5_1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≥</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">rewrite</span>  <span class=\"n\">pow_two</span><span class=\"o\">,</span>\n<span class=\"c1\">-- split in negative and non negative</span>\n<span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"c1\">-- split in 0 and positive</span>\n<span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n\n<span class=\"c1\">-- we prove fist the 0 case</span>\n<span class=\"n\">case</span> <span class=\"n\">int.of_nat</span> <span class=\"n\">nat.zero</span>\n<span class=\"o\">{</span>\n<span class=\"n\">apply</span> <span class=\"n\">ge_of_eq</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n\n<span class=\"c1\">-- Then the a &gt; 0 case</span>\n<span class=\"n\">case</span> <span class=\"n\">int.of_nat</span> <span class=\"n\">nat.succ</span>\n<span class=\"o\">{</span>\n<span class=\"n\">rw</span>  <span class=\"n\">nat.succ_eq_one_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n\n<span class=\"c1\">-- Last we prove a &lt; 0 case</span>\n<span class=\"n\">case</span> <span class=\"n\">int.neg_succ_of_nat</span>\n<span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">},</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The problem is at the first <code>sorry</code>.</p>\n<p>Thanks!</p>",
        "id": 288427178,
        "sender_full_name": "Angel Joaniquet",
        "timestamp": 1656951642
    },
    {
        "content": "<p>You should look for a lemma that says <code>int.of_nat (1 + x) = int.of_nat 1 + int.of_nat x</code></p>",
        "id": 288427263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656951714
    },
    {
        "content": "<p>If you know the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> rules (that's a link), your first guess should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.of_nat_add\">docs#int.of_nat_add</a> (as it's <code>of_nat</code> applied to <code>add</code>)</p>",
        "id": 288427330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656951738
    },
    {
        "content": "<p>Which sure enough, is exactly the lemma you need!</p>",
        "id": 288427363,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656951764
    },
    {
        "content": "<p>Woow, fast. I'll check it now.</p>\n<p>And is there a way to rewrite the int.of_nat?,  to  decluter the interface</p>",
        "id": 288427575,
        "sender_full_name": "Angel Joaniquet",
        "timestamp": 1656951880
    },
    {
        "content": "<p>The preferred spelling of <code>int.of_nat n</code> is usually <code>coe n</code> aka <code>(↑n : int)</code>, which the interfaces will print with even less clutter</p>",
        "id": 288427755,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656951987
    },
    {
        "content": "<p>Then you'll need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.coe_nat_add\">docs#int.coe_nat_add</a> instead</p>",
        "id": 288427782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656952008
    },
    {
        "content": "<p>thanks again!</p>",
        "id": 288428027,
        "sender_full_name": "Angel Joaniquet",
        "timestamp": 1656952158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"512098\">Angel Joaniquet</span> has marked this topic as resolved.</p>",
        "id": 288428032,
        "sender_full_name": "Notification Bot",
        "timestamp": 1656952160
    },
    {
        "content": "<p>I would say that using <code>cases</code> on an <code>int</code> is \"unmathematical\". It exposes the implementation of <code>int</code> which is not really what you want to do, not least because you then end up with all this <code>int.of_nat</code> nonsense which is supposed to be hidden.</p>",
        "id": 288428033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656952162
    },
    {
        "content": "<p>Why not do <code>rcases lt_trichotomy x 0 with (hx | rfl | hx)</code> instead?</p>",
        "id": 288428112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656952204
    },
    {
        "content": "<p>Then you never see the clutter at all.</p>",
        "id": 288428173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656952229
    },
    {
        "content": "<p>Using <code>coe</code> instead of <code>int.of_nat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mwe3</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- goal is ⊢ (1 + ↑x) * (1 + ↑x) ≥ 1 + ↑x</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal is ⊢ 1 + x ≤ (1 + x) * (1 + x)</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.le_mul_self</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288428214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656952263
    },
    {
        "content": "<p>(Note that greater-than is defined in terms of less-than, hence <code>nat.le_mul_self</code> being able to solve it.)</p>",
        "id": 288428281,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656952317
    },
    {
        "content": "<p>Because I did not know the existence of this construction.</p>\n<p>Thanks trice or  four-ice.</p>",
        "id": 288428408,
        "sender_full_name": "Angel Joaniquet",
        "timestamp": 1656952397
    },
    {
        "content": "<p>If you're doing this as an exercise, proving <code>nat.le_mul_self</code> yourself might be a good thing to do this point.</p>\n<p>By the way, <code>theorem example_1_5_1 (x : int) : x^2 ≥ x := int.le_self_sq x</code></p>",
        "id": 288428429,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656952411
    },
    {
        "content": "<p>My objective is follow as closely as I can the proofs in Chapter Zero (Carol Schumacher), with Lean.  My objective isn't to be as efficient as possible. Yet. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<p>It is the first proof.</p>",
        "id": 288428670,
        "sender_full_name": "Angel Joaniquet",
        "timestamp": 1656952565
    },
    {
        "content": "<p>rcases is perfect.</p>",
        "id": 288429137,
        "sender_full_name": "Angel Joaniquet",
        "timestamp": 1656952874
    },
    {
        "content": "<p>Yeah, you never want to break up an int into the two cases, not least because the second constructor is horrible!</p>",
        "id": 288431463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656954571
    },
    {
        "content": "<p>I find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.eq_coe_or_neg\">docs#int.eq_coe_or_neg</a> is almost always what I want, as <code>obtain ⟨n, rfl | rfl⟩ := z.eq_coe_or_neg</code></p>",
        "id": 288457478,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656973998
    },
    {
        "content": "<p>oh man I would far rather have an integer than a natural, I think! That's why I suggested the trichotomy approach.</p>",
        "id": 288457560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656974086
    },
    {
        "content": "<p>I guess I usually find myself proving the integer version in terms of the natural version and some property of negation; you're right that in a more general situation an integer is likely more useful.</p>",
        "id": 288507444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657016877
    }
]