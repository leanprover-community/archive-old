[
    {
        "content": "<p>I was wondering if there is a tactic that takes care of cancelling and dividing over the integers. For example, a tactic that would solve the following examples (the first only accepted <code>field_simp</code> after the manipulation):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span><span class=\"n\">field_simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span>  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a0</span><span class=\"o\">:</span><span class=\"n\">a</span><span class=\"bp\">≠</span>  <span class=\"mi\">0</span><span class=\"o\">)(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">=</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">mul_right_inj'</span> <span class=\"n\">a0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 308032425,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1667589308
    },
    {
        "content": "<p>I think <code>field_simp; ring</code> shouuld solve such things</p>",
        "id": 308032539,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667589353
    },
    {
        "content": "<p>oh it's in Z</p>",
        "id": 308032631,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667589380
    },
    {
        "content": "<p>Has ratify (qify?) landed?</p>",
        "id": 308032716,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1667589424
    },
    {
        "content": "<p>division in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> can behave in unexpected ways</p>",
        "id": 308032733,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667589431
    },
    {
        "content": "<p>I'm a bit surprised that <code>field_simp</code> makes any progress at all!</p>",
        "id": 308032881,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1667589494
    },
    {
        "content": "<p>I usually deal with division by using a high-powered tactic like <code>ring</code> to rearrange the term into a form where a cancelling lemma like <code>mul_div_cancel</code> applies. For example here I would do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">int.mul_div_cancel</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I like this approach because you somehow don't have to move your brain to deal with the problem.</p>",
        "id": 308040572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667592574
    },
    {
        "content": "<p>I see. I'll try to do more stuff like that in the future.</p>",
        "id": 308041561,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1667592958
    }
]