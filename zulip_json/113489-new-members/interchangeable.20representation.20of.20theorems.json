[
    {
        "content": "<p><a href=\"/user_uploads/3121/CxdbVfmmV8u7QViuloUBcIoV/image.png\">world 8 level 11 and 12</a> gives different representation of almost the same theorems. I understand the second one but not the first. From a HoTT perspective, if I understand correctly, every theorem is an inhabited type. With the second representation (<code>add_right_eq_zero</code>), the type of the theorem is  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>0</mn><mo>→</mo><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\"> a + b = 0 \\rightarrow a = 0 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>. What is the type in the first case?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/CxdbVfmmV8u7QViuloUBcIoV/image.png\" title=\"world 8 level 11 and 12\"><img src=\"/user_uploads/3121/CxdbVfmmV8u7QViuloUBcIoV/image.png\"></a></div>",
        "id": 270942743,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644220267
    },
    {
        "content": "<p>The same (modulo the switch from a to b) -- it makes no difference to the type whether you put arguments before or after the colon</p>",
        "id": 270942984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644220448
    },
    {
        "content": "<p>I think it's just unrigorous typesetting in the theorems column...becuase if I go to level 11, I can see the expected version <a href=\"/user_uploads/3121/NR2fTlkEmI7zceE3mHIHy7pK/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/NR2fTlkEmI7zceE3mHIHy7pK/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/NR2fTlkEmI7zceE3mHIHy7pK/image.png\"></a></div>",
        "id": 270942992,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644220457
    },
    {
        "content": "<p>Yeah, I did it all by hand</p>",
        "id": 270943011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644220475
    },
    {
        "content": "<p>The actual type is Pi a : nat, Pi b : nat, Pi a + b = 0, a = 0.</p>",
        "id": 270943094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644220558
    },
    {
        "content": "<p>That is, you can move the a and b after the colon too (and indeed this is what you'll see if you just type end in NNG (dropping you back into term mode) and then try things like <code>#check @add_right_eq_zero</code></p>",
        "id": 270943208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644220634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/interchangeable.20representation.20of.20theorems/near/270943094\">said</a>:</p>\n<blockquote>\n<p>The actual type is Pi a : nat, Pi b : nat, Pi a + b = 0, a = 0.</p>\n</blockquote>\n<p>I see you lied when you said you were clueless in HoTT <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 270943217,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644220643
    },
    {
        "content": "<p>This is lean</p>",
        "id": 270943229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644220654
    },
    {
        "content": "<p>Lean has pi types. I don't know anything about univalence</p>",
        "id": 270943252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644220676
    },
    {
        "content": "<p>ahhh you should read the first chapter of the HoTT book! The pi types are covered 30 pages in and it doesn't need any univalence theorem. Actually they seem quite alike to how they are represented in Lean so you are probablly all good <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 270943509,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644220811
    },
    {
        "content": "<p>I did</p>",
        "id": 270943786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644221001
    },
    {
        "content": "<p>But I didn't read any more after that</p>",
        "id": 270943801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644221014
    },
    {
        "content": "<p>Matt, I think you call HoTT anything which is dependent type theory. This is why people are confused.</p>",
        "id": 270943996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644221147
    },
    {
        "content": "<p>The same confusion would be present if you start calling \"local class field theory\" anything involving any kind of algebraic structure.</p>",
        "id": 270944076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644221196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/interchangeable.20representation.20of.20theorems/near/270943996\">said</a>:</p>\n<blockquote>\n<p>Matt, I think you call HoTT anything which is dependent type theory. This is why people are confused.</p>\n</blockquote>\n<p>sorry I just learned the dependent types and was too excited to see a Pi</p>",
        "id": 270944435,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644221458
    }
]