[
    {
        "content": "<p>Am I defining this notation wrong? It seems like maybe it is interfering with the notation for lists?<br>\n<a href=\"/user_uploads/3121/E6C0-PCqrC4FLaW9Ws08EIb4/Screenshot-from-2022-05-23-20-49-49.png\">Screenshot-from-2022-05-23-20-49-49.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/E6C0-PCqrC4FLaW9Ws08EIb4/Screenshot-from-2022-05-23-20-49-49.png\" title=\"Screenshot-from-2022-05-23-20-49-49.png\"><img src=\"/user_uploads/3121/E6C0-PCqrC4FLaW9Ws08EIb4/Screenshot-from-2022-05-23-20-49-49.png\"></a></div>",
        "id": 283694716,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1653364353
    },
    {
        "content": "<p>Could you post a code block rather than a screenshot? You could also post the URL of the web editor, since it includes the contents of the text area.</p>",
        "id": 283694908,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653364599
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20logic.function.basic%0A%0A%23check%20%5B%20%22x%22%20%5D%0Anotation%20%20%60%5B%60%20a'%20%60%E2%86%A6%60%20v%20%60%5D%60%20f%20%3A%3D%20function.update%20f%20a'%20v%0A%23check%20%5B%20%22x%22%20%5D\">https://leanprover-community.github.io/lean-web-editor/#code=import%20logic.function.basic%0A%0A%23check%20%5B%20%22x%22%20%5D%0Anotation%20%20%60%5B%60%20a'%20%60%E2%86%A6%60%20v%20%60%5D%60%20f%20%3A%3D%20function.update%20f%20a'%20v%0A%23check%20%5B%20%22x%22%20%5D</a></p>",
        "id": 283694931,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1653364636
    },
    {
        "content": "<p>I wasn't sure how to escape the backticks in zulip.</p>",
        "id": 283694954,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1653364677
    },
    {
        "content": "<p>I guess they show up if I put them in a code block.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.function.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">[</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">]</span>\n<span class=\"kd\">notation</span>  <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">a'</span> <span class=\"bp\">`↦`</span> <span class=\"n\">v</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">function.update</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"n\">v</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span> <span class=\"s2\">\"x\"</span> <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 283695034,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1653364782
    },
    {
        "content": "<p>Thanks for the code block. I think you're right that it's interfering with list notation. That's defined using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span> <span class=\"n\">l</span><span class=\"o\">:(</span><span class=\"n\">foldr</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">list.cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">list.nil</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">l</span>\n</code></pre></div>\n<p>and it seems likely that the parser wouldn't be able to disambiguate between your notation and this <code>foldr</code> pattern.</p>",
        "id": 283695658,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653365558
    },
    {
        "content": "<p>Here's a potential workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"bp\">↦</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">function.update</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">v</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">↦</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- 0</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">↦</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- 3</span>\n</code></pre></div>",
        "id": 283695785,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653365752
    },
    {
        "content": "<p>I set the precedence of the arrow to 25 just because that's the precedence of implication.</p>",
        "id": 283695841,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653365789
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 283695978,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1653365993
    }
]