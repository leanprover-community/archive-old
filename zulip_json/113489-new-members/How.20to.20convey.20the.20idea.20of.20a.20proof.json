[
    {
        "content": "<p>When developing in idea, I often find it equally if not more important for my partners to have an intuition for how the theory works than the technical details how it's proved.</p>\n<p>And  I was wondering how you go about making proof intelligible.  Specifically how would you go about not bogging down the reader with trivialities but provide enough detail that it's possible follow what's actually going on? </p>\n<p>E.g. I certainly don't care that you use the left introduction rule for  a disjunction or that you used the iff elimination. But it might be interesting that you show this by functional extensionality, that you use x in a universal quantifier because of a diagonalization argument or that we \"show the forward direction using continuity\".</p>\n<p>I see at least a few various options:</p>\n<ul>\n<li>just not care, since it's machine-checked, we know it's correct, so we may as well not bother if others understand it</li>\n<li>break the proofs into lemmas that are somehow semi-meaningful and try to string them together in a way that convey the idea if not the details of the proof.</li>\n<li>format the proof in some clever way.</li>\n</ul>\n<p>A few observations: </p>\n<ul>\n<li>pure term-level proofs are virtually unintelligible. When I see them, it tells me \"don't worry about this; it's true, but you won't learn anything studying it\".</li>\n<li>term-level proofs have no proof state visible in the IDE, so that makes them potentially more difficult to follow than tactic proofs.</li>\n<li>pure tactic chains are amazing to study the steps in an IDE but are completely meaningless without it.</li>\n</ul>\n<p>If you want me to give an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, what would you like to see?</p>",
        "id": 199521825,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117051
    },
    {
        "content": "<p>What I write in a proof depends on (a) how hard the proof is and (b) who (if anyone) I expect to read the proof. I have made mathlib PRs on basic material like Noetherian rings where I'm setting up a basic API and proving trivialities, and then I try and write super-concise proofs in term mode because these proofs are not written to be read, they're written so that we have an API. On the other hand when I'm writing teaching material for undergraduates I write super-lengthy tactic mode proofs with perhaps more lines of comments than lines of code.</p>\n<p>One rule of thumb I tend to use is that if it's mathematically trivial and you're not attempting to teach beginners how the proof works, then why not kill it in as few characters as possible, because nobody cares about the proof.</p>",
        "id": 199522555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591117367
    },
    {
        "content": "<p>I don't disagree with your point, but thanks to <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , Lean 3.15.0 will display some proof state for term proofs.</p>",
        "id": 199522629,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591117405
    },
    {
        "content": "<p>that's amazing to hear <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> .</p>",
        "id": 199522726,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117443
    },
    {
        "content": "<p>Mathlib has some kind of \"no comments\" policy, for some reason. But if you want to make a proof comprehensible, especially a term mode one, just write lots of comments.</p>",
        "id": 199522803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591117478
    },
    {
        "content": "<p>I don't believe there's a no comments policy.</p>",
        "id": 199522920,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591117538
    },
    {
        "content": "<p>I would certainly be happy to merge comment-only PRs (provided they were correct and enlightening).</p>",
        "id": 199523060,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591117598
    },
    {
        "content": "<p>In my concrete case, I've designed a data structure that uses the fact that under certain conditions  union and cartesian product commute.</p>\n<p>I've captured the conditions in a LaTeX proof and I figured it'd be a fine exercise to translate to Lean. </p>\n<p>The results are not trivial, but not hard either. And once you have the intuition, it's really easy to get it. So I was just trying to figure out how to make things understandable.</p>",
        "id": 199523093,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> Tactics like <code>obtain</code> and <code>suffices</code> can also be used to explain the structure of a proof</p>",
        "id": 199523134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591117634
    },
    {
        "content": "<p>(to my co-workers or any potential dev who wants to maintain the datastructure in future)</p>",
        "id": 199523139,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117637
    },
    {
        "content": "<p>Also <code>calc</code>, when you fiddle a bit with the layout, can be pretty readable</p>",
        "id": 199523208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591117679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> currently, I tend to put some show / suffices with an explicit type signature at some key points. And then use tactics or terms for things that are boring, like unwrapping definition 2 times or reordering terms.</p>",
        "id": 199523314,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117733
    },
    {
        "content": "<p>ah yes, I like calc of that thing</p>",
        "id": 199523346,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117753
    },
    {
        "content": "<p>One option which can help sometimes and not many people use is 'french' quotes</p>",
        "id": 199523404,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591117788
    },
    {
        "content": "<p>One thing I miss, is a version of calc that doesn't want things to be equal, but allow you to write modified equalities. E.g. <code>a = b ... a - b = 0</code>.</p>",
        "id": 199523494,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117817
    },
    {
        "content": "<p>I'd love that as a chain of calc things, somehow.</p>",
        "id": 199523548,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117839
    },
    {
        "content": "<p>Well, you can use <code>calc</code> with <code>&lt;-&gt;</code></p>",
        "id": 199523583,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591117861
    },
    {
        "content": "<p>but then it's a different kind of <code>calc</code></p>",
        "id": 199523598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591117867
    },
    {
        "content": "<p>Oh, you use implication or equivalence as your relation for calc?</p>",
        "id": 199523745,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117936
    },
    {
        "content": "<p>Right</p>",
        "id": 199523758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591117948
    },
    {
        "content": "<p>I didn't realise this was possible, thanks, learnt something new.</p>",
        "id": 199523789,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1591117978
    },
    {
        "content": "<p>Implication is not possible, AFAIK</p>",
        "id": 199524315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591118215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> But <code>&lt;</code> and <code>â‰¤</code> are. (And you can even mix them (and <code>=</code>).</p>",
        "id": 199524942,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591118526
    },
    {
        "content": "<p>Actually implication in <code>calc</code> <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pair.lean#L280\">does work</a></p>",
        "id": 199525159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591118645
    },
    {
        "content": "<p>With <code>obtain</code> I meant the pattern</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"k\">obtain</span> <span class=\"err\">\\</span><span class=\"bp\">&lt;</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"err\">\\</span><span class=\"bp\">&gt;</span> <span class=\"o\">:</span> <span class=\"err\">\\</span><span class=\"n\">exists</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_cool</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">hammer</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- Now you have (x : X) and (hx : is_cool x) in your context</span>\n</code></pre></div>",
        "id": 199525211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591118675
    },
    {
        "content": "<p>Oh nice, I misremembered then. This is silly because I think I convinced myself it didn't work a very very long time ago.</p>",
        "id": 199525822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591118978
    },
    {
        "content": "<p>I remember what doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">â†’</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">â†’</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;&#39;</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">â†”</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">â†’</span> <span class=\"n\">t</span><span class=\"o\">):</span> <span class=\"n\">p</span> <span class=\"bp\">â†’</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n  <span class=\"n\">p</span> <span class=\"bp\">â†’</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">h</span>\n<span class=\"bp\">...</span> <span class=\"bp\">â†’</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">h&#39;</span>\n<span class=\"bp\">...</span> <span class=\"bp\">â†”</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">h&#39;&#39;</span>\n<span class=\"bp\">...</span> <span class=\"bp\">â†’</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">h3</span>\n</code></pre></div>\n\n\n<p>If I remember correctly, we can't add the transitivity rule that is missing.</p>",
        "id": 199526497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591119268
    },
    {
        "content": "<p>Does <a href=\"#narrow/stream/113488-general/topic/homeomorph.2Etrans.20and.20calc/near/199227398\">this</a> help?</p>",
        "id": 199526782,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591119399
    },
    {
        "content": "<p>After writing that I realized that this is exactly the reason why it is done: it gives a place for <code>implies.trans</code> to live</p>",
        "id": 199527320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591119639
    },
    {
        "content": "<p>although because <code>implies</code> is less general than <code>nondependent_pi</code>, you get this error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î±</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">Î±</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"n\">f</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">â†’</span> <span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"n\">g</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">implies</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">Î±</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 199527696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591119817
    }
]