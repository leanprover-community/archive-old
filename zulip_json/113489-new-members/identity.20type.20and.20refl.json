[
    {
        "content": "<p>Is it possible to pattern match on the refl constructor of the identity type (eq.refl) in Lean similar to what one can do in Agda? I tried defining one by pattern matching but it didn't seem to work.</p>",
        "id": 147599492,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542123983
    },
    {
        "content": "<p>yes, there are several ways</p>",
        "id": 147599789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542124253
    },
    {
        "content": "<p><code>subst</code> and <code>cases</code> both work, as does the pattern matcher</p>",
        "id": 147599806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542124271
    },
    {
        "content": "<p>note that one side of the equality must be a variable and must participate in the pattern match (be right of the colon) for it to work</p>",
        "id": 147599845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542124322
    },
    {
        "content": "<p>Can you give an example of code you expect to work but doesn't?</p>",
        "id": 147599908,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542124374
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">subst</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">ℓ</span><span class=\"o\">}(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">ℓ&#39;</span><span class=\"o\">){</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">P</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</pre></div>",
        "id": 147599959,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542124439
    },
    {
        "content": "<p>works fine</p>",
        "id": 147600005,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542124447
    },
    {
        "content": "<p>but then</p>",
        "id": 147600010,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542124451
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">subst_const</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">ℓ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">ℓ&#39;</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n  <span class=\"o\">:</span> <span class=\"bp\">Π</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">,</span> <span class=\"c1\">---------------------</span>\n  <span class=\"n\">subst</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span>\n</pre></div>\n\n\n<p>doesn't work</p>",
        "id": 147600023,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542124461
    },
    {
        "content": "<p>This is something I've used a lot in Agda, and I figured if I try to do some of these \"basic\" things in Lean that could help me learn it, but I think that maybe I don't understand the basic syntax well enough yet...</p>",
        "id": 147600110,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542124547
    },
    {
        "content": "<p>Yes, that is because the requirement \"one side of the equality must be a variable and must participate in the pattern match (be right of the colon)\" (or in this case, below the colon <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span>) is not met</p>",
        "id": 147600115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542124551
    },
    {
        "content": "<p><code>y</code> needs to move past the colon, and the last line should read <code>| _ (eq.refl _) _ := eq.refl _</code></p>",
        "id": 147600331,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542124735
    },
    {
        "content": "<p>or replace <code>eq.refl _</code> with <code>rfl</code></p>",
        "id": 147600352,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542124765
    },
    {
        "content": "<p>okay, got it, can I still keep y implicit?</p>",
        "id": 147600361,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542124779
    },
    {
        "content": "<p>it seems I can</p>",
        "id": 147600498,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542124840
    },
    {
        "content": "<p>thank you very much for your help!! ^_^</p>",
        "id": 147600555,
        "sender_full_name": "Shaun Steenkamp",
        "timestamp": 1542124897
    }
]