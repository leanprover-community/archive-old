[
    {
        "content": "<p>Do we have something simple for this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.symmetric</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.polynomial.homogeneous</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.multiset.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 230578262,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615923844
    },
    {
        "content": "<p>It's like a simple rephrasing of pigeonhole.</p>",
        "id": 230578357,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615923888
    },
    {
        "content": "<p>Can you get something about <code>(s^c).card</code> from <code>hs</code>?</p>",
        "id": 230578506,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615923951
    },
    {
        "content": "<p><del>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.card_lt_card\">docs#set.card_lt_card</a></del></p>",
        "id": 230578551,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615923962
    },
    {
        "content": "<p><del>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.exists_of_ssubset\">docs#set.exists_of_ssubset</a></del></p>",
        "id": 230578698,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615924001
    },
    {
        "content": "<p>Oh wait, the first lemma goes the wrong way (and it was for fintypes anyway)</p>",
        "id": 230578792,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615924031
    },
    {
        "content": "<p>Going with Ruben's suggestion, there's this: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_compl\">docs#finset.card_compl</a></p>",
        "id": 230580051,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615924469
    },
    {
        "content": "<p>And you can deduce from that the the cardinality of the complement is positive, then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_pos\">docs#finset.card_pos</a></p>",
        "id": 230580130,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615924505
    },
    {
        "content": "<p>Brutal. OK, thanks!</p>",
        "id": 230580238,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615924553
    },
    {
        "content": "<p>You probably need to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card_univ\">docs#finset.card_univ</a> for some glue</p>",
        "id": 230580247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615924556
    },
    {
        "content": "<p>Yeah it's not ideal...</p>",
        "id": 230580377,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615924600
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  α : Type u_1,</span>\n<span class=\"cm\">  _inst_1 : fintype α,</span>\n<span class=\"cm\">  n : ℕ,</span>\n<span class=\"cm\">  x : α</span>\n<span class=\"cm\">  ⊢ n &lt; fintype.card α → (∃ (v : finset α), v.card = n.succ ∧ x ∈ v)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">IH</span> <span class=\"o\">((</span><span class=\"n\">nat.lt_succ_self</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hsc</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">-</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">card_compl</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n        <span class=\"k\">have</span> <span class=\"n\">hpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ.</span><span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"n\">hsc.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">nat.sub_pos_of_lt</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">card_pos.mp</span> <span class=\"n\">hpos</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n    <span class=\"n\">replace</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"n\">s</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230581977,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615925189
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 230581980,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615925192
    },
    {
        "content": "<p>For your example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.boolean_algebra</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.card</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"bp\">←</span><span class=\"n\">finset.mem_compl</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset.card_pos.mp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.card_compl</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.sub_pos_of_lt</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"bp\">←</span><span class=\"n\">finset.card_univ</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I wonder why we don't have <code>nat.sub_pos</code> for the iff to match <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_pos\">docs#sub_pos</a> - we have <code>nat.sub_pos_of_lt</code> in core and <code>nat.lt_of_sub_pos</code> in mathlib</p>",
        "id": 230582508,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615925386
    }
]