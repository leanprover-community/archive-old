[
    {
        "content": "<p>I observe that <code>∘</code> is defined as <code>function.comp : (?M_2 → ?M_3) → (?M_1 → ?M_2) → ?M_1 → ?M_3</code>. I want to define it as a composition in any category. How should I go about it?</p>\n<p>Specifically, how can I avoid the standard notation being brought into scope?</p>",
        "id": 256024810,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633337013
    },
    {
        "content": "<p>I reckon there is another symbol for composition in <a href=\"https://leanprover-community.github.io/theories/category_theory.html\">the standard for Category Theory</a> but I want to do it my way.</p>",
        "id": 256025161,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633337193
    },
    {
        "content": "<p>There might be a way of doing it, but I think the general principle is to not mess up with things in <code>core</code>. Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.comp\">docs#function.comp</a> is <em>not</em> a special case of  composition in a category: functions are a primitive notion in type theory, they are not literally morphisms in the category of sets. (Of course there is category of sets with its hom, but these are denoted with a slightly different arrow <code>⟶</code>.)</p>",
        "id": 256026044,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1633337705
    },
    {
        "content": "<p>Even with these considerations in mind, I still want to have a choice to ignore the standard library.</p>",
        "id": 256026738,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633338071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"448347\">@Ignat Insarov</span> You can start your file with <code>prelude</code>, and ignore the rest of humanity <span aria-label=\"crazy\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"crazy\">:crazy:</span></p>",
        "id": 256026804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633338112
    },
    {
        "content": "<p>For example, in Haskell I can say <code>import Prelude hiding ((.))</code> and it will hide the standard composition so I can define my own.</p>",
        "id": 256026878,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633338136
    },
    {
        "content": "<p>How do I spell that in Lean?</p>",
        "id": 256026893,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633338145
    },
    {
        "content": "<p>Yeah, lean 3 doesn't really support this</p>",
        "id": 256026901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633338153
    },
    {
        "content": "<p>everyone has to live with the choices made by core, which puts a high bar on what can be included</p>",
        "id": 256026966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633338193
    },
    {
        "content": "<p>and there are periodically PRs to core lean that remove or modify stuff like this because of issues downstream</p>",
        "id": 256027030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633338228
    },
    {
        "content": "<p>That said, it is possible to make <code>∘</code> a local notation for your own thing, and it will \"win\" over the definition in core</p>",
        "id": 256027120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633338273
    },
    {
        "content": "<p>but it's not recommended since this isn't what I would call \"being a team player\"</p>",
        "id": 256027168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633338310
    },
    {
        "content": "<p>I think I can do the <code>prelude</code> thing mentioned by  Riccardo and then tediously import things that I do want, such as <code>Prop</code>.</p>",
        "id": 256027195,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633338332
    },
    {
        "content": "<p>The <code>prelude</code> suggestion was facetious. No one would write code like that, not least because you lose any ability to use tactics</p>",
        "id": 256027272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633338365
    },
    {
        "content": "<p>That is, there are certain bootstrapping steps that are needed for lean to function normally, and using <code>prelude</code> skips that</p>",
        "id": 256027367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633338437
    },
    {
        "content": "<p>it's mostly intended for writing the core library itself</p>",
        "id": 256027399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633338465
    },
    {
        "content": "<p>Yes, I should have to live with that.</p>",
        "id": 256027485,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633338497
    },
    {
        "content": "<p>But it's not really necessary to literally exclude the definition of <code>function.comp</code>, if you are just trying to make the notation do something else</p>",
        "id": 256027553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633338547
    },
    {
        "content": "<p>Yes, <code>local notation</code> works too.</p>",
        "id": 256027617,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633338591
    },
    {
        "content": "<p>Lean is a nice language.</p>",
        "id": 256027625,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633338596
    },
    {
        "content": "<p>It lets me do things.</p>",
        "id": 256027633,
        "sender_full_name": "Ignat Insarov",
        "timestamp": 1633338601
    }
]