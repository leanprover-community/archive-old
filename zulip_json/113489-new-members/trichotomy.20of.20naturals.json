[
    {
        "content": "<p>I have the hypothesis <code>¬a = 2</code>, where <code>a : ℕ</code>, and I'd like to reduce this to <code>a &lt;= 1</code> and <code>a &gt;= 3</code>, is there something in the standard libs to help me?</p>",
        "id": 179151620,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1572144635
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ne_iff_lt_or_gt</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h&#39;</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">h&#39;</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_le_of_lt</span> <span class=\"n\">h&#39;</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 179152224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572145911
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">omega</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">ne_iff_lt_or_gt</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">omega</span>\n</pre></div>",
        "id": 179152323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572146071
    },
    {
        "content": "<p>Thanks both! Is there somewhere I can search for things like this?</p>",
        "id": 179172855,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1572185821
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/contribute/naming.md\">This doc on naming conventions</a> may be helpful, since it will help with using autocomplete in VS Code (or emacs?) to get a list of relevant suggestions. </p>\n<p>There's also <code>#find</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n\n<span class=\"c1\">-- need to have some declaration before #find starts to work</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"bp\">_</span> <span class=\"bp\">≠</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span> <span class=\"bp\">∨</span> <span class=\"bp\">_</span> <span class=\"bp\">≥</span> <span class=\"bp\">_</span>\n<span class=\"c1\">-- returns nothing, probably because using &lt; and &gt; would be better</span>\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"bp\">_</span> <span class=\"bp\">≠</span> <span class=\"bp\">_</span> <span class=\"bp\">→</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span> <span class=\"bp\">∨</span> <span class=\"bp\">_</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">_</span>\n<span class=\"c1\">-- lt_or_gt_of_ne: ∀ {α : Type u} [_inst_1 : linear_order α] {a b : α}, a ≠ b → a &lt; b ∨ a &gt; b</span>\n</pre></div>",
        "id": 179173399,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572186791
    },
    {
        "content": "<p>To give an example of autocomplete here -- for a general totally ordered thing (e.g. the reals) the theorem is going to be a != x iff a &lt; x or a &gt; x, so I write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span> <span class=\"c1\">-- mega import to make sure I get lots of mathlib in</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ne_iff</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(because I know <code>ne_iff...</code> is what this thing will be called, by the naming conventions) and then I move to just after the last <code>f</code> of <code>iff</code> and (in VS Code) hit esc, ctrl-space, and then if I don't get enough stuff I hit esc, ctrl-space again (I don't know why I have to do it twice sometimes). I can now see a big list of lots of theorems which have <code>ne_iff</code> in, and then I can use the arrow keys to scroll around and find the one I want.</p>",
        "id": 179173943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572187809
    }
]