[
    {
        "content": "<p>Can someone help me with the Jacobian Identity, there are so many brackets, how can I easily  expand all the brackets ?</p>\n<p>And how can I use a+b+c = (a+b)+c, the add_assoc can only prove a+b+c=a+(b+c)</p>\n<div class=\"codehilite\"><pre><span></span>structure vector (R : Type) :=\nvec :: (x : R) (y : R) (z : R)\n\n\nnamespace vector\n\nvariables {R : Type} [comm_ring R]\n\ndef zero : vector R := vec 0 0 0\n\ndef add (a b : vector R) :=\nvec (a.x + b.x) (a.y + b.y) (a.z + b.z)\n\ndef cross_prod (a b : vector R) :=\nvec (a.y * b.z - a.z * b.y) (a.x * b.z - a.z * b.x) (a.x * b.y - a.y * b.x)\n\ntheorem jacobian : ∀ (a b c: vector R) ,\n add (cross_prod a (cross_prod b c)) (add (cross_prod b (cross_prod c a))  (cross_prod c (cross_prod a b))) = zero :=\nbegin\n  intro a,\n  intro b,\n  intro c,\n  unfold add,\n  unfold cross_prod,\n  unfold zero,\n  dsimp,\n  congr,\n  simp,\n  rw mul_add,\n  rw add_comm,\n  rw mul_add,\n  rw add_comm,\n  rw add_assoc,\n\nend\nend vector\n</pre></div>",
        "id": 132327674,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534540801
    },
    {
        "content": "<p>Are you willing to use mathlib?</p>",
        "id": 132327886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534541065
    },
    {
        "content": "<p>If yes then you can preface the file with <code>import tactic.ring</code>, and right after <code>unfold_zero</code>, write <code>ring, tauto</code> and be done</p>",
        "id": 132327905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534541141
    },
    {
        "content": "<p>It's a good method, but actually I want to show the steps of the proof :-)</p>",
        "id": 132328071,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534541365
    },
    {
        "content": "<p><code>a + b + c</code> is definitionally equal to <code>(a + b) + c</code>, the pretty printer doesn't display the brackets since they are unnecessary.</p>",
        "id": 132328213,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534541528
    },
    {
        "content": "<p>it's more than definitional equality (!) it's parsing</p>",
        "id": 132328249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534541594
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 132328299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534541645
    },
    {
        "content": "<p>how do we call that type of equality?</p>",
        "id": 132329271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534543015
    },
    {
        "content": "<p>it's what the parser parses</p>",
        "id": 132329309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534543078
    },
    {
        "content": "<p>Structural equality</p>",
        "id": 132329353,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1534543100
    },
    {
        "content": "<p>yeah, sounds more impressive</p>",
        "id": 132329367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534543133
    },
    {
        "content": "<p>why \"structure\"?</p>",
        "id": 132329393,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1534543179
    },
    {
        "content": "<p>why not \"ontological equality\"?</p>",
        "id": 132329437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534543204
    },
    {
        "content": "<p>How many degrees of equality are there?</p>",
        "id": 132329453,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534543234
    },
    {
        "content": "<p>Because the terms' structure as a tree of constructors is the same. See \"structural induction\", which is induction over that tree.</p>",
        "id": 132329458,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1534543252
    },
    {
        "content": "<p>What type of equality do terms need to be for <code>rw</code> to work? I think that's slightly weaker than structural equality since it unfold reducibles</p>",
        "id": 132329537,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1534543381
    },
    {
        "content": "<p>Why there is always excessive memory when I import something?Is it the problem of the computer <a href=\"/user_uploads/3121/A5DMKvrZ-TiBq78T4TN4rsi_/Capture.PNG\" target=\"_blank\" title=\"Capture.PNG\">Capture.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/A5DMKvrZ-TiBq78T4TN4rsi_/Capture.PNG\" target=\"_blank\" title=\"Capture.PNG\"><img src=\"/user_uploads/3121/A5DMKvrZ-TiBq78T4TN4rsi_/Capture.PNG\"></a></div>",
        "id": 132418938,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534709959
    },
    {
        "content": "<p>Your installation of mathlib seems to have a problem</p>",
        "id": 132419069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534710196
    },
    {
        "content": "<p>maybe you should try to rebuild it</p>",
        "id": 132419071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1534710207
    },
    {
        "content": "<p>I tried it but it seems not work</p>",
        "id": 132419731,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534711474
    },
    {
        "content": "<p>After rebuilding, did you restart your Lean server?</p>",
        "id": 132420211,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534712584
    },
    {
        "content": "<p>How to switch the LHS and RHS of n equality?</p>\n<div class=\"codehilite\"><pre><span></span>variables {R : Type} [comm_ring R]\ntheorem mul : ∀ (a b c : R) , a * b * c = c * a * b :=\nbegin\nintro a,\nintro b,\nintro c,\nrw mul_comm,\napply mul_assoc,\nend\n</pre></div>\n\n\n<p>I thought this can work but it seems that mul_assoc can only prove c<em>a</em>b=c<em>(a</em>b)</p>",
        "id": 132484277,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534803364
    },
    {
        "content": "<p>You can try <code>assoc_rw [mul_comm]</code></p>",
        "id": 132484521,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534803718
    },
    {
        "content": "<p>You mean right after <code>intro c</code>?</p>",
        "id": 132484868,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534804161
    },
    {
        "content": "<p>What's the meaning of the square bracket here?</p>",
        "id": 132484980,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534804303
    },
    {
        "content": "<p>Actually, in your situation, <code>ac_refl</code>, is even simpler: <code>by intros; ac_refl</code></p>",
        "id": 132484982,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534804304
    },
    {
        "content": "<blockquote>\n<p>What's the meaning of the square bracket here?</p>\n</blockquote>\n<p>Like with <code>rw</code>, <code>assoc_rw</code> takes a list of expressions as an argument: <code>assoc_rw [rule1,rule2,rule3]</code></p>",
        "id": 132485041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534804372
    },
    {
        "content": "<p>It says that <code>`assoc_rw</code>is an unknown identifier, <a href=\"/user_uploads/3121/tTOzNZCncGvTa3Xailmb7NZZ/Capture.PNG\" target=\"_blank\" title=\"Capture.PNG\">Capture.PNG</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tTOzNZCncGvTa3Xailmb7NZZ/Capture.PNG\" target=\"_blank\" title=\"Capture.PNG\"><img src=\"/user_uploads/3121/tTOzNZCncGvTa3Xailmb7NZZ/Capture.PNG\"></a></div>",
        "id": 132485227,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534804655
    },
    {
        "content": "<p>Are you using <code>mathlib</code>?</p>",
        "id": 132485292,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534804730
    },
    {
        "content": "<p>the non crazy overpowered solution is just to use <code>&lt;-</code>:</p>\n<div class=\"codehilite\"><pre><span></span>theorem mul (a b c : R) : a * b * c = c * a * b :=\nby rw [mul_comm, ← mul_assoc]\n</pre></div>",
        "id": 132485402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534804914
    },
    {
        "content": "<p><code>simp</code> will also do AC rewriting, so <code>by simp [mul_comm, mul_assoc]</code> also works without mathlib</p>",
        "id": 132485472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1534804998
    },
    {
        "content": "<p>I would try this tomorrow, thank you</p>",
        "id": 132485585,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534805158
    },
    {
        "content": "<p>Why do you say AC rewriting is overpowered?</p>",
        "id": 132486021,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534805719
    },
    {
        "content": "<p>I have mathlib on the computer，maybe there some other problems</p>",
        "id": 132486327,
        "sender_full_name": "JIANXIONG SUN",
        "timestamp": 1534806026
    },
    {
        "content": "<p>You need to import <code>tactic.rewrite</code>, sorry, I forgot to mention that</p>",
        "id": 132486499,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1534806259
    },
    {
        "content": "<p>Would it be possible to get a hint for what to do here:<br>\n<a href=\"https://gist.github.com/luxbock/981f990d263516589146ffeb3825e421\" target=\"_blank\" title=\"https://gist.github.com/luxbock/981f990d263516589146ffeb3825e421\">https://gist.github.com/luxbock/981f990d263516589146ffeb3825e421</a></p>\n<p>This is Chapter 3 exercise from the book. My hypothesis <code>h</code> is a lambda, and the only way I know how to make progress with it is by applying it to something, but I have nothing else to go by</p>",
        "id": 132875137,
        "sender_full_name": "Olli",
        "timestamp": 1535397322
    },
    {
        "content": "<p>You can use <code>and.intro (assume h', _) (assume h', _)</code></p>",
        "id": 132875274,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1535397488
    },
    {
        "content": "<p>I have a hint: use tactic mode</p>",
        "id": 132875279,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535397513
    },
    {
        "content": "<p>I am trying to make it through without tactics, as I'm still trying to wrap my head around propositions as types, and tactics have yet to be introduced at this point</p>",
        "id": 132875305,
        "sender_full_name": "Olli",
        "timestamp": 1535397576
    },
    {
        "content": "<p>Patrick has a point though. I found it much easier to learn tactic mode first. Without it, the goal is an <code>and</code> statement and you can construct proofs of such statements with <code>and.intro</code> as Simon says. In general I guess this is the way to think about it. For each of these things (and, or, implies etc) you need to learn how to construct it (i.e. make it) and how to eliminate it (i.e. use it). <code>and.intro</code> is a constructor for <code>and</code>.</p>",
        "id": 132875385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535397710
    },
    {
        "content": "<p>I'll tell you how a mathematician would do it. First install mathlib (of course). Then</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tauto</span>\n</pre></div>",
        "id": 132875461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535397807
    },
    {
        "content": "<p>Then move on to interesting maths</p>",
        "id": 132875467,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535397830
    },
    {
        "content": "<p>Of course the downside is you'll probably depend on people actually understanding terms</p>",
        "id": 132875515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535397866
    },
    {
        "content": "<p>I did skim the tactics chapter and played around with it a little bit. My goal is to prove each statement in as many ways as possible to get familiar with all the features</p>",
        "id": 132875517,
        "sender_full_name": "Olli",
        "timestamp": 1535397868
    },
    {
        "content": "<p>I'm currently reading the book \"How to Proove It\" alongside trying to learn Lean, so I'm far from a mathematician who needs to use it for anything serious. It's more of an exercise in mind expansion for me</p>",
        "id": 132875540,
        "sender_full_name": "Olli",
        "timestamp": 1535397946
    },
    {
        "content": "<p>Let me emphasize: when I write \"how a mathematician would do it\", I really mean this, and not \"how everybody should do it\". I'm only providing one point of view. Other people will have other interesting points of view</p>",
        "id": 132875625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535398059
    },
    {
        "content": "<p>Sure undestood :). I figure most people have a very different background from someone like myself, so I just wanted to give some context for the level I'm at</p>",
        "id": 132875698,
        "sender_full_name": "Olli",
        "timestamp": 1535398134
    },
    {
        "content": "<p>Well here's a tactic mode proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">Hp</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Hp</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">Hq</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Hq</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">Hpr</span> <span class=\"n\">Hqr</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">Hpq</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Hpq</span> <span class=\"k\">with</span> <span class=\"n\">Hp</span> <span class=\"n\">Hq</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Hpr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Hp</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">Hqr</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Hq</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>It's cool to step through it looking at the goals etc at each step.</p>",
        "id": 132876585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535399171
    },
    {
        "content": "<p>finally got it via the term way, very satisfying once it clicks</p>",
        "id": 132876598,
        "sender_full_name": "Olli",
        "timestamp": 1535399196
    },
    {
        "content": "<p>I think I'll enjoy the tactics language as well, as I've found stack based languages fun to play with in the past</p>",
        "id": 132876645,
        "sender_full_name": "Olli",
        "timestamp": 1535399258
    },
    {
        "content": "<p>...and here's a term proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span><span class=\"bp\">⟨λ</span> <span class=\"n\">hp</span><span class=\"o\">,</span><span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">hpq</span><span class=\"o\">,</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hpq</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 132876753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535399357
    },
    {
        "content": "<p>The <code>and.intro</code> is swallowed up with these <code>⟨⟩</code> brackets, but you can still see the <code>or</code> stuff.</p>",
        "id": 132876864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535399478
    },
    {
        "content": "<p>yep, I can follow that. The one I wrote is a bit more verbose, but I see how they are the same thing</p>",
        "id": 132876891,
        "sender_full_name": "Olli",
        "timestamp": 1535399516
    },
    {
        "content": "<p>If you don't like decidability assumptions but still like automation, what about:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">cc</span> <span class=\"o\">},</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">Hpr</span><span class=\"o\">,</span> <span class=\"n\">Hqr</span><span class=\"bp\">⟩</span> <span class=\"o\">(</span><span class=\"n\">Hp</span> <span class=\"bp\">|</span> <span class=\"n\">Hq</span><span class=\"o\">)</span> <span class=\"bp\">;</span> <span class=\"n\">cc</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 132876950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535399555
    },
    {
        "content": "<p>Or you can replace the <code>cc</code>with Kevin's hand-crafted proofs</p>",
        "id": 132876994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535399622
    },
    {
        "content": "<p>but at least use <code>rintro</code></p>",
        "id": 132877004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535399641
    },
    {
        "content": "<p>Because unpacking stuff is not that interesting</p>",
        "id": 132877053,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535399659
    },
    {
        "content": "<p>and of course there are many many variations, including hybrid tactic/term proofs</p>",
        "id": 132877096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535399742
    },
    {
        "content": "<p>When I hover over <code>rintro</code> in VS code I seem to get an error in the popup about interactive.param_desc. I don't really get it but maybe there's some missing description like in Kevin's post here <a href=\"#narrow/stream/113488-general/subject/lean.20golf/near/132604473\" title=\"#narrow/stream/113488-general/subject/lean.20golf/near/132604473\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/lean.20golf/near/132604473</a> . I'm guessing this is low priority and I shouldn't worry about this anyways.</p>\n<p>Reading the <code>rintro</code> docstring made me want to play around with <code>rintro?</code>. However, appending a question mark to <code>rcases</code> in the above proof just resulted in an \"unexpected token\" error. Is there a better example I can try?</p>",
        "id": 132878054,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535400818
    },
    {
        "content": "<p>The small_nat thing was fixed by Mario today, but maybe not pushed yet</p>",
        "id": 132878128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535400875
    },
    {
        "content": "<p>I could use another hint here as I can't seem to make progress:<br>\n<a href=\"https://gist.github.com/luxbock/e8a4146ab822049da4d440adc8d7f01c\" target=\"_blank\" title=\"https://gist.github.com/luxbock/e8a4146ab822049da4d440adc8d7f01c\">https://gist.github.com/luxbock/e8a4146ab822049da4d440adc8d7f01c</a></p>",
        "id": 132923537,
        "sender_full_name": "Olli",
        "timestamp": 1535469299
    },
    {
        "content": "<p>Oh but this is tricky! Here's a hint: prove not p. Or just use the law of the excluded middle :-)</p>",
        "id": 132924310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535470210
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">easy</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hpinp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mp</span><span class=\"o\">,</span>  <span class=\"c1\">-- p → p → false</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnpip</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span> <span class=\"c1\">-- p → false → p</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hpinp</span> <span class=\"n\">hp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hnp</span> <span class=\"o\">(</span><span class=\"n\">hnpip</span> <span class=\"n\">hnp</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">easy</span> <span class=\"c1\">-- more than none</span>\n</pre></div>\n\n\n<p>Sorry -- I'm a mathematician.</p>",
        "id": 132924539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535470506
    },
    {
        "content": "<p>There's a previous thread about this here (with proofs avoiding excluded middle) <a href=\"#narrow/stream/113488-general/subject/Logic.20.26.20Proof/near/127708058\" title=\"#narrow/stream/113488-general/subject/Logic.20.26.20Proof/near/127708058\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/Logic.20.26.20Proof/near/127708058</a></p>",
        "id": 132925477,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535471444
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 132925990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535472054
    },
    {
        "content": "<p>thanks, there are other exercises that are marked under classical reasoning but this one isn't one of them, I'll study up on the previous discussion</p>",
        "id": 132927437,
        "sender_full_name": "Olli",
        "timestamp": 1535473851
    },
    {
        "content": "<p>Or try my hint :-)</p>",
        "id": 132927685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535474199
    },
    {
        "content": "<p>I got it now, but had to look up almost the full solution before getting it. very tricky indeed.</p>\n<p>My plan is to solve all the exercises first using term level solutions that read as naturally as possible, then go and write a second pass removing all the syntax sugar, and then move on to the tactics chapter and re-write them all using those again</p>",
        "id": 132927985,
        "sender_full_name": "Olli",
        "timestamp": 1535474590
    },
    {
        "content": "<p>Hello, I currently have: </p>\n<div class=\"codehilite\"><pre><span></span>nine : 2 ∣ p / 2,\nthing11 : 3 + 4 * (p / 4) = p\n⊢ false\n</pre></div>\n\n\n<p>p is a prime. I'm stuck; does anyone have any hints on how to proceed?</p>",
        "id": 133811893,
        "sender_full_name": "Xita Meyers",
        "timestamp": 1536771199
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nine</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thing11</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">thing11</span> <span class=\"n\">at</span> <span class=\"n\">nine</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"n\">at</span> <span class=\"n\">nine</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_div_left</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_add_iff_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">nine</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">nine</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_mul_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133813180,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536772735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> somehow I find this very hard; can you help?</p>",
        "id": 133813199,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536772768
    },
    {
        "content": "<p>My best attempt is this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nine</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"err\">∣</span> <span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thing11</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">thing11</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_right_div</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_iff_mod_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_mod_self_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">nine</span><span class=\"bp\">;</span>\n  <span class=\"n\">contradiction</span>\n</pre></div>",
        "id": 133813915,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536773483
    },
    {
        "content": "<p>The high level strategy here is to substitute thing11 into nine -- now you have just one hypothesis -- and then simplify it using properties of divisibility until you get something like 2 divides 3 which can be killed by dec_trivial</p>",
        "id": 133814935,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536774524
    },
    {
        "content": "<p>easier said than done</p>",
        "id": 133815370,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536774953
    },
    {
        "content": "<p>considering how we both substituted thing11 into nine on the first step and never touched thing11 afterwards</p>",
        "id": 133815424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536774975
    },
    {
        "content": "<p>Yes, the one hypothesis I meant was nine</p>",
        "id": 133815777,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536775341
    },
    {
        "content": "<p>Why not do cases on p mod 4?</p>",
        "id": 133836132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536778134
    },
    {
        "content": "<p>There are a bunch of missing (perhaps) lemmas which would make this easy.</p>",
        "id": 133836549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536778511
    },
    {
        "content": "<p>I ran into one of these earlier today, I had <code>p/2  &lt; x &lt;= p-1 and I wanted to prove </code>-p/2 &lt;= x-p` or some such thing, it was harder than it should be but I felt that we could make this easier somehow.</p>",
        "id": 133836656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536778650
    },
    {
        "content": "<blockquote>\n<p>Why not do cases on p mod 4?</p>\n</blockquote>\n<p>because nobody knows that p mod 4 is given 2 | p/2</p>",
        "id": 133836898,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536778862
    },
    {
        "content": "<p>Hey guys, I want to ask about the cardinality of sets. I'm totally newbie to Lean so the questions might be trivial. Still, I need your help. </p>\n<p>I encounter this error message: </p>\n<p>\"type mismatch, term<br>\n  {l : list ℕ | isCanonnicalPartition n l}<br>\nhas type<br>\n  set (list ℕ)<br>\nbut is expected to have type<br>\n  finset (list ℕ)\" </p>\n<p>I interpret this as the LHS of my statement had been declared a finset, whereas Lean isnt sure the RHS is really a finset. </p>\n<p>How could I tell Lean that a set constructed in a particular way is guaranteed to be a finset? Or is there any other way to fix this error message? </p>\n<p>Thank you very much for your response!</p>",
        "id": 165591192,
        "sender_full_name": "Huyen Chau Nguyen",
        "timestamp": 1557806687
    },
    {
        "content": "<p>a <code>finset</code> is not the same as a <code>set</code>. A <code>finset</code> is <em>not</em> \"a set, plus some more stuff\".</p>",
        "id": 165599209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557818299
    },
    {
        "content": "<p>If you want some help, I would urge you to post a minimal working example of your code, rather than a fragment or just an error message. Quote code within triple backticks <code> ``` </code>, or even better use <code> ```lean </code> to quote Lean code with syntax highlighting.</p>",
        "id": 165599294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557818426
    },
    {
        "content": "<p>There are lots of potential solutions to your situation but it's difficult to know what the best one is without seeing the code. As an example, if you want to say that a set is equal to a finset, you could just coerce the finset into a set. Alternatively if you want to map a set plus a proof that it's finite into type finset then this is no doubt also possible (but I don't know the finset API well enough to know how to do it off the top of my head). The best solution might be to never use sets at all. It depends on what you want to do.</p>",
        "id": 165599476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557818647
    },
    {
        "content": "<p><code>finite.to_finset</code> will convert a set that is finite to a finset</p>",
        "id": 165599743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557818995
    },
    {
        "content": "<p>but in this case you are left with proving that the set is finite, which basically amounts to constructing a finset</p>",
        "id": 165599808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557819044
    },
    {
        "content": "<p>Okie thank you guys, I would post part of my code back here later.</p>",
        "id": 165607217,
        "sender_full_name": "Huyen Chau Nguyen",
        "timestamp": 1557826569
    }
]