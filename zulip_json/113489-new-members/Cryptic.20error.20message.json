[
    {
        "content": "<p>Can anyone give suggestions about this error message?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Here's the code:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hU</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"err\">^</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"err\">^</span><span class=\"o\">((</span><span class=\"n\">max&#39;</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">set</span> <span class=\"n\">kU</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">max&#39;</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">kU</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"n\">apply</span> <span class=\"n\">geom_sum_mul_add</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 183313017,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576192372
    },
    {
        "content": "<p>Some of the implicit arguments are probably different. Try adding <code>set_option pp.implicit true</code> before your lemma. It will show you the implicit arguments</p>",
        "id": 183313143,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1576192478
    },
    {
        "content": "<p>The error message says</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"bp\">@</span><span class=\"n\">geom_series</span> <span class=\"bp\">ℕ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"bp\">@</span><span class=\"n\">geom_series</span> <span class=\"bp\">ℕ</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">semiring</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">kU</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>now...</p>",
        "id": 183313265,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576192586
    },
    {
        "content": "<p>Then try setting <code>pp.all true</code></p>",
        "id": 183313288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192610
    },
    {
        "content": "<p>or try <code>convert</code> instead of <code>apply</code></p>",
        "id": 183313317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576192636
    },
    {
        "content": "<blockquote>\n<p>or try <code>convert</code> instead of <code>apply</code></p>\n</blockquote>\n<p>Hmmm... Now my goal is <code>nat.has_pow = monoid.has_pow</code></p>",
        "id": 183313406,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576192713
    },
    {
        "content": "<p>Nice!</p>",
        "id": 183313425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192734
    },
    {
        "content": "<p>So the issue is that the powers you're using are different</p>",
        "id": 183313442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192752
    },
    {
        "content": "<p>You can rewrite a lemma saying they're equal first</p>",
        "id": 183313451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192766
    },
    {
        "content": "<p>I was intending everything to be for nats though - that's why there's <code>.1</code>s around</p>",
        "id": 183313467,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576192789
    },
    {
        "content": "<p>The various <code>^</code>s are being treated differently</p>",
        "id": 183313533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192836
    },
    {
        "content": "<p>It's notation for more than one thing</p>",
        "id": 183313541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192843
    },
    {
        "content": "<p>We can't fix it because the bad one is in core</p>",
        "id": 183313550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192861
    },
    {
        "content": "<p>So we lemmad our way around it</p>",
        "id": 183313564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192881
    },
    {
        "content": "<p>If I understand correctly though, <code>^</code> is overloaded using typeclasses, but changing the type to <code>example (U : finset (fin n)) (hU : U ≠ ∅) : sum U (λ (x : fin n), (2 : ℕ) ^ (x.val : ℕ)) &lt; (2 : ℕ)^((max' U hU).1+1 : ℕ) := </code> still doesn't fix it</p>",
        "id": 183313581,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576192921
    },
    {
        "content": "<p>Nat is a monoid and maybe the geom series lemma uses monoid.pow</p>",
        "id": 183313625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192927
    },
    {
        "content": "<p>It's overloaded in a worse sense than eg +</p>",
        "id": 183313639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192954
    },
    {
        "content": "<p>It's two typeclasses</p>",
        "id": 183313651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192973
    },
    {
        "content": "<p>You're using nats so one is a nat.pow</p>",
        "id": 183313666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576192990
    },
    {
        "content": "<p>Ah I see</p>",
        "id": 183313669,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576192994
    },
    {
        "content": "<p>And you're using monoids so one is a monoid.pow</p>",
        "id": 183313673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576193003
    },
    {
        "content": "<p>And there's a lemma which says they're the same which you can rewrite before you do your apply</p>",
        "id": 183313692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576193019
    },
    {
        "content": "<p>The fix is to delete nat.pow but it's in core so we can't</p>",
        "id": 183313755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576193051
    },
    {
        "content": "<p>I mean the fix is to delete that notation</p>",
        "id": 183313777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576193098
    },
    {
        "content": "<p>Do you have an idea where this lemma is? <code>library_search</code> can't find it</p>",
        "id": 183313864,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576193168
    },
    {
        "content": "<p>In Algebra.group_power maybe?</p>",
        "id": 183313876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576193200
    },
    {
        "content": "<p>it's probably eta expanded like <code>x^n = x^n</code></p>",
        "id": 183313881,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576193204
    },
    {
        "content": "<blockquote>\n<p>It's two typeclasses</p>\n</blockquote>\n<p>Where are the two typeclasses? I can only see <code>has_pow</code>...</p>",
        "id": 183314244,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576193574
    },
    {
        "content": "<blockquote>\n<p>In Algebra.group_power maybe?</p>\n</blockquote>\n<p>I found <code>nat.pow_eq_pow</code>, but still not much luck</p>",
        "id": 183314265,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576193589
    },
    {
        "content": "<p>Finally managed, thanks both</p>",
        "id": 183314290,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576193620
    }
]