[
    {
        "content": "<p>Hello, I was looking for a theorem in mathlib and I found these ones: </p>\n<p><a href=\"/user_uploads/3121/qsmGCVJhwVmZwLhMzv63CgT8/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qsmGCVJhwVmZwLhMzv63CgT8/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qsmGCVJhwVmZwLhMzv63CgT8/image.png\"></a></div><p><a href=\"https://leanprover-community.github.io/mathlib_docs/init/algebra/order.html#gt_of_gt_of_ge\">https://leanprover-community.github.io/mathlib_docs/init/algebra/order.html#gt_of_gt_of_ge</a></p>\n<p>It looks like the first two used a curried version and the second two (to do with gt) seem to use assumptions, should they both be curried or is it like that for a reason?</p>",
        "id": 267673732,
        "sender_full_name": "ccn",
        "timestamp": 1641952777
    },
    {
        "content": "<p>there is no inconsistency here <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> different ways of doing the same thing, but the type signature is still the same</p>\n<p>it's just that the type signature is displayed differently lol</p>",
        "id": 267673926,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1641952915
    },
    {
        "content": "<p>In mathlib3, we try not to use <code>ge</code> or <code>gt</code>. They are different symbols and this means that rewriting something that has a <code>ge</code> with something that expects an <code>le</code> to be written might fail. Again, in lean3. So these helper lemmas exist as an escape hatch in the cases where you still have a <code>ge</code>.</p>",
        "id": 267674893,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641954024
    },
    {
        "content": "<p>I'm not sure exactly why the first two theorems are written using match notation, since they could equally well have been written as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[trans]</span> <span class=\"kd\">lemma</span> <span class=\"n\">lt_of_lt_of_le'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">hba</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le_not_le_of_lt</span> <span class=\"n\">hab</span> <span class=\"k\">in</span>\n<span class=\"n\">lt_of_le_not_le</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">hba</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hbc</span> <span class=\"n\">hca</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[trans]</span> <span class=\"kd\">lemma</span> <span class=\"n\">lt_of_le_of_lt'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">hbc</span><span class=\"o\">,</span> <span class=\"n\">hcb</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">le_not_le_of_lt</span> <span class=\"n\">hbc</span> <span class=\"k\">in</span>\n<span class=\"n\">lt_of_le_not_le</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hca</span><span class=\"o\">,</span> <span class=\"n\">hcb</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">hca</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The gt lemmas, if you wanted them to show up in the docs with anonymous arguments, could have been written like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[trans]</span> <span class=\"kd\">lemma</span> <span class=\"n\">gt_of_gt_of_ge'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">flip</span> <span class=\"n\">lt_of_le_of_lt</span>\n\n<span class=\"kd\">@[trans]</span> <span class=\"kd\">lemma</span> <span class=\"n\">gt_of_ge_of_gt'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">flip</span> <span class=\"n\">lt_of_lt_of_le</span>\n</code></pre></div>\n<p>(I'm using primes so my version doesn't conflict with the existing one.)</p>",
        "id": 267676241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641955826
    }
]