[
    {
        "content": "<p>I am trying to write a term-style solution to <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s maths challenges. I'm a little stuck on <a href=\"https://github.com/leanprover-community/mathlib/issues/4\" title=\"https://github.com/leanprover-community/mathlib/issues/4\">#4</a>, with the following progress (and tactic solution included at the bottom for comparison):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">challenge4</span>\n <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">surjective</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hh₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n   <span class=\"k\">have</span> <span class=\"n\">hh₂</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hh₁</span><span class=\"o\">,</span> <span class=\"c1\">-- I&#39;m not sure how to create a variable, y : Y, using f x.</span>\n   <span class=\"c1\">--exists.intro (f x) hh₂</span>\n   <span class=\"n\">sorry</span><span class=\"o\">),</span>\n <span class=\"n\">h₂</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">challenge4_tactic</span>\n <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">surjective</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">intro</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">z</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192169441,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585481203
    },
    {
        "content": "<p>Oh yeah, I can never do those crazy assume have proofs either. Why not just go full lambda-calculus?</p>",
        "id": 192169463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585481267
    },
    {
        "content": "<p><code>   let y := f x in\n   exists.intro y hh₂</code></p>",
        "id": 192169559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585481377
    },
    {
        "content": "<p>You can replace the sorry with <code>⟨f x, hh₂⟩</code></p>",
        "id": 192169561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585481382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/term.20style.20equivalent.20to.20.60use.60/near/192169463\" title=\"#narrow/stream/113489-new-members/topic/term.20style.20equivalent.20to.20.60use.60/near/192169463\">said</a>:</p>\n<blockquote>\n<p>Oh yeah, I can never do those crazy assume have proofs either. Why not just go full lambda-calculus?</p>\n</blockquote>\n<p>The downside of starting with the fantastic \"Logic and Proof\" website is that my understanding is currently rooted pretty exclusively in assume proofs.</p>",
        "id": 192169740,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585481592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/term.20style.20equivalent.20to.20.60use.60/near/192169559\" title=\"#narrow/stream/113489-new-members/topic/term.20style.20equivalent.20to.20.60use.60/near/192169559\">said</a>:</p>\n<blockquote>\n<p><code>   let y := f x in\n   exists.intro y hh₂</code></p>\n</blockquote>\n<p>Thanks! That's what I needed. I didn't know of  <code>let ... in</code>.</p>",
        "id": 192169753,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585481628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252241\">Kevin Doran</span> <a href=\"#narrow/stream/113489-new-members/topic/term.20style.20equivalent.20to.20.60use.60/near/192169740\" title=\"#narrow/stream/113489-new-members/topic/term.20style.20equivalent.20to.20.60use.60/near/192169740\">said</a>:</p>\n<blockquote>\n<p>The downside of starting with the fantastic \"Logic and Proof\" website is that my understanding is currently rooted pretty exclusively in assume proofs.</p>\n</blockquote>\n<p>Are you the kind of person who understands those big fractions with <code>Gamma ⊢ x : P</code> on the top and bottom?</p>",
        "id": 192170039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585482032
    },
    {
        "content": "<p>All I know is that you don't have to have a clue about those to use Lean.</p>",
        "id": 192170045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585482052
    },
    {
        "content": "<p>I'm trying to follow that path! The assume have proofs get out of hand quickly.</p>",
        "id": 192202189,
        "sender_full_name": "Kevin Doran",
        "timestamp": 1585529229
    }
]