[
    {
        "content": "<p>given an isomorphism, e.g. here: <a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/tensor_product.html#algebra.tensor_product.assoc\">https://leanprover-community.github.io/mathlib_docs/ring_theory/tensor_product.html#algebra.tensor_product.assoc</a>, how do I extract the forward and backward maps? I tried <code>.hom</code> but it does not work</p>",
        "id": 279121843,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650055549
    },
    {
        "content": "<p>Simply use the isomorphism as a function to get the forward map. For the backward map, notice that it is the forward map of the reverse isomorphism (<code>e.symm</code> if <code>e</code> is the isomorphism) and do the same as before.</p>",
        "id": 279122004,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650055643
    },
    {
        "content": "<p>If you want to do it explicitly (e.g. if you need to pass in a linear map I to some other function) you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.to_linear_map\">docs#linear_equiv.to_linear_map</a> (best to do this with dot notation, i.e. <code>e.to_linear_map</code>)</p>",
        "id": 279122300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650055838
    },
    {
        "content": "<p>And similarly <code>e.symm.to_linear_map</code> for the inverse.</p>",
        "id": 279122347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650055871
    },
    {
        "content": "<p>OTOH it looks like there is a coe from linear equivs to linear maps, so you probably can just use <code>e</code> with no further decorations (hopefully)</p>",
        "id": 279122470,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650055936
    },
    {
        "content": "<p>I am trying to follow the first advice, and getting type mismatch:<br>\n<code>def map2_1 : (K[X] ⊗[K] K[X] ⊗[K] K[X] →ₐ K[X] ⊗[K] (K[X] ⊗[K] K[X]) ) := (algebra.tensor_product.assoc K K[X] K[X] K[X])</code> gets me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 279122518,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650055965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20the.20two.20maps.20from.20an.20isomorphism/near/279122300\">said</a>:</p>\n<blockquote>\n<p>If you want to do it explicitly (e.g. if you need to pass in a linear map I to some other function) you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_equiv.to_linear_map\">docs#linear_equiv.to_linear_map</a> (best to do this with dot notation, i.e. <code>e.to_linear_map</code>)</p>\n</blockquote>\n<p>What if I want to have an algebra map from the algebra isomorphism? I tried <code>.to_algebra_map</code> but got</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">to_algebra_map'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"n\">valid</span> <span class=\"s2\">\"field\"</span> <span class=\"n\">because</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">alg_equiv.to_algebra_map'</span>\n  <span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 279122896,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650056218
    },
    {
        "content": "<p>It might be called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_equiv.to_algebra_hom\">docs#algebra_equiv.to_algebra_hom</a> ?</p>",
        "id": 279122951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650056261
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_equiv.to_alg_hom\">docs#alg_equiv.to_alg_hom</a></p>",
        "id": 279123018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650056283
    },
    {
        "content": "<p>Aha!</p>",
        "id": 279123031,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650056295
    },
    {
        "content": "<p>Since the types are respectively <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_equiv\">docs#alg_equiv</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_hom\">docs#alg_hom</a></p>",
        "id": 279123051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650056314
    },
    {
        "content": "<p>The naming of all these conversions should be the obvious ones given the names of the types</p>",
        "id": 279123087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650056344
    },
    {
        "content": "<p>The names of the types are a bit harder to guess</p>",
        "id": 279123113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650056363
    },
    {
        "content": "<p>Hmm, that worked but now a composition of algebra homs is not an algebra hom...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.aeval</span> <span class=\"o\">((</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">polynomial.X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">to_alg_hom</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2_3</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">map2_1</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map2_2</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">map2_3</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279123457,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650056546
    },
    {
        "content": "<p>You have to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_hom.comp\">docs#alg_hom.comp</a>, not <code>∘</code> which is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.comp\">docs#function.comp</a>.</p>",
        "id": 279123581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650056637
    },
    {
        "content": "<p>You can also compose algebra isoms using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alg_equiv.trans\">docs#alg_equiv.trans</a></p>",
        "id": 279123684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650056678
    },
    {
        "content": "<p>So many new things! Thank you so much! Is there a nicer notation for <code>alg_hom.comp</code>? Something like <code>∘\\_a</code>?</p>",
        "id": 279124015,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650056864
    },
    {
        "content": "<p>No, unfortunately not <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 279124042,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650056880
    },
    {
        "content": "<p>Got it, thanks!</p>",
        "id": 279124125,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650056902
    },
    {
        "content": "<p>Off-topic: would it make sense to create a stream called \"help\" so I don't flood \"new members\" with specific questions like this one?</p>",
        "id": 279124191,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650056942
    },
    {
        "content": "<p>Note: even though there is no nice notation for <code>alg_hom.comp</code> there is dot notation. So, if <code>f</code> and <code>g</code> are <code>alg_hom</code>s, then you can write <code>f.comp g</code> for <code>alg_hom.comp f g</code>.</p>",
        "id": 279124465,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650057147
    },
    {
        "content": "<p>As for the stream, I think the purpose of new members is mostly for helping new members.</p>",
        "id": 279124495,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650057178
    },
    {
        "content": "<p>While I have your attention, could I get advice on how to make Lean faster? I have this file here, which is 30 lines long, and takes over ten seconds to compile. Each time I change anything, I have to wait for a few seconds to see if it compiles, which really adds up. Here is the file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">counit</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.aeval</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.aeval</span> <span class=\"o\">((</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">polynomial.X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"n\">alg_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">to_alg_hom</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2_3</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">alg_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">map2_1</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.comp</span> <span class=\"o\">(</span><span class=\"n\">map2_2</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map2_3</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"n\">map1</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">map1</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">map1</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">comul</span><span class=\"o\">,</span>\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279124737,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650057375
    },
    {
        "content": "<p>The reason I split <code>map2</code> into three different definitions is that otherwise it times out on compilation...</p>",
        "id": 279124776,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650057410
    },
    {
        "content": "<p>That's not an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, so I can't really tell what's going on.</p>",
        "id": 279124834,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650057479
    },
    {
        "content": "<p>First guess: try putting a <code>.</code> on the line after the imports.</p>",
        "id": 279124908,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650057514
    },
    {
        "content": "<p>I know it's not a MWE. The problem is that each line takes a second or two, so as I try to make this example more minimal, the problem goes away</p>",
        "id": 279124997,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650057558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> is this something that <code>noncomputable!</code> is supposed to help with? I don't really know the purpose of that yet.</p>",
        "id": 279125170,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650057605
    },
    {
        "content": "<p>By MWE, I mean that I don't have the <code>Hopf</code> file, so I can't open up what you sent me on my machine and have it compile to see if I can figure out where the problem is.</p>",
        "id": 279125252,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650057641
    },
    {
        "content": "<p>I don't really understand why my maps aren't computable, by the way. Mathematically, they are very explicit</p>",
        "id": 279125260,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650057652
    },
    {
        "content": "<p>This is because polynomials in mathlib are noncomputable by design.</p>",
        "id": 279125277,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650057691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20the.20two.20maps.20from.20an.20isomorphism/near/279125252\">said</a>:</p>\n<blockquote>\n<p>By MWE, I mean that I don't have the <code>Hopf</code> file, so I can't open up what you sent me on my machine and have it compile to see if I can figure out where the problem is.</p>\n</blockquote>\n<p>My bad! I changed it now. Hopf just imports <code>ring_theory.tensor_product</code></p>",
        "id": 279125315,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650057722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20the.20two.20maps.20from.20an.20isomorphism/near/279124908\">said</a>:</p>\n<blockquote>\n<p>First guess: try putting a <code>.</code> on the line after the imports.</p>\n</blockquote>\n<p>What does that do?</p>",
        "id": 279125504,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650057847
    },
    {
        "content": "<p>I think it tells Lean to stop recompiling the stuff above, but I can't seem to find documentation to point you to. Maybe someone else can provide a better answer.</p>",
        "id": 279125860,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650058132
    },
    {
        "content": "<p>The <code>.</code> prevents Lean from recompiling everything that's before <em>in the same file</em>. No point putting it just after the imports.</p>",
        "id": 279126331,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650058559
    },
    {
        "content": "<p>What it does precisely is preventing Lean from recompiling what's before on a keystroke.</p>",
        "id": 279126397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650058604
    },
    {
        "content": "<p>The way <code>.</code> works is that it's part of the definition syntax -- when it's there then Lean says to itself \"ok, this is definitely the end of the definition.\" That way when you change stuff after the <code>.</code>, Lean can restart processing from that checkpoint without reprocessing starting from the checkpoint immediately preceding the definition.</p>",
        "id": 279126768,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650058886
    },
    {
        "content": "<p>Ah, now that I put it after my definition, it works a lot faster! Thanks.</p>",
        "id": 279126969,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650059044
    },
    {
        "content": "<p>You can also use <code>set_option profiler true</code> to figure out where Lean is spending its time.</p>",
        "id": 279127075,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650059157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> It seems like <code>noncomputable!</code> doesn't help. The breakdown from <code>set_option profiler true</code> is that it's spending most of the time elaborating (I'm guessing typeclass search?). What <code>noncomputable!</code> helps with is time spent compiling VM code by not spending time doing that, but it doesn't do very much when Lean tells you you need <code>noncomputable</code> (in that case, it's already not doing VM compilation).</p>",
        "id": 279127129,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650059170
    },
    {
        "content": "<p>I am sorry but I have more questions. I am trying to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.aeval_X\">docs#polynomial.aeval_X</a>. It uses a coersion of <code>aeval</code>. But my state has only a non-coerced <code>aeval</code>. Here is my state:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">K</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">symm.to_alg_hom.comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">X</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">X</span><span class=\"o\">))))</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">aeval</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">X</span><span class=\"o\">)))</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>I want to rewrite <code>aeval (X ⊗ₜ[K] 1 + 1 ⊗ₜ[K] X) X</code> as <code>X ⊗ₜ[K] 1 + 1 ⊗ₜ[K] X</code>. Here is the full file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra.tensor_product</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">counit</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.aeval</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">comul</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.aeval</span> <span class=\"o\">((</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">⊗ₜ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span> <span class=\"n\">polynomial.X</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.assoc</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">symm.to_alg_hom.comp</span> <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">alg_hom.id</span> <span class=\"n\">K</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">comul</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span>\n<span class=\"bp\">.</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coassoc</span> <span class=\"o\">:</span> <span class=\"n\">map1</span> <span class=\"n\">K</span> <span class=\"bp\">=</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">map1</span> <span class=\"n\">K</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">map2</span> <span class=\"n\">K</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">map1</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">map2</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">comul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aeval_X</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"c1\">-- why does this not work?</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">algebra.tensor_product.assoc</span><span class=\"o\">,</span>\n\n\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279127163,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650059222
    },
    {
        "content": "<p>The only thing <code>noncomputable!</code> does when Lean already wants <code>noncomputable</code> to be there is to skip a certain check that tends not to be very expensive.</p>",
        "id": 279127167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650059226
    },
    {
        "content": "<p><del>docs#polynomial.aeval_X</del> sorry, I didn't read well enough.</p>",
        "id": 279127317,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650059381
    },
    {
        "content": "<p>Right, so in this case, you have <code>aeval</code> as an <code>alg_hom</code>, because it's composed with other <code>alg_hom</code>s. What you need is the lemma that says for <code>alg_hom</code>s <code>f</code> and <code>g</code>, <code>⇑(f.comp g) x = ⇑f (⇑g x)</code>. However, you can instead do a squeeze_simp after your first three unfolds to get a nicer goal, and this also takes care of your issue. The result of squeeze_simp for me was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">alg_equiv.to_alg_hom_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">alg_equiv.coe_alg_hom</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">aeval_X</span><span class=\"o\">,</span> <span class=\"n\">_root_.map_add</span><span class=\"o\">,</span> <span class=\"n\">map_tmul</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.coe_id</span><span class=\"o\">,</span> <span class=\"n\">id.def</span><span class=\"o\">,</span> <span class=\"n\">aeval_one</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 279127968,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650059884
    },
    {
        "content": "<p>The lemma I was mentioning is in this list: <code>alg_hom.coe_comp</code> as well as <code>polynomial.aeval_X</code> because they are both simp lemmas.</p>",
        "id": 279128007,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650059927
    },
    {
        "content": "<p>Another question (sorry!): <br>\nhow to I extract the actual map sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo>⊗</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a \\otimes (b \\otimes c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⊗</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">(a \\otimes b) \\otimes c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>  from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.tensor_product.assoc\">docs#algebra.tensor_product.assoc</a>?</p>",
        "id": 279130639,
        "sender_full_name": "Vasily Ilin",
        "timestamp": 1650062064
    },
    {
        "content": "<p>I suppose that map should do that on basic tensors by definition.</p>",
        "id": 279131071,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1650062503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20the.20two.20maps.20from.20an.20isomorphism/near/279126331\">said</a>:</p>\n<blockquote>\n<p>The <code>.</code> prevents Lean from recompiling everything that's before <em>in the same file</em>. No point putting it just after the imports.</p>\n</blockquote>\n<p>At least from the orange sidebars it looks like putting the <code>.</code> after the imports does do something, it stops lean thinking the imports have changed and rechecking them when you work near the top of a file</p>",
        "id": 279134951,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650066259
    },
    {
        "content": "<p>And the fact that the map on basic tensors does what it should is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.tensor_product.assoc_tmul\">docs#algebra.tensor_product.assoc_tmul</a></p>",
        "id": 279134993,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650066306
    },
    {
        "content": "<p>It turns out <code>.</code> is a \"command-like\" that does nothing, so you can put in anywhere top-level commands can go, including right after the imports. That supports what <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> suggests about it preventing import reprocessing. <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/parser.cpp#L2877\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/parser.cpp#L2877</a></p>\n<p>This is in addition to it being part of the syntax for definition commands. It signals \"end of equations.\" <a href=\"https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/definition_cmds.cpp#L579\">https://github.com/leanprover-community/lean/blob/master/src/frontends/lean/definition_cmds.cpp#L579</a></p>",
        "id": 279135649,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650067036
    },
    {
        "content": "<p>That's good to know. I usually put <code>#check 37</code> or something right after the imports if I'm editing the first definition/theorem of a new file.</p>",
        "id": 279135742,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650067098
    },
    {
        "content": "<p>(I think the reason for <code>.</code> in the definition syntax is to let you write zero-equation definitions like <code>example : false → false .</code>. This reprocessing stuff is a side-effect.)</p>",
        "id": 279135910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650067252
    },
    {
        "content": "<p>Oh, so the two <code>.</code> are actually one and the same? Interesting!</p>",
        "id": 279155109,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650096217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414458\">@Vasily Ilin</span> don't apologise for question spamming. We don't yet have extensive documentation and learning is made easier if you ask questions. The people subscribed to this stream are happy to help -- those that don't want to see a bunch of new members questions simply have this stream muted.</p>",
        "id": 279156966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650098911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20the.20two.20maps.20from.20an.20isomorphism/near/279155109\">said</a>:</p>\n<blockquote>\n<p>Oh, so the two <code>.</code> are actually one and the same? Interesting!</p>\n</blockquote>\n<p>I'm not sure what you mean exactly, but to be clear there are two different meanings for <code>.</code>: the first signifies end-of-equations for the def/theorem/lemma/instance/example commands, and the second is a do-nothing command (which is actually older! It was <a href=\"https://github.com/leanprover-community/lean/commit/2e8ebb6d9eee45dfbcaeeca9c4fc5063b0fc634c\">added by Leo in 2014</a> before you could even define or prove anything -- I'd guess the end-of-equations <code>.</code> was meant to feel like a special use of the do-nothing command).  Lean makes checkpoints between commands, so in the end all that matters is that the <code>.</code> character is able to clearly demarcate the end of a command (or, in the case of an isolated <code>.</code>, the clear beginning and end of an entire command).</p>\n<p><code>.</code> is pretty overloaded, though, so it being clear depends on the command preceding it being complete. I was able to think of the following uses of <code>.</code>: separators for names, inaccessible patterns, tactic default arguments, decimal points for numeric literals, projection notation, end-of-equations, and the dot command.</p>",
        "id": 279175820,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650126931
    },
    {
        "content": "<p>I got confused then. What you're describing is my understanding of things pre Kyle's yesterday message.</p>",
        "id": 279175944,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650127093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/get.20the.20two.20maps.20from.20an.20isomorphism/near/279126331\">said</a>:</p>\n<blockquote>\n<p>The <code>.</code> prevents Lean from recompiling everything that's before <em>in the same file</em>. No point putting it just after the imports.</p>\n</blockquote>\n<p>There's sometimes a point putting <code>.</code> right after the imports, since, being a command, it induces Lean to create a checkpoint that prevents import re-processing, which feels like it sometimes takes a few seconds.</p>",
        "id": 279176060,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650127232
    },
    {
        "content": "<p>But in the example, you were right that it wouldn't do anything, but it's since <code>open_locale</code> is a command, too, so editing further down in the file won't reprocess imports anyway.</p>",
        "id": 279176074,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650127302
    },
    {
        "content": "<p>Anyway, this has been another episode of Saturday morning Lean archaeology. (Morning for me at least, and while 2014 wasn't that long ago, it's a long time in Lean years.)</p>",
        "id": 279176290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650127632
    }
]