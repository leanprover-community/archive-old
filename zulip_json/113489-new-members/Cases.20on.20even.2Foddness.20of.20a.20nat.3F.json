[
    {
        "content": "<p>I'm trying to formalize the proof given here <a href=\"https://cs.uwaterloo.ca/~cbruni/videos/Math135SeptDec2015/Lesson01ppplusoneprime.pdf\">https://cs.uwaterloo.ca/~cbruni/videos/Math135SeptDec2015/Lesson01ppplusoneprime.pdf</a>, which wants me to inspect whether a nat is even or odd. Besides writing the type of the theorem, I'm not sure how to make progress here.</p>",
        "id": 221995467,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610050921
    },
    {
        "content": "<p>I've gotten as far as <code>theorem prime_and_prime_succ : ∀ p, prime p → prime (p + 1) → p = 2 := sorry</code></p>",
        "id": 221995563,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610050966
    },
    {
        "content": "<p>You can start the proof with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n<span class=\"n\">intro</span>  <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">nat.even_or_odd</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221995726,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610051044
    },
    {
        "content": "<p>just what i was looking for, thanks. i can probably get it from there</p>",
        "id": 221995776,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610051071
    },
    {
        "content": "<p>Ooops, I think you have to <code>import data.nat.parity</code>  too</p>",
        "id": 221995930,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610051149
    },
    {
        "content": "<p>More generally you can use <code>by_cases h : some_prop</code> if you have an arbitrary condition you want to case on</p>",
        "id": 221995956,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610051160
    },
    {
        "content": "<p>But the lemma above will be more convenient for even/odd</p>",
        "id": 221996064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610051195
    },
    {
        "content": "<p>And I misread your goal,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prime_and_prime_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"n\">hp_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">nat.even_or_odd</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n</code></pre></div>\n<p>would be way better!</p>",
        "id": 221996282,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610051282
    },
    {
        "content": "<p>how could i have found even_or_odd for myself?</p>",
        "id": 221996427,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610051351
    },
    {
        "content": "<p>I just guessed the name, that requires a little experience with the naming convention though.<br>\nYou can try searching on <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a> by typing in the top right, I put \"even odd\" in and it came up as the fourth result or something</p>",
        "id": 221996669,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610051467
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 221996723,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610051501
    },
    {
        "content": "<p>Or if desperate, <code>example (n : \\N) : is_even n \\or is_odd n := by library_search</code></p>",
        "id": 221996744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610051511
    },
    {
        "content": "<p>thanks all!</p>",
        "id": 221996886,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610051568
    },
    {
        "content": "<p>how can i refine </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>into <code>n = 0</code>?</p>",
        "id": 221998401,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610052412
    },
    {
        "content": "<p>got  it  -- <code>rw h at hn</code> and then linarith</p>",
        "id": 221999017,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610052730
    },
    {
        "content": "<p>took me two hours, but i managed to prove it. anyone mind critiquing my solution for style/ergonomics/anything?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">prime_and_prime_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">hprime</span> <span class=\"n\">hprimesucc</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">even_or_odd</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">hprime2</span> <span class=\"o\">:=</span> <span class=\"n\">hprime</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hprime</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hprime_right</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">n_div_p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">dvd.intro_left</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">hn</span><span class=\"o\">)</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"n\">cases</span> <span class=\"n\">hprime_right</span> <span class=\"n\">n_div_p</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">p_zero</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n\n    <span class=\"n\">by_contradiction</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">not_prime_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">p_zero</span> <span class=\"n\">at</span> <span class=\"n\">hprime2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hprime2</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hprimesucc</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">n_div_succ_p</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">succ</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">refine</span> <span class=\"n\">even_iff_two_dvd.mp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">even_succ.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">odd_iff_not_even.mp</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">specialize</span> <span class=\"n\">hprimesucc_right</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hprimesucc_right</span> <span class=\"n\">n_div_succ_p</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">n_zero</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">n_zero</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">not_prime_one</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">p_one</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">p_one</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hprime</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222001691,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610054023
    },
    {
        "content": "<p>in particular i hate <code>let hprime2 := hprime, cases hprime</code> to work around <code>cases</code> destroying my term</p>",
        "id": 222001993,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610054157
    },
    {
        "content": "<p>An easy ergonomics thing to start: you can move your forall before the colon as <code>{p} (hprime : prime p) (hprimesucc : prime (p + 1)) : p = 2</code>, which removes the need for <code>intros</code></p>",
        "id": 222002921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610054624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"375678\">Sandy Maguire</span> <a href=\"#narrow/stream/113489-new-members/topic/Cases.20on.20even.2Foddness.20of.20a.20nat.3F/near/222001691\">said</a>:</p>\n<blockquote>\n<p>took me two hours, but i managed to prove it. anyone mind critiquing my solution for style/ergonomics/anything?</p>\n</blockquote>\n<p>Can you post fully working code? (with all imports and open and etc)</p>",
        "id": 222004518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610055392
    },
    {
        "content": "<p>oh got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n</code></pre></div>",
        "id": 222004614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610055441
    },
    {
        "content": "<p>I would prove this first:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_two_of_prime_and_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">prime_dvd_prime_iff_eq</span> <span class=\"n\">prime_two</span> <span class=\"n\">hn'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">even_iff_two_dvd.mp</span> <span class=\"n\">hn</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222005289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610055758
    },
    {
        "content": "<p><code>let h2 := h</code> -- you can use <code>have</code> here instead of <code>let</code>, because <code>h</code> is a proof.</p>",
        "id": 222005717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610055966
    },
    {
        "content": "<p>Here's my first try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prime_and_prime_succ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hp.eq_two_or_odd</span> <span class=\"k\">with</span> <span class=\"n\">H</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hp'.eq_two_or_odd</span> <span class=\"k\">with</span> <span class=\"n\">H'</span> <span class=\"n\">H'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">succ_inj'</span> <span class=\"n\">at</span> <span class=\"n\">H'</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hp.ne_one</span> <span class=\"n\">H'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">odd_iff</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">succ_inj'</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">],</span>\n      <span class=\"kd\">end</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">not_even_iff</span> <span class=\"n\">at</span> <span class=\"n\">H'</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">H'</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Undoubtedly this can be golfed further...</p>",
        "id": 222006842,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610056506
    },
    {
        "content": "<p>But the proof looks fine, you step forwards showing the stuff in the proof. Here's a shorter proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"c1\">-- an even prime must be 2</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_two_of_prime_and_even</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal now 2 = n</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">prime_dvd_prime_iff_eq</span> <span class=\"n\">prime_two</span> <span class=\"n\">hn'</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal now 2 ∣ n which is easy</span>\n  <span class=\"n\">exact</span> <span class=\"n\">even_iff_two_dvd.mp</span> <span class=\"n\">hn</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">prime_and_prime_succ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hprime</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hprimesucc</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- p is even or odd</span>\n  <span class=\"n\">cases</span> <span class=\"n\">even_or_odd</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- if it's even we're done by the previous lemma</span>\n    <span class=\"n\">exact</span> <span class=\"n\">eq_two_of_prime_and_even</span> <span class=\"n\">hp</span> <span class=\"n\">hprime</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- odd case can't happen so let's prove a contradiction</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- suffices to prove 1 is prime</span>\n    <span class=\"n\">apply</span> <span class=\"n\">not_prime_one</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- so it suffices to prove p = 1</span>\n    <span class=\"n\">convert</span> <span class=\"n\">hprime</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- so it suffices to prove p+1 = 2</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat.add_right_cancel</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- but p+1 is prime so it suffices to prove it's even</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">eq_two_of_prime_and_even</span> <span class=\"n\">_</span> <span class=\"n\">hprimesucc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- so it suffices to prove p is isn't even</span>\n    <span class=\"n\">rw</span> <span class=\"n\">even_succ</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- which we can do because it's odd</span>\n    <span class=\"n\">exact</span> <span class=\"n\">odd_iff_not_even.mp</span> <span class=\"n\">hp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222007113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610056624
    },
    {
        "content": "<p>Of course I'm cheating by not formalising the proof you showed, but a shorter proof.</p>",
        "id": 222007273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610056698
    },
    {
        "content": "<p>i'll grok my way through these tomorrow. they're SIGNIFICANTLY shorter!</p>",
        "id": 222007369,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610056761
    },
    {
        "content": "<p>i'd heard great things about this community but never imagined it'd be THIS helpful &lt;3</p>",
        "id": 222007509,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610056818
    },
    {
        "content": "<p>Kevin's is nicer because he extracts a lemma that'd be reasonable to PR to mathlib.</p>",
        "id": 222007535,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610056832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> i just watched your talk on the future of mathematics, and it was wildly inspiring. thanks for giving it!</p>",
        "id": 222007908,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610057001
    },
    {
        "content": "<p>Great! Now go formalise a bunch more stuff :-)</p>",
        "id": 222007947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610057024
    },
    {
        "content": "<p>Alternative approach to Kevin's lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_two_of_prime_and_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">odd_iff_not_even</span><span class=\"o\">,</span> <span class=\"n\">odd_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hn'.eq_two_or_odd.resolve_left</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222052922,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610099060
    }
]