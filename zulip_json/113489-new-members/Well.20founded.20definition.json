[
    {
        "content": "<p>I have a definition (minimal working example) of a recursive definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>It gives me errors about well-foundedness. How do I prove that it is?</p>",
        "id": 205059584,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1595783487
    },
    {
        "content": "<p>Maybe your MWE is a little too minimal, as in this case you don't need an inductive definition at all, or at least you can make an induction on the first argument as a separate def and then make a function from pairs to pairs using that.<br>\nHowever the way to do this using a recursor is to specify why its well founded, in this case by saying that the length of the first list in the pair is the thing which gets smaller at each step</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">test</span> <span class=\"o\">([</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 205060429,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595784962
    },
    {
        "content": "<p>The syntax looks a bit complicated but this line is pretty common, most of the time all you need to change is the <code>(λ f, f.1.length)</code> part to be a function from your input to nat that decreases with each step, see <a href=\"https://leanprover-community.github.io/extras/well_founded_recursion.html\">https://leanprover-community.github.io/extras/well_founded_recursion.html</a></p>",
        "id": 205060481,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595785079
    },
    {
        "content": "<p>You could alternatively do</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">test_aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">([],</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">test_aux</span> <span class=\"n\">l</span> <span class=\"n\">m</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">lm</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">test_aux</span> <span class=\"n\">lm</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">lm</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 205062581,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1595788917
    },
    {
        "content": "<p>Great! Thanks Alex. I did not notice my mwe was a bit degenerate. The solution Bhavik wrote out does also work for my original problem it seems, so thanks for that as well, but I am glad to learn the general solution.</p>",
        "id": 205098994,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1595844101
    },
    {
        "content": "<p>Could lean provide a <code>has_well_founded</code> for product types to make the <code>test_aux</code> version  unecessary?</p>",
        "id": 205101852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595846278
    },
    {
        "content": "<p>It does</p>",
        "id": 205102063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595846406
    },
    {
        "content": "<p>The problem is not that the theorem is not true, it is just not proven automatically</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">well_founded_tactics</span><span class=\"bp\">.</span><span class=\"n\">default_dec_tac</span><span class=\"o\">]}</span>\n</code></pre></div>",
        "id": 205102506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595846773
    },
    {
        "content": "<p>It would be great if <code>well_founded_tactics.default_dec_tac</code> could be in the error message</p>",
        "id": 205102951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595847127
    },
    {
        "content": "<p>Instead of just \"the default decreasing tactic\"</p>",
        "id": 205102961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595847141
    },
    {
        "content": "<p>The usual way you prove well foundedness assumptions is to throw away the default tactic and give a manual proof</p>",
        "id": 205103091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595847282
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">has_well_founded</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">well_founded_tactics</span><span class=\"bp\">.</span><span class=\"n\">default_dec_tac</span><span class=\"o\">),</span>\n  <span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 205103221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595847389
    },
    {
        "content": "<p>And usually when you do this you find that the well founded measure is not very good, so you provide your own</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">([],</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_succ_self</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">test</span><span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">]}</span>\n</code></pre></div>\n\n\n<p>although as Alex showed, <code>well_founded_tactics.default_dec_tac</code> will prove this side goal on its own</p>",
        "id": 205103375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595847540
    },
    {
        "content": "<p>If I add these <code>simp</code> lemmas, then <code>simp</code> can handle the proof:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">prod_lex_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span> <span class=\"n\">ra</span> <span class=\"n\">rb</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">ra</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"bp\">∧</span> <span class=\"n\">rb</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h_h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h_h</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lex</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">append_ne_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">l_ih</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">self_ne_append</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">append_ne_self</span> <span class=\"n\">a</span> <span class=\"n\">l</span>\n</code></pre></div>\n\n\n<p>but looks like <code>well_founded_tactics.default_dec_tac</code> does not attempt <code>simp</code> anyway</p>",
        "id": 205105482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595849404
    },
    {
        "content": "<p>Would adding a <code>if t.is_napp_of `prod.lex` </code> to <code>well_founded_tactics.process_lex</code> make the proof automatic here?</p>",
        "id": 205105727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595849639
    },
    {
        "content": "<p>Opened a PR I have no idea how to build or test at <a href=\"https://github.com/leanprover-community/lean/pull/414\">https://github.com/leanprover-community/lean/pull/414</a></p>",
        "id": 205241641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595946157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <a href=\"https://github.com/leanprover-community/lean/blob/master/doc/make/index.md#generic-build-instructions\">https://github.com/leanprover-community/lean/blob/master/doc/make/index.md#generic-build-instructions</a><br>\nDo those help?</p>",
        "id": 205241846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595946259
    },
    {
        "content": "<p>I was hoping to rebuild the core lib without having to rebuild the C++ component</p>",
        "id": 205242481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595946543
    },
    {
        "content": "<p>Aah, you can do that</p>",
        "id": 205242553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595946578
    },
    {
        "content": "<p>I think you need to run <code>lean --make</code> in <code>library/</code></p>",
        "id": 205242670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595946617
    },
    {
        "content": "<p>The other issue I have is swapping out my git <code>library</code> in place of my <code>.elan</code> one</p>",
        "id": 205243256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595946914
    },
    {
        "content": "<p>I suppose I could just edit the elan one in place...</p>",
        "id": 205243270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595946922
    },
    {
        "content": "<p>No... you need to tell <code>elan</code> about the new one</p>",
        "id": 205244010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595947260
    },
    {
        "content": "<p>I always forget the correct incantation</p>",
        "id": 205244023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595947268
    },
    {
        "content": "<p>We should add it to that docs page</p>",
        "id": 205244034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595947278
    },
    {
        "content": "<p>See for example:<br>\n<a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196194753\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196194753</a></p>",
        "id": 205244154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595947325
    }
]