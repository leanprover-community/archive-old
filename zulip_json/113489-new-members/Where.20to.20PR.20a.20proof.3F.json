[
    {
        "content": "<p>I've PR'ed a proof (<a href=\"https://github.com/leanprover-community/mathlib/issues/10624\">#10624</a>) of a generalisation of <code>prime.dvd_mul</code> for the product of a <code>list ℕ</code>.  I'm wondering if it would be useful to also PR my proofs of the corresponding statements for <code>finset</code> and <code>finsupp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.dvd_prod</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">S.prod</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finsupp.dvd_prod</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">f.prod</span> <span class=\"n\">pow</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">f.support</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 264202991,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638989881
    },
    {
        "content": "<p>If so, where should these proofs go?   For example, no file in <code>data/finset</code> seems to know about <code>prime</code>, while <code>data/nat/prime</code> doesn't know about <code>finset.prod</code>.</p>",
        "id": 264203214,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638989962
    },
    {
        "content": "<p>those look like <code>algebra.big_operators</code></p>",
        "id": 264203307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638989997
    },
    {
        "content": "<p>Maybe <code>algebra/big_operators/prime.lean</code>?</p>",
        "id": 264203402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638990016
    },
    {
        "content": "<p>If it doesn't exist yet, feel free to start it</p>",
        "id": 264203451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638990028
    },
    {
        "content": "<p>It doesn't, so I shall.  Thanks very much.</p>",
        "id": 264203642,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638990104
    },
    {
        "content": "<p>More generally, if you have a proof that involves definitions/theorems <code>X</code> and <code>Y</code>, is there a general method to determine which files know about both of them?</p>",
        "id": 264203863,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638990195
    },
    {
        "content": "<p>You might find this python script helpful.<br>\n<a href=\"#narrow/stream/113488-general/topic/Finding.20homes.20for.20lemmas/near/260255746\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Finding.20homes.20for.20lemmas/near/260255746</a></p>",
        "id": 264204420,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1638990426
    },
    {
        "content": "<p>for <code>finsupp.dvd_prod</code>, can't it be <code>p \\| a</code>? also you can probably generalize this to some level of <code>monoid</code></p>",
        "id": 264204966,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638990650
    },
    {
        "content": "<p>Well, there is always the <code>nat.prime</code> vs <code>prime</code> issue. I guess these lemmas should be called something like <code>nat.prime.dvd_prod_iff</code></p>",
        "id": 264205834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638991029
    },
    {
        "content": "<p>Thanks all for your help.  PR'ed as <a href=\"https://github.com/leanprover-community/mathlib/issues/10675\">#10675</a></p>",
        "id": 264211258,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638993407
    },
    {
        "content": "<p>I wasn't sure how the various <code>nat</code>, <code>prime</code> and <code>finset</code>/<code>finsupp</code> prefixes should stack up.  From the root namespace is there a standard order in which these should go?  That is, should these be <code>nat.prime.finset.dvd_prod_iff</code> or  <code>finset.nat.prime.dvd_prod_iff</code> or something else?</p>",
        "id": 264212069,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638993703
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 264212276,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638993810
    },
    {
        "content": "<p>You shouldn't literally stack namespaces</p>",
        "id": 264212792,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638994047
    },
    {
        "content": "<p>No, I've put the two lemmas in separate namespaces <code>finset</code> and <code>finsupp</code>.</p>",
        "id": 264212975,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638994121
    },
    {
        "content": "<p>Within these, should each lemma then be called <code>nat.prime.dvd_prod_iff</code>?</p>",
        "id": 264213037,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638994164
    },
    {
        "content": "<p>In that case, you have an hypothesis of type <code>nat.prime</code>, so you should start with <code>nat.prime</code> for dot notation to work. Then it depends on the specific convention. Here I would do something like <code>nat.prime.dvd_finset_prod_iff</code></p>",
        "id": 264213044,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638994171
    },
    {
        "content": "<p>Yeah, that's precisely what I don't want you to do. You (usually) shouldn't have something like <code>nat.prime.finset</code> or <code>finset.nat.prime</code>.</p>",
        "id": 264213188,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638994220
    },
    {
        "content": "<p>Ok, I'll get rid of the namespaces and rename them as you suggested.</p>",
        "id": 264213384,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638994313
    }
]