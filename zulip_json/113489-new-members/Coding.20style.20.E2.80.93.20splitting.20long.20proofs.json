[
    {
        "content": "<p>Soft question (coding style):</p>\n<p>Do you split long proofs into several lemmata just because the proof is too long? Even if they aren't logically independent pieces by using only a small subset of the propositions that are present inside the proof?</p>",
        "id": 293991157,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660776528
    },
    {
        "content": "<p>For mathlib, I would say \"generally not.\" However, unless the proof is about a deep result, there is often a way to split it up into pieces, even if it means a major rewrite, or using other parts of the library better. That being said, there can always be exceptions to both statements above.</p>",
        "id": 294001007,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660785203
    },
    {
        "content": "<p>One reason to split up a large proof is if it improves compile times</p>",
        "id": 294002158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660785899
    },
    {
        "content": "<p>lemmas are processed in parallel, and additionally a long proof can involve a large local context which makes all other tactics slower</p>",
        "id": 294002182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660785927
    },
    {
        "content": "<p>it's also just easier to work with when you are writing the proof since the response time is smaller</p>",
        "id": 294002254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660785989
    },
    {
        "content": "<p>that last reason is probably the most direct reason to split a long proof, it just gets too annoying to write otherwise</p>",
        "id": 294002361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660786107
    },
    {
        "content": "<p>I think I made a mistake that I was taking only the logical structure into account but not the length of the respective parts. I made a few levels of decomposition, after which I basically stopped breaking things apart. As a result, I have a proof that consists of 36 lemmata; many of them are under 10 lines, but some of them are longer, and one of them is a monstrous lemma with a proof of 1100 lines.</p>\n<p>The response time <em>cries in Lean</em> was really annoying.</p>",
        "id": 294149989,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660848952
    },
    {
        "content": "<p>A proof of 1100 lines is certainly a good enough reason to split it. Are you sure that lemma can't be deconstructed further? It seems very surprising to me. We have a few long proofs in mathlib, but I'm not sure I know of any that are over say, 200 lines [other community members please insert links to counterexamples here].</p>",
        "id": 294151701,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660849534
    },
    {
        "content": "<p>I think there are counterexamples, but I generally associate ultra-long proofs with folks who haven't quite learned the coding style yet</p>",
        "id": 294151975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660849634
    },
    {
        "content": "<p>It would be nice if someone could do some statistics on mathlib proof length distribution and outliers</p>",
        "id": 294152186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660849713
    },
    {
        "content": "<p>unfortunately <code>environment.decl_pos</code> only has the start position and not the end</p>",
        "id": 294152646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660849888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/113489-new-members/topic/Coding.20style.20.E2.80.93.20splitting.20long.20proofs/near/294151701\">said</a>:</p>\n<blockquote>\n<p>A proof of 1100 lines is certainly a good enough reason to split it. Are you sure that lemma can't be deconstructed further? It seems very surprising to me. We have a few long proofs in mathlib, but I'm not sure I know of any that are over say, 200 lines [other community members please insert links to counterexamples here].</p>\n</blockquote>\n<p>It can be. I just made a mistake that I stopped after a few levels of decomposition.</p>",
        "id": 294152971,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660850013
    },
    {
        "content": "<p>After which I was splitting things only if they were using only a small subset of propositions in the place where they were used.</p>",
        "id": 294153105,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660850057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Coding.20style.20.E2.80.93.20splitting.20long.20proofs/near/294151975\">said</a>:</p>\n<blockquote>\n<p>(...) folks who haven't quite learned the coding style yet</p>\n</blockquote>\n<p>Yep, this is me!</p>",
        "id": 294153163,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660850084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> As a first approximation, you could just subtract successive <code>environment.decl_pos</code> values. It wouldn't be accurate because of variable declarations, section headings, but I think only really long docstrings would feed into the outliers, and these might be small enough in number to discard manually.</p>",
        "id": 294153639,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660850282
    },
    {
        "content": "<p>I just wrote a fix for lean so that the .ast.json stores command ends correctly, so if we update lean and run it on mathlib we can get accurate data here</p>",
        "id": 294153811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660850344
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/756\">lean#756</a></p>",
        "id": 294154365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1660850596
    }
]