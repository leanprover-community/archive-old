[
    {
        "content": "<p>Hello, I am new to lean. I am trying to prove <br>\n ![proof](<a href=\"https://cdn.discordapp.com/attachments/549314199386456114/963521900624101416/unknown.png\">https://cdn.discordapp.com/attachments/549314199386456114/963521900624101416/unknown.png</a>)<br>\nI am trying to pattern match on c. The zero case is trivial, but I'm not sure how to handle the succ case.</p>\n<div class=\"message_inline_image\"><a href=\"https://cdn.discordapp.com/attachments/549314199386456114/963521900624101416/unknown.png\"><img src=\"https://uploads.zulipusercontent.net/2422f32b8a88bd98fefd75a36d2198dc90a84cad/68747470733a2f2f63646e2e646973636f72646170702e636f6d2f6174746163686d656e74732f3534393331343139393338363435363131342f3936333532313930303632343130313431362f756e6b6e6f776e2e706e67\"></a></div><p>Thanks in advance</p>",
        "id": 278742518,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649792016
    },
    {
        "content": "<p>It's better if you paste code with <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> instead of pasting images.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The bottom one is how you'll see in mathlib more often</p>",
        "id": 278743517,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649792542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  yeah, sorry about that</p>",
        "id": 278743632,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649792605
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subtract_to_equation</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">acbc</span>\n  <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">pc</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">inner</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">subtract_to_equation</span>\n    <span class=\"n\">simp_all</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this is what I have right now</p>",
        "id": 278743989,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649792800
    },
    {
        "content": "<p>In particular this feels uncomfortable because the c is in a negative-ish position while the tutorials usually use induction on  a positive position</p>",
        "id": 278744208,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649792918
    },
    {
        "content": "<p>A few things:</p>\n<ul>\n<li>Are you aware of what <code>simp_all</code> is doing? I'd go a bit slower at this point in order to attain a better understand what's going on</li>\n<li>You shouldn't be using the theorem to prove itself. It sounds either super hacky or just logically cyclic</li>\n<li>have you tried induction?</li>\n</ul>",
        "id": 278744711,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649793192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Yes, what I am doing there is basically induction on c. C is just implicit so it doesn't look like it</p>",
        "id": 278744877,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649793263
    },
    {
        "content": "<p>An induction will add an inductive hypothesis to your context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subtract_to_equation</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">acbc</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">acbc</span>\n    <span class=\"n\">exact</span> <span class=\"n\">acbc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">pc</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 278745031,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649793345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> Oo, I didn't know there was a tactic for that (although that's exactly what I was doing before, just not by hand)</p>",
        "id": 278745168,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649793402
    },
    {
        "content": "<p>wait, actually</p>",
        "id": 278745211,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649793432
    },
    {
        "content": "<p>you are probably right, let me see</p>",
        "id": 278745235,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649793445
    },
    {
        "content": "<p>nah, nevermind, it does seem to be doing the same thing</p>",
        "id": 278745286,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649793471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20basic.20nat.20arithmetic.20equality/near/278744711\">said</a>:</p>\n<blockquote>\n<p>You shouldn't be using the theorem to prove itself. It sounds either super hacky or just logically cyclic</p>\n</blockquote>\n<p>It can be OK -- it's just a recursive function call, and Lean will make sure it's well-founded. It does feel more fiddly than using <code>induction</code> though, since <code>induction</code> gives you the guaranteed safe way to recurse in the form of the induction hypothesis.</p>",
        "id": 278746020,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649793818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486803\">@Matei Adriel</span> try <code>#check Nat.add_right_cancel</code> and ctrl+click on it</p>",
        "id": 278746443,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649794019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Is there a toy example of this you can think of? I've never seen it</p>",
        "id": 278746593,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1649794088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486803\">Matei Adriel</span> <a href=\"#narrow/stream/113489-new-members/topic/Proving.20basic.20nat.20arithmetic.20equality/near/278743989\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">subtract_to_equation</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">acbc</span>\n  <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp_all</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">pc</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">inner</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">pc</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">subtract_to_equation</span>\n    <span class=\"n\">simp_all</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this is what I have right now</p>\n</blockquote>\n<p>I'm not checking this in Lean 4, but I think you might be able to do is rewrite your <code>acbc</code> hypothesis to <code>Nat.succ (a + pc) = Nat.succ (b + pc)</code>, simplify that  to remove the <code>Nat.succ</code>, then do <code>exact inner acbc</code>.</p>",
        "id": 278746650,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649794120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> thanks, didn't know that was a built in thing</p>\n<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> howdo I \"simply that to remove the succ\"?</p>",
        "id": 278746848,
        "sender_full_name": "Matei Adriel",
        "timestamp": 1649794211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I just found one in mathlib: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/combinatorics/simple_graph/connectivity.lean#L397\">https://github.com/leanprover-community/mathlib/blob/master/src/combinatorics/simple_graph/connectivity.lean#L397</a> (the last line of that lemma is a recursive use of the lemma to do induction)</p>",
        "id": 278746901,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649794238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486803\">@Matei Adriel</span> I'm not sure off the top of my head -- does <code>simp at acbc</code> do it?</p>",
        "id": 278747083,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649794334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486803\">@Matei Adriel</span> Or it might be <code>injection acbc</code></p>",
        "id": 278747168,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649794391
    }
]