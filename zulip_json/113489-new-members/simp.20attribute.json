[
    {
        "content": "<p>Dear All,</p>\n<p>this question is mostly for my own education about <code>simp</code>.</p>\n<p>With my very limited understanding of how <code>simp</code> works, I would have thought that the lemma below would not fire with <code>simp</code>, due to the hypothesis <code>h</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">to_nat_pred_coe_of_pos</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">i.to_nat</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p><del>I tried proving this lemma using <code>by simp [h]</code> and I could not get it to work.</del><br>\nProving this lemma using <code>by simp [h]</code> works, but <code>by simp</code> does not.</p>\n<p>However, the <code>simp</code> attribute is in <a href=\"https://github.com/leanprover-community/mathlib/blob/fefe359d48630c94826dfc387b17602518156a55/src/data/int/basic.lean#L1194\">data.int.basic</a>.</p>\n<p>What is the <code>simp</code> attribute doing in this case?</p>\n<p>Thanks!</p>",
        "id": 273768165,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646207818
    },
    {
        "content": "<p>It means that <code>simp</code> will try to use the lemma <code>to_nat_pred_coe_of_pos</code>. But it can only use if after it knows how to prove <code>h</code>. So you either pass it <code>h</code> directly, like you did. Or you hope that other simp lemmas can provide a proof of <code>h</code>, recursively. The latter will be unlikely for a generic <code>0 &lt; i</code> proof. But if <code>i = 1</code>, then it will probably work.</p>",
        "id": 273769091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646208276
    },
    {
        "content": "<p>Ah, thanks for the explanation!  I had not realized about the specific number case!</p>",
        "id": 273769353,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1646208439
    }
]