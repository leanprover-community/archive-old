[
    {
        "content": "<p>I'm trying to prove </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n</code></pre></div>\n<p>and having one heck of a hard time. I'd assume there's a lemma somewhere for this, but i can't find it and <code>norm_num</code> is no help. Any tips?</p>",
        "id": 222997128,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610821284
    },
    {
        "content": "<p>There are lots of <code>pow_mul</code>s for nats, but none for reals afaict</p>",
        "id": 222997552,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610821767
    },
    {
        "content": "<p>The real power function is in <code>analysis.special_functions.pow</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_mul</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222997564,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610821789
    },
    {
        "content": "<p>Sandy, you need to learn about <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> in order to help people helping you.</p>",
        "id": 222997638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610821839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> mind being more specific about that?</p>",
        "id": 222997685,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610821902
    },
    {
        "content": "<p>Did you follow the link?</p>",
        "id": 222997709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610821923
    },
    {
        "content": "<p>It's pretty specific.</p>",
        "id": 222997744,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610821932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> thanks, that's helpful. tho i think this is true even for negative <code>x</code> in the case of <code>y = 3</code>, <code>z = 3^-1</code></p>",
        "id": 222997751,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610821947
    },
    {
        "content": "<p>well wolfram alpha disagrees with me :)</p>",
        "id": 222998097,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> my confusion here is that i don't see how the problem statement doesn't pose enough information. hypothetically, what could be going wrong that me giving you the imports would help clarify?</p>",
        "id": 222998494,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822662
    },
    {
        "content": "<p>are there lots of <code>^</code>s i need to worry about?</p>",
        "id": 222998516,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822691
    },
    {
        "content": "<p>The type of 3 is one crucial thing here, and it comes with <code>^</code>.</p>",
        "id": 222998526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610822706
    },
    {
        "content": "<p>Also it's just much more convenient to copy and paste working code than having to figure out which imports and namespaces are needed...</p>",
        "id": 222998546,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610822737
    },
    {
        "content": "<p>yeah, fair. they're all Reals (which i learned the hard way)</p>",
        "id": 222998548,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822738
    },
    {
        "content": "<p>And providing a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that others can simply copy-paste to their editor is simply showing respect.</p>",
        "id": 222998549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610822738
    },
    {
        "content": "<p>noted. thanks</p>",
        "id": 222998606,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822775
    },
    {
        "content": "<p>The trick is to at least pretend you can imagine that the time of people that are ready to help is as worthy as yours.</p>",
        "id": 222998619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610822794
    },
    {
        "content": "<p>i think it's a difference of community culture is all. i come from hs land where people do all the reasoning in their head</p>",
        "id": 222998637,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822820
    },
    {
        "content": "<p>no disrespect meant</p>",
        "id": 222998648,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822831
    },
    {
        "content": "<p>Ok, let me mute this thread then.</p>",
        "id": 222998669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1610822869
    },
    {
        "content": "<p>There are times when people post questions in the style you posted, when I've not been able to get a working Lean session with the question in, because I can't figure out the imports. This is why I think MWEs are cool :-)</p>",
        "id": 222998673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610822876
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">lecture11</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">injective</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">idiot</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">lecture11</span>\n</code></pre></div>",
        "id": 222998723,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822908
    },
    {
        "content": "<p>so here's a MWE. is there a way i can prove this for all <code>x</code>, not just those &gt;= 0?</p>",
        "id": 222998741,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822931
    },
    {
        "content": "<p>I'm not sure it's true in Lean</p>",
        "id": 222998771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610822973
    },
    {
        "content": "<p><span aria-label=\"surprise\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"surprise\">:surprise:</span></p>",
        "id": 222998782,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610822992
    },
    {
        "content": "<p>x^(1/2) won't be correctly defined for every real number, because the result must be real</p>",
        "id": 222998845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823026
    },
    {
        "content": "<p>so probably if x&lt;0 then x^(1/2)=0 because it will have to be something</p>",
        "id": 222998862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823047
    },
    {
        "content": "<p>x^pi is meaningless if x is negative</p>",
        "id": 222998874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823058
    },
    {
        "content": "<p>so I would be very surprised if x^(1/3) happens to be the thing you want it to be if x&lt;0</p>",
        "id": 222998904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823080
    },
    {
        "content": "<p>I haven't looked at the definition but it would not surprise me if a^b is a random junk value e.g. 0 or 1 if a&lt;0</p>",
        "id": 222998945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823120
    },
    {
        "content": "<p>is the issue that ^(1/3) just incidentally happens to compute the cube root, but isn't defined as <code>cuberoot (x^3) = x</code>?</p>",
        "id": 222999000,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823141
    },
    {
        "content": "<p>If I had to define x^y in Lean I'd probably go for exp(y*log(x))</p>",
        "id": 222999028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823174
    },
    {
        "content": "<p>you can't just define x^(1/3), you have to define x^(any real number at all)</p>",
        "id": 222999046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823192
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/AGQ1y7f3stfGhk6msp6BytAM/2021-01-16-105246_486x369_scrot.png\">2021-01-16-105246_486x369_scrot.png</a>   here's the exercise i'm working through</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AGQ1y7f3stfGhk6msp6BytAM/2021-01-16-105246_486x369_scrot.png\" title=\"2021-01-16-105246_486x369_scrot.png\"><img src=\"/user_uploads/3121/AGQ1y7f3stfGhk6msp6BytAM/2021-01-16-105246_486x369_scrot.png\"></a></div>",
        "id": 222999061,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823213
    },
    {
        "content": "<p>so it's highly unlikely to say \"if y is a rational number which happens to have an odd denominator then there's a way of making this make sense\"</p>",
        "id": 222999067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823222
    },
    {
        "content": "<p>i think i might not be a sophisticated-enough mathematician to appreciate the point you're trying to express</p>",
        "id": 222999133,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823249
    },
    {
        "content": "<p>^ has type <code>real -&gt; real -&gt; real</code></p>",
        "id": 222999162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823284
    },
    {
        "content": "<p>So what do you think (-2)^(1/2) is?</p>",
        "id": 222999172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823295
    },
    {
        "content": "<p>i understand that this isn't true for <code>y=2</code> and <code>z=1/2</code>, and i think you're saying \"since it's not true for some cases, we need to define it in a way that works for all of them, and there are no special cases for the odd naturals\"?</p>",
        "id": 222999173,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823295
    },
    {
        "content": "<p>about what pow is for negative x: the doc of <code>real.rpow</code> states \"For x &lt; 0, the definition is somewhat arbitary as it depends on the choice of a complex determination of the logarithm. With our conventions, it is equal to exp (y log x) cos (πy).\"</p>",
        "id": 222999175,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610823297
    },
    {
        "content": "<p>you might be lucky then</p>",
        "id": 222999286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823372
    },
    {
        "content": "<p>i'm confused about whether or not this is a problem in my understanding,  in the given proof, or in how lean is implemented</p>",
        "id": 222999313,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823411
    },
    {
        "content": "<p>and whether anything will go wrong if i just introduce an axiom for <code>\\forall z, z^3^(1/3) = z</code></p>",
        "id": 222999478,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823543
    },
    {
        "content": "<p>it might not be true! It might be though</p>",
        "id": 222999584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823633
    },
    {
        "content": "<p>sorry, what might not be true? the axiom?</p>",
        "id": 222999614,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823663
    },
    {
        "content": "<p>right</p>",
        "id": 222999625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823669
    },
    {
        "content": "<p>I do not know if it's true or not, I will have to read the docstring but I'm in a lecture right now</p>",
        "id": 222999648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610823696
    },
    {
        "content": "<p>this isn't a burning question that i'm going to stay up all night wondering about</p>",
        "id": 222999668,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823719
    },
    {
        "content": "<p>if you're curious i'd be happy to know the answer, but please don't put yourself out</p>",
        "id": 222999713,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823728
    },
    {
        "content": "<p>but this exercise has definitely decreased some of my trust in lean if i can't just show the first-year first-week example as it's given</p>",
        "id": 222999792,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610823817
    },
    {
        "content": "<p>there will be a lemma in mathlib saying that <code>x |-&gt; x ^ 3</code> is injective. That should be good enough</p>",
        "id": 223000049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610824072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"375678\">@Sandy Maguire</span> you should see one of the slides in the talk I just gave :-) I'll post it when I'm done here</p>",
        "id": 223000111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610824114
    },
    {
        "content": "<p>I don't think that this should decrease your trust in <strong>Lean</strong>, but there are definitely things we could do to make mathlib more accessible / easier to use.</p>",
        "id": 223000244,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610824258
    },
    {
        "content": "<p>see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/injective_pow_p\">docs#injective_pow_p</a> for the statement that x^p is injective for p in N.</p>",
        "id": 223000254,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610824275
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/E93GzeIA7mI3sFdQWw_QVq5p/2not1.png\">2not1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/E93GzeIA7mI3sFdQWw_QVq5p/2not1.png\" title=\"2not1.png\"><img src=\"/user_uploads/3121/E93GzeIA7mI3sFdQWw_QVq5p/2not1.png\"></a></div>",
        "id": 223000270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610824296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> that's not the one you want... it's for perfect rings of characteristic <code>p</code>...</p>",
        "id": 223000311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610824324
    },
    {
        "content": "<p>oh yes indeed. i was suprised about the p in the name. Sorry</p>",
        "id": 223000342,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610824359
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/msUnJXzMcWbPxJ02E-fERcvX/slide_before.png\">slide_before.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/msUnJXzMcWbPxJ02E-fERcvX/slide_before.png\" title=\"slide_before.png\"><img src=\"/user_uploads/3121/msUnJXzMcWbPxJ02E-fERcvX/slide_before.png\"></a></div>",
        "id": 223000351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610824374
    },
    {
        "content": "<p>Me trying to formalise undergraduate mathematics in 2017</p>",
        "id": 223000368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610824389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"375678\">Sandy Maguire</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/222999792\">said</a>:</p>\n<blockquote>\n<p>but this exercise has definitely decreased some of my trust in lean if i can't just show the first-year first-week example as it's given</p>\n</blockquote>\n<p>[joking] does this mean it also decreases your trust in haskell, because I don't think you can do this exercise in haskell either... [/joking]</p>",
        "id": 223000374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610824396
    },
    {
        "content": "<p>there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_left_inj\">docs#pow_left_inj</a> for positive inputs</p>",
        "id": 223000474,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610824488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223000374\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"375678\">Sandy Maguire</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/222999792\">said</a>:</p>\n<blockquote>\n<p>but this exercise has definitely decreased some of my trust in lean if i can't just show the first-year first-week example as it's given</p>\n</blockquote>\n<p>[joking] does this mean it also decreases your trust in haskell, because I don't think you can do this exercise in haskell either... [/joking]</p>\n</blockquote>\n<p>fair --- but i don't even pretend to be productive haskell :)</p>",
        "id": 223000501,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610824522
    },
    {
        "content": "<p>don't we have a lemma stating that x^n is injective for n odd? I can't find one.</p>",
        "id": 223000548,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610824534
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_power/basic.html#pow_left_inj\">https://leanprover-community.github.io/mathlib_docs/algebra/group_power/basic.html#pow_left_inj</a> is the closest I got</p>",
        "id": 223000569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610824559
    },
    {
        "content": "<p>maybe nobody ever cared about odd powers until today <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 223000632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610824597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223000244\">said</a>:</p>\n<blockquote>\n<p>I don't think that this should decrease your trust in <strong>Lean</strong>, but there are definitely things we could do to make mathlib more accessible / easier to use.</p>\n</blockquote>\n<p>that's fair. i'm such a noob that lean and mathlib are the same to me</p>",
        "id": 223000647,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610824616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223000632\">said</a>:</p>\n<blockquote>\n<p>maybe nobody ever cared about odd powers until today <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>\n</blockquote>\n<p>that's the other thing i never know. am i an idiot or a trailblazer? ... or both? :)</p>",
        "id": 223000675,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610824652
    },
    {
        "content": "<p>we only got odd numbers in 2020 I think ;-)</p>",
        "id": 223000677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610824656
    },
    {
        "content": "<p>It seems that the negative case evaluates to something weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real.rpow_def_of_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">real.pi</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">real.pi</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">real.cos_int_mul_two_pi_add_pi</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.exp_mul</span><span class=\"o\">,</span> <span class=\"n\">real.exp_log_of_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_neg_one</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnz</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">-</span><span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">neg_pos_of_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnz3</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">neg_neg_of_pos</span> <span class=\"o\">(</span><span class=\"n\">real.rpow_pos_of_pos</span> <span class=\"n\">hnz</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hnz3'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pos_of_neg_neg</span> <span class=\"n\">hnz3</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.rpow_def_of_neg</span> <span class=\"n\">hnz3</span><span class=\"o\">,</span> <span class=\"n\">real.log_neg_eq_log</span><span class=\"o\">,</span> <span class=\"n\">real.exp_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">real.exp_log</span> <span class=\"n\">hnz3'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">real.rpow_mul</span> <span class=\"n\">hnz.le</span><span class=\"o\">,</span> <span class=\"n\">inv_eq_one_div</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"n\">_</span> <span class=\"n\">real.pi</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_one_div</span> <span class=\"n\">real.pi</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">real.cos_pi_div_three</span><span class=\"o\">,</span> <span class=\"n\">mul_one_div</span><span class=\"o\">,</span> <span class=\"n\">mul_one_div</span><span class=\"o\">,</span> <span class=\"n\">div_self</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>golfing, etc. welcome!</p>",
        "id": 223000762,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610824753
    },
    {
        "content": "<p>i think i'm going to proceed by introducing an axiom to eliminate <code>^3^(1/3)</code> and go on my merry way</p>",
        "id": 223001046,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610825047
    },
    {
        "content": "<p>so <code>-z/2</code> ?</p>",
        "id": 223001048,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610825052
    },
    {
        "content": "<p>thanks for all of your input everyone</p>",
        "id": 223001051,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610825054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223001048\">said</a>:</p>\n<blockquote>\n<p>so <code>-z/2</code> ?</p>\n</blockquote>\n<p>it's the real part of two of the complex cube roots... clearly they outvoted the other complex cube root <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 223001277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610825345
    },
    {
        "content": "<p>could we change the definition of real.rpow to have <code>x^(n:R) = x^(n:N)</code> for all x in R? without breaking everything that is</p>",
        "id": 223001284,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1610825370
    },
    {
        "content": "<p>wait, that should already be the case</p>",
        "id": 223001426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610825572
    },
    {
        "content": "<p>I think cos(Pi/3)=0.5 so the theorem really is false.</p>",
        "id": 223001457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610825611
    },
    {
        "content": "<p>Regarding the crazy discontinuous definition of x^y for negative x, I suppose we can do that but I think it would be better to use a dedicated function</p>",
        "id": 223001466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610825630
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"375678\">@Sandy Maguire</span> if a theorem doesn't work out, don't force it with an axiom! Make a better definition that satisfies the properties you want instead</p>",
        "id": 223001556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610825733
    },
    {
        "content": "<p>In this case, I would suggest something like <code>def cube_root (x : R) := if x &gt;= 0 then x ^ (1/3) else -((-x) ^ (1/3))</code></p>",
        "id": 223001632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610825813
    },
    {
        "content": "<p>(I've edited my snippet to show that it's indeed <code>-z/2</code>. This was probably much more painful than it had to be.)</p>",
        "id": 223001659,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610825862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> that's a good idea. does anything go wrong with this axiom if i only use it locally in this proof? is it just a matter of bad style?</p>",
        "id": 223001771,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610825926
    },
    {
        "content": "<p>No, it's inconsistent</p>",
        "id": 223001784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610825935
    },
    {
        "content": "<p>You are asserting a thing lean knows to be false, anything will follow and math crumbles</p>",
        "id": 223001803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610825962
    },
    {
        "content": "<p>please don't assert axioms that you know to be disprovable</p>",
        "id": 223001808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610825979
    },
    {
        "content": "<p>well what i'm really proving is <code>example : injective (λ (x : ℝ), 2 * x^(3 : ℝ) + 1)</code>  --- whcih i think IS true?</p>",
        "id": 223001863,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610826009
    },
    {
        "content": "<p>That is true</p>",
        "id": 223001870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610826035
    },
    {
        "content": "<p>my proof sucks, admittedly</p>",
        "id": 223001883,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610826069
    },
    {
        "content": "<p>You can use <code>cube_root</code> if you want an explicit inverse in order to prove injectivity</p>",
        "id": 223001885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610826070
    },
    {
        "content": "<p>i think i see your point</p>",
        "id": 223001889,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610826081
    },
    {
        "content": "<p>i am torn between \"i hate this example and want to move onto something else\" vs just doing it right</p>",
        "id": 223001897,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610826104
    },
    {
        "content": "<p>and i think i'll do the latter. thanks for the push</p>",
        "id": 223001899,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610826109
    },
    {
        "content": "<p>There are a lot of <code>.injective</code> lemmas which should let you chain together a neat-looking proof of your statement with dot notation.</p>",
        "id": 223001906,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610826118
    },
    {
        "content": "<p>do we have a <code>.injective</code> for rpow though? That seems to be the crux of it</p>",
        "id": 223001953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610826149
    },
    {
        "content": "<p>Oh right. Whoops.</p>",
        "id": 223001964,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610826183
    },
    {
        "content": "<p>Or even <code>monoid.pow</code>, we know that's equal</p>",
        "id": 223001965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610826184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> your cube_root is noncomputable and lean yells at me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- axiom cube_root (x : ℝ) : (x ^ (3 : ℝ)) ^ (3 : ℝ)⁻¹ = x</span>\n\n<span class=\"kd\">@[noncomputable]</span> <span class=\"kd\">def</span> <span class=\"n\">cube_root</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">injective</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">idiot</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">cube_root</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">cube_root</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223001983,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610826239
    },
    {
        "content": "<p>The whole alternating odd/even thing seems like it would be better suited as a theorem about <code>monoid.pow</code></p>",
        "id": 223002021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610826246
    },
    {
        "content": "<p><code>noncomputable</code> is a keyword, not an attribute</p>",
        "id": 223002027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610826256
    },
    {
        "content": "<p>that does it. thanks</p>",
        "id": 223002032,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610826265
    },
    {
        "content": "<p>also you probably need to put a type ascription on the 1/3's</p>",
        "id": 223002056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610826324
    },
    {
        "content": "<p>lean usually can't figure out the type in an exponent because it's not determined from context, so it will default to nat and that's definitely not what you want here because then 1/3=0</p>",
        "id": 223002120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610826378
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 223002124,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610826387
    },
    {
        "content": "<p>i learned that the hard way the other day</p>",
        "id": 223002126,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610826391
    },
    {
        "content": "<p>okay, working on proving this with the cube_root... now getting stuck saying i can't apply a rewrite that pretty obviously seems like it should apply</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">cube_root</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">injective</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hxycube</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">idiot</span> <span class=\"o\">:</span> <span class=\"n\">cube_root</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">cube_root</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cube_root</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hxycube</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">real.rpow_one</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">real.rpow_one</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nonzero_of_invertible</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hxycube</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n\n\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223004063,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610828446
    },
    {
        "content": "<p>also golfing tips GREATLY appreciated</p>",
        "id": 223004080,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610828472
    },
    {
        "content": "<p>tho i really really feel like i'm going against the grain here. it feels like this shouldn't be so hard to prove</p>",
        "id": 223004115,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610828523
    },
    {
        "content": "<p><span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> does mathlib not know</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this is painful</p>",
        "id": 223004715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610829309
    },
    {
        "content": "<p><code>norm_num</code> and <code>norm_cast</code> don't help</p>",
        "id": 223004726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610829332
    },
    {
        "content": "<p>if I replace <code>3</code> by <code>n : nat</code> it does work</p>",
        "id": 223004781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610829381
    },
    {
        "content": "<p>replace (3 : real) with ((3 : nat) : real) first?</p>",
        "id": 223004798,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610829414
    },
    {
        "content": "<p>but <code>norm_cast</code> should be able to do that for me</p>",
        "id": 223004904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610829588
    },
    {
        "content": "<p>maybe i'm running into the same thing. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx_3</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_neg_iff</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">or.inr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mul_pos_iff.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">or.inr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx_3'</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>this assumption_mod_cast fails</p>",
        "id": 223004973,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610829653
    },
    {
        "content": "<p>and then <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> contradiction doesn't find any contradictions</p>",
        "id": 223005172,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610829845
    },
    {
        "content": "<p><code>rwa real.rpow_nat_cast</code> works, fwiw</p>",
        "id": 223005470,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610830217
    },
    {
        "content": "<p>Here's another approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"c1\">-- we should have this in mathlib!</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">rpow_odd_strict_mono</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">strict_mono.injective</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">strict_mono.add_const</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">strict_mono.const_mul</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">rpow_odd_strict_mono</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">real.rpow_nat_cast</span> <span class=\"n\">x</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I'm working on <code>rpow_odd_strict_mono</code> still...</p>",
        "id": 223005490,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610830252
    },
    {
        "content": "<p>and yet another approach. not sure about the proof of <code>pow_sub_pow</code> yet, but I think this proves that for all <code>odd n</code>, <code>x^n</code> is injective.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_of_odd_pow_pos</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_pos_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hx.1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">hx1</span> <span class=\"n\">hx2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx2</span><span class=\"o\">,</span>\n    <span class=\"n\">nlinarith</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">neg_of_odd_pow_neg</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_neg_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">hx1</span> <span class=\"n\">hx2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx2</span><span class=\"o\">,</span>\n    <span class=\"n\">nlinarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hx.1</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_pow_pos_iff_pos</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pos_of_odd_pow_pos</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">odd_pow_neg_iff_neg</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">neg_of_odd_pow_neg</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_neg_of_neg_of_pos</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">pow_two_pos_of_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">pow_eq_zero</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_sub_pow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">finset.range</span> <span class=\"n\">n.succ</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_odd_inj_of_pos</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_sub_pow</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">finset.sum_const_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset.sum_lt_sum</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">le_of_lt</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">mul_pos</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">pow_pos</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">pow_pos</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hy</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">],</span>\n        <span class=\"n\">apply</span> <span class=\"n\">pow_two_pos_of_ne_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">pow_eq_zero</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n        <span class=\"n\">linarith</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">sub_eq_zero_iff_eq</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hxy</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">linarith</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_odd_inj_of_neg</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pow_odd_inj_of_pos</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">neg_pow</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">neg_pow</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">nat.neg_one_pow_of_odd</span> <span class=\"n\">hn</span><span class=\"o\">],</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_odd_inj</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"bp\">|</span><span class=\"n\">rfl</span><span class=\"bp\">|</span><span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">odd_pow_pos_iff_pos</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">odd_pow_pos_iff_pos</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">pow_odd_inj_of_pos</span> <span class=\"n\">hn</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">hxy</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxy</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pow_eq_zero</span> <span class=\"n\">hxy.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.odd_gt_zero</span> <span class=\"n\">hn</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hxy</span><span class=\"o\">,</span> <span class=\"n\">odd_pow_neg_iff_neg</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">odd_pow_neg_iff_neg</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">pow_odd_inj_of_neg</span> <span class=\"n\">hn</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"n\">hxy</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223005682,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1610830468
    },
    {
        "content": "<p>seeing all of these big scary suggestions makes me feel better about not being able to get it on my own</p>",
        "id": 223005716,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610830539
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nonneg_of_pow_nonneg</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_mul'</span><span class=\"o\">,</span> <span class=\"n\">mul_nonneg_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_two_nonneg</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">hx0</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">pow_two_nonneg</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pow_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">pow_eq_zero</span> <span class=\"n\">hx'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">ge</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_nonneg_iff</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">nonneg_of_pow_nonneg</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pow_nonneg</span> <span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_neg_iff</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">not_iff_not</span><span class=\"o\">],</span> <span class=\"n\">push_neg</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">pow_nonneg_iff</span> <span class=\"n\">hn</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_neg_eq_neg_pow_of_odd</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">neg_pow_bit1</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0_eq_two_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.pos_of_odd</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_left_inj_of_odd</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_lt</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">hx</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_nonneg_iff</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pow_nonneg_iff</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pow_left_inj</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"o\">(</span><span class=\"n\">nat.pos_of_odd</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_neg_iff</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">pow_neg_iff</span> <span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_nonneg</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hx.le</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hy'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">neg_nonneg</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hy.le</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">pow_left_inj</span> <span class=\"n\">hx'</span> <span class=\"n\">hy'</span> <span class=\"o\">(</span><span class=\"n\">nat.pos_of_odd</span> <span class=\"n\">hn</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">},</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_neg_eq_neg_pow_of_odd</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">neg_inj</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pow_left_inj_of_odd</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223006496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610831419
    },
    {
        "content": "<p>it's not exactly the strict_mono from Bryan's approach... but well</p>",
        "id": 223006524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610831480
    },
    {
        "content": "<p>I don't have time to turn this into a PR... but if someone else wants to do that, please go ahead <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 223006630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610831604
    },
    {
        "content": "<p>Poking at Sandy's approach a little more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hx3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_neg_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">hx3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">pow_two_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hx3</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">pow_eq_zero</span> <span class=\"n\">hx3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ge</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223007041,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610832099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> amazing! ooc how did decide to use <code>lt_of_le_of_ne</code>?</p>",
        "id": 223007695,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610832929
    },
    {
        "content": "<p>(I finished my proof of <code>rpow_odd_strict_mono</code> finally and edited it into <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223005490\">my message above</a>. There's surely a better way, but I ended up just following my nose instead of thinking about the math... )</p>",
        "id": 223017219,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610846669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"375678\">@Sandy Maguire</span> I needed to prove 0 &lt; x², so it seemed helpful to point out the fact that 0 &lt;= x², so I'd only need to rule out x² = 0</p>",
        "id": 223037750,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610881865
    },
    {
        "content": "<p>Sandy -- sorry for not really finishing my sentences yesterday -- I was busy doing something else and just occasionally looking at the chat. What is going on in the proof that you posted is that there's a \"cube root\" function involved, which is the inverse map to the bijection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">x\\mapsto x^3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> on the reals. The point is that Lean does not have that function right now (at least not until this thread) and in particular the function <code>lam x, x^(1/3:real)</code>, which looks superficially similar, is <em>not</em> this function. The point is that that <code>rpow</code>, which is what <code>^</code> expands to, is defined for all real inputs and is what you think it is for positive reals, but returns junk values for negative reals. The reason for this is that even though <em>coincidentally</em> there is a good choice of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{1/3}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span> for negative real <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, there really is no good choice of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>r</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span> for an arbitrary real number when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is negative, and <code>rpow</code> makes no attempt to distinguish between the real numbers for which there is a good choice (which happen to be the rational numbers with odd denominator) and the real numbers for which there is no good choice -- it just returns junk if x is negative, in all cases. There is no problem formalising this proof in Lean, but you will need the cube root function which is defined on all the reals, so this function needs to be made first.</p>",
        "id": 223038486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610883038
    },
    {
        "content": "<p>So if we're free to choose a junk value for <code>rpow</code> with negative x, could we choose one that matches the good definition when it exists? Or would that cause too much trouble elsewhere?</p>",
        "id": 223039262,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1610884417
    },
    {
        "content": "<p>The value of <code>rpow</code> for negative <code>x</code> is not really junk. It is the real part of the complex-valued function given by <code>x ^ y = exp (x log y)</code>, where <code>log</code> is the principal branch of the complex logarithm.</p>",
        "id": 223039392,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610884683
    },
    {
        "content": "<p>The fact that it returns -1/2 on an input of (-1)^(1/3) certainly makes it look like junk -- it's just the real part of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">e^{2\\pi i/3}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span> but this answer is wrong on many levels :-) Given that the only possible values for the exponent where there happens to be a non-junk answer are rational, it makes me think that one could define a power function <code>real -&gt; rat -&gt; real</code> which returned the right answer when the real was negative and the rational had odd denominator, and that this would perhaps be the more sensible approach.</p>",
        "id": 223039809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610885323
    },
    {
        "content": "<p>You want the power function to be continuous, and even analytic where it can be. Well, I don't know if you want it, but <em>I</em> want it :-)</p>",
        "id": 223039837,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610885389
    },
    {
        "content": "<p>Of course every definition comes with a cost, and the cost here would be the theorems saying that it agrees with <code>rpow</code> when the base is positive, and that it satisfies stuff like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mi>a</mi><mi>b</mi></mrow></msup><mo>=</mo><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mi>a</mi></msup><msup><mo stretchy=\"false\">)</mo><mi>b</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^{ab}=(x^a)^b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span></span></span> even sometimes when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is negative.</p>",
        "id": 223039887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610885429
    },
    {
        "content": "<p>And you want it to be compatible with casts, also.</p>",
        "id": 223039888,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610885430
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223039837\">said</a>:</p>\n<blockquote>\n<p>You want the power function to be continuous, and even analytic where it can be. Well, I don't know if you want it, but <em>I</em> want it :-)</p>\n</blockquote>\n<p>You are talking about behaviour in the second variable here I guess. This phenomenon about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{1/3}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span> happening to make sense for negative <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is something which is happening on a discrete set, which is why I am suggesting rational powers, where things like continuity are not really so meaningful.</p>",
        "id": 223039953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610885551
    },
    {
        "content": "<p>well it's not called <code>qpow</code> is it? :)</p>",
        "id": 223040523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610886634
    },
    {
        "content": "<p>I think that the power function is rather unfortunately overloaded in mathematics</p>",
        "id": 223040532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610886667
    },
    {
        "content": "<p>Even before Lean I was well aware that you need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mrow><mo>−</mo><mi>s</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">n^{-s}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span></span></span></span></span> to make sense for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>&gt;</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">n\\in\\mathbb{R}_{&gt;0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.86626em;vertical-align:-0.17737em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">s\\in\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> so you can talk about the zeta function, but you also needed it to make sense for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">C</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">n\\in\\mathbb{C}^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">s\\in\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> to talk about integrating around poles etc. Each of those functions is well-behaved, the union of the two sets is random, and attempts to extend the definition to a larger set in a \"natural\" way are fraught with difficulty.</p>",
        "id": 223040891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610887213
    },
    {
        "content": "<p>Note that our definition has the right behavior both for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>&gt;</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">n \\in \\mathbb{R}_{&gt;0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.86626em;vertical-align:-0.17737em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">&gt;</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">s\\in \\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> on the one hand, and for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">n \\in \\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">s\\in \\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> on the other hand.</p>",
        "id": 223042278,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610889355
    },
    {
        "content": "<p>So does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/qpow\">docs#qpow</a> exist already then?</p>",
        "id": 223044963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610893431
    },
    {
        "content": "<p>No, we just have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rpow\">docs#rpow</a>, but <code>x ^ y</code> behaves well when <code>x</code> is positive, and also when <code>y</code> is (the cast of) an integer. It does not behave well for <code>y = 1/3</code>, though.</p>",
        "id": 223045107,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610893652
    },
    {
        "content": "<p>here's a crazy idea for qpow: <code>x ^ y := if y &lt; 0 then -((-x) ^ y) else x ^ y</code></p>",
        "id": 223045188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610893749
    },
    {
        "content": "<p>i.e. don't bother with the odd power thing, just always extend oddly</p>",
        "id": 223045212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610893801
    },
    {
        "content": "<p>That makes <code>(-4) ^ (1/2) = 2</code> which seems like a dangerous kind of garbage that is easy to not notice</p>",
        "id": 223045483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610894102
    },
    {
        "content": "<p>I know, but garbage is garbage</p>",
        "id": 223045499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894135
    },
    {
        "content": "<p>this version has the advantage that it's still somewhat continuous</p>",
        "id": 223045513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894160
    },
    {
        "content": "<p>AFAICT this gives the right answer whenever one exists</p>",
        "id": 223045572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894192
    },
    {
        "content": "<p>and if you are trying to solve <code>(-1)^(1/2)</code> over the reals, read an intro to complex analysis book</p>",
        "id": 223045588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894244
    },
    {
        "content": "<p>it also agrees in magnitude with the correct complex answer for all inputs</p>",
        "id": 223045643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894291
    },
    {
        "content": "<p>I'm more concerned about someone stating a theorem that is nonsense but happens to be true for that unusual definition of power</p>",
        "id": 223045645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610894296
    },
    {
        "content": "<p>that's <em>the point</em> of \"least bad\" garbage definitions</p>",
        "id": 223045659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894323
    },
    {
        "content": "<p>Right; my question is whether <code>0</code> is a less bad result for negative x and even denominator</p>",
        "id": 223045677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610894362
    },
    {
        "content": "<p>Which iirc correctly is what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sqrt\">docs#real.sqrt</a> gives</p>",
        "id": 223045685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610894381
    },
    {
        "content": "<p>well for example, you get a theorem of the form <code>x ^ y = 0 &lt;-&gt; x = 0</code> in some generality</p>",
        "id": 223045744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894409
    },
    {
        "content": "<p>Right, although that problem is already solved one way by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sqrt_eq_zero\">docs#real.sqrt_eq_zero</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.sqrt_eq_zero'\">docs#real.sqrt_eq_zero'</a></p>",
        "id": 223045789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610894519
    },
    {
        "content": "<p>yes, that's a fine solution for a function which just does square root, but that doesn't generalize very well</p>",
        "id": 223045845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894570
    },
    {
        "content": "<p>I suppose the other question to ask is whether real.sqrt should be redefined to match your qpow suggestion</p>",
        "id": 223045851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610894582
    },
    {
        "content": "<p>Does anyone use the current behavior?</p>",
        "id": 223045868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894626
    },
    {
        "content": "<p>I don't think it really matters except in the theorem that rewrites <code>odd_rpow</code> to <code>sqrt</code></p>",
        "id": 223045923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610894669
    },
    {
        "content": "<p>Mario, if you throw in an <code>abs</code> in the name, it is neither garage, nor misleading...</p>",
        "id": 223047826,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610897315
    },
    {
        "content": "<p>it's not an abs though</p>",
        "id": 223048407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610898010
    },
    {
        "content": "<p>it's negative for negative input</p>",
        "id": 223048412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610898019
    },
    {
        "content": "<p>Ah, I had missed the sign in front!  `signed_pow``. Not sure...</p>",
        "id": 223050429,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610900341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223045188\">said</a>:</p>\n<blockquote>\n<p>here's a crazy idea for qpow: <code>x ^ y := if x &lt; 0 then -((-x) ^ y) else x ^ y</code></p>\n</blockquote>\n<p>For <code>y = 2</code>, it doesn't give the square...</p>",
        "id": 223052264,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610902372
    },
    {
        "content": "<p>...right</p>",
        "id": 223052360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610902527
    },
    {
        "content": "<p>ok, plan B: <code>root x n := if x &lt; 0 then -((-x) ^ (1/n)) else x ^ (1/n)</code>. No claim that this is a general power function anymore, n is a natural number that you probably want to be odd</p>",
        "id": 223052520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610902710
    },
    {
        "content": "<p>actually in that case we can just as well do the alternations,<br>\n<code>root x n := if x &lt; 0 then (-1)^n * ((-x) ^ (1/n)) else x ^ (1/n)</code>.</p>",
        "id": 223052574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610902803
    },
    {
        "content": "<p>the idea being that there will be theorems of the form <code>root x n = x ^ (1/n)</code>, <code>root x n ^ m = x ^ (m/n)</code> and so on under limited conditions</p>",
        "id": 223052666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610902916
    },
    {
        "content": "<p>I don't know any practical utility to extending this root function to rationals with odd denominator; you can use <code>root (x^m) n</code> to express that</p>",
        "id": 223052732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610903000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223045188\">said</a>:</p>\n<blockquote>\n<p>here's a crazy idea for qpow: <code>x ^ y := if x &lt; 0 then -((-x) ^ y) else x ^ y</code></p>\n</blockquote>\n<p>i tried this yesterday for an hour or two (via your cube_root def) and still wasn't able to make the proof work. the issue is eliminating that negative that is now introduced --- i'd like to factor it into <code>(-1)^y * x^y</code> but then we run back into the <code>0&lt;=</code> constraint on rpow.</p>",
        "id": 223061898,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610915914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> here's as far as i could take it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hx3</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">real.rpow_nat_cast</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_neg_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">hx3</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"o\">(</span><span class=\"n\">pow_two_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">contrapose</span><span class=\"bp\">!</span> <span class=\"n\">hx3</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq.ge</span> <span class=\"n\">hx3</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">injective</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">cube_root</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">injective</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hxycube</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">idiot</span> <span class=\"o\">:</span> <span class=\"n\">cube_root</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">cube_root</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">cube_root</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hxycube</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">real.rpow_one</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">real.rpow_one</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nonzero_of_invertible</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">hxycube</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- simp at h,</span>\n    <span class=\"c1\">-- simp at hy,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">neg_one_mul</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">real.mul_rpow</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">neg_one_mul</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">real.mul_rpow</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">real.rpow_mul</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">real.rpow_one</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">real.rpow_one</span> <span class=\"n\">at</span> <span class=\"n\">idiot</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">nonzero_of_invertible</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">x_iff_x_cubed_ge_zero</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223061928,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610915963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223038486\">said</a>:</p>\n<blockquote>\n<p>Sandy -- sorry for not really finishing my sentences yesterday -- I was busy doing something else and just occasionally looking at the chat. What is going on in the proof that you posted is that there's a \"cube root\" function involved, which is the inverse map to the bijection <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><msup><mi>x</mi><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">x\\mapsto x^3</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span> on the reals. The point is that Lean does not have that function right now (at least not until this thread) and in particular the function <code>lam x, x^(1/3:real)</code>, which looks superficially similar, is <em>not</em> this function. The point is that that <code>rpow</code>, which is what <code>^</code> expands to, is defined for all real inputs and is what you think it is for positive reals, but returns junk values for negative reals. The reason for this is that even though <em>coincidentally</em> there is a good choice of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{1/3}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8879999999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">/</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span> for negative real <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, there really is no good choice of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>r</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span> for an arbitrary real number when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is negative, and <code>rpow</code> makes no attempt to distinguish between the real numbers for which there is a good choice (which happen to be the rational numbers with odd denominator) and the real numbers for which there is no good choice -- it just returns junk if x is negative, in all cases. There is no problem formalising this proof in Lean, but you will need the cube root function which is defined on all the reals, so this function needs to be made first.</p>\n</blockquote>\n<p>that's an extremely helpful elaboration, thank you kevin!</p>",
        "id": 223061993,
        "sender_full_name": "Sandy Maguire",
        "timestamp": 1610916010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"375678\">Sandy Maguire</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223061898\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223045188\">said</a>:</p>\n<blockquote>\n<p>here's a crazy idea for qpow: <code>x ^ y := if x &lt; 0 then -((-x) ^ y) else x ^ y</code></p>\n</blockquote>\n<p>i tried this yesterday for an hour or two (via your cube_root def) and still wasn't able to make the proof work. the issue is eliminating that negative that is now introduced --- i'd like to factor it into <code>(-1)^y * x^y</code> but then we run back into the <code>0&lt;=</code> constraint on rpow.</p>\n</blockquote>\n<p>Why are you factoring it? The idea here, explicit in the <code>if</code>, is to break into cases based on <code>x &lt; 0</code> or <code>0 &lt;= x</code>. In the second case it's just rpow and you're covered. In the first case, <code>x &lt; 0</code> means <code>0 &lt;= -x</code> so the properties of rpow imply <code>(-((-x) ^ (1/3))) ^ 3 = -(((-x) ^ (1/3)) ^ 3) = --x = x</code>. I think you are saying that the first equality is the one giving you trouble, because rpow isn't nice on negatives, but this one isn't rpow, it's <code>x ^ 3</code> which can be rewritten as an instance of <code>monoid.pow</code>, because the exponent is an integer, which does have the <code>(-x)^n = (-1)^n * x ^n</code> theorem you want.</p>",
        "id": 223076016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610937266
    },
    {
        "content": "<p>Reopening this thread. The following gives me a \"goals accomplished\" message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233377974,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617738624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"359379\">@Manuel Candales</span> That's because <code>(1/3)</code> is being interpreted as natural number division, which results in 0.</p>",
        "id": 233378422,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617738799
    },
    {
        "content": "<p>Try this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn't work</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233378562,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617738853
    },
    {
        "content": "<p><del>I think <code>(-1 : ℂ) ^ ((1 : ℂ)/3)</code> evaluates to <code>-1/2</code>, see <a href=\"#narrow/stream/113489-new-members/topic/Cube.20root.20of.20cubic.20is.20id.3F/near/223000762\">this post</a>. </del></p>",
        "id": 233378763,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617738930
    },
    {
        "content": "<p>I am confused about the 1/3 evaluating to 0, because I used 1/2 in a recent proof without casting it. Anyway, I'll try to figure that out on my own. But in any case, -1/2 so the real part of one of the complex square roots. That makes sense for rpow. But not for cpow. cpow is defined from C to C.</p>",
        "id": 233379336,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617739165
    },
    {
        "content": "<p>*cubic roots</p>",
        "id": 233379389,
        "sender_full_name": "Manuel Candales",
        "timestamp": 1617739190
    },
    {
        "content": "<p>Oh right, I missed the <code>cpow</code>!</p>",
        "id": 233379504,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1617739213
    },
    {
        "content": "<p><code>norm_num</code> doesn't know anything about real or complex powers. It can evaluate the exponent into a fraction but anything transcendental can't be evaluated</p>",
        "id": 233409988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617753837
    }
]