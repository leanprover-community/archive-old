[
    {
        "content": "<p>The <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html#coercions-using-type-classes\">section on coercions</a> in <em>Theorem Proving in Lean</em> (3) says that the output sort and function type are <em>fields</em> of the typeclasses <code>has_coe_to_sort</code> and <code>has_coe_to_fun</code>.  However, it seems that (now?) they are actually <em>parameters</em>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">has_coe_to_sort.coe</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">a</span> <span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">S</span>\n\n<span class=\"kd\">@[class]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">fields</span><span class=\"o\">:</span>\n<span class=\"n\">has_coe_to_fun.coe</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">a</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>In particular, the \"try it!\" boxes in this section do not work, unless I edit them to move the fields to parameters, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Semigroup_to_sort</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">S.carrier</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">morphism_to_fun</span> <span class=\"o\">(</span><span class=\"n\">S1</span> <span class=\"n\">S2</span> <span class=\"o\">:</span> <span class=\"n\">Semigroup</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">morphism</span> <span class=\"n\">S1</span> <span class=\"n\">S2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">S1</span> <span class=\"bp\">→</span> <span class=\"n\">S2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">m.mor</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Is this something that can be fixed in TPL3, for those of us still using and teaching with Lean 3?</p>",
        "id": 303697183,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665599267
    },
    {
        "content": "<p>Hmm, the easy fix would be to pin TPL to an older version of Lean. Would that be acceptible?</p>",
        "id": 303701283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665600684
    },
    {
        "content": "<p>That would make the \"try it!\" boxes work, but it would reduce the usefulness of TPL for people who want to learn Lean 3.  Shouldn't they want to learn the most recent version?</p>",
        "id": 303702754,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665601200
    },
    {
        "content": "<p>Well, the hope is that ~ 6 months from now they should want to learn Lean 4.</p>",
        "id": 303703473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665601431
    },
    {
        "content": "<p>So it's not clear whether it's worth it to try to bump TPL to recent Lean.</p>",
        "id": 303703621,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665601471
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> is still willing to maintain TPIL 3.</p>",
        "id": 303703657,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665601480
    },
    {
        "content": "<p>Yes, hopefully it won't be hard to fix. I'll take a look tomorrow.</p>",
        "id": 303725088,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1665610375
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 303731057,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665613781
    },
    {
        "content": "<p>Also: exercise 7.10.1 says</p>\n<blockquote>\n<p>you should work within a namespace named <code>hide</code>, or something like that, in order to avoid name clashes.</p>\n</blockquote>\n<p>but it appears that namespaces are not allowed to be named <code>hide</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">namespace</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">identifier</span> <span class=\"n\">expected</span>\n<span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">hide'</span> <span class=\"n\">command</span><span class=\"o\">,</span> <span class=\"n\">identifier</span> <span class=\"n\">expected</span>\n</code></pre></div>",
        "id": 303750052,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665628422
    },
    {
        "content": "<p>And it might be more helpful for section 1.2 to link to <a href=\"https://leanprover-community.github.io/\">https://leanprover-community.github.io/</a> instead of <a href=\"https://github.com/leanprover/lean/\">https://github.com/leanprover/lean/</a>.</p>",
        "id": 303755662,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665634124
    },
    {
        "content": "<p>Thanks! Will do.</p>",
        "id": 303850916,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1665671491
    },
    {
        "content": "<p>I can't seem to build TPIL any more with Sphinx. TPIL uses a Python extension, <code>lean_sphinx</code>, by Gabriel. It handles the lean code blocks. I am getting the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Could</span> <span class=\"n\">not</span> <span class=\"kn\">import</span> <span class=\"n\">extension</span> <span class=\"n\">lean_sphinx</span> <span class=\"o\">(</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"kn\">import</span> <span class=\"n\">name</span> <span class=\"bp\">'</span><span class=\"n\">CodeBlock'</span> <span class=\"k\">from</span> <span class=\"bp\">'</span><span class=\"n\">sphinx.directives'</span> <span class=\"o\">(</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">avigad</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">theorem_proving_in_lean</span><span class=\"bp\">/.</span><span class=\"n\">venv</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">python3.10</span><span class=\"bp\">/</span><span class=\"n\">site</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">sphinx</span><span class=\"bp\">/</span><span class=\"n\">directives</span><span class=\"bp\">/</span><span class=\"n\">__init__.py</span><span class=\"o\">))</span>\n<span class=\"n\">make</span><span class=\"o\">:</span> <span class=\"bp\">***</span> <span class=\"o\">[</span><span class=\"n\">Makefile</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"o\">:</span> <span class=\"n\">leantest</span><span class=\"o\">]</span> <span class=\"n\">Error</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>Does anyone have any ideas what to do? Maybe something has changed in recent versions of Sphinx? I also have Python 3.9 lying around, but that doesn't seem to work either.</p>",
        "id": 303946840,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1665709017
    },
    {
        "content": "<p>O.k., the good news is that form this page, <br>\n<a href=\"https://www.sphinx-doc.org/en/master/extdev/deprecated.html\">https://www.sphinx-doc.org/en/master/extdev/deprecated.html</a><br>\nI discovered that I should change <code>from sphinx.directives import CodeBlock</code> to <code>from sphinx.directives.code import CodeBlock</code>. </p>\n<p>The bad news is updating mathlib and testing showed that dozens of things have broken. It will be a while before I'll have time to do this, and I am not sure it is worth it. <span class=\"user-mention\" data-user-id=\"381187\">@Mike Shulman</span> , if you have the time and energy, you could give it a try. The README file is pretty self explanatory, and if you can get a version to build, I can deploy it. It will mostly be a matter of fixing imports for filenames that have changed, fixing theorem names that have changed, etc.</p>",
        "id": 303948192,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1665710354
    },
    {
        "content": "<p>Ah, all right; maybe it isn't worth it then.  I certainly don't have the time and energy.  What about pinning it to an earlier version of Lean, as Johan suggested, but adding comments noting that some things have changed since it was written?</p>",
        "id": 303948414,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1665710529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Is there a way to access a web version of an earlier version of Lean?</p>",
        "id": 303949621,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1665711424
    },
    {
        "content": "<p>Unfortunately not at the moment, we don't have different versions of the web editor. The community web editor is also frozen at the moment since the ZIP file containing mathlib oleans has gotten too big for GitHub pages.</p>",
        "id": 303949884,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1665711621
    },
    {
        "content": "<p>O.k., thanks. Anyhow, it would be nice to update TPIL. I'll put it on my todo list and wait for a lazy Sunday afternoon to spend a couple of hours making all the little fixes.</p>",
        "id": 303950050,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1665711763
    }
]