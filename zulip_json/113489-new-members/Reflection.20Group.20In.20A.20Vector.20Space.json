[
    {
        "content": "<p>Hi, I am new to Lean, and I am trying to implement a reflection group generated by root vectors in a vector space V. In my vector space V, I would like to create a basis, for example \\alpha_1 -&gt; \\alpha_n, and for each vector in the basis define the reflection operators {s_1 -&gt; s_n}</p>",
        "id": 263792656,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638743272
    },
    {
        "content": "<p>In the docs it says that to create a basis <code>All definitions are given for families of vectors, i.e. v : ι → M where M is the module or vector space and ι : Type* is an arbitrary indexing type.</code>.  How do I create the arbitrary indexing type? Thank you</p>",
        "id": 263792722,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638743356
    },
    {
        "content": "<p>It can be anything you want that has the right cardinality. For <code>n</code> things indexed 0, 1, ..., n-1, one option is <code>fin n</code>.</p>",
        "id": 263792883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638743568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"462368\">@Jeffrey Li</span>  Have you seen the existing results on reflections?  For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry_equiv.reflections_generate\">docs#linear_isometry_equiv.reflections_generate</a> stating that the orthogonal group is generated by reflections.</p>",
        "id": 263794990,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638746340
    },
    {
        "content": "<p>Thank you, I hadn't looked at that yet. I wanted to work on simple roots of reflection groups so that topic is closely related. The proof for that result is a bit over my head currently so to begin with I'm just trying to implement a few basic results by myself.</p>",
        "id": 263795451,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638747017
    },
    {
        "content": "<p>Hi, how come addition isn't defined in the following code? The inner product definitions are taken from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry_equiv.reflections_generate\">docs#linear_isometry_equiv.reflections_generate</a> </p>\n<div class=\"codehilite\" data-code-language=\"variables\"><pre><span></span><code>variables [inner_product_space 𝕜 E] [inner_product_space ℝ F]\nlocal notation `⟪`x`, `y`⟫` := @inner 𝕜 E _ x y\nlocal notation `absR` := has_abs.abs\n\ndef double (x : E) : E := (x + x)\n</code></pre></div>",
        "id": 263797660,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638750265
    },
    {
        "content": "<p>It says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_add</span> <span class=\"n\">E</span>\n</code></pre></div>\n<p>Thanks</p>",
        "id": 263797681,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638750305
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? The code you posted doesn't compile. Include all imports etc.</p>",
        "id": 263797741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638750380
    },
    {
        "content": "<p>The error you posted makes perfect sense -- the only thing Lean knows about <code>E</code> according to your local context is that it's a type, so sure you can't add two elements of it. On the other hand <code>inner_product_space  𝕜 E</code> wouldn't work if Lean only knew that <code>E</code> was a type, so you're not telling the truth in some sense. Edit: I take that back!</p>",
        "id": 263797842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638750535
    },
    {
        "content": "<p>Oh sorry, I missed a line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.convex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.is_R_or_C</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">vector_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional.basis</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">absR</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">has_abs.abs</span>\n<span class=\"kd\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263797942,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638750677
    },
    {
        "content": "<p>Oh I can guess what's going on -- Lean is not using <code>inner_product_space 𝕜 E</code> in your definition of <code>double</code> because you're not doing anything which indicates that <code>E</code> is supposed to be an inner product space <em>in that lemma</em>. You could put <code>[inner_product_space 𝕜 E]</code> as an assumption in <code>double</code></p>",
        "id": 263797945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638750683
    },
    {
        "content": "<p>oh ok thank you i see, I assumed that already defining it as an inner product space would imply that addition was defined</p>",
        "id": 263797990,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638750727
    },
    {
        "content": "<p>What does the line <code>variables [inner_product_space 𝕜 E] [inner_product_space ℝ F]</code> do then if it doesn't define E to be an inner product space over k? Thank you</p>",
        "id": 263798008,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638750788
    },
    {
        "content": "<p>So the way variables work is that Lean will only throw them in if it needs to. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">double</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The point is that even though <code>[inner_product_space 𝕜 E]</code> is a variable, Lean doesn't know to use it because you don't give it enough clues.</p>",
        "id": 263798011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638750792
    },
    {
        "content": "<p>Oh i see, thanks for the help!</p>",
        "id": 263798027,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638750839
    },
    {
        "content": "<p>It's actually a bit subtle. I think what's going on is that you never mentioned <code>𝕜</code>. You're right that usually something like this should work</p>",
        "id": 263798074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638750878
    },
    {
        "content": "<p>What would I need to change for <code>2 * v</code> to work as well?</p>",
        "id": 263798101,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638750927
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works. Lean somehow isn't smart enough to guess that it needs to use the variable.</p>",
        "id": 263798106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638750930
    },
    {
        "content": "<p>I'm pretty sure just adding <code>include 𝕜</code> above <code>double</code> will do the trick.</p>",
        "id": 263798109,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638750949
    },
    {
        "content": "<p>That's probably a good way to get around this, yes.</p>",
        "id": 263798154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638750969
    },
    {
        "content": "<p>Is there a way to tell lean that 2 is in <code>is_R_or_C</code> so that I can multiply by a number? thanks</p>",
        "id": 263798177,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638751029
    },
    {
        "content": "<p><code>(2 : \\bbk)</code> is the 2 in <code>\\bbk</code></p>",
        "id": 263798190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638751046
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">include</span> <span class=\"bp\">𝕜</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">double</span> <span class=\"bp\">𝕜</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think you have to make \\bbk explicit, or <code>double</code> won't be able to guess what to choose.</p>",
        "id": 263798286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638751191
    },
    {
        "content": "<p>Oh ok thanks so much this was kind of driving me nuts</p>",
        "id": 263798344,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638751245
    },
    {
        "content": "<p>It knows that E is a k-module but it is open to the possibility that E can also be a module over lots of other fields. In commutative algebra we always have to say which rings we're modules over.</p>",
        "id": 263798346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638751246
    },
    {
        "content": "<p>Yeah I posted it because I tried to do what you were doing and noticed that there were several subleties! The <code>\\smul</code> is another one, <code>*</code> won't work because <code>*</code> always takes two elements of the same type.</p>",
        "id": 263798367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638751282
    },
    {
        "content": "<p>Sorry for accusing you of not telling the full story earlier -- the variable line wasn't working for a more subtle reason than I had realised.</p>",
        "id": 263798377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638751314
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">double</span> <span class=\"bp\">𝕜</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">two_smul</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263798462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638751421
    },
    {
        "content": "<p>Fortunately someone else got there first with <code>two_smul</code></p>",
        "id": 263798470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638751442
    },
    {
        "content": "<p>Yeah no problem, I think I forgot to paste the full code anyhow. Thanks for your help!</p>",
        "id": 263798505,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638751445
    },
    {
        "content": "<p>Hi, why doesn't the following code work </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">absR</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">has_abs.abs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫/⟪</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"bp\">⟫</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">v</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263893444,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638814951
    },
    {
        "content": "<p>It says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 263893528,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638814980
    },
    {
        "content": "<p>#MWE <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 263893573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638814996
    },
    {
        "content": "<p>How is lean supposed to work out the <code>𝕜</code>?</p>",
        "id": 263893595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638815004
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.convex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.is_R_or_C</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">vector_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional.basis</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">absR</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">has_abs.abs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫/⟪</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"bp\">⟫</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">v</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263893602,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638815009
    },
    {
        "content": "<p>Lean can't guess \\bbk unless you make it explicit (my <code>variable (\\bbk)</code> line in earlier code did this)</p>",
        "id": 263893774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638815057
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫/⟪</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"bp\">⟫</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">v</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263893792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638815061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reflection.20Group.20In.20A.20Vector.20Space/near/263893595\">said</a>:</p>\n<blockquote>\n<p>How is lean supposed to work out the <code>𝕜</code>?</p>\n</blockquote>\n<p>Sorry I'm not sure what you mean. How would I tell it about \\bbk? I tried doing include \\bbk but it didn't work</p>",
        "id": 263893806,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638815065
    },
    {
        "content": "<p>oh ok thank you. What does <code>variables (\\bbk)</code> do? Didn't I already declare it at the top? Thanks</p>",
        "id": 263893949,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638815121
    },
    {
        "content": "<p>It changes the bracket</p>",
        "id": 263893987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638815133
    },
    {
        "content": "<p>It <em>updates</em> the brackets.</p>",
        "id": 263894014,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638815143
    },
    {
        "content": "<p>E is a \\bbk-module but it's also an \\int-module and for all Lean knows it could be a module for 37 other rings. Lean can't guess the ring from E.</p>",
        "id": 263894214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638815212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reflection.20Group.20In.20A.20Vector.20Space/near/263893792\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫/⟪</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"bp\">⟫</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">v</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>sorry now I have this new error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">s</span> <span class=\"bp\">𝕜</span> <span class=\"n\">w</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">w</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Data</span><span class=\"bp\">\\</span><span class=\"n\">COQ_Test</span><span class=\"bp\">\\</span><span class=\"n\">reflection_groups</span><span class=\"bp\">\\</span><span class=\"n\">src</span><span class=\"bp\">\\</span><span class=\"n\">reflection_groups</span><span class=\"bp\">\\</span><span class=\"n\">test.lean</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"mi\">19</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">too</span> <span class=\"n\">many</span> <span class=\"n\">arguments</span>\n</code></pre></div>",
        "id": 263894291,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638815246
    },
    {
        "content": "<p>Am I passing <code>\\bbk</code> as an argument to the function s?</p>",
        "id": 263894371,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638815282
    },
    {
        "content": "<p>We're saying that this is what you will need to do, yes.</p>",
        "id": 263894905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638815459
    },
    {
        "content": "<p>Lean can figure out E from v but it can't figure out k from anything, unless you put it somewhere.</p>",
        "id": 263895010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638815490
    },
    {
        "content": "<p>It seems that <code>variables (𝕜)</code> doesn't work properly here for some reason!</p>",
        "id": 263895237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638815558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Reflection.20Group.20In.20A.20Vector.20Space/near/263895237\">said</a>:</p>\n<blockquote>\n<p>It seems that <code>variables (𝕜)</code> doesn't work properly here for some reason!</p>\n</blockquote>\n<p>Yes that's the error I'm getting, am I doing something wrong or?</p>",
        "id": 263895494,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638815641
    },
    {
        "content": "<p>Specifically, it seems that because <code>𝕜</code> appears only in the notation and not in the other parameters, it's new brackets don't get picked up by lean</p>",
        "id": 263895562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638815652
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"bp\">𝕜</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫/⟪</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"bp\">⟫</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">v</span>\n</code></pre></div>",
        "id": 263895642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638815682
    },
    {
        "content": "<p>As does this, with the notation after the binders change:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">def</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*⟪</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"bp\">⟫/⟪</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"bp\">⟫</span><span class=\"o\">)</span><span class=\"bp\">•</span><span class=\"n\">v</span>\n</code></pre></div>",
        "id": 263895678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638815698
    },
    {
        "content": "<p>I'm afraid you've hit a weird corner-case</p>",
        "id": 263895707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638815707
    },
    {
        "content": "<p>Thank you, could you explain what the difference is between {\\bbk} and (\\bbk) is in the type declaration?</p>",
        "id": 263895909,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638815777
    },
    {
        "content": "<p>How come when we initially declare \\bbk we use {\\bbk  : Type* } instead of (\\bbk : Type*)?</p>",
        "id": 263895980,
        "sender_full_name": "Jeffrey Li",
        "timestamp": 1638815805
    },
    {
        "content": "<p>{} brackets mean \"let Lean work out this input to the function\" (or more precisely \"let Lean's type unifier work out the input\"), () brackets mean \"let the user supply the input\". <code>variable (X : Type)</code> means \"whenever X is mentioned in a function, use round brackets for it\", and then later on <code>variable {X}</code> means \"I've changed my mind -- from now on use {} brackets\"</p>",
        "id": 263908805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638819972
    }
]