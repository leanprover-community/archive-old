[
    {
        "content": "<p>I have read examples mentioning a tactic named \"finish\",  in one place described as implementing a tableau theorem prover complete for (intuitionistic) propositional logic.   Also mentioned in an example in a talk by Avigad:<br>\ntheoremgcd_comm6 (mn:N):gcdmn=gcdnm:= by finish<br>\nHowever when I try it, I get \"unknown identifier: finish\", and I don't find it mentioned in the manual.  So does it exist or not, and if so, how can I use it?</p>",
        "id": 200740360,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592008542
    },
    {
        "content": "<p>It's a mathlib tactic, so try <code>import tactic</code> at the top of the file?</p>",
        "id": 200740933,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1592009215
    },
    {
        "content": "<p>I get file 'tactic' not found in the LEAN_PATH.  <br>\nThat file does exist in a directory ending like this.<br>\n...Provers/lean-3.4.2-darwin/lib/lean/library/init/meta/tactic.lean<br>\nNow,  core.lean is located one level up from there and of course it is found OK,<br>\nso it looks like LEAN_PATH needs to include the subdirectory meta.   But I can't<br>\nfind out how to edit LEAN_PATH.  (It isn't an environment or shell variable apparently<br>\ndespite the all-caps.)</p>",
        "id": 200750453,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592026499
    },
    {
        "content": "<p>Are you using <code>mathlib</code>? <code>finish</code> is only in mathlib IIRC.</p>",
        "id": 200750560,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1592026752
    },
    {
        "content": "<p>So are you using <code>leanproject</code>? How/when did you install Lean?</p>",
        "id": 200750606,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1592026843
    },
    {
        "content": "<p>The <code>tactic.lean</code> that you found is part of Lean's core library which is automatically imported unless your Lean file begins with <code>prelude</code>. It does not contain the <code>finish</code> tactic.</p>\n<p>If you want to use the <code>finish</code> tactic, you'll need to work in a Lean project with mathlib as a dependency. The easiest way to do this is by using the command-line tool <code>leanproject</code>. Instructions for installing Lean to work with <code>leanproject</code> can be found here: <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">#install</a></p>",
        "id": 200750780,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592027275
    },
    {
        "content": "<p>Since it looks like you're using macOS, here's the page with instructions for macOS: <a href=\"https://leanprover-community.github.io/install/macos.html\">https://leanprover-community.github.io/install/macos.html</a></p>",
        "id": 200750840,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592027371
    },
    {
        "content": "<p>Here's the source code of <code>finish</code> on github, by the way: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/finish.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/finish.lean</a></p>",
        "id": 200750901,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592027511
    },
    {
        "content": "<p>OK,  thank you Bryan, problem solved.   I didn't know about \"leanproject\"  and had failed to follow the <br>\nlink to it at the bottom of the installation instructions.   When I ran leanproject it told me I first should install coreutils. <br>\nAnd that required upgrading the version of gmp.  But eventually it all worked.   Thanks again.</p>",
        "id": 200751828,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592029411
    },
    {
        "content": "<blockquote>\n<p>I didn't know about \"leanproject\" and had failed to follow the link to it at the bottom of the installation instructions.</p>\n</blockquote>\n<p>This is a surprisingly common problem</p>",
        "id": 200751934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592029607
    },
    {
        "content": "<p>It really should just become step (6), instead of a trailing appendix.</p>",
        "id": 200752111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592029956
    },
    {
        "content": "<p>So I said everything was working, and it is in the sense that I could create a project, but,  file finish.lean still doesn't exist on my system,  so I don't think it was installed with mathlib.   Shouldn't I be able to see it by \"locate finish.lean\" ?</p>",
        "id": 200752359,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592030470
    },
    {
        "content": "<p>Did you run <code>leanproject up</code>?</p>",
        "id": 200753270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592032357
    },
    {
        "content": "<p>It will eventually appear inside the <code>_target</code> directory in your project</p>",
        "id": 200753274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592032379
    },
    {
        "content": "<p>There is no need to run that command right after <code>leanproject new</code>.</p>",
        "id": 200757160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592039705
    },
    {
        "content": "<p>I think the unix <code>locate</code> command looks through a database which is typically created overnight by a cron job so no, it shouldn't find a file which has only just appeared on your system. The sensible way to find it would be to open a lean project with the \"open folder\" functionality of VS code, create a new file in <code>src</code> called something.lean, open the file, put <code>import tactic</code> at the top, write a simple proof which uses <code>finish</code> and then right click on finish and go to the definition. If you do that you'll find a bunch of possibly incomprehensible meta code defining the tactic</p>",
        "id": 200759629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592043824
    },
    {
        "content": "<p>OK,  indeed \"locate\" now locates it, also the Mac Finder locates it,  and there is exactly one copy of it and that copy<br>\nis in the deps/mathlib subdirectory of my project.   Well, that is a surprise,  I guess I will have to read about \"leanproject\"<br>\nif I want to know why it makes a copy in my project.  Anyway,   thank you Kevin for your answer.</p>",
        "id": 200769998,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592059926
    },
    {
        "content": "<p>leanproject downloads a compiled up to date copy of mathlib and adds it as a dependency to your project.</p>",
        "id": 200770032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592059992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284844\">@Michael Beeson</span> Although we believe in our setup and the fact that users shouldn't care, we do have <a href=\"https://leanprover-community.github.io/toolchain.html\">documentation</a> for people who don't want to blindly follow instructions without trying to understand what they do.</p>",
        "id": 200770108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592060081
    },
    {
        "content": "<p>I am some kind of mixture.  I like to blindly follow instructions and have them work  but then later on I eventually like to understand as much as possible.</p>",
        "id": 200770137,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592060157
    },
    {
        "content": "<p>So we (hopefully) have everything for you.</p>",
        "id": 200770182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592060180
    },
    {
        "content": "<p>But we know it's not necessarily easy to find. We constantly try to improve things, but there are simply too many things to explain to make everything doc easy to find.</p>",
        "id": 200770201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592060234
    },
    {
        "content": "<p>That documentation link you just gave me is just the right level of detail for me at this point.  Thank you.</p>",
        "id": 200770364,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592060446
    },
    {
        "content": "<p>At the end of that documentation it says elan will handle the updating of lean,  and presumably also the updating of mathlib; but it not stated who/what calls elan.  It kind of implies that the user doesn't do it, the updates will take place automatically.  Is that right?    Nightly?  Weekly?   When I open my project?  Or do I click \"update\" somewhere?</p>",
        "id": 200770821,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592061087
    },
    {
        "content": "<p>When you type <code>lean</code></p>",
        "id": 200770832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592061104
    },
    {
        "content": "<p>or when something else does</p>",
        "id": 200770841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592061116
    },
    {
        "content": "<p>e.g. when you open your project in VS Code</p>",
        "id": 200770892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592061142
    },
    {
        "content": "<p>Thank you.  Now for the moment everything is clear!</p>",
        "id": 200770907,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592061167
    },
    {
        "content": "<p>But it will only update if you change your project toml by e.g. using <code>leanproject up</code></p>",
        "id": 200770913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592061170
    },
    {
        "content": "<p>So as far as updating is concerned, if you edit <code>leanpkg.toml</code> to specify a newer version of Lean (or if you're working in a checkout of mathlib, and mathlib's copy of <code>leanpkg.toml</code> changes) then whatever invokes <code>lean</code> will cause the new version of Lean to be downloaded automatically.</p>",
        "id": 200770932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592061193
    },
    {
        "content": "<p>The <code>lean</code> command checks for a nearby <code>leanpkg.toml</code> and  calls <code>elan</code> to download a new version if it sees that you don't have the version stated in the toml</p>",
        "id": 200770946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592061226
    },
    {
        "content": "<p>Oh.    And leanproject up   edits  leanpkg.toml.   So,  when I want to update, I type leanproject up.</p>",
        "id": 200771020,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592061292
    },
    {
        "content": "<p>And is it conceivable that after an update my old project might be broken?</p>",
        "id": 200771062,
        "sender_full_name": "Michael Beeson",
        "timestamp": 1592061337
    },
    {
        "content": "<p>Sure, that's why we are keeping your copy of mathlib next to your project code by default.</p>",
        "id": 200771125,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592061395
    },
    {
        "content": "<p>You can have dozens of projects depending on different versions of Lean+mathlib</p>",
        "id": 200771135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592061414
    }
]