[
    {
        "content": "<p>I have a hypothesis with an existential statement. What tactic can I use to generate a witness for this? </p>\n<p>Also my proof is a proof by contradiction - is it normal to have the goal be just \"false\" for the entirety of the proof? It's making it hard to use tools like library_search, hint, etc. How do you discover the tactics you need to prove something?</p>",
        "id": 212939304,
        "sender_full_name": "Chase Norman",
        "timestamp": 1602371833
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346696\">Chase Norman</span> <a href=\"#narrow/stream/113489-new-members/topic/Witness.20of.20existential.20hypothesis/near/212939304\">said</a>:</p>\n<blockquote>\n<p>I have a hypothesis with an existential statement. What tactic can I use to generate a witness for this? </p>\n</blockquote>\n<p>Try <code>cases</code> (basic), or <code>obtain</code> (advanced).</p>",
        "id": 212939354,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602371892
    },
    {
        "content": "<p><code>rcases</code> should be mentioned too if you have more things to split up, and because it's awesome!</p>",
        "id": 212939370,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602371941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346696\">Chase Norman</span> <a href=\"#narrow/stream/113489-new-members/topic/Witness.20of.20existential.20hypothesis/near/212939304\">said</a>:</p>\n<blockquote>\n<p>Also my proof is a proof by contradiction - is it normal to have the goal be just \"false\" for the entirety of the proof? It's making it hard to use tools like library_search, hint, etc. How do you discover the tactics you need to prove something?</p>\n</blockquote>\n<p>Yes, it's normal (but as you note, makes things tricky).  If you have in mind proving both <code>P</code> and <code>¬P</code> for some P, try setting up <code>have</code> statements for each of these (and then working on these subgoals).</p>",
        "id": 212939378,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602371979
    },
    {
        "content": "<p>Even if the goal is false and you're in the middle of a long proof, you can still use library_search. Say you're convinced that various hypotheses you have should imply some proposition P using just one result in the library. Then you can write <code>have hP : P, library_search,</code></p>",
        "id": 212939431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602372079
    },
    {
        "content": "<p>The have creates a new goal and subsequent tactics work on that new goal</p>",
        "id": 212939437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602372112
    },
    {
        "content": "<p>Thank you so much for these pieces of advice, they are all incredibly useful!</p>",
        "id": 212939555,
        "sender_full_name": "Chase Norman",
        "timestamp": 1602372317
    },
    {
        "content": "<p>This failed for me on a more complex example.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">c.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">c.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">margin_graph</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">margin_graph</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n\n<p>was my hypothesis and goal. I ran cases d:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">d_w</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">d_h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">d_w</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">c.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">c.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">margin_graph</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">d_w</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">margin_graph</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">x'</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">c.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">c.length</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">margin_graph</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"n\">x</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">sorry</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">margin_graph</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"n\">x</span> <span class=\"n\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c.nth_le</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">sorry</span><span class=\"o\">))</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exists.intro</span> <span class=\"n\">d_w</span> <span class=\"n\">d_h</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>as you can see, it modified my goal. How do I achieve a witness of what d provides?</p>",
        "id": 213634637,
        "sender_full_name": "Chase Norman",
        "timestamp": 1602908586
    },
    {
        "content": "<p>In this case, I think it would be helpful to see a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if you could create one.  I'm guessing you have some dependencies between hypotheses of some kind.  (Answering your direct question, <code>d.1</code> might give you a witness.  Does <code>let x := d.1</code> work, or does it cause an error?)</p>",
        "id": 213635095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602909490
    },
    {
        "content": "<p><code>d</code> is a proposition, so there shouldn't be a <code>:=</code> at the end, did you do <code>let d := blah</code> at some point instead of <code>have d := blah</code>?</p>",
        "id": 213635099,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602909516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/Witness.20of.20existential.20hypothesis/near/213635099\">said</a>:</p>\n<blockquote>\n<p><code>d</code> is a proposition, so there shouldn't be a <code>:=</code> at the end, did you do <code>let d := blah</code> at some point instead of <code>have d := blah</code>?</p>\n</blockquote>\n<p>Yeah, this is exactly what I did. Thanks so much.</p>",
        "id": 213635329,
        "sender_full_name": "Chase Norman",
        "timestamp": 1602909966
    },
    {
        "content": "<blockquote>\n<p>Try cases (basic)</p>\n</blockquote>\n<p>Aha! I came here because I was stuck on inequality world 5/17. There's no documentation (at least up to that point) of how to do <em>anything</em> with an existential hypothesis, and searching the lean docs doesn't help because of the differences in the numbers game syntax. I was looking for a way to use the existential eliminator. I tried all the things I could think of, but did not try 'cases'.</p>",
        "id": 214646722,
        "sender_full_name": "Jeff Petkau",
        "timestamp": 1603756128
    }
]