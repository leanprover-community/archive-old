[
    {
        "content": "<p>Hi, I'm trying to understand how to unpack an if-then-else function when it's nested in an equality statement. <code>split_ifs</code> isn't able to detect any if-then-else expressions to split. Is there a simple way to do this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">equiv</span> <span class=\"c1\">-- &quot;perm x&quot; is &quot;equiv x x&quot; AKA &quot;x ≃ x&quot;</span>\n\n<span class=\"c1\">-- Add two extra elems to the set being permuted.</span>\n<span class=\"n\">def</span> <span class=\"n\">add_two_to_perm_forward</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">m</span>\n<span class=\"n\">def</span> <span class=\"n\">add_two_to_perm_reverse</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">m</span>\n\n<span class=\"c1\">-- Show that this new permutation has a left inverse</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">add_two_leftinv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)):</span>\n    <span class=\"n\">add_two_to_perm_forward</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">add_two_to_perm_reverse</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n    <span class=\"o\">:=</span>  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">decidable</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"k\">begin</span>\n            <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- m.val &lt; n, should enter the IF branch</span>\n            <span class=\"n\">rw</span> <span class=\"n\">add_two_to_perm_forward</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_two_to_perm_reverse</span><span class=\"o\">,</span>\n            <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"k\">begin</span>\n            <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- ¬m.val &lt; n, should enter the ELSE branch</span>\n            <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>In the first branch my tactic state is </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n       <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n      <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)),</span>\n          <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">inv_fun</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n         <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 201292703,
        "sender_full_name": "Kris Brown",
        "timestamp": 1592497833
    },
    {
        "content": "<p>Does <code>dsimp, split_ifs</code> work?</p>",
        "id": 201293305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592498133
    },
    {
        "content": "<p><del>Or do you need to <code>funext</code> first?</del> No, doesn't look like that.</p>",
        "id": 201293331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592498152
    },
    {
        "content": "<p>That did do something! Off the top of my head, not sure what <code>dite</code> is or how to eliminate.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"err\">⊢</span> <span class=\"n\">dite</span>\n      <span class=\"o\">((</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span>\n         <span class=\"n\">n</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span>\n       <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"o\">:</span>\n         <span class=\"o\">(</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span>\n           <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">p</span> <span class=\"bp\">⟨</span><span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span>\n       <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"o\">:</span>\n         <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span>\n             <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"err\">↑↑</span><span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">m</span>\n</code></pre></div>\n\n\n<p>I'm trying to avoid <code>simp</code> as a beginner though to avoid relying on magic - unless there is a way to inspect which sequence of tactics <code>simp</code> came up with to prove the goal? (that's a different question that's been on my mind)</p>",
        "id": 201293670,
        "sender_full_name": "Kris Brown",
        "timestamp": 1592498284
    },
    {
        "content": "<p><code>squeeze_simp</code></p>",
        "id": 201293783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592498342
    },
    {
        "content": "<p>There's also <code>set_option trace.simplify.rewrite true</code>. See the <code>simp</code> tutorial here: <a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a></p>\n<p>We should probably add this info to the <code>simp</code> docstring.</p>",
        "id": 201294082,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592498426
    },
    {
        "content": "<p><code>if h: m.val &lt; n then p.to_fun ⟨m.val, h⟩ else m</code> is<br>\n<code>dite (m.val &lt; n) (\\lam h, ...) (\\lam h, ...)</code>.</p>",
        "id": 201294481,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592498577
    },
    {
        "content": "<p>Thanks! Though I wasn't able to find a <code>squeeze_dsimp</code> version . And <code>set_option trace.simplify.rewrite true</code> gives me info underneath <code>split_ifs</code> but not <code>dsimp</code>.</p>",
        "id": 201295182,
        "sender_full_name": "Kris Brown",
        "timestamp": 1592498881
    },
    {
        "content": "<p>(I'm happy to use <code>dsimp</code> here, though). A follow up is how to eliminate <code>dite b x y</code> when I have a term <code>h: b</code> or <code>h: ¬b</code></p>",
        "id": 201295572,
        "sender_full_name": "Kris Brown",
        "timestamp": 1592499035
    },
    {
        "content": "<p><code>rw dif_pos h</code> or <code>rw dif_neg h</code></p>",
        "id": 201295631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592499063
    }
]