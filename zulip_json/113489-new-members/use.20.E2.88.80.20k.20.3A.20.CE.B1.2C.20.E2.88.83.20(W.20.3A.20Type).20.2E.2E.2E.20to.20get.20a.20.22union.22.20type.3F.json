[
    {
        "content": "<p>Is the following doable? I think I want a Σ type but am not sure whether there is some fundamental problem I am missing. Do I need choice for this? (The property &gt; 10 part is just to make this toy example.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">toy</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">),</span> <span class=\"n\">t.property</span> <span class=\"n\">w</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">10</span> <span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">union</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"n\">union</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">union</span><span class=\"o\">),</span> <span class=\"n\">b.property</span> <span class=\"n\">v</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">100</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- get something like \"map : α → Type\" from lhs ??</span>\n  <span class=\"c1\">-- let \"union\" be the product of all the \"map α\" ??</span>\n  <span class=\"c1\">-- define b by saying that \"property\" is the sum of all the given \"property\"</span>\n  <span class=\"c1\">-- let w be the tuple(?) of all the w ...</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265468734,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1639902690
    },
    {
        "content": "<p>The hypothesis is useless because <code> α</code> may be empty</p>",
        "id": 265468866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639902859
    },
    {
        "content": "<p>I think you can prove your lemma with <code>exact ⟨unit, ⟨function.const 101⟩, (), by linarith⟩</code></p>",
        "id": 265468955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639902975
    },
    {
        "content": "<p>Which suggests to me it doesn't state what you want it to say either</p>",
        "id": 265468961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639902995
    },
    {
        "content": "<p>oh, right. Indeed then it does not say what I want ;-) Thank you!</p>",
        "id": 265469226,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1639903345
    },
    {
        "content": "<p>If you want a particular choice of <code>thing union</code> that satisfies more than just the <code>&gt; 100</code> property in the statement,then you probably want a def with sigma not a lemma with exists</p>",
        "id": 265469323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639903521
    },
    {
        "content": "<p>I now have a separate definition and a lemma about the definition. <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> Would you (or someone else) have recommendations to improve this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unionOfThings</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span> <span class=\"bp\">Π</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">thing</span> <span class=\"n\">W</span> <span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">union</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">thing</span> <span class=\"n\">union</span> <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">collection</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- let \"union\" be the sum of all the W indexed by k</span>\n  <span class=\"n\">use</span> <span class=\"bp\">Σ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">collection</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- define newt: \"property\" is the corresponding \"property\" of the old t</span>\n  <span class=\"k\">have</span> <span class=\"n\">newt</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">collection</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n    <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">world</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">world</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">tw</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">collection</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd.property</span> <span class=\"n\">tw</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"n\">newt</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">unionOfThingsPreservesMinimum</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">collection</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">thing</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">collection</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd.property</span> <span class=\"n\">X</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">)</span>  <span class=\"bp\">→</span> <span class=\"o\">(</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">unionOfThings</span> <span class=\"n\">collection</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd.property</span> <span class=\"n\">X</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265482889,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1639924413
    },
    {
        "content": "<p>For example, I am wondering whether it would be possible and better to say in the def already that <code>union</code> should be  indexed by the same α.</p>",
        "id": 265482933,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1639924453
    },
    {
        "content": "<p>I would be tempted to not have the def return a sigma type at all</p>",
        "id": 265483017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639924590
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unionOfThings</span> <span class=\"o\">{</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">collection</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">thing</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"bp\">Σ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">collection</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">property</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">world</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">collection</span> <span class=\"n\">world.fst</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd.property</span> <span class=\"n\">world.snd</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265483102,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639924729
    },
    {
        "content": "<p>This probably exists already without the <code>thing</code> structure (replacing <code>thing W</code> with <code>W → ℕ</code>.</p>",
        "id": 265483123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639924785
    },
    {
        "content": "<p>Ah, thank you! I was wondering whether I want a \"thing of sigmas\" instead of a \"sigma of things\".</p>",
        "id": 265483208,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1639924899
    },
    {
        "content": "<p>What you had was both</p>",
        "id": 265483256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639924925
    },
    {
        "content": "<p>ah, a sigma of things of sigmas <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span>  ...</p>",
        "id": 265483262,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1639924951
    },
    {
        "content": "<p>And I would guess that for simple functions this can be done much simpler. I am mostly doing this for practice - my real <code>thing</code>s have multiple <code>property</code>s.</p>",
        "id": 265483271,
        "sender_full_name": "Malvin Gattinger",
        "timestamp": 1639924964
    }
]