[
    {
        "content": "<p>I am proving, in effect, that the mean of a bounded finset is less than or equal to its bound. (I'm doing this in a form that has cleared the denominators, because ultimately I want this lemma for <code>finset nat</code>.) The proof of <code>mean_le_biggest_aux</code> is fine - to get the induction to go through, I needed the elements to know individually that they were bounded, so I proved it for <code>finset {x : A // f x &lt;= m }</code>. But now I can't work out how to convert a pair (<code>s : finset A</code>, proof that every <code>x</code> in <code>s</code> is bounded by <code>m</code>) into a <code>finset {x : A // f x &lt;= m}</code>. I've noted the existence of <code>subtype.coind</code>, which lets me construct a <code>finset {x : A // a ∈ s -&gt; f a &lt;= m}</code>, and in about ten lines I can probably squeeze this into the thing I need, but this seems torturous. Is there a better way?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mean_le_biggest_aux</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">}),</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">a_not_in</span> <span class=\"n\">ind</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_insert_of_not_mem</span> <span class=\"n\">a_not_in</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span> <span class=\"n\">a_not_in</span><span class=\"o\">],</span>\n    <span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">add_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">ind</span> <span class=\"n\">m</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_add</span> <span class=\"n\">m</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">&quot;The mean of a bounded list is less than or equal to the bound&quot;.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">mean_le_biggest</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">--let u := finset.image (@subtype.coind A A id (λ a, a ∈ s → f a ≤ m) bound) s,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198541532,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590250038
    },
    {
        "content": "<p>Take a look at <code>finset.attach</code>, I think</p>",
        "id": 198541742,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590250441
    },
    {
        "content": "<p>Obvious statements like this should not require induction. Take a look at <code>sum_le_sum</code> and <code>sum_const</code>.</p>",
        "id": 198541798,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590250540
    },
    {
        "content": "<p>If you have to resort to induction to prove a statement like this, it means there is a gap in the library.</p>",
        "id": 198541861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590250607
    },
    {
        "content": "<p>If I change the statement a little, I can manage it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mean_le_biggest</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_le_sum</span> <span class=\"n\">bound</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198541921,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590250750
    },
    {
        "content": "<p>There's a bunch of useful stuff in <code>algebra.big_operators</code>, just in case you're not aware</p>",
        "id": 198542043,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590250969
    },
    {
        "content": "<p>I'm aware of the <em>existence</em> of <code>big_operators</code>, but there's a lot of stuff there and I still don't have a good story for discovering things in it</p>",
        "id": 198542307,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590251427
    },
    {
        "content": "<p>In this instance I'm not sure I would have thought of going via <code>sum_le_sum</code> for a long time - I wrote a maths proof before starting and it went \"easy induction\", not \"every element of [max, max,…] is bigger than [a1, a2,…]; now take sums\"</p>",
        "id": 198542365,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590251544
    },
    {
        "content": "<p>weird, the latter is definitely the easier math proof</p>",
        "id": 198542371,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590251567
    },
    {
        "content": "<p>I think <code>big_operators</code> is not such a scary file, it may save you time in the long run to read all the theorem statements once</p>",
        "id": 198542375,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590251589
    },
    {
        "content": "<p>I guess you can get just the theorem statements from the <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/big_operators.html\">docs page</a></p>\n<p>i don't understand the docs linkifier yet</p>",
        "id": 198542385,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590251634
    },
    {
        "content": "<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.big_operators/src\">src#algebra.big_operators</a> work? no, I guess we either need a better linkifier or better documentation for it (this is brand new obviously it's not supposed to be optimized yet)</p>",
        "id": 198542457,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1590251733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Finset.20of.20subtype/near/198542375\">said</a>:</p>\n<blockquote>\n<p>I think <code>big_operators</code> is not such a scary file, it may save you time in the long run to read all the theorem statements once</p>\n</blockquote>\n<p>Yeah this was my strategy</p>",
        "id": 198542458,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590251734
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_le_sum/src\">src#finset.sum_le_sum</a></p>",
        "id": 198542537,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590251873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Finset.20of.20subtype/near/198542457\">said</a>:</p>\n<blockquote>\n<p>does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.big_operators/src\">src#algebra.big_operators</a> work? no, I guess we either need a better linkifier or better documentation for it (this is brand new obviously it's not supposed to be optimized yet)</p>\n</blockquote>\n<p>The linkifier relies on <code>mathlib_docs/find</code> which currently only contains redirects for actual declaration names, not mathlib module names.</p>",
        "id": 198542592,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590251948
    },
    {
        "content": "<p>I think <code>algebra.big_operators</code> could use some more extensive module docs and a linting run, if you feel like contributing while going over it.</p>",
        "id": 198542639,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590252005
    },
    {
        "content": "<p>By the way I figured out how to do it without having to change your statement, in case that's useful:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mean_le_biggest</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_le_sum</span> <span class=\"n\">bound</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198542979,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590252656
    },
    {
        "content": "<p>Thanks - I was happy rewriting commutativity at the call site</p>",
        "id": 198543041,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590252730
    }
]