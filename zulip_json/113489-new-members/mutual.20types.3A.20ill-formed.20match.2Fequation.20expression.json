[
    {
        "content": "<p>I'm having an issue with the following, and the error message (<code>ill-formed match/equations expression</code>) is very short:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n\n<span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">tensor_power</span><span class=\"o\">,</span> <span class=\"n\">tensor_power</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"k\">with</span> <span class=\"n\">tensor_power</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">R</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">V</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"bp\">@</span><span class=\"n\">tensor_product</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">tensor_power</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">tensor_power</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">sorry</span>\n        <span class=\"c1\">-- haveI : semimodule R (tensor_power n) := tensor_power.semi_module n i,</span>\n        <span class=\"c1\">-- exact tensor_product R V (tensor_power n)</span>\n<span class=\"k\">with</span> <span class=\"n\">tensor_power</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">tensor_power</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Is there a way to get a better diagnosis of what is going on?</p>",
        "id": 204460884,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595271247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Did you already have something like this? You have multilinear maps, but maybe not tensor powers, right?</p>",
        "id": 204461340,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595271443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It might be a lot easier to define this via the monoidal structure on the category of modules over <code>R</code>.</p>",
        "id": 204461487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595271504
    },
    {
        "content": "<p>But that's just an intuition. I've never tested it.</p>",
        "id": 204461504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595271514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do we have repeated tensor powers in the categorical framework already?</p>",
        "id": 204461533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595271529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/mutual.20types.3A.20ill-formed.20match.2Fequation.20expression/near/204461487\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> It might be a lot easier to define this via the monoidal structure on the category of modules over <code>R</code>.</p>\n</blockquote>\n<p>The reason being that all the typeclasses will be bundled, so you don't need the complicated mutual def construction.</p>",
        "id": 204461599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595271568
    },
    {
        "content": "<p>(Aside: is there a reason you give the <code>n = 1</code> case explicitly? It looks nice to have it defeq to <code>V</code> instead of <code>V \\tensor R</code>, but it means that for proofs you will need to do an extra case, all the time (I guess).)</p>",
        "id": 204461790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595271653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/mutual.20types.3A.20ill-formed.20match.2Fequation.20expression/near/204461340\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> Did you already have something like this? You have multilinear maps, but maybe not tensor powers, right?</p>\n</blockquote>\n<p>I had something like that in a previous version of multilinear maps that was defined inductively (now, the current version is defined directly as multilinear maps from <code>fin n</code> to some space, so no induction needed). But it was simpler, as I could first define the type inductively, then the norm on it inductively. Here, it's more complicated as both things need to be defined together.</p>\n<p>If mutual def doesn't work well, you can define a structure containing both the type and the add_comm_monoid structure on it, and define with normal induction this structure at rank <code>n+1</code> when you have it at rank <code>n</code>.</p>",
        "id": 204466329,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595273876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/mutual.20types.3A.20ill-formed.20match.2Fequation.20expression/near/204461533\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> Do we have repeated tensor powers in the categorical framework already?</p>\n</blockquote>\n<p>Unfortunately no. Monoidal categories are purely in terms of the binary tensor product.</p>",
        "id": 204504677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595295446
    },
    {
        "content": "<p>But it should be zero problem to write a tensor power def, no <code>mutual</code> required!</p>",
        "id": 204504687,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595295467
    },
    {
        "content": "<p>This is all good advice, but it would be great if someone could tell me what my error message means!</p>",
        "id": 204512748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595307999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I've never seen it before, but I see two things:</p>\n<ol>\n<li>If you have a match on <code>0</code>, and <code>1</code>, then the remaining case is <code>(n+2)</code>, not <code>(n+1)</code>.</li>\n<li>Does it help if you break</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">tensor_power</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">tensor_power</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>into 3 branches <code>0</code>, <code>1</code>, <code>(n+2)</code> as well, instead of only <code>k</code>?</p>",
        "id": 204514433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595310857
    },
    {
        "content": "<p>Making either or both of those changes does not help</p>",
        "id": 204514821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595311519
    },
    {
        "content": "<p>It looks like the issue is that <code>tensor_power</code> appears in the type of <code>add_comm_monoid</code>, not just the definition.</p>",
        "id": 204514901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595311633
    }
]