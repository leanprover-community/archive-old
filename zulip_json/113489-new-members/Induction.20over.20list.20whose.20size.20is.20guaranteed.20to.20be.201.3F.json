[
    {
        "content": "<p>hey all,</p>\n<p>I want to keep this question high level because a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would still get quite extensive. <br>\nSomewhere in one of my proofs, I want to perform induction on a list that is generate by method <code>foo</code>. This base case will be list.nil. However, say that I have a lemma that proves <code>foo</code> will never generate an emtpy list, but always a list of at least size one. I want my base case to not be the empty list, but a list of size one. Is there a way to do this?</p>",
        "id": 322752899,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674319078
    },
    {
        "content": "<p>You could do <code>cases</code> on the list first before doing <code>induction</code> on its tail in the second case.</p>",
        "id": 322753486,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674319353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20over.20list.20whose.20size.20is.20guaranteed.20to.20be.201.3F/near/322753486\">said</a>:</p>\n<blockquote>\n<p>You could do <code>cases</code> on the list first before doing <code>induction</code> on its tail in the second case.</p>\n</blockquote>\n<p>But if I do this, I also must provide a proof for the first case where the list is equal to nil. In my example this proof is not possible. I have a lemma that proves this base case will never happen.</p>",
        "id": 322753719,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674319479
    },
    {
        "content": "<p>Yeah, in the first goal that <code>cases</code> produces, you provide that proof</p>",
        "id": 322755744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674320442
    },
    {
        "content": "<p>This <code>cases</code>/<code>induction</code> pair sets up an induction hypothesis where the list is non-nil.</p>",
        "id": 322755846,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674320487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Induction.20over.20list.20whose.20size.20is.20guaranteed.20to.20be.201.3F/near/322755744\">said</a>:</p>\n<blockquote>\n<p>Yeah, in the first goal that <code>cases</code> produces, you provide that proof</p>\n</blockquote>\n<p>Maybe I am misunderstanding. Say <code>xs</code> is the list generated by <code>foo</code>. When I perform cases on <code>foo</code>, I then expect a hypothesis of <code>x = list.nil</code> to appear in my environment. If it did, I could use my lemma to proof by contradiction. However, <code>x = list.nil</code> never appears in my environement. Is there something im missing?</p>",
        "id": 322757892,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674321437
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> would be really helpful here. If you need that equality, then just so you know there is <code>cases h : xs</code> and <code>induction h : xs</code> syntax</p>",
        "id": 322758298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674321642
    },
    {
        "content": "<p>You can also use something like <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#set\">tactic#set</a> to set up an equality before you start your cases. (Edit: no, I forgot it creates a <code>let</code> binding so that doesn't work here <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize\">tactic#generalize</a> is fine though.)</p>",
        "id": 322758514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674321740
    },
    {
        "content": "<p>Here's my attempt at a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> given your description, but if it doesn't apply to your situation maybe you could tweak it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_ne_empty</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">foo_ne_empty</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and so on</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322758853,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674321907
    },
    {
        "content": "<p>I have <code>baz</code> proving an arbitrary <code>p</code> just to have a goal that can't be proved, which means I have to handle the first case in a realistic way.</p>",
        "id": 322759038,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674321992
    },
    {
        "content": "<p>That <code>generalize</code> can be merged into the <code>cases</code> syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">foo_ne_empty</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xs</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- and so on</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 322759442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674322206
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 322774042,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674331164
    }
]