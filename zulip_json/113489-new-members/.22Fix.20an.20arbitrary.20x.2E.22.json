[
    {
        "content": "<p>In mathematics it is common to fix an arbitrary value of some type, and then for a while using it. For example, in model theory one might say \"fix an arbitrary signature <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">L</span></span></span></span>\" and then define the notions structure, substructure, homomorphism or something like that. Being precise, these are now parametrized notions, so for example one does not have defined the concept \"structure\" but rather that of an \"<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">L</span></span></span></span>-structure\" (but, using abuse of language, one often drops the prefix \"<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">L</span></span></span></span>-\"). If one would not have said \"fix an arbitrary signature <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">L</span></span></span></span>\" at the beginning of the section, one would have to say \"let L be a signature\" at the beginning of each definition (structure, substructure, homomorphism).</p>\n<p>Now I am interested in what possibilities there are in Lean to \"fix an arbitrary value\" and what the differences are between them. For the example I described, I assume it would suffice to open a section <code>basic_notions_model_theory</code> or something and say <code>variable L : signature</code> at the beginning, right? But then the value <code>L</code> is not really fixed, but gets lambda-abstracted in each definition (structure, substructure, homomorphism) separately. Mhm, in this case I guess this would be okay. But I think that sometimes in mathematics one really needs to <em>fix</em> a value, so that in each definition/theorem in the section, it really denotes the same thing. How does one do this in Lean? Can it be done with <code>parameter</code> or something like that? And what is the exact effect of <code>parameter</code>? Does it also in particular lambda-abstract the variable to each definition/theorem in the section? What, then, is the difference to <code>variable</code>?</p>",
        "id": 161997499,
        "sender_full_name": "Thomas Scholz",
        "timestamp": 1553811137
    },
    {
        "content": "<p>In principle, this is the purpose of <code>parameter</code>. It has the same effect as <code>variable</code>, but everything in the section automatically gets the variable and all references to other theorems in the section will fill in those arguments automatically so that it looks like the theorems don't even take arguments for them</p>",
        "id": 161997758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553811371
    },
    {
        "content": "<p>In practice lean implements this with some parser trickery, and the abstraction leaks in a few places. For the most part mathlib doesn't use <code>parameter</code>, although it's not banned</p>",
        "id": 161998115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553811702
    },
    {
        "content": "<p>Thanks, but I think I need some further clarification. What exactly is the purpose of <code>parameter</code> and what does it do in comparison to <code>variable</code>? What do you mean by \"automatically gets the variable\"? Could you give a code example?</p>\n<p>Are there cases where <code>parameter</code> must be used, where <code>variable</code> is not enough (to satisfy the particular purpose)?</p>\n<p>Would you more recommend using <code>parameter</code> or using <code>variable</code>?</p>",
        "id": 162144695,
        "sender_full_name": "Thomas Scholz",
        "timestamp": 1553989788
    },
    {
        "content": "<p>Parameter is essentially never used in mathlib; variable is used in essentially every file</p>",
        "id": 162165336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554023434
    },
    {
        "content": "<p><code>parameter</code> corresponds more closely to \"fix an arbitrary x.\" For the duration of the section, the parameter really is fixed, you can't change it. Lean tries to treat it like a constant. (Although, as Mario says, the abstraction leaks.) I believe it's used in the p-adic numbers files at some point to fix a <code>p</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">parameter</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"c1\">-- f : ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"c1\">-- error</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">f</span> <span class=\"c1\">-- f : ℕ → ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 2</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variable</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span> <span class=\"c1\">--g : ℕ → ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 2</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span> <span class=\"c1\">-- g : ℕ → ℕ</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 2</span>\n</pre></div>",
        "id": 162165516,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1554023823
    },
    {
        "content": "<p>It doesn't change the logic at all. All uses of <code>parameter</code> could be replaced by <code>variable</code>, and all uses of <code>variable</code> could also be eliminated.</p>",
        "id": 162165525,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1554023873
    }
]