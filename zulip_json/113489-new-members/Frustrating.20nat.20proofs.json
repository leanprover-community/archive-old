[
    {
        "content": "<p>I'm now trying to prove <code>example {r n : ℕ} {h1 : 1 ≤ r} {h2 : r ≤ n} : n - r + 1 = n - (r - 1)</code>. The tactics I know of and the things I can find in <code>data.nat</code> don't seem to be helping - what am I missing?</p>",
        "id": 180933586,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573948214
    },
    {
        "content": "<p>does the  <code>omega</code> tactic work?</p>",
        "id": 180933599,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573948299
    },
    {
        "content": "<p>You need <code>import tactic.omega</code></p>",
        "id": 180933603,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573948309
    },
    {
        "content": "<p><code>nat.sub_sub</code> is the lemma you want. But in general <code>omega</code> should work.</p>",
        "id": 180933653,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573948377
    },
    {
        "content": "<p><code>nat.sub_sub</code> doesn't do it - the parens don't match up correctly</p>",
        "id": 180933707,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573948455
    },
    {
        "content": "<p>But <code>omega</code> does it, thanks!</p>",
        "id": 180933708,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573948459
    },
    {
        "content": "<p>This lemma seems to have escaped detection, even in <code>algebra.group</code></p>",
        "id": 180933709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573948460
    },
    {
        "content": "<p><code>omega</code> does it in this example, but not in my actual proof - I've got a line of <code>calc</code> which looks like (a more complicated version of) </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">omega</span>\n</pre></div>\n\n\n<p>and <code>omega</code> can't handle it</p>",
        "id": 180933776,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573948651
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">sub_sub_assoc_swap</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sub_sub_assoc</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_sub_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_eq_iff_eq_add</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">h₁</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_right_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_cancel</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_cancel</span> <span class=\"n\">h₁</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 180933838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573948729
    },
    {
        "content": "<p>That looks perfect, thanks!</p>",
        "id": 180933855,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573948771
    },
    {
        "content": "<p>Someone should PR this... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 180937778,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573956489
    },
    {
        "content": "<p>How about we get a bot which can attempt to do it?</p>",
        "id": 180937796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573956597
    },
    {
        "content": "<p>you just say \"stick this at line 589 of data.nat.basic please bot\"</p>",
        "id": 180937853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573956663
    },
    {
        "content": "<p>and then it gets back to you if it doesn't compile and makes a PR if it does with a link to the Zulip thread.</p>",
        "id": 180937857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573956694
    },
    {
        "content": "<p>Until then, <a href=\"https://github.com/leanprover-community/mathlib/pull/1712\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1712\">https://github.com/leanprover-community/mathlib/pull/1712</a></p>",
        "id": 181071395,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574123502
    }
]