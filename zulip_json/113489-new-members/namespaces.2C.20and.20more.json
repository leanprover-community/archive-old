[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455674\">Matej Penciak</span> has marked this topic as unresolved.</p>",
        "id": 274342232,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646619492
    },
    {
        "content": "<p>Instead of creating a new thread I figured I'd contain all of my posts in here... I've been slogging away at Lean for a couple days now trying to learn as much as I can. I've gotten stuck in making any progress, but also have a couple lemmas that may be interesting (and that haven't been done as far as I can tell...)</p>\n<p>I came into this hoping to make some progress in proving the equivalence of definitions for flat modules in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.flat\">docs#module.flat</a>. </p>\n<p>The first is that I define the subtype of finitely generated submodules and generate a couple instances that may be worthwhile for the proof (also a few helpful lemmas, but I'm coming to realize I haven't written enough)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.noetherian</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fin_submodule</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">//</span> <span class=\"n\">N.fg</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semilattice_sup</span> <span class=\"o\">(</span><span class=\"n\">fin_submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"bp\">...</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_directed</span> <span class=\"o\">(</span><span class=\"n\">fin_submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I also worked on direct limits a bit and proved something that says that if all the components of a map out of a direct limit are injective, then the map itself is injective. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.direct_limit</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"o\">(</span><span class=\"n\">injective</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">module.direct_limit</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_directed</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">G</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">directed_system</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">h</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">injective</span> <span class=\"bp\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">direct_limit_map_component</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">module.direct_limit</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">G</span> <span class=\"n\">i</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- kind of slow</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>  <span class=\"c1\">-- kind of slow}</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">injective_of_direct_limit</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">module.direct_limit</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">direct_limit_map_component</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I was hoping to continue on and prove that a module is linearly equivalent to the direct limit of its finitely generated submodules, but I'm running into a wall with how I've set things up. Does anyone have suggestions or resources for best practices in how to set these kinds of things up? I would hope to have everything in place so that the \"obvious\" parts (stuff like <code>x : ↥N</code> implies <code>x ∈ N</code>, or <code>N : fin_submodule R M</code> can easily generate a <code>module R ↥N</code> instance) are handled automatically.</p>",
        "id": 274349537,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1646628609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455674\">@Matej Penciak</span> Interesting project! What exactly is your question?<br>\nIf <code>by simp</code> is kind of slow, try replacing it with the output of <code>by squeeze_simp</code>. (Pro tip: you can click on the output and it will auto-replace itself in the code. You can even hit <code>Alt-V</code> to do that.)</p>",
        "id": 274353953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646634028
    },
    {
        "content": "<p>Are you working on the TODOs in the file on flatness?</p>",
        "id": 274353958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646634047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/namespaces.2C.20and.20more/near/274353953\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"455674\">Matej Penciak</span> Interesting project! What exactly is your question?<br>\nIf <code>by simp</code> is kind of slow, try replacing it with the output of <code>by squeeze_simp</code>. (Pro tip: you can click on the output and it will auto-replace itself in the code. You can even hit <code>Alt-V</code> to do that.)</p>\n</blockquote>\n<p>So I guess my question was pretty vague in the original message, so something that has specifically come up is the following: From the work above I already have that <code>fin_submodule R M</code> as I've defined it is a directed system, so I would want to make a direct limit out of it with <code>module.direct_limit</code>. I'm having issues with defining an instance of <code>Π (N P : fin_submodule R M), N ≤ P → (↥(N.val) →ₗ[R] ↥(P.val))</code> though. The naive way I've written it seems to have the right type, but I'm getting a somewhat cryptic error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">thing</span><span class=\"bp\">&gt;</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">fin_submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">N</span> <span class=\"bp\">≤</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">N.val</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">P.val</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin_submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">i.val</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">j.val</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Digging a little deeper, if I compare the two in infoview I have a slight mismatch in the two instances:</p>\n<p>The thing I've constructed:<br>\n<a href=\"/user_uploads/3121/xLeghydfDuIVsBuvM3nxqb1u/defn1.png\">defn1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/xLeghydfDuIVsBuvM3nxqb1u/defn1.png\" title=\"defn1.png\"><img src=\"/user_uploads/3121/xLeghydfDuIVsBuvM3nxqb1u/defn1.png\"></a></div><p>The thing I need: <br>\n<a href=\"/user_uploads/3121/UR4iD9KoMRewg6O8qNH4FOTS/defn2.png\">defn2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/UR4iD9KoMRewg6O8qNH4FOTS/defn2.png\" title=\"defn2.png\"><img src=\"/user_uploads/3121/UR4iD9KoMRewg6O8qNH4FOTS/defn2.png\"></a></div><p>I can try to generate a MWE, but I'm worried I might end up needing like half the file in order to reconstruct this issue...</p>",
        "id": 274422495,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1646672602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/namespaces.2C.20and.20more/near/274353958\">said</a>:</p>\n<blockquote>\n<p>Are you working on the TODOs in the file on flatness?</p>\n</blockquote>\n<p>I'm trying! But I'd say so far I haven't gotten past the \"administrative\" part of the proof</p>",
        "id": 274422853,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1646672725
    },
    {
        "content": "<blockquote>\n<p>I can try to generate a MWE, but I'm worried I might end up needing like half the file in order to reconstruct this issue...</p>\n</blockquote>\n<p>Is this on a  branch of mathlib? If so, you can share the link and we can diagnose in gitpod / by checking out locally</p>",
        "id": 274427597,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646674407
    },
    {
        "content": "<p><code>direct_limit_map_component</code> looks like it's just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.direct_limit.of\">docs#module.direct_limit.of</a>  composed with <code>g</code> (<code>g ∘ₗ of R ι G f i</code>),  which means you don't even need those <code>simp</code>s!</p>",
        "id": 274427738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646674455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/namespaces.2C.20and.20more/near/274427597\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I can try to generate a MWE, but I'm worried I might end up needing like half the file in order to reconstruct this issue...</p>\n</blockquote>\n<p>Is this on a  branch of mathlib? If so, you can share the link and we can diagnose in gitpod / by checking out locally</p>\n</blockquote>\n<p>I made a leanproject and keep it synced up between my home and office computers with this github repo <a href=\"https://github.com/mpenciak/flatstuff\">https://github.com/mpenciak/flatstuff</a>.<br>\n<code>flatness.lean</code> is where I wanted to have the main argument once I got to it, but the issues I'm running into are down at the bottom on line 292 of <code>finite_submodules.lean</code></p>\n<p>Just a heads up that the file is pretty rough in a lot of places (and I would very much appreciate suggestions on improvements)!</p>",
        "id": 274439273,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1646678910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/namespaces.2C.20and.20more/near/274427738\">said</a>:</p>\n<blockquote>\n<p><code>direct_limit_map_component</code> looks like it's just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.direct_limit.of\">docs#module.direct_limit.of</a>  composed with <code>g</code> (<code>g ∘ₗ of R ι G f i</code>),  which means you don't even need those <code>simp</code>s!</p>\n</blockquote>\n<p>That it is! I knew there must have been a better way of writing a composition of linear maps</p>",
        "id": 274439416,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1646678979
    },
    {
        "content": "<p>You don't usually want to use <code>λ⟨x, hx⟩</code> in definitions, as it makes them not unfold nicely</p>",
        "id": 274469914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646693178
    },
    {
        "content": "<p>Better to use <code>λ x</code> and then use <code>x</code> and <code>x.prop</code> later</p>",
        "id": 274469947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646693200
    },
    {
        "content": "<p>(It's fine to use in <code>map_add</code> etc, but don't use it in <code>to_fun</code>)</p>",
        "id": 274469992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646693229
    },
    {
        "content": "<p><a href=\"https://github.com/mpenciak/flatstuff/pull/1\">https://github.com/mpenciak/flatstuff/pull/1</a></p>",
        "id": 274472331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646694509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/namespaces.2C.20and.20more/near/274472331\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/mpenciak/flatstuff/pull/1\">https://github.com/mpenciak/flatstuff/pull/1</a></p>\n</blockquote>\n<p>Thank you! As I mentioned on the PR I learned a ton, back to work!</p>",
        "id": 274491082,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1646709732
    },
    {
        "content": "<p>A related thing that would be useful is having VSCode recall you all default variables / instances on the upper right of the screen.</p>",
        "id": 274577916,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646761833
    },
    {
        "content": "<p>2 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/tensor.20products.20commute.20with.20direct.20limits\">#Is there code for X? &gt; tensor products commute with direct limits</a> by <span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>.</p>",
        "id": 274735713,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646852445
    }
]