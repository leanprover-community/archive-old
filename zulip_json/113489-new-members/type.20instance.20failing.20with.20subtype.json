[
    {
        "content": "<p>Hi everyone,</p>\n<p>Another weird behaviour with type instance: it seems that when there is a subtype that is set as a constant (e.g., <code>pnat</code>), if one replace this constant by its definition (e.g.,  <code>{n // 0 &lt; n}</code>), the type class mechanism fails.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 1 : ℕ+</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">})</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">⊢ has_one {n // 0 &lt; n}</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Actually what I would like to do is to be able to write <code>λ n : {n // 0 &lt; n}, n + 1</code> and the elaborator understands it :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- λ (n : ℕ+), n + 1 : ℕ+ → ℕ+</span>\n\n<span class=\"c1\">-- replacing `pnat` by its definition does not work with class instance synthesis</span>\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to synthesize type class instance for</span>\n<span class=\"cm\">n : {n // 0 &lt; n}</span>\n<span class=\"cm\">⊢ has_one {n // 0 &lt; n}</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- however this example works</span>\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">})</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- λ (n : ℕ+), n + 1 : ℕ+ → ℕ+</span>\n\n<span class=\"c1\">-- and this one too</span>\n<span class=\"k\">#check</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_add.add</span> <span class=\"n\">pnat</span> <span class=\"n\">pnat.has_add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>  <span class=\"mi\">1</span>\n<span class=\"c1\">-- λ (n : {n // 0 &lt; n}), n + 1 : {n // 0 &lt; n} → ℕ+</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">I suppose that in the last two examples, the definition is \"unfolded\" so it passes typechecking</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is there a workaround?</p>",
        "id": 271104428,
        "sender_full_name": "Xavier Martinet",
        "timestamp": 1644314403
    },
    {
        "content": "<p>It's worth remembering that if <code>x : X</code>, <code>foo (x : Y)</code> tells lean that <code>x</code> should be parsed as a <code>Y</code>. However, it doesn't record this decision unless its forced to insert a <code>coe</code>, so as far as <code>foo</code> knows, <code>x</code> still has type <code>X</code></p>",
        "id": 271107345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644316031
    },
    {
        "content": "<p>You can fix this by using <code>@id Y x</code> or <code>show Y, from x</code> instead of <code>(x : Y)</code>, which actually inserts an extra function call in your term</p>",
        "id": 271107518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644316110
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"239415\" href=\"/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/type.20instance.20failing.20with.20subtype\">#metaprogramming / tactics &gt; type instance failing with subtype</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span></p>",
        "id": 271107562,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644316131
    },
    {
        "content": "<p>(moved since this doesn't seem to be about <code>meta</code> or writing tactics)</p>",
        "id": 271107611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644316151
    },
    {
        "content": "<p>Alternatively, we could fix this by changing how <code>pnat</code> is defined to be more in line with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal\">docs#nnreal</a> etc</p>",
        "id": 271107760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644316220
    },
    {
        "content": "<p>(which uses the instances on the raw subtype defined in <a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/order/nonneg.html\">https://leanprover-community.github.io/mathlib_docs/algebra/order/nonneg.html</a>)</p>",
        "id": 271107972,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644316328
    }
]