[
    {
        "content": "<p>however my code is not mathlib quality yet... any comments? <a href=\"https://gist.github.com/huynhtrankhanh/53d14471b83b6df4df89528acd70f699\">https://gist.github.com/huynhtrankhanh/53d14471b83b6df4df89528acd70f699</a></p>",
        "id": 265123493,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639642774
    },
    {
        "content": "<p>because this code doesn't meet mathlib standards, i haven't made a PR yet <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> please teach me how to improve my code <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 265123661,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639642868
    },
    {
        "content": "<p>Wow those are long proofs.</p>",
        "id": 265124652,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639643534
    },
    {
        "content": "<p>Nice!</p>",
        "id": 265126507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639644799
    },
    {
        "content": "<blockquote>\n<p>please teach me how to improve my code</p>\n</blockquote>\n<p>The first thing that jumps out is that you're not using <code>{}</code> to separate subgoals</p>",
        "id": 265128237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639645918
    },
    {
        "content": "<p>oh... so I'll add <code>{}</code>. after that I can make a pull request right?</p>",
        "id": 265167240,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639666595
    },
    {
        "content": "<p>or do I have to change some names?</p>",
        "id": 265167318,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639666619
    },
    {
        "content": "<p>or is my proof too convoluted and I have to simplify it?</p>",
        "id": 265167384,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639666646
    },
    {
        "content": "<p>Probably a bit convoluted, but a PR is a good place to sort that out</p>",
        "id": 265167622,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639666726
    },
    {
        "content": "<p>I am definitely <em>not</em> an expert, but when I see declarations doing so much I tend to ask myself if I can break it into smaller pieces that are easier to understand and review. Could not be the case tho!</p>",
        "id": 265167921,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639666823
    },
    {
        "content": "<p>I guess a PR would be useful to tell apart what's new and what's Yael and Bhavik's existing code</p>",
        "id": 265171634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639668315
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10846\">https://github.com/leanprover-community/mathlib/pull/10846</a></p>",
        "id": 265172148,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639668510
    },
    {
        "content": "<p>Another common thing is that if you do two <code>rw</code> in a row, they should be written in one line as <code>rw [lem1, lem2]</code>.</p>",
        "id": 265172912,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1639668835
    },
    {
        "content": "<p>And sometimes you do two <code>cases</code>right after each other, which can probably be put in one line using <code>rcases</code>.</p>",
        "id": 265173305,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1639668987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span>: just FYI, in Zulip, <code>#10846</code> becomes <a href=\"https://github.com/leanprover-community/mathlib/pull/10846\">#10846</a>.</p>",
        "id": 265177167,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1639670517
    },
    {
        "content": "<p>I added some comments - thanks for adding the <code>{}</code>s, they already make it way more readable than it was</p>",
        "id": 265178202,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639670960
    },
    {
        "content": "<p>thank you for your suggestions! i fixed all the issues you mentioned <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/10846\">#10846</a></p>",
        "id": 265250923,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639712932
    },
    {
        "content": "<p>oh wait. i still need to use <code>rcases</code>. back to work <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 265250946,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639712982
    },
    {
        "content": "<p>done <span aria-label=\"raised hands\" class=\"emoji emoji-1f64c\" role=\"img\" title=\"raised hands\">:raised_hands:</span></p>",
        "id": 265251260,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639713334
    },
    {
        "content": "<p>today i learned that this community becomes 10000000000x more helpful when i contribute to mathlib <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 265251631,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639713668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> you can remove the label <code>awating-author</code> and add the label <code>awating-review</code> if the PR is ready again</p>",
        "id": 265253112,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1639715436
    },
    {
        "content": "<p>It looks like you've PR'd from your personal repo, which is an easy mistake to make since how that's how most github projects operate. I've granted you write access to non-master branches so that you can push to a branch like <code>huynhtrankhanh/stars-and-bars</code> in the shared repo instead. See the comment on the PR</p>",
        "id": 265409852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639821729
    },
    {
        "content": "<p>i'm back <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> ok so i'll make another PR to provide instances and add some functions for <code>sym</code>. but i have some questions:</p>\n<blockquote>\n<p>Can you extract everything to the right of <code>sum.inr</code> to a new definition, <code>sym2.erase</code>?</p>\n</blockquote>\n<p>is there a way to do this elegantly? i'm afraid there isn't. this is because the length of the returned <code>sym</code> depends on whether the to be erased element is in the input <code>sym</code> or not. should i take a hypothesis stating that the element to be erased is a member of the original <code>sym</code>?</p>\n<blockquote>\n<p>I would rather write it like <code>def encode {k : ℕ} (x : sym (option α) k.succ) : sym α k.succ ⊕ sym (option α) k :=</code></p>\n</blockquote>\n<p>well, you are not the first to come up with this idea. this is part of my <a href=\"https://photos.app.goo.gl/RdLqMaFFQ8SeeKdUA\">proof sketch</a>. however i decided against using this type signature because i assumed that the proof would be quite cantankerous... and at the end of the day i would still need to map the type back to <code>fin n</code> anyway, otherwise there is no way i can define the two <code>multichoose</code> functions... the proof strategy would be quite different i'm afraid</p>\n<p>i will address other comments in a new PR. thanks!</p>",
        "id": 265480770,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1639921255
    },
    {
        "content": "<p>Then I encourage you to try the foreseen cantakerous proof. I promise it's not that bad, and you might even enjoy it.</p>",
        "id": 265480836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639921356
    },
    {
        "content": "<p>Yes, I'm suggesting <code>erase (s : sym α n.succ) (a : α) (ha : a ∈ s) : sym α n</code></p>",
        "id": 265481009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639921627
    },
    {
        "content": "<p>Since that's the version it seems you actually use</p>",
        "id": 265481017,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639921664
    },
    {
        "content": "<p>i made a new PR!!! <a href=\"https://github.com/leanprover-community/mathlib/pull/11032\">#11032</a></p>",
        "id": 265997776,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640347656
    },
    {
        "content": "<p>this time i do things very properly <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> i hope someone will review and merge my PR <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 265997862,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640347752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> I've left a first set of comments. Main remark: use more explicit variables when writing <code>instance</code>s.</p>",
        "id": 265998821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640348922
    },
    {
        "content": "<p>Thanks, that PR looks great! Some of the proofs look a little strangely written, but the statements largely look good</p>",
        "id": 265998860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640348978
    },
    {
        "content": "<p>i've made the necessary changes and the PR is now ready for review again <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 266041427,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640407200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> I left another review.</p>",
        "id": 266043347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640410779
    },
    {
        "content": "<p>docstrings added, you can review the PR again</p>",
        "id": 266052616,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640427087
    },
    {
        "content": "<p>I just fixed stuff <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I don't know how to do the docstring thing though, please review my PR again</p>",
        "id": 266091193,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640494129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span> <a href=\"#narrow/stream/113489-new-members/topic/i.20proved.20stars.20and.20bars!!!/near/266091193\">said</a>:</p>\n<blockquote>\n<p>I just fixed stuff <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I don't know how to do the docstring thing though, please review my PR again</p>\n</blockquote>\n<p>On the PR page, if you to the bottom and check the box with the tests, you'll notice this line with a red mark indicating failure:<br>\n<code>continuous integration / Lint mathlib (push) Failing after 40m — Lint mathlib Details</code><br>\nThen you can click on <code>Details</code> and check what broke</p>",
        "id": 266109355,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640524644
    },
    {
        "content": "<p>In this case, it's because you added a definition of <a href=\"https://github.com/leanprover-community/mathlib/blob/a3c474a3ff62f788dacf752bfc78cfd6c8622e31/src/data/sym/basic.lean#L231\"><code>sym.map</code></a> and didn't add a docstring for it</p>",
        "id": 266109426,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640524774
    },
    {
        "content": "<p>yayy!!! my PR looks <em>very</em> ready to merge <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> can anyone run <code>bors r+</code> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> or tell me if there's anything I need to fix <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 266163071,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640601787
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10846\">#10846</a> someone please review <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 266321179,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640759278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> You should label the PR with <code>awaiting-review</code>. That way you can make it show up on the <a href=\"https://bit.ly/3zVLgqR\">#queue</a></p>",
        "id": 266321486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640759671
    },
    {
        "content": "<p>I just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/11142\">#11142</a>, which should hopefully generalize the approach (from fintypes to finsets). Hence I suggest putting it as a dependency of <a href=\"https://github.com/leanprover-community/mathlib/pull/10846\">#10846</a>.</p>",
        "id": 266411403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640852559
    },
    {
        "content": "<p>sorry I couldn't get fin.cast_pred to work. anyway if anyone has any suggestions please let me know <a href=\"https://github.com/leanprover-community/mathlib/pull/10846\">#10846</a></p>",
        "id": 266435312,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640877123
    },
    {
        "content": "<p>but I think I have a question <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> I don't quite understand what <a href=\"https://github.com/leanprover-community/mathlib/pull/11142\">#11142</a> does really... does it mean I have to <del>rewrite my PR</del>? that is, do I have to use <code>finset</code> in my proof now? and I can't have my straightforward proof based on equinumerosity?</p>",
        "id": 266436232,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640878052
    },
    {
        "content": "<p>I like this <code>finset.sym2</code>, but I'm not sure it's better to base stars-and-bars on it (or if it is better, I'm not sure it's necessary to rewrite the PR to use it right now).  I think this is a case where manipulating types directly gives a more direct proof, vs manipulating finsets in types. It's probably fairly easy to get the <code>finset</code> version of the theorem from the type version.</p>",
        "id": 266436705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640878532
    },
    {
        "content": "<p>i'd say that it would be silly to base my PR off of <a href=\"https://github.com/leanprover-community/mathlib/pull/11142\">#11142</a> because the proof would become... more convoluted? and my proof is as straightforward as it gets <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> i believe equinumerosity is the most natural approach to prove stars and bars, <a href=\"#narrow/stream/116395-maths/topic/Stars.20and.20bars\">even stars and bars isn't as natural as my approach</a> <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 266440070,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640881413
    },
    {
        "content": "<p>this is my opinion, and of course you might disagree but i believe my opinion is pretty reasonable: we should get my PR merged without changing the overall proof strategy or generalizing stuff <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> building an API for <code>data.sym</code> is reasonable, and i think there might be some lean idioms that i missed. also the names don't really follow mathlib conventions so maybe you should tell me how to fix those names too. but i don't think the proof strategy should be changed for the time being</p>",
        "id": 266440676,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640881988
    },
    {
        "content": "<p>I think it's nice having combinatorial proofs where we encode algebraic expressions of numbers as algebraic expressions of types, with equalities being equivalences, ideally in a way where these equivalences are useful functions in their own right.</p>\n<p>I'd like it more if our equivalences used \"generic\" types, like sums, products, and <code>option</code>.  (<code>option</code> I think we can agree ought to be the standard combinatorial encoding of \"add one.\") Right now the <code>equivalent</code> definition uses special properties of <code>fin</code>, and I think everything will end up being cleaner if we use Yael's earlier suggestion of  <code>sym (option α) k.succ ≃ sym α k.succ ⊕ sym (option α) k</code>.</p>\n<p>I'm happy to go through and switch things over to this if you want any help <span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span>.</p>",
        "id": 266441420,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640882805
    },
    {
        "content": "<p>(I want to be mindful of the fact that it's not that fun being part of a long and drawn-out PR process, so I don't want to ask you to do more work for this to get it in.)</p>",
        "id": 266441540,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640882930
    },
    {
        "content": "<p>I have the same feeling that the way you attacked things won't translate that well from types to finsets. The <code>sym2</code>  stars and bars, however, went unscathed.</p>",
        "id": 266442196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640883583
    },
    {
        "content": "<p>One way <code>finset.sym</code> could help is if it were inductively defined in such a way that every <code>sym</code> is added exactly once, in which case the inductive definition turns into an inductive relation on its card. I wrote <a href=\"https://github.com/leanprover-community/mathlib/pull/11142\">#11142</a> with the idea that the definition might change in mind, by making sure most of the API wasn't directly using the definition but instead going through <code>finset.mem_sym_iff</code>, which is <em>the</em> main theorem.</p>",
        "id": 266442615,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640883855
    },
    {
        "content": "<p>this is what I did for <code>card_embedding</code>; there's a bunch of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/equiv/embedding.lean\">equivs</a> which basically underscore the proof (and <code>option</code> used for <code>add_one</code>!)</p>",
        "id": 266442806,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640884074
    },
    {
        "content": "<p>(and the end proof looked like <a href=\"https://tqft.net/mathlib/data/fintype/card_embedding\">file#data/fintype/card_embedding</a></p>",
        "id": 266442853,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640884091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> Just to clarify, what's \"this\"? (I'm assuming it's what I mentioned about equivalences, but just want to be sure since there are a couple things under discussion.)</p>",
        "id": 266442897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640884162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/i.20proved.20stars.20and.20bars!!!/near/266441420\">said</a>:</p>\n<blockquote>\n<p>I think it's nice having combinatorial proofs where we encode algebraic expressions of numbers as algebraic expressions of types, with equalities being equivalences, ideally in a way where these equivalences are useful functions in their own right.</p>\n<p>I'd like it more if our equivalences used \"generic\" types, like sums, products, and <code>option</code>.  (<code>option</code> I think we can agree ought to be the standard combinatorial encoding of \"add one.\") Right now the <code>equivalent</code> definition uses special properties of <code>fin</code>, and I think everything will end up being cleaner if we use Yael's earlier suggestion of  <code>sym (option α) k.succ ≃ sym α k.succ ⊕ sym (option α) k</code>.</p>\n<p>I'm happy to go through and switch things over to this if you want any help <span class=\"user-mention silent\" data-user-id=\"270523\">Huỳnh Trần Khanh</span>.</p>\n</blockquote>",
        "id": 266443034,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640884312
    },
    {
        "content": "<p>i made a new PR from a branch on mathlib. you, as in everyone with write access can commit anything you want now <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/11162\">#11162</a></p>\n<p>feel free to do crazy stuff</p>",
        "id": 266478929,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1640922426
    },
    {
        "content": "<p>I'm trying the <code>option α</code> stuff out.</p>",
        "id": 266492758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640943192
    },
    {
        "content": "<p>What you were missing to make that work was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">attach</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 266493916,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640944745
    },
    {
        "content": "<p>Okay, I got it working, with many more <code>sym</code> lemmas.</p>",
        "id": 266501873,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640955105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Oh, I was working on that, too, and I also implemented <code>attach</code>. That's what my offer to <span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> was supposed to mean and the <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>, but I should have been more explicit I guess.</p>",
        "id": 266502992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640956597
    },
    {
        "content": "<p>Ah yeah, sorry. I did say I was working on it 3 hours ago.</p>",
        "id": 266502997,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640956624
    },
    {
        "content": "<p>I mean I was working on it yesterday (and I just woke up in this timezone)</p>",
        "id": 266503082,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640956771
    },
    {
        "content": "<p>Oh whoops</p>",
        "id": 266503140,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640956814
    },
    {
        "content": "<p>Oh well, I'll just merge in some of the additional things I have.</p>",
        "id": 266503144,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640956817
    },
    {
        "content": "<p>Ok, merged. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I reorganized the new lemmas you wrote and put them in <code>data/sym/basic</code>, and other than that I don't think I modified them other than renaming <code>map_attach_val</code> to <code>attach_map_coe</code>. There's a <code>section unused</code> in <code>data/sym/card</code> with a few things that weren't used in the argument (and which I didn't want to find proper homes for to avoid recompilation).</p>\n<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> I changed the design slightly. I consolidated the <code>multichoose*</code> functions to a single one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">multichoose</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">k</span>\n</code></pre></div>\n<p>and I filled in the proof for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">multichoose_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"n\">k</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">multichoose</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I figured <code>card (sym α k)</code> is a short enough name for itself.</p>",
        "id": 266514107,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640970430
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> That was a good change to <code>sym.cons</code> to help unstick simplifications.)</p>",
        "id": 266514395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640970853
    },
    {
        "content": "<p>Btw I meant to replace <code>multichoose</code> by <code>nat.\nasc_fac</code> or something</p>",
        "id": 266515087,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640971893
    },
    {
        "content": "<p>Whatever it's called, putting it into the <code>nat</code> is a good idea. <code>nat.multichoose</code> seems fine to me, and it seems like a relatively common name.</p>\n<p>Where's the name <code>nat.asc_fac</code> coming from?</p>",
        "id": 266515303,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640972174
    },
    {
        "content": "<p>Sorry, was on my phone. I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.asc_factorial\">docs#nat.asc_factorial</a></p>",
        "id": 266517128,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640974832
    },
    {
        "content": "<p>Oh, I see, makes sense.</p>",
        "id": 266517664,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640975715
    }
]