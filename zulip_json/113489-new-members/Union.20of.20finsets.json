[
    {
        "content": "<p>How do I talk about the result of a union of finite sets? The expected, \\union operator doesn't seem to work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">consts</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">finset</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_true</span> <span class=\"o\">:=</span> <span class=\"n\">singleton</span> <span class=\"n\">t_true</span>\n<span class=\"bp\">|</span> <span class=\"n\">t_false</span> <span class=\"o\">:=</span> <span class=\"n\">singleton</span> <span class=\"n\">t_false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">t_if</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">consts</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"bp\">∪</span>  <span class=\"o\">(</span><span class=\"n\">consts</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"bp\">∪</span>  <span class=\"o\">(</span><span class=\"n\">consts</span> <span class=\"n\">t3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>gives me the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">consts</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">term</span><span class=\"o\">,</span>\n<span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_union</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229320979,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615218887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"379013\">@Guilherme Espada</span> For various reasons, we don't use <code>\\union</code> but <code>\\sup</code></p>",
        "id": 229321345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615219015
    },
    {
        "content": "<p>So that gives you a square union symbol</p>",
        "id": 229321403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615219033
    },
    {
        "content": "<p>I did try sup too after scrolling a bit thru the source of finset, but I get a similar error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">consts</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">term</span><span class=\"o\">,</span>\n<span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"n\">t3</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_sup</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">term</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229321619,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615219097
    },
    {
        "content": "<p>Do you need decidable equality?</p>",
        "id": 229321891,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615219192
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">finset.has_union</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">has_union</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229322088,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615219222
    },
    {
        "content": "<p>Probably easiest to get by writing \"@[derive decidable_eq]\" wherever you define \"term\"</p>",
        "id": 229323089,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615219406
    },
    {
        "content": "<p>This does work! it also allows me to use the set syntax which didn't work before. What exactly does this do? mark this type as something which can be \"equaled\"?</p>",
        "id": 229323848,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615219581
    },
    {
        "content": "<p>Exactly. You might want to say \"@[derive [decidable_eq, fintype]]\"</p>",
        "id": 229324445,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615219723
    },
    {
        "content": "<p>It marks that you can decidably check it two terms are equal or not equal. Examples of types where that isn't true for terms are the reals, or infinite streams, etc</p>",
        "id": 229324844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615219806
    },
    {
        "content": "<p><code>finset</code> keeps explicit track of the terms in the set, so it can offer a computable <code>finset.card</code>. This is problematic if you're dealing with sets like the real numbers, because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msup><mi>π</mi><mn>2</mn></msup><mi mathvariant=\"normal\">/</mi><mn>6</mn><mo separator=\"true\">,</mo><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><msup><mi>n</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{\\pi^2/6,\\sum_{n\\geq1}n^{-2}\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.208997em;vertical-align:-0.39488900000000005em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139799999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span> is a set of size one but checking this needs as input a theorem of Euler. This is fixed in Lean by demanding that there's an algorithm which can tell whether two terms of your type are equal, because then you don't run into these problems when trying to compute the size of your set. Whether or not <code>finset</code> is the appropriate thing to use depends on your use case.</p>",
        "id": 229332660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615221902
    },
    {
        "content": "<p>Cool, thanks for the info. Where is the fintype deriveable located? I can't seem to import it</p>",
        "id": 229335126,
        "sender_full_name": "Guilherme Espada",
        "timestamp": 1615222723
    },
    {
        "content": "<p>If you don't need it, then you don't need it. Otherwise, tactic.derive_fintype like Bryan said below</p>",
        "id": 229387045,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615242154
    },
    {
        "content": "<p>I think the derive handler is in <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/derive_fintype.html\"><code>tactic.derive_fintype</code></a>.</p>",
        "id": 229390514,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615243787
    },
    {
        "content": "<p>This imports <code>data.fintype.basic</code>, so presumably you can't get it by importing <code>data.fintype.basic</code>.</p>",
        "id": 229390630,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615243825
    }
]