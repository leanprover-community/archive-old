[
    {
        "content": "<p>To practice writing definitions, I am trying to define what it means for an element $g$ of a group $G$ to generate $G$. I have the definition </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_generator</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"err\">∈</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n\n<p>This gives the error </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"err\">∈</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_2</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_mem</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n\n\n<p>What does this mean? How can I fix this definition?</p>",
        "id": 204245953,
        "sender_full_name": "Sara Fish",
        "timestamp": 1595012677
    },
    {
        "content": "<p>Use <code>k : \\N</code> instead of <code>k \\in \\N</code> in your definition.</p>",
        "id": 204246065,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1595012746
    },
    {
        "content": "<p>Ah, thanks. So \\in is for sets specifically and : is for when something is just any term of that type?</p>",
        "id": 204246284,
        "sender_full_name": "Sara Fish",
        "timestamp": 1595012833
    },
    {
        "content": "<p>exactly (this also confuses me often)</p>",
        "id": 204246668,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1595013003
    },
    {
        "content": "<p>I found it to be helpful to look carefully at the definitions for how set membership works.  A term <code>s</code> of <code>set X</code> is nothing more than a function <code>X → Prop</code>, and for sets <code>x ∈ s</code> is defined to be <code>s x</code>.  (See <code>set.mem</code>, which is attached to the <code>∈</code> notation through the <code>has_mem</code> instance on the next line).</p>\n<p>So, a \"set\" in Lean is more like a subset of a given type, and it is given by an indicator function.</p>\n<p>You can turn a set into a type using <code>subtype</code>, which is usually done either through an automatic coercion in certain places or by up arrow notation.  As an example of an automatic coercion, you can write the binder <code>x : s</code> when <code>s</code> is a set.  But then <code>x</code> is a slightly different thing, where <code>x.val</code> is the actual term in <code>X</code> and <code>x.property</code> is the proof that <code>x ∈ s</code>.</p>\n<p>Maybe it's also worth knowing that when you write <code>∀ x ∈ s, ...</code> it's equivalent to <code>∀ (x : X) (H : x ∈ s), ...</code>.</p>",
        "id": 204250588,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1595015416
    },
    {
        "content": "<p>thanks for this detailed explanation!</p>",
        "id": 204251473,
        "sender_full_name": "Carl Friedrich Bolz-Tereick",
        "timestamp": 1595015995
    }
]