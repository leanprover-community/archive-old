[
    {
        "content": "<p>There is an explanation in theorems proving in lean:<br>\n\"In contrast to the usage with have, an anonymous assume needs an extra colon. The reason is that Lean allows us to write assume h to introduce a hypothesis without specifying it, and without the colon it would be ambiguous as to whether the h here is meant as the label or the assumption.\"<br>\nbut I didn't get it. I feel like anonymous assume should not have an extra colon because it seems to be the same as have and the last one does not have an extra colon when used anonymously.</p>",
        "id": 209488012,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599642751
    },
    {
        "content": "<p>How do you use <code>have</code> without a colon?</p>",
        "id": 209488095,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599642836
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"kn\">variable</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">t₀</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"k\">have</span>  <span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_trans</span> <span class=\"err\">‹</span><span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"err\">›</span> <span class=\"err\">‹</span><span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"err\">›</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">this</span> <span class=\"err\">‹</span><span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">≥</span> <span class=\"n\">f</span> <span class=\"mi\">2</span><span class=\"err\">›</span>\n</code></pre></div>",
        "id": 209488319,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599642997
    },
    {
        "content": "<p>In term mode you can use <code>have</code> without colon</p>",
        "id": 209488326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599643000
    },
    {
        "content": "<p>yes</p>",
        "id": 209488340,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599643012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216358\">@Fames Yasd</span> Pro tip: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 209488362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599643025
    },
    {
        "content": "<p>but for some reason I can't use assume without colon</p>",
        "id": 209488363,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599643025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span>  thank you</p>",
        "id": 209488420,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599643077
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>What would this mean?<br>\nAre you assuming <code>this : f x</code> or is it <code>assume (f : _) (x : _)</code>?</p>",
        "id": 209488567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599643163
    },
    {
        "content": "<p>so the ambiguity rises because we can assume several statements?</p>",
        "id": 209488835,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599643328
    },
    {
        "content": "<p>I did not know that we can assume several statements in a row</p>",
        "id": 209488861,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599643344
    },
    {
        "content": "<p>could have made it in a separate keyword like assumptions</p>",
        "id": 209488923,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599643404
    },
    {
        "content": "<p>maybe not, anyway thanks for the info</p>",
        "id": 209489071,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599643498
    },
    {
        "content": "<p>But <code>assume x y z</code> reads more natural, right?</p>",
        "id": 209489087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599643506
    },
    {
        "content": "<p>yes</p>",
        "id": 209489099,
        "sender_full_name": "Fames Yasd",
        "timestamp": 1599643513
    },
    {
        "content": "<p>So, personally, I think the extra colon is the better tradeoff</p>",
        "id": 209489128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599643538
    }
]