[
    {
        "content": "<p>I'm defining (one plus) the affine dimension of a set in a normed vector space analogously to how you'd define the dimension of a linear subspace, namely </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">succ_affine_dim</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"bp\">//</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">affine_independent</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)}),</span> <span class=\"n\">cardinal.mk</span> <span class=\"n\">ι.val</span>\n</code></pre></div>\n<p>If I know that <code>succ_affine_dim s = n + 1</code>, how can I get a set <code>t ⊆ s</code> which is affinely independent and has size <code>n + 1</code>? Really my question is this: if the supremum of a family <code>ι : A -&gt; cardinal</code> is a finite value <code>N</code>, how can I get <code>a : A</code> such that <code>ι a = N</code>?</p>",
        "id": 296914962,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662165981
    },
    {
        "content": "<p>I guess there's nothing really fancy going on here, I can just apply the definition of the supremum to N - 1. I just got scared by cardinals</p>",
        "id": 296915222,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662166291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> has marked this topic as resolved.</p>",
        "id": 296917329,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662166538
    },
    {
        "content": "<p>Actually, I'm running into some annoying things here. Namely I'm taking the csupr of a family of <code>set α</code> and getting annoying goals to show boundedness. Should I just close these by saying the cardinality of the powerset gives a uniform bound or are there nicer specialized lemmas for dealing with cardinals? Does module.rank have to deal with this stuff?</p>",
        "id": 297035793,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662239629
    },
    {
        "content": "<p>ah, I think the lemma cardinal.bdd_above_iff_small is what I was looking for</p>",
        "id": 297036271,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662240011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> has marked this topic as resolved.</p>",
        "id": 297036277,
        "sender_full_name": "Notification Bot",
        "timestamp": 1662240013
    },
    {
        "content": "<p>It seems you don't need the normed structures at all? Another way to define this quantity is to take <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_span\">docs#affine_span</a>, take its <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_subspace.direction\">docs#affine_subspace.direction</a>, then take <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.rank\">docs#module.rank</a> plus one (except when <code>s</code> is empty it should be zero). If this isn't adopted as the definition, we should still prove both definitions are the same.</p>",
        "id": 297051102,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662257586
    },
    {
        "content": "<p>Oh this is much nicer, thanks! I had no idea about affine_space.direction</p>",
        "id": 297053127,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662260400
    },
    {
        "content": "<p>I agree that the normed structures aren't necessary here, I'm not sure why I included them</p>",
        "id": 297053187,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662260436
    },
    {
        "content": "<p>I'm probably going to use the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">affine_dim</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">module.rank</span> <span class=\"o\">((</span><span class=\"n\">affine_span</span> <span class=\"n\">k</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">direction</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 297053409,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662260744
    },
    {
        "content": "<p>I think this is reasonable, though I expect you'd need to state certain theorems with the <code>s.nonempty</code> condition; I think the situation is similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree\">docs#polynomial.nat_degree</a>, where the degree of the zero polynomial is defined to be zero, the same as for constant polynomials, so some theorems need to assume the polynomial is nonzero; here the empty set and all singletons will have the same <code>affin_dim</code>. If you want to distinguish the empty case from the singleton case, for polynomials we have we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree\">docs#polynomial.degree</a> that takes value in <code>with_bot ℕ</code>, so instead of adding one to everything, we adjoin a bottom element that stands for -1 (or -infty if you like); maybe you want to mimic the polynomial setup?</p>",
        "id": 297054884,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662262617
    },
    {
        "content": "<p>Maybe? I wasn't planning to flesh this out very much, it's just an intermediate step between the calculation H^n(S^n) = Z and the statement that a continuous self map of an arbitrary nonempty convex compact set in R^n has a fixed point. So the only real theorem I need is that if C is a nonempty compact convex set in some normed vector space and C had affine dimension n then C is homeomorphic to the n euclidean dimensional closed ball</p>",
        "id": 297055579,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662263365
    },
    {
        "content": "<p>Oh if it's just for your project then feel free to use what's most convenient! I'm just stating some considerations for building mathlib APIs.</p>\n<p>As for the convexity proof, you might want to follow the recent development on convex bodies, especially <a href=\"#narrow/stream/116395-maths/topic/Convex.20bodies/near/296785326\">about the intrinsic interior</a>; if C is a convex body and p is a point in its intrinsic interior, then I think <code>x ↦ gauge C (x - p) * (x - p)/∥x - p∥</code> should be a homeomorphism from the affine span of C to its (affine_subspace.)direction that takes C to the unit ball, and the proof would combine the continuity of gauge with the boundedness of <code>(x - p)/∥x - p∥</code> (for continuity around p). Is this the proof you have in mind?</p>",
        "id": 297058510,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662266535
    },
    {
        "content": "<p>Yep, I already proved this but with p = 0 (edit: I was then going to combine the dimension stuff with translating some point in the interior to 0)</p>",
        "id": 297058565,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662266608
    },
    {
        "content": "<p>Pity I was duplicating work!</p>",
        "id": 297058569,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662266617
    },
    {
        "content": "<p>It doesn't seem they've proved what I said; I think they're still arguing about the definition?</p>",
        "id": 297058621,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662266665
    },
    {
        "content": "<p>Ah okay, that makes me feel better :P</p>",
        "id": 297058629,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662266678
    },
    {
        "content": "<p>But yeah my work is at <a href=\"https://github.com/Shamrock-Frost/BrouwerFixedPoint/blob/master/src/convex.lean\">https://github.com/Shamrock-Frost/BrouwerFixedPoint/blob/master/src/convex.lean</a>, see normalize_by_gauge_cont and compact_convex_with_zero_in_interior_homeo_to_ball</p>",
        "id": 297058666,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662266726
    },
    {
        "content": "<p>One of the reasons I've been so hesitant to start merging things into mathlib is that I am <em>terrible</em> at naming things</p>",
        "id": 297058676,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1662266743
    },
    {
        "content": "<p>I think the names are not bad at all, and people may suggest better names when reviewing PRs once you open them. Generally you just follow what's already in mathlib, like <code>cont</code> would be <code>continuous</code> (except in <code>cont_diff</code>), <code>homeo</code> would be <code>homeomorph</code>, and it seems <code>dim</code> is widely accepted as a shorthand for <code>dimension</code> (actually there are some uses of <code>homeo</code> as well). Your code also follow the mathlib style quite well, just some <code>:</code>, <code>:=</code> that need to be put at the end of the previous line.</p>",
        "id": 297059054,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1662267156
    }
]