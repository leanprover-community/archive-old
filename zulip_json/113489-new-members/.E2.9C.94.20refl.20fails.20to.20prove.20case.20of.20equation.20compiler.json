[
    {
        "content": "<p>I am defining the choose function by Pascal's rule, and am trying to prove basic properties about it. I am running into a problem which is summarized by the comments in this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">choose</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>        <span class=\"c1\">-- By definition, choose n 0 := 1, so refl should prove choose n 0 = 1, right?</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">n_choose_n_eq_one</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">choose_sym</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.zero_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_choose_n_eq_one</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>  <span class=\"c1\">-- So why does refl fail to prove choose b 0 = 1?</span>\n<span class=\"kd\">end</span>          <span class=\"c1\">-- What is the best way to prove choose b 0 = 1?</span>\n</code></pre></div>",
        "id": 290535143,
        "sender_full_name": "Michael Earnest",
        "timestamp": 1658507716
    },
    {
        "content": "<p>looks like Lean somehow breaks down the <code>n</code> in <code>n 0</code> into two cases.<code>cases b; refl</code> works.</p>",
        "id": 290536597,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658508382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515599\">Michael Earnest</span> has marked this topic as resolved.</p>",
        "id": 290539492,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658509602
    },
    {
        "content": "<p>If you  swap the order of the arguments then lean might not do that</p>",
        "id": 290545783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658512518
    },
    {
        "content": "<p>The equation compiler does things behind the scenes which you might not guess; if <code>choose n 0 = 1</code> isn't <code>refl</code> then it will almost certainly be <code>by simp</code> so you can use that when you're making your API.</p>",
        "id": 290554349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658516921
    },
    {
        "content": "<p>When working with inductively defined objects like these, I like to separate all cases of the definition into their own <code>simp</code> lemmas. These lemmas can almost always be immediately proven by <code>by rw choose</code> or such</p>",
        "id": 290560762,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658520874
    },
    {
        "content": "<p>I'm curious: What would an alternative solution (that is, one that does not case split on the first argument to <code>choose</code>) look like in this particular case? Junyan's solution works but I couldn't get the other suggestions to work.</p>",
        "id": 290562869,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1658521542
    },
    {
        "content": "<p>The equation compiler is doing a case split on n when defining <code>choose n 0</code>. As Eric said, it might be the case that if you reverse the order of the input variables this case split might not happen. I think that in Lean 4 you might not need the case split. The lean 3 equation compiler is what it is, it's difficult to change what it does. Definitional equality is overrated anyway. ;-)</p>",
        "id": 290563913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658522153
    }
]