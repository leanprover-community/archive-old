[
    {
        "content": "<p>Hello everyone,<br>\nI'm Petros, I am an undergrad at California State University Northridge, and I have been working with my abstract algebra professor this past semester to understand... well to understand what's up with lean!</p>\n<p>I just learned the Isomorphism Theorems for groups, rings, and modules recently so I've been trying to understand where (if) these theorems are in matlib.<br>\nI started with the natural number game and the tutorials, and I've read through the reference manual and I've dug around the documentation for matlib (and I went on quite an adventure learning how lean handles quotients) and eventually I found the documentation of the isomorphism theorems for setoids and monoids.</p>\n<p>And now I'm not sure how to proceed! </p>\n<p>I booted up lean in VScode with the hope of coding up the third isomorphism for rings myself, but I got stuck trying to define a group homomorphism from one quotient group to another.</p>",
        "id": 233899928,
        "sender_full_name": "Petros Mavromichalis",
        "timestamp": 1618006394
    },
    {
        "content": "<p>One place you could look is here<br>\n<a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a></p>",
        "id": 233900279,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618006636
    },
    {
        "content": "<p>For example the first iso thm for groups appears under group theory there.</p>",
        "id": 233900297,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618006654
    },
    {
        "content": "<p>All this stuff is possible in Lean. Why not post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> showing how far you've got? The two main tools to define maps from quotient groups are in <code>group_theory.quotient_group</code> and they're <code>quotient_group.lift</code> and <code>quotient_group.map</code>.</p>",
        "id": 233900391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618006711
    },
    {
        "content": "<p>Mathematically, <code>quotient_group.lift</code> gives you a group homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mo>→</mo><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">G/N\\to H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> from a group homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>→</mo><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">G\\to H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> in the kernel, and <code>quotient_group.map</code> gives you a group homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mo>→</mo><mi>H</mi><mi mathvariant=\"normal\">/</mi><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">G/N\\to H/M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> from a group homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>→</mo><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">G\\to H</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> which sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. I'm reluctant to say too much more without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> though to check we're on the same page.</p>",
        "id": 233900585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618006846
    },
    {
        "content": "<p>Yes thank you! I did know the first isomorphism theorem was there, but I haven't seen as much on the third.</p>",
        "id": 233900878,
        "sender_full_name": "Petros Mavromichalis",
        "timestamp": 1618007058
    },
    {
        "content": "<p>I'm not savvy on how to include code in my post</p>",
        "id": 233900958,
        "sender_full_name": "Petros Mavromichalis",
        "timestamp": 1618007128
    },
    {
        "content": "<p>You might find it stated in a surprising way here, for example one could say that the lattice of subgroups of G containing N was order-isomorphic to the lattice of subgroups of G/N. This could be naturally expressed in Lean but it might not be the way to explain it to an undergraduate.</p>",
        "id": 233900969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618007139
    },
    {
        "content": "<p>Code in post: put <code> ``` </code> on a line by itself at the beginning, then code under it, and then <code> ``` </code> on a line by itself at the end. Make sure you include all imports etc etc.</p>",
        "id": 233901045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618007174
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">third_iso_theorem_rings</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I.quotient</span> <span class=\"bp\">→</span> <span class=\"n\">J.quotient</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">I.quotient.mk</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">J.quotient.mk</span> <span class=\"n\">r</span><span class=\"o\">)):</span>\n <span class=\"n\">quotient</span><span class=\"o\">(</span><span class=\"n\">ker</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">I.quotient</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">J.quotient</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Definitely not a working example, this is the structure of what I want and I have been correcting it piece by piece</p>",
        "id": 233901308,
        "sender_full_name": "Petros Mavromichalis",
        "timestamp": 1618007396
    },
    {
        "content": "<p>Yeah this is not working at all :-) The first error is that Lean complains that it doesn't know that R is a commutative ring, so you'd better add [comm_ring R] to your list of variables to make <code>R</code> a commutative ring, assuming you want to prove a theorem about commutative rings (this is exactly why mwes are important, so we can establish what you think the theorem is).</p>",
        "id": 233901533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618007530
    },
    {
        "content": "<p>oops! yes it definitely isn't going to work even with that fix haha<br>\nI'm trying to wrap my head around how <a href=\"http://I.quotinet.mk\">I.quotinet.mk</a> works at the moment, because that is the next failure point</p>",
        "id": 233901853,
        "sender_full_name": "Petros Mavromichalis",
        "timestamp": 1618007744
    },
    {
        "content": "<p>Yeah, I honestly don't understand why projection notation isn't working there. You can fix it with <code>(h : f(ideal.quotient.mk I r) = (ideal.quotient.mk J r))</code>.</p>",
        "id": 233901910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618007769
    },
    {
        "content": "<p>Right now your definition says that if I and J are ideals of R and if r is an element of R, and if you have a random function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">R/I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">R/J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> which sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>+</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">r+I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>+</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">r+J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> then...something. What mathematically do you want to conclude?</p>",
        "id": 233902080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618007901
    },
    {
        "content": "<p>PS I am about to go to bed (I'm in UK) so I'll have to leave you to someone else. Another issue presumably is that right now <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is just a set-theoretic function, which is probably not what you want, and your hypothesis involves some random element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> of the ring, which presumably isn't what you want either (for example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> could be 0 and then if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is a ring homomorphism then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> will be automatic).</p>",
        "id": 233902185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618008000
    },
    {
        "content": "<p>This will be the reason you're getting nowhere with ker(f) -- a random map between two types (or sets or however you want to think about them) doesn't have a kernel, you're going to need more structure on f before the concept of a kernel makes sense.</p>",
        "id": 233902303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618008058
    },
    {
        "content": "<p>Okay, thank you very much! <br>\nWould a quantifier fix that right away? <br>\n<code>(h : ∀ r : R, f(ideal.quotient.mk I r) = ideal.quotient.mk J r)</code></p>",
        "id": 233902663,
        "sender_full_name": "Petros Mavromichalis",
        "timestamp": 1618008343
    },
    {
        "content": "<p>Well I don't know what you're trying to say mathematically yet, but that looks like a more useful statement than what you have right now.</p>",
        "id": 233902727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618008384
    },
    {
        "content": "<p>Aah, you want to say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>I</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"normal\">k</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">r</mi></mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(R/I)/(\\mathrm{ker}(f))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathrm\">k</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">r</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> is isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi mathvariant=\"normal\">/</mi><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">R/J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>?</p>",
        "id": 233902782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618008439
    },
    {
        "content": "<p>Right now you're claiming that you an construct a bijection of sets (or strictly speaking of types, because we're doing type theory, but a type is the same as a set in this context)</p>",
        "id": 233902880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618008488
    },
    {
        "content": "<p>right this is where I am at now, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">The third isomorphism theorem for rings outline:</span>\n<span class=\"cm\">  For ideals I J of ring R</span>\n<span class=\"cm\">  with I ≤ J as addative groups</span>\n<span class=\"cm\">  If</span>\n<span class=\"cm\">  ∀ r ∈ R</span>\n<span class=\"cm\">  f: R/I → R/J</span>\n<span class=\"cm\">  f(r + I) = r + J</span>\n\n<span class=\"cm\">  then</span>\n<span class=\"cm\">  f is a group homomorphism with</span>\n<span class=\"cm\">  ker(f) = J/I and</span>\n<span class=\"cm\">  (R/I)/ker(f) ≃ R/J</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">third_iso_theorem_rings</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I.quotient</span> <span class=\"bp\">→</span> <span class=\"n\">J.quotient</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">J</span> <span class=\"n\">r</span><span class=\"o\">)):</span>\n <span class=\"n\">quotient</span><span class=\"o\">(</span><span class=\"n\">ker</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">I.quotient</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">J.quotient</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 233902962,
        "sender_full_name": "Petros Mavromichalis",
        "timestamp": 1618008556
    },
    {
        "content": "<p>You are claiming a lot of stuff in your comment. This looks more like three lemmas than one.</p>",
        "id": 233903082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618008621
    },
    {
        "content": "<p>If you don't want to assume that f is a ring homomorphism or a group homomorphism then you'll have to prove that first, before you can even talk about the kernel of f.</p>",
        "id": 233903128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618008655
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">f.map_add</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I.quotient</span> <span class=\"bp\">→</span> <span class=\"n\">J.quotient</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">I</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal.quotient.mk</span> <span class=\"n\">J</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">I.quotient</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>might be a place to start.</p>",
        "id": 233903264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618008758
    },
    {
        "content": "<p>But this is quite tricky! You will need to be a master of lean quotients to figure out how to do this.</p>",
        "id": 233903588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618008972
    },
    {
        "content": "<p>Do you know the maths proof?</p>",
        "id": 233903628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618009005
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.quotient\">docs#ideal.quotient</a></p>",
        "id": 233903761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618009103
    },
    {
        "content": "<p>Okay, I have  a lot more work to do then! I think I know where to take this from here :) <br>\nI do know the proof</p>",
        "id": 233903767,
        "sender_full_name": "Petros Mavromichalis",
        "timestamp": 1618009115
    },
    {
        "content": "<p>(answering an earlier point - projection notation allows <code>f.bar</code> to mean <code>foo.bar f</code> for <code>f : foo</code>, but you can't chain multiple dots together and expect <code>f.bar.baz</code> to mean <code>foo.bar.baz f</code>)</p>",
        "id": 233903826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618009171
    },
    {
        "content": "<p>Hmm, I can't see the inductive principle you need, you might have to get your hands dirty with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.quotient.mk_surjective\">docs#ideal.quotient.mk_surjective</a> . Good luck! I'll be back in about 8 hours :-)</p>",
        "id": 233904106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618009359
    }
]