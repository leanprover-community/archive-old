[
    {
        "content": "<p>when I try to define the category of  field, </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">fields</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">fStruc</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"kn\">instance</span> <span class=\"n\">fields_has_hom</span> <span class=\"o\">:</span> <span class=\"n\">has_hom</span> <span class=\"n\">fields</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span><span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ring_hom</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">k</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">fStruc</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"n\">fStruc</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>There would be an error, it seems like a field instance can't be regarded as semiring?<br>\nBut this structure has no Error,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">fieldsOver</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"err\">ùïÉ</span> <span class=\"o\">:</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"err\">ùïú</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">L2k</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">‚Üí+*</span> <span class=\"n\">k</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>why?</p>",
        "id": 202071961,
        "sender_full_name": "Keyao Peng",
        "timestamp": 1593165875
    },
    {
        "content": "<p>Use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">```</span>\n<span class=\"n\">code</span> <span class=\"n\">here</span>\n<span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 202071990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593165909
    },
    {
        "content": "<p>Can you explain in text what you are trying to do?</p>",
        "id": 202072000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593165922
    },
    {
        "content": "<p>Build the category of fields and overfields?</p>",
        "id": 202072033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593165961
    },
    {
        "content": "<p>What do you want to use them for?</p>",
        "id": 202072080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593165969
    },
    {
        "content": "<p>The error is that ou are passing the structures to <code>ring_hom</code>, but it only takes <code>a.k</code> and <code>b.k</code> as explicit arguments.</p>",
        "id": 202072125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593166018
    },
    {
        "content": "<p>I am trying to prove some theorems for Galois theory</p>",
        "id": 202072162,
        "sender_full_name": "Keyao Peng",
        "timestamp": 1593166049
    },
    {
        "content": "<p>However, you have to explicitly tell lean to regard  <code>a.k</code> as a field with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fields</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">fStruc</span>\n</code></pre></div>",
        "id": 202072190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593166076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312543\">Keyao Peng</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20ring_hom.20for.20fields/near/202072162\">said</a>:</p>\n<blockquote>\n<p>I am trying to prove some theorems for Galois theory</p>\n</blockquote>\n<p>I doubt whether these categories will make your life easier.</p>",
        "id": 202072241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593166095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20ring_hom.20for.20fields/near/202072190\">said</a>:</p>\n<blockquote>\n<p>However, you have to explicitly tell lean to regard  <code>a.k</code> as a field with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fields</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">fStruc</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Thanks, this works.</p>",
        "id": 202072527,
        "sender_full_name": "Keyao Peng",
        "timestamp": 1593166321
    },
    {
        "content": "<p>We have <code>algebra</code> for field extensions.</p>",
        "id": 202073118,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593166788
    }
]