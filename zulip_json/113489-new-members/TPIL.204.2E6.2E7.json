[
    {
        "content": "<p>In TPIL 4.6.7 we're asked to prove the following:</p>\n<div class=\"codehilite\"><pre><span></span>example (x : ℤ) : x * 0 = 0 := sorry\n</pre></div>\n\n\n<p>It's suggested that we use <code>#check sub_self</code> as well as the identities in section 4.2.</p>\n<p>It looks like I can get:</p>\n<div class=\"codehilite\"><pre><span></span>x * 0 = x * 0 + 0\n</pre></div>\n\n\n<p>using</p>\n<div class=\"codehilite\"><pre><span></span>eq.symm (add_zero (x * 0))\n</pre></div>\n\n\n<p>And I can get:</p>\n<div class=\"codehilite\"><pre><span></span>x * 0 - x * 0 = 0\n</pre></div>\n\n\n<p>using</p>\n<div class=\"codehilite\"><pre><span></span>sub_self (x * 0)\n</pre></div>\n\n\n<p>So I have these two:</p>\n<div class=\"codehilite\"><pre><span></span>x*0 = x*0 + 0\n\nx*0 - x*0 = 0\n</pre></div>\n\n\n<p>and it seems like I just need an intermediary step (move the <code>x*0</code> to the left of the <code>=</code> in the first expression to get the second?)</p>",
        "id": 180316324,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1573311243
    },
    {
        "content": "<p>I did enumerate the various applications of the identities with <code>x * 0</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">add_zero</span>     <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- x * 0 + 0 = x * 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">zero_add</span>     <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 0 + x * 0 = x * 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mul_one</span>      <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- x * 0 * 1 = x * 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">one_mul</span>      <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- 1 * (x * 0) = x * 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">neg_add_self</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- -(x * 0) + x * 0 = 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">add_neg_self</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- x * 0 + -(x * 0) = 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">sub_self</span>     <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">-- x * 0 - x * 0 = 0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">mul_comm</span>     <span class=\"n\">x</span> <span class=\"mi\">0</span>     <span class=\"c1\">-- x * 0 = 0 * x</span>\n</pre></div>",
        "id": 180316492,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1573311527
    },
    {
        "content": "<p>It might be easier to start from something like this instead:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>(<a href=\"https://leanprover-community.github.io/lean-web-editor/#code=example%20%28x%20%3A%20%E2%84%A4%29%20%3A%20x%20*%200%20%3D%200%20%3A%3D%20%0Acalc%20x%20*%200%20%3D%20x%20*%20%281%20-%201%29%20%3A%20by%20rw%20%E2%86%90sub_self%0A%20%20%20%20%20%20%20...%20%3D%20x%20-%20x%20%20%20%20%20%20%20%3A%20by%20rw%20%5Bmul_sub%2C%20mul_one%5D%0A%20%20%20%20%20%20%20...%20%3D%200%20%20%20%20%20%20%20%20%20%20%20%3A%20sub_self%20x\" target=\"_blank\" title=\"https://leanprover-community.github.io/lean-web-editor/#code=example%20%28x%20%3A%20%E2%84%A4%29%20%3A%20x%20*%200%20%3D%200%20%3A%3D%20%0Acalc%20x%20*%200%20%3D%20x%20*%20%281%20-%201%29%20%3A%20by%20rw%20%E2%86%90sub_self%0A%20%20%20%20%20%20%20...%20%3D%20x%20-%20x%20%20%20%20%20%20%20%3A%20by%20rw%20%5Bmul_sub%2C%20mul_one%5D%0A%20%20%20%20%20%20%20...%20%3D%200%20%20%20%20%20%20%20%20%20%20%20%3A%20sub_self%20x\">Spoiler</a>)</p>",
        "id": 180317035,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573312311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Ah! OK... This seems to work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span>\n        <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span>   <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sub_self</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_sub</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"mi\">0</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sub_self</span>\n</pre></div>\n\n\n<p>Thank you again!!!</p>",
        "id": 180317447,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1573312864
    },
    {
        "content": "<p>Nice work! (and it looks like I had an unnecessary <code>mul_one</code> step in my \"Spoiler\", whoops)</p>",
        "id": 180317528,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573312991
    },
    {
        "content": "<p>Here's a version which doesn't use rewrite:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>              <span class=\"k\">from</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">,</span>  <span class=\"k\">from</span> <span class=\"n\">mul_sub</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>            <span class=\"k\">from</span> <span class=\"n\">sub_self</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"k\">calc</span>\n        <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span>   <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>   <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">h2</span>\n        <span class=\"bp\">...</span>     <span class=\"bp\">=</span> <span class=\"mi\">0</span>             <span class=\"o\">:</span> <span class=\"n\">h3</span>\n</pre></div>",
        "id": 180317967,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1573313694
    },
    {
        "content": "<p>As an aside, when I open your spoiler link to view your approach, I see errors in the Lean Web Editor:</p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/jZlA9Xe.png\" target=\"_blank\" title=\"https://i.imgur.com/jZlA9Xe.png\"><img src=\"https://i.imgur.com/jZlA9Xe.png\"></a></div>",
        "id": 180318693,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1573314749
    },
    {
        "content": "<p>Do I need to do something to get it to execute properly in there?</p>",
        "id": 180318698,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1573314774
    },
    {
        "content": "<p>Try clicking the (?) icon and then scroll down and click \"Clear JS / wasm cache and refresh\".</p>",
        "id": 180318787,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573314911
    },
    {
        "content": "<p>I needed to click the 'Clear library cache and refresh' button as well as that one. Now it's loading fine. Thanks <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> !</p>",
        "id": 180321394,
        "sender_full_name": "Eduardo Cavazos",
        "timestamp": 1573318555
    }
]