[
    {
        "content": "<p>To get some practice with Lean I am trying to write some of the basic definitions of model theory. I have defined a term and I am trying to write a function that returns whether a particular variable occurs in a term. To to this I will need to recursively call the function on the list of terms that follow a function symbol. What would be the most concise functional way to implement something like this with the way I have defined things?</p>\n<p>inductive term<br>\n| var           : ℕ → term<br>\n| cnst          : L.const → term<br>\n| func (n : ℕ)  : L.functions n → (fin n → term) → term</p>\n<p>/-- If a variable occurs in a term -/<br>\ndef occurs_in_term : ℕ → term L → bool<br>\n| n (var m)        := if n = m then true else false<br>\n| _ (cnst c)       := false<br>\n| _ (func _ _ t)   := -- TODO: Want to check true for something in range the range of t</p>",
        "id": 253888521,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631993269
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 253889637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631994551
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 253889736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631994640
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sig</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">sig</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">sig.const</span> <span class=\"o\">:</span> <span class=\"n\">sig</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">sig.functions</span> <span class=\"o\">:</span> <span class=\"n\">sig</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">cnst</span> <span class=\"o\">:</span> <span class=\"n\">L.const</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"sd\">/-- If a variable occurs in a term -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">occurs_in_term</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cnst</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_bool</span> <span class=\"bp\">$</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">occurs_in_term</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 253889898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631994827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"438167\">@Nick Pilotti</span></p>",
        "id": 253889964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631994882
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 253891900,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631997015
    },
    {
        "content": "<p>Thank you, can you explain the meaning of <code>to_bool $</code> ?</p>",
        "id": 253891961,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631997088
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"sd\">/-- Def 1.2.1. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">char</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">language</span>\n\n<span class=\"sd\">/-- The type of constants in a given language. -/</span>\n<span class=\"kd\">@[nolint has_inhabited_instance]</span> <span class=\"kd\">def</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">L.functions</span> <span class=\"mi\">0</span>\n\n<span class=\"sd\">/-- The language of number theory -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">L_NT</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span>      <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'0'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'S'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'+'</span><span class=\"o\">,</span> <span class=\"sc\">'⬝'</span><span class=\"o\">,</span> <span class=\"sc\">'E'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"o\">{},</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span>      <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'&lt;'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"o\">{}⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span> <span class=\"o\">:=</span> <span class=\"n\">func</span> <span class=\"mi\">2</span> <span class=\"sc\">'+'</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cnst</span> <span class=\"sc\">'0'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 253892365,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631997601
    },
    {
        "content": "<p>I'm having another problem. Here I am trying to define a term but I get the error :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">func</span> <span class=\"mi\">2</span> <span class=\"sc\">'+'</span>\n<span class=\"n\">term</span>\n  <span class=\"sc\">'+'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">char</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1.functions</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 253892465,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631997712
    },
    {
        "content": "<p><code>$</code> is function application with low precedence, so these lines are equivalent:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_bool</span> <span class=\"bp\">$</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">occurs_in_term</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">occurs_in_term</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 253892467,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1631997717
    },
    {
        "content": "<p>Thanks, and <code>to_bool</code> will convert a Prop into a bool I'm assuming? Does Lean compute this by iterating over all of the possible values of i?</p>",
        "id": 253892544,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631997786
    },
    {
        "content": "<p>Yes. There is a decidability instance that says that if <code>\\forall i : fin n, decidable (f i)</code> then <code>decidable (\\forall i : fin n, f i)</code>, and it works by iterating over all the elements of <code>fin n</code></p>",
        "id": 253892754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998026
    },
    {
        "content": "<p>the <code>to_bool</code> uses that decidability instance to turn the proposition into a <code>bool</code></p>",
        "id": 253892763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998046
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.decidable_forall_fin\">docs#nat.decidable_forall_fin</a></p>",
        "id": 253892834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998104
    },
    {
        "content": "<p>Oh ok, I think I can see what decidable means now.</p>",
        "id": 253892929,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998201
    },
    {
        "content": "<p>Oops, except this is not correct for the given definition since you are looking for any occurrence; it should use <code>\\exists</code> instead of <code>\\forall</code></p>",
        "id": 253892972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998207
    },
    {
        "content": "<p>So in the forall case it will be decidable only if the domain in finite?</p>",
        "id": 253892987,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998226
    },
    {
        "content": "<p>there is another decidability instance for that, of course</p>",
        "id": 253892991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998227
    },
    {
        "content": "<p>Yes</p>",
        "id": 253892992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998230
    },
    {
        "content": "<p>Good catch thanks</p>",
        "id": 253892997,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998237
    },
    {
        "content": "<p>Well in some cases it might be decidable for other reasons, for example divisibility of integers is defined using an unbounded existential but it is still decidable because of the theorem <code>a | b &lt;-&gt; b % a = 0</code></p>",
        "id": 253893023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998285
    },
    {
        "content": "<p>But decidable essentially means that is an instance somewhere which defines an algorithm to computer the answer? Something like that?</p>",
        "id": 253893099,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998352
    },
    {
        "content": "<p>So in the case of divisibility the algorithm would be division with remainder</p>",
        "id": 253893110,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998369
    },
    {
        "content": "<p>And forall would be to iterate through all the finite possibilities</p>",
        "id": 253893133,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998398
    },
    {
        "content": "<p>right</p>",
        "id": 253893137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998407
    },
    {
        "content": "<p>Thanks for the help, I knew there had to be an elegant way to do this without having to write a for loop</p>",
        "id": 253893194,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998452
    },
    {
        "content": "<p>Can I get help on why this gives a type error as well?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Def 1.2.1. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">char</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">language</span>\n\n<span class=\"sd\">/-- The type of constants in a given language. -/</span>\n<span class=\"kd\">@[nolint has_inhabited_instance]</span> <span class=\"kd\">def</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">L.functions</span> <span class=\"mi\">0</span>\n\n<span class=\"sd\">/-- The language of number theory -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">L_NT</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span>      <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'0'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'S'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'+'</span><span class=\"o\">,</span> <span class=\"sc\">'⬝'</span><span class=\"o\">,</span> <span class=\"sc\">'E'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"o\">{},</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span>      <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'&lt;'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"o\">{}⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span> <span class=\"o\">:=</span> <span class=\"n\">func</span> <span class=\"mi\">2</span> <span class=\"sc\">'+'</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cnst</span> <span class=\"sc\">'0'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 253893221,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998512
    },
    {
        "content": "<p>to be fair, there is a for loop (ish) involved, it's just buried in a library</p>",
        "id": 253893242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998546
    },
    {
        "content": "<p>right, I just didn't have to write one myself</p>",
        "id": 253893292,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998574
    },
    {
        "content": "<p>again, see <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 253893300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998599
    },
    {
        "content": "<p>sorry</p>",
        "id": 253893317,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998624
    },
    {
        "content": "<p>your example is not self contained so I don't know what error you are talking about</p>",
        "id": 253893325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998632
    },
    {
        "content": "<p>yes thank you, i forgot to include the definition of term</p>",
        "id": 253893339,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998661
    },
    {
        "content": "<p>The definition of <code>L_NT</code> is not going to compute very well, which means that you probably won't be able to write things like <code>cnst '0'</code></p>",
        "id": 253893405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998704
    },
    {
        "content": "<p>if I had to guess I think you should be writing <code>cnst \\&lt;'0', _\\&gt;</code> where <code>_</code> is a proof that <code>'0' \\in L_NT 0</code></p>",
        "id": 253893436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998757
    },
    {
        "content": "<p>which is probably <code>by simp [L_NT]</code></p>",
        "id": 253893450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998779
    },
    {
        "content": "<p>same for the <code>'+'</code></p>",
        "id": 253893458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631998793
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">first_order</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">char</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">language</span>\n\n<span class=\"sd\">/-- The type of constants in a given language. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">L.functions</span> <span class=\"mi\">0</span>\n\n<span class=\"sd\">/-- The language of number theory -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">L_NT</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span>      <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'0'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'S'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'+'</span><span class=\"o\">,</span> <span class=\"sc\">'⬝'</span><span class=\"o\">,</span> <span class=\"sc\">'E'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"o\">{},</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">if</span>      <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">{</span><span class=\"sc\">'&lt;'</span><span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"o\">{}⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Def 1.3.1. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>           <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">cnst</span>          <span class=\"o\">:</span> <span class=\"n\">L.const</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span> <span class=\"o\">:=</span> <span class=\"n\">cnst</span> <span class=\"sc\">'0'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">language</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">first_order</span>\n</code></pre></div>",
        "id": 253893559,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631998821
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span> <span class=\"o\">:=</span>\n<span class=\"n\">func</span> <span class=\"mi\">2</span> <span class=\"o\">⟨</span><span class=\"sc\">'+'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">L_NT</span><span class=\"o\">]⟩</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">var</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">cnst</span> <span class=\"o\">⟨</span><span class=\"sc\">'0'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">L_NT</span><span class=\"o\">,</span> <span class=\"n\">const</span><span class=\"o\">]⟩]</span>\n</code></pre></div>",
        "id": 253893750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999042
    },
    {
        "content": "<p>If I were you I would define <code>zero</code>, <code>add</code> etc to make this nicer</p>",
        "id": 253893784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999068
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">cnst</span> <span class=\"o\">⟨</span><span class=\"sc\">'0'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">L_NT</span><span class=\"o\">,</span> <span class=\"n\">const</span><span class=\"o\">]⟩⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span> <span class=\"o\">:=</span> <span class=\"n\">func</span> <span class=\"mi\">1</span> <span class=\"o\">⟨</span><span class=\"sc\">'S'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">L_NT</span><span class=\"o\">]⟩</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"mi\">2</span> <span class=\"o\">⟨</span><span class=\"sc\">'+'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">L_NT</span><span class=\"o\">]⟩</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"mi\">2</span> <span class=\"o\">⟨</span><span class=\"sc\">'⬝'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">L_NT</span><span class=\"o\">]⟩</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"mi\">2</span> <span class=\"o\">⟨</span><span class=\"sc\">'E'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">[</span><span class=\"n\">L_NT</span><span class=\"o\">]⟩</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span> <span class=\"o\">:=</span> <span class=\"n\">var</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 253893911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999245
    },
    {
        "content": "<p>I see, thank you</p>",
        "id": 253893971,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631999286
    },
    {
        "content": "<p>What purpose does norm_num serve here?</p>",
        "id": 253893981,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631999306
    },
    {
        "content": "<p>It is like <code>simp</code>, but it also knows how to solve equations involving numerals like <code>2 = 0 &lt;-&gt; false</code> which come up when reducing your if statement definition</p>",
        "id": 253894002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999351
    },
    {
        "content": "<p>If you used a <code>match</code> then I think <code>simp</code> alone would get it</p>",
        "id": 253894019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999386
    },
    {
        "content": "<p>Ok got it</p>",
        "id": 253894068,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631999405
    },
    {
        "content": "<p>So basically what lean expects is an element and then a proof that element is of the correct type?</p>",
        "id": 253894089,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631999455
    },
    {
        "content": "<p>Is that what the notation  <code>↥</code> means?</p>",
        "id": 253894101,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631999473
    },
    {
        "content": "<p>This happens because when you wrote <code>L.const → term</code> , that doesn't immediately typecheck because <code>L.const</code> is a set, not a type</p>",
        "id": 253894121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999508
    },
    {
        "content": "<p>it gets promoted (\"coerced\") to a type using <code>subtype</code></p>",
        "id": 253894127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999516
    },
    {
        "content": "<p>which is the type of pairs of an element <code>x</code> and a proof <code>h : x \\in A</code></p>",
        "id": 253894169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999532
    },
    {
        "content": "<p>So is a <code>set char</code> really just a subtype of char?</p>",
        "id": 253894205,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631999587
    },
    {
        "content": "<p>it is the collection of all predicates on <code>char</code></p>",
        "id": 253894272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999646
    },
    {
        "content": "<p>like the powerset</p>",
        "id": 253894275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999652
    },
    {
        "content": "<p>er, that's the type itself</p>",
        "id": 253894280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999664
    },
    {
        "content": "<p>an element of the type is some particular predicate on <code>char</code></p>",
        "id": 253894286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999676
    },
    {
        "content": "<p>and to apply the predicate on a particular element you write <code>x \\in A</code></p>",
        "id": 253894294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999696
    },
    {
        "content": "<p>so you could have also written that inductive without any coercions like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>           <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">cnst</span>          <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">L.const</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 253894334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999759
    },
    {
        "content": "<p>and now <code>cnst</code> takes the arguments separately rather than as a pair</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">cnst</span> <span class=\"sc\">'0'</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">L_NT</span><span class=\"o\">,</span> <span class=\"n\">const</span><span class=\"o\">])⟩</span>\n</code></pre></div>",
        "id": 253894387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999790
    },
    {
        "content": "<p>I see</p>",
        "id": 253894429,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631999869
    },
    {
        "content": "<p>The more leanish way to do this would be to just have a bespoke inductive type family for <code>L_NT.functions</code></p>",
        "id": 253894431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631999872
    },
    {
        "content": "<p>Can you show an example of that?</p>",
        "id": 253894481,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631999895
    },
    {
        "content": "<p>I see now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 253894525,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1631999990
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">first_order</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">functions</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">relations</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">language</span>\n\n<span class=\"sd\">/-- The type of constants in a given language. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">L.functions</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">L_NT_func</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">L_NT_func</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">L_NT_func</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">L_NT_func</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">L_NT_func</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">L_NT_func</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">L_NT_rel</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">L_NT_rel</span> <span class=\"mi\">2</span>\n\n<span class=\"sd\">/-- The language of number theory -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">L_NT</span> <span class=\"o\">:</span> <span class=\"n\">language</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">L_NT_func</span><span class=\"o\">,</span> <span class=\"n\">L_NT_rel</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Def 1.3.1. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>           <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">cnst</span>          <span class=\"o\">:</span> <span class=\"n\">L.const</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">cnst</span> <span class=\"n\">L_NT_func.zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span> <span class=\"o\">:=</span> <span class=\"n\">func</span> <span class=\"n\">L_NT_func.succ</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"n\">L_NT_func.add</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"n\">L_NT_func.mul</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"n\">L_NT</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">func</span> <span class=\"n\">L_NT_func.exp</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"n\">L_NT</span> <span class=\"o\">:=</span> <span class=\"n\">var</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">language</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">first_order</span>\n</code></pre></div>",
        "id": 253894616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632000080
    },
    {
        "content": "<p>That looks nicer, thanks again</p>",
        "id": 253894727,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632000208
    },
    {
        "content": "<p>By the way, I would also remove the <code>cnst</code> constructor and make it a definition like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span>           <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">L.functions</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">term.cnst</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">language</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">L.const</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">L.term</span> <span class=\"o\">:=</span> <span class=\"n\">term.func</span> <span class=\"n\">c</span> <span class=\"bp\">!</span><span class=\"o\">[]</span>\n<span class=\"kn\">open</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 253894730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632000212
    },
    {
        "content": "<p>Otherwise, you will have <code>cnst '0'</code> and <code>func '0' ![]</code> and they are distinct</p>",
        "id": 253894744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632000236
    },
    {
        "content": "<p>What does <code>![]</code> mean here?</p>",
        "id": 253894811,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632000293
    },
    {
        "content": "<p>I'm using the notation from <code>data.matrix.notation</code> which makes it easy to write <code>fin n -&gt; A</code> functions as if they were arrays</p>",
        "id": 253894832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632000332
    },
    {
        "content": "<p>I'm using them in add, succ etc as well</p>",
        "id": 253894841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1632000351
    },
    {
        "content": "<p>Ok</p>",
        "id": 253894926,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1632000435
    }
]