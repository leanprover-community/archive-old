[
    {
        "content": "<p>Hi, I am reading <a href=\"https://leanprover.github.io/lean4/doc/monads/monads.lean.html#what-separates-monads-from-applicatives\">https://leanprover.github.io/lean4/doc/monads/monads.lean.html#what-separates-monads-from-applicatives</a> but I don't quite understand that paragraph. It says \"You cannot really determine the structure of \"future\" operations\" but we do. For example, a Maybe monad can only produce another Maybe monad in the future. Is that not right?</p>",
        "id": 300480031,
        "sender_full_name": "Nam",
        "timestamp": 1663990326
    },
    {
        "content": "<p>There seem to be some missing words in that sentence. It's talking about applicatives there</p>",
        "id": 300480218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663990583
    },
    {
        "content": "<p>A monad allows you to determine the structure of future computations based on the results of past computations</p>",
        "id": 300480240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663990630
    },
    {
        "content": "<p>In an applicative, you determine the structure in advance of getting any of the results</p>",
        "id": 300480251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663990654
    },
    {
        "content": "<p>Here by \"structure of computations\" we mean things like which functions get called</p>",
        "id": 300480351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663990737
    },
    {
        "content": "<p>Thank you. I think I've got it now. That sentence might have been a general statement, applicable to both Applicative and Monad.</p>",
        "id": 300484078,
        "sender_full_name": "Nam",
        "timestamp": 1663995035
    },
    {
        "content": "<p>the first sentence sets up the premise that context is what separates the two. the second sentence states that general observation. the third says that with applicative you can't get final value (i guess you can with monad, e.g. Nothing), but you can determine the call tree.</p>",
        "id": 300484190,
        "sender_full_name": "Nam",
        "timestamp": 1663995133
    },
    {
        "content": "<p>does that sound about right?</p>",
        "id": 300484323,
        "sender_full_name": "Nam",
        "timestamp": 1663995282
    },
    {
        "content": "<p>I'm not sure what you mean by \"you can't get the final value\"</p>",
        "id": 300484951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663995948
    },
    {
        "content": "<p>you can always get the value if you know what type it is; it's just that the monad / applicative operations don't give you a way to exit the monad generically</p>",
        "id": 300485087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663996032
    },
    {
        "content": "<p>most monads will have a <code>run</code> function which extracts the data from the monad. It's just that the type signature of this function varies a lot depending on the monad</p>",
        "id": 300485144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663996090
    },
    {
        "content": "<p>by \"final value\" i mean the same as \"final function result\" in that paragraph</p>",
        "id": 300485177,
        "sender_full_name": "Nam",
        "timestamp": 1663996145
    },
    {
        "content": "<p>\"\"\"With applicatives, you can't get the final function result without evaluating everything,\"\"\"</p>",
        "id": 300485199,
        "sender_full_name": "Nam",
        "timestamp": 1663996183
    },
    {
        "content": "<p>Stated that way, it's true for monads too</p>",
        "id": 300487218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663998239
    },
    {
        "content": "<p>or functions in general</p>",
        "id": 300487264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663998246
    },
    {
        "content": "<p>you don't get the result until everything is evaluated</p>",
        "id": 300487275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663998257
    },
    {
        "content": "<p>damn. then i don't know what that paragraph means.</p>",
        "id": 300549870,
        "sender_full_name": "Nam",
        "timestamp": 1664032208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span> I think that paragraph is getting at the fact that applicatives have more restrictive control flow than monads. Roughly speaking, with applicatives you can figure out what the control flow is going to be even without evaluating anything, but with monads the control flow can depend on the specific values involved. (<span class=\"user-mention\" data-user-id=\"434989\">@Chris Lovett</span> The sentence in the monad docs might be clearer as \"With applicatives, you can determine the structure of how the operation will take place even before you evaluate everything.\")</p>",
        "id": 300555779,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664035421
    },
    {
        "content": "<p>ah, yes, thank you Kyle. that's roughly what i understand too.</p>",
        "id": 300565098,
        "sender_full_name": "Nam",
        "timestamp": 1664040773
    },
    {
        "content": "<p>I've another question. the <code>bind</code> operation is defined as <code>bind : {α β : Type u} → f α → (α → f β) → f β</code>. it uses the same type constructor <code>f</code>, which is the monad itself. that means the chain of operations must return the same type of monad. why can't it return a different type of monad?</p>",
        "id": 300566930,
        "sender_full_name": "Nam",
        "timestamp": 1664041945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284601\">@Nam</span> Because then it wouldn't be a monad <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> That's just the definition.</p>",
        "id": 300567412,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664042288
    },
    {
        "content": "<p>lol fair enough</p>",
        "id": 300567503,
        "sender_full_name": "Nam",
        "timestamp": 1664042367
    },
    {
        "content": "<p>One example of something that's monad-like but not a monad is indexed monads. One version I've seen has a bind operation of type <code>bind : {α β : Type u} → f i j α → (α → f j k β) → f i k β</code> where for each <code>i</code> you have that <code>f i i</code> is a monad.</p>",
        "id": 300567919,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664042585
    }
]