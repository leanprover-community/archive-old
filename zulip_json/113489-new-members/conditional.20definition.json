[
    {
        "content": "<p>I would like to define something by cases. How do I do this and how do I resolve it when proving things about it?<br>\nIn the following example I am trying to define a distance function on a disjoint union of three intervals. MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">my_metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">my_dist</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">my_dist_nonneg</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">my_dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">counterexample_carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>   <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span><span class=\"bp\">=</span><span class=\"mi\">3</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">counterexample</span> <span class=\"o\">:</span> <span class=\"n\">my_metric_space</span> <span class=\"n\">counterexample_carrier</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">my_dist</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,</span>  <span class=\"k\">if</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"n\">y.2</span> <span class=\"k\">then</span> <span class=\"bp\">|</span><span class=\"n\">x.1</span><span class=\"bp\">-</span><span class=\"n\">y.1</span><span class=\"bp\">|</span> <span class=\"k\">else</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.1</span><span class=\"o\">),</span>\n    <span class=\"n\">my_dist_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 295252957,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661440713
    },
    {
        "content": "<p>You can use <code>split_ifs</code> to case on an <code>if then else</code>. Else I'm not sure what you're asking about because this looks good!</p>",
        "id": 295254525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661441210
    },
    {
        "content": "<p>Just note that <code>if p then ... else ...</code> requires <code>p</code> to be decidable. So here you will need to provide <code>decidable_eq {i : ℕ | i=1 ∨ i=2 ∨ i=3 }</code> (you can cheat and use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.dec_eq\">docs#classical.dec_eq</a>)... or just use <code>fin 3</code> instead.</p>",
        "id": 295254781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661441281
    },
    {
        "content": "<p>Thanks! <code>split_ifs</code> was what I was searching (and I was not sure that my <code>if then else</code>-syntax is correct.</p>",
        "id": 295257026,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661442012
    },
    {
        "content": "<p>You will also find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/if_pos\">docs#if_pos</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/if_neg\">docs#if_neg</a> useful.</p>",
        "id": 295257156,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661442060
    },
    {
        "content": "<p>I have created this example as above and would like to now prove things about it. How do I reference it correctly. (The follownig is referencing it incorrectly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">my_metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">my_dist</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">my_dist_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">my_dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">counterexample_carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>   <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"c1\">-- {i : ℕ | i=0 ∨ i=1 ∨ i=2 }</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">counterexample</span> <span class=\"o\">:</span> <span class=\"n\">my_metric_space</span> <span class=\"n\">counterexample_carrier</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">my_dist</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,</span>  <span class=\"k\">if</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"n\">y.2</span> <span class=\"k\">then</span> <span class=\"bp\">|</span><span class=\"n\">x.1</span><span class=\"bp\">-</span><span class=\"n\">y.1</span><span class=\"bp\">|</span> <span class=\"k\">else</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.1</span><span class=\"o\">),</span>\n    <span class=\"n\">my_dist_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n       <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">property</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">my_metric_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>  <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">,</span> <span class=\"n\">my_metric_space.my_dist</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"n\">counterexample</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 295305634,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661459351
    },
    {
        "content": "<p>the theorem looks false: <code>(1, 0)</code> and <code>(1, 1)</code> are distance -1 apart</p>",
        "id": 295306395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661459631
    },
    {
        "content": "<p>(also your comment is incorrect - <code>fin 3</code> is <code>{0, 1, 2}</code> not <code>{1, 2, 3}</code>)</p>",
        "id": 295306504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661459662
    },
    {
        "content": "<p>Yes, thank you. i think the MWE is now actually correct and you can play around with it if you want. <br>\nI mainly wonder how I use <code>counterexample</code> in a lemma.</p>",
        "id": 295307165,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661459963
    },
    {
        "content": "<p>you normally shouldn't reference instances directly by name</p>",
        "id": 295307276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661460014
    },
    {
        "content": "<p>so the theorem should be <code>property counterexample_carrier</code></p>",
        "id": 295307320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661460051
    },
    {
        "content": "<p>Unfortunately this does not work either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"n\">property</span> <span class=\"n\">counterexample_carrier</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I get the error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">property</span> <span class=\"n\">counterexample_carrier</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">counterexample_carrier</span><span class=\"o\">),</span> <span class=\"n\">my_metric_space.my_dist</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 295307619,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661460184
    },
    {
        "content": "<p>That's because you have a syntax error at <code>def property</code>, you probably want <code>:=</code> not <code>:</code></p>",
        "id": 295307795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661460261
    },
    {
        "content": "<p>Omg, yes that solved it. Thanks for your help!</p>",
        "id": 295308664,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661460655
    },
    {
        "content": "<p>I have anothe question about the <code>if then else</code> or <code>ite</code>-construction. Is there a way to explicitly reference the hypothesis inside the <code>then</code> or <code>else</code> branch? For example I can do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"n\">y.2</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">statement</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">statement</span> <span class=\"n\">using</span> <span class=\"n\">a</span> <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">not</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But how do I get a proof for <code>\\not x.2 = y.2</code> in the <code>else</code>-branch? I cannot do <code>\\not h</code>.</p>",
        "id": 295319514,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661466011
    },
    {
        "content": "<p>In both branches the hypothesis will be called <code>h</code>, it will just have a different type in the else branch</p>",
        "id": 295319861,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1661466221
    },
    {
        "content": "<p>Hmm, yes. In the proof it will get a default name which is <code>h</code> (or <code>h_1</code> if <code>h</code> is already taken), but is there a way to already access this hypothesis already in the <code>ite</code>-statement?</p>",
        "id": 295320418,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661466528
    },
    {
        "content": "<p>As an example, I might want to use the above counterexample to define a map as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">map</span>  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">counterexample_carrier</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>  <span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But the problem is that Lean wants to be sure that <code>t+1</code> (or <code>(t:\\R)+1</code>) is inside the interval <code>[0,2]</code>. To give it that information my idea would be to do the following:</p>",
        "id": 295321053,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661466891
    },
    {
        "content": "<p>I guess you want <code>if t &lt;= 1</code></p>",
        "id": 295321450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661467116
    },
    {
        "content": "<p>I would use a helper lemma <code>helper</code> to give this info to Lean. But for the proof of the Lemma I need to kknow the conditions of the <code>if</code>. I don't know how to access that. (or whether it is even possible)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">my_metric_space</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">my_dist</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">my_dist_nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">my_dist</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">counterexample_carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>   <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span> <span class=\"c1\">-- {i : ℕ | i=0 ∨ i=1 ∨ i=2 }</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">counterexample</span>  <span class=\"o\">:</span> <span class=\"n\">my_metric_space</span> <span class=\"o\">(</span><span class=\"n\">counterexample_carrier</span> <span class=\"o\">):=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">my_dist</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">,</span>  <span class=\"k\">if</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"n\">y.2</span> <span class=\"k\">then</span> <span class=\"bp\">|</span><span class=\"n\">x.1</span><span class=\"bp\">-</span><span class=\"n\">y.1</span><span class=\"bp\">|</span> <span class=\"k\">else</span> <span class=\"mi\">2</span>  <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.1</span><span class=\"o\">),</span>\n    <span class=\"n\">my_dist_nonneg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map</span>  <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">counterexample_carrier</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"k\">then</span> <span class=\"o\">(⟨</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>  <span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span> <span class=\"o\">⟨</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">⟩</span>   <span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 295321541,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661467192
    },
    {
        "content": "<p>You need to write <code>if h : (t:ℝ) ≤ 1</code></p>",
        "id": 295321709,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661467288
    },
    {
        "content": "<p>If you write <code>h :</code> Lean will use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dite\">docs#dite</a> where you have access to <code>h</code>, otherwise it uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ite\">docs#ite</a> which has no dependency on <code>h</code>.</p>",
        "id": 295321815,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661467331
    },
    {
        "content": "<p>Ok, this way I might get <code>h</code> in the <code>then</code>-part. But I would be able to use <code>h</code> in the <code>else</code>-part, right?</p>",
        "id": 295321833,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661467343
    },
    {
        "content": "<p>You wrote it already:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x.2</span> <span class=\"bp\">=</span> <span class=\"n\">y.2</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">statement</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">statement</span> <span class=\"n\">using</span> <span class=\"n\">a</span> <span class=\"n\">proof</span> <span class=\"n\">for</span> <span class=\"n\">not</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n</blockquote>",
        "id": 295321843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661467350
    },
    {
        "content": "<p>in the else branch you have access to <code>h : x.2 ≠ y.2</code></p>",
        "id": 295322037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661467465
    },
    {
        "content": "<p>Oh, ok. Yes this works. Thanks! Here is how it looks now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">helper2</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span><span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span>  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">counterexample_carrier</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">(⟨</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"n\">helper</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>  <span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span> <span class=\"o\">⟨</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"o\">,</span> <span class=\"n\">helper2</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span>   <span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 295322397,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661467693
    },
    {
        "content": "<p>you should try to state lemmas that are provable though</p>",
        "id": 295322774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661467937
    },
    {
        "content": "<p>Neither inequality of <code>0 &lt;= t+1 &lt;= 1</code> follows from <code>t &lt;= 2</code></p>",
        "id": 295322840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1661468003
    }
]