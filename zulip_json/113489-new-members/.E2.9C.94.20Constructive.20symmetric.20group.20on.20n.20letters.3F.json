[
    {
        "content": "<p>Can I get access to a construction of <code>Sn</code> that lives in <code>Type</code>, not <code>Prop</code>? I have an implementation of <a href=\"https://github.com/opencompl/lean-gap/blob/master/GAP/Group.lean#L313\">schrier sims</a> which I'm trying to redo within <code>mathlib</code>. </p>\n<p>My first attempt to define <code>Sn</code> , and a subset of <code>Sn</code> as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.sylow</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">list</span>  <span class=\"n\">fin</span> <span class=\"n\">function</span> <span class=\"n\">subgroup</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"c1\">-- symmetric group on n letters</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">perm</span> <span class=\"o\">(</span><span class=\"n\">list.range</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"c1\">-- subset of Sn</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">set</span> <span class=\"n\">S</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">S</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Do I need to define this differently? As far as I can tell, the problem is that <code>perm</code> witnesses a relation between two lists, so <code>perm (range n)</code> has type <code>list ℕ → Prop</code>, while <code>set</code> expects a <code>Type</code>. So what I really want is a \"type of bijections on <code>[1..n]</code>\".</p>",
        "id": 270749169,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1643997119
    },
    {
        "content": "<p>You want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm\">docs#equiv.perm</a> applied to a type rather than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.perm\">docs#list.perm</a> applied to some list. Any finite type should do, but you could use <code>equiv.perm (fin n)</code> if you want roughly those elements</p>",
        "id": 270749967,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643997540
    },
    {
        "content": "<p>Thanks! That lets me make progress. I now have a puzzling error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"c1\">-- symmetric group on n letters</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"c1\">-- subset of Sn</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>I am unsure what <code>ℕ</code> it is looking for.</p>",
        "id": 270750543,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1643997815
    },
    {
        "content": "<p>It wants to know which symmetric group <code>H</code> is a subset of, so you probably want to have <code>variables (n: nat)</code> and explicitly say <code>{H : set (S n)}</code></p>",
        "id": 270750827,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1643997931
    },
    {
        "content": "<p>To confirm, is this what you meant?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n<span class=\"c1\">-- symmetric group on n letters</span>\n<span class=\"kd\">def</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n<span class=\"c1\">-- subset of Sn</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">n</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 270751099,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1643998060
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 270751335,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1643998157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> has marked this topic as resolved.</p>",
        "id": 270751341,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643998160
    }
]