[
    {
        "content": "<p>hi,<br>\ni have been working on some basics of first order logic.<br>\ni would like to define a clause as a multiset of literals but encountered a problem since the type class instances of multisets are not inherited by the new type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span>\n<span class=\"kd\">constant</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">σ.literal</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">signature.clause</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">signature</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">multiset</span> <span class=\"n\">σ.literal</span>\n\n<span class=\"c1\">--failed to synthesize type class instance for...</span>\n<span class=\"c1\">--noncomputable def c₁ : σ.clause := {l₁}</span>\n\n<span class=\"c1\">--i could make this work by explicitly specifying the type however this is very tedious</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">σ.clause</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"n\">l₁</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">σ.literal</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is there some way to inherit the type class instances of a type?</p>",
        "id": 319454372,
        "sender_full_name": "Thomas Kantholz",
        "timestamp": 1672859296
    },
    {
        "content": "<p>Putting <code>@[reducible]</code> before the first <code>def</code> would do the job</p>",
        "id": 319458822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672860851
    },
    {
        "content": "<p>An alternative is to use the <code>derive</code> annotation, for example <code>@[derive has_singleton]</code> should fix that specific issue.</p>",
        "id": 319552564,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1672914087
    },
    {
        "content": "<p>thanks!</p>",
        "id": 319600649,
        "sender_full_name": "Thomas Kantholz",
        "timestamp": 1672929950
    }
]