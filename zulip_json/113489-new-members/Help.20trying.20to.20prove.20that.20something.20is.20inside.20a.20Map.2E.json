[
    {
        "content": "<p>I'm trying to prove that some thing is inside a map. But I'm having problems with  the pattern matching of Prop...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MapImpl</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">MapImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n    <span class=\"bp\">|</span> <span class=\"n\">node</span>  <span class=\"o\">:</span> <span class=\"n\">MapImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">MapImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">MapImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n <span class=\"kd\">inductive</span> <span class=\"n\">MapImpl.Member</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">MapImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"n\">here</span>    <span class=\"o\">:</span> <span class=\"n\">Member</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">MapImpl.node</span> <span class=\"n\">l</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inLeft</span>  <span class=\"o\">:</span> <span class=\"n\">Member</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Member</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">MapImpl.node</span> <span class=\"n\">l</span> <span class=\"n\">c</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">inRight</span> <span class=\"o\">:</span> <span class=\"n\">Member</span> <span class=\"n\">k</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Member</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">MapImpl.node</span> <span class=\"n\">l</span> <span class=\"n\">c</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MapImpl.find</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">LT.lt</span> <span class=\"n\">α</span> <span class=\"n\">_</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">MapImpl</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MapImpl.Member</span> <span class=\"n\">k</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n    <span class=\"bp\">|</span> <span class=\"n\">MapImpl.empty</span><span class=\"o\">,</span>        <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">proof</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">proof</span>\n    <span class=\"bp\">|</span> <span class=\"n\">MapImpl.node</span> <span class=\"n\">l</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">proof</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">decEq</span> <span class=\"n\">k</span> <span class=\"n\">key</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Decidable.isTrue</span>  <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Decidable.isFalse</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">LT.lt</span> <span class=\"n\">key</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"gr\">sorry</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 285863532,
        "sender_full_name": "Felipe GS",
        "timestamp": 1655070399
    }
]