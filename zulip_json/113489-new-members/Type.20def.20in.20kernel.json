[
    {
        "content": "<p>How does Lean translate type definitions to the logic kernel? According to the Reference Manual, the kernel is very minimal and recognizes only <code>Π</code>, <code>λ</code>, <code>Sort u</code> and <code>let in</code>. It also says (in section 4.4, page 26, last paragraph): <em>\"The type former, constructors, and eliminator are all part of Lean's axiomatic foundation, which is to say, they are part of the trusted kernel.\"</em> How exactly is that achieved?</p>\n<p>I see two possible explanations. The first one is that kernel defines new axioms for each type (axioms regarding <code>no_confusion</code> and <code>rec</code>) and then Lean defines the rest of the type lemmas in terms of those two. The second explanation is that the kernel is aware of some primordial types (such as <code>ℕ</code> and <code>subtype</code>) and defines any other type in terms of those two (uses <code>Π</code> to increase the cardinality by incrementally constructing powersets, and then uses <code>subtype</code> to fine-tune the cardinality to match the actual type).</p>\n<p>Which of those two is closer to the actual implementation?</p>",
        "id": 262149862,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1637367924
    },
    {
        "content": "<p>Lean defines new axioms for each type -- but not <code>no_confusion</code>! This is proved using <code>rec</code> -- try e.g. <code>#print nat.no_confusion</code> to see a sample proof. However <code>#print nat.rec</code> shows that there is no proof -- it's just marked as <code>eliminator</code>.</p>",
        "id": 262150064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637368042
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo.rec</span> <span class=\"c1\">-- new constant in the theory, no definition</span>\n</code></pre></div>",
        "id": 262150151,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637368090
    },
    {
        "content": "<p>I think that the complete list of constants added in the above example is <code>foo</code>, <code>foo.bar</code> and <code>foo.rec</code>. However <code>#print prefix foo</code> shows all the other things which magically appear, and you can check to see that all the other things have definitions by <code>#print</code>ing them separately.</p>",
        "id": 262150196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637368140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20def.20in.20kernel/near/262149862\">said</a>:</p>\n<blockquote>\n<p>How does Lean translate type definitions to the logic kernel? According to the Reference Manual, the kernel is very minimal and recognizes only <code>Π</code>, <code>λ</code>, <code>Sort u</code> and <code>let in</code>.</p>\n</blockquote>\n<p>An important (class of) things missing from your list are axiomatic constants. These are denoted by names like <code>nat</code> and each one is declared with a particular type and \"nothing more\", that is, <code>nat : Type</code> is true, <code>nat : Type 1</code> is false, and reducing <code>nat</code> yields <code>nat</code> again. Inductive types, quotient types, and definitions are also known to the kernel, and add some reduction rules in addition to adding constants with known types.</p>",
        "id": 262165252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637387491
    }
]