[
    {
        "content": "<p>As I understand it, <code>introv</code> is supposed to automatically introduce variables in a theorem. Looking over examples, it seems it should be able to simplify the forall in my hypothesis in the following example, but it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.basic</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">id_unique</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">exists_unique.intro</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n<span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">one_mul</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">mul_one</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">introv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>any ideas as to what's going on here? I thought applying <code>introv</code> where I did would produce 3 hypotheses, <code>y : G</code>, <code>x : G</code> and <code>h : y * x = x ∧ x * y = x</code>. But that's not quite what happens.</p>",
        "id": 213848264,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1603142656
    },
    {
        "content": "<p>Can you include all the imports and defs in your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> so we can try it out and see what the goal state is?</p>",
        "id": 213848518,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603142798
    },
    {
        "content": "<p>only import is <code>algebra.group.basic</code></p>",
        "id": 213848552,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1603142817
    },
    {
        "content": "<p>and <code>variables {G : Type} [ group G]</code> i'm guessing?</p>",
        "id": 213848580,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603142835
    },
    {
        "content": "<p>naturally</p>",
        "id": 213848587,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1603142840
    },
    {
        "content": "<p>well, <code>{G : Type*}</code></p>",
        "id": 213848611,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1603142855
    },
    {
        "content": "<p>Right but it helps people reading your question if you include those lines so we don't have to guess and type them out to see it in vscode!</p>",
        "id": 213848715,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603142896
    },
    {
        "content": "<p>Including all the imports, variable declarations, etc. also makes it so that your snippet will immediately work in the Lean playground (hover over the snippet and click one of the buttons that appears in the top right).</p>",
        "id": 213848990,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603143044
    },
    {
        "content": "<p>I'm well aware, thank you, just forgot to include them when pasting in. I've edited the mwe</p>",
        "id": 213849068,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1603143104
    },
    {
        "content": "<p>To answer your question anyway, <code>introv</code> is doing what it should, its introducing the hypothesis that <code>∀ (x : G), y * x = x ∧ x * y = x</code>, there is an important difference between</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n<p>to proceed from where you are you can <code>specialize h 1</code> to \"evaluate the hypothesis\" at a useful point.</p>",
        "id": 213849206,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1603143184
    },
    {
        "content": "<p>I see. The examples baked into Lean were a bit misleading at first glance, because this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">introv</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁.trans</span> <span class=\"n\">h₂</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>initially seemed to be analogous to the context of the above lemma. Thanks for clarifying.</p>",
        "id": 213849556,
        "sender_full_name": "Charlie Conneen",
        "timestamp": 1603143394
    }
]