[
    {
        "content": "<p>Hey, given a quiver on <code>V</code> and a map <code>V -&gt; V'</code>, I'm trying to define the induced quiver on <code>V'</code> below.<br>\nIt works, except that one proof uses <code>finish</code> and I have no idea how to extract a meaningful proof out of this.<br>\nHow should I proceed? Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.quiver.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">u₂</span> <span class=\"n\">v₂</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">quiver</span>\n\n<span class=\"sd\">/-- The `quiver` instance obtained by pushing arrows of `V` along `σ` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">push</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">W</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">push</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">push_quiver</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">u₂</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">arrow</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">push_quiver</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">push_quiver</span> <span class=\"n\">σ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">prefunctor</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">push_quiver.arrow</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">postfix</span> <span class=\"bp\">`</span> <span class=\"bp\">*</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">of</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">of_obj</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">σ</span> <span class=\"bp\">*</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">=</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">W'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">quiver</span> <span class=\"n\">W'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">prefunctor</span> <span class=\"n\">V</span> <span class=\"n\">W'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">→</span> <span class=\"n\">W'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">φ.obj</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">τ</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">φ</span> <span class=\"n\">h</span>\n<span class=\"kd\">def</span> <span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"n\">prefunctor</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">W'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">τ</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">push_quiver.rec</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">W</span> <span class=\"n\">σ</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">τ</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">τ</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h</span> <span class=\"n\">X</span><span class=\"o\">,</span><span class=\"bp\">←</span><span class=\"n\">h</span> <span class=\"n\">Y</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">φ.map</span> <span class=\"n\">f</span><span class=\"o\">})</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_spec_obj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"n\">σ</span> <span class=\"n\">φ</span> <span class=\"n\">τ</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">=</span> <span class=\"n\">τ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_spec_comm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"n\">σ</span> <span class=\"n\">φ</span> <span class=\"n\">τ</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">of</span><span class=\"o\">,</span><span class=\"n\">lift</span><span class=\"o\">],</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">prefunctor.ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prefunctor.comp_obj</span><span class=\"o\">],</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prefunctor.comp_map</span><span class=\"o\">],</span>\n    <span class=\"n\">finish</span><span class=\"o\">,</span>\n     <span class=\"o\">},</span>\n  <span class=\"c1\">-- no idea how `finish` worked :(</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_unique</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span> <span class=\"o\">:</span> <span class=\"n\">prefunctor</span> <span class=\"o\">(</span><span class=\"n\">push</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"n\">W'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Φ₀</span> <span class=\"o\">:</span> <span class=\"bp\">Φ.</span><span class=\"n\">obj</span> <span class=\"bp\">=</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Φ</span><span class=\"n\">comm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">Φ</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Φ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"n\">σ</span> <span class=\"n\">φ</span> <span class=\"n\">τ</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">of</span><span class=\"o\">,</span><span class=\"n\">lift</span><span class=\"o\">],</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">prefunctor.ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span><span class=\"o\">,</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←Φ₀</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subst_vars</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prefunctor.comp_map</span><span class=\"o\">,</span> <span class=\"n\">cast_eq</span><span class=\"o\">],</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">push</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">quiver</span>\n</code></pre></div>",
        "id": 305638090,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1666516000
    },
    {
        "content": "<p>Here is a proof without <code>finish</code>, and it may be similar to what <code>finish</code> does, because from the (horrible, unreadably long) output of <code>show_term { finish }</code> I also see the use of <code>cast_heq</code> and <code>eq_rec_heq</code>. (by the way shouldn't the name be <code>lift_spec</code> rather than <code>lift_spec_comm</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lift_spec_comm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"n\">σ</span> <span class=\"n\">φ</span> <span class=\"n\">τ</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">of</span><span class=\"o\">,</span><span class=\"n\">lift</span><span class=\"o\">],</span>\n  <span class=\"n\">fapply</span> <span class=\"n\">prefunctor.ext</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prefunctor.comp_obj</span><span class=\"o\">],</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prefunctor.comp_map</span><span class=\"o\">,</span> <span class=\"n\">eq_mpr_eq_cast</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_of_heq</span><span class=\"o\">,</span>\n    <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">cast_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">},</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">eq_rec_heq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">},</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 305670740,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666535412
    },
    {
        "content": "<p>Great, thanks! </p>\n<p>Re naming: I'm not sure: there are two properties for the UMP, given by <code>lift_spec_comm</code> and <code>lift_spec_obj</code>, hence the longer name. I could add a <code>lift_spec</code> returning the conjunction of the two.</p>\n<p>Also, the <code>iterate 2 { apply (cast_heq _ _).trans },</code> is quite obscure to me: could you expand on its purpose and how you came up with it?</p>",
        "id": 305676553,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1666539104
    },
    {
        "content": "<p>The problem is that you want to simplify <code>cast _ something</code> to <code>something</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cast_heq\">docs#cast_heq</a>, but <code>cast_heq</code> is a heterogeneous equality (<code>==</code>) and <code>rw</code> doesn't work with it. So you need to manually apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/heq.trans\">docs#heq.trans</a>.</p>",
        "id": 305677108,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666539487
    },
    {
        "content": "<p>Ah, OK, I figured it was something along those lines, thanks! Is there a reason some kind of <code>hrw</code> doesn't exist?</p>",
        "id": 305677571,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1666539860
    },
    {
        "content": "<p>Great, I had two other similar <code>finish</code>s <a href=\"https://github.com/bottine/mathlib/blob/bottine/groupoid_dev/src/category_theory/groupoid/universal_groupoid.lean#190\">in the code for universal groupoids</a> which I could kill with your trick!</p>",
        "id": 305678224,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1666540292
    },
    {
        "content": "<blockquote>\n<p>Re naming: I'm not sure: there are two properties for the UMP, given by lift_spec_comm and lift_spec_obj, hence the longer name. I could add a lift_spec returning the conjunction of the two.</p>\n</blockquote>\n<p>OK I see, I think it's good to keep them separate, and I don't have a better name.</p>\n<blockquote>\n<p>Ah, OK, I figured it was something along those lines, thanks! Is there a reason some kind of hrw doesn't exist?</p>\n</blockquote>\n<p>I think <code>hrw</code> might be more challenging to write. If you compare the signatures of <code>eq.rec</code> (used by <code>rw</code>) and <code>heq.rec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">eq.rec</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_7</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_6</span><span class=\"o\">},</span> <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">ᾰ</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">ᾰ</span>\n<span class=\"n\">heq.rec</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_7</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_7</span><span class=\"o\">},</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_6</span><span class=\"o\">},</span>\n    <span class=\"n\">motive</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u_7</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">==</span> <span class=\"n\">ᾰ</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">ᾰ</span>\n</code></pre></div>\n<p>(outputs of <code>#check @eq.rec</code> and <code>#check @heq.rec</code>), you see the <code>motive</code> for <code>heq.rec</code> has one extra argument and is probably harder to fill in. If it can be automatically filled in, I think it may be able to solve some \"motive is not type correct\" issues that sometimes arises when using <code>rw</code> (though <code>simp_rw</code> already solves some cases).</p>",
        "id": 305680787,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666541798
    }
]