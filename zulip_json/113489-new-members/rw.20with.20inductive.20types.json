[
    {
        "content": "<p>I'm trying to prove some identities using Lucas and Fibonacci numbers on natural numbers and integers. I have defined both inductively, but am finding that rewrites that work on the <code>nat</code> case fail for <code>int</code>s. The error message I get is pretty minimal and unhelpful. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">fib_Z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"err\">%</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"k\">else</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">luc_N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">luc_N</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">luc_N</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">luc_Z</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">luc_N</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"err\">%</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">luc_N</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"k\">else</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">luc_N</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--Minimal working examples</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">luc_Z</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">luc_Z</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">luc_N</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fib</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">luc_N</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">--a little more context</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">l0</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">luc_Z</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">fib_Z</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib_Z</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">fib_Z</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">luc_Z</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195614533,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588102409
    },
    {
        "content": "<p>The <code>rw</code> tactic takes a hypothesis <code>h</code> of the form <code>X = Y</code> and replaces all <code>X</code>'s by <code>Y</code>'s in the goal. The error <code>failed</code> means \"I have no idea what you're talking about\".</p>",
        "id": 195629590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588109323
    },
    {
        "content": "<p>For your first two proofs <code>simp, refl</code> works for me. Your second has a subgoal <code>luc_Z 0 = fib_Z (-1) + fib_Z 1</code> which isn't true, the LHS is 2 and the RHS is 0, its true with nat subtraction <code>0-1=0</code> but not for ints.</p>",
        "id": 195633747,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588111502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195629590\" title=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195629590\">said</a>:</p>\n<blockquote>\n<p>The <code>rw</code> tactic takes a hypothesis <code>h</code> of the form <code>X = Y</code> and replaces all <code>X</code>'s by <code>Y</code>'s in the goal. The error <code>failed</code> means \"I have no idea what you're talking about\".</p>\n</blockquote>\n<p>I see. There were other times where I could get away with things like <code>rw nat.fib</code> but I guess I shouldn't count on <code>rw</code> know that when I give it <code>luc_Z</code> I actually mean \"see that the argument I gave this thing is one of its constructors and give me that value\"?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195633747\" title=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195633747\">said</a>:</p>\n<blockquote>\n<p>For your first two proofs <code>simp, refl</code> works for me. Your second has a subgoal <code>luc_Z 0 = fib_Z (-1) + fib_Z 1</code> which isn't true, the LHS is 2 and the RHS is 0, its true with nat subtraction <code>0-1=0</code> but not for ints.</p>\n</blockquote>\n<p>Right, I keep forgetting about nat subtraction. Would the solution be to re-index  so that when I do cases on my <code>int</code> I don't end up with a negative nat?</p>",
        "id": 195924620,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588298566
    },
    {
        "content": "<p><strong>Alex J. Best</strong> Here's an example where just doing <code>simp, refl</code> doesn't work.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">fZn1</span> <span class=\"o\">:</span> <span class=\"n\">fib_Z</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I think I might be misunderstanding the way <code>int</code>s work in lean; when I do <code>#reduce fib_Z (-1)</code> I get <code>-[1+ 0]</code> instead of just <code>-1</code>.  Would this be affecting my pattern matching?</p>",
        "id": 195925617,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588299768
    },
    {
        "content": "<p><code>int</code> has two constructors, <code>int.of_nat</code> and <code>int.neg_succ_of_nat</code>, representing the functions <code>n : nat =&gt; n</code> and <code>n : nat =&gt; -n-1</code> respectively (in order to keep the ranges disjoint)</p>",
        "id": 195926195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588300372
    },
    {
        "content": "<p>the latter function is pretty printed as <code>-[1+ n]</code> but keep in mind that all of those are not separate bits of syntax; <code>-[1+</code> is one token</p>",
        "id": 195926223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588300433
    },
    {
        "content": "<p>You probably shouldn't be pattern matching on <code>int</code> though, this is a kind of implementation detail</p>",
        "id": 195926310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588300504
    },
    {
        "content": "<p>Oh I see, you wrote <code>- int.of_nat (n+1)</code> as your pattern, which would almost never work in other cases but happens to work here because that is defeq to <code>-[1+n]</code></p>",
        "id": 195926387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588300584
    },
    {
        "content": "<p>however, it will affect the statements of the equations, so you will have an equation saying <code>fib_Z (- int.of_nat (n+1)) = ...</code> and not <code>fib_Z -[1+ n] = ...</code>, which causes a problem when you use induction since it will use <code>-[1+ n]</code> to write the second case</p>",
        "id": 195926421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588300669
    },
    {
        "content": "<p>Your first example can be solved by <code>rfl</code>, and the second would be solved by rfl except that it is false:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">luc_Z</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">fib_Z</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib_Z</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>",
        "id": 195926568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588300917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195926310\" title=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195926310\">said</a>:</p>\n<blockquote>\n<p>You probably shouldn't be pattern matching on <code>int</code> though, this is a kind of implementation detail</p>\n</blockquote>\n<p>Should I do it using <code>if ... then ... else ... </code>statements then to define <code>fib_Z</code>? </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195926387\" title=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195926387\">said</a>:</p>\n<blockquote>\n<p>Oh I see, you wrote <code>- int.of_nat (n+1)</code> as your pattern, which would almost never work in other cases but happens to work here because that is defeq to <code>-[1+n]</code></p>\n</blockquote>\n<p>I'm not too committed to this implementation so I could change my references to these definitions. I'm not fully understanding why this would behave differently though if it's defeq?</p>",
        "id": 195926869,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588301309
    },
    {
        "content": "<p>it affects <code>rw</code>, which does pattern matching only up to syntactic equality</p>",
        "id": 195926893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588301360
    },
    {
        "content": "<p>It doesn't fix the issue with rewriting <code>fib_Z 0</code> because this is not written using the constructor either. Luckily you can usually <code>rfl</code> the zero case of the theorem</p>",
        "id": 195926946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588301439
    },
    {
        "content": "<p>For this particular case, defining it using pattern matching on <code>int</code> is not unreasonable, since you are defining the int version of a nat definition. You could do it without if or case splits using <code>(-1)^int.to_nat (-n) * fib (int.nat_abs n)</code> or thereabouts.</p>",
        "id": 195927205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588301766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195926893\" title=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195926893\">said</a>:</p>\n<blockquote>\n<p>it affects <code>rw</code>, which does pattern matching only up to syntactic equality</p>\n</blockquote>\n<p>Oh I see. That makes sense. My intuition for how smart this tactics are is still forming.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195926568\" title=\"#narrow/stream/113489-new-members/topic/rw.20with.20inductive.20types/near/195926568\">said</a>:</p>\n<blockquote>\n<p>Your first example can be solved by <code>rfl</code>, and the second would be solved by rfl except that it is false:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">to_bool</span> <span class=\"o\">(</span><span class=\"n\">luc_Z</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">fib_Z</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib_Z</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- ff</span>\n</code></pre></div>\n\n\n</blockquote>\n<p><del>Wouldn't this reduce to <code>2 = 1 + 1</code>? </del> OH! I SEE! When I defined <code>fib_N</code> I should have done my parity check <code>n%2</code> on <code>n+1</code> instead of n. That's why <code>fib_Z (-1)</code> was returning <code>-1</code> instead of <code>1</code>.</p>",
        "id": 195927208,
        "sender_full_name": "ROCKY KAMEN-RUBIO",
        "timestamp": 1588301779
    }
]