[
    {
        "content": "<p>I'm trying to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lim_mul</span> <span class=\"o\">{</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">seq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">seq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Is <code>filter.tendsto.comp</code> the easiest way to approach it? To me, informally,  this follows from <code>*</code> being continuous, but I don't know how to tell Lean that.</p>",
        "id": 202827740,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593800516
    },
    {
        "content": "<p>Oh, the definition of <code>continuous_at</code> is almost exactly what's left after applying <code>filter.tendsto.comp</code>...</p>",
        "id": 202829017,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593801872
    },
    {
        "content": "<p>this proof ends up being absurdly nice</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lim_mul</span> <span class=\"o\">{</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">seq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">seq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n<span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">seq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"n\">seq</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">continuous_at</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">uniform_continuous</span><span class=\"bp\">.</span><span class=\"n\">continuous</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">uniform_continuous_mul_const</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202829396,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593802340
    },
    {
        "content": "<p>Without context it's hard to help you. What do you want to use and what do you want to redo?</p>",
        "id": 202829725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593802764
    },
    {
        "content": "<p>Maybe the preliminary question is even: do you know that what you stated can be proved by </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">lim_mul</span> <span class=\"o\">{</span><span class=\"n\">seq</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">seq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">seq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_const_nhds</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n</code></pre></div>",
        "id": 202829794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593802811
    },
    {
        "content": "<p>If yes, then I return to the previous question: what do you want to assume in your proof?</p>",
        "id": 202829838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593802881
    },
    {
        "content": "<p>I didn't know that.</p>",
        "id": 202830605,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593803545
    },
    {
        "content": "<p>Filters are super powerful. Patrick just wrote your informal proof in one line</p>",
        "id": 202831491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593804572
    },
    {
        "content": "<p>No, his informal proof uses internal details of the special case he is working on.</p>",
        "id": 202831605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593804690
    },
    {
        "content": "<p>It's impressive. I forgot to look for a structure that has the exact property I want (continuity of <code>(*)</code>)</p>",
        "id": 202832275,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593805234
    },
    {
        "content": "<p>Jason, just to make sure you can follow the compressed notation: my proof combines <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/monoid.html#tendsto_mul\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/monoid.html#tendsto_mul</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/basic.html#tendsto_const_nhds\">https://leanprover-community.github.io/mathlib_docs/topology/basic.html#tendsto_const_nhds</a></p>",
        "id": 202832276,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593805236
    },
    {
        "content": "<p>Don't hesitate to ask if the syntax used for this combination or how elaboration takes place is mysterious</p>",
        "id": 202832315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593805273
    },
    {
        "content": "<p>thanks! i did figure that part out, I um ... it is actually the math that I don't know <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span>  but i see that <code>filter.tendsto.mul</code>is one of a big toolkit of lemmas for proving a function is continuous at a point; the structure of your proof can mimic the structure of the function</p>",
        "id": 202832752,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593805700
    },
    {
        "content": "<p>it's really impressive</p>",
        "id": 202832935,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593805885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/expressing.20limits.20and.20continuity/near/202831605\">said</a>:</p>\n<blockquote>\n<p>No, his informal proof uses internal details of the special case he is working on.</p>\n</blockquote>\n<p>I think Kevin meant \"To me, informally, this follows from <code>*</code> being continuous\" not my Lean proof</p>",
        "id": 202833029,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593805980
    },
    {
        "content": "<p>If your end goal is to prove continuity of some function then you probably don't need to drop down to the level of filters (unless you're defining the function \"from scratch\" perhaps).</p>",
        "id": 202833035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593805986
    },
    {
        "content": "<p>Right, it just so happened I had to plug it into something that wanted a <code>tendsto</code></p>",
        "id": 202833067,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593806022
    },
    {
        "content": "<p>I'm at the stage where Lean drives me around by asking for things, I really don't know enough of the library to design properly</p>",
        "id": 202833119,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593806057
    },
    {
        "content": "<p>About the compressed syntax, are you familiar with <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html\">https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html</a>, the paragraph starting with \"The dot notation is convenient\"</p>",
        "id": 202833241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593806206
    },
    {
        "content": "<p>Yes, I know about it</p>",
        "id": 202833369,
        "sender_full_name": "Jason Orendorff",
        "timestamp": 1593806371
    }
]