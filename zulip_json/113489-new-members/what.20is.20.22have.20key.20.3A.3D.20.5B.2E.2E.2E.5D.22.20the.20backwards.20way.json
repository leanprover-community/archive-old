[
    {
        "content": "<p>If I have (h : P -&gt; Q) and (g : Q -&gt; R) and (p : P) how do I make an r : R without using \"have q := h p\" \"have r := g q\"? I feel like it's apply but I always think I can do \"apply succ_ne_zero at H\"</p>",
        "id": 277968096,
        "sender_full_name": "Mason McBride",
        "timestamp": 1649211726
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n <span class=\"c1\">-- Try this: exact g (h p)</span>\n</code></pre></div>",
        "id": 277968487,
        "sender_full_name": "Julian Berman",
        "timestamp": 1649212245
    },
    {
        "content": "<p>I appreciate it. So what's the difference between exact and apply?</p>",
        "id": 277969099,
        "sender_full_name": "Mason McBride",
        "timestamp": 1649213042
    },
    {
        "content": "<p><code>exact</code> basically is you saying \"I want to solve the goal now, here's a term\"</p>",
        "id": 277970029,
        "sender_full_name": "Julian Berman",
        "timestamp": 1649214049
    },
    {
        "content": "<p><code>apply</code> is your arguing backwards, but you can't do it to a hypothesis, only to the goal</p>",
        "id": 277970054,
        "sender_full_name": "Julian Berman",
        "timestamp": 1649214070
    },
    {
        "content": "<p>You could instead do <code>have hr := g (h p)</code> which will give you a new hypothesis of type <code>R</code> -- but then once you have that hypothesis, now you do <code>exact hr</code> to close the goal.</p>",
        "id": 277970140,
        "sender_full_name": "Julian Berman",
        "timestamp": 1649214132
    },
    {
        "content": "<p>If your goal is <code>R</code>, then you could also do <code>refine g _</code> to end up with a goal of <code>Q</code>. <code>refine</code> is like <code>exact</code> except that you can give it holes (underscores), and any that it can't automatically fill it will create new goals for. So, for example, if your goal is <code>R</code> and <code>foo : P → Q → R</code>, then <code>refine foo _ _</code> would give you two goals, namely <code>P</code> and <code>Q</code>.</p>",
        "id": 277971222,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649215440
    }
]