[
    {
        "content": "<p>I'm attempting to write the <code>flip</code> function on the following inductive type:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span>     <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">symm</span>     <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M&#39;&#39;</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M&#39;&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">flip</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">M</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M&#39;&#39;</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">M&#39;&#39;</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">M&#39;</span> <span class=\"n\">M&#39;&#39;</span> <span class=\"n\">h&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">M</span> <span class=\"n\">M&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>However, I end up with <code>failed to prove recursive application is decreasing, well founded relation</code> in the <code>symm</code> and <code>trans</code> cases, requesting that I prove <code>M' &lt; M</code> and (even more problematically) <code>M &lt; M</code>.</p>\n<p>Does anyone have an idea as to how I could fix this? I tried <code>using_well_founded</code>, but I couldn't get it to work.</p>",
        "id": 209347200,
        "sender_full_name": "Harrison Grodin",
        "timestamp": 1599543042
    },
    {
        "content": "<p>By default equation compiler will try to prove your definition terminates by mapping the tuple of all arguments to a natural number using <code>has_sizeof</code>, and showing that number strictly decreases between recursive calls. Unfortunately, we can't assign a <code>has_sizeof</code> to <code>foo</code> by pattern-matching because again we cannot yet prove it will terminate.</p>\n<p>The solution is to use the recursion principle of <code>foo</code> directly, which is called <code>foo.rec_on</code>.</p>",
        "id": 209366894,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599559447
    },
    {
        "content": "<p>Isn't <code>flip</code> just <code>foo.symm</code>?</p>",
        "id": 209464357,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1599616189
    },
    {
        "content": "<p>It seems that the default well_founded tactic doesn't know how to deal with inductive props, since their <code>sizeof</code> is <code>0</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero_one</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">easy</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">foo.zero_one</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">foo.symm</span> <span class=\"o\">(</span><span class=\"n\">foo.symm</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">easy</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>gives the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span><span class=\"o\">,</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_well_founded.r</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_well_founded_of_has_sizeof</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">default_has_sizeof</span> <span class=\"o\">(</span><span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n<span class=\"n\">Possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">'</span><span class=\"n\">using_well_founded'</span> <span class=\"n\">keyword</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"kd\">end</span> <span class=\"n\">of</span> <span class=\"n\">your</span> <span class=\"kd\">definition</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">tactics</span> <span class=\"n\">for</span> <span class=\"n\">synthesizing</span> <span class=\"n\">well</span> <span class=\"n\">founded</span> <span class=\"n\">relations</span> <span class=\"n\">and</span> <span class=\"n\">decreasing</span> <span class=\"n\">proofs.</span>\n  <span class=\"bp\">-</span> <span class=\"n\">The</span> <span class=\"n\">default</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic</span> <span class=\"n\">uses</span> <span class=\"n\">the</span> <span class=\"bp\">'</span><span class=\"n\">assumption'</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">thus</span> <span class=\"n\">hints</span> <span class=\"o\">(</span><span class=\"n\">aka</span> <span class=\"kn\">local</span> <span class=\"n\">proofs</span><span class=\"o\">)</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">provided</span> <span class=\"n\">using</span> <span class=\"bp\">'</span><span class=\"k\">have</span><span class=\"bp\">'-</span><span class=\"n\">expressions.</span>\n<span class=\"n\">The</span> <span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">failure</span> <span class=\"n\">state</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">decreasing</span> <span class=\"n\">tactic.</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">default_dec_tac</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">easy</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_p</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">_p.fst</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"mi\">1</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Is this really nonterminating, suggesting that a prop can actually be constructed using an infinite sequence of constructors? Or is this just a flaw in the equation compiler?</p>",
        "id": 265830318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640194058
    },
    {
        "content": "<p>If I change <code>foo</code> to be a <code>Type</code>, then Lean is happy</p>",
        "id": 265831000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640194416
    },
    {
        "content": "<p>This is a flaw in the default well founded proof strategy. For inductive props that aren't simply recursive, I usually find it easier to use <code>induction</code> instead, which gives better control over what to do induction on</p>",
        "id": 265854129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640208001
    },
    {
        "content": "<p>It is possible to construct a well founded relation (not a sizeof function) which is useful for inductions over <code>foo x y</code>, but it is basically a more verbose and complicated version of just using the induction principle for <code>foo</code></p>",
        "id": 265854443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640208189
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">easy</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">IH.symm</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This proof is a bit different than the original, in that it does not depend on course of values recursion. You can write a course of values recursion lemma for this inductive but it's more work than just proving the theorem</p>",
        "id": 265855695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1640208853
    }
]