[
    {
        "content": "<p>For some reason, I'm having a hard time figuring out how to evaluate a constant polynomial. I can do it in some situations, e.g. the following works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kn\">eval</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>but the following does not</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kn\">eval</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eval_C</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Instead, Lean complains that it didn't find an instance of the pattern <code>eval ?m_3 (C ?m_4)</code>. Also, things like <code>change (2 : polynomial ℝ) with (C 2 : polynomial ℝ),</code> don't work and <code>hint</code> and <code>library_search</code> have no suggestions. Also,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"kn\">eval</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>doesn't work and, to my surprise, tells me that <code>code generation failed, VM does not have code for 'classical.choice'</code>. What is going on here? Does <code>(2 : polynomial ℝ)</code> not mean what I think it does?</p>",
        "id": 203621938,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594517367
    },
    {
        "content": "<p>Does <code>simp</code> work?</p>",
        "id": 203622464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594518318
    },
    {
        "content": "<p>There should be enough rules to prove <code>C 2 = 2</code></p>",
        "id": 203622479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594518347
    },
    {
        "content": "<p>no, <code>simp</code> doesn't work</p>",
        "id": 203622535,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594518426
    },
    {
        "content": "<p>For reference, <code>simp</code> also can't prove this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kn\">eval</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"kn\">eval</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 203622592,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594518491
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">C_bit0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bit0</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C_add</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">C_bit1</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">bit1</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">C_bit0</span><span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"kn\">eval</span> <span class=\"mi\">5</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"k\">show</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">eval_C</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 203622854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594518964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span>, feel like making a PR to add those two <code>simp</code> lemmas to <code>data.polynomial</code>? :-)</p>",
        "id": 203623073,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594519364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Okay, that works (after changing <code>semiring R</code> to <code>comm_semiring R</code>). Is this what's going on: <code>(2 : polynomial \\R)</code> is really something like <code>C 1 + C 1</code> which is not definitionally equal to <code>C (1 + 1)</code>?</p>",
        "id": 203623123,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594519459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Eval.20of.20constant.20polynomial/near/203623073\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span>, feel like making a PR to add those two <code>simp</code> lemmas to <code>data.polynomial</code>? :-)</p>\n</blockquote>\n<p>Sure, I can do that.</p>",
        "id": 203623133,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594519472
    },
    {
        "content": "<p>Huh, why did you need to change to <code>comm_semiring</code>? Surely those <code>bitX</code> lemmas are true generally.</p>",
        "id": 203623186,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594519563
    },
    {
        "content": "<p>I don't know, but when it was just what Mario wrote I got this error message:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"err\">⊢</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 203623207,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594519646
    },
    {
        "content": "<p>and the error appeared everywhere <code>C</code> was written</p>",
        "id": 203623208,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594519666
    },
    {
        "content": "<p>Maybe you have an old mathlib?</p>",
        "id": 203623270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594519765
    },
    {
        "content": "<p>I just tried running <code>leanproject up</code> and the error is still there when I use <code>semiring</code> instead of <code>comm_semiring</code></p>",
        "id": 203623325,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594519906
    },
    {
        "content": "<p>Oh wait, nevermind. It went away after I restarted VSCode</p>",
        "id": 203623384,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594520016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/113489-new-members/topic/Eval.20of.20constant.20polynomial/near/203623073\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"298851\">Patrick Lutz</span>, feel like making a PR to add those two <code>simp</code> lemmas to <code>data.polynomial</code>? :-)</p>\n</blockquote>\n<p>Should I ask for write access to mathlib to push to a branch and pull request from there or should I fork the mathlib repo?</p>",
        "id": 203624849,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594523249
    },
    {
        "content": "<p>I'll count that as asking for write access; I've sent you an invitation. (to your berkeley email)</p>",
        "id": 203626057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594525700
    },
    {
        "content": "<p>We should also have lemmas like <code>eval x (bit0 p) = bit0 (eval x p)</code>, and similarly for <code>bit1</code>, <code>0</code>, and <code>1</code>.</p>",
        "id": 203629517,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1594533071
    },
    {
        "content": "<p>These lemmas would <code>simp</code> the original goal.</p>",
        "id": 203629519,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1594533084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/113489-new-members/topic/Eval.20of.20constant.20polynomial/near/203629517\">said</a>:</p>\n<blockquote>\n<p>We should also have lemmas like <code>eval x (bit0 p) = bit0 (eval x p)</code>, and similarly for <code>bit1</code>, <code>0</code>, and <code>1</code>.</p>\n</blockquote>\n<p>I added the first two of those, but it looks like <code>eval_one</code> and <code>eval_zero</code> already exist.</p>",
        "id": 203634057,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594542555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I've now made the PR.</p>",
        "id": 203634058,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1594542577
    },
    {
        "content": "<p>You can add links from zulip just by writing: <a href=\"https://github.com/leanprover-community/mathlib/issues/3376\">#3376</a></p>",
        "id": 203634740,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594543967
    },
    {
        "content": "<p>I'll have a look!</p>",
        "id": 203634743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594543969
    },
    {
        "content": "<p>there are some strange rules about titles of PRs (because these become the commit message in our git history when we squash all the commits from the PR into a single commit)</p>",
        "id": 203634753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594544015
    },
    {
        "content": "<p>this one should probably be <code>feat(data/polynomial): simp lemmas for bit0 / bit1</code></p>",
        "id": 203634791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594544045
    },
    {
        "content": "<p>Other than that, looks great! For bigger PRs, it's good to add the label <code>request-review</code> once you've seen that the CI checks have succeeded, to get someone's attention. (They'll then mark it <code>changes-requested</code> after making comments, you'll change it back, etc. etc..)</p>",
        "id": 203634854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594544231
    },
    {
        "content": "<p>For this one, I think we're good to go!</p>",
        "id": 203634857,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594544238
    }
]