[
    {
        "content": "<p>I'm just learning how to use typeclasses in Lean, and the documentation seems sparse.  Specifically, how do I refer to elements from the typeclass definition when proving results about all types that are a member of a typeclass?</p>\n<p>As a simple example, suppose I have the default \"inhabited\" class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And suppose I want to define and prove the utterly trivial result that for any type that is a member of the \"inhabited\" class, the default element is equal to itself.  I have no idea what the syntax for this would be.  In an informal syntax (because if I knew how to express these concepts in Lean syntax, I wouldn't be asking this question), what I'm aiming for is expressing something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"n\">inhabited</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">t.default</span> <span class=\"bp\">=</span> <span class=\"n\">t.default</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>if that makes sense.  So what I need is to</p>\n<ul>\n<li>declare a lemma over an arbitrary type t so long as that type is a member of a given typeclass, and then</li>\n<li>access the values of type t that the typeclass definition tells us exist.</li>\n</ul>\n<p>Hope that makes sense, I'm finding this a challenging concept to explain.  Thank you very much for any advice.</p>",
        "id": 218841212,
        "sender_full_name": "Nicholas Dyson",
        "timestamp": 1607093238
    },
    {
        "content": "<p>You want <code>∀ (t : Type) [inhabited t], inhabited.default t = inhabited.default t</code></p>",
        "id": 218842045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607093578
    },
    {
        "content": "<p>except that won't work directly because of typeclass caching, so you have to insert a <code>by exactI</code> to make typeclass inference work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">t</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">inhabited.default</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">inhabited.default</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 218842262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607093671
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">inhabited'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited'</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inhabited'.default</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">inhabited'.default</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 218842638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607093837
    },
    {
        "content": "<p>I had to put <code>[]</code> in in order to make the alpha explicit in <code>default</code>; the alternative would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">inhabited'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inhabited'</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">inhabited'.default</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">inhabited'.default</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 218842806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607093897
    },
    {
        "content": "<p>Thank you this was very helpful.</p>",
        "id": 218858274,
        "sender_full_name": "Nicholas Dyson",
        "timestamp": 1607100302
    }
]