[
    {
        "content": "<p>Allegedly, antiquotes are supposed to work in meta-tactic blocks like <code>`[tac...]</code>; but I'm getting <code>invalid antiquotation, occurs outside of quoted expressions</code></p>",
        "id": 277663963,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649023900
    },
    {
        "content": "<p>Has this been changed since the tutorial was written?</p>",
        "id": 277663973,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649023913
    },
    {
        "content": "<p>That still works. You probably need to give us more code for us to diagnose.</p>",
        "id": 277664150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649024122
    },
    {
        "content": "<p>I'm doing something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.restricted_induction</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ax</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">revert</span> <span class=\"bp\">%%</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 277664303,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024314
    },
    {
        "content": "<p>where the idea is that I'm going to write down a bunch of different induction axioms of varying strength and use a specific one</p>",
        "id": 277664310,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024336
    },
    {
        "content": "<p>Isn't there anything below that line that could interfere?</p>",
        "id": 277664386,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649024476
    },
    {
        "content": "<p>and I'm not entirely sure I'm supposed to be using antiquotes in that situation in the first place lol</p>",
        "id": 277664394,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024497
    },
    {
        "content": "<p>I suspect adding <code>#exit</code> right after this line might solve your problem</p>",
        "id": 277664395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649024498
    },
    {
        "content": "<p>hmmm<br>\nokay, that does fix the problem, but then how do I use the tactic lol</p>",
        "id": 277664463,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024586
    },
    {
        "content": "<p>also I suspect it doesn't do what I need it to do anyway but to some extent that's a separate problem</p>",
        "id": 277664469,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024601
    },
    {
        "content": "<p>Fix whatever syntax error you introduced later <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 277664479,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649024615
    },
    {
        "content": "<p>... that's kind of annoying, tbh</p>",
        "id": 277664537,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024662
    },
    {
        "content": "<p>since that appears at the top of a namespace of half-finished theorems</p>",
        "id": 277664556,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024681
    },
    {
        "content": "<p>oh well</p>",
        "id": 277664557,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024682
    },
    {
        "content": "<p>anyway, I take that back, adding #exit  doesn't actually remove the error anyway</p>",
        "id": 277664592,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024742
    },
    {
        "content": "<p>I forgot to actually reintroduce the antiquote before checking last time &gt;.&gt;</p>",
        "id": 277664638,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024767
    },
    {
        "content": "<p>still complains about antiquotations when I do</p>",
        "id": 277664642,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024773
    },
    {
        "content": "<p>also the next line is <code>namespace</code> so I'd've been pretty surprised if that was the problem anyway</p>",
        "id": 277664678,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649024846
    },
    {
        "content": "<p>I think this doesn't work because <code>revert</code> expects a name not an expression.</p>",
        "id": 277665016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649025309
    },
    {
        "content": "<p>And <code>%%</code> is for expressions</p>",
        "id": 277665023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649025331
    },
    {
        "content": "<p>For example, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.restricted_induction</span> <span class=\"o\">(</span><span class=\"n\">ax</span><span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">):</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n   <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"bp\">%%</span><span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 277665190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649025600
    },
    {
        "content": "<p>(but it doesn't solve using <code>revert</code>)</p>",
        "id": 277665235,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649025616
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">section</span>\n<span class=\"n\">setup_tactic_parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">tactic.interactive</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">tactic.interactive.restricted_induction</span>\n  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ax</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">revert</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">ax</span><span class=\"o\">,</span> <span class=\"n\">split</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277665283,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649025687
    },
    {
        "content": "<p>Example usage:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">restricted_induction</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277665358,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649025747
    },
    {
        "content": "<p>hm. Okay, that's simpler than I had expected</p>",
        "id": 277665541,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649026009
    },
    {
        "content": "<p>In particular I was really scratching my head over how to make a <code>many ident</code> and it's a little embarrassing the answer was just \"make a list of it\" ^.^;</p>",
        "id": 277665555,
        "sender_full_name": "Robert Maxton",
        "timestamp": 1649026045
    },
    {
        "content": "<p><code>parse ident*</code> is definitionally equal to <code>list name</code></p>",
        "id": 277665825,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649026416
    }
]