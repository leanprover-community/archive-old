[
    {
        "content": "<p>Dear all,</p>\n<p>I am working on a large proof and have some problems with the <code>induction</code> tactic. <br>\nI perform <code>induction</code> on a list <code>xs</code> which gives me two cases.</p>\n<p>I am able to solve the first case (<code>list.nil</code>) if I use the notation <code>induction h : xs</code> because this introduces <code>h</code> which I can use for my proof. </p>\n<p>I am able to solve the second case (<code>list.cons</code>) if I use the notation <code>induction xs</code>. However, if I use the <code>induction h : xs</code> syntax, it introduces a term in my induction hypothesis which isn't provable. But when I use <code>induction xs</code>, I lack the <code>h</code> term in the first case which makes it insolveable. </p>\n<p>TL;DR Can I use a certain syntax so I have the behavior of <code>induction h : xs</code> in one case and the behavior of <code>induction xs</code> in the other case?</p>",
        "id": 323014139,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674479043
    },
    {
        "content": "<p>I'm not entirely sure in your specific case, it would help to write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. You might have success with the <code>induction'</code> tactic, which should be smart enough to keep your goal provable.</p>",
        "id": 323015024,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674479329
    },
    {
        "content": "<p><del>See <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#induction'\">tactic#induction'</a></del></p>",
        "id": 323015072,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674479343
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.induction'\">docs#tactic.interactive.induction'</a> (apparently it hasn't been added to the mathlib tactic overview)</p>",
        "id": 323015457,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674479452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20h.20.3A.20xs.20vs.20induction.20xs/near/323015024\">said</a>:</p>\n<blockquote>\n<p>I'm not entirely sure in your specific case, it would help to write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. You might have success with the <code>induction'</code> tactic, which should be smart enough to keep your goal provable.</p>\n</blockquote>\n<p><code>induction'</code> also doesn't work. Generating a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> will get quite extensive because a lot of functions are deeply nested resulting in a complex <code>ih</code>. Isn't there a way to rewrite the induction hypothesis? It seems pretty odd to me that merely introducing <code>h</code> will break one of the cases.</p>",
        "id": 323018619,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674480245
    },
    {
        "content": "<p>I think that what Anne is saying is that we don't really understand the problem, so it's difficult to help. If you have a working example you can post it. You can replace all proof by <code>sorry</code> to keep it small.</p>",
        "id": 323022350,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1674481320
    },
    {
        "content": "<p>But of course you cannot <code>sorry</code> definitions.</p>",
        "id": 323022454,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1674481344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  I have constructed a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that has the same problem :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">foo</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gen_list</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>  <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_foo_able</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">gen_list</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_able</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">is_foo_able</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">gen_list</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_foo_able</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">gen_list</span> <span class=\"n\">n</span><span class=\"o\">),</span>  <span class=\"c1\">-- This is the relevant line</span>\n  <span class=\"o\">{</span><span class=\"n\">finish</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">induction'</span> <span class=\"n\">hh2</span> <span class=\"o\">:</span>  <span class=\"n\">gen_list</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">finish</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- fails here</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I have <code>induction' hh2 :  gen_list n</code>, in the first case this introduces <code>hh2 : gen_list n = nil</code> which can then be used to create a contradiction. In the second case though you get <code>hh2: gen_list n = hd :: x</code> and <code>ih: ∀ (n : ℕ), is_foo_able._match_1 (foo n (gen_list n)) = tt → ∀ (val : ℕ), foo n (gen_list n) = some val → gen_list n = x → some val = some n</code>, notice the <code>gen_list n = x</code> term in <code>ih</code>, this is obviously false and makes the induction hypotheses completely useless. </p>\n<p>However, if I change <code>induction' hh2 :  gen_list n</code> to <code>induction'   gen_list n</code> then in the second case get <code>ih: ∀ (n : ℕ), is_foo_able._match_1 (foo n (gen_list n)) = tt → ∀ (val : ℕ), foo n (gen_list n) = some val → some val = some n</code> which can be used to proof the goal. However, in the first case we no longer have <code>hh2 : gen_list n = nil</code> so the contradiction can't be proven anymore. </p>\n<p>This means that with one notation I can prove one case, and with the other notation I can proof the other case. I can't proof both cases :(</p>",
        "id": 323103991,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674503120
    },
    {
        "content": "<p>Not sure but maybe you can try the <code>generalize h : gen_list n = l,</code> syntax in <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize\">tactic#generalize</a> first, then <code>induction l</code></p>",
        "id": 323130992,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674513262
    },
    {
        "content": "<p>Thanks for the MWE, I get the issue now! However, my conclusion is that this is just not a thing that is provable through induction: <code>gen_list n</code> is a specific list of length 3, so what happens if you apply the inductive hypothesis four times? How should we express the relation between the list <code>x</code> in the inductive hypothesis and <code>gen_list n</code>?</p>",
        "id": 323221521,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1674558424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20h.20.3A.20xs.20vs.20induction.20xs/near/323221521\">said</a>:</p>\n<blockquote>\n<p>Thanks for the MWE, I get the issue now! However, my conclusion is that this is just not a thing that is provable through induction: <code>gen_list n</code> is a specific list of length 3, so what happens if you apply the inductive hypothesis four times? How should we express the relation between the list <code>x</code> in the inductive hypothesis and <code>gen_list n</code>?</p>\n</blockquote>\n<p>The thing is, in my real world example (so not this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>) the list is of an arbitrary length and has this exact problem. it just seems impossible to solve both cases sadly :(</p>",
        "id": 323323427,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674584732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20h.20.3A.20xs.20vs.20induction.20xs/near/323130992\">said</a>:</p>\n<blockquote>\n<p>Not sure but maybe you can try the <code>generalize h : gen_list n = l,</code> syntax in <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#generalize\">tactic#generalize</a> first, then <code>induction l</code></p>\n</blockquote>\n<p>sadly results in the same problem..</p>",
        "id": 323323459,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674584745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  By the way any other way to proof this would be acceptable. I feel though like induction' would be the most natural way. In this case I could do a brute force proof but in the real problem the list is of arbitrary length.</p>",
        "id": 323329065,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674586315
    },
    {
        "content": "<p>The general strategy of such proofs is to generalize the statement of what you're trying to prove so that it holds for an arbitrary list (not just the particular <code>gen_list n</code>) and then perform induction. The way to perform this step really depends on your actual situation, so I cannot comment on it from your MWE. Maybe an idea is to first try to understand mathematically why what you're proving is true, before writing it in Lean.</p>\n<p>Your request to mix and match different induction principles from different induction invocations allows you to prove false things, so therefore it's not allowed.</p>",
        "id": 323346048,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674591690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20h.20.3A.20xs.20vs.20induction.20xs/near/323346048\">said</a>:</p>\n<blockquote>\n<p>The general strategy of such proofs is to generalize the statement of what you're trying to prove so that it holds for an arbitrary list (not just the particular <code>gen_list n</code>) and then perform induction. The way to perform this step really depends on your actual situation, so I cannot comment on it from your MWE. Maybe an idea is to first try to understand mathematically why what you're proving is true, before writing it in Lean.</p>\n<p>Your request to mix and match different induction principles from different induction invocations allows you to prove false things, so therefore it's not allowed.</p>\n</blockquote>\n<p>I still don't get this. What you are saying is if I use <code>induction'  xs</code> instead of <code>induction' h :  xs</code> it is no longer valid to assume that <code>gen_list n = nil</code> in case <code>nil</code>?   I have trouble understanding that part as it seems very counter intuitive</p>",
        "id": 323349470,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674592991
    },
    {
        "content": "<p>Exactly. <br>\nIf you want an induction step where you don't want that the induction hypothesis depends on the assumption <code>gen_list n = x</code>, which you call \"obviously false\", then you also cannot assume it for the <code>nil</code> case. Otherwise you're doing a different induction in the <code>nil</code> and the <code>cons</code> case, and you can easily prove <code>false</code> if you do that.</p>",
        "id": 323350152,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1674593229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20h.20.3A.20xs.20vs.20induction.20xs/near/323350152\">said</a>:</p>\n<blockquote>\n<p>Exactly. <br>\nIf you want an induction step where you don't want that the induction hypothesis depends on the assumption <code>gen_list n = x</code>, which you call \"obviously false\", then you also cannot assume it for the <code>nil</code> case. Otherwise you're doing a different induction in the <code>nil</code> and the <code>cons</code> case, and you can easily prove <code>false</code> if you do that.</p>\n</blockquote>\n<p>Thank you for your answer, I am sorry if my \"obviously false\" comment came across wrong, what I meant by this is that this would have me proof \"gen_list n = x\" which is \"obviously false\" since we have \"gen_list n = hd :: x\" in our environment. So I guess the induction' strategy is completely out of the window then, unless I can somehow find a way to get an arbitrary list. Is this do-able in the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> example? I am not completely sure when a list is considered completely arbitrary (I thought the list generated by <code>gen_list n </code>was considered arbitrary lol)</p>",
        "id": 323351491,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674593680
    },
    {
        "content": "<p>If you have both \"gen_list n = x\" and \"gen_list n = hd :: x\" in environment, you can derive a contradiction by rewriting and apply_fun list.length, and then you can derive anything, in particular your goal.</p>",
        "id": 323352719,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1674594071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20h.20.3A.20xs.20vs.20induction.20xs/near/323352719\">said</a>:</p>\n<blockquote>\n<p>If you have both \"gen_list n = x\" and \"gen_list n = hd :: x\" in environment, you can derive a contradiction by rewriting and apply_fun list.length, and then you can derive anything, in particular your goal.</p>\n</blockquote>\n<p>I mean we have <code>gen_list n = hd :: x</code> in our environment but we have to proof the goal <code>gen_list n = x</code></p>",
        "id": 323353133,
        "sender_full_name": "fkefjlwejlfk",
        "timestamp": 1674594213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"579335\">@fkefjlwejlfk</span> I can't speak to your original non-MWE, but the MWE can be proved thusly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">option</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">foo</span> <span class=\"n\">xs</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">gen_list</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>  <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_foo_able</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">gen_list</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_able</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">is_foo_able</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">gen_list</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_foo_able</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">gen_list</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">gen_list</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 323356472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674595456
    },
    {
        "content": "<p>it's not really a proof by induction as Floris said</p>",
        "id": 323356534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674595482
    },
    {
        "content": "<p>so if this doesn't capture the spirit of the question you should either make a more elaborate MWE or try to sketch what your theorem actually is</p>",
        "id": 323356607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674595515
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo_able</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">is_foo_able</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">gen_list</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_foo_able</span><span class=\"o\">,</span> <span class=\"n\">gen_list</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 323357247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674595819
    },
    {
        "content": "<p>wait a minute...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo_able</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">gen_list</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">gen_list</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 323357843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674596070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"579335\">fkefjlwejlfk</span> <a href=\"#narrow/stream/113489-new-members/topic/induction.20h.20.3A.20xs.20vs.20induction.20xs/near/323351491\">said</a>:</p>\n<blockquote>\n<p>I am not completely sure when a list is considered completely arbitrary (I thought the list generated by <code>gen_list n </code>was considered arbitrary lol)</p>\n</blockquote>\n<p>Generally we would say that a value is arbitrary if it is a variable in the context. So <code>n</code> is an \"arbitrary\" natural number in the sense that the theorem can be applied with any particular value of <code>n</code>, but <code>gen_list n</code> is the output of a construction, so not completely arbitrary. (In this case for example we can say that <code>gen_list n</code> always produces a list of length 3, which is clearly not true about every list.)</p>",
        "id": 323358278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674596279
    }
]