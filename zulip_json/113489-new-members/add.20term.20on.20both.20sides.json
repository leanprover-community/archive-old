[
    {
        "content": "<p>What's the simplest way to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 243394826,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624287459
    },
    {
        "content": "<p><code>by rintro rfl; refl</code> or <code>by intro h; rw h</code></p>",
        "id": 243394954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624287508
    },
    {
        "content": "<p>See also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#subst\">tactic#subst</a></p>",
        "id": 243395296,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1624287638
    },
    {
        "content": "<p>if you want to change a term, you can also do <code>apply_fun (+ z) at h</code></p>",
        "id": 243395326,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624287648
    },
    {
        "content": "<p>(you'll get a non-beta reduced term but they are defeq)</p>",
        "id": 243395364,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624287660
    },
    {
        "content": "<p>Let me try <code>apply_fun</code>. I have these looooong terms x, y, z, with a current goal of <code>x + z = y + z</code>. I'd like to change the goal to <code>x = y</code> without writing out the whole term</p>",
        "id": 243395487,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624287714
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 243395492,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624287716
    },
    {
        "content": "<p>Winston, try the <code>congr</code> and <code>congr' 1</code> tactics</p>",
        "id": 243395628,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624287755
    },
    {
        "content": "<p><code>congr' 1</code> is basically <code>apply congr_arg</code></p>",
        "id": 243395670,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624287773
    },
    {
        "content": "<p><code>congr</code> is mathlib speak for \"do this thing to both sides\"</p>",
        "id": 243395744,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624287798
    },
    {
        "content": "<p><code>congr</code> worked. Thanks!</p>",
        "id": 243395783,
        "sender_full_name": "Winston Yin",
        "timestamp": 1624287808
    },
    {
        "content": "<p>so there are a lot of lemmas and tactics that use that vocab</p>",
        "id": 243395798,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624287814
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> now try to add <code>z</code> on the left, and see how you need to adept all the various proofs that were suggested.</p>",
        "id": 243396637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624288106
    },
    {
        "content": "<p>In fact,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_arg</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 243396771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624288160
    }
]