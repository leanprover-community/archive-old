[
    {
        "content": "<p>What is the preferred way to manage partial sums out of a sequence, like these?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">S1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"c1\">-- has e.g. finset.sum_add_distrib</span>\n<span class=\"kd\">def</span> <span class=\"n\">S2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span>\n<span class=\"kd\">def</span> <span class=\"n\">S3</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span>\n<span class=\"kd\">def</span> <span class=\"n\">S4</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑'</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"c1\">-- has e.g. tsum_add</span>\n</code></pre></div>\n<p>They feel rather equivalent to me (except for the <code>tsum</code> version, which wants to be <code>noncomputable</code> and has differently named API) but perhaps there are differences down the line and one is preferred?</p>",
        "id": 280198181,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1650974185
    },
    {
        "content": "<p>Definitely <code>∑ i in finset.range n, X i</code>, as it avoids coercions.</p>",
        "id": 280198736,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1650974471
    },
    {
        "content": "<p><code>S3</code> can be a good choice in some situations too</p>",
        "id": 280200839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650975531
    },
    {
        "content": "<p>Note <code>finset.sum_add_distrib</code> works on S2 and S3 too</p>",
        "id": 280201041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650975607
    }
]