[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  I am playing with your construction <code>topological_fiber_bundle_core</code> and I cannot finish to prove this lemma to be put at the end of <code>topological_fiber_bundle.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"c1\">-- to be put somewhere else where there is no `include Z`</span>\n\n<span class=\"kd\">@[continuity]</span> <span class=\"kd\">lemma</span> <span class=\"n\">_root_.continuous.prod.mk</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_const.prod_mk</span> <span class=\"n\">continuous_id'</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_sigma_mk</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">continuous</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Z.to_topological_space</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"c1\">-- why does it found the sigma topology instead?</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bundle.total_space</span> <span class=\"n\">Z.fiber</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">continuous_iff_le_induced</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">topological_fiber_bundle_core.to_topological_space</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">induced_generate_from_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_generate_from</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">mem_Union</span><span class=\"o\">,</span> <span class=\"n\">mem_singleton_iff</span><span class=\"o\">],</span> <span class=\"c1\">--lemma</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">preimage_inter</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">is_open.inter</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>  <span class=\"c1\">-- there is not enough API for the generated topology... do I need to write it?</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">preimage_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp</span><span class=\"o\">,</span> <span class=\"n\">local_triv'_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">preimage_comp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Z.fiber</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Z.coord_change</span> <span class=\"o\">(</span><span class=\"n\">Z.index_at</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">by</span> <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">continuous_iff_continuous_on_univ</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">((</span><span class=\"n\">Z.coord_change_continuous</span> <span class=\"o\">(</span><span class=\"n\">Z.index_at</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">((</span><span class=\"n\">continuous_const</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod_mk</span>\n      <span class=\"n\">continuous_id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_on</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span>\n        <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">subset_univ</span> <span class=\"n\">univ</span><span class=\"o\">),</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id.def</span><span class=\"o\">],</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">--this is false, but still it feels like the natural proof...</span>\n        <span class=\"o\">})},</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open_preimage</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">continuous.prod.mk</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open_preimage</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>can you prove it yourself from scratch / give me some hints / find out why my proof is wrong?</p>",
        "id": 242804812,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623794057
    }
]