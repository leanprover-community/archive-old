[
    {
        "content": "<p>Can I get the witness from <code>h</code> constructively here (given that <code>h : q a</code> has a constructive proof)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>My understanding is that in general you can't get the witness from the proof of an existential when defining computational data,<br>\nand that you should use subtypes for that. But then I can't if-then-else on a subtype.</p>",
        "id": 226257956,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1613238806
    },
    {
        "content": "<p>You can use <code>psum (subtype p) (subtype p -&gt; false)</code> and do cases on that</p>",
        "id": 226265289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613248206
    },
    {
        "content": "<p>I made a gist of that at <a href=\"https://gist.github.com/eric-wieser/103ad49e8c5c4415991b7622f77c48e0\">https://gist.github.com/eric-wieser/103ad49e8c5c4415991b7622f77c48e0</a></p>",
        "id": 226265531,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613248476
    },
    {
        "content": "<p>Nice! I imagined there would be something analogous to decidable for subtypes, but couldn't figure out how to do it, thanks</p>",
        "id": 226270584,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1613253750
    },
    {
        "content": "<p>Perhaps mathlib is too classical for it to make sense, but IMO it would be great to have something like my gist in mathlib</p>",
        "id": 226274025,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613257645
    },
    {
        "content": "<p>Which would mean instead of a lemma saying \"assume the axiom of choice\", it can say \"assume an algorithm for computing this witness exists\", and the caller can say \"the axiom of choice provides such an algorithm\"</p>",
        "id": 226274068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613257708
    },
    {
        "content": "<p>Which is roughly what mathlib already does anyway for algorithms about deciding the truth of propositions</p>",
        "id": 226274096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613257761
    },
    {
        "content": "<p>I don't think it would hurt to have it in mathlib, though as you point out it might not end up used too much.</p>",
        "id": 226274896,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613258896
    }
]