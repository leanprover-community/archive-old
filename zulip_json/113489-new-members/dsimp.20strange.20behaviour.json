[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_add</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_lneutr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>  <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"bp\">+</span><span class=\"o\">),</span><span class=\"n\">add</span><span class=\"o\">],</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>doesn't work but it works once I say <code>import tactic</code>?</p>",
        "id": 215559994,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604483441
    },
    {
        "content": "<p>I can't reproduce.</p>",
        "id": 215560345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604483713
    },
    {
        "content": "<p><del>For me it fails with and without the import, with the same error</del></p>",
        "id": 215560354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604483724
    },
    {
        "content": "<p>Copy-pasto... let me try again</p>",
        "id": 215560447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604483765
    },
    {
        "content": "<p>Now it just hangs... with the import</p>",
        "id": 215560521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604483829
    },
    {
        "content": "<p>Thorsten, what are you expecting on paper? This proof won't work, no matter how much you unfold stuff. You need to use associativity.</p>",
        "id": 215560854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604484019
    },
    {
        "content": "<p>I don't think you need associativity? Since this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">has_add</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_lneutr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>  <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">n'.succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So I think Thorsten is just expecting <code>dsimp</code> to do what my <code>change</code> line did.</p>",
        "id": 215560963,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1604484107
    },
    {
        "content": "<p>Oh right. Relying on definitional equality is <em>so</em> weird.</p>",
        "id": 215561348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604484342
    },
    {
        "content": "<p>(This case of associativity is indeed definitional)</p>",
        "id": 215561460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604484396
    },
    {
        "content": "<p>So the issue is that, if you don't want to use <code>change</code>, you need to unfold stuff and then refold some (differently). I don't think we have any tactic doing that besides <code>change</code> (or its twin <code>show</code>).</p>",
        "id": 215561734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604484558
    },
    {
        "content": "<p>Ok, originally I defined add myself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">zero</span>     <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_lneutr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>  <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"bp\">+</span><span class=\"o\">),</span><span class=\"n\">add</span><span class=\"o\">],</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>I thought I am just reproducing the definition of + from the standard library but it seems this is different.</p>",
        "id": 215561785,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604484596
    },
    {
        "content": "<p>In my course I first ask students to show that +,* are a semiaring but then I tell them to use the ring tactic. I wanted to use the official definition of + actually.</p>",
        "id": 215561914,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604484669
    },
    {
        "content": "<p>OK I shouldn't rely on dsimp , fair enough. It is how I am used to work simplify using definitions but I understand this is nt the lean way because dsimp does more things than I expect.</p>",
        "id": 215562083,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604484781
    },
    {
        "content": "<p>Your last snippet is clearly (technologically) different since you're not using at all <code>has_add</code>, which is what you need to refold in the other proof.</p>",
        "id": 215562101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604484798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/dsimp.20strange.20behaviour/near/215560521\">said</a>:</p>\n<blockquote>\n<p>Now it just hangs... with the import</p>\n</blockquote>\n<p>btw I think this is because <code>nat.add</code> is <code>protected</code>, so <code>dsimp [(+), add]</code> is just <code>dsimp [(+), has_add.add]</code> so it's looping.</p>",
        "id": 215562127,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1604484820
    },
    {
        "content": "<p>No, it's not <code>dsimp</code> doing more than you expect. When you use <code>has_add</code> there are more things to unfold than with your def of <code>add</code> and custom non-polymorphic notation.</p>",
        "id": 215562218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604484867
    },
    {
        "content": "<p>but if I don't open has_add it doesn't work at all?</p>",
        "id": 215562236,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604484890
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_lneutr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>  <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"bp\">+</span><span class=\"o\">),</span><span class=\"n\">add</span><span class=\"o\">],</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>fails.</p>",
        "id": 215562273,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604484924
    },
    {
        "content": "<p>Of course, there is no <code>add</code> in the root namespace.</p>",
        "id": 215562299,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604484952
    },
    {
        "content": "<p>That's because <code>nat.add</code> is <code>protected</code>, so even if you have <code>open nat</code> you still need to write <code>nat.add</code></p>",
        "id": 215562301,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1604484953
    },
    {
        "content": "<p>Right, both <code>nat.add</code> and <code>has_add.add</code> are hidden here, for different reasons.</p>",
        "id": 215562390,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485006
    },
    {
        "content": "<p>If I use nat.add my rewrite doesn't work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_lneutr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>  <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"bp\">+</span><span class=\"o\">),</span><span class=\"n\">nat.add</span><span class=\"o\">],</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 215562426,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485049
    },
    {
        "content": "<p>Maybe it is easier if I use my own definition and instantiate ring to this one?</p>",
        "id": 215562447,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485069
    },
    {
        "content": "<p>Why do you want to use <code>dsimp</code> instead of <code>show</code>?</p>",
        "id": 215562517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485095
    },
    {
        "content": "<p>Maybe because I don't know show?</p>",
        "id": 215562545,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485111
    },
    {
        "content": "<p>It's the same as <code>change</code>.</p>",
        "id": 215562568,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485128
    },
    {
        "content": "<p>Do you understand what I wrote about refolding?</p>",
        "id": 215562583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485136
    },
    {
        "content": "<p>Because I just want lean to simplify the term.</p>",
        "id": 215562590,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485143
    },
    {
        "content": "<p>No, you don't want to simplify</p>",
        "id": 215562605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485156
    },
    {
        "content": "<p>You want to unfold and then refold.</p>",
        "id": 215562620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485167
    },
    {
        "content": "<p>Do you use VSCode? Do you know how to use the tactic state widget to understand what is the meaning of each notation?</p>",
        "id": 215562656,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485197
    },
    {
        "content": "<p>I want to apply an equation that follows from the definition of the function. It works for my own definition and I thought that the library definition behaves the same way.</p>",
        "id": 215562706,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485206
    },
    {
        "content": "<p>No I am using emacs.</p>",
        "id": 215562720,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485217
    },
    {
        "content": "<p>You should just try out VScode once to experience the tactic state widget</p>",
        "id": 215562754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485247
    },
    {
        "content": "<p>Your students will love it</p>",
        "id": 215562769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485254
    },
    {
        "content": "<p>Can you copy-paste the way you see tactic state in emacs after the dsimp?</p>",
        "id": 215562789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485269
    },
    {
        "content": "<p>They use VScode anyway. At leats some of them.</p>",
        "id": 215562790,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113489-new-members/topic/dsimp.20strange.20behaviour/near/215562706\">said</a>:</p>\n<blockquote>\n<p>I want to apply an equation that follows from the definition of the function. It works for my own definition and I thought that the library definition behaves the same way.</p>\n</blockquote>\n<p>Does <code>erw</code> work, instead of the <code>rw</code>?</p>",
        "id": 215562811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485280
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">ih</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n'</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">n'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">n'.succ</span>\n</code></pre></div>",
        "id": 215562829,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485291
    },
    {
        "content": "<p>You need to understand the meaning of notations there.</p>",
        "id": 215562833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485293
    },
    {
        "content": "<p>Ok, great. What is <code>+</code> on line 2 and what is <code>.add</code> on line 3 in your opinion?</p>",
        "id": 215562861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485320
    },
    {
        "content": "<p>I just looked for a way to explain and use the definition of add.</p>",
        "id": 215562936,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> Voila:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_lneutr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>  <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"bp\">+</span><span class=\"o\">),</span><span class=\"n\">nat.add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 215562962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485367
    },
    {
        "content": "<p>How come it works for my own definition?</p>",
        "id": 215562973,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485378
    },
    {
        "content": "<p>Is your own definition using <code>+</code> notation?</p>",
        "id": 215562998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485396
    },
    {
        "content": "<p>As in, did you define an instance of <code>has_add</code> for it?</p>",
        "id": 215563010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485407
    },
    {
        "content": "<p>Here is how you answer those crucial question in VSCode:<br>\n<a href=\"/user_uploads/3121/vM5z8RsggJ-NTVmnbgRDPtEX/thorsten.gif\">thorsten.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/vM5z8RsggJ-NTVmnbgRDPtEX/thorsten.gif\" title=\"thorsten.gif\"><img src=\"/user_uploads/3121/vM5z8RsggJ-NTVmnbgRDPtEX/thorsten.gif\"></a></div>",
        "id": 215563016,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485414
    },
    {
        "content": "<p>Johan, I already told all that to Thorsten.</p>",
        "id": 215563027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485426
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"n\">zero</span>     <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_lneutr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>  <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"bp\">+</span><span class=\"o\">),</span><span class=\"n\">nat.add</span><span class=\"o\">],</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>\n<p>works</p>",
        "id": 215563082,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> I think you want to <code>dsimp</code> at <code>ih</code> and the goal</p>",
        "id": 215563086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485454
    },
    {
        "content": "<p>He is not using <code>has_add.add</code> at all in his custom example hence there is no need to refold <code>nat.add</code> into <code>has_add.add</code></p>",
        "id": 215563097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> there is a <code>has_add.add</code> in <code>ih</code> blocking your rewrite.</p>",
        "id": 215563125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485484
    },
    {
        "content": "<p>That's why my code is working, because I <code>dsimp at *</code></p>",
        "id": 215563152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485500
    },
    {
        "content": "<p>OK so there is no way to port my way of using dsimp in my example to using the library definition of +?</p>",
        "id": 215563186,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485524
    },
    {
        "content": "<p>At the stage where things go wrong, my VSCode screencast show he has <code>has_add.add</code> in the assumption but not in the goal, hence need to reintroduce it in the goal or unfold it in the assumption.</p>",
        "id": 215563194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485528
    },
    {
        "content": "<p>In particular <code>local notation m + n := add m n</code> is not syntactically equal to using <code>has_add.add</code></p>",
        "id": 215563203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485534
    },
    {
        "content": "<p>I understand partially why it doesn't work but basically the conclusion is that I cannot easily simulate the behaviour of my own definition using the library.</p>",
        "id": 215563382,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485652
    },
    {
        "content": "<p>That seems 100% fair. The library is meant to handle extremely general stuff, where the addition symbol could mean hundreds of things, it does make things a bit more complicated.</p>",
        "id": 215563494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485709
    },
    {
        "content": "<p>The library has this extra <code>has_add</code> layer.</p>",
        "id": 215563541,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1604485742
    },
    {
        "content": "<p>I guess I should have just proven the definitional equations and then used rewrite and completely avoid dsimp?</p>",
        "id": 215563590,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113489-new-members/topic/dsimp.20strange.20behaviour/near/215563382\">said</a>:</p>\n<blockquote>\n<p>I understand partially why it doesn't work but basically the conclusion is that I cannot easily simulate the behaviour of my own definition using the library.</p>\n</blockquote>\n<p>Well... if you <code>dsimp</code> away the <code>has_add.add</code> <em>everywhere</em>, then after that you should be in a state that's similar to your own definition.</p>",
        "id": 215563673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485805
    },
    {
        "content": "<p>I don't see why you are ok with dsimping it away in the goal, but don't like the idea of dsimping it away in assumptions as well.</p>",
        "id": 215563711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604485833
    },
    {
        "content": "<p>Because I just want to dsimp the goal, that is reduce using definitional equations.</p>",
        "id": 215563764,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604485875
    },
    {
        "content": "<p>Well, if you insist on only dsimping the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_lneutr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>  <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[(</span><span class=\"bp\">+</span><span class=\"o\">),</span><span class=\"n\">nat.add</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test</span>\n</code></pre></div>",
        "id": 215564114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604486098
    },
    {
        "content": "<p>Thank you, but I don't think this is pedagogically helpful.</p>",
        "id": 215568622,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604489308
    },
    {
        "content": "<p>Ok, I understand that it may be a god idea to package away definitional equalities. However, I do find it useful to be able to apply them easily when defining a function. It does work for my own definition of + but I can't simulate this with the library definition. Maybe for good reasons but this spoils the way I wanted to explain things. I guess maybe what I want to do is to prove the definitional equalities and then add them to dsimp and not to use has_add. How would I go about this?</p>",
        "id": 215568832,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604489483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> if you want to use the mathlib, then you need to use <code>has_add</code>. And this <code>has_add</code> will be part of the type of <code>ih</code>. I don't see a way around this.</p>",
        "id": 215571895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604491775
    },
    {
        "content": "<p>So basically I shouldn't use dsimp but prove the definitional equalities and then rewrite with them?</p>",
        "id": 215573263,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604492784
    },
    {
        "content": "<p>I mean I don't want to use the math lib when I am re-proving that Nat is a semiring - obviously. But once we have done this I am happy to use ring. However, I would like that the tactics I have introduced before still work. If I understand you correctly, then basically I shouldn't use dsimp?</p>",
        "id": 215573445,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604492908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271218\">Thorsten Altenkirch</span> <a href=\"#narrow/stream/113489-new-members/topic/dsimp.20strange.20behaviour/near/215573263\">said</a>:</p>\n<blockquote>\n<p>So basically shouldn't use dsimp but prove the definitional equalities and then rewrite with them?</p>\n</blockquote>\n<p>This will not help you if you don't want to rewrite at <code>ih</code>.</p>",
        "id": 215573604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604493042
    },
    {
        "content": "<p>I mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">add_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">reflexivity</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_lneutr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>  <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n'</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">rewrite</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215573783,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604493184
    },
    {
        "content": "<p>Ooh, ok, that would work yes. Because <code>add_succ</code> mentions <code>+</code> on both sides</p>",
        "id": 215573990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604493343
    },
    {
        "content": "<p>I better don't comment on lean's notation mechanism. Seriously, have a look at agda...</p>",
        "id": 215574333,
        "sender_full_name": "Thorsten Altenkirch",
        "timestamp": 1604493564
    },
    {
        "content": "<p>Seriously, we are all waiting for Lean 4 to happen (-;</p>",
        "id": 215574534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604493691
    },
    {
        "content": "<p>Also, seriously, I have no idea whether agda's notation mechanism can deal with an algebraic hierarchy similar to what we have in mathlib. (But that's mainly because I have no experience with agda at all.)</p>",
        "id": 215574639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604493743
    },
    {
        "content": "<p>Thorsten, this doesn't really have to do with notation at all, but rather type classes.</p>",
        "id": 215586439,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604499633
    },
    {
        "content": "<p>The global <code>+</code> notation refers to <code>has_add.add</code> not (say) <code>nat.add</code>. The cost is that there is this extra layer of indirection which may need to be unfolded. The gain is that we can use <code>+</code> everywhere and it just works, and we can use a single set of lemmas like <code>add_zero</code> to reason about it.</p>",
        "id": 215586804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604499768
    },
    {
        "content": "<p>From what I have seen of Agda, it doesn't attempt to address this at all.</p>",
        "id": 215586846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604499783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271218\">@Thorsten Altenkirch</span> In Agda, can I say: \"let <code>G</code> be an additive group\", and use <code>+</code> for its group operation?</p>",
        "id": 215592650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604502310
    },
    {
        "content": "<p>or \"let <code>R</code> and <code>S</code> be rings, <code>M</code> an <code>R</code>-module and <code>N</code> an <code>S</code>-module\" and then use <code>+</code> for addition in all of them?</p>",
        "id": 215592855,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604502379
    },
    {
        "content": "<p>but just writing expressions is only half the story--we also want to uniformly reason about these situations by rewriting with <code>add_comm</code>, or using tactics like <code>abel</code></p>",
        "id": 215593409,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604502586
    },
    {
        "content": "<p>pedagogically I would just avoid redefining the <code>+</code> syntax - you are running into extra weirdness because of it, it's fundamentally not a very basic part of the programming language, so you're kind of running into these weird meta-type-problem things and your students will run into them too. if you want to prove basic arithmetic stuff in order to teach how it works, just stick with calling it <code>add</code></p>",
        "id": 215635363,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1604520825
    },
    {
        "content": "<p>and/or make a local notation to clobber the global <code>+</code> to make it look good</p>",
        "id": 215639433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604522987
    }
]