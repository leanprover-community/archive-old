[
    {
        "content": "<p>Is it possible to get an equation from a match statement similar to <code>cases h : e</code> or <code>if h : p</code>?</p>",
        "id": 188318836,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581843959
    },
    {
        "content": "<p>Can you give an example of what you want to get?</p>",
        "id": 188325577,
        "sender_full_name": "Chris B",
        "timestamp": 1581859126
    },
    {
        "content": "<p>Sure! In the minimal example below I want to fill in sorry:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">AB</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span>\n\n<span class=\"n\">def</span> <span class=\"n\">useAB</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">AB</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">ab</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"k\">in</span> <span class=\"bp\">⟨⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"k\">in</span> <span class=\"bp\">⟨⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188326636,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581861557
    },
    {
        "content": "<p>Also, isn't this what <code>set_option eqn_compiler.lemmas true</code> is supposed to be doing? Or am I confusing something here?</p>",
        "id": 188332970,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1581875140
    },
    {
        "content": "<p>The short answer is \"no\": in the body of a <code>match</code> statement like that, you should not use the variable <code>ab</code> anymore.<br>\nThere is probably some <code>match</code>-trickery you can do to mimic the behavior you want, though...</p>",
        "id": 188407811,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581974991
    },
    {
        "content": "<p>Here is you match trickery:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">AB</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span>\n\n<span class=\"n\">def</span> <span class=\"n\">useAB</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">AB</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">AB</span> <span class=\"bp\">//</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">⟨⟩</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">⟨⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188407896,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581975061
    },
    {
        "content": "<p>You can also do it without the tupling if you make use of the \"match-return\" clause:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">AB</span> <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">B</span>\n\n<span class=\"n\">def</span> <span class=\"n\">useAB</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">AB</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">AB</span><span class=\"o\">,</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">unit</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">⟨⟩</span>\n<span class=\"bp\">|</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ab</span> <span class=\"bp\">=</span> <span class=\"n\">AB</span><span class=\"bp\">.</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"bp\">⟨⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 188421210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1581996373
    },
    {
        "content": "<p>This is not the first time that this really cunning match trick has come up! Maybe it should be documented somewhere? TPIL might be the natural place for it?</p>",
        "id": 188431574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582014260
    },
    {
        "content": "<p>I wanted to write up a small document with Lean tips and tricks not covered in TPiL anyway; I am going to include this trick there.</p>",
        "id": 188441521,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1582023940
    },
    {
        "content": "<p>I don't understand though why Lean doesn't have special syntax for this, when it is so natural to get the same effect in tactics mode with <code>cases h : ab</code></p>",
        "id": 188441604,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1582023995
    },
    {
        "content": "<p>If it's in core then it's hard to change. Mathlib is not just a mahs library -- it has got an extensive set of tactics and other workarounds which have been an attempt to make the frozen Lean 3.4.2 better. It has taken the community a year or so to decide that it is now worth letting mathlib master track Lean 3.5c, and this only happened a few weeks ago. Changes to core are hard, often needing C++ skills which not everyone here has, as well as a good understanding of the core code. Writing another tactic to do something can often be done in Lean itself.</p>",
        "id": 188441931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582024392
    }
]