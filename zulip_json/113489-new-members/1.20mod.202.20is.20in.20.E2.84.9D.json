[
    {
        "content": "<p>Lean isn't letting me say this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>the complaint is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there a way to make this work?</p>",
        "id": 223462650,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611195601
    },
    {
        "content": "<p>It's not clear what mathematically 1 mod 2 in R is. There are no ring homomorphisms from Z/2 to R or even additive homomorphisms.</p>",
        "id": 223463591,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611196691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364351\">@Lars Ericson</span> I made some assumptions about what you're actually trying to do.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 223467263,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611201231
    },
    {
        "content": "<p>For me, one of the hardest concepts to internalise of type theory is that terms have a unique type.  When you write <code>(1 : zmod 2)</code>, you are explicitly saying what the type of <code>1</code> is.  Right after that, you are telling Lean that the term <code>1</code> has type <code>\\R</code>.  This cannot be, since terms have a unique type!</p>",
        "id": 223471152,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1611206264
    },
    {
        "content": "<p>The context is that I am working on Exercise 7(a):<br>\n<a href=\"/user_uploads/3121/j0ZRNJRbYgXBBaYPFYPz4HHJ/Screenshot-from-2021-01-21-00-28-17.png\">Screenshot-from-2021-01-21-00-28-17.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/j0ZRNJRbYgXBBaYPFYPz4HHJ/Screenshot-from-2021-01-21-00-28-17.png\" title=\"Screenshot-from-2021-01-21-00-28-17.png\"><img src=\"/user_uploads/3121/j0ZRNJRbYgXBBaYPFYPz4HHJ/Screenshot-from-2021-01-21-00-28-17.png\"></a></div><p>I am trying to fill out this sketch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">is_an_integral_domain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">sr</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">sr</span><span class=\"o\">],</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">sr</span>  <span class=\"c1\">-- Eric Wieser</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">A_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">subring</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">A_one</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_mem'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex7a</span> <span class=\"o\">:</span> <span class=\"n\">is_an_integral_domain</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>In other words I think <code>zmod 2</code> is an integral domain and I am trying to adapt a proof pattern used previously to prove it.</p>",
        "id": 223471867,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611207363
    },
    {
        "content": "<p>You could take that as a recipe to construct a new number system with symbols <code>0</code> and <code>1</code> that behave in the described way -- they don't have to literally be <code>0</code> and <code>1</code> in the real numbers.</p>\n<p>Here's a start at creating that number system, call it <code>R</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R.add</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R.mul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.add</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.mul</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">one</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 223472371,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611208173
    },
    {
        "content": "<p>Many proofs are trivial if you do them by cases:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">R_add_comm</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223472421,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611208228
    },
    {
        "content": "<p>Another:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">R_mul_one</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 223472439,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611208281
    },
    {
        "content": "<p>(The downside of course is that you don't inherit any of the structure of another number system.  Just showing it can be done this way.)</p>",
        "id": 223472450,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611208313
    },
    {
        "content": "<p>Can't you just use zmod2 directly, rather than embedding it to the reals?</p>",
        "id": 223477283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611214740
    },
    {
        "content": "<p>Thanks I will work through both <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> sketch and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  suggestion of proving</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am working through Kyle's sketch now.  One interesting point, not clear in the exercise, but which is required by <code>integral_domain</code>, is to define <code>neg</code>.  There are two ways to go, one is <code>-0=0</code> and <code>-1=1</code> which conforms to <code>zmod 2</code>.  The other is <code>-0=1</code> and <code>-1=0</code> which  corresponds to a Boolean algebra.  I guess I'll try both and see if both <code>neg</code>s give integral domains.</p>",
        "id": 223520228,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611241606
    },
    {
        "content": "<p>The proof amounts to \"import the right files, remind mathlib that 2 is prime\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat.prime_two</span>\n\n<span class=\"c1\">-- this is `@field.to_integral_domain _ (zmod.field 2)` under the hood</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>I don't know if there's a more idiomatic way to introduce the <code>fact</code>.</p>\n<p>If you actually want to know what the proof is, rather than just knowing that we already have it, check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.field/src\">src#zmod.field</a></p>",
        "id": 223521524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611242102
    },
    {
        "content": "<p>When you import <code>data.zmod.basic</code>, I think you're automatically importing the ring structure on <code>zmod n</code> as well. If you want to do the exercise of defining the addition, multiplication, etc. from scratch, I suggest following Kyle's approach above.</p>",
        "id": 223528522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1611244689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/1.20mod.202.20is.20in.20.E2.84.9D/near/223520228\">said</a>:</p>\n<blockquote>\n<p>One interesting point, not clear in the exercise, but which is required by <code>integral_domain</code>, is to define <code>neg</code>.  There are two ways to go, one is <code>-0=0</code> and <code>-1=1</code> which conforms to <code>zmod 2</code>.  The other is <code>-0=1</code> and <code>-1=0</code> which  corresponds to a Boolean algebra.  I guess I'll try both and see if both <code>neg</code>s give integral domains.</p>\n</blockquote>\n<p>The axioms of an integral domain (an additive group, even) require that <code>-0 = 0</code>, so whatever element you decide to call zero has to be its own inverse. The complementation in a boolean algebra is not a valid group operation.</p>",
        "id": 223530925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611245637
    },
    {
        "content": "<p>Done, following Kyle's approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R.add</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">one</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R.mul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R.neg</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.add</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.mul</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">one</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.neg</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">R.zero</span><span class=\"o\">,</span> <span class=\"n\">R.one</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.zero_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.add_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.mul_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.add_left_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.left_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.right_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">left</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n   <span class=\"n\">left</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n   <span class=\"n\">right</span><span class=\"o\">,</span>\n   <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n   <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n   <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ex7a_kyle_miller</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">R.zero</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">R.one</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">R.add</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">R.mul</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">R.add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">R.zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">R.add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">R.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">R.add_left_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">R.add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">R.one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">R.mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">R.mul_one</span> <span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">R.left_distrib</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">R.right_distrib</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">R.mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"n\">R.exists_pair_ne</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">R.eq_zero_or_eq_zero_of_mul_eq_zero</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 223585577,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611271573
    },
    {
        "content": "<p><code>exact rfl</code> can also be <code>refl</code></p>",
        "id": 223586178,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611271994
    },
    {
        "content": "<p>If you have a tactic you're applying <code>repeat</code>edly to complete, you can use the semicolon <code>;</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">R.add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n   <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n   <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"bp\">;</span>\n   <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223586271,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611272059
    },
    {
        "content": "<p>\"For each a, for each b, for each c, refl\".</p>",
        "id": 223586297,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611272083
    },
    {
        "content": "<p>Thanks Yakov!  </p>\n<p>The last one <code>R.eq_zero_or_eq_zero_of_mul_eq_zero</code> didn't follow as much of a pattern as the others.</p>",
        "id": 223586592,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611272315
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">R.eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h0</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">one</span> <span class=\"bp\">*</span> <span class=\"n\">one</span> <span class=\"bp\">≠</span> <span class=\"n\">zero</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">R.one_mul</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">this</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">simp</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223588031,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1611273597
    },
    {
        "content": "<p>There is also an exercise 7b:<br>\n<a href=\"/user_uploads/3121/ymNG1Cx8jN5nuarkgdd_Ns2j/Screenshot-from-2021-01-21-19-14-03.png\">Screenshot-from-2021-01-21-19-14-03.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ymNG1Cx8jN5nuarkgdd_Ns2j/Screenshot-from-2021-01-21-19-14-03.png\" title=\"Screenshot-from-2021-01-21-19-14-03.png\"><img src=\"/user_uploads/3121/ymNG1Cx8jN5nuarkgdd_Ns2j/Screenshot-from-2021-01-21-19-14-03.png\"></a></div><p>I give this a passing grade:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R.add</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R.mul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">R.neg</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.add</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.mul</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_neg</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.neg</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.not_exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223589507,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611274820
    },
    {
        "content": "<p>There is also a related 8A:<br>\n<a href=\"/user_uploads/3121/jy5DoZKG1Rs-2NxsS8DrQqj2/Screenshot-from-2021-01-21-19-21-37.png\">Screenshot-from-2021-01-21-19-21-37.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jy5DoZKG1Rs-2NxsS8DrQqj2/Screenshot-from-2021-01-21-19-21-37.png\" title=\"Screenshot-from-2021-01-21-19-21-37.png\"><img src=\"/user_uploads/3121/jy5DoZKG1Rs-2NxsS8DrQqj2/Screenshot-from-2021-01-21-19-21-37.png\"></a></div><p>I guess what they are asking is to prove that, if R has every property (including having 1 and the other properties above that involve 1) except 0 not equal to 1, then you can prove that R={0}.  I'm not sure quite how to set that up in Lean, because among other things it requires that, other than providing 0 and 1, there may be any number of other elements in R, and then we have to prove that the only element in R is 0.</p>\n<p>Which I guess gives me a way of expressing it in Lean: Assuming all properties hold and there are no two different elements, then every element must be the 0 element.  Except that you can't even state the other properties that are not claimed to be missing, namely</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">--one := R.one,</span>\n  <span class=\"c1\">--one_mul := R.one_mul,</span>\n  <span class=\"c1\">--mul_one := R.mul_one ,</span>\n  <span class=\"c1\">--exists_pair_ne := R.exists_pair_ne,</span>\n</code></pre></div>\n<p>These can't be expressed at all, except if we assume that <code>one</code> is a synonym for <code>zero</code>.  In terms of inductive structure definitions, I don't know how to make that claim, so I guess I have to declare an additional constant after declaring the structure.</p>",
        "id": 223589852,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611275158
    },
    {
        "content": "<p>Maybe this is a setup for the Lean version of these problems (using <code>unit</code> as a convenient singleton type):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_zero_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(),</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"o\">(),</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(),</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(),</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prob_7b</span> <span class=\"o\">:</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero'</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prob_7b'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">nontrivial</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">punit_is_zero_ring</span> <span class=\"o\">:</span> <span class=\"n\">is_zero_ring</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- Every zero ring is isomorphic to the above ring. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">zero_ring_iso_punit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_zero_ring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">α</span> <span class=\"bp\">≃+*</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prob_8a</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero'</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">is_zero_ring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">integral_domain</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 223613926,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611303809
    },
    {
        "content": "<p>Mathlib already has <code>comm_ring unit</code> as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/punit.comm_ring\">docs#punit.comm_ring</a></p>",
        "id": 223616179,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611305885
    },
    {
        "content": "<p>Thanks for these sketches.  Please correct me if I'm wrong, but they both give an explicit carrier set.</p>\n<p>I'm trying to wrap my head around the idea of showing that, if I have an arbitrary set of something arbitrary, and it has all the properties of <code>integral_domain</code> except <code>eq_zero_or_eq_zero_of_mul_eq_zero</code>, then the carrier set must be <code>{0}</code>.    On paper it's elementary.  Stating exactly that in exactly that way I'm not sure how to do in Lean, i.e., without constructing the set except to just set that it is <code>set A</code> for <code>A: Type*</code>.  The problem with <code>set A</code> is that I then need to establish things like <code>has_mem</code> for <code>A</code> and I don't have those things, so it gets complicated.</p>",
        "id": 223645014,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611324376
    },
    {
        "content": "<p>Did you mean all properties of integral_domain except <code>exists_pair_ne</code>?</p>",
        "id": 223653108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611328138
    },
    {
        "content": "<p>I think your theorem statement is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 223653332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611328233
    },
    {
        "content": "<p>Which reads, if a ring has no zero divisors but has 0 = 1, then it must be isomorphic to the zero ring</p>",
        "id": 223653504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611328316
    },
    {
        "content": "<p>The only interesting part of the proof is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subsingleton_of_zero_eq_one\">docs#subsingleton_of_zero_eq_one</a></p>",
        "id": 223654600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611328794
    },
    {
        "content": "<p>I was hoping we had this, but we don't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">library_search</span>\n<span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 223654896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611328920
    },
    {
        "content": "<p>It needs <code>inhabited</code></p>",
        "id": 223665400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611333225
    },
    {
        "content": "<p>Even then, I can't find it. Is it missing, or am I just missing an import?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≃</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 223665754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611333371
    },
    {
        "content": "<p>there might be a theorem saying that subsingleton + inhabited = unique, and an equiv between uniques</p>",
        "id": 223667437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611334235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/1.20mod.202.20is.20in.20.E2.84.9D/near/223645014\">said</a>:</p>\n<blockquote>\n<p>I'm trying to wrap my head around the idea of showing that, if I have an arbitrary set of something arbitrary, and it has all the properties of <code>integral_domain</code> except <code>eq_zero_or_eq_zero_of_mul_eq_zero</code>, then the carrier set must be <code>{0}</code>.</p>\n</blockquote>\n<p>The only point of bringing in <code>unit</code> as a ring was to say that if every element equaled <code>0</code> (i.e., its carrier set is zero), then the ring is isomorphic to <code>unit</code> (see <code>zero_ring_iso_punit</code>) and hence the original ring has the structure described by the problem.  You could also prove that if there is an isomorphism, then every element equals <code>0</code>.  You don't really need to talk about the carrier set itself, since the <code>is_zero_ring</code> predicate captures the notion.</p>\n<p>But if for some reason you want to talk about carrier sets, you can use <code>set.univ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">zero_ring_carrier_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_zero_ring</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223684431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611342335
    },
    {
        "content": "<p>I'm trying to understand this.  What your definition gives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span>  <span class=\"n\">is_zero_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_ring_carrier_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_zero_ring</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">set.univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">set.mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is a way of transferring a proof that every element of a type is 0 into a proof that every element of a set of that type equals 0.   So it's a technical conversion of type equals <code>{0}</code> to set of type equals <code>{0}</code>.</p>\n<p>What the exercise calls for is to prove that if I have a type <code>R</code> which is assumed to have all of the <code>integral_domain</code> properties but  <code>exists_pair_ne</code>, then <code>R={0}</code>.  The setup for this may or may not involve <code>zero_ring_carrier_eq_zero</code> to transfer from type argument to a set argument.  </p>\n<p>I think exercise 8A is the converse of 7B.   7B says \"<code>{0} → </code> an integral domain except for  <code>exists_pair_ne</code>\".  8A says that \" <code>R</code> is almost an integral domain except for <code>exists_pair_ne → R={0}</code>:<br>\n<a href=\"/user_uploads/3121/oQRJ1jvWtkssnncWJPF3mTWM/Screenshot-from-2021-01-23-13-42-54.png\">Screenshot-from-2021-01-23-13-42-54.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oQRJ1jvWtkssnncWJPF3mTWM/Screenshot-from-2021-01-23-13-42-54.png\" title=\"Screenshot-from-2021-01-23-13-42-54.png\"><img src=\"/user_uploads/3121/oQRJ1jvWtkssnncWJPF3mTWM/Screenshot-from-2021-01-23-13-42-54.png\"></a></div>",
        "id": 223764350,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611427530
    },
    {
        "content": "<p>Most importantly, the contents of <code>R</code> are not specified in advance as <code> ∀ (x : α), x = 0</code>.  The contents of <code>R</code> are implicitly specified, without being constructed, by satisfying all of the <code>integral_domain</code> properties except <code>exists_pair_ne</code>.  So there is no concrete specification of the type, inductive or otherwise.  Only implicit specification through the properties.</p>",
        "id": 223764674,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611427704
    },
    {
        "content": "<p>I'm not familiar with what book you're following, but presumably it's in terms of set theory.  Lean is based in type theory, and it usually takes a bit of translation to get the right idioms.  What I was trying to say is \"a way to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S=\\{0\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span> in type theory is <code>is_zero_ring S</code>, and if that's not convincing, then <code>zero_ring_carrier_eq_zero</code> shows that <code>S</code> as a set is indeed <code>{0}</code> (where <code>0 : S</code> is the zero element of type <code>S</code> that <code>ring S</code> gives).  This last piece of code is not meant to answer the full exercise -- it's just conceptual for sets vs types -- and it doesn't replace the <code>prob_*</code> lemmas from my earlier comment.</p>",
        "id": 223767212,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611429137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> had another translation, too.  Both of ours are using that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>→</mo><mo stretchy=\"false\">(</mo><mi>q</mi><mo>∨</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p \\to (q \\vee r)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>→</mo><mi mathvariant=\"normal\">¬</mi><mi>r</mi><mo>→</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">p \\to \\neg r \\to q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> (but we chose a different thing to negate, basically) since the latter form can be more convenient, at least for the theorem statement and proof.</p>",
        "id": 223767556,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611429360
    },
    {
        "content": "<p>(I did this conversion because <code>integral_domain S</code> is not a <code>Prop</code>, so you can't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\vee</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"mord\">∨</span></span></span></span> it with <code>is_zero_ring S</code>.  One way to say something \"is\" an integral domain is to give a full <code>integral_domain S</code> structure.  This isn't exactly the best idea, though, since it doesn't guarantee that this structure has anything to do with the original ring structure on S...)</p>",
        "id": 223767914,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611429555
    },
    {
        "content": "<p>Thanks.  The book is <a href=\"https://kupdf.net/download/a-survey-of-modern-algebra-birkhoff-amp-maclane-pdf_58e64fb2dc0d607446da9834_pdf\">A survey of modern algebra</a>, 4th edition, by Garret Birkhoff and Saunders Mac Lane.  I am trying to start by specifying the list of properties assumed to hold.  One problem is that with an abstract type R and hence no definition of 0, 1, <code>plus</code> and <code>mul</code>, I don't have the syntax to state the properties.  I got this far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">R.add</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R.mul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R.neg</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R.zero</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R.one</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">R.zero_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I get errors of form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_add</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 223768290,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611429766
    },
    {
        "content": "<p>I want to just say I have some <code>R</code> and it has these operations like <code>mul : R → R → R</code> and they have these properties:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R.add</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R.mul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R.neg</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R.zero</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"kd\">variable</span> <span class=\"n\">R.one</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.zero_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.add_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.add_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.add_left_neg</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.add_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.left_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.right_distrib</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.mul_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">R.not_exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and the only solution <code>R</code> for the logical system of equations consisting of that set of properties is <code>{0}</code>.</p>",
        "id": 223768531,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611429898
    },
    {
        "content": "<p>The idea of typeclasses is that they associate operations and axioms to a type.  <code>(α : Type u) [comm_ring α]</code> gives you most of those, except <code>eq_zero_or_eq_zero_of_mul_eq_zero</code> and <code>not_exists_pair_ne</code></p>",
        "id": 223768710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611429998
    },
    {
        "content": "<p>and it's not specifying anything about <code>α</code> itself (in the sense of inductive definitions)</p>",
        "id": 223768740,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611430022
    },
    {
        "content": "<p>Thanks I will look at the source for <code>comm_ring</code>.  Without relying on the hierarchy that is already in lean, I want to make a similar thing called <code>almost_integral_domain_without_exists_pair_ne</code>.</p>",
        "id": 223768876,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611430097
    },
    {
        "content": "<p>(typeclasses are how we implement \"abuse of notation,\" also known as synecdoche: the <code>α</code> stands in for the commutative ring structure itself because Lean will locate the relevant typeclass instance, which is the commutative ring structure for the type.)</p>",
        "id": 223768953,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611430149
    },
    {
        "content": "<p>All an <code>integral_domain</code> is really is a <code>comm_ring</code> with these two additional axioms, so you can work with <code>comm_ring</code> and have these axioms as hypotheses or conclusions in your lemmas/theorems</p>",
        "id": 223769105,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611430224
    },
    {
        "content": "<p>though <code>not_exists_pair_ne</code> is implemented with the <code>nontrivial</code> typeclass</p>",
        "id": 223769173,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611430266
    },
    {
        "content": "<p>For example, this might be another rendering of problem 8(a):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">prob_8a</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_zero_ring</span> <span class=\"n\">S</span> <span class=\"bp\">∨</span> <span class=\"n\">not_exists_pair_ne</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>with the understanding that a <code>comm_ring</code> satisfying both <code>eq_zero_or_eq_zero_of_mul_eq_zero</code> and <code>not_exists_pair_ne</code> <em>is</em> an integral domain.</p>",
        "id": 223769566,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611430470
    },
    {
        "content": "<p>Or packaging up some of this, you could say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">is_integral_domain</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">not_exists_pair_ne</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">prob_8a</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_zero_ring</span> <span class=\"n\">S</span> <span class=\"bp\">∨</span> <span class=\"n\">is_integral_domain</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 223769933,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611430677
    },
    {
        "content": "<p><code>almost_integral_domain_without_...</code> is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_divisors\">docs#no_zero_divisors</a>, which is what I use I my solution above</p>",
        "id": 223770066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611430735
    },
    {
        "content": "<p>Regarding \"it's not a prop so you can't or it\", you can use <code>nonempty (integral_domain _)</code> to make it a prop</p>",
        "id": 223770268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611430838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364351\">Lars Ericson</span> <a href=\"#narrow/stream/113489-new-members/topic/1.20mod.202.20is.20in.20.E2.84.9D/near/223768290\">said</a>:</p>\n<blockquote>\n<p>but I get errors of form</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">R</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">has_add</span> <span class=\"n\">R</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Answering this question, the issue is that you didn't introduce <code>[has_add R]</code> variables -- these are where the <code>+</code> notation comes from.</p>",
        "id": 223770423,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611430924
    },
    {
        "content": "<p>Thanks Kyle and Eric.  <code>is_integral_domain</code> already exists, so the package becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_zero_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex8a_kyle_miller</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integral_domain</span> <span class=\"n\">S</span> <span class=\"bp\">∨</span> <span class=\"n\">is_zero_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex8a_eric_wieser</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≃+*</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Kyle's version seems more evocative of the exact phrasing of the problem.  The proposition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">is_integral_domain</span> <span class=\"n\">S</span>  <span class=\"bp\">∨</span> <span class=\"n\">is_zero_ring</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>directly reflects the problem statement  \"S is either an integral domain or the system consisting of 0 alone\".</p>\n<p>I will try to prove both versions.  Thanks for the help!</p>",
        "id": 223778787,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611438828
    },
    {
        "content": "<p>Yes, I think Kyle's phrasing more directly matches the question</p>",
        "id": 223779914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611439488
    },
    {
        "content": "<p><code>nonempty (S \\equiv+* unit)</code> is equivalent to <code>is_zero_ring S</code>, and the translation is uninteresting</p>",
        "id": 223780140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611439587
    },
    {
        "content": "<p>Eric pointed out <code>no_zero_divisors</code> exists, so you could phrase it as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex8a_kyle_miller</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integral_domain</span> <span class=\"n\">S</span> <span class=\"bp\">∨</span> <span class=\"n\">is_zero_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This gives hypothesis gives you <code>eq_zero_or_eq_zero_of_mul_eq_zero</code>.  (<code>no_zero_divisors</code> is an example of using the typeclass system to provide certain kinds of basic properties of something automatically.)</p>",
        "id": 223781089,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611440173
    },
    {
        "content": "<p>Thanks, I will update <code>ex8a_kyle_miller</code>.   For Eric's version I was able to prove it just by using the autopilot features on Lean, without really understanding what it says (for example I've never seen <code>≃+* </code> before):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_zero_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex8a_eric_wieser</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CR</span><span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n        <span class=\"o\">[</span><span class=\"n\">NZD</span><span class=\"o\">:</span> <span class=\"n\">no_zero_divisors</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≃+*</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ring_equiv.symm</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ring.one</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.left_inverse</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">unit.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.right_inverse</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">function.left_inverse</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_of_zero_eq_one</span> <span class=\"n\">h</span> <span class=\"n\">ring.one</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u2</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_of_zero_eq_one</span> <span class=\"n\">h</span> <span class=\"n\">ring.one</span> <span class=\"o\">(</span><span class=\"n\">ring.one</span> <span class=\"bp\">*</span> <span class=\"n\">ring.one</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">u2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eq_of_zero_eq_one</span> <span class=\"n\">h</span> <span class=\"n\">ring.one</span> <span class=\"o\">(</span><span class=\"n\">ring.one</span> <span class=\"bp\">+</span> <span class=\"n\">ring.one</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223781758,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611441210
    },
    {
        "content": "<p>Proving Kyle's should be easy after <code>by_cases h : (0 : R) = 1</code></p>",
        "id": 223783358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611443540
    },
    {
        "content": "<p>Yes, thanks, here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.subring</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.slim_check</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.punit_instances</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_zero_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ex8a_kyle_miller</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_integral_domain</span> <span class=\"n\">S</span> <span class=\"bp\">∨</span> <span class=\"n\">is_zero_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ne_comm.mp</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">},</span> <span class=\"n\">mul_eq_zero.mp</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or.inr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_zero_ring</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">eq_zero_of_zero_eq_one</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223783433,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611443645
    },
    {
        "content": "<p>Exercise 8B is \"Is 0≠1 used in proving Rules 1-9?\".  These rules are as follows, I think the answer is No (these are all provided from the definition of commutative ring):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">z</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"o\">:</span>  <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">add_mul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_2_plus</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span> <span class=\"n\">_</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_2_times</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">add_left_eq_self.mp</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">has_add.add</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">z</span><span class=\"o\">))),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_4</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">add_right_inj</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_5</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x₂</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">neg_unique</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_6</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">x₂</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">x₁</span> <span class=\"bp\">=</span> <span class=\"n\">x₂</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rule_4</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_7a</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span> <span class=\"n\">a</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_7b</span>  <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_8</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_one_iff_eq_one_of_mul_eq_one</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rule_9</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">neg_mul_neg</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 223783788,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1611444200
    }
]