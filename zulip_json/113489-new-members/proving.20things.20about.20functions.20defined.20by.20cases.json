[
    {
        "content": "<p>How do I complete the following?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n        <span class=\"n\">apply</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"mi\">2</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I don't know what tactic to use to try to split into the cases by which <code>f</code> was defined.</p>\n<p>Also,  is there a way to clean up my definition to get rid of the <code>have : decidable (x=5)</code>?</p>\n<p>Note: I know that I don't need classical reasoning for decidability of = in <code>nat</code>, but this is just an example.</p>",
        "id": 197866250,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589745504
    },
    {
        "content": "<p>Here's how I'd write your example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span>\n  <span class=\"k\">then</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 197866428,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589745790
    },
    {
        "content": "<p>You can use the <code>split_ifs</code> tactic in more complex examples to break up an if in general</p>",
        "id": 197866437,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589745834
    },
    {
        "content": "<p>You could alternatively do:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 197866479,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589745847
    },
    {
        "content": "<p>Alternatively,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"mi\">2</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 197866506,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589745903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>  Thanks for the info on cleaning up the definitions. </p>\n<p>Lean isn't recognizing <code>split_ifs</code>; what should I import to make it work?</p>",
        "id": 197867044,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589746726
    },
    {
        "content": "<p><code>import tactic</code> gets you a bunch of things</p>",
        "id": 197867053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589746751
    },
    {
        "content": "<p>the precise import is <code>import tactic.split_ifs</code></p>",
        "id": 197867057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589746778
    },
    {
        "content": "<p>I'm getting <code>file 'tactic' not found in the LEAN_PATH</code></p>",
        "id": 197867066,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589746797
    },
    {
        "content": "<p>I'm not using anything from mathlib right now, likely has something to do with that. Do I need to read about the mathlib projects thing to get this to work?</p>",
        "id": 197867128,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589746833
    },
    {
        "content": "<p>Yes, see the instructions <a href=\"https://leanprover-community.github.io/install/project.html\">here</a>.</p>",
        "id": 197867137,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589746850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300684\">Keefer Rowan</span> <a href=\"#narrow/stream/113489-new-members/topic/proving.20things.20about.20functions.20defined.20by.20cases/near/197867128\">said</a>:</p>\n<blockquote>\n<p>I'm not using anything from mathlib right now, likely has something to do with that. Do I need to read about the mathlib projects thing to get this to work?</p>\n</blockquote>\n<p>It may sound scary but actually should be pretty easy, if you follow instructions precisely you should be able to start using mathlib in just a few minutes without entering more than 10 terminal commands</p>",
        "id": 197867157,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589746917
    },
    {
        "content": "<p>Ok, I'll start working on it</p>",
        "id": 197867199,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589746935
    },
    {
        "content": "<p><code>split_ifs</code> isn't working.</p>\n<p>Here's where I am; I can't come up with a shorter example (and this is reasonably short and self-contained) so here it is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">function</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">injection</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"n\">def</span> <span class=\"n\">left_inv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span>  <span class=\"bp\">=</span> <span class=\"n\">id</span>\n\n<span class=\"n\">def</span> <span class=\"n\">has_left_inv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">left_inv</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">left_inv_func</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">set_of</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">},</span>\n        <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">default</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">injection_left_inv_iff</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">injection</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">has_left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"k\">let</span> <span class=\"n\">g</span><span class=\"o\">:=</span> <span class=\"n\">left_inv_func</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">left_inv</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">split_ifs</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I'm getting the error: <code>no if-then-else expressions to split</code>. How should I finish this proof?</p>",
        "id": 197868133,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589748450
    },
    {
        "content": "<p>You should not use tactics to define data (the function <code>left_inv_func</code>)</p>",
        "id": 197868309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748650
    },
    {
        "content": "<p>instead, use <code>\\lam b, if h : b ∈ set.image f set.univ then some h else h₁.default</code></p>",
        "id": 197868322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748684
    },
    {
        "content": "<p>and then the theorem can use <code>split_ifs</code> profitably</p>",
        "id": 197868324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589748697
    },
    {
        "content": "<p>I assumed that this tactic will generate the same definition.</p>",
        "id": 197868432,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589748847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300684\">@Keefer Rowan</span> You can always look at the actual definition using <code>#print left_inv_func</code></p>",
        "id": 197868453,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589748905
    },
    {
        "content": "<p>Non-tactic definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inv_func</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∉</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">),</span> <span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Tactic definition :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">left_inv_func</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">),</span> <span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"err\">∉</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">),</span> <span class=\"n\">default</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>They are indeed the same, and so I'm still stuck. Even with the non-tactic definition, <code>split_ifs</code> doesn't work.</p>",
        "id": 197868526,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589748996
    },
    {
        "content": "<p>When you call <code>split_ifs</code>, <code>dite</code> should be visible in the goal</p>",
        "id": 197868547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589749057
    },
    {
        "content": "<p>It looks like you are not unfolding <code>left_inv_func</code>, so there is no <code>if</code> visible.</p>",
        "id": 197868548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589749059
    },
    {
        "content": "<p>BTW, we already have this as <code>inv_fun_on</code>/<code>inv_fun</code> in <code>logic/function/basic</code></p>",
        "id": 197868609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589749141
    },
    {
        "content": "<p>Ok, I assumed it would do the unfolding, but it is (mostly) working after unfolding, however, I can only get the unfold to work if if I have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">injection_left_inv_iff</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">injection</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">has_left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">left_inv_func</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">left_inv</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">left_inv_func</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>If I introduce to the notation <code>let g := left_inv_func f</code> e.g. in</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">injection_left_inv_iff</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">injection</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">has_left_inv</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n<span class=\"n\">apply</span> <span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">left_inv_func</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">left_inv</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">left_inv_func</span><span class=\"o\">,}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197868695,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589749234
    },
    {
        "content": "<p>you have to unfold <code>g</code> as well if you make a <code>let</code></p>",
        "id": 197868709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589749259
    },
    {
        "content": "<p>unfortunately <code>unfold</code> doesn't work on <code>let</code> but <code>dsimp only [g]</code> should</p>",
        "id": 197868722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589749282
    },
    {
        "content": "<p>Sorry a bit confused by those two messages together. How do I unfold <code>g</code>? By <code>dsimp only [g]</code>?</p>",
        "id": 197868774,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589749323
    },
    {
        "content": "<p>yes</p>",
        "id": 197868775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589749329
    },
    {
        "content": "<p>Ok thanks! It's all coming together now!</p>",
        "id": 197868788,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1589749358
    },
    {
        "content": "<p>Arguably <code>split_ifs</code> should be more aggressive, so that if it fails to find an <code>if</code> statement  it does some amount of unfolding. Where and how much to unfold, of course, is unclear.</p>",
        "id": 197895784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589785043
    },
    {
        "content": "<p>Maybe it could take some arguments? So that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">quux</span><span class=\"o\">],</span> <span class=\"n\">split_ifs</span>\n</code></pre></div>\n\n\n<p>can be written as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">split_ifs</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">quux</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 197896453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589785491
    }
]