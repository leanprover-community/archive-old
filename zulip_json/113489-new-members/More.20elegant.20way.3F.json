[
    {
        "content": "<p>What could be a more elegant way to solve this? It looks like too many steps:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">inv_mul_cancel</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span> <span class=\"o\">[(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt_eq_zero</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199767051,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1591285677
    },
    {
        "content": "<p>you're missing <code>import tactic</code> to make this a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 199767331,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591285788
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">inv_mul_cancel</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199767481,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591285829
    },
    {
        "content": "<p><code>norm_num</code> is the first thing i hit up when i want to prove something is not <code>0</code></p>",
        "id": 199767531,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591285849
    },
    {
        "content": "<p>Oh so sorry! How does it work for me?</p>",
        "id": 199767535,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1591285851
    },
    {
        "content": "<p>uh, I assume you're running this codeblock inside of a file that already imported <code>tactic</code>?</p>",
        "id": 199767591,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591285880
    },
    {
        "content": "<p>oh, nevermind, I just had one of those \"lean spits out a temporary error before it finishes compiling\". I guess <code>data.real.basic</code> imports <code>tactic</code>?</p>",
        "id": 199767663,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591285919
    },
    {
        "content": "<p>Yup, certainly</p>",
        "id": 199767737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591285940
    },
    {
        "content": "<p>No, it's just it's own file [Screen-Shot-2020-06-04-at-10.51.51-AM.png]<br>\n(<a href=\"user_uploads/3121/gsrQOXPpBtrhTLj9BVx3OMdt/Screen-Shot-2020-06-04-at-10.51.51-AM.png\">https://leanprover.zulipchat.com/user_uploads/3121/gsrQOXPpBtrhTLj9BVx3OMdt/Screen-Shot-2020-06-04-at-10.51.51-AM.png</a>)</p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/gsrQOXPpBtrhTLj9BVx3OMdt/Screen-Shot-2020-06-04-at-10.51.51-AM.png\" title=\"https://leanprover.zulipchat.com/user_uploads/3121/gsrQOXPpBtrhTLj9BVx3OMdt/Screen-Shot-2020-06-04-at-10.51.51-AM.png\"><img src=\"user_uploads/3121/gsrQOXPpBtrhTLj9BVx3OMdt/Screen-Shot-2020-06-04-at-10.51.51-AM.png\"></a></div>",
        "id": 199767747,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1591285943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Ah cool. Thanks for the <code>norm_num</code> hint.</p>",
        "id": 199767912,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1591286015
    },
    {
        "content": "<p>it's working for me now, too. the problem was on my end.</p>",
        "id": 199767915,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591286017
    },
    {
        "content": "<p>you can just use <code>rw</code> instead of <code>refine</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">inv_mul_cancel</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199768045,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591286064
    },
    {
        "content": "<p><code>rw</code> is usually how iff statements are meant to be used</p>",
        "id": 199768138,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591286086
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 199768432,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1591286152
    },
    {
        "content": "<p>I see <code>norm_num</code> still has a lot to improve...</p>",
        "id": 199768617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591286217
    },
    {
        "content": "<p>? do you want norm_num to be able to do everything ring can?</p>",
        "id": 199768834,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591286294
    },
    {
        "content": "<p><code>norm_num</code> should close this goal without any help.</p>",
        "id": 199769296,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591286453
    },
    {
        "content": "<p>We can improve <code>norm_num</code> be writing the right simp lemmas</p>",
        "id": 199776359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591289504
    },
    {
        "content": "<p>This might be related to Yury's recent question of making the <code>field_simp</code> simpset a subset of the normal simpset.</p>",
        "id": 199776467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591289532
    },
    {
        "content": "<p>at some point it needs to know that it's supposed to prove a denominator is not equal to 0</p>",
        "id": 199776564,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591289575
    },
    {
        "content": "<p><code>field_simp</code> doesn't do any denominator-clearing unless you pass it a proof that something is not 0</p>",
        "id": 199776653,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591289617
    },
    {
        "content": "<p>I think <code>simp only [inv_mul_cancel]</code>doesn't do anything here</p>",
        "id": 199776746,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591289645
    },
    {
        "content": "<p>That's true. Still... since there are no variables here, I think that in principle <code>norm_num</code> ought to be able to tackle this alone.</p>",
        "id": 199776788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591289667
    },
    {
        "content": "<p>Yes, my point is that there is no variable.</p>",
        "id": 199776842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591289693
    },
    {
        "content": "<p>I guess the first target is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 199777061,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591289774
    },
    {
        "content": "<p>oh, norm_num does handle that, I should have tried it first...</p>",
        "id": 199777376,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591289921
    },
    {
        "content": "<p>but not </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">):=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 199777476,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591289968
    },
    {
        "content": "<p>should I raise an issue?</p>",
        "id": 199777661,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591290033
    },
    {
        "content": "<p>We can ask <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  first.</p>",
        "id": 199778503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591290372
    },
    {
        "content": "<p>What do you think norm_num is? It can't just evaluate arbitrary real number expressions. (That's undecidable, remember?)</p>",
        "id": 199797724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299191
    },
    {
        "content": "<p>But this one isn't arbitrary!</p>",
        "id": 199797788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299214
    },
    {
        "content": "<p>More seriously... can we add some special tags or lemmas that will teach norm_num to evaluate this</p>",
        "id": 199797857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299240
    },
    {
        "content": "<p>Even though norm_num nominally works on real number expressions, that's only if they in fact describe rationals</p>",
        "id": 199797886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299243
    },
    {
        "content": "<p>Algebraic numbers are decidable right? (I actually don't know but they feel decidable!)</p>",
        "id": 199797903,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591299244
    },
    {
        "content": "<p>Galois theory says yes</p>",
        "id": 199797978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299266
    },
    {
        "content": "<p>Algebraic numbers are decidable, yes. The algorithm is very complicated and I've never done it although I've looked at the proof</p>",
        "id": 199798006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299278
    },
    {
        "content": "<p>I guess you don't actually need galois theory for that</p>",
        "id": 199798017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299283
    },
    {
        "content": "<p>something to do with permanents</p>",
        "id": 199798049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299292
    },
    {
        "content": "<p>You probably need some float approximation too?</p>",
        "id": 199798113,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591299311
    },
    {
        "content": "<p>no</p>",
        "id": 199798119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299316
    },
    {
        "content": "<p>That might give a speed up, maybe?</p>",
        "id": 199798171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299331
    },
    {
        "content": "<p>Hmm interesting, I figured the operations would all be with the minimal polynomials, but then you need some approximation to distinguish roots occasionally</p>",
        "id": 199798321,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591299368
    },
    {
        "content": "<p>Evaluating algebraic numbers is a component in CAD</p>",
        "id": 199798336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299372
    },
    {
        "content": "<p><a href=\"http://fredrikj.net/calcium/index.html\">http://fredrikj.net/calcium/index.html</a></p>",
        "id": 199798365,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591299383
    },
    {
        "content": "<p>and that needs some approximation too</p>",
        "id": 199798388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299390
    },
    {
        "content": "<p>You can express approximation problems as <code>alg_1 &lt; alg_2</code></p>",
        "id": 199798445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299410
    },
    {
        "content": "<p>His qqbar implementation uses some root finding, which is what put the idea in my head, its cool that its not needed!</p>",
        "id": 199798487,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591299427
    },
    {
        "content": "<p>There are multiple ways to express algebraic numbers. A minimal polynomial is not enough because polynomials have several roots. You can number and order them but this still basically requires you to locate all the roots. One popular method is to put a box around the root you want that excludes all the others</p>",
        "id": 199798802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299564
    },
    {
        "content": "<p>another trick (for real algebraics) is to use the sequence of signs of all the derivatives of the minimal polynomial at the target number. Perhaps surprisingly this determines which root uniquely</p>",
        "id": 199798928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299631
    },
    {
        "content": "<p>But square roots are easier, right</p>",
        "id": 199799028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299689
    },
    {
        "content": "<p>Human beings have no problem calculating with roots and powers</p>",
        "id": 199799061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299707
    },
    {
        "content": "<p>They are acting more like simp though</p>",
        "id": 199799078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299719
    },
    {
        "content": "<p>So maybe <code>quadratic_closure rat</code> is tractible?</p>",
        "id": 199799130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299729
    },
    {
        "content": "<p>I don't think this is an appropriate goal for <code>norm_num</code></p>",
        "id": 199799148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299736
    },
    {
        "content": "<p>Yup... so we need some simp lemmas</p>",
        "id": 199799154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591299741
    },
    {
        "content": "<p>I know people love their kitchen sink tactics, but I really think I should take a stand and say that this is out of scope for <code>norm_num</code>. <code>norm_num</code> assumes that all evaluable expressions have a normal form that is a rational numeral. Here that is not the case</p>",
        "id": 199799368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299866
    },
    {
        "content": "<p>It is really best if the tactic knows in advance what the normal form is. Currently we are using separate tactics for separate normal forms for separate decision procedures, e.g. <code>ring</code> vs <code>abel</code> vs <code>norm_num</code></p>",
        "id": 199799481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591299935
    },
    {
        "content": "<p>Ok, that's fine. Then we just need a new tactic.</p>",
        "id": 199799943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591300165
    },
    {
        "content": "<p>How does <code>field_simp</code> fare?</p>",
        "id": 199811575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591306650
    },
    {
        "content": "<p>It should be possible to prove this with <code>ring++</code></p>",
        "id": 199811766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591306750
    },
    {
        "content": "<p><code>field_simp</code> should work if you pass it a sqrt positivity lemma and use <code>norm_num</code> as discharger</p>",
        "id": 199812023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591306887
    },
    {
        "content": "<p>As a continuation of this question,  I'm able to prove in one line that <code>phi^2 - phi - 1 = 0</code>, and deduce from there that <code>phi^2 = phi + 1</code>.</p>\n<p>But when I try to prove directly that <code>phi^2 = phi + 1</code> (last example) I cannot find a simple chain of <code>rw</code>s to prove it.  Am I missing some more powerful technique for this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">phi</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqrt</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">phi_sol</span> <span class=\"o\">:</span> <span class=\"n\">phi</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">phi</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">phi</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">sqr_sqrt</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">phi</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">phi</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">sub_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_add_eq_sub_sub</span><span class=\"o\">,</span> <span class=\"n\">phi_sol</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">phi</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">phi</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">phi</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199993269,
        "sender_full_name": "Walter Moreira",
        "timestamp": 1591477791
    },
    {
        "content": "<p>I think this is again a trivial case of the missing Grobner basis tactic.</p>",
        "id": 199993564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591478299
    },
    {
        "content": "<p>Here you can <code>apply eq_of_sub_eq_zero</code> then <code>rw</code> and <code>ring</code></p>",
        "id": 199993569,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591478325
    }
]