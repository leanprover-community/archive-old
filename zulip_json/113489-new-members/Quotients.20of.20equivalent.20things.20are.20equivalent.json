[
    {
        "content": "<p>How could I go about proving something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv_quotient_of_eq</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hAN</span> <span class=\"o\">:</span> <span class=\"n\">A'.normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hBN</span> <span class=\"o\">:</span> <span class=\"n\">B'.normal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">≃*</span> <span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"n\">A'</span> <span class=\"bp\">≃*</span> <span class=\"n\">quotient</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm having trouble figuring out how to write out the definition of <code>to_fun</code> in mathlib quotient language.</p>",
        "id": 234933258,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618613995
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? What imports / namespace?</p>",
        "id": 234933468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618614114
    },
    {
        "content": "<p>Argggghh sorry</p>",
        "id": 234933545,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618614159
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.setoid.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">subgroup</span>\n<span class=\"kn\">open</span> <span class=\"n\">quotient_group</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv_quotient_of_eq</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A'</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">B'</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">B</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hAN</span> <span class=\"o\">:</span> <span class=\"n\">A'.normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hBN</span> <span class=\"o\">:</span> <span class=\"n\">B'.normal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">≃*</span> <span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"n\">A'</span> <span class=\"bp\">≃*</span> <span class=\"n\">quotient</span> <span class=\"n\">B'</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subgroup</span>\n</code></pre></div>",
        "id": 234933632,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618614214
    },
    {
        "content": "<p>Wait... maybe this isn't even true.</p>",
        "id": 234934468,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618614847
    },
    {
        "content": "<p>To channel <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span>, \"whats the maths proof?\"</p>",
        "id": 234934499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618614877
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">monoid_hom.to_mul_equiv</span>\n  <span class=\"o\">(</span><span class=\"n\">quotient_group.lift</span> <span class=\"n\">A'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">quotient_group.lift</span> <span class=\"n\">B'</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">_</span>\n  <span class=\"n\">_</span>\n</code></pre></div>\n<p>might at least get you over the initial quotient hurdle, but it won't help you with it being false</p>",
        "id": 234934564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618614950
    },
    {
        "content": "<p>It isn't true <span aria-label=\"hurt\" class=\"emoji emoji-1f915\" role=\"img\" title=\"hurt\">:hurt:</span> <br>\nTaking quotients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mn>4</mn></msub><mo>×</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z_4 \\times \\mathbb Z_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> can yield groups isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z_4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub><mo>×</mo><msub><mi mathvariant=\"double-struck\">Z</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z_2 \\times \\mathbb Z_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 234934648,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618615017
    },
    {
        "content": "<p>What I really want to do is show that <code>quotient $ ((A' ⊓ B) ⊔ (A ⊓ B')).of (A ⊓ B)</code> is isomorphic to <code>quotient $ ((B' ⊓ A) ⊔ (B ⊓ A')).of (B ⊓ A)</code>.</p>",
        "id": 234934773,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618615131
    },
    {
        "content": "<p>You seem to be using different notation to the above. A and B were different groups in the aboveb question but now you're intersecting them</p>",
        "id": 234938264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618618116
    },
    {
        "content": "<p>Ok, my bad. </p>\n<p>I was kind of led astray by the two (bad) examples above, but I've reduced my problem to something which looks _very_ true. I just need to be able to define it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of_eq</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"c1\">-- fails :(</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>What does <code>\"eliminator\" elaborator failed to compute the motive</code> mean?</p>\n<p>As for why I need to do this, the proof for the Zassenhaus lemma uses a symmetry argument which proves that <code>quotient ((A' ⊔ A ⊓ B').of (A' ⊔ A ⊓ B))</code> and <code>quotient ((B' ⊔ B ⊓ A').of (B' ⊔ B ⊓ A))</code> are both isomorphic to <code>quotient ((A' ⊓ B ⊔ A ⊓ B').of (A ⊓ B))</code>. With my proofs, the swap between <code>A</code> and <code>B</code> means I also have to prove <code>quotient ((A' ⊓ B ⊔ A ⊓ B').of (A ⊓ B)) =  quotient ((B' ⊓ A ⊔ B ⊓ A').of (B ⊓ A)</code>. However, this doesn't work because when I try to use this rewrite in my final proof, Lean raises an error that \"the type motive is not correct.\" So instead of rewriting, I want to just use <code>trans</code> with an <code>equiv</code>. Hence where I am now.</p>",
        "id": 234955768,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618630133
    },
    {
        "content": "<p>(this <code>of_eq</code> is false. Do you see why?)</p>",
        "id": 234956648,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1618631242
    },
    {
        "content": "<p>Ah,  the group structure need not be the same. Well this isn't very exciting.</p>",
        "id": 234956893,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618631549
    },
    {
        "content": "<p>It should be the case that <code>group.quotient H ≃* group.quotient H'</code> if <code>H = H'</code> are equal subgroups of the same group. Does this help?</p>",
        "id": 234957147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618631962
    },
    {
        "content": "<p>This also generalizes to something like <code>group.quotient H -&gt;* group.quotient H'</code> if <code>H &lt;= H'</code></p>",
        "id": 234957286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618632060
    },
    {
        "content": "<p>No, the problem is that I have 4 subgroups of <code>G</code>: <code>H', H, K', K</code>, where <code>H' = K'</code> and <code>H = K</code>. I'm taking quotients of <code>H'</code> in <code>H</code> and <code>K'</code> in <code>K</code>, which means <code>quotient H'</code> and <code>quotient K'</code> are not of the same group. One is of <code>↥H</code> and another of <code>↥K</code>. I also can't seem to rewrite these types, as Lean keeps giving me  \"the type motive is not correct\" errors</p>",
        "id": 234957607,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618632420
    },
    {
        "content": "<p>Your suggestion is what I tried at first, but I think Lean wants to be convinced that <code>↥H</code> and <code>↥K</code> are defeq, which I guess they are not?</p>",
        "id": 234957726,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618632534
    },
    {
        "content": "<p>Can you write something with a complete type?</p>",
        "id": 234960038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618635395
    },
    {
        "content": "<p>I'm not sure what \"I'm taking quotients of <code>H'</code> in <code>H</code>\" means if <code>H'</code> is a subgroup of <code>G</code></p>",
        "id": 234960073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618635438
    },
    {
        "content": "<p>It looks like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.setoid.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">subgroup</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">quotient_group</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">H.comap</span> <span class=\"n\">K.subtype</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv_quotient_of_eq</span> <span class=\"o\">{</span><span class=\"n\">A'</span> <span class=\"n\">A</span> <span class=\"n\">B'</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hAN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A'.of</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hBN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B'.of</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">A'.of</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">B'.of</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subgroup</span>\n</code></pre></div>",
        "id": 234960552,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618635948
    },
    {
        "content": "<p>What's the quotient relation?</p>",
        "id": 234960645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618636082
    },
    {
        "content": "<p>er I guess that's always left_rel</p>",
        "id": 234960696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618636107
    },
    {
        "content": "<p>Ah sorry, you also need to add <code>(h' : A' = B')</code> and <code>(h : A = B)</code></p>",
        "id": 234960837,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618636280
    },
    {
        "content": "<p>Note that it's always easy to prove theorems like this by \"brute force\", you just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv_quotient_of_eq</span> <span class=\"o\">{</span><span class=\"n\">A'</span> <span class=\"n\">A</span> <span class=\"n\">B'</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hAN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A'.of</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hBN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B'.of</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">A'.of</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">B'.of</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h'</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The trouble is that this definition doesn't compute very well, when you want to know what the isomorphism actually is</p>",
        "id": 234960929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618636381
    },
    {
        "content": "<p>so it's better to use the quotient API to build it instead</p>",
        "id": 234960946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618636410
    },
    {
        "content": "<p><span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span>  My goodness. If it's possible, could you explain what is going on in your proof? All my attempts to prove this were met with failure. </p>\n<p>What does \"brute force\" mean here? And what exactly  is <code>cases h'</code> breaking down into?</p>",
        "id": 234961316,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618636838
    },
    {
        "content": "<p>Trying to build it from the quotient API just makes a horrid mess for me.</p>",
        "id": 234961415,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618636946
    },
    {
        "content": "<p>But I don't really know what I'm doing</p>",
        "id": 234961423,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618636967
    },
    {
        "content": "<p>The basic principle here is that if <code>x = y</code> then <code>f x = f y</code>, for <em>any</em> <code>f</code></p>",
        "id": 234961714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618637368
    },
    {
        "content": "<p>In this case <code>f</code> is complicated and dependent, but the theorem is still true. In fact we can prove that the two quotients are <code>=</code>, not just isomorphic</p>",
        "id": 234961770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618637415
    },
    {
        "content": "<p>\"brute force\" is talking about the fact that this proof doesn't really have anything to do with group theory, it's just using basic logic</p>",
        "id": 234961805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618637469
    },
    {
        "content": "<p>this has some downsides because it is skipping the whole quotient API which means it is tricky to work out what the isomorphism does</p>",
        "id": 234961828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618637511
    },
    {
        "content": "<p>It is still possible to work with this, and it works in a pinch</p>",
        "id": 234961868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618637525
    },
    {
        "content": "<p>I see. Also why does <code>rw h</code> not work, as opposed to <code>cases h</code>? The former produces <code>rewrite tactic failed, motive is not type correct</code>. How is <code>cases h</code> taking the place (?) of <code>rw</code> here?</p>",
        "id": 234962102,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618637776
    },
    {
        "content": "<p>My guess is that <code>rw</code> cannot look through the dependent part of <code>f</code>, so it fails. Is this somewhat correct?</p>",
        "id": 234962223,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618637958
    },
    {
        "content": "<p>Here's a definition that uses the quotient API (and as a result generalizes to the one-directional version)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quotient_map_of_le</span> <span class=\"o\">{</span><span class=\"n\">A'</span> <span class=\"n\">A</span> <span class=\"n\">B'</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hAN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A'.of</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hBN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B'.of</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">≤</span> <span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">A'.of</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">→*</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">B'.of</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient_group.map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inclusion</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">of</span><span class=\"o\">,</span> <span class=\"n\">comap_comap</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">comap_mono</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quotient_equiv_of_eq</span> <span class=\"o\">{</span><span class=\"n\">A'</span> <span class=\"n\">A</span> <span class=\"n\">B'</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">hAN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A'.of</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hBN</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">B'.of</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normal</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">A'</span> <span class=\"bp\">=</span> <span class=\"n\">B'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">A'.of</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">B'.of</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">monoid_hom.to_mul_equiv</span>\n    <span class=\"o\">(</span><span class=\"n\">quotient_map_of_le</span> <span class=\"n\">h'.le</span> <span class=\"n\">h.le</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quotient_map_of_le</span> <span class=\"n\">h'.ge</span> <span class=\"n\">h.ge</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">quotient_map_of_le</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.map</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.lift</span><span class=\"o\">,</span> <span class=\"n\">mk'</span><span class=\"o\">,</span> <span class=\"n\">inclusion</span><span class=\"o\">],</span>\n    <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 234962412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618638186
    },
    {
        "content": "<p>Yes, the problem with <code>rw</code> is that it gets tripped up by the dependencies. <code>cases h</code> or <code>subst h</code> will make <code>A</code> and <code>A'</code> the same everywhere, so there aren't any type correctness issues</p>",
        "id": 234962445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618638239
    },
    {
        "content": "<p>This fails for your <a href=\"#narrow/stream/113489-new-members/topic/Quotients.20of.20equivalent.20things.20are.20equivalent/near/234955768\">earlier example</a> because even after the <code>cases</code> you will still have <code>inst_1 inst_2 : group A</code> in the context, and the identity function is not a group hom between these (arbitrary) group structures</p>",
        "id": 234962529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618638314
    },
    {
        "content": "<p>Thanks! I am honestly shocked by the conciseness of your proofs. You make it seem so easy...</p>",
        "id": 234963420,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618639321
    },
    {
        "content": "<p>I tried using <code>mul_equiv.of_bijective</code> but that went terribly.</p>",
        "id": 234963490,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618639358
    },
    {
        "content": "<p>And hooray! I finally have a <code>sorry</code> free proof of the Zassenhaus lemma. It only took 600 lines of code and 5 days. Thank you immensely to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> for helping me with the tricky parts.</p>",
        "id": 234964643,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1618640605
    }
]