[
    {
        "content": "<p>I was playing with a sokoban formalization, <a href=\"https://github.com/mirefek/my-lean-experiments/blob/master/sokoban.lean\">https://github.com/mirefek/my-lean-experiments/blob/master/sokoban.lean</a><br>\nso far just a solvability definition, and a proof that a level is solvable by providing a solution. However, I would like to see the current state of the game in a natural way, that is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>#######\n#. * .#\n#$   $#\n#.$ $.#\n#$  @$#\n#. * .#\n#######\n</code></pre></div>\n<p>rather than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.right</span>\n     <span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.right</span>\n        <span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.left</span>\n           <span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.down</span>\n              <span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.down</span>\n                 <span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.left</span>\n                    <span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.right</span>\n                       <span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.right</span>\n                          <span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.left</span> <span class=\"o\">(</span><span class=\"n\">sokoban.move</span> <span class=\"n\">direction.up</span> <span class=\"n\">soko_level</span><span class=\"o\">))))))))))</span>\n</code></pre></div>\n<p>Would it be possible to tell lean to perform all the beta reductions, and show me the current state, ideally in the way I defined in has_repr? When I add <code>simp</code> tactic anywhere inside, I receive an error message:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>deep recursion was detected at 'infer_type' (potential solution: increase stack space in your system)\n</code></pre></div>\n<p>On the other hand, the <code>reflexivity</code> tactic is able to finish the proof relatively fast.</p>",
        "id": 231051180,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616171514
    },
    {
        "content": "<p>Check out <a href=\"https://github.com/Julian/lean-across-the-board/blob/main/src/guarini.lean\">https://github.com/Julian/lean-across-the-board/blob/main/src/guarini.lean</a></p>",
        "id": 231054098,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616172610
    },
    {
        "content": "<p>We got displaying of chess boards working.</p>",
        "id": 231054123,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616172621
    },
    {
        "content": "<p>with moves, I mean</p>",
        "id": 231054281,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616172695
    },
    {
        "content": "<p>I think <code>dec_trivial</code> might help you here.</p>",
        "id": 231054298,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616172704
    },
    {
        "content": "<p>Show in <a href=\"https://github.com/Julian/lean-across-the-board/blob/main/src/guarini.lean\">https://github.com/Julian/lean-across-the-board/blob/main/src/guarini.lean</a></p>",
        "id": 231054390,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616172736
    },
    {
        "content": "<p>I also got displaying working to some extent (I can run <code>#eval</code>), just not in the tactic mode.</p>",
        "id": 231061297,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616175318
    },
    {
        "content": "<p>As far as I understand, <code>dec_trivial</code> is only for finishing the goal using decidability. So I can use it as well instead of <code>reflexivity</code>, maybe it will work better on bigger levels.</p>",
        "id": 231061840,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616175537
    },
    {
        "content": "<p>I imagined that I could see the current level, as I am applying the particular steps. How does the visualisation work in the chess problem? I don't see visualisation in the guarini file (except for in the comments).</p>",
        "id": 231062509,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616175827
    },
    {
        "content": "<p>What I was now thinking was that I could maybe write a tactic which finds an instance of <code>sokoban</code>, evaluates it, converts it into a string, tries to prove that the new and the old versions are equal using <code>dec_trivial</code> or <code>reflexivity</code>, and if it succeeds, it performs rewriting. Just that</p>\n<ul>\n<li>it feels a bit overcomplicated</li>\n<li>the string as shown  in the current goal displays newlines as <code>\\n</code> rather than actual newlines. So maybe, the tactic should also print the sokoban state on its own...</li>\n</ul>\n<p>Any better idea?</p>",
        "id": 231069578,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616178682
    },
    {
        "content": "<p>I think this is in the style of a <code>norm_*</code> normalization tactic/plugin for <code>norm_num</code>. It is normalizing the expression for some term, given some proof or proof context</p>",
        "id": 231073263,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616180226
    },
    {
        "content": "<p>The other option is to look at examples of a styling widget, like what was done for the Rubik's cube or sudoku examples: <a href=\"https://github.com/kendfrey/rubiks-cube-group\">https://github.com/kendfrey/rubiks-cube-group</a> <a href=\"https://github.com/TwoFx/sudoku\">https://github.com/TwoFx/sudoku</a></p>",
        "id": 231073592,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616180372
    },
    {
        "content": "<p>wow, that looks really fancy, I am not sure if I can do that</p>",
        "id": 231091339,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616188614
    },
    {
        "content": "<p>So, in the end, I wrote the tactic that I mentioned before (I updated <a href=\"https://github.com/mirefek/my-lean-experiments/blob/master/sokoban.lean\">https://github.com/mirefek/my-lean-experiments/blob/master/sokoban.lean</a>). I would be however still interested if there is a better way to convince lean to do the gradual move simplifications as the solution proceeds.</p>",
        "id": 231095408,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616191146
    },
    {
        "content": "<p>You wrote the normalizer, nice =)</p>",
        "id": 231096980,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616192048
    },
    {
        "content": "<p>I looked at the html widget examples, and they are not working for me. Maybe, I am just doing something wrong with the VSCode (usually, I am using emacs). In sudoku, I just see the standard lean state, and in rubik's cube, I only get a message <code>successfully rendered widget</code>. Is there some necessary addon, or the right version of VSCode, or something like that?</p>",
        "id": 231100003,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616194057
    },
    {
        "content": "<p>Or I just don't know how to open it...</p>",
        "id": 231100070,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616194096
    },
    {
        "content": "<p>The key to making it show up in the goal view is <a href=\"https://github.com/TwoFX/sudoku/blob/master/src/widget.lean#L95-L124\">this stuff</a></p>",
        "id": 231100724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616194522
    },
    {
        "content": "<p>that creates the <code>begin [show_sudoku]</code> environment, which will call <code>save_info</code> to store the data needed for goal data to show up when you put your cursor inside the tactic block</p>",
        "id": 231100876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616194608
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/his0JQqdPNNXWf8EFgoonCRE/ss_sudoku.png\">ss_sudoku.png</a> <a href=\"/user_uploads/3121/D9BIXzge5HD0RTMWb2ROoany/ss_rubik.png\">ss_rubik.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/his0JQqdPNNXWf8EFgoonCRE/ss_sudoku.png\" title=\"ss_sudoku.png\"><img src=\"/user_uploads/3121/his0JQqdPNNXWf8EFgoonCRE/ss_sudoku.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/D9BIXzge5HD0RTMWb2ROoany/ss_rubik.png\" title=\"ss_rubik.png\"><img src=\"/user_uploads/3121/D9BIXzge5HD0RTMWb2ROoany/ss_rubik.png\"></a></div>",
        "id": 231101855,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616195244
    },
    {
        "content": "<p>do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? It's hard to work with screenshots</p>",
        "id": 231102997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616195989
    },
    {
        "content": "<p>Oh, you cut off the tactic state view but it doesn't look like mine</p>",
        "id": 231103332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616196164
    },
    {
        "content": "<p>is there a dropdown in the corner that says \"plain text\" / \"widget\"?</p>",
        "id": 231103362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616196196
    },
    {
        "content": "<p>I have version 0.16.25 of the vscode-lean extension</p>",
        "id": 231103404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616196236
    },
    {
        "content": "<p>I have 0.15.8, maybe, I should upgrade.</p>",
        "id": 231103520,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616196311
    },
    {
        "content": "<p>vscode makes it a one-click fix</p>",
        "id": 231103541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616196331
    },
    {
        "content": "<p>Click where? I am sorry, I am not used to VSCode.</p>",
        "id": 231103676,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616196406
    },
    {
        "content": "<p>Maybe, I have to upgrade the VScode itself.</p>",
        "id": 231103803,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616196493
    },
    {
        "content": "<p>click on the extension button (looks like four squares on the left sidebar), then find \"lean\" in the list</p>",
        "id": 231103910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616196600
    },
    {
        "content": "<p>it probably says \"update available\" or something like that</p>",
        "id": 231103999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616196636
    },
    {
        "content": "<p>I upgraded VScode, and it somehow automatically upgraded the lean extension.</p>",
        "id": 231104158,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616196764
    },
    {
        "content": "<p>However, it is still not working.</p>",
        "id": 231104192,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616196790
    },
    {
        "content": "<p>It looks the same, there is a dropdown in the corner with options <code>no_filter</code> <code>hide /^_/</code> <code>goals_only</code></p>",
        "id": 231104288,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616196844
    },
    {
        "content": "<p>There should be a dropdown that lets you switch between \"widget mode\" and \"text mode\".</p>",
        "id": 231104356,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616196883
    },
    {
        "content": "<p>If you click inside a proof does the infoview window look like this? <a href=\"https://github.com/leanprover/vscode-lean/blob/master/media/infoview-overview.png\">https://github.com/leanprover/vscode-lean/blob/master/media/infoview-overview.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/leanprover/vscode-lean/blob/master/media/infoview-overview.png\"><img src=\"https://raw.githubusercontent.com/leanprover/vscode-lean/master/media/infoview-overview.png\"></a></div>",
        "id": 231104403,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1616196921
    },
    {
        "content": "<p>Ha, now it is working, there was some <code>reload required</code> button that I had to click on.</p>",
        "id": 231104419,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616196935
    },
    {
        "content": "<p>Probably to finish all the upgrades.</p>",
        "id": 231104433,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616196950
    },
    {
        "content": "<p>So now, I can go back about how this magic work. Is it somewhere documented? I mean what is the meaning of <code>[show_sudoku]</code>? As far as I can see, <code>show_sudoku</code> is a namespace, and an alias for a <code>tactic</code>. Is the alias necessary? And which functions are important in the namespace?</p>",
        "id": 231105538,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616197835
    },
    {
        "content": "<p><code>begin [custom] end</code> is a custom tactic block, where all the tactics inside live in the <code>custom.interactive.*</code> namespace instead of the usual <code>tactic.interactive.*</code></p>",
        "id": 231106949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616198842
    },
    {
        "content": "<p>In order to make it work you need the specific definitions <code>custom</code>, <code>custom.step</code>, <code>custom.istep</code>, <code>custom.save_info</code> like in the sudoku example. These names are hardcoded in the way custom tactic blocks are desugared</p>",
        "id": 231107098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616198959
    },
    {
        "content": "<p>so yes, the namespace is required and the alias is required (although it doesn't have to be an alias of <code>tactic</code>, it can be any monad, although it's usually <code>tactic</code> or an extension of <code>tactic</code> to add state or something)</p>",
        "id": 231107211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616199033
    },
    {
        "content": "<p>The <code>copy_decls</code> function in the sudoku example is not required, but it will import all interactive tactics from <code>tactic</code> into your custom tactic environment, so that things like <code>intro</code> and <code>apply</code> work in addition to your game solving tactics, which may or may not be what you want</p>",
        "id": 231107572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616199379
    },
    {
        "content": "<p>Ah, thanks for explanation of <code>copy_decls</code>. What about the role of <code>solve1</code>? And what is the meaning of <code>step</code> and <code>istep</code>? As far as I understand, <code>save_info</code> produces the widget / text in the tactic state window.</p>",
        "id": 231107852,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1616199681
    },
    {
        "content": "<p>I believe <code>solve1</code> implements the braces operation <code>{ tacs }</code>, while <code>step</code> and <code>istep</code> are the equivalent of <code>bind</code> in the monad (they attach some position information to the tactics so that they can later be located by the goal view tracker), and <code>save_info</code> adds data to the position info which determines how goals are printed</p>",
        "id": 231109108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616200996
    },
    {
        "content": "<p>for the most part you can just delegate to the <code>tactic</code> functions unless you want to do something special at the end of a tactic block, after every tactic, or if you want to print the goal in a special way</p>",
        "id": 231109182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616201061
    }
]