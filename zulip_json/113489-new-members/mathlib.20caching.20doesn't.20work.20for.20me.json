[
    {
        "content": "<p>Each time I upgrade mathlib using <code>leanproject upgrade-mathlib</code>, it downloads a bunch of cache files but then seems to ignore the cache when I go to rebuild my project (it rebuilds a ton of mathlib files).   This makes builds after upgrades take a long time.  Any ideas why the caching might not be working?  I'm on an M1 Mac if that's relevant, and using Lean from homebrew rather than elan since when I first installed Lean elan didn't support M1.</p>",
        "id": 319283210,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672781394
    },
    {
        "content": "<p>Does <code>lean --version</code> output something that matches the contents of your <code>leanproject.toml</code>?</p>",
        "id": 319290222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672784572
    },
    {
        "content": "<p>It looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">50</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"ray\"</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"0.1\"</span>\n<span class=\"n\">lean_version</span> <span class=\"bp\">=</span> <span class=\"s2\">\"leanprover-community/lean:3.50.3\"</span>\n<span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">\"src\"</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n<span class=\"n\">mathlib</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">git</span> <span class=\"bp\">=</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib\"</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"bp\">=</span> <span class=\"s2\">\"44b58b42794e5abe2bf86397c38e26b587e07e59\"</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 319291202,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672785002
    },
    {
        "content": "<p>What does <code>lean --make one_of_your_files</code> do? Does it start building files in mathlib rather than your stuff?</p>",
        "id": 319291549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672785127
    },
    {
        "content": "<p><code>leanproject --version</code> would also be a good thing to check</p>",
        "id": 319292224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672785445
    },
    {
        "content": "<p>It complains that I haven't updated my files for the mathlib changes, and  then starts building part of mathlib (some measure theory, in this case).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lean</span> <span class=\"c1\">--make uniform.lean</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">geoffreyi</span><span class=\"bp\">/</span><span class=\"n\">ray</span><span class=\"bp\">/</span><span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">ring.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">geoffreyi</span><span class=\"bp\">/</span><span class=\"n\">ray</span><span class=\"bp\">/</span><span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">ring.lean'</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">search</span> <span class=\"n\">path</span>\n<span class=\"n\">Use</span> <span class=\"bp\">'</span><span class=\"n\">lean</span> <span class=\"c1\">--path' to see where lean is looking, or https://leanprover-community.github.io/file-not-found.html for more</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">geoffreyi</span><span class=\"bp\">/</span><span class=\"n\">ray</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactics.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">file</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">geoffreyi</span><span class=\"bp\">/</span><span class=\"n\">ray</span><span class=\"bp\">/</span><span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">order</span><span class=\"bp\">/</span><span class=\"n\">ring.lean'</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">search</span> <span class=\"n\">path</span>\n<span class=\"n\">Use</span> <span class=\"bp\">'</span><span class=\"n\">lean</span> <span class=\"c1\">--path' to see where lean is looking, or https://leanprover-community.github.io/file-not-found.html for more</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">geoffreyi</span><span class=\"bp\">/</span><span class=\"n\">ray</span><span class=\"bp\">/</span><span class=\"n\">_target</span><span class=\"bp\">/</span><span class=\"n\">deps</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">measure_theory</span><span class=\"bp\">/</span><span class=\"n\">measure</span><span class=\"bp\">/</span><span class=\"n\">haar.lean</span><span class=\"o\">:</span> <span class=\"n\">parsing</span> <span class=\"n\">at</span> <span class=\"n\">line</span> <span class=\"mi\">288</span>\n</code></pre></div>",
        "id": 319292404,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672785509
    },
    {
        "content": "<p>And <code>leanproject --version</code>?</p>",
        "id": 319292918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672785797
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">leanproject</span> <span class=\"c1\">--version</span>\n<span class=\"n\">leanproject</span><span class=\"o\">,</span> <span class=\"n\">version</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 319295418,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672787067
    },
    {
        "content": "<p>Try deleting <code>_target/deps</code>, then running <code>leanpkg configure</code>, then <code>leanproject get-mathlib-cache</code></p>",
        "id": 319295502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672787113
    },
    {
        "content": "<p>Although if you're curious what went wrong, before you do that...</p>",
        "id": 319295535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672787141
    },
    {
        "content": "<p>Cd into <code>Users/geoffreyi/ray/_target/deps/mathlib</code> and run <code>git diff</code></p>",
        "id": 319295561,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672787152
    },
    {
        "content": "<p><code>git diff</code> doesn't show anything, since I'm on a detached HEAD branch with no changes.  To clarify, do you know what went wrong, or is this a guess?</p>",
        "id": 319298519,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1672788671
    },
    {
        "content": "<p>My guess was that you modified something by accident. I know that you can safely delete that folder and regenerate it; and I'm guessing that the regenerated version might magically fix everything</p>",
        "id": 319300881,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672790074
    },
    {
        "content": "<p>Try <code>leanproject get-mathlib</code></p>",
        "id": 319304716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672792574
    },
    {
        "content": "<p>Kevin, I already wrote that above. <code>get-mathlib</code> is just a truncated spelling of <code>get-mathlib-cache</code>.</p>",
        "id": 319346262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672822864
    }
]