[
    {
        "content": "<p>Dear All,</p>\n<p>I am trying to prove that if <code>f</code> is a polynomial in one variable over a commutative ring, then <code>f</code> is contained in the ideal span of its coefficients.  I hope that the code below states, at least correctly, the result that I want!  Is there a proof already of this fact?  I am having a hard time using the \"support\" of the polynomial and converting into a \"sum representation\".</p>\n<p>Thank you!</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finc</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">,</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207931346,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598339975
    },
    {
        "content": "<p>oh wow data.polynomial has been broken up into lots of files recently, and I don't know my way around it any more.</p>",
        "id": 207932060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598340619
    },
    {
        "content": "<p>There will presumably be some lemma in there somewhere which says that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><msub><mo>∑</mo><mi>i</mi></msub><msub><mi>a</mi><mi>i</mi></msub><msup><mi>X</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">f=\\sum_i a_i X^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.124374em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 207932093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598340658
    },
    {
        "content": "<p>It's <code>as_sum</code> on line 196 of <code>data.polynomial.degree.basic</code></p>",
        "id": 207932214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598340760
    },
    {
        "content": "<p>I have been unable to locate this lemma: thank you very much!  I will try to get it to work!</p>",
        "id": 207932238,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598340783
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">finc</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">,</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">as_sum</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207932484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341004
    },
    {
        "content": "<p>Now the goal becomes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mtext> </mtext><mo>∈</mo><mi>S</mi></mrow></msub><msub><mi>a</mi><mi>i</mi></msub><mo>∈</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i\\ \\in S}a_i \\in\\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17862099999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mspace mtight\"><span class=\"mtight\"> </span></span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> oh oops, I've rewritten too many f's.</p>",
        "id": 207932554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341077
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">as_sum</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207932636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341126
    },
    {
        "content": "<p>(rewrite on LHS only). Now the goal is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>S</mi></mrow></msub><msub><mi>a</mi><mi>i</mi></msub><mo>∈</mo><mi>s</mi><mi>p</mi><mi>a</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i\\in S}a_i \\in span(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17862099999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span> and you know that each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>.</p>",
        "id": 207932692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341193
    },
    {
        "content": "<p>Ah, I did not know that you could make Lean rw only on the LHS...</p>",
        "id": 207932805,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598341260
    },
    {
        "content": "<p>So now we want to apply a lemma that says that if a finite number of things are in an ideal then so is their sum</p>",
        "id": 207932970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341413
    },
    {
        "content": "<p>And that will be called sum_mem probably</p>",
        "id": 207932983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341433
    },
    {
        "content": "<p>(sorry so slow, doing ten other things at once; just sat down to think about this now)</p>",
        "id": 207933212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341602
    },
    {
        "content": "<p>No worries!  Besides, getting a slower feed, I learn more!</p>",
        "id": 207933253,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598341629
    },
    {
        "content": "<p>If I do <code>#check sum_mem</code> and then hit ctrl-space (and then escape and ctrl-space again) I see a list of possibilities</p>",
        "id": 207933279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341666
    },
    {
        "content": "<p>(and I get some extra time to process)</p>",
        "id": 207933283,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598341669
    },
    {
        "content": "<p>oh here we go, <code>submodule.sum_mem</code> should do it</p>",
        "id": 207933336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341693
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">sum_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 207933371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341730
    },
    {
        "content": "<p>The goal is now</p>\n<div class=\"codehilite\"><pre><span></span><code>⊢ ∀ (c : ℕ), c ∈ finset.range (f.nat_degree + 1) → ⇑C (f.coeff c) * X ^ c ∈ ideal.span {tt : polynomial R | ∃ (i : ℕ) (H : i ∈ f.support), tt = ⇑C (f.coeff i)}\n</code></pre></div>",
        "id": 207933417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341780
    },
    {
        "content": "<p>Yes, I am getting the same!  At least I know how to follow steps!</p>",
        "id": 207933429,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598341795
    },
    {
        "content": "<p>This would be a one-liner but for the fact that the ideal on the RHS is only generated by the coefficients in the support</p>",
        "id": 207933493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341821
    },
    {
        "content": "<p>whereas the coefficient could be zero, so we're going to have to split into two cases</p>",
        "id": 207933511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341846
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">as_sum</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">sum_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207933583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341922
    },
    {
        "content": "<p>The first goal is when i is in the support:</p>\n<div class=\"codehilite\"><pre><span></span><code>h: i ∈ f.support\n⊢ ⇑C (f.coeff i) * X ^ i ∈ ideal.span {tt : polynomial R | ∃ (i : ℕ) (H : i ∈ f.support), tt = ⇑C (f.coeff i)}\n</code></pre></div>",
        "id": 207933643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341970
    },
    {
        "content": "<p>By the way, do you see that I am writing the argument completely backwards as far as a mathematician is concerned?</p>",
        "id": 207933665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598341994
    },
    {
        "content": "<p>I am following!</p>",
        "id": 207933671,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342000
    },
    {
        "content": "<p>We now want that if a is in I, then a*b is in I</p>",
        "id": 207933681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207933665\">said</a>:</p>\n<blockquote>\n<p>By the way, do you see that I am writing the argument completely backwards as far as a mathematician is concerned?</p>\n</blockquote>\n<p>Yes, every other line that I write in Lean seems to be a <code>have</code>...</p>",
        "id": 207933693,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342041
    },
    {
        "content": "<p>that's because you're writing arguments forwards</p>",
        "id": 207933742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342055
    },
    {
        "content": "<p>Both ways are fine, but there are advantages to going backwards</p>",
        "id": 207933755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342070
    },
    {
        "content": "<p>I can imagine, I am just not proficient enough, yet</p>",
        "id": 207933768,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342087
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 207933796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342130
    },
    {
        "content": "<p>and now the first goal is </p>\n<div class=\"codehilite\"><pre><span></span><code>⊢ ⇑C (f.coeff i) ∈ ideal.span {tt : polynomial R | ∃ (i : ℕ) (H : i ∈ f.support), tt = ⇑C (f.coeff i)}\n</code></pre></div>",
        "id": 207933812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342148
    },
    {
        "content": "<p>so we need the lemma that X is in the ideal spanned by X</p>",
        "id": 207933869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342168
    },
    {
        "content": "<p>ok</p>",
        "id": 207933879,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342189
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 207933883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342198
    },
    {
        "content": "<p>and now our first goal has become</p>\n<div class=\"codehilite\"><pre><span></span><code>⊢ ⇑C (f.coeff i) ∈ {tt : polynomial R | ∃ (i : ℕ) (H : i ∈ f.support), tt = ⇑C (f.coeff i)}\n</code></pre></div>",
        "id": 207933900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342222
    },
    {
        "content": "<p>which seems at least true...</p>",
        "id": 207933920,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342251
    },
    {
        "content": "<p>and the way that sets are set up, this is definitionally equal to the simpler</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i_1</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⇑</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i_1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and you can change the goal to this with <code>dsimp</code> if you want (but I won't do this)</p>",
        "id": 207933941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342270
    },
    {
        "content": "<p>To solve an exists goal, you use <code>use</code></p>",
        "id": 207933989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342286
    },
    {
        "content": "<p><code>use [i, h] </code> (we have both things to hand)</p>",
        "id": 207934010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342315
    },
    {
        "content": "<p>yes!!</p>",
        "id": 207934019,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342324
    },
    {
        "content": "<p>and now the goal is of the form X=X so Lean closes it automatically</p>",
        "id": 207934022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342326
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">as_sum</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">sum_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207934035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342339
    },
    {
        "content": "<p>The other case -- here i is not in the support so we're trying to prove that 0 is in the ideal</p>",
        "id": 207934066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207933941\">said</a>:</p>\n<blockquote>\n<p>and the way that sets are set up, this is definitionally equal to the simpler</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">i_1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i_1</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">),</span> <span class=\"err\">⇑</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⇑</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i_1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and you can change the goal to this with <code>dsimp</code> if you want (but I won't do this)</p>\n</blockquote>\n<p>I did not know that you could deal with sets like this</p>",
        "id": 207934078,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342384
    },
    {
        "content": "<p><code>x \\in {y | P y}</code> is definitionally equal to <code>P x</code></p>",
        "id": 207934148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342410
    },
    {
        "content": "<p>If it weren't then there would be some simp lemma saying it was and you'd apply that</p>",
        "id": 207934185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342443
    },
    {
        "content": "<p>I see.  I had probably read this somewhere, but it flowed out of my mind</p>",
        "id": 207934186,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342443
    },
    {
        "content": "<p>so, for the second goal, my approach would be to <code>have coeff... = 0</code></p>",
        "id": 207934226,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342483
    },
    {
        "content": "<p>I tend to go backwards so I'd start with </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">convert</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 207934265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342514
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>h: i ∉ f.support\n⊢ ⇑C (f.coeff i) * X ^ i = 0\n</code></pre></div>",
        "id": 207934315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342528
    },
    {
        "content": "<p>I would prefer to follow your strategy</p>",
        "id": 207934317,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342529
    },
    {
        "content": "<p><code>submodule.zero_mem J</code> is the assertion that 0 is in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span></p>",
        "id": 207934365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342563
    },
    {
        "content": "<p>Our goal is that something else is in <code>J</code>, but the <code>convert</code> tactic says \"honestly, this line should close this goal\"</p>",
        "id": 207934387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342589
    },
    {
        "content": "<p>and Lean's response is \"OK then, you will have to prove that these things are equal before I believe you\"</p>",
        "id": 207934396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342605
    },
    {
        "content": "<p>Ah, so you are pointing out to Lean that 0 is an element of the set and it tries to then prove that your given element is 0?</p>",
        "id": 207934426,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342623
    },
    {
        "content": "<p>right</p>",
        "id": 207934435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342633
    },
    {
        "content": "<p>(or rather, asks you to prove!)</p>",
        "id": 207934459,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342642
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">convert</span> <span class=\"n\">zero_mul</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 207934501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342653
    },
    {
        "content": "<p><code>zero_mul _</code> is the statement that <code>0 * x = 0</code> and I'm telling Lean to close the goal with this</p>",
        "id": 207934519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342670
    },
    {
        "content": "<p>Ok, I am following</p>",
        "id": 207934531,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342686
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∉</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span>\n<span class=\"err\">⊢</span> <span class=\"err\">⇑</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 207934534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342689
    },
    {
        "content": "<p>It's a bit disappointing that <code>simp</code> can't take it from here</p>",
        "id": 207934562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342712
    },
    {
        "content": "<p>There are two steps left: first to show that if i isn't in the support then <code>f.coeff i = 0</code></p>",
        "id": 207934703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342837
    },
    {
        "content": "<p>and second to show that C 0 = 0</p>",
        "id": 207934711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342845
    },
    {
        "content": "<p>Ok, and C should be injective, right?</p>",
        "id": 207934783,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342895
    },
    {
        "content": "<p>right, but injectivity in Lean means C x = C y -&gt; x = y</p>",
        "id": 207934807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342923
    },
    {
        "content": "<p>(I am trying to reason the opposite way in which I would normally, in this baby case!)</p>",
        "id": 207934808,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598342924
    },
    {
        "content": "<p>and there's only one C here</p>",
        "id": 207934820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342934
    },
    {
        "content": "<p>I'm trying to find the interface for C</p>",
        "id": 207934832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342945
    },
    {
        "content": "<p>found it</p>",
        "id": 207934852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342970
    },
    {
        "content": "<p>I found a random file in data/polynomial which mentioned C and then I right clicked on it and I'm now in <code>data.polynomial.monomial</code></p>",
        "id": 207934880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598342999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207934852\">said</a>:</p>\n<blockquote>\n<p>found it</p>\n</blockquote>\n<p>where?  how?</p>",
        "id": 207934882,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207934880\">said</a>:</p>\n<blockquote>\n<p>I found a random file in data/polynomial which mentioned C and then I right clicked on it and I'm now in <code>data.polynomial.monomial</code></p>\n</blockquote>\n<p>ok, thanks!</p>",
        "id": 207934929,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343011
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">-</span>\n<span class=\"cm\">`C a` is the constant polynomial `a`.</span>\n<span class=\"cm\">`C` is provided as a ring homomorphism.</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_algebra</span><span class=\"bp\">.</span><span class=\"n\">algebra_map&#39;</span> <span class=\"o\">(</span><span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">monomial_zero_left</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">C_0</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">single_zero</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">C_1</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 207934936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343021
    },
    {
        "content": "<p>I was looking for <code>C_zero</code> so now I see my mistake</p>",
        "id": 207934952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343035
    },
    {
        "content": "<p><code>convert C_0,</code></p>",
        "id": 207934963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343049
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∉</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span>\n<span class=\"err\">⊢</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 207934970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343056
    },
    {
        "content": "<p>and still <code>simp</code> doesn't do it :-/</p>",
        "id": 207934979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343071
    },
    {
        "content": "<p>the C disappeared!</p>",
        "id": 207934989,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343081
    },
    {
        "content": "<p><code>C_0</code> says <code>C 0 = 0</code></p>",
        "id": 207935006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343097
    },
    {
        "content": "<p>Yes, I had been able to understand this from what you copy-pasted!</p>",
        "id": 207935025,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343121
    },
    {
        "content": "<p>so I told Lean that this was equal to the goal and it figured that the input to C had better be zero so asked me to check</p>",
        "id": 207935064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343123
    },
    {
        "content": "<p>(I keep feeling like those people who needed the LMGTFY)</p>",
        "id": 207935120,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343179
    },
    {
        "content": "<p>So I know how to prove this by looking at the internals of <code>finsupp</code></p>",
        "id": 207935141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343201
    },
    {
        "content": "<p>I find that <code>finite</code> and its relatives should be avoided at all costs.  I do not know if it is an issue with <code>finite</code> being second-order or what, but I always have a hard time with that...</p>",
        "id": 207935213,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343262
    },
    {
        "content": "<p>The idea is that internally polynomials are represented as some function with finite support, and part of the definition of <code>finsupp</code> is a proof of the assertion that i is in the support iff g(i) is non-zero</p>",
        "id": 207935216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207935216\">said</a>:</p>\n<blockquote>\n<p>The idea is that internally polynomials are represented as some function with finite support, and part of the definition of <code>finsupp</code> is a proof of the assertion that i is in the support iff g(i) is non-zero</p>\n</blockquote>\n<p>I had carved this out from somewhere and I got annoyed by it: wouldn't it make more sense to simply know that it is a finite set and outside the coefficients are zero, without necessarily knowing that inside they are not?</p>",
        "id": 207935260,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343325
    },
    {
        "content": "<p>so this</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">unfold</span> <span class=\"n\">coeff</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_to_fun</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>finishes it in a rather inelegant way but I'm sure we can do better</p>",
        "id": 207935294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343362
    },
    {
        "content": "<p>anyway, you already told me not to worry about definitions...</p>",
        "id": 207935323,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343366
    },
    {
        "content": "<p>The issue is that <code>finsupp</code> is computable</p>",
        "id": 207935342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343383
    },
    {
        "content": "<p>I think the original statement you said you were after is already in mathllib, perhaps. I remember seeing something very similar recently. Have you looked in <code>ring_theory.polynomial</code>?</p>",
        "id": 207935369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1598343422
    },
    {
        "content": "<p>so internally a polynomial over R is actually defined as (a) the function from {1,X,X^2,...} to R, (b) a finite subset of {1,X,X^2,...} and (c) a proof that the function is non-zero precisely on the finite subset</p>",
        "id": 207935381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <code>ring_theory.polynomial</code> is now four files I don't know my way around</p>",
        "id": 207935412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343477
    },
    {
        "content": "<p>Is the empty set <code>finite</code>?  I think that I saw that something is finite and non-empty...</p>",
        "id": 207935451,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343483
    },
    {
        "content": "<p>yes the empty set is finite</p>",
        "id": 207935467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343494
    },
    {
        "content": "<p>ok, at some point I was asked by Lean to show that the support of a polynomial was not finite, or so I thought</p>",
        "id": 207935489,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343517
    },
    {
        "content": "<p>So currently the second proof looks like</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">zero_mul</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">C_0</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">coeff</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_to_fun</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 207935513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343549
    },
    {
        "content": "<p>but I'd rather change those last three lines into something nicer where I don't have to break the interface and start going on about <code>finsupp</code></p>",
        "id": 207935535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343571
    },
    {
        "content": "<p>Anyway, I am so grateful for going though this proof!  Honestly, I would not have learned as much from simply finding a reference to a mathlib proof</p>",
        "id": 207935547,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343577
    },
    {
        "content": "<p>Let's take a look at the interface for <code>coeff</code> -- you can find it by right clicking on the <code>coeff</code> in the lemma we're proving</p>",
        "id": 207935628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343624
    },
    {
        "content": "<p>yeah I can't find it. I want <code>i \\in f.support \\iff f.coeff i \\ne 0</code> and/or <code>\\not (i \\in f.support) \\iff f.coeff i = 0</code></p>",
        "id": 207935774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343744
    },
    {
        "content": "<p>Maybe you're not supposed to use <code>support</code> of a polynomial?</p>",
        "id": 207935835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343788
    },
    {
        "content": "<p>I'd be happy to avoid it!  In fact, most of the time, I would be happy with the universal property of polynomial rings!</p>",
        "id": 207935852,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343818
    },
    {
        "content": "<p>I think you can get simp to do what you want  at the end with <code>simpa using h</code> (I remember also being upset that <code>simp</code> didn't solve this for me even though it felt like it should, but I think that worked.)</p>",
        "id": 207935858,
        "sender_full_name": "Devon Tuma",
        "timestamp": 1598343826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319772\">Devon Tuma</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207935858\">said</a>:</p>\n<blockquote>\n<p>I think you can get simp to do what you want  at the end with <code>simpa using h</code> (I remember also being upset that <code>simp</code> didn't solve this for me even though it felt like it should, but I think that worked.)</p>\n</blockquote>\n<p>I tried it and it worked for me!</p>",
        "id": 207935929,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343867
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finc</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">,</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">as_sum</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">sum_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">zero_mul</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">C_0</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207935932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343869
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 207935933,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343870
    },
    {
        "content": "<p>I see. I was trying <code>simp [h]</code> which didn't work.</p>",
        "id": 207935986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343936
    },
    {
        "content": "<p>But </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n\n<p>works, so <code>simpa using h</code> works</p>",
        "id": 207935995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343949
    },
    {
        "content": "<p>what does <code>simp</code> do?</p>",
        "id": 207935997,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598343956
    },
    {
        "content": "<p>Damiano -- the issue was that I needed to run the simplifier on h as well as the goal</p>",
        "id": 207936035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343963
    },
    {
        "content": "<p>The simplifier is a rewriting system.</p>",
        "id": 207936050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598343976
    },
    {
        "content": "<p>If the simplifier knows that <code>A = B</code> and <code>f = g</code> it will be able to prove things like <code>f(A) = g(B)</code></p>",
        "id": 207936071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344000
    },
    {
        "content": "<p>ok, i guess this explains why often i prove a hypothesis, i <code>rw</code> with it and then <code>simp</code> does more</p>",
        "id": 207936075,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598344003
    },
    {
        "content": "<p><code>=</code> is not symmetric in Lean!</p>",
        "id": 207936089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344035
    },
    {
        "content": "<p>If you look at a simp lemma like <code>zero_mul</code>, it says <code>0 * x = 0</code> but it is not a coincidence that the left hand side of the equality is more complex than the right hand side</p>",
        "id": 207936123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344066
    },
    {
        "content": "<p>the written language of Lean is relatively straightforward to parse, but the various implications are very subtle, for me</p>",
        "id": 207936133,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598344080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207936089\">said</a>:</p>\n<blockquote>\n<p><code>=</code> is not symmetric in Lean!</p>\n</blockquote>\n<p><code>=</code> is not <em>definitionaly</em> symmetric in Lean!</p>",
        "id": 207936174,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598344084
    },
    {
        "content": "<p>The simplifier will try and replace the left hand side of a simp lemma with the right hand side, so it's important that the more complicated side is the left hand side.</p>",
        "id": 207936204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344114
    },
    {
        "content": "<p>Patrick is explaining what I'm saying in a much better way :-)</p>",
        "id": 207936208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344124
    },
    {
        "content": "<p>Damiano, it's subtle for everyone. Even seasoned users sometimes get caught.</p>",
        "id": 207936218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598344139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207936089\">said</a>:</p>\n<blockquote>\n<p><code>=</code> is not symmetric in Lean!</p>\n</blockquote>\n<p>I have learned the functions <code>symmetry</code> and <code>symmetry'</code> because of this...</p>",
        "id": 207936226,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598344148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207936218\">said</a>:</p>\n<blockquote>\n<p>Damiano, it's subtle for everyone. Even seasoned users sometimes get caught.</p>\n</blockquote>\n<p>Strangely, this comment makes me hopeful!</p>",
        "id": 207936255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598344171
    },
    {
        "content": "<p>That first subproof can be rewritten like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 207936543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344396
    },
    {
        "content": "<p>all this <code>refine</code> and <code>apply</code> is just function application</p>",
        "id": 207936558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344415
    },
    {
        "content": "<p>It's important to write it this way because then new users won't be able to understand what the heck is going on.</p>",
        "id": 207936574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344434
    },
    {
        "content": "<p>We need to cover our tracks to make sure that this stuff doesn't get big</p>",
        "id": 207936623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344445
    },
    {
        "content": "<p>I am really hoping that you will not edit your answers in this thread!  I am planning of going over the whole reasoning a couple of times, still!   Ahahaha</p>",
        "id": 207936734,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598344554
    },
    {
        "content": "<p>I always wanted <code>simp</code> to do the second subgoal, but it kept not doing it (I would try every time I did another <code>convert</code>). Devon pointed out the issue -- <code>simp</code> couldn't deal with <code>h</code> as it stood, I needed to use the simplifier on <code>h</code> as well.</p>",
        "id": 207936790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344578
    },
    {
        "content": "<p>But if you do this at the beginning then the simplifier can do the rest:</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]}</span>\n</code></pre></div>",
        "id": 207936819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344607
    },
    {
        "content": "<p>This proof is much more like a mathematician's proof now -- \"the coefficient c of X^i is zero so c*X^i is clearly in this ideal, whatever the ideal is\"</p>",
        "id": 207936867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344647
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">finc</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">,</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">as_sum</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">sum_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This is looking more like a mathlibby proof now</p>",
        "id": 207936952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> the thing which I didn't understand for the longest time is what to expect from the library.</p>",
        "id": 207936997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344757
    },
    {
        "content": "<p>You might think \"my lemma is obvious, so probably it should be in the library\". That's not now it works at all.</p>",
        "id": 207937012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344777
    },
    {
        "content": "<p>The library mostly contains \"single-step\" proofs, for example \"0 \\in J\", or \"if all the a_i are in J, then their sum is\"</p>",
        "id": 207937075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207937012\">said</a>:</p>\n<blockquote>\n<p>You might think \"my lemma is obvious, so probably it should be in the library\". That's not now it works at all.</p>\n</blockquote>\n<p>Indeed, I do feel that this should be the purpose of the library.  I also still have trouble navigating the files and finding what really is in the library and what is not</p>",
        "id": 207937088,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598344834
    },
    {
        "content": "<p>Right. But there's a secret here.</p>",
        "id": 207937105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344849
    },
    {
        "content": "<p>Will you write the secret?  Should I take a picture of the screen, before it self-destructs?</p>",
        "id": 207937142,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598344886
    },
    {
        "content": "<p>most of the library is single-step lemmas, but conversely the mathlib philosophy is to make libraries as complete as possible, so the converse should also be true: any single-step lemma should be in the library somewhere</p>",
        "id": 207937161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344900
    },
    {
        "content": "<p>Furthermore, you can probably guess its name</p>",
        "id": 207937178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344911
    },
    {
        "content": "<p>(so far, my way of searching the library has been using <code>grep</code> from the command line)</p>",
        "id": 207937184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598344915
    },
    {
        "content": "<p>The way to search in the library is to learn the naming conventions and to use ctrl-space</p>",
        "id": 207937241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344936
    },
    {
        "content": "<p>ok</p>",
        "id": 207937249,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598344943
    },
    {
        "content": "<p>I didn't know <code>as_sum</code> and I am unfamiliar with the polynomial library now because Jalex and others made a major refactor of it recently <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 207937289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598344975
    },
    {
        "content": "<p>but things like <code>submodule.sum_mem</code>, i found that lemma because I knew that that's what it would be called and I knew it would be there.</p>",
        "id": 207937337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345007
    },
    {
        "content": "<p>and similarly <code>submodule.smul_mem</code> and <code>submodule.subset_span</code></p>",
        "id": 207937365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345030
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>⊆</mo><mi>s</mi><mi>p</mi><mi>a</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X\\subseteq span(X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> is going to be called <code>subset_span</code></p>",
        "id": 207937424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345048
    },
    {
        "content": "<p>yes, I definitely need to develop a feeling for what to expect to be in the library</p>",
        "id": 207937434,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598345054
    },
    {
        "content": "<p>Every one-step lemma is there, and it is named appropriately. And if you find one that isn't, you should add it.</p>",
        "id": 207937463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345078
    },
    {
        "content": "<p>so then it's just a case of breaking everything down into these one-step lemmas, and then slowly over time you learn shortcuts, because for example there are some much more complex lemmas in there too</p>",
        "id": 207937508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345122
    },
    {
        "content": "<p>(Sometimes something that works is writing the lemma statement that you think should exist as an <code>example</code> then using <code>library_search</code> or <code>library_search!</code>, but you have to know what to expect and to have the correct imports.  If it's not there, then I suppose you just need to fill in the proof then submit a PR.)</p>",
        "id": 207937512,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598345124
    },
    {
        "content": "<p>I see</p>",
        "id": 207937565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598345163
    },
    {
        "content": "<p>These discussions give names to concepts that my mind had not yet formed</p>",
        "id": 207937678,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598345240
    },
    {
        "content": "<p>Another trick I use is to try to write the <code>example</code> in a way that things should simplify in the way I want, then I apply <code>simp</code>.  If it worked, then replacing <code>simp</code> with <code>squeeze_simp</code> gives you the list of lemmas it used.</p>",
        "id": 207937741,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598345289
    },
    {
        "content": "<p>(And, I don't actually always use an <code>example</code> block.  Most of the time I use a <code>have</code> expression in the middle of a tactic proof.)</p>",
        "id": 207937799,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598345345
    },
    {
        "content": "<p>Ok, I had been using <code>have</code>s quite a bit, but I will now use them with a better awareness!</p>",
        "id": 207937893,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598345406
    },
    {
        "content": "<p>I've been going to CS conferences and I've met a whole bunch of people who are very interested in various proof styles, and sometimes ask me questions about various proof styles and I can never answer them because I don't have a clue about any of the definitions. Maybe there are \"ISAR-style proofs\" and some other style invented by Lamport and I can't even remember the other ones, but they seem to be just high-level terms for whether you put a lot of haves or not. Oh -- \"declarative style\", I think that's one.</p>",
        "id": 207938112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345637
    },
    {
        "content": "<p>But somehow their questions are all about either which style I prefer, or which style is more readable, or something, and I never have a clue, because I don't try to make my proof code readable, I just add comments instead</p>",
        "id": 207938187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345695
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">finc</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">tt</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">,</span><span class=\"n\">tt</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- rewrite f as ∑ a_i X^i, where `a_i = coeff f i`</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">as_sum</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- a finite sum of elements is in an ideal if all the elements are</span>\n  <span class=\"n\">refine</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">sum_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- so let&#39;s check a_i X^i is in the ideal</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- two cases: either a_i = 0 or not</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- if it is, then a_i is one of the generators of the ideal and it&#39;s obvious</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- if it&#39;s not then a_i = 0 and it&#39;s also obvious</span>\n    <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">]}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207938342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345836
    },
    {
        "content": "<p>and then they complain about something to do with semantics</p>",
        "id": 207938356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345852
    },
    {
        "content": "<p>how now if you change the proof you have to change the comments independently</p>",
        "id": 207938371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345868
    },
    {
        "content": "<p>but I have long stopped caring because all I care about is proving the theorem.</p>",
        "id": 207938427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598345884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207938187\">said</a>:</p>\n<blockquote>\n<p>I don't try to make my proof code readable, I just add comments instead</p>\n</blockquote>\n<p>I think this shows that tactic proofs are the assembly language of math.  I'm looking forward to whatever high-level languages we might come up with down the road, where your comments are part of the machine-readable proof.</p>",
        "id": 207938450,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598345907
    },
    {
        "content": "<p>Though, at least with assembly language, you could actually have a hope of reading through it without comments and figuring out what it's doing...</p>\n<p>This isn't completely fair of a comparison, because the symbolic manipulations tactic proofs are doing can be well beyond what you'd want to go through by hand.</p>",
        "id": 207938654,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346077
    },
    {
        "content": "<p>never going to happen... you will always have to contort yourself a bit to express your intent to a computer. Comments are for humans, code is for computers. You can do okay at both simultaneously but you will never be optimal for both</p>",
        "id": 207938660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346083
    },
    {
        "content": "<p>tactic proofs are for sure better than assembly</p>",
        "id": 207938698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346115
    },
    {
        "content": "<p>they are high level language proofs, just not natural language</p>",
        "id": 207938769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346141
    },
    {
        "content": "<p>What you are missing is that a tactic proof is one half of a conversation</p>",
        "id": 207938826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346198
    },
    {
        "content": "<p>I don't really accept most tactic proofs as being proofs.   Most are merely monadic programs that construct proof terms.  (And most proof terms I wouldn't consider to be proofs.  I accept the truth of what they say, but they aren't proofs.)</p>",
        "id": 207938867,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346223
    },
    {
        "content": "<p>they are not intended to be understood without context</p>",
        "id": 207938877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346227
    },
    {
        "content": "<p>I'm not missing that; I think this is a weakness, since you cannot read the source code without a mechanical tool on hand.</p>",
        "id": 207938984,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346264
    },
    {
        "content": "<p>you can inline the context</p>",
        "id": 207939004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346278
    },
    {
        "content": "<p>that's a mere presentation issue</p>",
        "id": 207939017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346287
    },
    {
        "content": "<p>That would be a comment, right?</p>",
        "id": 207939026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346291
    },
    {
        "content": "<p>no, it can be formally checked if you like</p>",
        "id": 207939046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346305
    },
    {
        "content": "<p>I agree they aren't proofs but maybe for a different reason. They are proof scripts, programs that build actual proofs (and maybe don't show them to you)</p>",
        "id": 207939141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346372
    },
    {
        "content": "<p>What I'm saying is that these proof scripts should, eventually, become a higher level language where you can figure out what it's doing easier without needing a computer aid</p>",
        "id": 207939308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346523
    },
    {
        "content": "<p>I'm not saying comments will go away completely.  The point is that, if you need lots of comments, it probably reflects a failure of the language</p>",
        "id": 207939338,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346546
    },
    {
        "content": "<p>that there are higher-order structures still on the table to exploit</p>",
        "id": 207939348,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346560
    },
    {
        "content": "<p>more layers just means more to understand. I don't buy it</p>",
        "id": 207939497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346665
    },
    {
        "content": "<p>This is something I was thinking about with the <code>induction</code> tactic.  It really should just work, because it is a signpost that a particular moment in the argument has come.  Using <code>refine</code> works, but it requires some boilerplate that obscures the point.  (Though, when you use it enough, it becomes a pattern you recognize and it gains meaning.)</p>",
        "id": 207939502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346669
    },
    {
        "content": "<p>I'm not sure what you mean. <code>induction</code> does a thing and does it pretty well</p>",
        "id": 207939579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346732
    },
    {
        "content": "<p>I'm not proposing more layers.  I think we just haven't seen everything we can do with tactic scripts, though I'm not sure what that might be yet.</p>",
        "id": 207939580,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346733
    },
    {
        "content": "<p>I think we have seen a lot of quality of life tactics arise over the years</p>",
        "id": 207939612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346774
    },
    {
        "content": "<p>once you identify a pattern, you can automate it away</p>",
        "id": 207939643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346804
    },
    {
        "content": "<p>but you can't automate it until then</p>",
        "id": 207939661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/polynomial.20in.20span.20of.20coefficients/near/207939579\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what you mean. <code>induction</code> does a thing and does it pretty well</p>\n</blockquote>\n<p>Not with user-defined recursors, which define what I'd want out of induction on particular terms.</p>",
        "id": 207939672,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346827
    },
    {
        "content": "<p>that's just an outstanding bug though</p>",
        "id": 207939686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346839
    },
    {
        "content": "<p>I don't think that says much about the scheme</p>",
        "id": 207939746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346863
    },
    {
        "content": "<p>induction is in core so it's been frozen with buggy behavior for a long time. People just don't use it</p>",
        "id": 207939803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346905
    },
    {
        "content": "<p>if you pretend it doesn't exist you will be happier</p>",
        "id": 207939817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598346918
    },
    {
        "content": "<p>It's clear tactics are very powerful and extensible, but do you think that 20-30 years from now this will still be the dominant way of writing proofs?</p>",
        "id": 207939886,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598346972
    },
    {
        "content": "<p>tactics are programs. Do I think we will be using programs? of course</p>",
        "id": 207939906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347001
    },
    {
        "content": "<p>Do I think they will go in begin end blocks? not so important</p>",
        "id": 207939917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347023
    },
    {
        "content": "<p>Tactics are a language for programs.  We've changed how we program quite a lot since the early days.</p>",
        "id": 207939921,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598347026
    },
    {
        "content": "<p>the language will change for sure</p>",
        "id": 207939929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347035
    },
    {
        "content": "<p>Like, I don't mean just syntax.  Structured programming is one example of a paradigm that didn't exist early on.</p>",
        "id": 207939947,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598347060
    },
    {
        "content": "<p>it adapts to the local needs of the users</p>",
        "id": 207939952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347071
    },
    {
        "content": "<p>I don't think tactic proofs are the best way to present proofs by a long shot. They are optimized for writing, not reading</p>",
        "id": 207940106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347174
    },
    {
        "content": "<p>So, can you have something that's like a tactic proof, still easy to write, but you can actually read it?  I suspect someone will stumble upon some way to make this work, eventually.</p>",
        "id": 207940184,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598347228
    },
    {
        "content": "<p>The style I like is similar to what you find in metamath: a series of steps where you have full context at all times and you can drill down as far as you like</p>",
        "id": 207940230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347290
    },
    {
        "content": "<p>The <code>#explode</code> tactic is a way of showing that style of proof for lean proofs but lean tactics are not optimized for that and so they tend to generate garbage terms</p>",
        "id": 207940315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347350
    },
    {
        "content": "<p>Someone might find other ways of organizing the construction of the proof terms beyond tactic mode's changing contexts in sequence, for example.</p>",
        "id": 207940320,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598347358
    },
    {
        "content": "<p>It is possible to present it more like a computer program with scoping to cut down on repeated infomation, but that's just a proof term, which are actually quite hard to follow if you are not a typechecker</p>",
        "id": 207940427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347445
    },
    {
        "content": "<p>I think it's much easier to read if you just cut out all the proof terms and leave only the types</p>",
        "id": 207940463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347481
    },
    {
        "content": "<p>(It looks like <code>#explode</code> is showing each term in the first column, its type in the last, its constructor in the third, and the constructor's arguments in the second? That's a reasonably nice way of showing a memory dump, basically, of a term.)</p>",
        "id": 207940768,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598347718
    },
    {
        "content": "<p>it's supposed to look like a fitch style natural deduction proof</p>",
        "id": 207940910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347833
    },
    {
        "content": "<p>it generally produces best results on basic logic proofs</p>",
        "id": 207940928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347857
    },
    {
        "content": "<p>when you pick a random mathib theorem all the <code>simp</code>s and <code>linarith</code>s are going to produce a heap of garbage</p>",
        "id": 207940954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347889
    },
    {
        "content": "<p>also now that html views are a thing <code>#explode</code> can make much better output now</p>",
        "id": 207941090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598347996
    },
    {
        "content": "<p>The hard part with proofs in this style is controlling the overload of information. That's lamport's \"structured proof\". Ideally this should also be automated, but you somehow need to analyze the proof to determine what is important and skip the boring stuff, but with the means to dig down when the reader isn't convinced</p>",
        "id": 207941274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598348150
    },
    {
        "content": "<p>Tactic proofs are at one level of abstraction, which is probably good for the original author but may be too detailed for some (perhaps most) mathematicians, and not detailed enough for introductory students and people like me who want to get to the bottom of things</p>",
        "id": 207941468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598348285
    }
]