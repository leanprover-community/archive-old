[
    {
        "content": "<p>In TPiL chapter 7, they introduce <code>calc</code> proofs for <code>zero_add</code>, <code>add_assoc</code> and <code>add_comm</code>, then reduce each to a single line using <code>simp</code>.</p>\n<p>I defined my own multiplication this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">mult_m_n</span><span class=\"o\">,</span> <span class=\"n\">mult_m_n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And can prove right distributivity this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">nat.add_assoc</span> <span class=\"n\">nat.add_comm</span> <span class=\"n\">nat.add_left_comm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">distrib_right</span> <span class=\"o\">:</span> <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">mult</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n    <span class=\"n\">nat.rec_on</span> <span class=\"n\">k</span>\n      <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">mult</span> <span class=\"n\">m</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n        <span class=\"k\">calc</span>\n          <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k.succ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span>\n                       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span>  <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">ih</span>\n                       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">mult</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n                       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"n\">k.succ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">mult</span> <span class=\"n\">m</span> <span class=\"n\">k.succ</span> <span class=\"o\">:</span> <span class=\"n\">rfl</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>But when I try to reduce it to a single line, I just get \"simp failed\" with no details:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">distrib_right'</span> <span class=\"o\">:</span> <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">mult</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n    <span class=\"n\">nat.rec_on</span> <span class=\"n\">k</span>\n      <span class=\"n\">rfl</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_left_comm</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Can we get the single line version working?  Also, how can I get more information when <code>simp</code> fails, to debug things like this?</p>",
        "id": 291036914,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1658930188
    },
    {
        "content": "<p>This one also fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mul_one'</span> <span class=\"o\">:</span> <span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat.zero_add</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 291040042,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1658931125
    },
    {
        "content": "<p>It looks like I can't rely on <code>simp</code> to apply my definition of <code>mult</code>, as <code>rfl</code> does?</p>",
        "id": 291053796,
        "sender_full_name": "Martin C. Martin",
        "timestamp": 1658934799
    },
    {
        "content": "<p>Yes, you'll certainly have to pass <code>mult</code> to <code>simp</code>.</p>",
        "id": 291054066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658934934
    },
    {
        "content": "<p>You can also use the <code>!</code> flag for simp (so use <code>simp!</code>) to do definition expansion for all definitions (edit: but that doesn't seem to work here)</p>",
        "id": 291055793,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658935649
    },
    {
        "content": "<p>One issue with <code>distrib_right</code> is that <code>ih</code> is not in the right form to be applied. Here's a rough fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">distrib_right'</span> <span class=\"o\">:</span> <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">mult</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n    <span class=\"n\">nat.rec_on</span> <span class=\"n\">k</span>\n      <span class=\"n\">rfl</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mult</span><span class=\"o\">,</span> <span class=\"n\">nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_left_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mult</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_left_comm</span><span class=\"o\">],</span>\n      <span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291056244,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658935802
    },
    {
        "content": "<p>Generally in Lean you write recursive definitions using the so-called \"equation compiler\" rather than using recursors directly. That generates additional simplification lemmas that the <code>!</code> flag has access to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">distrib_right'</span> <span class=\"o\">:</span> <span class=\"n\">mult</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">mult</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">mult</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n    <span class=\"n\">nat.rec_on</span> <span class=\"n\">k</span>\n      <span class=\"n\">rfl</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">nat.add_assoc</span><span class=\"o\">,</span> <span class=\"n\">nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat.add_left_comm</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 291056608,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658935926
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">they_are_equal</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mult</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">mult_m_n</span><span class=\"o\">,</span> <span class=\"n\">mult_m_n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">!</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(The equation compiler's encoding isn't definitionally equal.)</p>",
        "id": 291056842,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658936021
    }
]