[
    {
        "content": "<p>I want to define local helper functions; I can use <code>let</code> for this, but it doesn't allow recursive definitions. what's the best way to do this? I can of course define separate functions, but then they end up having more arguments than they would if they were local... thanks for the help!</p>",
        "id": 167721020,
        "sender_full_name": "bruno cuconato",
        "timestamp": 1560121637
    },
    {
        "content": "<p>there is this where, for mutual inductive types <br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#mutual-and-nested-inductive-types</a></p>",
        "id": 167721159,
        "sender_full_name": "matt rice",
        "timestamp": 1560121868
    },
    {
        "content": "<p>thanks for the pointer, matt! this will do, but I don't like it as much because:</p>\n<ul>\n<li>the syntax is pretty heavy</li>\n<li>in the case of even/odd definitions this works well, but this syntax obfuscates the fact that one of the functions is the main one, and the other is simply a helper</li>\n</ul>",
        "id": 167721680,
        "sender_full_name": "bruno cuconato",
        "timestamp": 1560122697
    },
    {
        "content": "<p>No, you can't do this in lean 3, except via hackery</p>",
        "id": 167721758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560122861
    },
    {
        "content": "<p>You have to define an auxiliary function if you have a nested recursion</p>",
        "id": 167721805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560122889
    },
    {
        "content": "<p>if you search for <code>_aux</code> in mathlib you will find plenty of examples</p>",
        "id": 167721810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560122919
    },
    {
        "content": "<p>Mutual inductive types aren't the same</p>",
        "id": 167721823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560122971
    },
    {
        "content": "<p>here's some hackery:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">_</span><span class=\"n\">match</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">::</span><span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"kn\">end</span>\n<span class=\"k\">in</span> <span class=\"n\">aux</span> <span class=\"o\">[]</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">reverse</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 167721947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1560123148
    },
    {
        "content": "<p>why not use the recursor instead?</p>",
        "id": 167722558,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560124208
    },
    {
        "content": "<p>thanks for the definitive answer, Mario! I actually need the auxiliary function to be able to call the main one, so I thought the mutual inductive types would fit; I'll experiment with this, since <code>let</code> didn't seem to cut it for me</p>\n<p>Kenny, do you have a link for documentation on those?</p>",
        "id": 167726091,
        "sender_full_name": "bruno cuconato",
        "timestamp": 1560130378
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html?highlight=recursor#enumerated-types\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html?highlight=recursor#enumerated-types\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html?highlight=recursor#enumerated-types</a></p>",
        "id": 167726161,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1560130454
    }
]