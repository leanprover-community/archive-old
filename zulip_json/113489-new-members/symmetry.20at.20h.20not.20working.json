[
    {
        "content": "<p>I'm going through the complex number game and, for whatever reason, \"symmetry at h\" never works for me. I've found workarounds for it but I finally got stuck on a lemma without it and I don't know what's wrong with it. Could I just be on a version that doesn't allow symmetry on a hypothesis? I'm on version 3.13.2</p>",
        "id": 199228126,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590798501
    },
    {
        "content": "<p>I think you have to write <code>symmetry' at h</code>. Looks like there's a gap in our tactic docs...</p>",
        "id": 199228298,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590798720
    },
    {
        "content": "<p>FYI you can always work around it with <code>have h := h.symm</code></p>",
        "id": 199228595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590799039
    },
    {
        "content": "<p>or generally use <code>h.symm</code> or <code>&lt;- h</code> where you would have used <code>h</code></p>",
        "id": 199228671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590799120
    },
    {
        "content": "<p>symmetry' worked!! Thank you :)</p>",
        "id": 199228842,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590799341
    },
    {
        "content": "<p>And good to know</p>",
        "id": 199228852,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1590799365
    },
    {
        "content": "<p>Sorry, I think I made symmetry work in the natural number game by hackery, expecting lean to catch up some day...</p>",
        "id": 199242041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590820677
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">symmetry</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n   <span class=\"c1\">--refl,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I expected <code>symmetry at g</code> to change<code> g</code> to <code>g : 2=1</code>, but it gives me the error message <code>invalid 'begin-end' expression, ',' expected</code>. Why is that?</p>",
        "id": 240579320,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622193277
    },
    {
        "content": "<p><code>symmetry' at ...</code> might work</p>",
        "id": 240579470,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622193392
    },
    {
        "content": "<p>I found the chat history for this problem... I see what I should use (although I can't understand why <code>symmetry</code> and <code>symmetry'</code> are not combined).</p>",
        "id": 240579647,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1622193517
    },
    {
        "content": "<p>Hmm, why isn't <code>symmetry'</code> listed at <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a> ?</p>",
        "id": 240579704,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1622193563
    },
    {
        "content": "<p>This is probably my fault -- IIRC I hacked the Lean <code>symmetry</code> tactic so it worked like this in NNG. I would be happy for <code>symmetry'</code> to become <code>symmetry</code>, I think this was the plan.</p>",
        "id": 240579904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622193688
    }
]