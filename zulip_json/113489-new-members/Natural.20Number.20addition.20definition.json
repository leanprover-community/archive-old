[
    {
        "content": "<p>Hi everyone, </p>\n<p>I have defined a algebraic structure (monoid), and I want make my custom natural number and addition as a instance of monoid. However, my addition function definition is giving this error : equation compiler failed (use 'set_option trace.eqn_compiler.elim_match true' for additional details). <a href=\"/user_uploads/3121/USwNzmbjUBg8Apd8AmLz9bHS/algebraic.lean\" target=\"_blank\" title=\"algebraic.lean\">algebraic.lean</a></p>",
        "id": 191339898,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584787858
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>namespace Structures\n\nstructure monoid {A : Type} (f : A → A → A) (e : A) :=\n(Hassoc : ∀ a b c : A, f (f a b) c = f a (f b c))\n(Hidl : ∀ a : A, f e a = a)\n(Hidr : ∀ a : A, f a e = a)\n\n\n/- Proofs about monoid -/\n\n\n/- end proof of monoid -/\nend Structures\n\nnamespace mynat\n\ninductive nat : Type\n| Z : nat\n| S : nat → nat\n\nopen nat\ndef add : nat -&gt; nat -&gt; nat\n| Z n := n\n| (S m) n := S (add m n)\n\nend mynat\n\nnamespace mylist\n\ninductive list (A : Type) :  Type\n| Nil {} : list\n| Cons : A -&gt; list -&gt; list\n\ndef append {A : Type} : list A → list A → list A\n| Nil l := l\n| (Cons x xs) l := Cons x (append xs l)\n\n\nend mylist\n#check mylist.list.Nil\n#check (mylist.list.Cons mynat.nat.Z mylist.list.Nil)\n</pre></div>",
        "id": 191339956,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584787924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">custom</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">monoid</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Hassoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">Hidl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hidr</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">mynat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">→</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mynat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mynat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">mynat</span>\n<span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">monoid</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">add</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Hassoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">Hidl</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">Hidr</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mynat</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">custom</span>\n</pre></div>",
        "id": 191340114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584788221
    },
    {
        "content": "<p>I didn't test the code, but I think you want something like that <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 191340120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584788242
    },
    {
        "content": "<p>Pro-tip: with</p>\n<div class=\"codehilite\"><pre><span></span>```lean\ncode goes here\n```\n</pre></div>\n\n\n<p>you get pretty syntax highlighting</p>",
        "id": 191340129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584788266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thanks for the answer, but I still did not understand the problem in my code.  I see that you created a top level namespace custom, then defined monoid and mynat (while I closed the namespace after monoid definition and created a new namespace). Anyway, I would like to know what is wrong with my structuring?</p>",
        "id": 191340495,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584788768
    },
    {
        "content": "<p>Sorry, need to run to prepare some lunch for my kids.</p>",
        "id": 191340539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584788836
    },
    {
        "content": "<p>No worries.</p>",
        "id": 191340615,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584788969
    },
    {
        "content": "<p>Quick answer: my guess is that maybe your code got confused with the <code>nat</code> that already exists. That's why I renamed everything to <code>mynat</code> in your code.</p>",
        "id": 191341293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584790138
    },
    {
        "content": "<p>But I don't know of that is actually what went wrong.</p>",
        "id": 191341302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584790155
    },
    {
        "content": "<p>I figured it out. I don't know why 'open nat' is not working, so I replace every Z with nat.Z and S with nat.S in add, and type checker is happy.</p>",
        "id": 191341450,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584790386
    },
    {
        "content": "<p>Also, when I need to change structure to class (I don't know why) to make type checker happy because it was complaining that 'Structures.monoid' is not a class</p>",
        "id": 191341503,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584790462
    },
    {
        "content": "<p><code>open nat</code> only gives access to stuff defined before that command.</p>",
        "id": 191341908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584791158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239476\">Mukesh Tiwari</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Number.20addition.20definition/near/191341503\" title=\"#narrow/stream/113489-new-members/topic/Natural.20Number.20addition.20definition/near/191341503\">said</a>:</p>\n<blockquote>\n<p>Also, when I need to change structure to class (I don't know why) to make type checker happy because it was complaining that 'Structures.monoid' is not a class</p>\n</blockquote>\n<p>We need more code to help you here, although we can guess you tried to use square brackets around a structure argument (which is absurd).</p>",
        "id": 191341975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584791225
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>namespace AlgebraicStructures\n\n\nclass monoid {A : Type} (e : A) (f : A → A → A)  :=\n(Hassoc : ∀ a b c : A, f a (f b c) = f (f a b) c)\n(Hidl : ∀ a : A, f e a = a)\n(Hidr : ∀ a : A, f a e = a)\n\n\nclass group {A : Type} (e : A) (f : A → A → A) (inv : A → A) :=\n (Hmon : @monoid A e f)\n (Hinvl : ∀ x, f (inv x) x = e)\n (Hinvr : ∀ x, f x (inv x) = e)\n\n\nend AlgebraicStructures\n\nnamespace mynat\n\ninductive nat : Type\n| Z : nat\n| S : nat → nat\n\n\ndef add : nat -&gt; nat -&gt; nat\n| nat.Z n := n\n| (nat.S m) n := nat.S (add m n)\n\ntheorem add_zerol : ∀ (n : nat), add nat.Z n = n :=\nbegin\n  intro n, trivial\nend\n\ntheorem add_zeror : ∀ (n : nat), add n nat.Z = n :=\nbegin\n intro n, induction n,\n trivial,\n sorry\nend\n\ntheorem add_assoc : ∀ n m r : nat, add n (add m r) = add (add n m) r :=\nsorry\n\n\ninstance monoid : AlgebraicStructures.monoid nat.Z add :=\n{\n  Hassoc := add_assoc,\n  Hidl := add_zerol,\n  Hidr := add_zeror\n}\n\n\n\nend mynat\n</pre></div>\n\n\n<p>Changing class monoid to structure monoid makes typechecker unhappy about the 'instance monoid : : AlgebraicStructures.monoid nat.Z add'.</p>",
        "id": 191342176,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584791597
    },
    {
        "content": "<p>Ok, this is even worse than what I expected.</p>",
        "id": 191342229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584791679
    },
    {
        "content": "<p>But don't worry, you'll be fine. What do you think <code>instance</code> means?</p>",
        "id": 191342239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584791703
    },
    {
        "content": "<p>I understand that it is a way to generate a concrete instance of some abstract structure (but my understanding is very much influenced by Haskell, so pardon me for my stupidity)</p>",
        "id": 191342518,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584792210
    },
    {
        "content": "<p>No, they declare instances (concrete or not) of <em>classes</em>. There is no stupidity issue here. Everybody is welcome to learn. The standard reference here is <a href=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/type_classes.html\">https://leanprover.github.io/theorem_proving_in_lean/type_classes.html</a></p>",
        "id": 191342900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584792910
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> .  I will have a more careful look at the tutorial.</p>",
        "id": 191342970,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584793065
    },
    {
        "content": "<p>Also if you don't mind, then can you post your version of my code?</p>",
        "id": 191343030,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584793196
    },
    {
        "content": "<p>I don't know what you expect from \"my version\". Did you look at how it's done in the standard library? The differences are pretty visible.</p>",
        "id": 191343939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584794541
    },
    {
        "content": "<p>About building algebraic hierarchy, the <a href=\"https://arxiv.org/abs/1910.09336\" target=\"_blank\" title=\"https://arxiv.org/abs/1910.09336\">mathlib paper</a> has explanation, and even the more recent <a href=\"https://lean-forward.github.io/mathlib-maintenance/paper.pdf\" target=\"_blank\" title=\"https://lean-forward.github.io/mathlib-maintenance/paper.pdf\">maintenance paper</a> has relevant bits.</p>",
        "id": 191344018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584794654
    },
    {
        "content": "<p>What's the question here? <code>instance</code> makes terms of classes, and if you change the class to a structure you get an error saying it's not a class, so as far as I can see everything is consistent.</p>",
        "id": 191344200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584794968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/Natural.20Number.20addition.20definition/near/191342229\" title=\"#narrow/stream/113489-new-members/topic/Natural.20Number.20addition.20definition/near/191342229\">said</a>:</p>\n<blockquote>\n<p>Ok, this is even worse than what I expected.</p>\n</blockquote>\n<p>Based on your response, I thought I have deviated horribly from idiomatic Lean way; hence the reason for asking about your version.</p>",
        "id": 191344429,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584795414
    },
    {
        "content": "<p>Oh yes you did that too :-)</p>",
        "id": 191344436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  and now I am curious :) (care to rewrite it if you have time).</p>",
        "id": 191344482,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584795518
    },
    {
        "content": "<p>In idiomatic Lean we use notation for the identity and multiplication, rather than letting <code>monoid</code> take these functions as input.</p>",
        "id": 191344484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795531
    },
    {
        "content": "<p>The way it's set up in Lean's maths library is something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">G</span>\n\n<span class=\"c1\">-- definition of the group structure</span>\n<span class=\"n\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 191344497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795591
    },
    {
        "content": "<p>but without the inverses</p>",
        "id": 191344499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795597
    },
    {
        "content": "<p>This has the downside that we need a second class <code>add_monoid</code> extending <code>has_add</code> and <code>has_zero</code>.</p>",
        "id": 191344549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795621
    },
    {
        "content": "<p>but we have machinery which transfers lemmas about one structure to lemmas about the other.</p>",
        "id": 191344556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795654
    },
    {
        "content": "<p>What is the advantage of bundling the three (e : A) (f : A → A → A) (inv : A → A) in a separate type class  (has_group_notation) ?</p>",
        "id": 191344646,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584795837
    },
    {
        "content": "<p>I am not a type theory person so I can't talk about the relative advantages and disadvantages, but I can tell you that we have managed to make a whole ton of algebra doing it like this and it works fine.</p>",
        "id": 191344693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795882
    },
    {
        "content": "<p>oh -- sorry, that's not the question you asked.</p>",
        "id": 191344698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795899
    },
    {
        "content": "<p>That was just me trying to be clever.They don't do that in the maths library</p>",
        "id": 191344706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795917
    },
    {
        "content": "<p>In the maths library they just extend has_one, has_mul</p>",
        "id": 191344722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584795954
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">monoid&#39;</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>That is a pretty faithful representation of what is actually in the library</p>",
        "id": 191344801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584796068
    },
    {
        "content": "<p>Just write <code>#check monoid</code> in VS Code and right click on monoid and go to the definition</p>",
        "id": 191344845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584796094
    },
    {
        "content": "<p>Thank Kevin for all the explanation. Maybe I need to write  more Lean code to understand it better (the problem is my fallback to Coq, but this time, I am fairly determined.)</p>",
        "id": 191344870,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584796136
    },
    {
        "content": "<p>The difference between your definition and the one in Lean is that in Lean you have to use <code>*</code> for the group law. But because you can define the multiplication on <code>M</code> to be whatever you like, it works out fine.</p>",
        "id": 191344891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584796192
    },
    {
        "content": "<p>What do you think about this one ? </p>\n<div class=\"codehilite\"><pre><span></span>class monoid {A : Type*} (e : A) (f : A → A → A)  :=\n (Hassoc : ∀ a b c : A, f a (f b c) = f (f a b) c)\n (Hidl : ∀ a : A, f e a = a)\n (Hidr : ∀ a : A, f a e = a)\n\n\nclass group {A : Type*} (e : A) (f : A → A → A)\n (inv : A → A) [@monoid A e f] :=\n (Hinvl : ∀ x, f (inv x) x = e)\n (Hinvr : ∀ x, f x (inv x) = e)\n\nclass abelian_group {A : Type*} (e : A) (f : A → A → A)\n (inv : A → A) [Hm : @monoid A e f] [@group A e f inv Hm]:=\n (Hcomm : ∀ x y : A, f x y = f y x)\n</pre></div>",
        "id": 191345403,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584796866
    },
    {
        "content": "<p>They're not how it's done in mathlib but I can understand that it is possible to do it like this.</p>",
        "id": 191345414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584796913
    },
    {
        "content": "<p>the <del>mathlib</del>core Lean way looks less clunky to me</p>",
        "id": 191345458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584796933
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">semigroup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">left_cancel_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">semigroup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">right_cancel_semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">semigroup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_right_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">semigroup</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">comm_semigroup</span> <span class=\"n\">α</span>\n\n<span class=\"n\">class</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_group</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 191345481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584797018
    },
    {
        "content": "<p>You have <code>f (inv x) x = e</code>, Lean has <code>a⁻¹ * a = 1</code>, so the Lean way kind of looks nicer</p>",
        "id": 191345565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584797159
    },
    {
        "content": "<p>Now, I see your point. I agree that it is much cleaner.</p>",
        "id": 191345687,
        "sender_full_name": "Mukesh Tiwari",
        "timestamp": 1584797307
    }
]