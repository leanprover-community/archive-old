[
    {
        "content": "<p>I stick to the problem of removing an existential quantifier from a goal. The situation is the following one:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This is what follows:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">r</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">r</span>\n</code></pre></div>\n\n\n<p>The first thing I don't really understand is the relationship between the bound variable x of type alpha and the proposition r. As far as I see doesn't exist a relationship between them. It is asserted that there is an x of type alpha and a proposition r. The variable x doesn't belong to that proposition. <br>\nIf the bound variable were part of a hypothesis I could choose an x_0 as a value for x. But in the actual context that doesn't work. If there were an arithmetic expression inside the goal I could apply the use-tactic to supply x with a value. But that doesn't work here neither. Which other possibilities to solve this problem are suitable?</p>",
        "id": 209523853,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599663916
    },
    {
        "content": "<p>So this is false, is it not?</p>",
        "id": 209525420,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599664490
    },
    {
        "content": "<p>You need to know that there exists a value of type alpha in the first place</p>",
        "id": 209525492,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599664525
    },
    {
        "content": "<p>You haven't given a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>. Do you have some <code>variables</code> declarations above which you didn't include in your message?</p>",
        "id": 209525556,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599664553
    },
    {
        "content": "<p>I'm sorry. Yes, I had declared the variable r the following way:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 209525996,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599664713
    },
    {
        "content": "<p>Presumably you also have <code>variable α : Type*</code> as well. But in any case, as Ruben says, if you don't know anything else about <code>α</code> then your <code>example</code> is unprovable.</p>",
        "id": 209526324,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599664845
    },
    {
        "content": "<p>This example is part of the descriptions in \"Theorem Proving in Lean\", Release 3.18.4, p. 46.<br>\nThese declarations are given with respect to alpha.</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 209526892,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599665061
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209526951,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599665098
    },
    {
        "content": "<p>Ah, I see. More importantly, there's a <code>variable a : α</code> which makes the example provable again.</p>",
        "id": 209527251,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599665220
    },
    {
        "content": "<p>By the way, in this part of the book I think you're meant to be trying to write proofs in \"term mode\" (without use of tactics).</p>",
        "id": 209527432,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599665304
    },
    {
        "content": "<p>Ok, thank you for your hints. Then I will try that way.</p>",
        "id": 209527571,
        "sender_full_name": "Claus-Peter Becke",
        "timestamp": 1599665396
    }
]