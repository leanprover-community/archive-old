[
    {
        "content": "<p>I have a tactic state after a simp that looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">list.cons</span><span class=\"o\">,</span> <span class=\"n\">list.cons</span><span class=\"o\">,</span> <span class=\"n\">nat.succ</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">tl</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">IH</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">tl.zip</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span>\n    <span class=\"n\">tl.length</span> <span class=\"bp\">=</span> <span class=\"n\">l'.length</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">tl.zip</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">tl.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">l'.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"n\">hd'</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">tl'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i.succ</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">hd</span> <span class=\"o\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zip</span> <span class=\"o\">(</span><span class=\"n\">hd'</span> <span class=\"o\">::</span> <span class=\"n\">tl'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span>\n<span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">tl.length</span> <span class=\"bp\">=</span> <span class=\"n\">tl'.length</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">tl.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">tl.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">∧</span> <span class=\"n\">tl'.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">tl'.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 214918844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603936931
    },
    {
        "content": "<p>Why doesn't simp resolve the last statement? mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zip_nil_left</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nil</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zip</span> <span class=\"n\">l'</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zip_nil_right</span> <span class=\"o\">:</span> <span class=\"n\">l.zip</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nil</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zip</span><span class=\"o\">,</span> <span class=\"n\">zip_with</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zip_cons</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zip</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"o\">::</span> <span class=\"n\">l'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">l.zip</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">length_zip</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.zip</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">l.length</span> <span class=\"n\">l'.length</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zip_nil_left</span><span class=\"o\">,</span> <span class=\"n\">min_eq_left</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">l'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zip_nil_right</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">zero_le</span><span class=\"o\">,</span> <span class=\"n\">min_eq_right</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">min_add_add_right</span><span class=\"o\">,</span> <span class=\"n\">zip_cons</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nth_le_zip</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">l.zip</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">l'.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l.zip</span> <span class=\"n\">l'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">lt_min_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">l.length</span> <span class=\"n\">l'.length</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">list.length_zip</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">l'.nth_le</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">lt_min_iff</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">l.length</span> <span class=\"n\">l'.length</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">list.length_zip</span> <span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span> <span class=\"n\">hd</span> <span class=\"n\">tl</span> <span class=\"n\">IH</span> <span class=\"n\">generalizing</span> <span class=\"n\">l'</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zip_nil_left</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nat.not_lt_zero</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">l'</span> <span class=\"k\">with</span> <span class=\"n\">hd'</span> <span class=\"n\">tl'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"n\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">zip_cons</span><span class=\"o\">,</span> <span class=\"n\">nth_le</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_left_inj</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">IH</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">],</span>\n      <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">case list.cons, list.cons, nat.succ</span>\n<span class=\"cm\">α : Type u_1,</span>\n<span class=\"cm\">β : Type u_2,</span>\n<span class=\"cm\">hd : α,</span>\n<span class=\"cm\">tl : list α,</span>\n<span class=\"cm\">IH :</span>\n<span class=\"cm\">  ∀ {l' : list β} {i : ℕ} (h : i &lt; (tl.zip l').length),</span>\n<span class=\"cm\">    tl.length = l'.length → (tl.zip l').nth_le i h = (tl.nth_le i _, l'.nth_le i _),</span>\n<span class=\"cm\">hd' : β,</span>\n<span class=\"cm\">tl' : list β,</span>\n<span class=\"cm\">i : ℕ,</span>\n<span class=\"cm\">h : i.succ &lt; ((hd :: tl).zip (hd' :: tl')).length,</span>\n<span class=\"cm\">hl : tl.length = tl'.length</span>\n<span class=\"cm\">⊢ tl.nth_le i _ = tl.nth_le i _ ∧ tl'.nth_le i _ = tl'.nth_le i _</span>\n<span class=\"cm\">-/</span>\n\n        <span class=\"n\">exact</span> <span class=\"n\">and.intro</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 214918850,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603936951
    }
]