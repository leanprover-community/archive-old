[
    {
        "content": "<p>This doesn't work. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">this_shoud_be_trivial</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">matrix.dot_product</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">f</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265555290,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640002863
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.matrix.notation</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">this_shoud_be_trivial</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">matrix.dot_product</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">f</span>\n<span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n   <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works for me in a fresh file on a recent mathlib</p>",
        "id": 265555496,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640002972
    },
    {
        "content": "<p>I also guessed the import <code>data.matrix.notation</code></p>",
        "id": 265555561,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640003011
    },
    {
        "content": "<p>Martin, if you post the error message you get / goal state after it will be easier to diagnose the issue</p>",
        "id": 265555691,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640003081
    },
    {
        "content": "<p>My bad! I was using <code>data.fin.vec_notation</code> but didn't mention it.</p>",
        "id": 265555693,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640003085
    },
    {
        "content": "<p>What is the difference between <code>data.fin.vec_notation</code> and <code>data.matrix.notation</code> if I use it only for one-dimensional <code>fin 3</code> ?</p>",
        "id": 265555754,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1640003125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 265557386,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640004189
    },
    {
        "content": "<p>The second imports the first</p>",
        "id": 265558613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640005024
    },
    {
        "content": "<p>So if you import only the first, you don't get the simp lemmas from <a href=\"https://tqft.net/mathlib/data/matrix/notation\">file#data/matrix/notation</a></p>",
        "id": 265558640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640005046
    },
    {
        "content": "<p>Notably, the proof above uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.cons_dot_product\">docs#matrix.cons_dot_product</a></p>",
        "id": 265558742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640005102
    }
]