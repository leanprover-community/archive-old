[
    {
        "content": "<p>What is the best way to define a function <code>f : ℝ → ℝ</code> but with positive real numbers only as both its domain and its codomain? I want <code>f : ℝ^+ → ℝ^+</code> or something like that. At some point, I will want to claim that <code>f</code> is injective.</p>",
        "id": 288289215,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1656794846
    },
    {
        "content": "<p>Either define stuff as junk value and use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inj_on\">docs#set.inj_on</a>, or use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal\">docs#nnreal</a>, or write the API for <code>preal</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 288289601,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656795409
    },
    {
        "content": "<p>Unless it's completely nonsensical, you might want to consider defining <code>f</code> such that <code>f 0 = 0</code> and <code>f (-x) = - f x</code></p>",
        "id": 288290996,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656797567
    },
    {
        "content": "<p>It's a simple way to guarantee injectivity while not having to deal with subtypes</p>",
        "id": 288291090,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656797740
    },
    {
        "content": "<p>But it might not be suited to your problem</p>",
        "id": 288291095,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656797749
    },
    {
        "content": "<p>What is the best way of formalizing it if I want to argue about a function <code>f : ℝ^+ → ℝ^+</code> being injective, but I need to perform some of the intermediate calculations in real numbers?</p>",
        "id": 288411335,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1656942268
    },
    {
        "content": "<p>Can you give a mwe?</p>",
        "id": 288414689,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656944229
    },
    {
        "content": "<p>Without knowing what exactly the shape of <code>f</code> is, it is difficult to know what might work.</p>\n<p>For instance, if you replace your <code>f</code> by <code>log ∘ f ∘ exp</code>, then you have a function from <code>ℝ → ℝ</code> which is injective (or monotone) iff your original <code>f</code> is.  Would this be useful?</p>",
        "id": 288415416,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656944669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Positive.20real.20numbers/near/288414689\">said</a>:</p>\n<blockquote>\n<p>Can you give a mwe?</p>\n</blockquote>\n<p>I'll think about it.</p>",
        "id": 288419208,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1656946930
    }
]