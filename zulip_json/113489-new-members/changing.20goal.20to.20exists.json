[
    {
        "content": "<p>Suppose I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"c1\">-- n : ℕ</span>\n<span class=\"c1\">-- ⊢ n = n</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is it possible (and does it make sense) to legally change the goal to state to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>(clearing out <code>n</code> from the context)</p>",
        "id": 280265311,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651003695
    },
    {
        "content": "<p>I don't think this question is well posed, any true goal can legally be changed to any other true goal</p>",
        "id": 280265617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651003864
    },
    {
        "content": "<p>Right -- the issue is that you can solve the true goal with any number, not just <code>n</code>. If you were to ask instead whether you could reduce <code>⊢ P n</code> to <code>⊢ ∃ a : ℕ, P a</code> then the answer is no, because <code>P</code> might be false for <code>n</code> but true for 37. Of course the logic is fine the other way around; you can reduce <code>⊢ ∃ a : ℕ, P a</code> to <code>⊢ P n</code>, but in general it's not an iff. In your case it is an iff because both predicates are true.</p>",
        "id": 280265860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651004001
    },
    {
        "content": "<p>I see, thanks!</p>",
        "id": 280266536,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651004332
    },
    {
        "content": "<p>Another answer to this is that the correct quantifier would be for-all rather than there-exists. The tactic to do this transformation is <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#revert\">tactic#revert</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ ∀ {n : ℕ}, n = n</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 280296715,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1651026345
    }
]