[
    {
        "content": "<p>I'm trying to construct some colimits in sSet. This is a minimal code that gives me trouble:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebraic_topology.simplicial_set</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.limits.shapes.products</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">simplicial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">sigma.ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">Δ</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>Here <code>sigma.ι</code> is an inclusion map to the coproduct of the standard simplices. Lean says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">category_theory.category</span> <span class=\"n\">sSet</span>\n</code></pre></div>\n<p>although <code>#print instances category_theory.category</code> indicates <code>sSet.large_category : category_theory.large_category sSet</code>. Any ideas, what is happening ? I also tried to fix the universe level <code>u</code> and use <code>sSet.standard_simplex.{u}.obj (simplex_category.mk n)</code> instead of <code>Δ[n]</code>, but the problem remains.</p>",
        "id": 281149326,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1651668364
    },
    {
        "content": "<p>Your code compiles for me without errors (with mathlib from April 26th)</p>",
        "id": 281149978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651668722
    },
    {
        "content": "<p>From reading the documentation/source, I think <code>Δ[n]</code> can only be an object of <code>sSet.{0}</code>.</p>",
        "id": 281150749,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651669088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/sSet.20as.20a.20category/near/281150749\">said</a>:</p>\n<blockquote>\n<p>From reading the documentation/source, I think <code>Δ[n]</code> can only be an object of <code>sSet.{0}</code>.</p>\n</blockquote>\n<p>Thanks, <code>sSet.{0}</code> is fine by me and <code>#check sigma.ι (λ n : ℕ, (sSet.standard_simplex.{0}.obj (simplex_category.mk n)))</code> works. But this notation is tedious though. Any ideas why the original <code>Δ[n]</code> not working ?</p>",
        "id": 281152652,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1651669904
    },
    {
        "content": "<p>I haven't tested but Kevin says it works for him. Try adding <code>set pp.all true</code> and see what the error message is then.</p>",
        "id": 281152983,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651670069
    },
    {
        "content": "<p>Should</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">\"notation `Δ[`n`]` := sSet.standard_simplex.obj (simplex_category.mk n)\"</span> <span class=\"k\">in</span> <span class=\"n\">simplicial</span>\n</code></pre></div>\n<p>instead be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">localized</span> <span class=\"s2\">\"notation `Δ[`n`]` := sSet.{0}.standard_simplex.obj (simplex_category.mk n)\"</span> <span class=\"k\">in</span> <span class=\"n\">simplicial</span>\n</code></pre></div>",
        "id": 281153004,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651670082
    },
    {
        "content": "<p>I think <code>sSet.standard_simplex</code> has no universe parameter.</p>",
        "id": 281153390,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651670249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/sSet.20as.20a.20category/near/281149978\">said</a>:</p>\n<blockquote>\n<p>Your code compiles for me without errors (with mathlib from April 26th)</p>\n</blockquote>\n<p>Thanks Kevin, I ran <code>leanproject upgrade-mathlib</code> and now it works indeed. But also now the line  <code>#check sigma.ι (λ n : ℕ, (sSet.standard_simplex.{0}.obj (simplex_category.mk n)))</code> not working <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 281153396,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1651670253
    },
    {
        "content": "<p>My latest message explains that--I guess there used to be a universe parameter in <code>sSet.standard_simplex</code>, but something changed.</p>",
        "id": 281153704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651670395
    },
    {
        "content": "<p>Ah I know what changed! <code>simplex_category</code> is not universe polymorphic anymore since <span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span>'s refactor.</p>",
        "id": 281153920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651670483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/sSet.20as.20a.20category/near/281153390\">said</a>:</p>\n<blockquote>\n<p>I think <code>sSet.standard_simplex</code> has no universe parameter.</p>\n</blockquote>\n<p>Agreed, <code>sSet.{0}.standard_simplex</code>seems more reasonable,  but before the update it worked with <code>sSet.standard_simplex.{0}</code> though.  Now neither work.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 281153942,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1651670498
    },
    {
        "content": "<p>cf <a href=\"https://github.com/leanprover-community/mathlib/pull/13183\">#13183</a></p>",
        "id": 281154105,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651670565
    },
    {
        "content": "<p><code>sSet.{0}.standard_simplex</code> gives <code>unknown identifier 'sSet.standard_simplex'</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 281154115,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1651670571
    },
    {
        "content": "<p>What if you insert the universe parameter elsewhere?</p>",
        "id": 281154151,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651670595
    },
    {
        "content": "<p><code>sSet.standard_simplex.{0}</code> gives <code>incorrect number of universe levels parameters for 'sSet.standard_simplex', #0 expected, #1provided</code> which is reasonable. Without the universe parameter it works fine.</p>",
        "id": 281154291,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1651670659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/sSet.20as.20a.20category/near/281154105\">said</a>:</p>\n<blockquote>\n<p>cf <a href=\"https://github.com/leanprover-community/mathlib/pull/13183\">#13183</a></p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> nice</p>",
        "id": 281154312,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1651670673
    },
    {
        "content": "<p>Ok, thank you all for the help and the clarifications.</p>",
        "id": 281154386,
        "sender_full_name": "Fedor Pavutnitskiy",
        "timestamp": 1651670715
    }
]