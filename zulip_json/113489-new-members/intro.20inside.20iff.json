[
    {
        "content": "<p>Hi,</p>\n<p>Is there any way to do a version of intro x, where the x is then introduced (removed) from both sides of the goal statement at once?<br>\n<code> ⊢ (∀ (x : X), x ∈ A → x ∈ B) ↔ ∀ (x : X), x ∈ B ↔ x ∈ A ∪ B</code></p>",
        "id": 203714305,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1594646881
    },
    {
        "content": "<p><code>apply forall_congr, intro x</code></p>",
        "id": 203714375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594646904
    },
    {
        "content": "<p>for what it's worth, <code>forall_congr</code> comes up if you ask <code>suggest</code> for advice (although it's not quite at the top of the list)</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"err\">∪</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">suggest</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203716218,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594647895
    },
    {
        "content": "<p>The <code>congr</code> tactic should really be able to do this</p>",
        "id": 203716290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594647947
    },
    {
        "content": "<p>I agree. I spent a minute trying to massage it into a form where <code>congr</code> or <code>congr'</code> did something, but this didn't work.</p>",
        "id": 203716944,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594648306
    },
    {
        "content": "<p>I think I got a little tunnel vision doing a problem and forgot I could even do suggest!</p>",
        "id": 203719021,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1594649372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255278\">@Danila Kurganov</span> in some sense the reason this isn't easier (e.g. \"true by definition\") is that it's only a one way implication. \"forall x, (P x &lt;-&gt; Q x)\" certainly implies \"(forall x, P x) &lt;-&gt; (forall x, Q x)\", but the other implication is false in general. That's why you have to <code>apply</code> something.</p>",
        "id": 203734413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594656337
    },
    {
        "content": "<p>That's a good point, so for backwards reasonings generally</p>",
        "id": 203770691,
        "sender_full_name": "Danila Kurganov",
        "timestamp": 1594674030
    }
]