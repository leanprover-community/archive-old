[
    {
        "content": "<p>Hi!<br>\nAfter a hiatus (paper deadline ;-), I've started trying to get my head around tactic mode (thanks for earlier advice).  So I thought I'd start with a really really easy example: prove that in a group G, the identity is the unique element to satisfy <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∗</mo><mi>x</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x*x=x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>.  OK, here are two maths proofs for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∗</mo><mi>x</mi><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x*x = x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>:</p>\n<p>(1) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∗</mo><mi>x</mi><mo>=</mo><mi>x</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msup><mi>x</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>∗</mo><mi>x</mi><mo>∗</mo><mi>x</mi><mo>=</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>∗</mo><mi>x</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mn>1</mn><mo>∗</mo><mi>x</mi><mo>=</mo><mn>1</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x*x=x \\implies x^{-1}<em>x</em>x=x^{-1}<em>x \\implies 1</em>x=1 \\implies x=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66844em;vertical-align:-0.024em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> where the steps are \"multiply on the left by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>\", \"use (associativity and) inverse property\", \"use 1 property\".</p>\n<p>(2) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∗</mo><mi>x</mi><mo>=</mo><mi>x</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>x</mi><mo>∗</mo><mi>x</mi><mo>=</mo><mi>x</mi><mo>∗</mo><mn>1</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x<em>x=x \\implies x</em>x=x*1 \\implies x=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66844em;vertical-align:-0.024em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, where the steps are \"multiply the right hand side on the right by 1\" and \"use the left cancellation property\".</p>\n<p>The other implication (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∗</mo><mi>x</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x*x=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>) is even simpler: substitute in the hypothesis and use the 1 property.</p>\n<p>But I have so struggled to write this nicely in tactic mode :-(  For approach (1), I couldn't figure out how to multiply the whole equation on the left by something (though I wonder whether <code>congr_arg</code> is the right way to go?), and for (2) I couldn't figure out how to rewrite just one term in the equation.  The reverse implication also turned out to be much harder than it should have been.</p>\n<p>Here's my best attempt so far, which is just ugly: any suggestions on how to improve it?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"k\">calc</span>\n      <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>  <span class=\"o\">:</span> <span class=\"n\">h</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_left_cancel</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"k\">calc</span>\n    <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Many thanks!</p>",
        "id": 181097242,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1574158241
    },
    {
        "content": "<p>There is no need to import <code>init.algebra.group</code>, because the zeroth line of a lean file imports all of <code>init</code></p>",
        "id": 181097413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574158423
    },
    {
        "content": "<p>if you want to <em>not</em> import anything else, you should start the file with <code>prelude</code></p>",
        "id": 181097474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574158447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242660\">@Julian Gilbey</span> For the reverse direction: after <code>intro h</code>, you could do <code>subst h</code> or <code>rw h</code>. Maybe that helps?</p>",
        "id": 181097519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574158510
    },
    {
        "content": "<p>Probably you can also close the goal directly with <code>simp [h]</code></p>",
        "id": 181097527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574158522
    },
    {
        "content": "<p>For the forward direction. I agree that a step like \"multiply both sides with ...\" doesn't have a nice tactic-verb yet.</p>",
        "id": 181097594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574158567
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_inv_cancel_right</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>           <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_inv_self</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_one</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181097744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574158698
    },
    {
        "content": "<p>just a slight cleanup of your proof</p>",
        "id": 181097754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574158716
    },
    {
        "content": "<p>Here's how I'd do it, basically following your (2) for the first part:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_right_cancel</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>(I've also deliberately avoided using <code>simp</code> and such so you can see what's going on)</p>",
        "id": 181097795,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574158773
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_on_left</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_left_cancel</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_on_left</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mul_one</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181097875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574158825
    },
    {
        "content": "<p>The golfed proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">mul_left_cancel_iff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 181098029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574158933
    },
    {
        "content": "<p>I wouldn't mind having <code>mul_on_left</code> and friends in mathlib</p>",
        "id": 181098133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159027
    },
    {
        "content": "<p>why do all theorems have to be tactics too</p>",
        "id": 181098192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159045
    },
    {
        "content": "<p>there is already a theorem for this, I used it</p>",
        "id": 181098200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159054
    },
    {
        "content": "<p>It's not a tactic. It's a an existing theorem but with different binders</p>",
        "id": 181098213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159069
    },
    {
        "content": "<p>And a name that mimics the informal language</p>",
        "id": 181098248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159104
    },
    {
        "content": "<p>Actually, core is violating mathlib conventions in this case. The variable being cancelled should be explicit</p>",
        "id": 181098262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159119
    },
    {
        "content": "<p>Luckily core doesn't depend on mathlib. So it doesn't have to give a thing for mathlib conventions (-;</p>",
        "id": 181098295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159162
    },
    {
        "content": "<p>it is sometimes problematic when people get the wrong idea from the way a theorem from core is stated</p>",
        "id": 181098379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159211
    },
    {
        "content": "<p>or named</p>",
        "id": 181098388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159224
    },
    {
        "content": "<p>But core doesn't depend on those people's ideas either. So again, it doesn't really care [/sarcasm]</p>",
        "id": 181098554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159375
    },
    {
        "content": "<p>We should have a tactic for applying <code>congr_arg</code> though. The term is finicky</p>",
        "id": 181098562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159386
    },
    {
        "content": "<p>That is, the <code>replace</code> line here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181098732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159531
    },
    {
        "content": "<p>That's getting close to Kevin's modified <code>apply</code> that also works on hyps</p>",
        "id": 181098878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159657
    },
    {
        "content": "<p>Maybe this should be <code>congr (*) x at h</code>?</p>",
        "id": 181098899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159688
    },
    {
        "content": "<p>Or <code>congr'</code>, if the other is locked into ...</p>",
        "id": 181098945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159726
    },
    {
        "content": "<p>I'm thinking something like <code>congr_hyp x * _ with h</code></p>",
        "id": 181098959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159752
    },
    {
        "content": "<p>You should be able to provide more than one placeholder, and more than one hypothesis</p>",
        "id": 181099018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159785
    },
    {
        "content": "<p>Wait, why <code>with</code> instead of <code>at</code>?</p>",
        "id": 181099054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159828
    },
    {
        "content": "<p>it's not rewriting <code>h</code></p>",
        "id": 181099065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159841
    },
    {
        "content": "<p>my example rewrote h but that's probably not always desirable, since this move loses information</p>",
        "id": 181099092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159863
    },
    {
        "content": "<p>A crazier idea is <code>congr_hyp x * h</code> but I don't know if we can typecheck that enough to figure out what's happening</p>",
        "id": 181099162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159884
    },
    {
        "content": "<p>If you don't replace <code>h</code> you need the user to supply a new name as well</p>",
        "id": 181099183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159917
    },
    {
        "content": "<p><code>congr_hyp h2 : x * h</code></p>",
        "id": 181099201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159932
    },
    {
        "content": "<p>the equalities might also be terms, they aren't necessarily from the context</p>",
        "id": 181099232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159968
    },
    {
        "content": "<p>Hmm.. I think I prefer <code>congr_hyp h2 : x * _ with h</code></p>",
        "id": 181099234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159970
    },
    {
        "content": "<p>so perhaps <code>using [h]</code></p>",
        "id": 181099244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574159983
    },
    {
        "content": "<p>or maybe <code>using h</code>... I don't know the difference between <code>with</code> and <code>using</code></p>",
        "id": 181099250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574159991
    },
    {
        "content": "<p><code>using</code> uses terms</p>",
        "id": 181099296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574160002
    },
    {
        "content": "<p>Ok, then I prefer <code>using</code></p>",
        "id": 181099306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574160016
    },
    {
        "content": "<p><code>with</code> is always names (usually new names generated by the tactic)</p>",
        "id": 181099307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574160017
    },
    {
        "content": "<p>Downside of using placeholders is then you can't actually use literal placeholders</p>",
        "id": 181099335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574160067
    },
    {
        "content": "<p>Aha... we need better syntax to distinguish those</p>",
        "id": 181099357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574160097
    },
    {
        "content": "<p>something like <code>x * ‹h›</code> might work, but we need to be able to capture the notation and control elaboration</p>",
        "id": 181099429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574160140
    },
    {
        "content": "<p>Eh, too much work. How about using placeholders for simple situations and another keyword for when you still need placeholders, i.e. <code>congr_hyp : x * a with a using [h]</code></p>",
        "id": 181099699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574160370
    },
    {
        "content": "<p>I don't really like that everything is separated here but I'm not sure if parsing will work with other setups, e.g. <code>congr_hyp : x * a using [a : h]</code></p>",
        "id": 181099758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574160460
    },
    {
        "content": "<p>I think you want to replace the hypothesis more often than not. If you don't want to, you could just copy the hypothesis with <code>have</code> first, right?</p>",
        "id": 181130052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574181604
    },
    {
        "content": "<blockquote>\n<p>You should be able to provide more than one placeholder, and more than one hypothesis</p>\n</blockquote>\n<p>Could you give an example of how this would look?</p>",
        "id": 181130846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574182189
    },
    {
        "content": "<p>Oh, like if <code>h1 : a = b</code> and <code>h2 : c = d</code>, then you write something like <code>congr_hyp _ + _ using h1 h2</code> and you get a proof of <code>a + c = b + d</code>?</p>",
        "id": 181130933,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574182232
    },
    {
        "content": "<blockquote>\n<p>if you want to <em>not</em> import anything else, you should start the file with <code>prelude</code></p>\n</blockquote>\n<p>Ah, thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> - I didn't know that!</p>",
        "id": 181140496,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1574188417
    },
    {
        "content": "<blockquote>\n<p>Probably you can also close the goal directly with <code>simp [h]</code></p>\n</blockquote>\n<p>Ooh, <code>subst h</code> followed by <code>exact mul_one 1</code> works, and so does <code>rw [h, mul_one]</code>, and so does <code>simp [h]</code>.  Thanks!  So much nicer than what I did ;-)</p>",
        "id": 181140828,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1574188609
    },
    {
        "content": "<blockquote>\n<p>For the forward direction. I agree that a step like \"multiply both sides with ...\" doesn't have a nice tactic-verb yet.</p>\n</blockquote>\n<p>This just happened to me again: I had <code>h : list.of_fn f = []</code> with <code>f : fin n -&gt; X</code> and I wanted to deduce that n was 0 (this was not the goal). The theorem <code>list.length_of_fn</code> tells me that <code>length(list.of_fn f) = n</code> so I just wanted to \"apply list.length to h\" and then rw list.length_of_fn. I don't know an easy way to do this in tactic mode without this apply idea.</p>",
        "id": 181140919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574188655
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Probably you can also close the goal directly with <code>simp [h]</code></p>\n</blockquote>\n<p>Ooh, <code>subst h</code> followed by <code>exact mul_one 1</code> works, and so does <code>rw [h, mul_one]</code>, and so does <code>simp [h]</code>.  Thanks!  So much nicer than what I did ;-)</p>\n</blockquote>\n<p>Of course, the reason that <code>simp</code> might help is that someone already proved all or most of what you wanted, probably in term mode, and then tagged it <code>[@simp]</code>.</p>",
        "id": 181141017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574188702
    },
    {
        "content": "<blockquote>\n<p>Here's how I'd do it, basically following your (2) for the first part:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_right_cancel</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>(I've also deliberately avoided using <code>simp</code> and such so you can see what's going on)</p>\n</blockquote>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Now this is interesting: <code>apply mul_right_cancel</code> can apply the lemma backwards, which somewhat surprises me.  How does it know that it's a two-way implication?</p>",
        "id": 181141584,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1574189067
    },
    {
        "content": "<p>If you hover over <code>mul_right_cancel</code> you'll see its definition: <code>mul_right_cancel : ∀ {α : Type} [_inst_1 : right_cancel_semigroup α] {a b c : α}, a * b = c * b → a = c</code>. So it's a one way implication. And <code>apply</code> applies a function, so it's all consistent.</p>",
        "id": 181142432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574189586
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">mul_right_cancel</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>This way doesn't have metavariables in.</p>",
        "id": 181142632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574189726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"242660\">@Julian Gilbey</span> Kevin's answered the question well - I'll add that <code>apply</code> works by backwards reasoning using functions, so it essentially only applies lemmas backwards</p>",
        "id": 181146014,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574191771
    },
    {
        "content": "<p>proposition world of the natural number game gets people proving theorems backwards.</p>",
        "id": 181146099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574191813
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- computer scientist</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hBC</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hCD</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hCD</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hBC</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hAB</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- mathematician</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAB</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hBC</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hCD</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">hAB</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">hBC</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hCD</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181146318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574191945
    },
    {
        "content": "<p>We think forwards, but it doesn't half clutter up the tactic state.</p>",
        "id": 181146337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574191966
    },
    {
        "content": "<p>I'd argue we do a bit of both</p>",
        "id": 181146412,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574192032
    },
    {
        "content": "<p>Ah, thanks <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> and <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  - I think I'm getting it!  How does this sound: <code>apply</code> says something along the lines of \"we're trying to prove B; we have a theorem of the form A =&gt; B, and we <code>apply</code> this theorem, then we only need to prove A in order to be done\".  So in this case, we're trying to prove <code>x=1</code>, and applying <code>mul_right_cancel</code> therefore says \"if we can reach <code>x*y=1*y</code> for some y, then we're done, because we can just apply <code>mul_right_cancel</code> at that point\".  (And that explains why the state after <code>apply mul_right_cancel</code>looks like this.) So when the docs talk about \"rewriting the target\", it means something like: <code>apply</code> changes our target by saying \"if we get to an earlier point, we are effectively done\".</p>",
        "id": 181232019,
        "sender_full_name": "Julian Gilbey",
        "timestamp": 1574272461
    },
    {
        "content": "<p>you can think of <code>apply T</code> as saying \"by <code>T</code>, it suffices to show...\"</p>",
        "id": 181232125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574272561
    },
    {
        "content": "<p>It's doing the proof backwards. The CS people like it</p>",
        "id": 181232191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574272580
    },
    {
        "content": "<p>Because it's writing the function forward</p>",
        "id": 181232212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574272597
    }
]