[
    {
        "content": "<p>Is there a variant of apply which creates new goals for any missing type class instances?</p>",
        "id": 197064088,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589127620
    },
    {
        "content": "<p>it randomly seems to do this sometimes already, usually in circumstances where the new goals can be solved by <code>apply_instance</code>...</p>",
        "id": 197064105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589127668
    },
    {
        "content": "<p>I assume you're using a recent Lean? there was some issue with <code>apply</code> and type classes but it was fixed a fairly long time ago</p>",
        "id": 197064117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589127698
    },
    {
        "content": "<p>\"fixed\" possibly meaning we replaced a heuristic with a much better but maybe still not always correct heuristic, I'm not sure.</p>",
        "id": 197064120,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589127721
    },
    {
        "content": "<p>Yeah I'm on 3.9.0 right now - I did have the impression that this used to happen as well but I can't be sure</p>",
        "id": 197064161,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589127743
    },
    {
        "content": "<p>I think the new goal I want isn't solved by apply_instance</p>",
        "id": 197064171,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589127761
    },
    {
        "content": "<p>Probably not, given that <code>apply</code> (1) isn't finding the instance, (2) isn't creating a new goal.</p>",
        "id": 197064202,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589127789
    },
    {
        "content": "<p>Maybe just use <code>haveI</code> or <code>letI</code> first?</p>",
        "id": 197064224,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589127806
    },
    {
        "content": "<p>Yeah that's probably the most sensible solution, just thought I'd check first! Thanks</p>",
        "id": 197064260,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589127835
    },
    {
        "content": "<p>Also, while <code>apply</code> is difficult, I seem to recall that <code>exact</code> or <code>refine</code> might have an option for this</p>",
        "id": 197064262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589127837
    },
    {
        "content": "<p>Or its default behavior might do what you want</p>",
        "id": 197064316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589127849
    },
    {
        "content": "<p>The default behaviour for both of those doesn't do what I want</p>",
        "id": 197064332,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589127864
    },
    {
        "content": "<p>Oh, I see there's <code>apply_with</code></p>",
        "id": 197064382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589127931
    },
    {
        "content": "<p><code>apply_with blah { instances := ff }</code> maybe</p>",
        "id": 197064423,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589127967
    },
    {
        "content": "<p>I find it slightly surprising that using @ and term mode, leaving the missing instance as <code>_</code> gives the error <code>failed to synthesize type class instance</code> instead of saying couldn't synthesize term</p>",
        "id": 197064442,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589128004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/apply.20with.20typeclass.20instances/near/197064423\" title=\"#narrow/stream/113489-new-members/topic/apply.20with.20typeclass.20instances/near/197064423\">said</a>:</p>\n<blockquote>\n<p><code>apply_with blah { instances := ff }</code> maybe</p>\n</blockquote>\n<p>This doesn't seem to work for me...</p>",
        "id": 197064449,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589128029
    },
    {
        "content": "<p><code>haveI</code> probably is the best thing to do here</p>",
        "id": 197064450,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589128037
    },
    {
        "content": "<p>I've also noticed that it seems kind of random what happens with this. I encountered this just yesterday with <code>refine</code> I think.</p>",
        "id": 197064468,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589128073
    },
    {
        "content": "<p>Oh hang on, the <code>apply_with</code> thing works when I don't use <code>@</code></p>",
        "id": 197064530,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589128099
    },
    {
        "content": "<p>I gave <code>refine</code> a pretty complicated expression involving <code>_</code> inside a lambda and stuff, no idea if that was relevant.</p>",
        "id": 197064533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589128101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/113489-new-members/topic/apply.20with.20typeclass.20instances/near/197064530\" title=\"#narrow/stream/113489-new-members/topic/apply.20with.20typeclass.20instances/near/197064530\">said</a>:</p>\n<blockquote>\n<p>Oh hang on, the <code>apply_with</code> thing works when I don't use <code>@</code></p>\n</blockquote>\n<p><code>apply_with (preserves_hpb over.forget) { instances := ff } ,</code> does create the new goal, <code>apply_with (preserves_hpb over.forget t) { instances := ff }</code> doesn't</p>",
        "id": 197064613,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589128173
    },
    {
        "content": "<p>and the instances doesn't need to be mentioned at all actually</p>",
        "id": 197064681,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589128206
    },
    {
        "content": "<p>It seems like it's something to do with where the instance is in the declaration</p>",
        "id": 197064685,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589128219
    },
    {
        "content": "<p>I would believe that</p>",
        "id": 197065021,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589128595
    },
    {
        "content": "<p>My hacky workaround to this issue is to use <code>refine @foo _ _ (id _) bar</code></p>",
        "id": 197066234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589130352
    },
    {
        "content": "<p>where the <code>id</code> is on the typeclass I want to prove</p>",
        "id": 197066270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589130363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span></p>",
        "id": 197066282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589130404
    },
    {
        "content": "<p>Cool, thanks!</p>",
        "id": 197066307,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589130430
    },
    {
        "content": "<p>It turned out my thing should have been inferred anyway, and I just didn't have the right imports</p>",
        "id": 197066315,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589130474
    }
]