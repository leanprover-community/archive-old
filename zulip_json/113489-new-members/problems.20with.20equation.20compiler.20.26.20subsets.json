[
    {
        "content": "<p>I am trying to define a function where the domain is  a subset of elements and I'm really surprised at Lean's behavior.<br>\nCan someone please explain how to define a function using the equation compiler for a subset type ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">refine</span> <span class=\"n\">set.mem_Iic.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">sup_eq_left.mp</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">end</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">refine</span> <span class=\"n\">set.mem_Iic.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">sup_eq_left.mp</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">end</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">refine</span> <span class=\"n\">set.mem_Iic.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">sup_eq_left.mp</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">end</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">n3</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">refine</span> <span class=\"n\">set.mem_Iic.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">sup_eq_left.mp</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"kd\">end</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n2s_incomplete</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">n0</span> <span class=\"o\">:=</span> <span class=\"s2\">\"zero\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">n2s_incomplete</span> <span class=\"n\">n1</span>\n<span class=\"c1\">-- result: \"zero\"  -- why is this the case?</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">n2s_incomplete</span> <span class=\"n\">n0</span>\n<span class=\"c1\">-- result: \"zero\" -- this function seems to be equivalent to a constant; that is, the argument seems to be completely ignored.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">n2s</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">n0</span> <span class=\"o\">:=</span> <span class=\"s2\">\"0\"</span> <span class=\"c1\">-- no error</span>\n<span class=\"bp\">|</span> <span class=\"n\">n1</span> <span class=\"o\">:=</span> <span class=\"s2\">\"1\"</span> <span class=\"c1\">-- equation compiler error, equation #2 has not been used in the compilation, note that the left-hand-side of equation #1 is a variable</span>\n<span class=\"bp\">|</span> <span class=\"n\">n2</span> <span class=\"o\">:=</span> <span class=\"s2\">\"2\"</span> <span class=\"c1\">-- equation compiler error, equation #3 has not been used in the compilation, note that the left-hand-side of equation #1 is a variable</span>\n<span class=\"bp\">|</span> <span class=\"n\">n3</span> <span class=\"o\">:=</span> <span class=\"s2\">\"3\"</span> <span class=\"c1\">-- equation compiler error, equation #4 has not been used in the compilation, note that the left-hand-side of equation #1 is a variable</span>\n</code></pre></div>",
        "id": 215990554,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1604813890
    },
    {
        "content": "<p>lean is treating <code>n0</code> on the left as just a new identifier. Doing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n2s_incomplete</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"zero\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"one\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"two\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"three\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>seems to work. There is an attribute <code>@[pattern]</code> you can add to defs, but lean doesn't like it in this case.</p>",
        "id": 215992530,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604817496
    },
    {
        "content": "<p>But if you really just want a type with four terms you can just make a simple inductive</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ns</span>\n<span class=\"bp\">|</span> <span class=\"n\">n0</span>\n<span class=\"bp\">|</span> <span class=\"n\">n1</span>\n<span class=\"bp\">|</span> <span class=\"n\">n2</span>\n<span class=\"bp\">|</span> <span class=\"n\">n3</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ns</span>\n<span class=\"kd\">def</span> <span class=\"n\">n2s</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">n0</span> <span class=\"o\">:=</span> <span class=\"s2\">\"0\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">n1</span> <span class=\"o\">:=</span> <span class=\"s2\">\"1\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">n2</span> <span class=\"o\">:=</span> <span class=\"s2\">\"2\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">n3</span> <span class=\"o\">:=</span> <span class=\"s2\">\"3\"</span>\n</code></pre></div>",
        "id": 215992543,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1604817592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/113489-new-members/topic/problems.20with.20equation.20compiler.20.26.20subsets/near/215992530\">said</a>:</p>\n<blockquote>\n<p>lean is treating <code>n0</code> on the left as just a new identifier. Doing </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n2s_incomplete</span> <span class=\"o\">:</span> <span class=\"n\">ns</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"zero\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"one\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"two\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"three\"</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<p>seems to work. There is an attribute <code>@[pattern]</code> you can add to defs, but lean doesn't like it in this case.</p>\n</blockquote>\n<p>Thanks Alex!</p>",
        "id": 216017640,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1604858201
    }
]