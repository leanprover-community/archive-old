[
    {
        "content": "<p>I'm trying to create a coercion and I'm not sure why one of my definition is working and the other is not</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">subgroup</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">submonoid</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inv_mem&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">}</span> <span class=\"c1\">-- unknown identifier &#39;subgroup.carrier&#39;</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">subgroup&#39;</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_mem&#39;</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_mem&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_mem&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"err\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_coe&#39;</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subgroup&#39;</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">subgroup&#39;</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>As you can see, LEAN is not recognizing that my first subgroup has a carrrier in my first coercion. Why might this be the case?</p>",
        "id": 193200998,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586271793
    },
    {
        "content": "<p>If you <code>extend</code> then it's probably now called something like <code>subgroup.to_submonoid.carrier</code></p>",
        "id": 193203318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586272685
    },
    {
        "content": "<p>Try <code>#print prefix subgroup</code> directly after the definition</p>",
        "id": 193203408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586272709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/bundled.20subgroups/near/193203408\" title=\"#narrow/stream/113489-new-members/topic/bundled.20subgroups/near/193203408\">said</a>:</p>\n<blockquote>\n<p>Try <code>#print prefix subgroup</code> directly after the definition</p>\n</blockquote>\n<p>This is what I get</p>\n<div class=\"codehilite\"><pre><span></span>subgroup : Π (G : Type u_2) [_inst_2 : group G], Type u_2\nsubgroup.cases_on : Π {G : Type u_2} [_inst_2 : group G] {C : subgroup G → Sort l} (n : subgroup G),\n  (Π (_to_submonoid : submonoid G)\n   (inv_mem&#39; : ∀ {x : G}, x ∈ _to_submonoid.carrier → x⁻¹ ∈ _to_submonoid.carrier),\n     C {to_submonoid := _to_submonoid, inv_mem&#39; := inv_mem&#39;}) →\n  C n\nsubgroup.has_sizeof_inst : Π (G : Type u_2) [_inst_2 : group G], has_sizeof (subgroup G)\nsubgroup.inv_mem&#39; : ∀ {G : Type u_2} [_inst_2 : group G] (c : subgroup G) {x : G},\n  x ∈ c.to_submonoid.carrier → x⁻¹ ∈ c.to_submonoid.carrier\nsubgroup.mk : Π {G : Type u_2} [_inst_2 : group G] (_to_submonoid : submonoid G),\n  (∀ {x : G}, x ∈ _to_submonoid.carrier → x⁻¹ ∈ _to_submonoid.carrier) → subgroup G\nsubgroup.mk.inj : ∀ {G : Type u_2} {_inst_2 : group G} {_to_submonoid : submonoid G}\n{inv_mem&#39; : ∀ {x : G}, x ∈ _to_submonoid.carrier → x⁻¹ ∈ _to_submonoid.carrier}\n{_to_submonoid_1 : submonoid G}\n{inv_mem&#39;_1 : ∀ {x : G}, x ∈ _to_submonoid_1.carrier → x⁻¹ ∈ _to_submonoid_1.carrier},\n  {to_submonoid := _to_submonoid, inv_mem&#39; := inv_mem&#39;} = {to_submonoid := _to_submonoid_1, inv_mem&#39; := inv_mem&#39;_1} →\n  _to_submonoid = _to_submonoid_1\nsubgroup.mk.inj_arrow : Π {G : Type u_2} {_inst_2 : group G} {_to_submonoid : submonoid G}\n{inv_mem&#39; : ∀ {x : G}, x ∈ _to_submonoid.carrier → x⁻¹ ∈ _to_submonoid.carrier}\n{_to_submonoid_1 : submonoid G}\n{inv_mem&#39;_1 : ∀ {x : G}, x ∈ _to_submonoid_1.carrier → x⁻¹ ∈ _to_submonoid_1.carrier},\n  {to_submonoid := _to_submonoid, inv_mem&#39; := inv_mem&#39;} = {to_submonoid := _to_submonoid_1, inv_mem&#39; := inv_mem&#39;_1} →\n  Π ⦃P : Sort l⦄, (_to_submonoid = _to_submonoid_1 → P) → P\nsubgroup.mk.inj_eq : ∀ {G : Type u_2} {_inst_2 : group G} {_to_submonoid : submonoid G}\n{inv_mem&#39; : ∀ {x : G}, x ∈ _to_submonoid.carrier → x⁻¹ ∈ _to_submonoid.carrier}\n{_to_submonoid_1 : submonoid G}\n{inv_mem&#39;_1 : ∀ {x : G}, x ∈ _to_submonoid_1.carrier → x⁻¹ ∈ _to_submonoid_1.carrier},\n  {to_submonoid := _to_submonoid, inv_mem&#39; := inv_mem&#39;} = {to_submonoid := _to_submonoid_1, inv_mem&#39; := inv_mem&#39;_1} =\n    (_to_submonoid = _to_submonoid_1)\nsubgroup.mk.sizeof_spec : ∀ (G : Type u_2) [_inst_2 : group G] (_to_submonoid : submonoid G)\n(inv_mem&#39; : ∀ {x : G}, x ∈ _to_submonoid.carrier → x⁻¹ ∈ _to_submonoid.carrier),\n  subgroup.sizeof G {to_submonoid := _to_submonoid, inv_mem&#39; := inv_mem&#39;} = 1 + sizeof _to_submonoid\nsubgroup.no_confusion : Π {G : Type u_2} {_inst_2 : group G} {P : Sort l} {v1 v2 : subgroup G}, v1 = v2 → subgroup.no_confusion_type P v1 v2\nsubgroup.no_confusion_type : Π {G : Type u_2} {_inst_2 : group G}, Sort l → subgroup G → subgroup G → Sort l\nsubgroup.rec : Π {G : Type u_2} [_inst_2 : group G] {C : subgroup G → Sort l},\n  (Π (_to_submonoid : submonoid G)\n   (inv_mem&#39; : ∀ {x : G}, x ∈ _to_submonoid.carrier → x⁻¹ ∈ _to_submonoid.carrier),\n     C {to_submonoid := _to_submonoid, inv_mem&#39; := inv_mem&#39;}) →\n  Π (n : subgroup G), C n\nsubgroup.rec_on : Π {G : Type u_2} [_inst_2 : group G] {C : subgroup G → Sort l} (n : subgroup G),\n  (Π (_to_submonoid : submonoid G)\n   (inv_mem&#39; : ∀ {x : G}, x ∈ _to_submonoid.carrier → x⁻¹ ∈ _to_submonoid.carrier),\n     C {to_submonoid := _to_submonoid, inv_mem&#39; := inv_mem&#39;}) →\n  C n\nsubgroup.sizeof : Π (G : Type u_2) [_inst_2 : group G], subgroup G → ℕ\nsubgroup.to_submonoid : Π {G : Type u_2} [_inst_2 : group G], subgroup G → submonoid G\n</pre></div>",
        "id": 193204052,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586272902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/bundled.20subgroups/near/193203318\" title=\"#narrow/stream/113489-new-members/topic/bundled.20subgroups/near/193203318\">said</a>:</p>\n<blockquote>\n<p>If you <code>extend</code> then it's probably now called something like <code>subgroup.to_submonoid.carrier</code></p>\n</blockquote>\n<p>I thought this was it also but apparently not :/</p>\n<div class=\"codehilite\"><pre><span></span>invalid field notation, type is not of the form (C ...) where C is a constant\n  subgroup.to_submonoid\nhas type\n  subgroup ?m_1 → submonoid ?m_1\n</pre></div>\n\n\n<p>I also tried this <code>(subgroup G).to_submonoid.carrier</code> but then I get</p>\n<div class=\"codehilite\"><pre><span></span>invalid field notation, type is not of the form (C ...) where C is a constant\n  ⁇\nhas type\n  ?m_1\n</pre></div>",
        "id": 193204576,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586273056
    },
    {
        "content": "<p>You have <code>subgroup.to_submonoid</code> and <code>submonoid.carrier</code> so now it's just a jigsaw puzzle</p>",
        "id": 193206073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586273629
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">G</span><span class=\"o\">,</span>  <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193206534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586273802
    },
    {
        "content": "<p>This works!<br>\n<code>instance has_coe'' : has_coe (subgroup G) (set G) := { coe := λ G, (subgroup.to_submonoid G).carrier }</code></p>",
        "id": 193207853,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586274369
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 193207866,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586274376
    },
    {
        "content": "<p>Do you understand dot notation?</p>",
        "id": 193207901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586274393
    },
    {
        "content": "<p>I should say first that my choice of <code>G</code> for the variable was very poor :-/</p>",
        "id": 193207950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586274424
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span>  <span class=\"o\">(</span><span class=\"n\">subgroup</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 193208022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586274461
    },
    {
        "content": "<p>I would say I understand it but I feel that whenever I say that I don't really understand it</p>",
        "id": 193208031,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586274468
    },
    {
        "content": "<p>So <code>H</code> is a subgroup of <code>G</code>, so it has type <code>subgroup &lt;something&gt;</code></p>",
        "id": 193208132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586274494
    },
    {
        "content": "<p>and that means that if you ever write <code>subgroup.blah H</code> you might have been able to type <code>H.blah</code></p>",
        "id": 193208189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586274518
    },
    {
        "content": "<p>Right, like <code>instance : has_coe (subgroup G) (set G) := { coe := λ K, K.to_submonoid.carrier }</code></p>",
        "id": 193208259,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586274548
    },
    {
        "content": "<p>I guess it's because we use dot notation twice here (the other dot is the same as <code>submonoid.carrier (K.to_submonoid)</code> because <code>K.to_submonoid</code> has type <code>submonoid &lt;something&gt;</code>) that you can't get away with <code>subgroup.to_submonoid.carrier</code>.</p>",
        "id": 193208495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586274649
    }
]