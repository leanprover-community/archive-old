[
    {
        "content": "<p>It is not clear to me how one should work with <code>finset</code>s. <br>\nI was willing to formulate a variant of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finpartition.sum_card_parts\">docs#finpartition.sum_card_parts</a> where the partition is not finite a priori,<br>\nbut just finite because the ambient set is finite.<br>\nIn the course of it, I was needed to prove that for a <code>fintype X</code>,  any <code>c : set(set X)</code>is itself finite.<br>\nThat worked out (see the mwe below), at the price of noncomputability — which I don't understand.<br>\nOn the other hand, it is not clear to me neither why Lean couldn't find the instance itself.<br>\nAny explanation will be welcome !</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.setoid.partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fintype_of_set</span> <span class=\"o\">[</span><span class=\"n\">hfX</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">fin_ssX</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">set.fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.finite.fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.finite.of_fintype</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">card_of_partition_eq</span> <span class=\"o\">[</span><span class=\"n\">hfX</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">setoid.is_partition</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">fintype</span> <span class=\"n\">b</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">c.to_finset</span><span class=\"o\">,</span> <span class=\"n\">fintype.card</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 273894834,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646263407
    },
    {
        "content": "<p>Your first instance is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a> combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.fintype\">docs#set.fintype</a> and a decidability instance that you didn't have.</p>",
        "id": 273896018,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646263996
    },
    {
        "content": "<p>Long story short for decidability, a <code>finset</code> can be enumerated, so when constructing one you must ensure you do not add twice the same element.</p>",
        "id": 273896187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646264125
    },
    {
        "content": "<p>In another world I believe we could get rid of those decidability conditions by defining <code>finset</code> directly as the quotient of <code>list</code> under the extensionality relation, rather than as the subtype of nodup <code>multiset</code>s. This seems to be the gist of the difference between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp\">docs#finsupp</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dfinsupp\">docs#dfinsupp</a>.</p>",
        "id": 273896314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646264225
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> has a better explanation?</p>",
        "id": 273896342,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646264241
    },
    {
        "content": "<p>Maybe we should make some instances for <code>set.finite</code> in the presence of <code>nonempty (fintype X)</code>?</p>",
        "id": 273898800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646265609
    },
    {
        "content": "<p>We should mostly have a <code>finite</code> typeclass, as Yury wanted.</p>",
        "id": 273899137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646265705
    },
    {
        "content": "<p>I'm afraid however that this will only bring confusion around the finiteness conundrum.</p>",
        "id": 273899231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646265736
    },
    {
        "content": "<p>There's already a profusion of options.</p>",
        "id": 273899242,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646265752
    },
    {
        "content": "<p>But we do have a <code>finite</code> typeclass -- it's <code>nonempty (fintype X)</code></p>",
        "id": 273899289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646265787
    },
    {
        "content": "<p>Basically finsets are hard to use if you're a beginner or are coming to things with a mathematical viewpoint and have no interest in decidability, and I wonder whether it's worth exploring more the nonconstructive versions of these things. With polynomials we liked it so much that we switched</p>",
        "id": 273899449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646265876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> To get rid of the decidability assumption in subtype.fintype requires more than just quotienting lists by extensionality; this eliminates the need for the elements of the list to be distinct, but not for them to be elements of the base type <code>A</code> in the first place. If you have a <code>list X</code> covering all the elements of <code>X</code> and want a list of elements of <code>{x : X // p x}</code> covering <code>{x : X // p x}</code>, you have to decide for each original element whether to keep it (if <code>p x</code> is true) or discard it (if <code>p x</code> is false). If you discard an element you needed to keep then it might not cover all the elements of <code>{x : X // p x}</code>, and if you keep an element you need to discard then you can't fit it in the type <code>{x : X // p x}</code>. So you need to decide <code>p x</code> to determine the list.</p>",
        "id": 273958728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646306920
    },
    {
        "content": "<p>I am ready to try to understand the decidability issues, they quite interest me. But what I need above all is some directions for how we use those (fin)sets and (fin)types.<br>\nAn explanation.<br>\nI formalized some results from Wielandt's <em>Finite permutation groups</em>. A lot of it is about group actions an arbitrary sets, but part of it requires that the sets be finite.  <br>\nShould the general stuff be duplicated (eliminating decidability issues in the finset case) ? <br>\nOtherwise, should the relevant hypothesis be a <code>fintype</code> instance? or add a <code>set.finite</code> assumption?<br>\nThis is here that I need directions/advices.</p>",
        "id": 273971615,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646314029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> If you can figure out how to effectively work with finiteness in lean, please do let us all know! (It's been a huge pain for a lot of us for quite some time.)</p>\n<p>More seriously, I think it's a matter of getting to know the API, which is perhaps not so intuitive. Here are a few examples to get started. If you want to know how to do something else, let me know!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S.finite</span> <span class=\"o\">:=</span> <span class=\"n\">set.finite.of_fintype</span> <span class=\"n\">S</span> <span class=\"c1\">-- found using library search</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">set.finite.of_fintype</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">S.finite</span> <span class=\"o\">:=</span> <span class=\"n\">set.finite.of_fintype</span> <span class=\"n\">S</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 273992558,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1646322800
    },
    {
        "content": "<p>(Note that lean does indeed find that last instance, but as Yaël mentioned, one has to deal with decidability, hence the <code>open_locale classical</code> line, or the <code>decidable_pred</code> parameter)</p>",
        "id": 273993658,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1646323175
    }
]