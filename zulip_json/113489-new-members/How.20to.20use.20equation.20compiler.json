[
    {
        "content": "<p>I have a proof of zero_mult theorem: <br>\n--theorem zero_mult (n : nat) : 0 * n = 0 :=<br>\n--nat.rec_on n<br>\n--(show 0 * 0 = 0, by refl)<br>\n--(assume n,<br>\n-- assume ih: 0 * n = 0,<br>\n-- show 0 * succ n = 0, from <br>\n-- calc<br>\n-- 0 * succ n = 0 * n: by refl<br>\n-- ...        = 0 : by rw ih<br>\n--)<br>\nAnd I am trying to rewrite it using equation compiler:<br>\ntheorem zero_mult (n : nat) : 0 * n = 0 <br>\n| 0 := rfl<br>\n|(succ n) :=<br>\ncalc<br>\n0 * succ n = 0 * n: by refl<br>\n...        = 0 : by rw (zero_mult n)</p>\n<p>Lean says:<br>\nfunction expected at<br>\n  zero_mult<br>\nterm has type<br>\n  0 * n = 0<br>\nWhy? How am I supposed to do this?</p>",
        "id": 190763655,
        "sender_full_name": "Viktoriya Malyasova",
        "timestamp": 1584383993
    },
    {
        "content": "<p>The equation compiler will only match arguments to the right of the colon (<code>:</code>), so to make it work your declaration should look like: <code>theorem zero_mult : ∀ (n : nat), 0 * n = 0</code>.</p>",
        "id": 190764318,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1584384437
    },
    {
        "content": "<p>By the way, when posting Lean code here you can wrap it in three backticks on both sides to have it pretty-printed, like so (you can click \"View source\" on my message to see what I typed in):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">zero_mult</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n    <span class=\"bp\">...</span>              <span class=\"bp\">=</span> <span class=\"mi\">0</span>     <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">zero_mult</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 190764440,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1584384506
    },
    {
        "content": "<p>Thank you so much!!!</p>",
        "id": 190786121,
        "sender_full_name": "Viktoriya Malyasova",
        "timestamp": 1584396477
    }
]