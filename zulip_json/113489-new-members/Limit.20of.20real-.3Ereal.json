[
    {
        "content": "<p>I have <code>f : real -&gt; real</code> and I want to say \"\\lim_{x \\to \\infty} f x = 1\". Should I define lim using epsilon-delta, or is there some higher-level construct I can use?</p>",
        "id": 208897439,
        "sender_full_name": "Iocta",
        "timestamp": 1599086321
    },
    {
        "content": "<p>One of the tutorials uses epsilon delta, but I don't see that in mathlib</p>",
        "id": 208897595,
        "sender_full_name": "Iocta",
        "timestamp": 1599086428
    },
    {
        "content": "<p>The mathlib way to formulate what you want to prove is <code>filter.tendsto f at_top (nhds 1)</code>. See <a href=\"https://leanprover-community.github.io/theories/topology.html\">https://leanprover-community.github.io/theories/topology.html</a></p>",
        "id": 208898303,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1599086891
    },
    {
        "content": "<p>How do I write left- and right-hand limits? \"The limit at x of f from the left is 1\"</p>",
        "id": 209132650,
        "sender_full_name": "Iocta",
        "timestamp": 1599247837
    },
    {
        "content": "<p>(or do we not do that?)</p>",
        "id": 209133783,
        "sender_full_name": "Iocta",
        "timestamp": 1599248582
    },
    {
        "content": "<p><code>tendsto f (ùìù[Iio x] x) (ùìù 1)</code></p>",
        "id": 209133873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599248643
    },
    {
        "content": "<p>Using notations for <code>nhds_within</code> and <code>nhds</code></p>",
        "id": 209133908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599248673
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/algebra/ordered.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/algebra/ordered.lean</a></p>",
        "id": 209133938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599248698
    },
    {
        "content": "<p>Or <code>tendsto f (ùìù[Iic x] x) (ùìù 1)</code> if you want to include the point <code>x</code> itself</p>",
        "id": 209133952,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1599248708
    },
    {
        "content": "<p>Indeed the specification was vague here.</p>",
        "id": 209133979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599248725
    },
    {
        "content": "<p>If you're struggling with filters then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.tendsto_nhds_within_nhds\">docs#metric.tendsto_nhds_within_nhds</a> will probably help bridging between this and more familiar things.</p>",
        "id": 209134077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599248799
    },
    {
        "content": "<p>You also need to know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Iic\">docs#set.Iic</a> and its friends.</p>",
        "id": 209134135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599248841
    },
    {
        "content": "<p>Oh that reminds me I started working on a PR adding more lemmas like this one about translating filters to epsilons, I should finish it at some point</p>",
        "id": 209134257,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1599248927
    },
    {
        "content": "<p>does mathlib have something like \"When X has distribution F with the form F(x) \\int_\\infty^x f(y)dy, we say that X has density function f\"?</p>",
        "id": 209135208,
        "sender_full_name": "Iocta",
        "timestamp": 1599249626
    },
    {
        "content": "<p>does density_function want to be a type, or a Prop-valued function, or a structure?</p>",
        "id": 209135667,
        "sender_full_name": "Iocta",
        "timestamp": 1599249902
    },
    {
        "content": "<p>I want to say \"as x -&gt; infty, { w | X w &lt; x } -&gt; univ\" in the <code>have</code>.  I think that means filling the <code>_</code> with  \"neighborhoods surrounding <code>univ</code>\". How can I do that?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">big_operators</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>  <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">Œ©</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"err\">Œ©</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"err\">Œ©</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">probability_measure</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"err\">Œ©</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">sets_valued_below</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">Œ©</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">œâ</span> <span class=\"bp\">|</span> <span class=\"n\">X</span> <span class=\"n\">œâ</span> <span class=\"bp\">‚â§</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">sets_valued_below</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lim_infty_F_eq_1</span> <span class=\"o\">:</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">sets_valued_below</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n\n  <span class=\"o\">},</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209329904,
        "sender_full_name": "Iocta",
        "timestamp": 1599515967
    },
    {
        "content": "<p>In other words, how do you say a sequence of sets converges to <code>univ</code>?</p>",
        "id": 209334494,
        "sender_full_name": "Iocta",
        "timestamp": 1599522122
    },
    {
        "content": "<p>Do you have a plan for what to do next?</p>",
        "id": 209336816,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599525613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> The idea is, if  {X &lt;= x} converges to univ as x converges to infinity, and <code>p univ = 1</code> by <code>measure_univ</code>,  then <code>F</code> should converge to 1 too.</p>",
        "id": 209338721,
        "sender_full_name": "Iocta",
        "timestamp": 1599529050
    },
    {
        "content": "<p>tbh I'm not sure if I'm making reasonable progress or I'm in over my head. If it seems like I should work on something easier instead that would be useful feedback for me.</p>",
        "id": 209338989,
        "sender_full_name": "Iocta",
        "timestamp": 1599529547
    },
    {
        "content": "<p>Okay, but is there actually a lemma that will allow you to conclude that the measures tend to 1?</p>",
        "id": 209339052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599529633
    },
    {
        "content": "<p>If there is, you can take a look at its statement to see what form the hypothesis takes.</p>",
        "id": 209339062,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599529666
    },
    {
        "content": "<p>If there isn't, then you have to prove it yourself and figuring out how will probably guide you to the right statement.</p>",
        "id": 209339127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599529795
    },
    {
        "content": "<p>I have no idea how hard this is as I'm not familiar with the measure theory library.</p>",
        "id": 209339169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599529808
    }
]