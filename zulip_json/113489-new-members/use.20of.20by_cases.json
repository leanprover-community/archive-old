[
    {
        "content": "<p>a b : nat<br>\nWhy does by_cases a ≤ b gives me the message \"by_cases tactic failed, type of given expression is not decidable\"?</p>",
        "id": 239601228,
        "sender_full_name": "Lu-Ming Zhang",
        "timestamp": 1621521008
    },
    {
        "content": "<p>can you share <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? this works for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 239602640,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1621521501
    },
    {
        "content": "<p>Sorry. Here is a clarification. I am at Level 9 of the inequality world of the natural number game. Hence, a b: mynat.<br>\nThen inputting by_cases a ≤ b gives me the above error message,</p>",
        "id": 239604018,
        "sender_full_name": "Lu-Ming Zhang",
        "timestamp": 1621522000
    },
    {
        "content": "<p>Oh hard luck :-) It looks like I did not prove decidability of &lt;= on the NNG version of the natural numbers! I am slightly surprised that everything is not running in classical mode though (where every statement would be decidable) because Freek Wiedijk already complained about this months ago and I thought I fixed it!</p>",
        "id": 239609434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621523861
    },
    {
        "content": "<p>Oh -- the good news is that the version of mathlib we're using has the <code>classical</code> tactic, so you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">classical</span><span class=\"o\">,</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 239609736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621523976
    },
    {
        "content": "<p>I thought <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#by_cases\">tactic#by_cases</a> automatically tried classical anyway?</p>",
        "id": 239611034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621524476
    },
    {
        "content": "<p>(it does: <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/library/init/meta/tactic.lean#L1567\">https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/library/init/meta/tactic.lean#L1567</a>)</p>",
        "id": 239611322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621524600
    },
    {
        "content": "<p>Ah, only since <a href=\"https://github.com/leanprover-community/lean/issues/409\">leanprover-community/lean#409</a>. I guess NNG is on lean &lt; 3.18.0?</p>",
        "id": 239611586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621524692
    },
    {
        "content": "<p>It's definitely on 3.4.2.</p>",
        "id": 239614591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621525818
    },
    {
        "content": "<p>It's officially MS-sanctioned Lean :-)</p>",
        "id": 239614638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621525833
    },
    {
        "content": "<p>(apart from the fact that many of the tactics I teach got slightly modified)</p>",
        "id": 239614793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621525898
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/H2ksepVfjaO_nKX2D73kEXKN/hack.png\">hack.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/H2ksepVfjaO_nKX2D73kEXKN/hack.png\" title=\"hack.png\"><img src=\"/user_uploads/3121/H2ksepVfjaO_nKX2D73kEXKN/hack.png\"></a></div>",
        "id": 239615023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621525995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thanks for your explanation! What does \"decidability\" mean in Lean?</p>",
        "id": 239714654,
        "sender_full_name": "Lu-Ming Zhang",
        "timestamp": 1621585798
    },
    {
        "content": "<p><code>h : decidable p</code> is a proof that \"<code>p : Prop</code> is decidable\" (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable\">docs#decidable</a>)</p>",
        "id": 239718027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1621587425
    },
    {
        "content": "<p><code>≤</code> is decidable for natural numbers because there's a computer algorithm that can tell you for any two <code>a b : ℕ</code> whether <code>a</code> is less than <code>b</code>. There is no such algorithm for e.g. real numbers (basically because the decimals go on forever) so <code>≤</code> is not decidable for real numbers.</p>",
        "id": 239718623,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621587738
    },
    {
        "content": "<p>&lt;= is decidable for the natural number game type <code>mynat</code>, however I did not prove this in the repo and this is why you got the error.</p>",
        "id": 239722245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621589628
    }
]