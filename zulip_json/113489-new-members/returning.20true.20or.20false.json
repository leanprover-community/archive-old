[
    {
        "content": "<p>Hi all! </p>\n<p>I am currently discovering Lean v.3, and enjoying it really at the moment. I am looking for a way to let Lean return \"true\" or \"false\", given a hypothetical proof of an \"example\" . For example, if I have the standard proof of p -&gt; p, in a file prop.lean, running lean prop.lean in the terminal just stays silent, showing that the proof does not yield any problem. If I remove the last sentence, Lean tells me that there are unsolved goals. However, I want to simplify the latter to the return of \"False\", and the first to the return of \"True\". Can anyone hint me towards a solution to this?</p>",
        "id": 273628930,
        "sender_full_name": "ebp",
        "timestamp": 1646135848
    },
    {
        "content": "<p>In fact, this question generalizes to the question on how to decide what output lean prop.lean gives, and how to influence this output.</p>",
        "id": 273645202,
        "sender_full_name": "ebp",
        "timestamp": 1646143505
    },
    {
        "content": "<p>I don't think you can easily influence Lean's output from within Lean. However, you can write a shell script that checks the exit code of <code>lean prop.lean</code> and prints \"True\" if 0, \"False\" otherwise.</p>\n<p>However, this feels a bit like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. What are you trying to do that makes you want this behaviour?</p>",
        "id": 273645878,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646143738
    },
    {
        "content": "<p>Ultimately I would like to be able to influence the output in order to implement Lean in a larger \"infrastructure\". I suspect it to be the case that doing this in Lean itself would give me more \"hold\" on this than doing it in the shell itself.  </p>\n<p>I thought that just like  you are able to print something like \"Hello world\" from a script, it would be possible to print other things depending on the status of a proof of an example.</p>",
        "id": 273647115,
        "sender_full_name": "ebp",
        "timestamp": 1646144277
    },
    {
        "content": "<p>I see. Afaik Lean 3 doesn't provide this capability, so the shell is your best bet (or forking Lean). In Lean 4 it might be possible to override the elaboration function for commands like <code>example</code> from within the system. But this is probably not so easy either.</p>",
        "id": 273647948,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1646144600
    },
    {
        "content": "<p>Ah, allright. Thanks! I will work with shell scripts for now, but would love to hear if anyone has an alternative idea!</p>",
        "id": 273650632,
        "sender_full_name": "ebp",
        "timestamp": 1646145770
    },
    {
        "content": "<p>I'd agree nothing seems like it could be easier than <code>lean foo.lean &amp;&amp; echo \"True\" || echo \"False\"</code> but if you have other constraints that make you not want to do that you probably should share them.</p>",
        "id": 273652771,
        "sender_full_name": "Julian Berman",
        "timestamp": 1646146614
    }
]