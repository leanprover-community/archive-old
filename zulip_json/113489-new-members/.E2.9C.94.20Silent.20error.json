[
    {
        "content": "<p>Hi,<br>\nI recently encountered this behavior of Lean that looks peculiar to me: if I take this mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test1</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">):</span>\n  <span class=\"mi\">0</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>the problem is not well-posed since for <code>n=0</code>, <code>f (-1)</code> should not be defined given the domain of definition of <code>f</code>. However lean does not raise any error (I would expect a <code>has_neg \\nat</code> when using <code>specialize</code>or something like that) and the consequence is that you can show <code>false</code> from this. What strikes me is that lean seems to automatically considers that <code>f (-1) = f 0</code> just like in this example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">test2</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">xx</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">xx</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>where the state before the \"sorry\" is  <code>0 &lt; f 0 + 1</code>. In contrast, of course, when trying to add for instance the assumption <code>(h: f (-1) = 1)</code> lean complains and asks for has_neg \\nat.</p>\n<p>Is this normal ? EDIT: It looks like it is because of the definition the substraction in nat so I guess this is normal just a little confusing at first :)</p>",
        "id": 262615008,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1637773189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411224\">Amaury Hayat</span> has marked this topic as resolved.</p>",
        "id": 262615468,
        "sender_full_name": "Notification Bot",
        "timestamp": 1637773365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411224\">Amaury Hayat</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Silent.20error/near/262615008\">said</a>:</p>\n<blockquote>\n<p>Is this normal ? EDIT: It looks like it is because of the definition the substraction in nat so I guess this is normal just a little confusing at first :)</p>\n</blockquote>\n<p>Exactly, this is an artifact of Lean's definition of subtraction on naturals. The alternatives are returning a \"useless\" value in <code>ℕ</code> or changing the type of subtraction to have the form <code>ℕ → ℕ → option ℕ</code> (returning an explicit \"incorrect\" value), or changing the type of the function to  <code>Π (x : ℕ) (y ≤ x), ℕ</code> (requiring a proof that the subtraction is well-defined before it's possible to subtract). In our experience, returning a \"useless\" value works best, since we can postpone all proof obligations rather than filling them in at the moment of usage.</p>",
        "id": 262616976,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1637774124
    },
    {
        "content": "<p>From a mathematic point of view often it's better to avoid to use subtraction in <code>N</code> and work directly with <code>Z</code> (but not always of course). Division has the same problem</p>",
        "id": 262625646,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1637778806
    },
    {
        "content": "<p>Thanks for the clarifications !</p>",
        "id": 262626419,
        "sender_full_name": "Amaury Hayat",
        "timestamp": 1637779288
    }
]