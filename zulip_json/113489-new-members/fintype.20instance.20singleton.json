[
    {
        "content": "<p>This works, but there must be an easier way to do supply a <code>fintype</code> instance for γ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">my_inst</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.mk</span> <span class=\"o\">{</span><span class=\"n\">γ.q</span><span class=\"o\">}</span> <span class=\"o\">(</span>\n  <span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">γ.q</span><span class=\"o\">},</span> <span class=\"k\">from</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">γ.q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">γ.rec_on</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">γ.q</span> <span class=\"bp\">=</span> <span class=\"n\">γ.q</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n    <span class=\"n\">finset.mem_singleton.mpr</span> <span class=\"n\">h1</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 291762888,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1659471396
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">my_inst</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨{</span><span class=\"n\">γ.q</span><span class=\"o\">},</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩,</span> <span class=\"n\">simp</span> <span class=\"o\">}⟩</span>\n</code></pre></div>",
        "id": 291763371,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1659471620
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n\n<span class=\"c1\">-- or @[derive [fintype, decidable_eq]]</span>\n<span class=\"kd\">@[derive [fintype]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">γ</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">γ.fintype</span>\n</code></pre></div>",
        "id": 291763417,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659471645
    },
    {
        "content": "<p><code>@[derive fintype]</code> is also valid syntax, since you're deriving only one instance</p>",
        "id": 291763621,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1659471742
    },
    {
        "content": "<p>If you also want <code>unique</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">γ.q</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a.rec_on</span> <span class=\"n\">rfl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">unique.fintype</span>\n</code></pre></div>",
        "id": 291763814,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1659471841
    },
    {
        "content": "<p>It gives you <code>fintype</code>, <code>subsingleton</code> and <code>inhabited</code></p>",
        "id": 291764216,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1659472020
    },
    {
        "content": "<p>Sweet... I  probably want <code>unique</code></p>",
        "id": 291764260,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1659472047
    },
    {
        "content": "<p>I guess instead of using <code>@[derive [fintype]]</code> one can just use the pre-defined</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">star</span> <span class=\"o\">:</span> <span class=\"n\">unit</span>\n</code></pre></div>",
        "id": 292230640,
        "sender_full_name": "Bjørn Kjos-Hanssen",
        "timestamp": 1659757293
    }
]