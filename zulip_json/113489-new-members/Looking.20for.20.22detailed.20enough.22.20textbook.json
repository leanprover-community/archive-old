[
    {
        "content": "<p>As an exercise that's substantial, I'd like to formalize a chunk of math from the ground up. Take it as an extended tutorial, if you will ;-).</p>\n<p>Can you suggest a textbook about Algebra that would have enough detail that one can formalize it? </p>\n<p>Not quite sure how ambitious it is, if you go from the axioms, but it'd be cool if I could prove, say, the Sylow theorems.</p>",
        "id": 198139914,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589930831
    },
    {
        "content": "<p>The first Sylow theorem is proven, so perhaps you could try to do the other two?</p>",
        "id": 198139971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589930883
    },
    {
        "content": "<p>or does \"from the ground up\" mean no mathlib?</p>",
        "id": 198140007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589930912
    },
    {
        "content": "<p>At least in the beginning it would mean no mathlib. The goal is to get familiar with writing proofs in lean.</p>",
        "id": 198140045,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589930963
    },
    {
        "content": "<p>You don't necessarily have to compromise on \"from the ground up\" even if you use mathlib; just study the mathlib source material that you want to use very carefully</p>",
        "id": 198140053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589930978
    },
    {
        "content": "<p>which as a side benefit will teach you a whole lot about new tactics and how to write proofs in mathlib style</p>",
        "id": 198140109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931014
    },
    {
        "content": "<p>If you look at <code>algebra.group</code>, it's all pretty easy to follow</p>",
        "id": 198140124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931039
    },
    {
        "content": "<p>Then there's also the fact, that I got my degree 10 years ago and don't know any of the proofs anymore, lol :P.</p>",
        "id": 198140147,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931062
    },
    {
        "content": "<p>wikipedia is your friend :)</p>",
        "id": 198140159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931076
    },
    {
        "content": "<p>would the proofs there have enough detail?!</p>",
        "id": 198140170,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931094
    },
    {
        "content": "<p>For sylow, there was enough for me to vaguely follow along enough to formalize</p>",
        "id": 198140184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931122
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Sylow_theorems#Proof_of_the_Sylow_theorems\">https://en.wikipedia.org/wiki/Sylow_theorems#Proof_of_the_Sylow_theorems</a></p>",
        "id": 198140241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931150
    },
    {
        "content": "<p>there is some stuff about p-groups that I hadn't heard of but nothing crazy</p>",
        "id": 198140267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931174
    },
    {
        "content": "<p>and you need the orbit stabilizer theorem</p>",
        "id": 198140315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931203
    },
    {
        "content": "<p>Ya, I'll need to read up on the basics again. (Hence the textbook, too)</p>",
        "id": 198140378,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931243
    },
    {
        "content": "<p>other than that it's just a clever choice of set for the group to act on so that the orbit stabilizer theorem applies</p>",
        "id": 198140398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931266
    },
    {
        "content": "<p>does sound doable, then</p>",
        "id": 198140426,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931307
    },
    {
        "content": "<p>I've managed to get surprisingly far doing formalization without ever really using a textbook cover to cover, but most of the stuff I do is \"general knowledge\" mathematics</p>",
        "id": 198140448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931351
    },
    {
        "content": "<p>for individual theorems with complicated proofs it can sometimes be helpful to shop around for a textbook with a good proof of it, but the overall architecture of how to string theorems together into a library of results is up to you</p>",
        "id": 198140525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931414
    },
    {
        "content": "<p>Ya, see, when I was doing the math olympiad one, I actually enjoyed lean.</p>",
        "id": 198140531,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931421
    },
    {
        "content": "<p>Having the context around is quite useful when you don't have a clue what you're proving. And just looking around.</p>",
        "id": 198140550,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931445
    },
    {
        "content": "<p>right, if you are just thinking \"let's do group theory\" a textbook is a good way to turn that into some concrete goals</p>",
        "id": 198140569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931476
    },
    {
        "content": "<p>Well, that was kind of the idea, to be honest.</p>",
        "id": 198140620,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931502
    },
    {
        "content": "<p>but another way to get concrete goals is \"let's do sylow's theorems\" -&gt; \"let's do orbit stabilizer theorem\" -&gt; \"what's a group action\" -&gt; \"what's a group\" and build from there</p>",
        "id": 198140633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931527
    },
    {
        "content": "<p>Yep, I could do that as well. Try to state the theorem and notice what definitions you are missing.</p>",
        "id": 198140653,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931564
    },
    {
        "content": "<p>the advantage of the latter method is that you are always building something with the applications in mind, so you are less likely to write it in a way where it doesn't actually easily apply to the application domain</p>",
        "id": 198140720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931612
    },
    {
        "content": "<p>Yup, sounds interesting for sure.</p>",
        "id": 198140739,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931659
    },
    {
        "content": "<p>when you are thinking \"let's do group theory\" this is a real concern, and when you are working from a textbook you might end up writing in a style that is too similar to the textbook, which fits the author's applications more than yours</p>",
        "id": 198140759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931704
    },
    {
        "content": "<p>it's like tactic mode, you work backward from the goal rather than forward into the unknown</p>",
        "id": 198140850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931787
    },
    {
        "content": "<p>It might be an interesting challenge to take a valid proof of the theorems and then refactor them to be based on mathlib.</p>",
        "id": 198140884,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931828
    },
    {
        "content": "<p>obviously it should be possible.</p>",
        "id": 198140888,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931841
    },
    {
        "content": "<p>I think that's what formalization is</p>",
        "id": 198140931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589931850
    },
    {
        "content": "<p>Right now I'm not quite sure yet, where I see lean in my workflow.</p>",
        "id": 198140954,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931881
    },
    {
        "content": "<p>Most of what I do are algorithms but occasionally I like to prove some properties about the underlying objects are true.</p>",
        "id": 198140985,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931932
    },
    {
        "content": "<p>For instance not too long ago, I noticed that some criterion I used for optimization turned out to be an iff statement.</p>\n<p>So I used that property to completely change the underlying data structure.</p>",
        "id": 198141071,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589931988
    },
    {
        "content": "<p>And pretty much all I do is discrete math, anyway.</p>",
        "id": 198141140,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589932024
    },
    {
        "content": "<p>I'm thinking lean might be useful for modelling the objects and proving properties (not really program verification)</p>",
        "id": 198141179,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589932080
    },
    {
        "content": "<p>and having the proof state is great</p>",
        "id": 198141228,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589932095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Looking.20for.20.22detailed.20enough.22.20textbook/near/198139971\">said</a>:</p>\n<blockquote>\n<p>The first Sylow theorem is proven, so perhaps you could try to do the other two?</p>\n</blockquote>\n<p>Per entry 72 at <a href=\"https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md\">https://github.com/leanprover-community/mathlib/blob/100-thms/docs/100-theorems.md</a>, we do actually have the other two</p>",
        "id": 198155047,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589950820
    },
    {
        "content": "<p>More precisely, there is a repo by <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  with these proofs. They were never PR'd to <code>mathlib</code>.</p>",
        "id": 198155288,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589951203
    },
    {
        "content": "<p>I'll probably get round to PRing them after my exams finis.</p>",
        "id": 198158436,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589955290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> if what you do now is mostly discrete maths then why don't you do some graph theory? Weren't there people working on this?</p>",
        "id": 198163400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589960059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That's a fine question. The answer is that I just didn't think too deeply about the choices. When I finished or was close to finishing the tutorial, Algebra happened to the first thing that came to mind.</p>\n<p>I tend to associate Algebra mostly with things like the operations that may be allowed in a puzzle like a Rubik's cube or cryptography. Both of which would count as discrete. </p>\n<p>That said, you are absolutely right about graph theory. That's actually something I use really a lot, so I think I will go with that, thanks.</p>\n<p>My very next project though will be formalising some basic statements about n-way cartesian products. Specifically, how cartesian products commute with union, intersection and complement.</p>\n<p>I recently was implementing a set datastructure that uses cartesian products as building blocks. So I know the domain and what properties I want proven.</p>\n<p>Yet, I need to find a way how to formulate an n-way product - probably just built up inductively from pairs is fine, not sure.</p>",
        "id": 198179228,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589970648
    },
    {
        "content": "<p>What do you call an n-way product? Do you mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> or the general case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\prod_{i=1}^n X_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 198180020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589971168
    },
    {
        "content": "<p>The idea is, that I'm representing a set consisting of n dimensions. If a particular subset happens to be a cartesian product, i.e. there exist subsets of each dimension such that their product is the same set, then we only store that information as a \"product of\" along with the projections. </p>\n<p>So I need the general prod construct.</p>",
        "id": 198181057,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589971795
    },
    {
        "content": "<p>Ok, so you want </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">product</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">$</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I don't if we have supporting lemmas for this definition.</p>",
        "id": 198181836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589972235
    },
    {
        "content": "<p>Thanks! And please don't worry about the lemmas, I want to prove the properties myself anyway. I've done it on paper a while ago so it should be pretty straight-forward. I only need length and set union on each of the components, those are easy to write.</p>",
        "id": 198182338,
        "sender_full_name": "Daniel Fabian",
        "timestamp": 1589972546
    }
]