[
    {
        "content": "<p>Why is this not solved by linarith? at first i thought it might be because 0-1 would not make sense, but adding the positivity of j did not help.<br>\nits part of a longer poof but i have included all the imports in case they might be the problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mytest</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 258198826,
        "sender_full_name": "Elias Fåkvam",
        "timestamp": 1634651897
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"443251\">@Elias Fåkvam</span> i am also noob here but, as far as I know linarith is not able to find the contradiction (0 &lt; 0) just from (j &gt; 0) and (j - 1 &gt;= j) as linear combinations with nat numbers would not give 0 here. Gimme a sec and I'll provide some more insights here. Any others plz correct me!</p>",
        "id": 258201499,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634652872
    },
    {
        "content": "<p>Maybe this might make it more clear:<br>\nu can use <code>set_option trace.linarith true</code> for peeking what's going on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">split</span> <span class=\"n\">hypotheses</span>\n<span class=\"n\">linarith</span> <span class=\"n\">is</span> <span class=\"n\">running</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">hypotheses</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">j</span><span class=\"o\">]</span>\n<span class=\"n\">Preprocessing</span><span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">terms</span> <span class=\"n\">that</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"n\">proofs</span> <span class=\"n\">of</span> <span class=\"n\">comparisons</span>\n<span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"n\">Preprocessing</span><span class=\"o\">:</span> <span class=\"n\">replace</span> <span class=\"n\">negations</span> <span class=\"n\">of</span> <span class=\"n\">comparisons</span>\n<span class=\"o\">[</span><span class=\"n\">j</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">≥</span> <span class=\"n\">j</span><span class=\"o\">]</span>\n<span class=\"n\">Preprocessing</span><span class=\"o\">:</span> <span class=\"n\">move</span> <span class=\"n\">nats</span> <span class=\"n\">to</span> <span class=\"n\">ints</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">]</span>\n<span class=\"n\">Preprocessing</span><span class=\"o\">:</span> <span class=\"n\">strengthen</span> <span class=\"n\">strict</span> <span class=\"n\">inequalities</span> <span class=\"n\">over</span> <span class=\"n\">int</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"n\">j</span><span class=\"o\">]</span>\n<span class=\"n\">Preprocessing</span><span class=\"o\">:</span> <span class=\"n\">make</span> <span class=\"n\">comparisons</span> <span class=\"k\">with</span> <span class=\"n\">zero</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-↑</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"n\">Preprocessing</span><span class=\"o\">:</span> <span class=\"n\">cancel</span> <span class=\"n\">denominators</span>\n<span class=\"o\">[</span><span class=\"bp\">-↑</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"n\">after</span> <span class=\"n\">preprocessing</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"n\">has</span> <span class=\"mi\">4</span> <span class=\"n\">facts</span><span class=\"o\">:</span>\n<span class=\"o\">[</span><span class=\"bp\">-↑</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">-↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"n\">hypotheses</span> <span class=\"n\">appear</span> <span class=\"k\">in</span> <span class=\"mi\">1</span> <span class=\"n\">different</span> <span class=\"n\">types</span>\n</code></pre></div>",
        "id": 258202512,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634653188
    },
    {
        "content": "<p>u can read resources on Fourier–Motzkin elimination from wiki and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/linarith/elimination.html\">https://leanprover-community.github.io/mathlib_docs/tactic/linarith/elimination.html</a> to get what linarith uses. <del>Here at the last line above u can observe that linear combinations of the facts with natural number coefficients greater than one is not possible for <code>linarith</code> to find contradiction 0 &lt; 0 so it is failing. Hope this helps.</del> lemme know it u need more insights!</p>",
        "id": 258203380,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634653487
    },
    {
        "content": "<p>Its interesting tho, since it should be able to find the contradiction using   <code> -1 + (j - (j -1)) </code> this should be both zero and less than 0! <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> can u take a look here? is due to lack of treatment of - - 1 -&gt; 1?</p>",
        "id": 258207173,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634654667
    },
    {
        "content": "<p>I am no <code>linarith</code> expert but the problem is that it doesn't try to replace <code>↑(j - 1)</code> with <code>↑j - 1</code>.</p>",
        "id": 258207519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634654781
    },
    {
        "content": "<p>Hmm yes! Interesting to think about the nuances here though :)</p>",
        "id": 258207710,
        "sender_full_name": "Ayush Agrawal",
        "timestamp": 1634654865
    },
    {
        "content": "<p>I'm not sure <code>linarith</code> tries to do anything with the weird nat subtraction</p>",
        "id": 258207844,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1634654903
    },
    {
        "content": "<p>Seems like it could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.zify\">docs#tactic.zify</a></p>",
        "id": 258207894,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634654922
    },
    {
        "content": "<p>linarith does use zify as a preprocessing step, it just doesn't use zify with the extra hypotheses included unfortunately. It should definitely be possible to support this if we wanted, but the obvious 1-line fix of including all hypotheses in the zify call doesn't work as it then uses the hypotheses to simplify themselves, resulting in trivial hypotheses.</p>",
        "id": 258253850,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634670215
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"443251\">@Elias Fåkvam</span> you should try and only work with less than and less than an equal to (rather than &gt; and \\ge), a long time ago mathlib made the decision that having two equivalent but distinct ways of saying the same thing wasn't worth the headache, so decided to only use &lt; and \\le, hence many tactics and lemmas won't work flawlessly with &gt; and \\ge now.</p>",
        "id": 258254201,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634670332
    },
    {
        "content": "<p>I just made <a href=\"https://github.com/leanprover-community/mathlib/issues/9822\">#9822</a> to track this.</p>",
        "id": 258332703,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634719623
    }
]