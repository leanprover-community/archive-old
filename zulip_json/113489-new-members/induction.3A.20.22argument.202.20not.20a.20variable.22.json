[
    {
        "content": "<p>Hi, I have an inductive predicate SN that takes a relation as argument (here eval), see the code snippet below. An induction over the statement <code>SN eval st</code>gives me the error: induction tactic failed, argument <a href=\"https://github.com/leanprover/mathlib/issues/2\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/2\">#2</a> of major premise type SN eval st is not a variable. </p>\n<p>Is it a problem that SN takes eval as an argument? </p>\n<div class=\"codehilite\"><pre><span></span>inductive tm  : nat -&gt; Type\n  | app : Π {ntm : nat}, tm ntm -&gt; tm ntm -&gt; tm ntm\n  /- ... -/\n\nreserve infixl `≻`:40\ninductive eval : Π {n}, tm n → tm n → Prop\ninfixl `≻` := eval\n| eappl {n} {e₁ : tm n} {e₁&#39; e₂} : e₁ ≻ e₁&#39; →  tm.app e₁ e₂ ≻ tm.app e₁&#39; e₂\n  /- ... -/\ninfix `≻` := eval\nopen eval\n\ninductive SN {n} : (tm n -&gt; tm n -&gt; Prop) → tm n -&gt; Prop\n| sn_step (R: tm n → tm n → Prop) (e1 : tm n) : (forall e2, R e1 e2 -&gt; SN R e2) -&gt; SN R e1.\n\ndefinition SNe {n} := @SN n eval.\n\ntheorem SN₁ {n} (s t : tm n) : SNe (tm.app s t) → SNe s ∧ SNe t :=\nbegin\n  intro h₁, split,\n  { generalize h₂ : (tm.app s t) = st, revert h₁, rw h₂, intro h₁, revert s t h₂,\n  induction h₁ with st hst ihst,  }\n</pre></div>",
        "id": 154266676,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1546549904
    },
    {
        "content": "<p>I get a different error on this example, <code>generalize tactic failed, failed to find expression in the target</code>, which is solved by unfolding <code>SNe</code> at <code>h1</code>. Is this the right code snippet?</p>",
        "id": 154268520,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546551646
    },
    {
        "content": "<p>Oh, I still get the induction error (on the example alone)...<br>\nUnfolding <code>SNe</code> at <code>h1</code> makes the induction tactic work, but gives me this induction hypothesis:<br>\n<code>ih_1 :\n  ∀ (e2 : tm n) (a_1 : R e1 e2),\n    (λ (_x : tm n → tm n → Prop) (st : tm n) (h₁ : SN _x st), ∀ (s t : tm n), app s t = st → SNe s) R e2 _ </code></p>\n<p>where R is added to the hypotheses, <code>R : tm n → tm n → Prop</code>. I want  <code>R</code>to be <code>eval</code>, though. How can that be done?</p>",
        "id": 154269026,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1546552172
    },
    {
        "content": "<p>Can you make <code>R</code> a parameter to <code>SN</code>? (Move it to the left of the colon in the definition of <code>SN</code>, that is.)</p>",
        "id": 154269337,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546552465
    },
    {
        "content": "<p>That produces the same induction hypothesis (but unfolding <code>SNe</code> is not needed anymore)</p>",
        "id": 154269789,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1546552944
    },
    {
        "content": "<p>I think we're either using different versions of Lean, or working on different examples.</p>",
        "id": 154269844,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1546553017
    },
    {
        "content": "<p>Ok, maybe my version is too old, I'm using 3-3-0</p>",
        "id": 154270131,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1546553342
    },
    {
        "content": "<p>I guess most people here use 3.4.1.</p>",
        "id": 154273397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546557141
    },
    {
        "content": "<p>Yeah sorry, I switched versions now and the tip with <code>R</code>as parameter works for the induction tactic. But there are problems for <code>cases</code> and <code>constructor</code>with this definiton, for example:</p>\n<div class=\"codehilite\"><pre><span></span>inductive tm  : nat -&gt; Type\n  | app : Π {ntm : nat}, tm ntm -&gt; tm ntm -&gt; tm ntm\n  /- ... -/\n\nreserve infixl `≻`:40\ninductive eval : Π {n}, tm n → tm n → Prop\ninfixl `≻` := eval\n| eappl {n} {e₁ : tm n} {e₁&#39; e₂} : e₁ ≻ e₁&#39; →  tm.app e₁ e₂ ≻ tm.app e₁&#39; e₂\n  /- ... -/\ninfix `≻` := eval\nopen eval\ninductive star {n} (R : tm n → tm n → Prop) : tm n → (tm n → Prop)\n| srefl {e} : star e e\n| sstep {e₁ e₂ e₃} :  (R e₁ e₂) → star e₂ e₃ → star e₁ e₃\nopen star\ninfix `≻*`:40 := star eval\n\ninductive SN {n} (R : tm n -&gt; tm n -&gt; Prop ) : tm n -&gt; Prop\n| sn_step (R: tm n → tm n → Prop) (e1 : tm n) : (forall e2, R e1 e2 -&gt; SN e2) -&gt; SN e1.\n\ndefinition SNe {n} := @SN n eval.\n\nlemma closed_star {n} (s t): s ≻* t -&gt; SNe s -&gt; @SNe n t :=\nbegin intros h1 h2,  induction h1 with s&#39; s&#39; t&#39; e h3 h4 ih,\n      { assumption },\n      { apply ih, cases h2,   },\nend\n</pre></div>\n\n\n<p>Cases adds a hypothesis of type <code>R : tm n → tm n → Prop</code> (similar to what happened with induction before)</p>",
        "id": 154274246,
        "sender_full_name": "Sarah Mameche",
        "timestamp": 1546557967
    },
    {
        "content": "<p>you have <code>R</code> in the <code>sn_step</code> constructor even though it's already declared, so it's a different <code>R</code></p>",
        "id": 154386747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546573333
    }
]