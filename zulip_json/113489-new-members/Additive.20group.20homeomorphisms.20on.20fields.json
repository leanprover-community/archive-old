[
    {
        "content": "<p>Since fields extend additive groups , I thought that something <code>hom_int_to_field</code> below should work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nat_to_field</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">K</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat_to_field</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">int_to_field</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">K</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat_to_field</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">nat_to_field</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">hom_int_to_field</span> <span class=\"o\">:</span> <span class=\"n\">is_add_group_hom</span> <span class=\"n\">int_to_field</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>But it doesn't -- it tells me it can't synthesise the instance. Instead, I need to create a proof that <code>K</code> is an additive group, give it a name:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">AK</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>   <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">has_add</span><span class=\"bp\">.</span><span class=\"n\">add</span><span class=\"o\">,</span>\n    <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">neg</span><span class=\"o\">,</span>\n    <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">add_left_neg</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>And then use it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">hom_int_to_field</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_add_group_hom</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">AK</span> <span class=\"o\">:</span> <span class=\"n\">add_group</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">int_to_field</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Can't I use the fact that fields are -- by definition -- additive groups?</p>",
        "id": 154907204,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547201769
    },
    {
        "content": "<p>You know about <code>int.cast</code>?</p>",
        "id": 154907306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547201937
    },
    {
        "content": "<p>It is your <code>int_to_field</code>, for arbitrary rings</p>",
        "id": 154907333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547201983
    },
    {
        "content": "<p>Oh, I didn't know it casted to a general field. Yes, <code>int.cast.is_ring_hom</code></p>",
        "id": 154907334,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547201984
    },
    {
        "content": "<p>And somewhere there must be a proof that it is a ring hom</p>",
        "id": 154907414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547202032
    },
    {
        "content": "<p>But that doesn't answer why your instance can't be found.</p>",
        "id": 154907423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547202045
    },
    {
        "content": "<p>I don't know what's wrong there.</p>",
        "id": 154907425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547202051
    },
    {
        "content": "<p>(Also, mathematician's field is <code>discrete_field</code>. For reasons that I don't get. Since I'm a mathematician <span class=\"emoji emoji-1f648\" title=\"see no evil\">:see_no_evil:</span>)</p>",
        "id": 154907451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547202080
    },
    {
        "content": "<p>Oh -- what about subfields? Is there a \"discrete subfield\"?</p>",
        "id": 154907550,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547202195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"emoji emoji-2b06\" title=\"up\">:up:</span></p>",
        "id": 154907558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547202214
    },
    {
        "content": "<p>I think every subfield of a discrete field is discrete by default</p>",
        "id": 154907566,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547202229
    },
    {
        "content": "<p>but I don't think this is in mathlib yet</p>",
        "id": 154907568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547202236
    },
    {
        "content": "<p>And discrete field homeomorphisms? Can I just use <code>is_field_hom</code>?</p>",
        "id": 154907673,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547202336
    },
    {
        "content": "<p>yes</p>",
        "id": 154907740,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547202372
    },
    {
        "content": "<blockquote>\n<p>But that doesn't answer why your instance can't be found.</p>\n</blockquote>\n<p>If I change <code>theorem</code> to <code>instance</code>, it works.</p>",
        "id": 154908228,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547202919
    },
    {
        "content": "<p>That's how they do it in mathlib.</p>",
        "id": 154908234,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1547202928
    }
]