[
    {
        "content": "<p>Hey all! I'm new to Lean and was wondering whether<br>\n1) I can use pattern matching in lambdas (<code>def fst := λ (x, y), x</code>)<br>\n2) I can use pattern matching in props</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">option</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">is_valid</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>However, it seems like I cannot use match there.</p>",
        "id": 214285701,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1603441686
    },
    {
        "content": "<p>Pattern matching in lambdas works for record types (aka structures), and may also others (I dunno)</p>",
        "id": 214286169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603441996
    },
    {
        "content": "<p>You can use <code>match</code> wherever you want</p>",
        "id": 214286183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442005
    },
    {
        "content": "<p>1) needs to use the pointy brackets in the lambda, even if you're matching on <code>prod</code> specifically</p>",
        "id": 214286608,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442324
    },
    {
        "content": "<p>/me needs better glasses to distinguish those brackets on zulip</p>",
        "id": 214286669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603442382
    },
    {
        "content": "<p>2) works if you add a type, as indicated by the error message</p>",
        "id": 214286682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603442395
    },
    {
        "content": "<p>Thanks, that fixed 2). I understood the error message as match not being supported in that context.</p>",
        "id": 214286763,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1603442434
    },
    {
        "content": "<p>And \\&lt; \\&gt; solved 1). Thank you!</p>",
        "id": 214286848,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1603442518
    }
]