[
    {
        "content": "<p>These <code>_match_{n}</code> names really start to annoy me (I have quite a few of them).<br>\nHere is a very simple example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">):</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">)):</span> <span class=\"n\">test</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">test</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">test._match_1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Can I somehow name them without introducing another function?</p>",
        "id": 218298379,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606748776
    },
    {
        "content": "<p>You should never really need to deal with these manually. Do the <code>cases</code> first and use <code>simp</code> instead of <code>rw</code> to unfold <code>test</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">test</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 218303683,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1606751031
    },
    {
        "content": "<p>You should also try to use the equation compiler instead of <code>match</code> because it gets better names:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">×</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 218305255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606751700
    },
    {
        "content": "<p>Is there any way to use the equation compiler in a lambda? Or is <code>λ x, match x with ... | ...  end</code> unavoidable?</p>",
        "id": 218305443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606751769
    },
    {
        "content": "<p>In my case, both things don't work always. <br>\nI have definitions like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ant_eval'</span> <span class=\"o\">:</span> <span class=\"n\">Ant</span> <span class=\"o\">(</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Result</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ant.leaf</span> <span class=\"n\">matches</span> <span class=\"n\">leaf</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">matches</span>\n    <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">Result.leaf</span> <span class=\"n\">leaf</span>\n    <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">Result.no_match</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ant.branch</span> <span class=\"n\">tr1</span> <span class=\"n\">tr2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">ant_eval'</span> <span class=\"n\">tr1</span><span class=\"o\">,</span> <span class=\"n\">ant_eval'</span> <span class=\"n\">tr2</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">Result.no_match</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">Result.no_match</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n    <span class=\"kd\">end</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ant.diverge</span> <span class=\"n\">matches</span> <span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">matches</span><span class=\"o\">,</span> <span class=\"n\">ant_eval'</span> <span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">Result.no_match</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">Result.diverged</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>\n<p>I often need to do cases on both arguments of the match, which then leads to 16 cases - that gets very confusing very quickly. I'd like to name the matches, so I can add lemmas that help to deal with them. I already to this, but find the <code>_match_{n}</code> very confusing.</p>",
        "id": 218305739,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606751891
    },
    {
        "content": "<p>You don't need to match on a pair, you can just match two things</p>",
        "id": 218306411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606752167
    },
    {
        "content": "<p>But you can always hoist a match statement out of whatever context it is in and make your own definition. Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">merge_result</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">Result</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Result</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Result</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">Result.no_match</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">Result.no_match</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">diverge_result</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Result</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Result</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">Result.no_match</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">Result.diverged</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ant_eval'</span> <span class=\"o\">:</span> <span class=\"n\">Ant</span> <span class=\"o\">(</span><span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">Result</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ant.leaf</span> <span class=\"n\">matches</span> <span class=\"n\">leaf</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">matches</span>\n    <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">Result.leaf</span> <span class=\"n\">leaf</span>\n    <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"bp\">$</span> <span class=\"n\">Result.no_match</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ant.branch</span> <span class=\"n\">tr1</span> <span class=\"n\">tr2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">merge_result</span> <span class=\"o\">(</span><span class=\"n\">ant_eval'</span> <span class=\"n\">tr1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ant_eval'</span> <span class=\"n\">tr2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Ant.diverge</span> <span class=\"n\">matches</span> <span class=\"n\">tr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">diverge_result</span> <span class=\"n\">matches</span> <span class=\"o\">(</span><span class=\"n\">ant_eval'</span> <span class=\"n\">tr</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is what lean is doing anyway when you use <code>match</code>. But this gives you the opportunity to prove theorems specifically about <code>merge_result</code> and <code>diverge_result</code> too, which means you don't have as many nested cases to deal with</p>",
        "id": 218307118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606752498
    },
    {
        "content": "<p>Given the structure of these matches, it might be better to just use cases on <code>r = some Result.no_match</code> instead of a pattern match</p>",
        "id": 218307308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606752595
    },
    {
        "content": "<p>that will cut your 16 cases down to 3</p>",
        "id": 218307380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606752611
    },
    {
        "content": "<p>I understand, and probably this is what I should do. However, I don't like that you cannot see by simply looking at <code>ant_eval'</code> that it resembles the algorithm of the paper that I want to prove correct, as many interesting details are scattered into smaller functions.</p>",
        "id": 218307506,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606752677
    },
    {
        "content": "<blockquote>\n<p>use cases on r = some Result.no_match instead of a pattern match</p>\n</blockquote>\n<p>I though lean cannot unfold the definition if I just have <code>r != some Result.no_match</code>? I guess I need assisting lemmas to make this more comfortable to use?</p>",
        "id": 218307714,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606752758
    },
    {
        "content": "<p>If you have <code>r != some Result.no_match</code> and you wrote <code>if r = some Result.no_match then .. else ..</code> in the definition then lean will be able to rewrite it away using <code>split_ifs</code></p>",
        "id": 218309264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606753379
    },
    {
        "content": "<p>So do you suggest to replace the matchs in ant_eval' with two nested if/elses?</p>",
        "id": 218309482,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606753472
    },
    {
        "content": "<p>yes</p>",
        "id": 218309535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606753498
    },
    {
        "content": "<p>although I think <code>merge_result</code> looks like a good side definition anyway</p>",
        "id": 218309569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606753515
    },
    {
        "content": "<p>diverge_result looks like a nested if-then to me</p>",
        "id": 218309644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606753560
    },
    {
        "content": "<p>and merge_result?</p>",
        "id": 218309713,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606753579
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">merge_result</span> <span class=\"o\">(</span><span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">Result</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">Result</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">r₁</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">Result.no_match</span> <span class=\"k\">then</span> <span class=\"n\">r₂</span> <span class=\"k\">else</span>\n<span class=\"k\">if</span> <span class=\"n\">r₂</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">Result.no_match</span> <span class=\"k\">then</span> <span class=\"n\">r₁</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 218309808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606753639
    },
    {
        "content": "<p>oh these subscripts look great, I forgot that I can use them, thanks for pointing that out ;) Yeah, you are right, this definition might even be more readable</p>",
        "id": 218310016,
        "sender_full_name": "Henning Dieterichs",
        "timestamp": 1606753730
    }
]