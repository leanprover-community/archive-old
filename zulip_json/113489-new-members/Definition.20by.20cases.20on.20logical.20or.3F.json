[
    {
        "content": "<p>If I understand logical OR in the context of constructive logic correctly (which I may not), if we have a proof of (a \\/ b) then by definition we \"know\" whether it's a proof of a or a proof of b.  Can I write a function definition that takes a proof of (a \\/ b) as one of its arguments and then has two different evaluation paths, one of which uses a proof of a to create the return value and one of which uses a proof of b to create it?</p>\n<p>I know this is a simple question but I've been reviewing the documentation and can't find anything.  Thanks a lot for any advice!</p>",
        "id": 224458807,
        "sender_full_name": "Nicholas Dyson",
        "timestamp": 1611919848
    },
    {
        "content": "<p>No, because that would be logically inconsistent, and allow you to prove false</p>",
        "id": 224459080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611920035
    },
    {
        "content": "<p>You can inspect it with <code>#reduce</code> though to find out how the proof was constructed</p>",
        "id": 224459151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611920061
    },
    {
        "content": "<p>Why's that inconsistent?  The <code>cases</code> tactic allows us to say \"if the left-hand-side of the OR is true, do this; if the right-hand-side of the OR is true, do this\".  How is it different doing that in a function definition than in a proof?  I'm very curious now.</p>",
        "id": 224459644,
        "sender_full_name": "Nicholas Dyson",
        "timestamp": 1611920453
    },
    {
        "content": "<p>The contradiction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">is_from_inl</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">is_from_inl_inl</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_from_inl</span> <span class=\"o\">(</span><span class=\"n\">or.inl</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">tt</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">is_from_inl_inr</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_from_inl</span> <span class=\"o\">(</span><span class=\"n\">or.inr</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ff</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hl</span> <span class=\"o\">:=</span> <span class=\"n\">is_from_inl_inl</span> <span class=\"n\">trivial</span> <span class=\"n\">true</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hr</span> <span class=\"o\">:=</span> <span class=\"n\">is_from_inl_inr</span> <span class=\"n\">true</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">bool.ff_ne_tt</span> <span class=\"o\">(</span><span class=\"n\">hr.symm.trans</span> <span class=\"n\">hl</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224459645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611920455
    },
    {
        "content": "<p>Here I'm using <code>axiom</code> / <code>constant</code> as a quick way to say \"imagine such a function existed\"</p>",
        "id": 224459690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611920499
    },
    {
        "content": "<p>It's inconsistent because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/proof_irrel\">docs#proof_irrel</a> - two proofs of the same proposition are always equal, which means any function of those proofs must always be equal</p>",
        "id": 224459785,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611920553
    },
    {
        "content": "<p>If you want to compute based on which side is true, you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/psum\">docs#psum</a> instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/or\">docs#or</a>, as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">psum</span> <span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inr</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">psum.inl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span>\n</code></pre></div>",
        "id": 224459868,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611920627
    },
    {
        "content": "<p>Ah, I think I get it now.  Thanks for the information.</p>",
        "id": 224459947,
        "sender_full_name": "Nicholas Dyson",
        "timestamp": 1611920671
    }
]