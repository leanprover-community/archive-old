[
    {
        "content": "<p>I am wondering if <code>simp</code> is a \"stable\" tactic in the following sense. If I can finish a proof by </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>where <code>h</code> is some local hypothesis that I have in my context, this is because after the application of <code>simp</code> the goal is <em>exactly</em> <code>h</code>. But if people keep adding new lemmas with the attribute <code>@[simp]</code>, Lean might eventually become smarter and transform the goal (as it is before my application of <code>exact h</code>) to something nicer. Then I wonder if the tactic <code>exact h</code> will still work to conclude the proof.</p>",
        "id": 213647643,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1602934136
    },
    {
        "content": "<p>that's why we discourage non-terminal usages of <code>simp</code></p>",
        "id": 213647667,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602934196
    },
    {
        "content": "<p>(and I discourage <code>simp</code> in general but that's another topic)</p>",
        "id": 213647711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602934213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/113489-new-members/topic/is.20simp.20.22stable.22.3F/near/213647667\">said</a>:</p>\n<blockquote>\n<p>that's why we discourage non-terminal usages of <code>simp</code></p>\n</blockquote>\n<p>Ah, and you meant to start your answer by \"No, it won't work...\", right? <span aria-label=\"hurt\" class=\"emoji emoji-1f915\" role=\"img\" title=\"hurt\">:hurt:</span></p>",
        "id": 213647722,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1602934247
    },
    {
        "content": "<p>Well, it <em>might</em> keep working... But you probably don't want to make that assumption</p>",
        "id": 213647799,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1602934386
    },
    {
        "content": "<p>Ah gosh. But then <code>simp</code> is really a terrible tactic... or am I too conspirationist?</p>",
        "id": 213647860,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1602934495
    },
    {
        "content": "<p>Maybe <code>simp [h]</code> works? This would be fine.</p>",
        "id": 213647875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602934524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/is.20simp.20.22stable.22.3F/near/213647860\">said</a>:</p>\n<blockquote>\n<p>Ah gosh. But then <code>simp</code> is really a terrible tactic...</p>\n</blockquote>\n<p>tactics are tools with intended usages</p>",
        "id": 213647883,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602934546
    },
    {
        "content": "<p>There are all sorts of tricks to make non-terminal simps terminal. For example, if <code>h : P</code> and if <code>simp</code> changes your goal into <code>P</code> <em>today</em>, then as we all know it might turn the goal into some different simpler <code>P'</code> tomorrow because of some clever PR, but if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n\n<p>then this proof will not break even if <code>simp</code> learns how to simplify <code>P</code> later on.</p>",
        "id": 213647936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602934652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/is.20simp.20.22stable.22.3F/near/213647875\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>simp [h]</code> works? This would be fine.</p>\n</blockquote>\n<p>First, let me clarify that mine is a hypothetical question (I have no issue at the moment with my code). That being said, I am not sure to follow: if I write <code>simp [h]</code> I am temporarily adding to all <code>@[simp]</code>'s lemma also <code>h</code>, so Lean is even <em>smarter</em>, no?</p>",
        "id": 213647947,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1602934671
    },
    {
        "content": "<p>If <code>h</code> is an equality then yes, you're temporarily making <code>simp</code> smarter, but the point is that you are now making it smart enough to close the goal. The rule is that <code>simp</code> should always close goals.</p>",
        "id": 213648004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602934736
    },
    {
        "content": "<p>Ah, ok, I see. I wasn't aware of this rule. Thanks.</p>",
        "id": 213648063,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1602934804
    },
    {
        "content": "<p>It's a mathlib rule, not a general rule, but basically it's not ideal if you come back to your code in 1 years' time (like I just did with my undergraduate teaching material) and then find that parts of it don't compile with current mathlib (which fortunately did not happen to me this year).</p>",
        "id": 213648281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602935264
    },
    {
        "content": "<p><code>simpa using h</code> exists for this purpose--it's approximately <code>simp at h, simp, exact h</code> and the idea is that if <code>simp</code> got smarter and kept simplifying the goal past the form of <code>h</code>, then hopefully it will simplify <code>h</code> in the same way.</p>",
        "id": 213649174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602936901
    },
    {
        "content": "<p>from a tooling point of view, it would be possible to just replace <code>simp</code> with a <code>simp only</code> automatically, so that it is stable. select a \"simp\" in your editor, hit some particular key combination, and it expands out. i'm not sure how much people would appreciate this; it might make a proof look uglier.</p>",
        "id": 213817008,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603127683
    },
    {
        "content": "<p>that would be <code>squeeze_simp</code></p>",
        "id": 213818293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603128332
    },
    {
        "content": "<p>right, you could have your editor do that for you. i mean why do people use simp at all instead of squeeze_simping everything</p>",
        "id": 213818418,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603128374
    },
    {
        "content": "<p>The editor (VSCode) responds to the <code>squeeze_simp</code> trace output, with a <code>Try this: ...</code>, which is clickable, and replaces the <code>squeeze_simp</code> with a <code>simp only [...]</code>, or whatever variant you used.</p>",
        "id": 213821283,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603129719
    },
    {
        "content": "<p>i guess that is close to as easy as possible</p>",
        "id": 213821387,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1603129775
    },
    {
        "content": "<p>I use just <code>simp</code> often in development when I am adding/removing simp lemmas, because such changes would quickly break any <code>simp only</code></p>",
        "id": 213821426,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603129797
    },
    {
        "content": "<p>When I am in small branches of <code>mathlib</code> or something similar, such that the accessible <code>simp</code> set is small.</p>",
        "id": 213821506,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603129822
    },
    {
        "content": "<p><code>squeeze_simp</code> is slow, because it tries to be minimal</p>",
        "id": 213821641,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603129894
    },
    {
        "content": "<p>as opposed to <code>simp</code>, which can make extra unnecessary changes as long as the final term is simplified</p>",
        "id": 213821689,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603129916
    },
    {
        "content": "<p>plus <code>squeeze_simp</code> is noisy, so I usually wouldn't want more than one in the text at once</p>",
        "id": 213822431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603130255
    },
    {
        "content": "<p>usually I just use <code>simp</code> while developing and find/replace with <code>squeeze_simp</code> -&gt; <code>simp only</code> during cleanup</p>",
        "id": 213822553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603130298
    },
    {
        "content": "<p>I think we talked a bit before about renaming <code>squeeze_simp</code> to <code>simp?</code>, just to make it a bit easier to call. I forget what the obstacles there were though.</p>",
        "id": 213822916,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1603130473
    },
    {
        "content": "<p>What about storing the proof term seperately somewhere in the library as a backup proof. That should be stable.</p>",
        "id": 213934205,
        "sender_full_name": "Golol",
        "timestamp": 1603206952
    },
    {
        "content": "<p>That's pretty similar to Kevin's \"suffices\" style above</p>",
        "id": 213934581,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1603207111
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 223195578,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1611042750
    }
]