[
    {
        "content": "<p>Hello! Suppose I have an instance of a coercion for type A to type B. Is there a library function that will allow me to easily construct a coercion from list A to list B?</p>",
        "id": 296743563,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1662086669
    },
    {
        "content": "<p>You can use <code>list.map</code> with <code>coe</code> to do the coercion, for example <code>list.map coe xs</code> if <code>xs : list A</code>. You might need a type hint like <code>(list.map coe xs : list B)</code> (or, if you want, <code>list.map (coe : A -&gt; B) xs</code>)</p>",
        "id": 296743670,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1662086781
    },
    {
        "content": "<p>You should also be able to use dot notation, for example <code>xs.map coe</code></p>",
        "id": 296743705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1662086814
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 296745832,
        "sender_full_name": "Nick Pilotti",
        "timestamp": 1662089145
    },
    {
        "content": "<p>Doesn't this exist as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lift_list\">docs#lift_list</a>?</p>",
        "id": 296890718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662150403
    },
    {
        "content": "<p>You need to write the â†‘ explicitly though</p>",
        "id": 296890866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662150476
    }
]