[
    {
        "content": "<p>Attempting and failing to build lean from source on a new system. The last few lines from the <code>make</code> output were</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">[</span><span class=\"mi\">68</span><span class=\"err\">%</span><span class=\"o\">]</span> <span class=\"n\">built</span> <span class=\"n\">target</span> <span class=\"n\">lean</span>\n<span class=\"o\">[</span><span class=\"mi\">68</span><span class=\"err\">%</span><span class=\"o\">]</span> <span class=\"n\">built</span> <span class=\"n\">target</span> <span class=\"n\">bin_lean</span>\n</pre></div>\n\n\n<p>Before the process stops with a <code>Signal 6</code> / <code>Error code 1</code>. Not sure what's happening, nor where to begin trying to find out.</p>\n<p>The process also issued a <em>lot</em> of warnings complaining about <code>'operator delete' has a non-throwing exception specification but can still throw</code>, and though I thiiink it isn't something that I should be worried about, I don't remember this happening on previous builds.</p>",
        "id": 168793978,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561295901
    },
    {
        "content": "<p>OS?</p>",
        "id": 168794090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561296128
    },
    {
        "content": "<p><code>FreeBSD 12.0-RELEASE</code></p>",
        "id": 168794480,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561296962
    },
    {
        "content": "<p>At this point <code>lean</code> and <code>leanpkg</code> already exist in <code>bin</code>, but trying to run either of those just gets me a <code>Abort trap (core dumped)</code>.</p>",
        "id": 168794639,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561297245
    },
    {
        "content": "<p>download a windows emulator and then use vscode and elan</p>",
        "id": 168794692,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561297332
    },
    {
        "content": "<p>How about I <em>go onto my windows computer</em> then use vscode and elan</p>",
        "id": 168794704,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561297392
    },
    {
        "content": "<p>that would be better</p>",
        "id": 168794707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561297402
    },
    {
        "content": "<p>but yeah i realise i was probably being a stupid by assuming everything would just work the same as when it was on linux D:</p>",
        "id": 168794753,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561297501
    },
    {
        "content": "<p>For the most part lean works better on linux</p>",
        "id": 168794761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561297536
    },
    {
        "content": "<p>not sure if FreeBSD has an issue</p>",
        "id": 168794762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561297545
    },
    {
        "content": "<p>so you can download a linux emulator in the windows emulator and build lean in the linux inside windows inside FreeBSD, but use VSCode in the windows inside FreeBSD</p>",
        "id": 168794806,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561297582
    },
    {
        "content": "<p>I was hoping it'd happen to all just work out if i compiled the source within FreeBSD</p>",
        "id": 168794807,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561297589
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> : no.</p>",
        "id": 168794809,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561297618
    },
    {
        "content": "<p>If <code>bin_lean</code> has been built, then usually the next thing <code>cmake</code> tries to do is to build the standard library (check the <code>standard_lib</code> target in <code>src/CMakeLists.txt</code>), which involves running the <code>lean</code> executable (you should be able to find it in <code>your_build_directory/shell/lean</code> and <code>bin/lean</code>). I suspect that that is what is crashing, so if you want to dig into this, you can try running <code>lean --make</code> (inside the <code>library</code> directory) from <code>gdb</code> or some other debugger and then looking at the stack trace when it crashes.</p>\n<p>I'm a little surprised that <code>lean</code> and <code>bin_lean</code> are being built at 68% though, usually they're among the last things being built. Out of curiosity, could you share a link to your full build log?</p>",
        "id": 168795549,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561299244
    },
    {
        "content": "<p>I think if the test suite is getting built that would come after</p>",
        "id": 168795608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561299381
    },
    {
        "content": "<p>which is the default IIRC</p>",
        "id": 168795611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561299393
    },
    {
        "content": "<p>That makes sense. I'm more used to seeing logs that look like <a href=\"https://travis-ci.org/leanprover/lean/jobs/517045222#L1158\" target=\"_blank\" title=\"https://travis-ci.org/leanprover/lean/jobs/517045222#L1158\">this</a> though.</p>",
        "id": 168795624,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561299465
    },
    {
        "content": "<p>Ah, the difference is probably whether you run <code>make -j2</code> or just <code>make</code>.</p>",
        "id": 168796406,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561301050
    },
    {
        "content": "<p>why would <code>make -j2</code> help in this case?</p>\n<p>also, sorry, was mucking around &amp; didn't have the logs anymore. Here's they are : <a href=\"https://pastebin.com/raw/DJLHdXCN\" target=\"_blank\" title=\"https://pastebin.com/raw/DJLHdXCN\">https://pastebin.com/raw/DJLHdXCN</a> <a href=\"https://pastebin.com/raw/Nzts85BG\" target=\"_blank\" title=\"https://pastebin.com/raw/Nzts85BG\">https://pastebin.com/raw/Nzts85BG</a> . The <code>stderr</code> is stupid huge but appears to just be warnings about the same thing every time it crops up?</p>",
        "id": 168796722,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561301607
    },
    {
        "content": "<p>tried <code>make -j2</code>, it moved the errors down some. Now it's the linker that's dying instead: <a href=\"https://pastebin.com/raw/dawrJe76\" target=\"_blank\" title=\"https://pastebin.com/raw/dawrJe76\">https://pastebin.com/raw/dawrJe76</a></p>",
        "id": 168796987,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561302120
    },
    {
        "content": "<p>Sorry, I didn't mean that <code>make -j2</code> would help with your problem. It would just explain the difference in build order.</p>",
        "id": 168797794,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561303836
    },
    {
        "content": "<p>Hmm, the final error log suggests that <code>-fPIC</code> is missing from the build flags. The culprit might be <a href=\"https://github.com/leanprover/lean/blob/master/src/CMakeLists.txt#L218\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/src/CMakeLists.txt#L218\">this overly-specific test</a>. You might want to go through that file and change some of the Linux conditionals to allow for FreeBSD and see if that helps.</p>",
        "id": 168797917,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561304152
    },
    {
        "content": "<p>ah, okay.</p>\n<p>I just naively tried getting cmake to <code>-fPIC</code> <em>everything</em> by adding a line in the <code>CMakeLists.txt</code> because I didn't see your message yet &amp; didn't know about the test. The build process on that try has just concluded - it died at the very end with <code>Abort trap (core dumped)</code> after building <code>lean</code> and <code>bin_lean</code>.</p>",
        "id": 168798110,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561304532
    },
    {
        "content": "<p>Yeah, as above, that looks like <code>lean</code> is crashing when trying to build the standard library.</p>",
        "id": 168798345,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561305035
    },
    {
        "content": "<p>right.</p>\n<p>I didn't have <code>gdb</code> on this system when I set it up, so that took a while. And in honesty this is more digging than I'm really used to doing, especially that I don't really know how Lean works, so sorry for this being me getting confused and asking many silly questions.</p>\n<p>Anyways - here's the <code>bt</code> from the crash. (Would rebuilding with the <code>CMAKE_BUILD_TYPE</code> flag set to debug make this more informative?)</p>\n<div class=\"codehilite\"><pre><span></span>#0  0x0000000800f1d45a in thr_kill () from /lib/libc.so.7\n#1  0x0000000800f1b844 in raise () from /lib/libc.so.7\n#2  0x0000000800e8e079 in abort () from /lib/libc.so.7\n#3  0x0000000800cea8ba in ?? () from /lib/libcxxrt.so.1\n#4  0x00000000004c876e in lean::get_exe_location() ()\n#5  0x00000000004cba6d in lean::get_builtin_search_path() ()\n#6  0x00000000004cc5a2 in lean::standard_search_path::standard_search_path() ()\n#7  0x000000000049807d in main ()\n</pre></div>",
        "id": 168799660,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561307694
    },
    {
        "content": "<p>It's trying to use <code>snprintf(path, PATH_MAX, \"/proc/%d/exe\", pid);</code>--I assume BSD doesn't have <code>/proc</code></p>",
        "id": 168799728,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561307843
    },
    {
        "content": "<p>Wow, nice catch! That line is in <a href=\"https://github.com/leanprover/lean/blob/master/src/util/path.cpp#L85\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/src/util/path.cpp#L85\"><code>src/util/path.cpp</code></a>. So it looks like you'll need to write an <code>#elif</code> there with an appropriate path for FreeBSD.</p>",
        "id": 168799842,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561308075
    },
    {
        "content": "<p>Maybe something using <a href=\"https://www.freebsd.org/cgi/man.cgi?linprocfs(5)\" target=\"_blank\" title=\"https://www.freebsd.org/cgi/man.cgi?linprocfs(5)\">linprocfs</a>? (This is just random googling on my part.)</p>",
        "id": 168799888,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561308165
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 168799920,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561308242
    },
    {
        "content": "<p>There are two suggestions for getting the current executable path in FreeBSD in <a href=\"https://stackoverflow.com/a/1024937\" target=\"_blank\" title=\"https://stackoverflow.com/a/1024937\">this SO answer</a>: the first one links to a question with some C code that might work, the second one suggests that you might be able to just mount procfs to /proc before running lean (<a href=\"http://www.softwareprojects.com/resources/programming/t-how-to-mount-proc-on-freebsd-2006.html\" target=\"_blank\" title=\"http://www.softwareprojects.com/resources/programming/t-how-to-mount-proc-on-freebsd-2006.html\">maybe this works?</a>)</p>",
        "id": 168800320,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561309079
    },
    {
        "content": "<p>eh, I'm very very new to BSD as well. but did some random googling. Yeah, I suspect reading <code>/proc/curproc/file</code>would work if I have <code>procfs</code> mounted.</p>",
        "id": 168800363,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561309114
    },
    {
        "content": "<p>I'll go and put in the <code>#elif</code>s, recompile, see what happens maybe?</p>",
        "id": 168800440,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561309237
    },
    {
        "content": "<p><del>You might not even have to put in the <code>#elif</code> if you mount <code>procfs</code> to <code>/proc</code>.</del> nevermind, I missed you need <code>/file</code> and not <code>/exe</code> at the end.</p>",
        "id": 168800505,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561309332
    },
    {
        "content": "<p>There's also another reference to /proc in <a href=\"https://github.com/leanprover/lean/blob/master/src/util/memory.cpp#L97\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/master/src/util/memory.cpp#L97\">src/util/memory.cpp</a>.</p>",
        "id": 168800564,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1561309448
    },
    {
        "content": "<p>oh, thanks for the catch. would've hated to be hit by that after waiting for it to compile another time</p>",
        "id": 168800625,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561309576
    },
    {
        "content": "<p>aaand it worked. sort of.</p>\n<p>I edited in the <code>/proc/exec</code>thing, but wasn't sure what the proper way was to do what <code>statm</code> does on Linux, but since the process just defaults to returning 0 if it can't read the file, I thought it'd be worth trying just compiling the thing anyway while I figure that out. And the <code>make install</code> terminated without incident!</p>\n<p>So I now have a functional installation of Lean that doesn't know how much memory it's using, at least not for now. Not sure what sort of other consequences that'd have, or if there's anything else that's going to break but hasn't yet. I'm still unsure about the <code>statm</code> thing; but random googling suggests there's a way of doing both that and the <code>pid/exe</code> thing from earlier without asking the user to mount procfs, so I might spend some time later and properly put some code in for both of those.</p>",
        "id": 168803860,
        "sender_full_name": "Jean Lo",
        "timestamp": 1561315422
    },
    {
        "content": "<p>You could always use elan.</p>",
        "id": 168806728,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561321020
    },
    {
        "content": "<p>but does elan have BSD binaries?</p>",
        "id": 168810329,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561328216
    },
    {
        "content": "<p>No</p>",
        "id": 168840804,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1561375418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> If you do get Lean building &amp; running on FreeBSD, you could submit a PR to <a href=\"https://github.com/leanprover-community/lean/\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean/\">leanprover-community/lean/</a> :)</p>",
        "id": 168843537,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1561378111
    }
]