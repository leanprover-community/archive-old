[
    {
        "content": "<p>I'm looking at the category theory library for the first time today, and I'm wondering if there's any smooth way of dealing with multiple categories on the same type of objects?</p>",
        "id": 206529613,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597106275
    },
    {
        "content": "<p>Use type synonyms, just as in any situation that you want multiple instances on the same type.</p>",
        "id": 206529702,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597106344
    },
    {
        "content": "<p>Although your subject line says \"nested\", which I can't guess the meaning of.</p>",
        "id": 206529821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597106432
    },
    {
        "content": "<p>Sorry, I was going to follow that up, and didn't expect such a quick response</p>",
        "id": 206529840,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597106450
    },
    {
        "content": "<p>Essentially what I mean is that the different categories will be subcategories of one another, but if I'm using type synonyms, faithful functors will take care of that</p>",
        "id": 206529957,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597106529
    },
    {
        "content": "<p>(I want to create a category of bundled first-order homomorphisms and a category of bundled first-order embeddings, and also elementary homomorphisms and elementary embeddings)</p>",
        "id": 206530011,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597106585
    },
    {
        "content": "<p>So probably if I come up with better names for these things, and define the inclusion functor, the following code will be good?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">hom_cat</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"o\">(</span><span class=\"n\">Structure</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">embed_cat</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"o\">(</span><span class=\"n\">Structure</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">hom_cat</span><span class=\"bp\">.</span><span class=\"n\">bundled_hom</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">bundled_hom</span> <span class=\"o\">(</span><span class=\"n\">first_order_hom</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">embed_cat</span><span class=\"bp\">.</span><span class=\"n\">bundled_hom</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Language</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">bundled_hom</span> <span class=\"o\">(</span><span class=\"n\">first_order_embedding</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 206530898,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597107570
    }
]