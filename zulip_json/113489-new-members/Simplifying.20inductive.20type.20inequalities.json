[
    {
        "content": "<p>What is missing in my lemmas or simp set such that this inequality in an inductive type is not simplifying to false?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.derive_fintype</span>\n\n<span class=\"kd\">@[derive [decidable_eq, fintype]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">white</span>\n<span class=\"bp\">|</span> <span class=\"n\">black</span>\n\n<span class=\"kd\">@[derive [decidable_eq, fintype]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">piece</span>\n<span class=\"bp\">|</span> <span class=\"n\">king</span>\n<span class=\"bp\">|</span> <span class=\"n\">queen</span>\n\n<span class=\"kd\">@[derive [decidable_eq, fintype]</span><span class=\"o\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">colored_piece</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">piece</span> <span class=\"o\">:</span> <span class=\"n\">piece</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">color</span> <span class=\"o\">:</span> <span class=\"n\">color</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">colored_piece</span> <span class=\"n\">piece</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">colored_piece.piece</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">piece.coe</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">colored_piece</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">piece</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p.piece</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[pattern]</span> <span class=\"kd\">def</span> <span class=\"n\">white_king</span> <span class=\"o\">:</span> <span class=\"n\">colored_piece</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">piece.king</span><span class=\"o\">,</span> <span class=\"n\">color.white</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">piece</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span> <span class=\"bp\">♔</span> <span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">white_king</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">queen</span> <span class=\"bp\">≠</span> <span class=\"bp\">♔</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- doesn't simp to false</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">♔.</span><span class=\"n\">piece</span> <span class=\"bp\">=</span> <span class=\"n\">king</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- now it works</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220750661,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608683454
    },
    {
        "content": "<p>I can't tag <code>colored_piece</code> with <code>simps</code> either, it complains that it is not a structure?</p>",
        "id": 220750741,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608683550
    },
    {
        "content": "<p>Does tagging the structure with <code>ext</code> help?</p>",
        "id": 220750797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608683638
    },
    {
        "content": "<p><code>pattern</code> does nothing in that example.</p>",
        "id": 220750853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608683662
    },
    {
        "content": "<p>Using <code>reducible</code> in its place might</p>",
        "id": 220750889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608683727
    },
    {
        "content": "<p>The <code>pattern</code> is to make something else work, namely something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">piece_repr</span> <span class=\"o\">:</span> <span class=\"n\">colored_piece</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"bp\">♔</span> <span class=\"o\">:=</span> <span class=\"s2\">\"♔\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"s2\">\"just an example\"</span>\n</code></pre></div>",
        "id": 220750959,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608683795
    },
    {
        "content": "<p>Tagging with <code>ext</code> won't help because any lemmas will be about the equality of <code>colored_piece</code>, but here my hypothesis is an equality of <code>piece</code>s.</p>",
        "id": 220751046,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608683888
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">queen</span> <span class=\"bp\">≠</span> <span class=\"bp\">♔.</span>\n</code></pre></div>\n<p>works <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>, see <a href=\"#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Periods.20at.20the.20end.20of.20statements/near/202467782\">https://leanprover.zulipchat.com/#narrow/stream/240192-Berkeley-Lean.20Seminar/topic/Periods.20at.20the.20end.20of.20statements/near/202467782</a> and other topics about empty pattern match proofs</p>",
        "id": 220751071,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1608683942
    },
    {
        "content": "<p><code>simp [white_king] at h,</code> works</p>",
        "id": 220751169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608684041
    },
    {
        "content": "<p>you can tag <code>white_king</code> as <code>simp</code> but that will unfold it everywhere so probably not what you want</p>",
        "id": 220751209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608684104
    },
    {
        "content": "<p>Thanks! I have such an equality in the middle of a big proposition term, so simplifying it would make the whole thing false -- couldn't rely on just empty pattern matches</p>",
        "id": 220751214,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608684108
    },
    {
        "content": "<p>tagging <code>white_king</code> as <code>simps</code> also works and makes a bit more sense</p>",
        "id": 220751270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608684146
    },
    {
        "content": "<p>That works too. Thanks!</p>",
        "id": 220751296,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1608684198
    }
]