[
    {
        "content": "<p>I saw somewhere a statement of the form \"Lean has axioms, but they do not block computation because it is done in VM\". I do not really understand this. You can use VM or compile code in machine instructions or interpret it. This is not related to axioms in any way. I think that there is a subset of the language that can be used in computation and you cannot use axioms in it, you can use axioms only in proofs which are never evaluated. This is all reasonable (assuming I'm correct), but this has nothing to do whether Lean computes the code in VM or in a different way.</p>",
        "id": 197648442,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1589518623
    },
    {
        "content": "<p>it may be helpful to recall the precise statements from <a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html\">https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html</a></p>\n<blockquote>\n<p>on top of the underlying framework of universes, dependent function types, and inductive types, the standard library adds three additional components:</p>\n<ul>\n<li>the axiom of propositional extensionality</li>\n<li>a quotient construction, which implies function extensionality</li>\n<li>a choice principle, which produces data from an existential proposition.</li>\n</ul>\n<p>The first two of these block normalization within Lean, but are compatible with bytecode evaluation, whereas the third is not amenable to computational interpretation. We will spell out the details more precisely below.</p>\n</blockquote>\n<p>So firstly, we are only concerned with the effect of some specific axioms, not axioms in general. Then we are concerned with two notions of computation corresponding to lean's kernel and VM, respectively (witness also <code>#reduce</code> vs <code>#eval</code>). The former has a more \"strict\" kind of evaluation that uses the rules of type theory to reduce expressions, the latter is more \"permissive\" because it throws away type constraints -- I'm afraid this is quite a vague explanation but hopefully not inaccurate as a first-order clarification</p>",
        "id": 197676861,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1589541607
    },
    {
        "content": "<p>It's about the difference between \"computing\" (in the sense of type theorists) with <em>terms</em>, which may contain free variables, which is done by the kernel, and computing (in the sense of everyone else) with values, which is done in the VM or by compiled or extracted code (in other systems).</p>",
        "id": 197678735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589542842
    },
    {
        "content": "<p><code>Prop</code>s are represented by nothing in the VM. Then large elimination for <code>eq</code> could be a problem for the VM, but since we don't have UA in Lean, we support a simple semantics in which the denotations of propositionally equal types are the same. That means that the VM never gets stuck on <code>eq.rec</code> expressions, and so you can use arbitrary axioms inside proofs without blocking computation.</p>",
        "id": 197678984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589543004
    },
    {
        "content": "<p>Or at least, this is my understanding. I'm not sure I am explaining it in a technically correct way.</p>",
        "id": 197679288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589543195
    },
    {
        "content": "<p>I think I understand now. First of all, this has nothing to do with the difference between VM/native/interpreted code. So, evaluation of Lean code can be implemented using any of those options. The actual reason why Lean code can be evaluated is that all axioms leave in Prop and evaluation cannot depend on values in Prop (so, we can add any axiom to Prop, right?). I think this is also true for Coq. So, are there any differences between Lean and Coq approach to this problem?</p>",
        "id": 197689558,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1589549089
    },
    {
        "content": "<p>I don't know for sure, but I would assume there is no difference.</p>",
        "id": 197689793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589549215
    },
    {
        "content": "<p>Also, it's not entirely true that all axioms live in Prop: <code>choice</code> doesn't. However, any usage of <code>choice</code> that is contained in something that gets erased is not a problem for computation.</p>",
        "id": 197690105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589549383
    },
    {
        "content": "<p>Lean has a flag on each top-level declaration for whether it is <code>noncomputable</code>. I don't know if the exact rules are written down anywhere, but I think it's roughly:</p>\n<ul>\n<li>if the type <code>T</code> of <code>X</code> is erasable (<code>T</code> is either a proposition, or a string of <code>Pi</code>s ending in <code>Prop</code> or <code>Type</code>) then <code>X</code> is always computable</li>\n<li><code>axiom</code>s are noncomputable (if their types are not erasable)</li>\n<li>A definition in which something noncomputable appears and isn't inside any subexpression with erasable type is noncomputable.</li>\n</ul>",
        "id": 197690596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589549609
    },
    {
        "content": "<p>Lean knows how to work this out and will complain if you forget to write <code>noncomputable</code> (or erronesouly write <code>noncomputable</code>), and the <code>noncomputable</code> definitions are supposed to be exactly the ones the VM doesn't know how to deal with.</p>",
        "id": 197690692,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589549641
    },
    {
        "content": "<p>So, I was correct when I assumed that there is a computable subset of the language. I guess you can use axioms and non-computable stuff there as long as it appears in computationally irrelevant parts (whatever that means).</p>",
        "id": 197691526,
        "sender_full_name": "Valery Isaev",
        "timestamp": 1589549875
    },
    {
        "content": "<p>I guess the right way to express it is to say what expressions are computable, with the rules (a) all the basic parts of the language (but not axioms) are computable, (b) if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo>:</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">e : T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span></span></span></span> is erasable, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span></span></span></span> is computable.</p>",
        "id": 197691856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589549973
    }
]