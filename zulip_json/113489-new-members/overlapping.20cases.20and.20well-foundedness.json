[
    {
        "content": "<p>I'm trying to define a simple <code>ℕ → ℕ → ℕ</code> function using well-founded recursion. At top-level, I'm splitting on cases, and those cases overlap:</p>",
        "id": 136220983,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1540141532
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">isqrt_inner</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">shiftr</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n                    <span class=\"n\">isqrt_inner</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shiftr</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"n\">shiftl</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">shiftr</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>Question: how would I go about replacing the <code>sorry</code> here? I need to be able to use the hypotheses that <code>b</code> is neither <code>0</code> nor <code>1</code>, but I'm not sure how to get at those.</p>",
        "id": 136221041,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1540141589
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">isqrt_inner</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">shiftr</span> <span class=\"n\">b</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n                    <span class=\"n\">isqrt_inner</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">shiftr</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"n\">shiftl</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">shiftr</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"n\">a</span>\n</pre></div>",
        "id": 136221179,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540141837
    },
    {
        "content": "<p>Beautiful! Thank you.</p>",
        "id": 136221244,
        "sender_full_name": "Mark Dickinson",
        "timestamp": 1540141928
    }
]