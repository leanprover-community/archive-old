[
    {
        "content": "<p>Is there a preference between <code>... (H1 : P) |- Q</code> and <code>... |- P -&gt; Q</code>?</p>",
        "id": 259048441,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1635219465
    },
    {
        "content": "<p>I prefer the former unless the proof is by pattern matching.</p>",
        "id": 259048758,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635219880
    },
    {
        "content": "<p>Because it assigns a readable name to <code>H1 : P</code> right away.</p>",
        "id": 259048780,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635219907
    },
    {
        "content": "<p>I was thinking along the same lines, but was curious if there was a reason to use the other.</p>",
        "id": 259048889,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1635220016
    },
    {
        "content": "<p>Consider</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">my_id2</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>With the latter definition you can <code>dsimp [my_id2]</code> in something like <code>my_id2 = id</code>. With <code>my_id</code> you can only <code>dsimp [my_id]</code> on an applied function.</p>",
        "id": 259048987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635220198
    },
    {
        "content": "<p>I'm not sure if I understand, maybe because I don't know the details behind simp?</p>",
        "id": 259049614,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1635220918
    },
    {
        "content": "<p>Is it just doing replacements?</p>",
        "id": 259049663,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1635220946
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">my_id</span>\n<span class=\"c\">/-</span><span class=\"cm\"> gives:</span>\n<span class=\"cm\">my_id.equations._eqn_1 : ∀ {α : Type u_1} (x : α), my_id x = x</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">my_id2</span>\n<span class=\"c\">/-</span><span class=\"cm\"> gives:</span>\n<span class=\"cm\">my_id2.equations._eqn_1 : ∀ {α : Type u_1}, my_id2 = λ (x : α), x</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>These are automatically generated lemmas called \"equation lemmas,\" and they're what <code>dsimp</code>/<code>simp</code> will use if you put <code>my_id</code> or <code>my_id2</code> into the list of simp lemmas.</p>",
        "id": 259050238,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635221590
    },
    {
        "content": "<p>(I'm not sure I've seen a case yet where this matters, but it seems worth knowing that there can be a difference.)</p>",
        "id": 259050343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635221748
    },
    {
        "content": "<p>So the first can only be used to replace a variable, and the second can only be used to replace a function?</p>",
        "id": 259050482,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1635221887
    },
    {
        "content": "<p>The second one can replace <code>my_id2</code> wherever it might appear, but the first can only be used to replace instances of <code>my_id (...)</code>, cases where <code>my_id</code> is applied to an argument.</p>",
        "id": 259050680,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635222131
    },
    {
        "content": "<p>Oh, I see. Thank you.</p>",
        "id": 259050701,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1635222176
    },
    {
        "content": "<p>For example, if you <code>dsimp [my_id2]</code> to the expression <code>my_id2 (y+2)</code>, it would first become <code>(λ (x : α), x) (y+2)</code>, and then it would be beta reduced to <code>y+2</code>.  Or in Yury's example, <code>my_id2 = id</code> would become <code>(λ (x : α), x) = id</code>, but <code>my_id = id</code> would fail to make any progress with <code>dsimp [my_id]</code>.</p>",
        "id": 259050785,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1635222274
    },
    {
        "content": "<p>Because <code>my_id = id</code> doesn't have something applied to <code>my_id</code>.</p>",
        "id": 259051297,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1635223036
    },
    {
        "content": "<p>That makes sense.</p>",
        "id": 259051351,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1635223089
    },
    {
        "content": "<p>Note that this is only relevant to <code>def</code>s. If you're just proving a <code>lemma</code>, then there are no <code>equations._eqn_n</code> generated.</p>",
        "id": 259067393,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635237818
    },
    {
        "content": "<p>Note also that pattern matching behaves like <code>my_id</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_id3</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">prefix</span> <span class=\"n\">my_id3</span>\n<span class=\"c\">/-</span><span class=\"cm\"> gives:</span>\n<span class=\"cm\">my_id3.equations._eqn_1 : ∀ {α : Sort u_1} (x : α), my_id3 x = x</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 259067590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635237920
    }
]