[
    {
        "content": "<p>Hello all,</p>\n<p>I am trying to prove a version of the triangle inequality for the integers (For a,b integers |a -b| &lt; = |a| + |b|). However, I have run into some trouble. My plan was to define my own version of absolute value for the integers, then carry out a proof by cases where Lean would evaluate the value of the expressions |a - b|, |a|, and |b| to determine the validity of the proof. For example, in the case that (a - b) &gt; 0, a&gt;0, and b&gt;0, then |a - b| = a - b, |a| = a, and |b| = b, so we can conclude that the inequality holds and so on.  However, the most natural way to define absolute value that I have found, say def absVal (a : Z) : Z := if a &lt; 0 then -a else a. Yet, I have no idea to just extract the value of an expression from this definition in the proof rather than getting ite. This is a multipart question. </p>\n<p>What cases tactic is the best to use in this case and if you do not mind can you give me a short example of its use?</p>\n<p>Is there a better way to define absolute value that does not use ite?</p>\n<p>Is there a known statement of the triangle inequality for the real numbers in Lean? A quick google search seems to suggest no, but perhaps I was not looking in the right places.</p>\n<p>If the answer to the above question is no, then how would one apply the triangle inequality in analysis proofs in Lean?</p>\n<p>I would greatly appreciate your assistance.</p>",
        "id": 193300878,
        "sender_full_name": "Olu Olorode",
        "timestamp": 1586342569
    },
    {
        "content": "<p><code>split_ifs</code> is great for this</p>",
        "id": 193301031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586342652
    },
    {
        "content": "<p>if you have an <code>if</code> expression in the goal it does cases on the condition and rewrites the <code>if</code> away in each subgoal</p>",
        "id": 193301135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586342731
    },
    {
        "content": "<p>I think you have to use an ite for the norm but the split_ifs tactic just breaks you into a small number of cases immediately</p>",
        "id": 193301591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586343009
    },
    {
        "content": "<p>The triangle inequality for the reals will be in mathlib although it might be heavily disguised, eg there might be some proof that the reals are a seminormed topological semiring and then a proof that all such semirings satisfy the triangle inequality, or something like that</p>",
        "id": 193301725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586343103
    },
    {
        "content": "<p>I think with the way the <code>int</code>s are defined as an inductive data type, you can define <code>abs</code> without <code>ite</code> by pattern matching?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">zabs</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">neg_succ_of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 193301728,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1586343104
    },
    {
        "content": "<p>And then instead of the split_ifs tactic you have to use the <code>cases</code> tactic</p>",
        "id": 193301859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586343162
    },
    {
        "content": "<p>.... but if you define your function by pattern matching, it's important that you subsequently provide an API for it, so that no one _has_ to prove things using <code>cases</code>.</p>",
        "id": 193301961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586343240
    },
    {
        "content": "<p>Ok, this all seems very promising and answered my questions. Thanks alot!</p>",
        "id": 193302099,
        "sender_full_name": "Olu Olorode",
        "timestamp": 1586343320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/triangle.20inequality/near/193301725\" title=\"#narrow/stream/113489-new-members/topic/triangle.20inequality/near/193301725\">said</a>:</p>\n<blockquote>\n<p>The triangle inequality for the reals will be in mathlib although it might be heavily disguised, eg there might be some proof that the reals are a seminormed topological semiring and then a proof that all such semirings satisfy the triangle inequality, or something like that</p>\n</blockquote>\n<p>Would it be unreasonable, if somewhat redundant, to have the triangle inequality for the reals in a a conspicuous place like <code>data.real.basic</code>, given how ubiquitous it is?</p>",
        "id": 194604571,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1587312073
    },
    {
        "content": "<p>It comes much earlier in the story</p>",
        "id": 194605556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587313158
    },
    {
        "content": "<p>So you already have it in <code>data.real.basic</code></p>",
        "id": 194605564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587313175
    },
    {
        "content": "<p>FYI, here all the file that separate the proof of triangle inequality from data.real.basic: <a href=\"/user_uploads/3121/DZDzT3tQFA8ftpmYj0l_yiC9/tmp.pdf\" title=\"tmp.pdf\">tmp.pdf</a></p>",
        "id": 194605677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587313298
    },
    {
        "content": "<p>(generated by running <code>leanproject import-graph --from algebra.order_functions --to data.real.basic tmp.pdf</code> inside mathlib)</p>",
        "id": 194605734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1587313333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/113489-new-members/topic/triangle.20inequality/near/194605556\" title=\"#narrow/stream/113489-new-members/topic/triangle.20inequality/near/194605556\">said</a>:</p>\n<blockquote>\n<p>It comes much earlier in the story</p>\n</blockquote>\n<p>You're right,<code>abs_add</code>. I failed to check. Thanks Patrick!</p>",
        "id": 194606239,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1587313849
    }
]