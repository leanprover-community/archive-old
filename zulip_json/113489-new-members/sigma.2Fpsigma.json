[
    {
        "content": "<p>What's the reason for having types like sigma/psigma, sum/psum at the same time?</p>",
        "id": 137116492,
        "sender_full_name": "petercommand",
        "timestamp": 1541258102
    },
    {
        "content": "<p>Is it to do with universes?</p>",
        "id": 137116506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541258143
    },
    {
        "content": "<p>Like, when would I want to use psigma instead of sigma/Exists?</p>",
        "id": 137116556,
        "sender_full_name": "petercommand",
        "timestamp": 1541258255
    },
    {
        "content": "<p>psigma instead of Exists: because you want to keep the information of what the things are whose existence you claim</p>",
        "id": 137116602,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541258334
    },
    {
        "content": "<p>psigma with a Prop is basically the same as subtype, whereas Exists is like nonempty</p>",
        "id": 137116613,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541258375
    },
    {
        "content": "<p>psigma instead of sigma: if you want to use a Prop instead of a Type, or you might want either a Prop or a Type</p>",
        "id": 137116617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541258401
    },
    {
        "content": "<p>The equation compiler uses <code>psigma</code> a lot. <code>| (a : nat) (b : nat) (h : 0 &lt; b)</code> is essentially matching on <code>Σ' a b : ℕ, 0 &lt; b</code> underneath.</p>",
        "id": 137116664,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541258421
    },
    {
        "content": "<p>I've found psigma most useful in conjunction with the <code>Σ'</code> binder notation with multiple variables where the eventual \"body\" is a Prop</p>",
        "id": 137116741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541258622
    },
    {
        "content": "<p>isn't that exists?</p>",
        "id": 137116857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541258781
    },
    {
        "content": "<p>like \"a pair consisting of an open set U and a function f : U -&gt; R which sends x to 0\" = <code>Σ' (u : set α) (hu : is_open u) (f : u → ℝ), f x = 0</code></p>",
        "id": 137116861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541258813
    },
    {
        "content": "<p>What's the point of using <code>sigma</code> instead of <code>psigma</code>?</p>",
        "id": 137116878,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541258864
    },
    {
        "content": "<p><code>psigma</code> has a difficult target universe</p>",
        "id": 137116924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541258886
    },
    {
        "content": "<p><code>Sort (max u 1)</code> is hard to work with</p>",
        "id": 137116939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541258903
    },
    {
        "content": "<p>because it's not algebraic: <code>max u 1 = 1</code> does not have a unique solution</p>",
        "id": 137116949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541258925
    },
    {
        "content": "<p>so lean will often give up on otherwise solvable universe unification problems</p>",
        "id": 137116960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541258969
    },
    {
        "content": "<p>where <code>Type u = Sort u+1</code> has the much easier solution <code>u+1 = 1 -&gt;  u = 0</code></p>",
        "id": 137116964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259000
    },
    {
        "content": "<p>In fact, there are some expressions which do not have any solution, although you might think it does: <code>max u 1 = v+1</code> has no solution for u</p>",
        "id": 137117028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259053
    },
    {
        "content": "<p>hmm, that <code>max 1</code> is coming from Lean bumping up the level of a structure I guess? Is it actually wanted? Why should <code>psigma.{0 0}</code> not be a Prop?</p>",
        "id": 137117277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541259163
    },
    {
        "content": "<p>That was deliberate. You can define your own <code>psigma'</code> that lives in <code>Sort (max u v)</code></p>",
        "id": 137117417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259252
    },
    {
        "content": "<p>but you will find it's not all it's cracked up to be</p>",
        "id": 137117429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259267
    },
    {
        "content": "<p>in particular, it has a recursor like <code>exists</code></p>",
        "id": 137117444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259282
    },
    {
        "content": "<p>it's not \"data\"</p>",
        "id": 137117492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259323
    },
    {
        "content": "<p>and if you specialize to <code>u &gt; 0</code> you get the <a href=\"#narrow/stream/113488-general/subject/nearly.20no_confusion/near/124133073\" title=\"#narrow/stream/113488-general/subject/nearly.20no_confusion/near/124133073\"><code>mystery</code> type</a>, which is neither proof nor data</p>",
        "id": 137117639,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259480
    },
    {
        "content": "<blockquote>\n<p>In fact, there are some expressions which do not have any solution, although you might think it does: <code>max u 1 = v+1</code> has no solution for u</p>\n</blockquote>\n<p>why does <code>max u 1 = v+1</code> not have any solutions?</p>",
        "id": 137117691,
        "sender_full_name": "petercommand",
        "timestamp": 1541259497
    },
    {
        "content": "<p>because there is no universe expression that gives the solution</p>",
        "id": 137117726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259568
    },
    {
        "content": "<p>Actually, I can't :)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">ppsigma</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mk</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">fst</span><span class=\"o\">)</span>\n<span class=\"c1\">-- invalid universe polymorphic structure declaration, the resultant universe is not Prop (i.e., 0), but it may be Prop for some parameter values (solution: use &#39;l+1&#39; or &#39;max 1 l&#39;)</span>\n</pre></div>",
        "id": 137117727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541259571
    },
    {
        "content": "<p>But I guess it's because otherwise I would be in the situation you describe.</p>",
        "id": 137117736,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541259591
    },
    {
        "content": "<p>That's because you used <code>structure</code>, it tried and failed to define the projections</p>",
        "id": 137117799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259619
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 137117845,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541259668
    },
    {
        "content": "<p>Why doesn't singleton elimination help here?<br>\nIf I manually replace <code>u = v = 0</code>, then I get an eliminator to any sort</p>",
        "id": 137117869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541259715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127883\">@petercommand</span> for each fixed <code>v</code> there is a solution for <code>u</code>, but there is no solution function <code>u(v)</code></p>",
        "id": 137117873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259720
    },
    {
        "content": "<p>Just a weird edge case that Lean doesn't support?</p>",
        "id": 137117929,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541259740
    },
    {
        "content": "<p>because you need one recursor that is polymorphic in u,v</p>",
        "id": 137117940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259751
    },
    {
        "content": "<p>and that recursor will have one extra universe variable depending on whether <code>max u v = 0</code></p>",
        "id": 137117970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259787
    },
    {
        "content": "<p>there is no way to do that with universe expressions</p>",
        "id": 137118003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259833
    },
    {
        "content": "<p>you could have two recursors, but this breaks parametricity</p>",
        "id": 137118073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259890
    },
    {
        "content": "<p>I'm trying out different <code>u</code> and <code>v</code> values and in every case I get an eliminator which goes to any sort.<br>\nHowever there is a difference when <code>u = v = 0</code>, which is that the <code>C</code> doesn't take the <code>ppsigma</code> value as an argument then</p>",
        "id": 137118109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541259925
    },
    {
        "content": "<p>singleton elimination doesn't help because <code>A</code> and <code>B</code> aren't subsingletons</p>",
        "id": 137118122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259938
    },
    {
        "content": "<p>That's just a convenience thing, the usual recursor is at <code>drec_on</code></p>",
        "id": 137118185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541259973
    },
    {
        "content": "<p>for small eliminating props the dependent and nondependent recursors are interdefinable</p>",
        "id": 137118220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541260027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">ppsigma00</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ppsigma00</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">ppsigma00</span><span class=\"bp\">.</span><span class=\"n\">drec_on</span>\n<span class=\"err\">│</span> <span class=\"n\">ppsigma00</span><span class=\"bp\">.</span><span class=\"n\">drec_on</span> <span class=\"o\">:</span>\n<span class=\"err\">│</span>   <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ppsigma00</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ppsigma00</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n<span class=\"err\">│</span>     <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">fst</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">ppsigma11</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ppsigma11</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">ppsigma11</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span>\n<span class=\"err\">│</span> <span class=\"n\">ppsigma11</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">:</span>\n<span class=\"err\">│</span>   <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ppsigma11</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ppsigma11</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n<span class=\"err\">│</span>     <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">fst</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ppsigma11</span><span class=\"bp\">.</span><span class=\"n\">m</span> <span class=\"n\">fst</span> <span class=\"n\">snd</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 137118506,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541260327
    },
    {
        "content": "<p>They look the same to me (especially with <code>set_option pp.proofs true</code>)</p>",
        "id": 137118544,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541260393
    },
    {
        "content": "<p>I would maybe believe that the VM can't (easily) implement such a thing, though</p>",
        "id": 137118748,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541260575
    },
    {
        "content": "<p><code>rec_on</code> is an axiom, right? Or one of the related things is?</p>",
        "id": 137118764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541260640
    },
    {
        "content": "<p><code>rec_on</code> is <code>rec</code> with the arguments in a different order. <code>rec</code> is an axiom.</p>",
        "id": 137120246,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541263357
    },
    {
        "content": "<p>to be pedantic, it's an axiom schema</p>",
        "id": 137120259,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541263433
    },
    {
        "content": "<p>What's an axiom schema?</p>",
        "id": 137120303,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541263471
    },
    {
        "content": "<p>it isn't one single axiom</p>",
        "id": 137120315,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541263512
    },
    {
        "content": "<p>it's one axiom per inductive type</p>",
        "id": 137120317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541263525
    },
    {
        "content": "<p>Right, I meant <code>[whatever].rec</code></p>",
        "id": 137120323,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541263551
    },
    {
        "content": "<blockquote>\n<p>In fact, there are some expressions which do not have any solution, although you might think it does: <code>max u 1 = v+1</code> has no solution for u</p>\n</blockquote>\n<p>I'm confused. Lean doesn't know that <code>max (v+1) 1 = v+1</code>?</p>",
        "id": 146795757,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541425291
    },
    {
        "content": "<p>I presume you misspoke, and meant that there is no solution for <code>v</code>? (I agree with that.)</p>",
        "id": 146795876,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1541425436
    },
    {
        "content": "<p>oh, yes you are right</p>",
        "id": 146796140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541425777
    }
]