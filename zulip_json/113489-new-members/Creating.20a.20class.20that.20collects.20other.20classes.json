[
    {
        "content": "<p>I have a class that groups a bunch of instances. Is there a convenient way to make each field an instance? Here's what the code looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">schema</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">schema_ok</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">schema</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">S.T</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">S.R</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">schema</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">schema_ok</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">S.T</span> <span class=\"o\">:=</span> <span class=\"n\">schema_ok.inst_1.</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">schema</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">schema_ok</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">S.R</span> <span class=\"o\">:=</span> <span class=\"n\">schema_ok.inst_2.</span>\n</code></pre></div>\n<p>I want to automate the instances at the bottom (my actual use case has a much bigger schema and <code>schema_ok</code>).</p>",
        "id": 298877877,
        "sender_full_name": "Tej Chajed",
        "timestamp": 1663196762
    },
    {
        "content": "<p>Instead of definining new <code>decidable_eq</code> instances copying the fields, you can write <code>attribute [instance] schema_ok.inst_1 schema_ok.inst_2</code>.</p>",
        "id": 298927594,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663232157
    },
    {
        "content": "<p>In different circumstances you can also use the <code>extends</code> keyword, e.g. for <code>monoid</code> we define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">semigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">mul_one_class</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">npow_rec</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">npow_zero'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">npow</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">.</span> <span class=\"n\">try_refl_tac</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">npow_succ'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">npow</span> <span class=\"n\">n.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">.</span> <span class=\"n\">try_refl_tac</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This will automatically generate instances <code>monoid.to_semigroup</code> and <code>monoid.to_mul_one_class</code>.</p>\n<p>Unfortunately in your case, <code>decidable_eq T := ∀ x y, decidable (x = y)</code> is not a structure so you can't extend it, and I don't think you can extend the same structure twice either, because the field names would overlap.</p>",
        "id": 298928054,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663232375
    },
    {
        "content": "<p>There's also the option of unbundling: turn the <code>decidable_eq</code> fields into parameters</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">schema_ok</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">schema</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">S.T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">S.R</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This means we don't need the <code>schema_ok.to_decidable_eq</code> instances at all, but it does cause type signatures to become much longer so it's generally a good idea to keep them bundled as you originally had.</p>",
        "id": 298928582,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663232610
    },
    {
        "content": "<p><code>attribute [instance] schema_ok._inst_1 schema_ok._inst_2</code> would work in place of the last two lines in the top post</p>",
        "id": 298969887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663249057
    }
]