[
    {
        "content": "<p>I have a function <code>f : x \\to option y</code> that is injective over all the <code>some y</code> values in the codomain. I'm trying to define a function that retrieves the <code>x</code> that has <code>f x = y</code>, if I also know that <code>f</code> is surjective. I can say that <code>{x | f x = y}</code> for some fixed <code>y</code> is a subsingleton, due to the injectivity, and is nonempty, due to the surjectivity.</p>\n<p>Is there some definition that lets me eliminate a singleton set back into the element it's made from? That is, I can (I think) show that a set that is a singleton from subsingleton and nonempty. Is there some better way of expressing this? I couldn't find a mathlib way of expressing \"partially injective\".</p>",
        "id": 213454837,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602780797
    },
    {
        "content": "<p><code>classical.some (h : s.nonempty)</code> will give you an element of <code>s</code>.</p>",
        "id": 213457708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602782079
    },
    {
        "content": "<p>But in a noncomputable way, correct?</p>",
        "id": 213457960,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602782185
    },
    {
        "content": "<p>There is no computable way to invert a function.</p>",
        "id": 213458756,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602782575
    },
    {
        "content": "<p>Does <del>lean</del> <em>mathlib</em> have the computable brute-force def for doing so given <code>[fintype x]</code>?</p>",
        "id": 213458828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602782602
    },
    {
        "content": "<p>Eric's on the same thought as me</p>",
        "id": 213458954,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1602782649
    },
    {
        "content": "<p>You mean, \"Does mathlib have ...\"</p>",
        "id": 213459046,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602782697
    },
    {
        "content": "<p><del>You might need <code>encodable</code> as well.</del></p>",
        "id": 213459144,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602782745
    },
    {
        "content": "<p>Let me try <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.choose\">docs#finset.choose</a></p>",
        "id": 213459461,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602782894
    },
    {
        "content": "<p>Oh, maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.bij_inv\">docs#fintype.bij_inv</a></p>",
        "id": 213459558,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602782936
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.choose\">docs#fintype.choose</a> I assume?</p>",
        "id": 213459559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602782937
    }
]