[
    {
        "content": "<p>Hello. I'm trying to use Lean to define the semantics of a simple programming language. To do that, I would like to first define inductive types which represent the expressions and types in the language, respectively. I have done this. I would then like to define the judgements for the typing of expressions. This is where I am running into problems. I believe I have something that works for simple expressions, but I'm not sure how to change what i have to account for 'hypotheses' (like 'the variable x has type t'). This is necessary to write down the typing rules for, for instance, an expression \"let x = e in e'\" where x is a variable and e, e' are expressions. I have attached my code as it is now. Could anyone help me with this? <a href=\"/user_uploads/3121/s5cBXPIEUTVEKNpjDzsEXu5g/e.lean\" target=\"_blank\" title=\"e.lean\">e.lean</a></p>",
        "id": 182591289,
        "sender_full_name": "Ariel Davis",
        "timestamp": 1575488424
    },
    {
        "content": "<p>There are many ways to deal with this. One approach is to let the context be a partial map from variables to types. Then extracting a variable is function application and adding <code>x</code> is extending the map by adding a new case that handles <code>x</code>.  Probably the canonical resource for this is <em>Software Foundations</em>. You would be interested in the section on typing (<a href=\"https://softwarefoundations.cis.upenn.edu/plf-current/Stlc.html#lab214\" target=\"_blank\" title=\"https://softwarefoundations.cis.upenn.edu/plf-current/Stlc.html#lab214\">link</a>), but in general going through the Stlc chapters will explain exactly how to do what you want. Foundations uses Coq, so the Lean code will be a little different, but not by too much.</p>",
        "id": 182591816,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1575488822
    },
    {
        "content": "<p>To start a bit earlier: you'll want to change your <code>has_typ</code> function to <code>has_typ_in_ctx</code>. Instead of being a binary relation between a term and a type, it will be a three-way relation between a term, a type, and a context.</p>",
        "id": 182592036,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575488971
    },
    {
        "content": "<p>I cannot help with this kind of formalization, but I have a practical suggestion. People here usually post their Lean code either in their message when it is short enough or using <a href=\"https://gist.github.com/\" target=\"_blank\" title=\"https://gist.github.com/\">https://gist.github.com/</a> or a similar website. We don't want people to get used to opening a Lean file randomly downloaded from the internet into VSCode (or emacs) without seeing its content first, since this is a huge security hole (VScode will start running Lean on that file without letting you inspect its content first).</p>",
        "id": 182592122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575489006
    },
    {
        "content": "<p>You'll need to choose how to represent contexts. There are many possibilities here.</p>",
        "id": 182592124,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575489007
    },
    {
        "content": "<p>Wojciech's suggestion of a partial map makes sense, but another simple one (good enough to write down a basic sketch, at least) would be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"kn\">context</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"bp\">×</span> <span class=\"n\">typ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 182592171,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575489046
    },
    {
        "content": "<p>So you could do something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">has_typ</span><span class=\"o\">:</span> <span class=\"kn\">context</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">typ</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n<span class=\"c1\">-- 0 : nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">has_typ</span> <span class=\"n\">ctx</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">z</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"n\">num</span>\n<span class=\"c1\">-- e : nat =&gt; Succ(e) : nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span> <span class=\"n\">has_typ</span> <span class=\"n\">ctx</span> <span class=\"n\">e</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">):</span> <span class=\"n\">has_typ</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"n\">num</span>\n<span class=\"c1\">-- true : bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">has_typ</span> <span class=\"n\">ctx</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">t</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"n\">bool</span>\n<span class=\"c1\">-- false : bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">has_typ</span> <span class=\"n\">ctx</span> <span class=\"n\">exp</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"n\">typ</span><span class=\"bp\">.</span><span class=\"n\">bool</span>\n<span class=\"c1\">-- Γ, x : τ ⊢ x : τ</span>\n<span class=\"bp\">|</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">τ</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"n\">has_typ</span> <span class=\"n\">ctx</span> <span class=\"n\">x</span> <span class=\"n\">τ</span>\n<span class=\"c1\">-- Γ ⊢ e : τ ∧ Γ, x : τ ⊢ e&#39; : τ&#39; =&gt; Γ ⊢ let x = e in e&#39; : τ&#39;</span>\n<span class=\"c1\">-- ???</span>\n</pre></div>",
        "id": 182592262,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575489114
    },
    {
        "content": "<p>I've left the last one for you to think about.</p>",
        "id": 182592333,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575489142
    },
    {
        "content": "<p>Thanks everyone for the responses. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> sorry, i hadn't considered that. I'll be more careful in the future.</p>",
        "id": 182592365,
        "sender_full_name": "Ariel Davis",
        "timestamp": 1575489175
    },
    {
        "content": "<p>No problem.</p>",
        "id": 182592381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575489189
    },
    {
        "content": "<blockquote>\n<p>We don't want people to get used to opening a Lean file randomly downloaded from the internet into VSCode (or emacs) without seeing its content first</p>\n</blockquote>\n<p>For the record, this one is safe, and I did check first <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 182592643,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575489378
    },
    {
        "content": "<p>Unrelated, why does Zulip highlight the word <code>context</code>? Was that ever a keyword?</p>",
        "id": 182592827,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575489498
    }
]