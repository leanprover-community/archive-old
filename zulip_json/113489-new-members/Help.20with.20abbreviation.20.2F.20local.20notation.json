[
    {
        "content": "<p>How does one use <code>abbreviation</code> or <code>local notation</code> correctly? In the following code, if I use <code>abbreviation</code>, I get an error saying that <code>f</code> is noncomputable, so I added the line <code>noncomputable theory</code>.  When I used <code>local notation</code>, I get an <code>unknown idenfier</code> error. (I have added these errors as comments within the code.) </p>\n<p>Additionally, the <code>ring</code> tactic gets a timeout and the <code>ring_exp</code> tactic does not solve the goal.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"c1\">--noncomputable theory</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">101</span><span class=\"o\">)</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kd\">abbreviation</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"c1\">-- local notation h : R  := (X 3)*(X 4)*(X 5)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">R</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n<span class=\"k\">#check</span> <span class=\"n\">g</span>\n<span class=\"k\">#check</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_minus_h_eq_f</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- ring_exp,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- gives deterministic timeout (whether or not 'noncomputable theory' is used.)</span>\n<span class=\"c1\">-- with local notation gives \"unknown identifier 'h'\"</span>\n<span class=\"c1\">-- ring_exp only rewrites it as g + (-h)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">g_minus_h_eq_f</span>\n   <span class=\"c1\">-- g - h = f</span>\n   <span class=\"c1\">-- correctly</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_eq_h_plus_f</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- gives deterministic timeout</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_eq_h_plus_f_one</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ring_exp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- tactic failed.</span>\n</code></pre></div>\n<p>I need to show that <code>g *(X 0)</code> belongs to the ideal, for which it is easy to show that <code>h *(X 0)</code> does, so I am trying to prove a lemma that <code>g-h</code> is in the ideal.</p>",
        "id": 245616971,
        "sender_full_name": "Manoj Kummini",
        "timestamp": 1626023788
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">101</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span>  <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"mi\">5</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_minus_h_eq_f</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_eq_h_plus_f</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_eq_h_plus_f_one</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245617878,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626024782
    },
    {
        "content": "<p>I used <code>def</code> instead. I don't think <code>ring</code> sees through abbreviation.</p>",
        "id": 245617889,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626024797
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 245619716,
        "sender_full_name": "Manoj Kummini",
        "timestamp": 1626027055
    }
]