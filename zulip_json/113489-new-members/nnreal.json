[
    {
        "content": "<p>Hi,<br>\nI want to use this assumption <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msubsup><mi>i</mi><mo>∗</mo><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mfrac><mi>x</mi><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\"> \\sum_{i=0}^{+\\infty} i*x_{i} = \\frac{x}{1-x} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2109em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9112em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0987em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> for R&gt;=0<br>\nI find this tactics tsum_coe_mul_geometric_of_norm_lt_1 , but it doesn't work for nnreal. Is there similar tactic for R&gt;=0, or I should prove it for nnreal?</p>",
        "id": 276483816,
        "sender_full_name": "Parivash",
        "timestamp": 1648132378
    },
    {
        "content": "<p>Do you mean the geometric series?  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_geometric_nnreal\">docs#tsum_geometric_nnreal</a></p>",
        "id": 276486208,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648133294
    },
    {
        "content": "<p>Note that that's not what you wrote (you have some unspecified sequence <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)</p>",
        "id": 276486263,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648133316
    },
    {
        "content": "<p>Note that that's a theorem, not a tactic. Converting is a little annoying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nnreal.tsum_coe_mul_geometric_of_norm_lt_1</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hr'</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_lt</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">_</span> <span class=\"n\">r.coe_nonneg</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hr</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nnreal.coe_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">tsum_coe_mul_geometric_of_norm_lt_1</span> <span class=\"n\">hr'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">nnreal.coe_sub</span> <span class=\"n\">hr.le</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276486797,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1648133524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <br>\nThanks for your response, yes your right that's for <span class=\"tex-error\">$$ \\sum_{i=o}{\\infity}x_{i} = \\frac{1}{1-x} $$</span> but I'm looking for another one.</p>",
        "id": 276497070,
        "sender_full_name": "Parivash",
        "timestamp": 1648137534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <br>\nI really appreciated. Yes, That's the one I'm looking. Thank you</p>",
        "id": 276497518,
        "sender_full_name": "Parivash",
        "timestamp": 1648137649
    },
    {
        "content": "<p>What is the tactic for multiplying both side of equation to a constant. like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>q</mi><mi>v</mi></mfrac><mo>=</mo><mfrac><mi>m</mi><mi>n</mi></mfrac></mrow><annotation encoding=\"application/x-tex\"> \\frac {q}{v} = \\frac{m}{n} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0925em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7475em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> is equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>=</mo><mfrac><mi>m</mi><mi>n</mi></mfrac><mo>×</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\"> q = \\frac{m}{n} \\times v </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></p>",
        "id": 276699478,
        "sender_full_name": "Parivash",
        "timestamp": 1648260543
    },
    {
        "content": "<p>If you have a proof <code>hv : v ≠ 0</code>, then <code>field_simp [hv]</code> will usually do this for you.</p>",
        "id": 276699873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648261145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nGreat, Thanks</p>",
        "id": 276731044,
        "sender_full_name": "Parivash",
        "timestamp": 1648308321
    },
    {
        "content": "<p>I want to use this assumption <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msubsup><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mfrac><mi>x</mi><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^{+\\infty} x_{i} = \\frac{x}{1-x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2109em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9112em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0987em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><br>\nI find this tactic (tsum_geometric_nnreal), but it starts from zero instead of one. How can I tackle this issue?</p>",
        "id": 277083202,
        "sender_full_name": "Parivash",
        "timestamp": 1648602357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459354\">@Parivash</span> Do you already know how you would like to write your statement in Lean? Is it an issue to start the sum from <code>i = 0</code>? You will probably find that a lot of lemmas work more smoothly if you start from <code>i = 0</code>.</p>",
        "id": 277096977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648619224
    },
    {
        "content": "<p>Start from zero and then take away the zero term</p>",
        "id": 277098733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648621306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nActually, my handwriting proof was arranged in this shape. And, this is the last step of my proofing.</p>",
        "id": 277142442,
        "sender_full_name": "Parivash",
        "timestamp": 1648646144
    },
    {
        "content": "<p>Write a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if you're not sure how to prove something, so it's clear what the statement you want is.</p>",
        "id": 277143818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648646753
    },
    {
        "content": "<p>There are several ways to sum from 1 in Lean</p>",
        "id": 277143872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648646764
    },
    {
        "content": "<p>PS <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_geometric_nnreal\">docs#tsum_geometric_nnreal</a> is a theorem, not a tactic.</p>",
        "id": 277143918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648646800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nwould you please introduce one of them which start from one and works for nnreal</p>",
        "id": 277415812,
        "sender_full_name": "Parivash",
        "timestamp": 1648819075
    },
    {
        "content": "<p>Can you formalise the statement which you would like a proof of via a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? In Lean it's not good enough just to say \"how do I prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>1</mn></mrow></msub><msup><mi>x</mi><mi>n</mi></msup><mo>=</mo><mi>x</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{n\\geq1}x^n=x/(1-x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1449em;vertical-align:-0.3949em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3949em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>?\" -- there are different ways of formalising this statement.</p>",
        "id": 277435575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648827067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Background Copy-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.function.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group_with_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.ordinal_arithmetic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.geom_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.archimedean</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.iterate</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.ennreal</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring.boolean_ring</span>\n<span class=\"kn\">open</span> <span class=\"n\">ordinal</span>\n<span class=\"c\">/-</span><span class=\"cm\"> left_comm has_mul.mul mul_comm mul_assoc-/</span>\n<span class=\"n\">mul_eq_of_eq_div'</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel_left</span><span class=\"o\">]</span> <span class=\"kd\">end</span>\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Topology on `ℝ≥0`</span>\n<span class=\"cm\">The natural topology on `ℝ≥0` (the one induced from `ℝ`), and a basic API.</span>\n<span class=\"cm\">## Main definitions</span>\n<span class=\"cm\">Instances for the following typeclasses are defined:</span>\n<span class=\"cm\">* `topological_space ℝ≥0`</span>\n<span class=\"cm\">* `topological_semiring ℝ≥0`</span>\n<span class=\"cm\">* `second_countable_topology ℝ≥0`</span>\n<span class=\"cm\">* `order_topology ℝ≥0`</span>\n<span class=\"cm\">* `has_continuous_sub ℝ≥0`</span>\n<span class=\"cm\">* `has_continuous_inv' ℝ≥0` (continuity of `x⁻¹` away from `0`)</span>\n<span class=\"cm\">Everything is inherited from the corresponding structures on the reals.</span>\n<span class=\"cm\">## Main statements</span>\n<span class=\"cm\">Various mathematically trivial lemmas are proved about the compatibility</span>\n<span class=\"cm\">of limits and sums in `ℝ≥0` and `ℝ`. For example</span>\n<span class=\"cm\">* `tendsto_coe {f : filter α} {m : α → ℝ≥0} {x : ℝ≥0} :</span>\n<span class=\"cm\">tendsto (λa, (m a : ℝ)) f (𝓝 (x : ℝ)) ↔ tendsto m f (𝓝 x)`</span>\n<span class=\"cm\">says that the limit of a filter along a map to `ℝ≥0` is the same in `ℝ` and `ℝ≥0`, and</span>\n<span class=\"cm\">* `coe_tsum {f : α → ℝ≥0} : ((∑'a, f a) : ℝ) = (∑'a, (f a : ℝ))`</span>\n<span class=\"cm\">says that says that a sum of elements in `ℝ≥0` is the same in `ℝ` and `ℝ≥0`.</span>\n<span class=\"cm\">Similarly, some mathematically trivial lemmas about infinite sums are proved,</span>\n<span class=\"cm\">a few of which rely on the fact that subtraction is continuous.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">topological_space</span> <span class=\"n\">metric</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nnreal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- short-circuit type class inference</span>\n<span class=\"kn\">section</span> <span class=\"n\">coe</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"c1\">-- Definitions of nnreal.tsum_coe_mul_geometric_of_norm_lt_1</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">nnreal.tsum_coe_mul_geometric_of_norm_lt_1</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">hr'</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_lt</span><span class=\"o\">],</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">_</span> <span class=\"n\">r.coe_nonneg</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hr</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"n\">apply</span> <span class=\"n\">nnreal.coe_injective</span><span class=\"o\">,</span>\n<span class=\"n\">convert</span> <span class=\"n\">tsum_coe_mul_geometric_of_norm_lt_1</span> <span class=\"n\">hr'</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nnreal.coe_sub</span> <span class=\"n\">hr.le</span><span class=\"o\">,</span>\n<span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n<span class=\"c1\">-- k1 : constant rate of condensation onto bare surface</span>\n<span class=\"c1\">-- k2: constant rate of evaporation from first layer</span>\n<span class=\"c1\">-- kads: Constant rate of Adsorption</span>\n<span class=\"c1\">-- kdes: Constant rate of Adsorption</span>\n<span class=\"c1\">-- P: Gas Pressure</span>\n<span class=\"c1\">-- q: Loading</span>\n<span class=\"c1\">-- A: Surface Area</span>\n<span class=\"c1\">-- Vads: volume adsorbed</span>\n<span class=\"c1\">-- V₀ : the volume of one adsorbed molecule</span>\n<span class=\"c1\">-- a, b, c, C, x, y : variables</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)(</span><span class=\"n\">k1</span> <span class=\"n\">k2</span> <span class=\"n\">kads</span> <span class=\"n\">kdes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">C</span> <span class=\"n\">P</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">V₀</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"c1\">-- Equations</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">))</span> <span class=\"c1\">-- Total Surface Area</span>\n<span class=\"o\">(</span><span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)))</span> <span class=\"c1\">-- total volume of adsorbed molecules</span>\n<span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"bp\">/</span><span class=\"n\">V₀</span> <span class=\"bp\">=</span> <span class=\"n\">Vads</span> <span class=\"bp\">/</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"c1\">-- The experimental observable loading</span>\n<span class=\"c1\">-- Definitions</span>\n<span class=\"o\">(</span><span class=\"n\">hC</span><span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">/</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hy</span><span class=\"o\">:</span> <span class=\"n\">y</span><span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">k1</span><span class=\"bp\">/</span><span class=\"n\">k2</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hx</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">kads</span><span class=\"bp\">/</span><span class=\"n\">kdes</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">P</span><span class=\"o\">)</span>\n<span class=\"c1\">--</span>\n<span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">c</span><span class=\"bp\">=</span><span class=\"n\">k1</span><span class=\"bp\">/</span><span class=\"n\">k2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">V₀</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"bp\">=</span> <span class=\"n\">kads</span><span class=\"bp\">/</span><span class=\"n\">kdes</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Constraints</span>\n<span class=\"o\">(</span><span class=\"n\">hθ</span><span class=\"o\">:</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hx2</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hx1</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hv</span><span class=\"o\">:</span> <span class=\"n\">V₀</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">P</span><span class=\"bp\">/</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">P</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">/</span><span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">:=</span>\n\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_add</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_mul</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_add</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hA</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">hVads</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_div_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_geometric_nnreal</span> <span class=\"n\">at</span> <span class=\"n\">hq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In the last line I used tsum_geometric_nnreal, which it starts from zero. While I want to change it to one, so it should be x/(1-x)  instead of 1/(1-x)</p>",
        "id": 277494818,
        "sender_full_name": "Parivash",
        "timestamp": 1648860273
    },
    {
        "content": "<p>Thanks. I'm not at lean right now and Zulip doesn't have a \"mark message unread\" functionality do hopefully I'll remember to take a look later if nobody else does beforehand</p>",
        "id": 277512204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648883546
    },
    {
        "content": "<p>you can star messages you want to get back to</p>",
        "id": 277512232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648883631
    },
    {
        "content": "<p>My number of starred messages is about to hit four figures :-/</p>",
        "id": 277514074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648886334
    },
    {
        "content": "<p>you need <code>git stash</code> for zulip messages</p>",
        "id": 277514096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648886397
    },
    {
        "content": "<p>\"I'm not at Lean right now\" is (for me) usually a euphemism for \"I'm still in bed\". OK so I got up. <span class=\"user-mention\" data-user-id=\"459354\">@Parivash</span> your code doesn't compile for me. Maybe test it on a new file?</p>",
        "id": 277514328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648886622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459354\">@Parivash</span> here is a more helpful way to ask your question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.instances.ennreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">k1</span> <span class=\"n\">k2</span> <span class=\"n\">kads</span> <span class=\"n\">kdes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">C</span> <span class=\"n\">P</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">V₀</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">/</span> <span class=\"n\">V₀</span> <span class=\"bp\">=</span>\n          <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"bp\">/</span>\n            <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">--rw tsum_geometric_nnreal at hq,</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This is called a minimal working example, a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . I have removed all the irrelevant junk from your question (using the <code>extract_goal</code> tactic and the delete key) and we now have a question which hopefully represents something close to what you're asking about. Please learn these tricks in future, because if you don't ask good questions then multiple users have to take time doing the same work which you could have done.</p>",
        "id": 277514868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648887346
    },
    {
        "content": "<p>The rewrite works fine for me.</p>",
        "id": 277516421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648889315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nYes, your right. I'll do it. <br>\nThanks</p>",
        "id": 277524437,
        "sender_full_name": "Parivash",
        "timestamp": 1648899584
    },
    {
        "content": "<p>Is there any other thought for taking out zero from this lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_geometric_nnreal\">docs#tsum_geometric_nnreal</a>, or proving it for nnreal?</p>",
        "id": 277637256,
        "sender_full_name": "Parivash",
        "timestamp": 1648997172
    },
    {
        "content": "<p>Can you write the <em>lean code</em> for what you actually want, rather than just repeating an informal description? Please read about <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 277637771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648997455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nOkay, got it.<br>\nI'm seeking a way to prove this one: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nnreal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)(</span><span class=\"n\">C</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)))</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277650641,
        "sender_full_name": "Parivash",
        "timestamp": 1649006371
    },
    {
        "content": "<p>That's untrue (choose <code>q = 1</code>, <code>θ = 0</code>)</p>",
        "id": 277652926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649009325
    },
    {
        "content": "<p>It's like saying \"A = 1, prove q = 2` when you've given absolutely no information linking A and q.</p>",
        "id": 277652952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649009366
    },
    {
        "content": "<p>Oh, I guess you meant to write <code>A</code> in both places?</p>",
        "id": 277653031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649009434
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nActually, the only thing that is important here is that applying this assumption <span class=\"tex-error\">$$\\sum{i=1}{\\+ infinity} x ^ i = x/(1-x) $$</span> of course this condition is true there (x&lt;1)</p>",
        "id": 277653331,
        "sender_full_name": "Parivash",
        "timestamp": 1649009824
    },
    {
        "content": "<p>Parivash, do you understand why your statement above is unprovable?</p>",
        "id": 277653415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649009972
    },
    {
        "content": "<p>It's for the same reason that this is unprovable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277653473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649010031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nEric, this is just part of proofing, I write this one to show what lemma I'm looking for, you know what I mean!</p>",
        "id": 277653644,
        "sender_full_name": "Parivash",
        "timestamp": 1649010258
    },
    {
        "content": "<p>The idea behind a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is that I don't have to try and work out what you mean, because the mwe should contain everything I need to know</p>",
        "id": 277653702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649010338
    },
    {
        "content": "<p>So in this case, your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is too minimized to actually demonstrate your problem any more</p>",
        "id": 277653756,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649010375
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nnreal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)(</span><span class=\"n\">C</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)))</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tsum_geometric_nnreal</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- works fine</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">nnreal</span>\n</code></pre></div>",
        "id": 277653761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649010379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nThanks. <br>\nBut actually, I need to use this assumption <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msubsup><msup><mi>x</mi><mi>i</mi></msup><mo>=</mo><mfrac><mi>x</mi><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\"> \\sum_{i=1}^{+\\infty} x^{i} = \\frac{x}{1-x} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2109em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9112em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0987em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> <br>\nnot this one :<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow></msubsup><msup><mi>x</mi><mi>i</mi></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\"> \\sum_{i=0}^{+\\infty} x^{i} = \\frac{1}{1-x} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2109em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9112em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">+</span><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><br>\nJust we should change its starting point that I cannot find the lemma for it</p>",
        "id": 277654179,
        "sender_full_name": "Parivash",
        "timestamp": 1649011002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/nnreal/near/277637771\">said</a>:</p>\n<blockquote>\n<p>Can you write the <em>lean code</em> for what you actually want, rather than just repeating an informal description? Please read about <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<p>@Parivash, the lean code you wrote didn't express what you actually wanted, which is why Kevin's answer didn't help you</p>",
        "id": 277654466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649011350
    },
    {
        "content": "<p>Do you know how to <em>state</em> the assumption you actually want in lean?</p>",
        "id": 277654486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649011384
    },
    {
        "content": "<p>You want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_eq_zero_add\">docs#tsum_eq_zero_add</a></p>",
        "id": 277654550,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649011455
    },
    {
        "content": "<p>You certainly <em>will</em> want that, but far more useful will be to first work out precisely how to state your question in lean</p>",
        "id": 277654563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649011500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <br>\nYes, in order to use this one I defined this one: (h1 : ∀ k, θ (k) = C * x ^ k * θ 0) and then use this:  (hA : A = ∑' k, θ k)<br>\nBut this doesn't work here because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\"> \\theta k </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> starts from one not zero. So, I cannot use:  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_eq_zero_add\">docs#tsum_eq_zero_add</a>.<br>\nDoes it make sense?</p>",
        "id": 277659677,
        "sender_full_name": "Parivash",
        "timestamp": 1649018195
    },
    {
        "content": "<p>Once again, we are lacking context. Why does <code>θ</code> start at <code>1</code>. Does that mean you're using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat\">docs#pnat</a>?</p>",
        "id": 277659703,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649018262
    },
    {
        "content": "<blockquote>\n<p>Does it make sense?</p>\n</blockquote>\n<p>No. The <em>only</em> thing that makes sense here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> . Click on the link.</p>",
        "id": 277661033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649019881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <br>\nbase on the equation 18 from this article <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\"> \\theta </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span> must be start from one (in this article S represent <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>θ</mi></mrow><annotation encoding=\"application/x-tex\"> \\theta </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">θ</span></span></span></span><br>\n<a href=\"/user_uploads/3121/qDsVaescHZKl_t-Bjno7rLgR/Brunauer38-BET-theory1.pdf\">Brunauer38-BET-theory1.pdf</a> <br>\nMoreover, if we check this formula for k=0 we have θ 0 = C  * θ 0, which is not correct. That's why I need to change starting point</p>",
        "id": 277661424,
        "sender_full_name": "Parivash",
        "timestamp": 1649020398
    },
    {
        "content": "<p>So what about formulating it as <code>∀ n, θ (n + 1) = C * θ 0 * x ^ (n + 1)</code>? This will be much easier to use in the proof.</p>",
        "id": 277661548,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649020588
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 277667755,
        "sender_full_name": "Parivash",
        "timestamp": 1649029208
    },
    {
        "content": "<p>@Parivash, your deleted comment looks like a valid point to me</p>",
        "id": 277690050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649056299
    },
    {
        "content": "<p>The lemma in question requires <code>add_comm_group</code>, which nnreal is not</p>",
        "id": 277690177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649056383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nYes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_eq_zero_add\">docs#tsum_eq_zero_add</a> cannot be applied for nnreal. So, first, we should define such lemma for nnreal.</p>",
        "id": 277718016,
        "sender_full_name": "Parivash",
        "timestamp": 1649072546
    },
    {
        "content": "<p>For your own work, that would be fine</p>",
        "id": 277725814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649076676
    },
    {
        "content": "<p>But for mathlib, we might want to think about whether the lemma is still true under weaker assumptions</p>",
        "id": 277725852,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649076694
    },
    {
        "content": "<p>Here's a hack which proves it in the nnreal case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.nnreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">summable.map</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">nnreal.to_real_hom</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→+</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">continuous_induced_dom</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tsum_eq_zero_add</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I just reduce to the case of reals and then use <code>tsum_eq_zero_add</code> there.</p>",
        "id": 277760126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649090805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nThank you, professor Kevin Buzzard :)</p>",
        "id": 277772904,
        "sender_full_name": "Parivash",
        "timestamp": 1649096021
    },
    {
        "content": "<p>First, I hope that I followed <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> rules here. If else, please give me some suggestions that I learn better.<br>\n<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , I followed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_eq_zero_add\">docs#tsum_eq_zero_add</a>, and finally reach the below code. It was useful, but still, my problem doesn't solve. <br>\nAs you see, tsum_geometric_nnreal, doesn't work here. Because instead of x^n, now we have x^(n+1)! Please look at the below code. So, do you have any suggestions to tackle this issue?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nnreal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">summable.map</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">nnreal.to_real_hom</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→+</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">continuous_induced_dom</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tsum_eq_zero_add</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"n\">C</span> <span class=\"n\">x</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"c1\">-- Equations</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"c1\">-- Total Surface Area</span>\n<span class=\"o\">(</span><span class=\"n\">hx2</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">C</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA</span> <span class=\"o\">{</span><span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">mul_add</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">one_mul</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"c1\">--rw tsum_geometric_nnreal at hA,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 277785247,
        "sender_full_name": "Parivash",
        "timestamp": 1649102278
    },
    {
        "content": "<p>Just rewrite <code>x^(n+1)</code> as <code>x^n*x</code> and then take out the common factor of <code>x</code> from the sum. You see that you don't need the sum from 1?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">tsum_mul_right</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_geometric_nnreal</span> <span class=\"n\">hx2</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 277792091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649105630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nExcellent, good point!</p>",
        "id": 277798238,
        "sender_full_name": "Parivash",
        "timestamp": 1649108813
    },
    {
        "content": "<p>Hi,<br>\nHow can I use # mul_assoc inside the summation? <br>\nPlease fine code here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.nnreal</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nnreal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">summable.map</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">nnreal.to_real_hom</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→+</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">continuous_induced_dom</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tsum_eq_zero_add</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)(</span><span class=\"n\">C</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>  <span class=\"o\">)</span>\n<span class=\"c1\">-- Equations</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span>  <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>  <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">:</span>\n<span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span> <span class=\"o\">{</span><span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"c1\">--rw mul_assoc at hVads, !!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278920342,
        "sender_full_name": "Parivash",
        "timestamp": 1649908540
    },
    {
        "content": "<p>A message was moved here from <a class=\"stream-topic\" data-stream-id=\"116290\" href=\"/#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib.3Amaster\">#rss &gt; Recent Commits to mathlib:master</a> by <span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span>.</p>",
        "id": 278920922,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649909060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459354\">@Parivash</span> Does <code>simp_rw [mul_assoc] at hVads</code> work?</p>",
        "id": 278921041,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649909201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <br>\nGreat!<br>\nYes, it works!<br>\nThanks</p>",
        "id": 278921303,
        "sender_full_name": "Parivash",
        "timestamp": 1649909561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <br>\nIs there any way for changing the location of x^(x_1+1) with (x_+1).<br>\nNote: The above code is edited based on my new request.</p>",
        "id": 278971440,
        "sender_full_name": "Parivash",
        "timestamp": 1649945744
    },
    {
        "content": "<p>Hi, <br>\nI faced with an issue in closing this goal. Please find it here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nnreal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">summable.map</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">nnreal.to_real_hom</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→+</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">continuous_induced_dom</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tsum_eq_zero_add</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nnreal.tsum_coe_mul_geometric_of_norm_lt_1</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">hr'</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_lt</span><span class=\"o\">],</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">_</span> <span class=\"n\">r.coe_nonneg</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hr</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"n\">apply</span> <span class=\"n\">nnreal.coe_injective</span><span class=\"o\">,</span>\n<span class=\"n\">convert</span> <span class=\"n\">tsum_coe_mul_geometric_of_norm_lt_1</span> <span class=\"n\">hr'</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">nnreal.coe_sub</span> <span class=\"n\">hr.le</span><span class=\"o\">,</span>\n<span class=\"n\">norm_cast</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">--- repeat</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)(</span><span class=\"n\">C</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>  <span class=\"o\">)</span>\n<span class=\"c1\">-- Equations</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span>  <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>  <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n<span class=\"o\">:</span>\n<span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">))</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span> <span class=\"o\">{</span><span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left</span> <span class=\"n\">at</span> <span class=\"n\">hVads</span><span class=\"o\">,</span>\n<span class=\"c1\">--- rw [mul_comm] at hVads, !!!</span>\n<span class=\"c1\">--- rw nnreal.tsum_coe_mul_geometric_of_norm_lt_1 at hVads, !!!</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279226924,
        "sender_full_name": "Parivash",
        "timestamp": 1650209764
    },
    {
        "content": "<p>What's your goal state at the end of that lemma?</p>",
        "id": 279233150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650218965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nIt is a formula in Chemical Engineering, and I want to formalize it. I edited it, now just I don't know how to apply # tsum_geometric_nnreal and # nnreal.tsum_coe_mul_geometric_of_norm_lt_1.<br>\nActually, I think I should rearrange it, but since it is inside the summation mul_comm, and mul_ assoc don't work! This is my issue!</p>",
        "id": 279291451,
        "sender_full_name": "Parivash",
        "timestamp": 1650292346
    },
    {
        "content": "<p>By \"what's your goal state\", I mean \"please paste what's in your 'Lean infoview' at the point where you get stuck\"</p>",
        "id": 279293056,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650293335
    },
    {
        "content": "<p>(note that to link to a lemma, you need <code>docs#</code> before it, not just <code>#</code>)</p>",
        "id": 279293134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650293384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nThanks for clarifying, I hope that now I answere your question!<br>\nThis is the error after applying docs# tsum_geometric_nnreal :<br>\nrewrite tactic failed, did not find instance of the pattern in the target expression<br>\n  ∑' (n : ℕ), x ^ n</p>",
        "id": 279294232,
        "sender_full_name": "Parivash",
        "timestamp": 1650294019
    },
    {
        "content": "<p>(no space after <code>docs#</code>)</p>",
        "id": 279294336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650294062
    },
    {
        "content": "<p>That's not the entire goal state, that's just the error</p>",
        "id": 279294369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650294080
    },
    {
        "content": "<p>Can you paste the whole thing in <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 279294395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650294097
    },
    {
        "content": "<p>The bit including the <code>⊢</code> and the <code>:</code> lines before it is the \"goal state</p>",
        "id": 279294465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650294123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nSure,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">C</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">θ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">x_1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">x_1</span><span class=\"o\">)))</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n\n<span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">C</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">θ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">hVads</span> <span class=\"o\">:</span> <span class=\"n\">Vads</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">hx2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">hx1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 279294530,
        "sender_full_name": "Parivash",
        "timestamp": 1650294172
    },
    {
        "content": "<p>Yes, the problem is that it doesn't match! The sum in <code>hVads</code> has a <code>+</code> in it, you probably want to try and pull that out of the sum</p>",
        "id": 279294778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650294297
    },
    {
        "content": "<p>(note you should be looking at the first goal, not the second)</p>",
        "id": 279294822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650294325
    },
    {
        "content": "<p>Yes, I'm seeking a way to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tsum_geometric_nnreal\">docs#tsum_geometric_nnreal</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal.tsum_coe_mul_geometric_of_norm_lt_1\">docs#nnreal.tsum_coe_mul_geometric_of_norm_lt_1</a>. <br>\nI cannot rearrange hVads in a way to apply these!</p>",
        "id": 279295202,
        "sender_full_name": "Parivash",
        "timestamp": 1650294505
    },
    {
        "content": "<p><code>rw tsum_geometric_nnreal hx2 at hVads</code> -- do you understand why this fails?</p>",
        "id": 279295312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650294596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\nYes, I think, I need to change the location of  x^x_1 with x_1 and of course, separate this assumption after <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo></mrow><annotation encoding=\"application/x-tex\"> + </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span></span></span></span></p>",
        "id": 279295707,
        "sender_full_name": "Parivash",
        "timestamp": 1650294824
    },
    {
        "content": "<p>Right, so you will need to find a result which says that the sum of (a_n + b_n) equals the sum of the a_n plus the sum of the b_n, and rewrite that first, and then you will be able to do the rewrite you want to do on the term which matches. The lemma you need will be called something like <code>tsum_add</code> or something like this, because we have a naming convention which says what lemmas like this should be called.</p>",
        "id": 279302653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650298554
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/nnreal/near/277760126\">said</a>:</p>\n<blockquote>\n<p>Here's a hack which proves it in the nnreal case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.infinite_sum</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.instances.nnreal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">summable.map</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">nnreal.to_real_hom</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→+</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">continuous_induced_dom</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tsum_eq_zero_add</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I just reduce to the case of reals and then use <code>tsum_eq_zero_add</code> there.</p>\n</blockquote>\n<p>Actually, as I applied this: nnreal.tsum_eq_zero_add , it added another goal like summable. How can I close this goal?</p>",
        "id": 279983937,
        "sender_full_name": "Parivash",
        "timestamp": 1650810926
    },
    {
        "content": "<p>I don't know -- what's the goal? What's the tactic state? Do you know the maths proof?</p>",
        "id": 279984005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650810997
    },
    {
        "content": "<p>let me provide its code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">nnreal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nnreal</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">push_cast</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">summable.map</span> <span class=\"n\">hf</span> <span class=\"o\">(</span><span class=\"n\">nnreal.to_real_hom</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"bp\">→+</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">continuous_induced_dom</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tsum_eq_zero_add</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">some_name</span> <span class=\"o\">(</span><span class=\"n\">θ</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">)(</span><span class=\"n\">k1</span> <span class=\"n\">k2</span> <span class=\"n\">kads</span> <span class=\"n\">kdes</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">C</span> <span class=\"n\">P</span> <span class=\"n\">q</span> <span class=\"n\">A</span> <span class=\"n\">V₀</span> <span class=\"n\">Vads</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>  <span class=\"o\">)</span>\n<span class=\"c1\">-- Equations</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">θ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">θ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">θ</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Definitions</span>\n\n<span class=\"o\">:</span>\n<span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">P</span><span class=\"bp\">/</span><span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">P</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">P</span><span class=\"bp\">+</span><span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">P</span><span class=\"o\">))</span>\n<span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">nnreal.tsum_eq_zero_add</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279984034,
        "sender_full_name": "Parivash",
        "timestamp": 1650811055
    },
    {
        "content": "<p>I could close the first goal, but I don't have any idea about the second one!</p>",
        "id": 279984090,
        "sender_full_name": "Parivash",
        "timestamp": 1650811104
    },
    {
        "content": "<p>This is not a Lean question -- this is a mathematics question. your strategy is only mathematically valid if that sum converges so you need to find a maths proof that it conerges.</p>",
        "id": 279984109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650811190
    },
    {
        "content": "<p>In maths we would not normally talk about an infinite sum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mi>n</mi></msub><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_n a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497em;vertical-align:-0.2997em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0017em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> unless it converges. But Lean is different. It will allow you to write <code>∑' (b : ℕ), f b </code> whether or not the sum converges, and it just defines the sum to be 0 if mathematically the sum doesn't converge. The convergence assumptions are still needed though, it's just that the theorems ask for them rather than the definitions.</p>",
        "id": 279984252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650811334
    },
    {
        "content": "<p>You have a hypothesis <code>A = ∑' (k : ℕ), θ k</code> but perhaps this doesn't mean what you think it means. It doesn't mean \"the sum is convergent and equals A\", it means \"either the sum is convergent and it equals A, or the sum does not converge and A=0\".</p>",
        "id": 279984279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650811414
    }
]