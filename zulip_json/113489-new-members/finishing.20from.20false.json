[
    {
        "content": "<p>Very basic question here: I have <code>h_false : false</code> in my hypotheses, but I can't seem to finish the proof. If I try <code>cases h_false</code>, I get a \"infer type failed\".</p>",
        "id": 172174014,
        "sender_full_name": "Vlad Firoiu",
        "timestamp": 1564613823
    },
    {
        "content": "<p>That should usually work. Can you post a minimal working example for us?</p>",
        "id": 172174070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564613881
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/cvO-OhfeHsoLSPey1sl3WsYT/cantor.lean\" target=\"_blank\" title=\"cantor.lean\">cantor.lean</a></p>",
        "id": 172174145,
        "sender_full_name": "Vlad Firoiu",
        "timestamp": 1564613946
    },
    {
        "content": "<p>Somehow the <code>apply flip_neq</code> tactic corrupted your goal, and whatever you do afterwards fails. (even <code>sorry</code>)</p>",
        "id": 172174260,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564614044
    },
    {
        "content": "<p>No, the problem is already earlier.</p>",
        "id": 172174357,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564614137
    },
    {
        "content": "<p>Here is a working version of your proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">cantor</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">pow_nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">flip_bool</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n\n<span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">asd</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">h_w</span> <span class=\"n\">h_w</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">h_w</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h_h</span><span class=\"o\">,</span>\n\n<span class=\"k\">have</span> <span class=\"n\">gh</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">flip_bool</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n\n<span class=\"k\">have</span> <span class=\"n\">not_asd</span> <span class=\"o\">:</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">h_w</span> <span class=\"n\">h_w</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">h_w</span><span class=\"o\">),</span>\n<span class=\"n\">rw</span> <span class=\"n\">gh</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">flip_neq</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h_false</span> <span class=\"o\">:=</span> <span class=\"n\">not_asd</span> <span class=\"n\">asd</span><span class=\"o\">,</span>\n<span class=\"c1\">--sorry,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h_false</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172174363,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564614151
    },
    {
        "content": "<p>I think the goal gets weird when I do <code>cases h</code></p>",
        "id": 172174385,
        "sender_full_name": "Vlad Firoiu",
        "timestamp": 1564614189
    },
    {
        "content": "<p>I just changed two of your <code>let</code> with <code>have</code>. In general you should use <code>let</code> for definitions and <code>have</code> for proofs.</p>",
        "id": 172174390,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564614210
    },
    {
        "content": "<p>Yes, that is correct, the problem is with <code>let h := ..., cases h</code>. Apparently the <code>cases</code> tactic does not work for local constants that have a body (i.e. are introduced with a <code>let</code>)</p>",
        "id": 172174458,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564614298
    },
    {
        "content": "<p>Ah ok, I'll keep that in mind.</p>",
        "id": 172174572,
        "sender_full_name": "Vlad Firoiu",
        "timestamp": 1564614404
    },
    {
        "content": "<p>Is there a way to get rid of <code>gh</code>? I first tried to <code>unfold g</code> but it didn't work.</p>",
        "id": 172174600,
        "sender_full_name": "Vlad Firoiu",
        "timestamp": 1564614444
    },
    {
        "content": "<p>Maybe because <code>g</code> is defined with <code>let</code>?</p>",
        "id": 172174609,
        "sender_full_name": "Vlad Firoiu",
        "timestamp": 1564614454
    },
    {
        "content": "<p>Yes, you can do <code>dsimp [g]</code> (or a variant: <code>dsimp only [g]</code>, <code>simp [g]</code>, <code>simp only [g]</code>).</p>",
        "id": 172174834,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564614655
    },
    {
        "content": "<p>Also, you can just do:</p>\n<div class=\"codehilite\"><pre><span></span>have not_asd : not (f h_w h_w = g h_w),\napply flip_neq\n</pre></div>\n\n\n<p><code>apply</code> (and many other tactics, like <code>exact</code>) will automatically unfold definitions for you (and variables introduced by <code>let</code>)</p>",
        "id": 172174964,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564614787
    },
    {
        "content": "<p>Ah that makes my proof much simpler! Thank you!</p>",
        "id": 172175155,
        "sender_full_name": "Vlad Firoiu",
        "timestamp": 1564614991
    },
    {
        "content": "<p>However, tactics like <code>rw</code> and <code>simp</code> generally don't unfold definitions for you.</p>",
        "id": 172175504,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564615411
    }
]