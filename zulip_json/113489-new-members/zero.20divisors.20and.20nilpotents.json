[
    {
        "content": "<p>Which definition would be considered better:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_nilpotent</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">def</span> <span class=\"n\">is_nilpotent&#39;</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 197860872,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589737993
    },
    {
        "content": "<p>Top one</p>",
        "id": 197860880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589738014
    },
    {
        "content": "<p>The bottom one would be hard to use because in most cases Lean would not be able to guess <code>n</code>.</p>",
        "id": 197860892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589738040
    },
    {
        "content": "<p>The bottom one would force the user to know the witness to nilpotence, right?</p>",
        "id": 197860932,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589738043
    },
    {
        "content": "<p>^^</p>",
        "id": 197860935,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589738045
    },
    {
        "content": "<p>I've almost proved that nonzero nilpotents are zero divisors, I just need to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">nonzero_nilpotent_has_nonzero_power</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>to get it, but I'm stumped. I want to find <code>m</code> by taking the minimum of the set (type?) <code>{ n : ℕ | a^n = 0 }</code>, but I'm not sure how to set that up. Here's where I'm at so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">associated</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> An element a of a ring α is a zero divisor if there exists a b ∈ α</span>\n<span class=\"cm\">   such that b ≠ 0 and ab = 0. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_zero_divisor</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> An element a of a ring α is nilpotent if there exists a n ∈ ℕ such</span>\n<span class=\"cm\">   that n ≠ 0 and a^n = 0 -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_nilpotent</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> If a is a nonzero nilpotent, then we can find a nonzero natural m</span>\n<span class=\"cm\">  such that a^m ≠ 0 and a^n = 0 for all n &gt; m. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nonzero_nilpotent_has_nonzero_power</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_nilpotent</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">hanz</span> <span class=\"n\">hanlp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">set</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I apparently can't just write <code>min set</code> to get the minimum because lean can't find an instance of a <code>decidable_linear_order</code> for <code>N</code>. Any advice?</p>",
        "id": 197864415,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589742608
    },
    {
        "content": "<p>Try going classical, it might be the decidability that causes issues</p>",
        "id": 197864487,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589742789
    },
    {
        "content": "<p>Sorry, can you be more specific?</p>",
        "id": 197864548,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589742906
    },
    {
        "content": "<p>In this specific case though, <code>nat.find</code> is what you probably should use</p>",
        "id": 197864551,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589742911
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_nilpotent</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">hanz</span> <span class=\"n\">hanlp</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">there_is_some</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">there_is_some</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">there_is_some</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197864684,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589743128
    },
    {
        "content": "<p>Here's a sketch of how you might use <code>nat.find</code></p>",
        "id": 197864698,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589743146
    },
    {
        "content": "<p>(in your case, the property maybe should be <code>a^n ≠ 0</code>, I haven't checked)</p>",
        "id": 197864711,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589743178
    },
    {
        "content": "<p>I guess it could just be the existential in <code>is_nilpotent</code>: <code>∃ n : ℕ, n ≠ 0 ∧ a ^ n = 0</code></p>",
        "id": 197864752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589743214
    },
    {
        "content": "<p>That could work too</p>",
        "id": 197864753,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589743226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span>, you might also like to note that I used <code>let</code> instead of <code>have</code> sometimes - <code>have</code> doesn't keep track of the actual definition, just its type (so it's the right sort of thing for properties, since we don't care about what the actual proof was) but <code>let</code> does keep track of how it was defined</p>",
        "id": 197864763,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589743273
    },
    {
        "content": "<p><code>n ≠ 0</code> is unnecessary; is there a reason to include it?</p>",
        "id": 197865067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589743775
    },
    {
        "content": "<p>In this case you probably want to find the least <code>m</code> such that <code>a^(m+1)=0</code></p>",
        "id": 197865524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589744386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I've slightly modified your sketch to get to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_nilpotent</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">hanz</span> <span class=\"n\">hanlp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">there_is_some</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min&#39;</span> <span class=\"n\">there_is_some</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>which is <em>almost</em> what I want, except that <code>m</code>'s type</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">there_is_some</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n\n\n<p>contains a dummy variable <code>?m_1</code></p>",
        "id": 197868387,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589748825
    },
    {
        "content": "<p>The dummy variable represents a natural you haven't chosen yet</p>",
        "id": 197868458,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589748921
    },
    {
        "content": "<p>Once the dummy variable is picked (I'll call it <code>t</code>), <code>m</code> would have type <code>a^(t + 1) = 0 → nat.find there_is_some ≤ t</code></p>",
        "id": 197868475,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589748949
    },
    {
        "content": "<p>Have a look at the functions around <code>nat.find</code> to see what you're given to work with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">find</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_x</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">find_spec</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">find_min</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">right</span>\n\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">find_min&#39;</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_of_not_gt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">find_min</span> <span class=\"n\">l</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 197868592,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589749086
    },
    {
        "content": "<p>I'm still confused and unable to get the minimum of that set out using those functions around <code>nat.find</code> :/</p>",
        "id": 197871555,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589753460
    },
    {
        "content": "<p>Look at the type of <code>nat.find</code>. That tells you what it does. What is your exact problem? Post some working code</p>",
        "id": 197871744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589753712
    },
    {
        "content": "<p>There is where I'm currently stuck:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">associated</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> An element a of a ring α is nilpotent if there exists a n ∈ ℕ such</span>\n<span class=\"cm\">   that a^n = 0. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_nilpotent</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> If a is a nonzero nilpotent, then we can find a nonzero natural m</span>\n<span class=\"cm\">  such that a^m ≠ 0 and a^n = 0 for all n &gt; m. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nonzero_nilpotent_has_nonzero_power</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">is_nilpotent</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">hanz</span> <span class=\"n\">hanlp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">there_is_some</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hanlp</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"k\">with</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">bad</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span> <span class=\"n\">at</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">there_is_some</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min&#39;</span> <span class=\"n\">there_is_some</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- I want to show that m satisfies a^(m+1)=0</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197872926,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589755612
    },
    {
        "content": "<p>Can we please change the definition of nilpotent by dropping the n != 0 condition?</p>",
        "id": 197872937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589755670
    },
    {
        "content": "<p>It just makes things harder</p>",
        "id": 197872941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589755679
    },
    {
        "content": "<p>oh but then your proof will need refactoring</p>",
        "id": 197872989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589755749
    },
    {
        "content": "<p>You forgot to use <code>nat.find_spec</code></p>",
        "id": 197873045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589755821
    },
    {
        "content": "<p>Do you need this statement? How about there exists <code>m</code> such that <code>a^m = 0</code> and <code>a^n \\ne 0</code> for <code>n &lt; m</code>?</p>",
        "id": 197873099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589755883
    },
    {
        "content": "<p>Yes what you're doing does look like an unnatural thing to prove</p>",
        "id": 197873134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589755921
    },
    {
        "content": "<p><code>let m := nat.find there_is_some,</code> not <code>have</code></p>",
        "id": 197873249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589755989
    },
    {
        "content": "<p>Reid's suggestion is better because it doesn't involve this unnatural hypothesis about a being non-zero.</p>",
        "id": 197873476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589756254
    },
    {
        "content": "<p>Why not fix the definition of nilpotent and then prove what Reid suggests?</p>",
        "id": 197873575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589756386
    },
    {
        "content": "<p>The trick with these things is to find the right statement which doesn't have special cases such as \"doesn't work if a=0\".</p>",
        "id": 197873857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589756551
    },
    {
        "content": "<p>How about <code>\\exists m, \\forall n, a^n = 0 &lt;-&gt; m &lt;= n</code></p>",
        "id": 197874002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589756748
    },
    {
        "content": "<p>everything is better with iff</p>",
        "id": 197874082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589756798
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">associated</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> An element a of a ring α is nilpotent if there exists a n ∈ ℕ such</span>\n<span class=\"cm\">   that a^n = 0. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">is_nilpotent</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> If a is a nonzero nilpotent, then we can find a nonzero natural m</span>\n<span class=\"cm\">  such that a^m ≠ 0 and a^n = 0 for all n &gt; m. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nonzero_nilpotent_has_nonzero_power</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">hna</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">hna</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_spec</span> <span class=\"n\">hna</span><span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find_min</span> <span class=\"n\">hna</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197874126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589756840
    },
    {
        "content": "<p>Reid's version comes out really nicely.</p>",
        "id": 197874139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589756852
    },
    {
        "content": "<p>Mario's version will also come out nicely</p>",
        "id": 197874214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589756885
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">-  such that a^m ≠ 0 and a^n = 0 for all n &gt; m. -/</span>\n<span class=\"gi\">+  such that a^m = 0 and a^n ≠ 0 for all n &lt; m. -/</span>\n</code></pre></div>",
        "id": 197874727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589757611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"294709\">@Aniruddh Agarwal</span> here is a way of thinking about all this. You want to find a way of expressing, in Lean, the following idea: if a is nilpotent, and you look at the function from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>T</mi><mo separator=\"true\">,</mo><mi>F</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{T,F\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">}</span></span></span></span> which sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> to the truth-value of the question \"Is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a^n=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>?\", then this function looks like \"F,F,F,...,F,...,F,T,T,T,...,T,T,...\". This is an idea, not a formalised statement. There are lots of different ways to formalise it. You chose one way, which treated the case a=0 as a special case (where the function looks like \"T,T,T,T,...\" or \"F,T,T,T,...\" depending on whether R is the zero ring or not) but one could just as well prove the lemma that said that a=0 iff a^n=0 for all n&gt;=1, which would be a much nicer way of dealing with a=0 rather than trying to formalise something general and then leaving out the a=0 case. Leaving in a=0 for now, we want to formalise the idea that there will be 0 or more F's, but a finite number, followed by a bunch of T's. Because 0 F's is possible (if R=0 and a=0) we should let the \"key\" natural number be the first T, rather than the last F (which might not exist in general). If you are in a situation where you want the index of the last F assuming a isn't zero, you'll be able to get it by subtracting 1 from the first T. But the more natural lemma is the one which applies for all a, rather than just non-zero a. </p>\n<p>In short, the lemmas which one wants to formalise are the ones with the most natural statements and the fewest edge cases.</p>",
        "id": 197911714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589795364
    },
    {
        "content": "<p>of course the things kevin says about picking natural statements is also true when doing \"paper maths\", but human mathematicians can elaborate away the \"trivial\" edge-cases</p>",
        "id": 197933370,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589808222
    },
    {
        "content": "<p>:sigh: I finally finished the proof that nonzero nilpotents are zero divisors: <a href=\"https://github.com/anrddh/commutative-algebra-playground/blob/master/src/zero_divisors_and_nilpotents.lean#L45\">https://github.com/anrddh/commutative-algebra-playground/blob/master/src/zero_divisors_and_nilpotents.lean#L45</a></p>",
        "id": 197978933,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589827371
    },
    {
        "content": "<p>Thanks all for your substantial help</p>",
        "id": 197979160,
        "sender_full_name": "Aniruddh Agarwal",
        "timestamp": 1589827500
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">nz_nilpotent_is_zerodivisor</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">exists_min_pow_zero_of_nilpotent</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm1</span><span class=\"o\">,</span> <span class=\"n\">hm2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- a^0=0 can&#39;t happen</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">eq_zero_of_zero_eq_one</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hm1</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hm2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">m</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">hm1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197980316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589828052
    },
    {
        "content": "<p>You shouldn't really use <code>simp</code> in the middle of proofs, they will break later on as <code>simp</code> gets smarter.</p>",
        "id": 197980431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589828116
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> All nonzero nilpotents are zerodivisors. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nz_nilpotent_is_zerodivisor</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm1</span><span class=\"o\">,</span> <span class=\"n\">hm2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_min_pow_zero_of_nilpotent</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"k\">in</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">ha&#39;</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_of_zero_eq_one</span> <span class=\"bp\">_</span> <span class=\"n\">hm1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">_</span><span class=\"o\">))},</span><span class=\"c1\">-- a^0=0 can&#39;t happen</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm2</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">hm1</span><span class=\"bp\">⟩</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197981399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589828552
    },
    {
        "content": "<p>I can't figure out how to get the <code>cases</code> into term mode, but if I could this could be a completely term mode proof. The term proof is the same as the tactic proof, each tactic can be turned into a term.</p>",
        "id": 197981941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589828787
    },
    {
        "content": "<p>Note that it's perfectly fine to use <code>simp</code> if you phrase things so that <code>simp</code> is doing something <em>specific</em>. For example, <code>have something : foo, by simp</code> is safe: even if <code>simp</code> gets smarter, it's not going to start doing awful things to your proof state, because it's been restricted to this one little fragment of proof.</p>",
        "id": 197981987,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589828818
    },
    {
        "content": "<p>(Although for efficiency, mathlib uses <code>squeeze_simp</code> to discover a more minimal subset of things that <code>simp</code> would use, and then restricts the call to <code>simp</code> using <code>only</code> so that it only uses those things)</p>",
        "id": 197982121,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589828887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/zero.20divisors.20and.20nilpotents/near/197981941\">said</a>:</p>\n<blockquote>\n<p>I can't figure out how to get the <code>cases</code> into term mode, but if I could this could be a completely term mode proof. The term proof is the same as the tactic proof, each tactic can be turned into a term.</p>\n</blockquote>\n<p>I'm not sure it's possible, although my confidence here is weak - <code>exists_min_pow_zero_of_nilpotent</code> has output a <code>Prop</code> existential, but to extract anything from this in term mode you'd need a <code>Type</code>, wouldn't you?</p>",
        "id": 197983033,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589829361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113489-new-members/topic/zero.20divisors.20and.20nilpotents/near/197983033\">said</a>:</p>\n<blockquote>\n<p>I'm not sure it's possible, although my confidence here is weak - <code>exists_min_pow_zero_of_nilpotent</code> has output a <code>Prop</code> existential, but to extract anything from this in term mode you'd need a <code>Type</code>, wouldn't you?</p>\n</blockquote>\n<p>I don't know, this is all a bit CS for me.</p>",
        "id": 197984105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589829975
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> All nonzero nilpotents are zerodivisors. -/</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nz_nilpotent_is_zerodivisor&#39;</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">is_nilpotent</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha&#39;</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_zero_divisor</span> <span class=\"n\">a</span>\n<span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">exists_min_pow_zero_of_nilpotent</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">hm1</span><span class=\"o\">,</span> <span class=\"n\">hm2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">ha&#39;</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_of_zero_eq_one</span> <span class=\"bp\">_</span> <span class=\"n\">hm1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">hm1</span><span class=\"o\">,</span> <span class=\"n\">hm2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hm2</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">hm1</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>terms are love, terms  are life</p>",
        "id": 197984885,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589830403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> <a href=\"#narrow/stream/113489-new-members/topic/zero.20divisors.20and.20nilpotents/near/197983033\">said</a>:</p>\n<blockquote>\n<p>I'm not sure it's possible, although my confidence here is weak - <code>exists_min_pow_zero_of_nilpotent</code> has output a <code>Prop</code> existential, but to extract anything from this in term mode you'd need a <code>Type</code>, wouldn't you?</p>\n</blockquote>\n<p><code>exists_min_pow_zero_of_nilpotent</code> can be proven in <code>Type</code>, since it has an explicit witness, namely <code>nat.find</code> of some stuff</p>",
        "id": 197988965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589832433
    }
]