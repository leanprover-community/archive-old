[
    {
        "content": "<p>Dear All,</p>\n<p>in the example below (and fairly often when I use <code>if_neg</code> and sometimes with <code>if_pos</code>), I would like the two term mode proofs to be <code>if_pos rfl</code> and <code>if_neg h</code>.</p>\n<p>The first one is almost there, <code>show_term</code> says <code>exact if_pos rfl</code>, but then Lean complains.</p>\n<p>The second one is even more frustrating.  <code>show_term</code> again believes <code>exact if_neg h</code>, but Lean complains.</p>\n<p>My vague understanding of the errors from Lean is that this has to do with some decidability.  However, how can I overcome this?</p>\n<p>Thank you!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_single_same</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- show_term: exact if_pos rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_single_ne</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>  <span class=\"c1\">-- show_term: exact if_neg h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 214311280,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603458795
    },
    {
        "content": "<p>I think the difficulty is that some places in <code>finsupp</code> / <code>polynomial</code> use classical <code>decidable</code> instances, while other places use non-classical ones. I think it might be possible to change them all to explicit typeclass arguments, and leave <code>classical</code> for the point of use?</p>",
        "id": 214312007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603459175
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_single_same</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">if_pos</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">rfl</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_single_ne</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">if_neg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 214312113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> No, we used to do this and the typeclass arguments caused everyone a lot of problems</p>",
        "id": 214312187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459259
    },
    {
        "content": "<p>The correct answer is to use the lemmas that were given in the API instead of unfolding way too far</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_single_same</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">single_eq_same</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_single_ne</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">single_eq_of_ne</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 214312389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459359
    },
    {
        "content": "<p>Actually this theorem is already a bit problematic because <code>single</code> is not a polynomial</p>",
        "id": 214312486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459426
    },
    {
        "content": "<p>you should be using <code>monomial</code> instead</p>",
        "id": 214312596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thank you very much for the solution!  To be honest, I am not sure whether I prefer to see so many underscores of the short tactic mode proofs.  In any case, I am very happy and grateful!</p>\n<p>Also, thank you for pointing me to the exact lemmas!  Whenever I find the appropriate lemmas, I use them, but I had not found them in this case.  I will also convert to <code>monomial</code>!</p>",
        "id": 214312650,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603459505
    },
    {
        "content": "<p>If you look at the proof of <code>single_eq_same</code> you will note that underscores were not necessary</p>",
        "id": 214312700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459547
    },
    {
        "content": "<p>(for the record, even with <code>monomial</code>, Lean complains)</p>",
        "id": 214312707,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603459550
    },
    {
        "content": "<p>yes because you shouldn't use <code>if_pos</code></p>",
        "id": 214312729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459562
    },
    {
        "content": "<p>it might be good for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coeff_monomial</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n<p>to have an explicit decidable instance, so that if you rewrite with it you don't end up with the wrong instance</p>",
        "id": 214312884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459651
    },
    {
        "content": "<p>I am not sure whether now I am more or less confused: I used <code>single</code> and it did not work, but in <code>single_eq_same</code> it does?</p>",
        "id": 214312917,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603459677
    },
    {
        "content": "<p>The reason is that your theorem is about <code>nat -&gt;0 R</code> while the one in finsupp is about <code>A -&gt;0 B</code></p>",
        "id": 214313050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459737
    },
    {
        "content": "<p>the typeclass instance that is inferred for <code>nat</code> is not the generic one</p>",
        "id": 214313069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459752
    },
    {
        "content": "<p>generally, inside the same file that defines these things you will not have such problems because the context is the same so you get the same instances</p>",
        "id": 214313123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459790
    },
    {
        "content": "<p>which is one more reason to make and use an API</p>",
        "id": 214313199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459807
    },
    {
        "content": "<p>Ok, this is starting to clear up some doubts that I have and was unable to express!</p>",
        "id": 214313233,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603459829
    },
    {
        "content": "<p>In this case, I would just do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_monomial_same</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_monomial</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_monomial_ne</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">coeff_monomial</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 214313294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459865
    },
    {
        "content": "<p>or if you prefer</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_monomial_same</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">coeff_monomial</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coeff_monomial_ne</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">a</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">coeff_monomial</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 214313369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459912
    },
    {
        "content": "<p>because this doesn't involve unfolding past an API barrier</p>",
        "id": 214313438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603459931
    },
    {
        "content": "<p>Maybe one more (vague and with a very long <code>mwe</code>): sometimes, I am left to prove that two expressions that look the same, coincide and <code>refl</code> does not work.  If I ask Lean to tell me more, I realize that one has several extra layers of <code>eq.rec</code> composed with one another.  Likely, this is again a consequence of my extra unfolding: is there an \"after the fact solution\" for this?</p>",
        "id": 214313474,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603459963
    },
    {
        "content": "<p>extra layers of eq.rec aren't necessarily a problem</p>",
        "id": 214313536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603460010
    },
    {
        "content": "<p>you have to see past that to find the actual place where they aren't defeq</p>",
        "id": 214313566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603460035
    },
    {
        "content": "<p>the <code>convert</code> tactic sometimes helps</p>",
        "id": 214313611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603460046
    },
    {
        "content": "<p>Ok, should I run into some other similar instance, I may ask a question here.</p>\n<p>Thank you very much for your help: I always come out of these Q&amp;A with a much better understanding!</p>",
        "id": 214313698,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603460105
    },
    {
        "content": "<p>Usually when I'm faced with a non-reflable <code>X = X</code> goal I try <code>congr'</code>. This zooms straight to the problematic part of the equality. If it's some typeclass issue then this might indicate I did something wrong earlier. But <code>congr'</code> is ideal for this.</p>",
        "id": 214318379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603462424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/if_neg/near/214318379\">said</a>:</p>\n<blockquote>\n<p>Usually when I'm faced with a non-reflable <code>X = X</code> goal I try <code>congr'</code>. This zooms straight to the problematic part of the equality. If it's some typeclass issue then this might indicate I did something wrong earlier. But <code>congr'</code> is ideal for this.</p>\n</blockquote>\n<p>I will try <code>congr'</code>, thanks for the suggestion, Kevin!</p>",
        "id": 214319535,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1603462967
    }
]