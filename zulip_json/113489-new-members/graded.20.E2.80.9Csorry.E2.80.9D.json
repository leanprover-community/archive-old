[
    {
        "content": "<p>heard this from david spivak: sorry could be a whole system that essentially allows appeals to authority in a structured way</p>\n<p>example:</p>\n<p><code>sorry “proof can be found at $URL”</code></p>\n<p>the grading is where some authority has heigher weight than another.</p>\n<p>just thought it was an interesting idea since appeals to authority are so common in day to day practice</p>",
        "id": 274345258,
        "sender_full_name": "Alok Singh (S1'17)",
        "timestamp": 1646623299
    },
    {
        "content": "<p>Something like that could certainly be done. But note that mathlib doesn't allow <code>sorry</code> in the first place. So this would be a feature for projects building on top of mathlib.</p>",
        "id": 274354036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646634127
    },
    {
        "content": "<p>Appealing to authority is risky here, because the authority only says \"I have a proof for X\", and doesn't do anything to reassure you that \"X\" is what you told lean you were trying to prove</p>",
        "id": 274369058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646646747
    },
    {
        "content": "<p>To me, the suggested syntax seems more like a convenient way to write TODO, rather than appealing to authority.</p>",
        "id": 274369772,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646647170
    },
    {
        "content": "<p>However, there is not much of a difference from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"gr\">sorry</span> <span class=\"c1\">--proof can be found at $URL</span>\n</code></pre></div>",
        "id": 274369903,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646647212
    },
    {
        "content": "<p>The suggested syntax is probably better — the compiler would then be able to provide a list of all <code>sorry</code>s with respective messages.</p>",
        "id": 274370125,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646647311
    },
    {
        "content": "<p>I think in tactic mode <code>sorry \"msg\"</code> might already be supported</p>",
        "id": 274371659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646648222
    },
    {
        "content": "<p>It doesn't work on my computer (lean3).</p>",
        "id": 274372455,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646648743
    },
    {
        "content": "<p>Which lean 3?</p>",
        "id": 274373233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646649184
    },
    {
        "content": "<p><code>leanprover-community/lean:3.38.0</code></p>",
        "id": 274373272,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646649216
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">appeal_to</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"n\">tactic.trace</span> <span class=\"bp\">$</span> <span class=\"n\">format</span><span class=\"bp\">!</span> <span class=\"s2\">\"Appeal to authority: {t}\"</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic.admit</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">flt</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">appeal_to</span> <span class=\"s2\">\"Andrew Wiles\"</span>\n\n<span class=\"c1\">-- Appeal to authority: \"Andrew Wiles\"</span>\n<span class=\"c1\">-- declaration 'flt' uses sorry</span>\n</code></pre></div>",
        "id": 274376611,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646651380
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 274381737,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1646654554
    }
]