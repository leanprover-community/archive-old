[
    {
        "content": "<p>I'm new to lean and I found the behaviour of tactic rw hard to comprehend.<br>\n<strong>First problem:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n  <span class=\"o\">⟨</span><span class=\"n\">k₁</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n      <span class=\"o\">(</span><span class=\"n\">k₁</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k₁</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul</span><span class=\"o\">]</span>\n              <span class=\"n\">_</span>         <span class=\"bp\">=</span> <span class=\"n\">k₁</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k₂</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_assoc</span><span class=\"o\">]</span>\n              <span class=\"n\">_</span>         <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>             <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">d₁</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">]⟩</span>\n</code></pre></div>\n<p>The above code works, however after a slight modification, it no longer works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₁</span><span class=\"o\">,</span> <span class=\"n\">d₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">k₂</span><span class=\"o\">,</span> <span class=\"n\">d₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span>\n  <span class=\"o\">⟨</span><span class=\"n\">k₁</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>\n      <span class=\"o\">(</span><span class=\"n\">k₁</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">k₁</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k₂</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_mul</span><span class=\"o\">]</span>\n              <span class=\"n\">_</span>         <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>             <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">→</span><span class=\"n\">Nat.mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">→</span><span class=\"n\">d₁</span><span class=\"o\">,</span> <span class=\"bp\">→</span><span class=\"n\">d₂</span><span class=\"o\">]</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p><strong>Second problem:</strong> I was experimenting with the rw tactic and found this. It might seem made-up</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\">  rw fails -/</span>\n</code></pre></div>\n<p>I thought that it wouldn't fail because <code>5</code> is <code>Nat.succ (Nat.succ 3)</code>.</p>",
        "id": 293707886,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1660653867
    },
    {
        "content": "<p>Do <code>rw [H]</code> instead of <code>rw [← H]</code> to replace <code>x</code> by <code>3</code>.</p>",
        "id": 293744216,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660664928
    },
    {
        "content": "<p>I noticed it is written in Lean 4, which I have no experience with. Better wait for someone else's reply.</p>",
        "id": 293744704,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1660665085
    },
    {
        "content": "<p><code>I thought that it wouldn't fail because 5 is Nat.succ (Nat.succ 3)</code> : it is definitionally that, but not syntactically that, and <code>rw</code> works up to syntactic equality.</p>",
        "id": 293749850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660666549
    },
    {
        "content": "<p>while I use the tactic ring_nf to solve equation involving ε/37 in R, but will it still works if I change R to a field of characteristic 37 (which is certainly a ring)?</p>",
        "id": 303920161,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665693742
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 303923161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665695000
    },
    {
        "content": "<p><code>ring_nf</code> doesn't know anything about division. It will just treat your epsilon/37 opaquely</p>",
        "id": 303923249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665695042
    },
    {
        "content": "<p>there is nothing illegal about writing the term epsilon/37 itself in a ring of characteristic 37, it's just defined to be some nonsense, probably zero</p>",
        "id": 303923370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665695086
    },
    {
        "content": "<p>in particular, it is a proper element of the ring and so ring theorems still apply to it</p>",
        "id": 303923445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665695120
    },
    {
        "content": "<p>however the theorem is unlikely to be useful in that case since it's a true theorem about a garbage value</p>",
        "id": 303923534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665695159
    },
    {
        "content": "<p>the theorem that would fail is something like <code>(ε/37) * 37 = ε</code>, this will require that 37 is invertible, so in particular the characteristic cannot be 37</p>",
        "id": 303923854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665695283
    },
    {
        "content": "<p>well that's true, undefined term would not appear in a theorem anyway~</p>",
        "id": 303929977,
        "sender_full_name": "Ruizhe Wan",
        "timestamp": 1665697847
    },
    {
        "content": "<p>Supposing you make a Prop claiming 37 is not 0, then <code>field_simp</code> can simplify something like <code>(ε/37) * 37 = ε</code>.<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/field_simp.html\">https://leanprover-community.github.io/mathlib_docs/tactic/field_simp.html</a></p>",
        "id": 304148872,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1665805579
    }
]