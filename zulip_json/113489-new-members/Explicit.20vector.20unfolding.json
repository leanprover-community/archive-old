[
    {
        "content": "<p>I often struggle with subgoals like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>What is the easiest way to prove it?</p>",
        "id": 268012036,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642166400
    },
    {
        "content": "<p><code>ext</code>?</p>",
        "id": 268012230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642166495
    },
    {
        "content": "<p>I can't check because you didn't post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and I don't know where that notation is defined.</p>",
        "id": 268012426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642166600
    },
    {
        "content": "<p>I am sorry. Here is MWE.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268012767,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642166767
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span>\n<span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 268012811,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642166804
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268012969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642166889
    },
    {
        "content": "<p>Thank you!</p>\n<p>I think that this is so basic that we should have a lemma or tactic for that, so we can prove my subgoal in \"one command\".</p>",
        "id": 268013203,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642167016
    },
    {
        "content": "<p>As for it being lemma, I cannot make it generic for every vector size, so it should probably be done by a tactic.</p>",
        "id": 268013460,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642167142
    },
    {
        "content": "<p>If you think that writing tactic for that would be hard, I will create several lemmata for all \"small\" vector sizes. Just tell me which file they should be added to.</p>",
        "id": 268013508,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642167180
    },
    {
        "content": "<p>I think the generic version is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.cons_head_tail\">docs#matrix.cons_head_tail</a></p>",
        "id": 268015913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642168325
    },
    {
        "content": "<p>Can you please show me how you prove the following example using <code>matrix.cons_head_tail</code> please?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.matrix.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268016714,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642168791
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">iterate</span> <span class=\"mi\">5</span> <span class=\"o\">{</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">matrix.cons_head_tail</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 268018847,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642169836
    },
    {
        "content": "<p>Thanks! I can see that it is not as friendly as I wished for. Can I create separate lemmata for vector sizes 1 to 9 for it? Or is there a better solution? I don't know whether a generic tactic for that is doable and desirable.</p>",
        "id": 268019285,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642170042
    },
    {
        "content": "<p>This seems slightly better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">matrix.eq_cons_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"bp\">↔</span> <span class=\"n\">vec_head</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">vec_tail</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"o\">⟨</span><span class=\"n\">head_cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tail_cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">⟩,</span> <span class=\"n\">hx</span> <span class=\"bp\">▸</span> <span class=\"n\">hu</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">matrix.cons_head_tail</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- not used below, but for completeness</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">matrix.cons_eq_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n.succ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">vec_cons</span> <span class=\"n\">x</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">vec_head</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">vec_tail</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">,</span> <span class=\"n\">matrix.eq_cons_iff</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">matrix.eq_cons_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268019579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642170164
    },
    {
        "content": "<p>Thanks!</p>\n<p>Is it a code you would like to see in mathlib?</p>",
        "id": 268019848,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642170295
    },
    {
        "content": "<p><code>matrix.eq_cons_iff</code> and <code>matrix.cons_eq_iff</code> seem harmless. I'm much less keen on hard-coding lemmas for <code>fin n</code> from 0 to 9</p>",
        "id": 268019907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642170328
    },
    {
        "content": "<p>What about <code>matrix.eq_cons_iff</code> and <code>matrix.cons_eq_iff</code> and explicit lemmata for <code>fin 2</code> and <code>fin 3</code> only? I really wish that was a one-liner.</p>",
        "id": 268020139,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642170418
    },
    {
        "content": "<p><code>ext i, fin_cases; refl</code> is a pretty reasonable answer the the question</p>",
        "id": 268020254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642170465
    },
    {
        "content": "<p>What's the underlying motivation here? What are you trying to prove about <code>![...]</code> expressions?</p>",
        "id": 268020351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642170491
    },
    {
        "content": "<p>I'd like to provide <code>@[simp]</code> version of the lemmata <code>vec2_add</code>, <code>vec3_add</code>, <code>smul_vec2</code>, <code>smul_vec3</code> as we did with <code>vec2_dot_product</code>. Moreover, having lemma or tactic for things like <code>v = ![v 0, v 1]</code> seems that it would be useful in general — too often I was in situations like this.</p>",
        "id": 268020759,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642170667
    },
    {
        "content": "<p>We already have the simp version of those lemmas though, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.cons_add_cons\">docs#matrix.cons_add_cons</a> etc?</p>",
        "id": 268020798,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642170691
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vec2_dot_product'</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">]</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">a₀</span> <span class=\"bp\">*</span> <span class=\"n\">b₀</span> <span class=\"bp\">+</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">b₁</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cons_dot_product_cons</span><span class=\"o\">,</span> <span class=\"n\">cons_dot_product_cons</span><span class=\"o\">,</span> <span class=\"n\">dot_product_empty</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">vec2_dot_product</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">⬝ᵥ</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">vec2_dot_product'</span>\n</code></pre></div>",
        "id": 268020806,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642170696
    },
    {
        "content": "<p>We have those already, right?</p>",
        "id": 268021163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642170844
    },
    {
        "content": "<p>Yeah. That was just an example of what I wanted to do with the other lemmas.</p>",
        "id": 268021203,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642170867
    },
    {
        "content": "<p>I can't translate the dot_product lemmas into the add lemmas you have in mind</p>",
        "id": 268021245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642170886
    },
    {
        "content": "<p>Can you give the statement of the lemmas you're thinking of?</p>",
        "id": 268021263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642170895
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vec2_add_</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">w</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Unfortunately, <code>simp</code> cannot prove it automatically even when it has <code>cons_add_cons</code> available.</p>",
        "id": 268021334,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642170939
    },
    {
        "content": "<p>That doesn't look like a useful lemma to me</p>",
        "id": 268021447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642171008
    },
    {
        "content": "<p>Do you have a goal in mind you want to use it on?</p>",
        "id": 268021469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642171025
    },
    {
        "content": "<p>OK. I wanted to have them rather for completeness. If you think they are useless, I will forget about them.</p>",
        "id": 268021493,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642171043
    },
    {
        "content": "<p>What _might_ be useful is an <code>unfold_fin_vector v</code> tactic that replaces all unapplied <code>v</code>s in the goal with <code>![v 0, v 1, v 2, v 3, v 4]</code></p>",
        "id": 268021578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642171083
    },
    {
        "content": "<p>But that would be a tactic, not a lemma</p>",
        "id": 268021606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642171093
    },
    {
        "content": "<p>Yep!</p>",
        "id": 268021621,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642171102
    },
    {
        "content": "<p>It would probably be a good opportunity to throw yourself into the metaprogramming deep end, but I doubt it would actually end up all that useful</p>",
        "id": 268021686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642171144
    },
    {
        "content": "<p>Actually, do you have an example where <code>simp</code> uses <code>cons_add_cons</code> automatically?</p>",
        "id": 268021715,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642171157
    },
    {
        "content": "<p>Sure,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vec2_add</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span> <span class=\"bp\">+</span> <span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₁</span><span class=\"o\">]</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 268021761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642171197
    },
    {
        "content": "<p>I'm not sure if you've worked this out already, but <code>![a, b, c, ...]</code> is syntax for <code>vec_cons a ![b, c, ...]</code> and <code>![]</code> is syntax for <code>vec_empty</code></p>",
        "id": 268021835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642171227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Explicit.20vector.20unfolding/near/268021761\">said</a>:</p>\n<blockquote>\n<p>Sure,</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">vec2_add</span> <span class=\"o\">{</span><span class=\"n\">a₀</span> <span class=\"n\">a₁</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a₀</span> <span class=\"bp\">+</span> <span class=\"n\">b₀</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₁</span><span class=\"o\">]</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's cool, thanks!</p>",
        "id": 268021858,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642171243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Explicit.20vector.20unfolding/near/268021835\">said</a>:</p>\n<blockquote>\n<p>I'm not sure if you've worked this out already, but <code>![a, b, c, ...]</code> is syntax for <code>vec_cons a ![b, c, ...]</code> and <code>![]</code> is syntax for <code>vec_empty</code></p>\n</blockquote>\n<p>I know; I have been working with that all the time in past days.</p>",
        "id": 268021893,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642171264
    },
    {
        "content": "<p>OK ok, so can we conclude that?<br>\n– Having hard-coded lemmata like <code>v = ![v 0, v 1, v 2, v 3, v 4]</code> would not be useful enough.<br>\n– Developing a tactic for that would not be worth the hassle.</p>",
        "id": 268022133,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1642171410
    },
    {
        "content": "<p>It would likely be worth the hassle for the sake of learning how to write tactics, but not for the sake of the end result</p>",
        "id": 268030669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642175037
    },
    {
        "content": "<p>Regarding your original question (how to prove <code>v = ![v 0, v 1, v 2, v 3, v 4]</code> for arbitrary <code>n</code>), since everything is computable, I don't think we need a tactic for that. A simple <code>decidable</code> instance should do the trick. Alternatively, you can prove a general lemma and apply it directly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk_vec</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">vec_cons</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">clear</span> <span class=\"n\">mk_vec</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_eq_add_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">tsub_tsub</span><span class=\"o\">,</span> <span class=\"n\">add_tsub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">succ_add</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">lt_succ_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_self_add</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">mk_vec</span> <span class=\"o\">(</span><span class=\"n\">le_of_succ_le</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">vec_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">mk_vec</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"o\">:=</span> <span class=\"n\">vec_eq</span> <span class=\"c1\">-- Proves the goal automatically</span>\n</code></pre></div>",
        "id": 268037204,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642177679
    },
    {
        "content": "<p>I don't think a decidable instance would work, unless <code>α</code> has decidable equality</p>",
        "id": 268038191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642178099
    },
    {
        "content": "<p>That <code>mk_vec</code> is nifty, thanks!</p>",
        "id": 268038517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642178248
    },
    {
        "content": "<p>challenge question: write a similar dependent-type theorem schema for <code>\\exists a b c d e, v = ![a, b, c, d, e]</code></p>",
        "id": 268038881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642178394
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Solution</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.vec_notation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exists_vec_type</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"o\">((</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"bp\">!</span><span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exists_vec_type</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">vec_cons</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_vec_aux</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">exists_vec_type</span> <span class=\"n\">P</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">v</span> <span class=\"n\">P</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">empty_eq</span> <span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">!</span><span class=\"o\">[])</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"n\">P</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">vec_head</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">exists_vec_aux</span> <span class=\"o\">(</span><span class=\"n\">vec_tail</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">cons_head_tail</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_vec</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exists_vec_type</span> <span class=\"o\">(</span><span class=\"n\">eq</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">exists_vec_aux</span> <span class=\"n\">v</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">5</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">exists_vec</span> <span class=\"n\">v</span>\n</code></pre></div>\n</div></div>",
        "id": 268041909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642179652
    },
    {
        "content": "<p>The above is part of <a href=\"https://github.com/leanprover-community/mathlib/pull/15738\">#15738</a></p>",
        "id": 291301682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659087926
    }
]