[
    {
        "content": "<p>I am going through kevin buzzard's very pleasant current undergraduate course and there is a proof of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I know  a bit about coq style proofs and so I wanted to do this using semicolons as something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">cases</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"mi\">2</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">assumption</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">assumption</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>or something like that, but I don't know what names lean is guaranteed to generate so I wanted to know what is the proper way to refer to such names in a robust way?</p>",
        "id": 268490652,
        "sender_full_name": "Callan McGill",
        "timestamp": 1642565778
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"o\">},</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">assumption</span><span class=\"o\">},</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't know how to run <code>cases</code> on a term whose name I don't know.</p>",
        "id": 268490945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642566150
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#destruct\">tactic#destruct</a> seems useful here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">destruct</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">split</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268491636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642567116
    },
    {
        "content": "<p>It seems to be like <code>cases</code>, but it does <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#revert\">tactic#revert</a> to all the new hypotheses</p>",
        "id": 268491650,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642567155
    }
]