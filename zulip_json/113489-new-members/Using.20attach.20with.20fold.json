[
    {
        "content": "<p>I'm trying to prove that if z is disjoint from everything in A, then z is disjoint from the union of the things in A:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">disjoint_all</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">disjoint</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"err\">∪</span><span class=\"o\">)</span> <span class=\"err\">∅</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold_empty</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_empty_left</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">h₂</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold_insert</span> <span class=\"n\">h₂</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_union_left</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">k</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>It was all going really well, but I just need to show that the element we're inserting for the fold has come from <code>A</code> - which should be obvious because we're folding over <code>A</code>. (Not entirely sure why <code>induction_on</code> isn't set up so that I can use this...) I'm pretty sure this is the sort of thing <code>attach</code> is meant to fix, but letting <code>B := A.attach</code> means it's no longer clear to me how the induction should work - if I do induction on <code>B</code> how can I prove that the thing we get is equivalent?</p>",
        "id": 181201259,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574252053
    },
    {
        "content": "<p>You might find it easier working with <code>A.bind id</code> as the union of A, or perhaps <code>⋃ x ∈ A, ↑x</code></p>",
        "id": 181201580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574252284
    },
    {
        "content": "<p>You need to do induction generalizing <code>h</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">disjoint_all</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">disjoint</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"err\">∪</span><span class=\"o\">)</span> <span class=\"err\">∅</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold_empty</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_empty_left</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">h₂</span> <span class=\"n\">ih</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">fold_insert</span> <span class=\"n\">h₂</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">disjoint_union_left</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_self</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_of_mem</span> <span class=\"n\">hx</span><span class=\"o\">))</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 181201894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574252566
    },
    {
        "content": "<p>I see, thanks!</p>",
        "id": 181202530,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574253007
    },
    {
        "content": "<p>I'm surprised that the generalisation trick works, but it makes sense! I can't use your latter suggestion for the union, since I do need finiteness in another part of my proof, but I'll have a go with <code>bind</code> as well.</p>",
        "id": 181202637,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574253098
    },
    {
        "content": "<p>Not sure how helpful this is, but I think the original proof is misguided. You shouldn't be using induction to prove this at all. Instead, you should have a lemma that tells you when something is an element of <code>A.fold (∪) ∅ id</code> (which you will prove by induction).</p>",
        "id": 181206124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574256084
    },
    {
        "content": "<p>Using <code>A.bind id</code> basically solves this problem, since it already has the requisite lemmas</p>",
        "id": 181206226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574256163
    },
    {
        "content": "<p>Then this proof becomes easy (<code>intro a</code>, apply lemmas about what it means for <code>a</code> to be an element of various <code>finset</code>s).</p>",
        "id": 181206228,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574256165
    },
    {
        "content": "<p>The difference is that knowing the elements of <code>A.fold (∪) ∅ id</code> totally characterizes it as a set, so you won't have to do another induction for the next lemma like this one that you need.</p>",
        "id": 181206345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574256253
    },
    {
        "content": "<p>Yeah, I'm a little surprised there isn't already a definition like <code>A.Union := A.bind id</code>.</p>",
        "id": 181206356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574256277
    },
    {
        "content": "<p>Me too, but really I don't think <code>Union</code> will be able to provide better lemmas than <code>bind</code> already has, when specialized to <code>id</code></p>",
        "id": 181206577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574256450
    },
    {
        "content": "<p>I think your criticism is fair, but this lemma was meant to be used when proving that the cardinality of the union is the sum of the cardinalities when the sets are all disjoint - so this seemed like the natural way of going about it. Perhaps with broader context using bind might turn out better, I will try further. I think I will need to characterise elements at some point anyway.</p>",
        "id": 181206582,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574256459
    },
    {
        "content": "<p>that theorem generalizes to <code>bind</code> indeed</p>",
        "id": 181206666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574256509
    },
    {
        "content": "<p>in fact it already exists - <code>finset.card_bind</code> in <code>algebra.big_operators</code></p>",
        "id": 181206705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574256561
    },
    {
        "content": "<p>Oh! Big operators sounds very useful, thank you</p>",
        "id": 181206852,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574256695
    },
    {
        "content": "<p>Yeah, mainly I think <code>finset.bind id</code> is not that easily discoverable, especially because <code>bind</code> is a notion which doesn't really appear in math.</p>",
        "id": 181207108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574256928
    },
    {
        "content": "<p>the name is only useful if you think in monads</p>",
        "id": 181207140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574256947
    },
    {
        "content": "<p>the notion of course does appear in math, but it's called \"indexed union\"</p>",
        "id": 181207199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574256973
    },
    {
        "content": "<p>Tangentially related story. I wanted to prove that if <code>o : roption α</code> and <code>a ∈ o</code> and <code>b ∈ o</code> then <code>a = b</code>. I didn't see it looking through <code>data.pfun</code> so I defined <code>mem_unique</code> and proved it.</p>",
        "id": 181207256,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574257036
    },
    {
        "content": "<p>Yeah I was familiar with the notion of bind, but my cardinality theorem felt like the maths proof should use induction</p>",
        "id": 181207274,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574257053
    },
    {
        "content": "<p>That worked fine but then Lean gave an error on this later line:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mem_unique</span> <span class=\"o\">:</span> <span class=\"n\">relator</span><span class=\"bp\">.</span><span class=\"n\">left_unique</span> <span class=\"o\">((</span><span class=\"err\">∈</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">roption</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 181207282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574257066
    },
    {
        "content": "<p>It's actually exactly the same type but my eyes were looking for <code>a ∈ o → b ∈ o → a = b</code></p>",
        "id": 181207364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1574257120
    },
    {
        "content": "<p>Also I don't think I saw theorems about cardinality of bind, but maybe I looked in the wrong place</p>",
        "id": 181207391,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574257135
    },
    {
        "content": "<p>I think it has happened to me on at least three separate occasions that I prove a lemma and end up finding that it already exists because the name clashes</p>",
        "id": 181207409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574257156
    },
    {
        "content": "<p>I also wouldn't have thought to look there for it; I grepped for <code>card_bind</code></p>",
        "id": 181207544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574257252
    },
    {
        "content": "<p>it makes sense in hindsight, because that's where <code>finset.sum</code> is defined, which is required for the statement</p>",
        "id": 181207569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574257277
    },
    {
        "content": "<p>It wasn't required for my statement :P But yeah this helps a lot, thanks both</p>",
        "id": 181207966,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574257603
    },
    {
        "content": "<p>Tangential: if my goal has something like <code>id a</code> or <code>(λ x, _) y</code>, sometimes lean doesn't unify it how I want - what's the tactic I need for simplifying those terms? (I know <code>simp</code> would do it, but it feels like overkill and might screw up other terms)</p>",
        "id": 181208136,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574257755
    },
    {
        "content": "<p><code>dsimp</code></p>",
        "id": 181208243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574257846
    },
    {
        "content": "<p>Awesome thanks</p>",
        "id": 181208294,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574257898
    },
    {
        "content": "<blockquote>\n<p>the name is only useful if you think in monads</p>\n</blockquote>\n<p>Make that CS monads, because the monads that do occur in maths use different terminology, I think.</p>",
        "id": 181214626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1574262014
    },
    {
        "content": "<blockquote>\n<p>You might find it easier working with <code>A.bind id</code> as the union of A, or perhaps <code>⋃ x ∈ A, ↑x</code></p>\n</blockquote>\n<p>Using <code>bind</code> turned out to be a lot nicer, thank you!</p>",
        "id": 181289048,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1574329661
    }
]