[
    {
        "content": "<p>I’m doing the natural number game, and im stuck on how to prove the first goal. Is using induction the right approach? <a href=\"/user_uploads/3121/2YKhJzcUucUnFC9wOobeWCrC/AB39A285-F83B-42C6-81E3-03E0F791CA3F.jpeg\">AB39A285-F83B-42C6-81E3-03E0F791CA3F.jpeg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2YKhJzcUucUnFC9wOobeWCrC/AB39A285-F83B-42C6-81E3-03E0F791CA3F.jpeg\" title=\"AB39A285-F83B-42C6-81E3-03E0F791CA3F.jpeg\"><img src=\"/user_uploads/3121/2YKhJzcUucUnFC9wOobeWCrC/AB39A285-F83B-42C6-81E3-03E0F791CA3F.jpeg\"></a></div>",
        "id": 269033185,
        "sender_full_name": "J. O.",
        "timestamp": 1642964138
    },
    {
        "content": "<p>do induction on <code>b</code> not <code>a</code></p>",
        "id": 269033353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642964395
    },
    {
        "content": "<p>because addition is defined by recursion on the second argument</p>",
        "id": 269033411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642964411
    },
    {
        "content": "<p>Hmm i think i see</p>",
        "id": 269033502,
        "sender_full_name": "J. O.",
        "timestamp": 1642964519
    },
    {
        "content": "<p>zero_add doesn't work because your term is not of the form 0 + x. You should be able to use the lemmas you have of you use induction on <code>b</code>.</p>",
        "id": 269033558,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642964558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20on.20nat.20game/near/269033411\">said</a>:</p>\n<blockquote>\n<p>because addition is defined by recursion on the second argument</p>\n</blockquote>\n<p>I think they said that in the game somewhere</p>",
        "id": 269033590,
        "sender_full_name": "J. O.",
        "timestamp": 1642964602
    },
    {
        "content": "<p>I dont really understand the recursion part of the reasoning (sorry if i sound stupid)</p>",
        "id": 269033662,
        "sender_full_name": "J. O.",
        "timestamp": 1642964664
    },
    {
        "content": "<p>Do you keep adding one until the second number is zero?</p>",
        "id": 269033755,
        "sender_full_name": "J. O.",
        "timestamp": 1642964776
    },
    {
        "content": "<p>I’m going to recreate such a function to understand</p>",
        "id": 269033762,
        "sender_full_name": "J. O.",
        "timestamp": 1642964790
    },
    {
        "content": "<p>yes, that is how addition on nats is defined. You should have used that in the proof of add_succ.</p>",
        "id": 269033833,
        "sender_full_name": "Daniel Roca González",
        "timestamp": 1642964898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">J. O.</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20on.20nat.20game/near/269033590\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>because addition is defined by recursion on the second argument</p>\n</blockquote>\n<p>I think they said that in the game somewhere</p>\n</blockquote>\n<p>It's easy to miss this, but the key is the two theorems you get at the beginning:</p>\n<p><a href=\"/user_uploads/3121/nLxI2c6bKGZAZvn72n-PKg6j/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/nLxI2c6bKGZAZvn72n-PKg6j/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/nLxI2c6bKGZAZvn72n-PKg6j/image.png\"></a></div><p>It means that if you have, say <code>a + 3</code>, you can compute that it's <code>succ (succ (succ a))</code> by repeatedly applying the second theorem and then the first theorem at the end.</p>",
        "id": 269033965,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642965106
    },
    {
        "content": "<p>If you had <code>3 + a</code> with an unknown <code>a</code>,  then there's nothing you can do with only those two theorems.</p>",
        "id": 269034022,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642965149
    },
    {
        "content": "<p>(These two theorems actually are the definition for addition.)</p>",
        "id": 269034036,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642965170
    },
    {
        "content": "<p>So why did I have to do induction in b instead of a</p>",
        "id": 269034574,
        "sender_full_name": "J. O.",
        "timestamp": 1642965831
    },
    {
        "content": "<blockquote>\n<p>\"Do you keep adding one until the second number is zero?\"</p>\n</blockquote>\n<p>Essentially addition is defined by \"keep moving <code>succ</code> to the left past the addition until the second number is zero\".</p>\n<p>For example, how do we evaluate <code>a + 3</code>?   Since <code>3</code> is <code>succ (succ (succ zero))</code>, by repeatedly rewriting with <code>add_succ</code> we have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"o\">))</span>\n<span class=\"bp\">=</span>\n<span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"o\">))</span>\n<span class=\"bp\">=</span>\n<span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span><span class=\"o\">))</span>\n<span class=\"bp\">=</span>\n<span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">zero</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>and then by <code>add_zero</code> this is equal to <code>succ (succ (succ a))</code></p>",
        "id": 269034733,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642965985
    },
    {
        "content": "<p>Notice that <code>a</code> stays the same here, while <code>b</code> keeps decrementing: <code>a + 3 = succ(a + 2) = succ(succ(a + 1)) = succ(succ(succ(a + 0)))</code>.</p>",
        "id": 269034825,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642966106
    },
    {
        "content": "<p>Since this is how addition is defined — \"by recursion on the second argument\" — when we want to prove something about addition we often do it by an induction on the second (or more generally, the rightmost) argument.</p>",
        "id": 269034865,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642966200
    },
    {
        "content": "<p>Ah ok. So it’s something more generally used</p>",
        "id": 269034934,
        "sender_full_name": "J. O.",
        "timestamp": 1642966321
    },
    {
        "content": "<p>So in a theorem like <code>succ(a) + b = succ(a + b)</code> as in Level 3/6, we let <code>a</code> be arbitrary since it's going to be held fixed by these rewrites, and then we have to prove that for this arbitrary <code>a</code> the theorem holds for all <code>b</code>.</p>",
        "id": 269034976,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642966332
    },
    {
        "content": "<p>after that, I call <code>rw add_zero</code>?</p>",
        "id": 269034982,
        "sender_full_name": "J. O.",
        "timestamp": 1642966353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/113489-new-members/topic/Stuck.20on.20nat.20game/near/269034976\">said</a>:</p>\n<blockquote>\n<p>So in a theorem like <code>succ(a) + b = succ(a + b)</code> as in Level 3/6, we let <code>a</code> be arbitrary since it's going to be held fixed by these rewrites, and then we have to prove that for this arbitrary <code>a</code> the theorem holds for all <code>b</code>.</p>\n</blockquote>\n<p>This is because b is the recursive argument, right?</p>",
        "id": 269035023,
        "sender_full_name": "J. O.",
        "timestamp": 1642966428
    },
    {
        "content": "<p>If we do induction on <code>b</code> we get a goal like <code>succ(a) + 0 = succ(a + 0)</code> and <code>add_zero</code> works on that. If you do induction on <code>a</code> you would get <code>succ(0) + b = succ(0 + b)</code> and you would need <code>zero_add</code> which you don't have yet</p>",
        "id": 269035080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642966490
    },
    {
        "content": "<p>When we use <code>induction b</code> it produces two goals: prove that the theorem holds for <code>b=0</code> (the base case), and prove that if it hold for some number <code>b'</code> then it also holds for <code>succ b'</code> (the inductive step).</p>",
        "id": 269035085,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642966503
    },
    {
        "content": "<p>We know how to deal with an addition where the second argument is of the form <code>succ b'</code> — that's just what we were looking at above with the chain of rewrites by <code>add_succ</code>.</p>",
        "id": 269035157,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642966609
    },
    {
        "content": "<p>So when we're asked to prove something involving <code>succ a + succ b'</code> we know we can rewrite it with <code>add_succ</code> to turn it into <code>succ(succ a + b')</code>.  Again, the first argument to the addition remains unchanged, and the <code>succ</code> on the second argument is moved to the left.</p>",
        "id": 269035271,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642966781
    },
    {
        "content": "<p>And now the \"inductive hypothesis\" comes to the rescue.  We're assuming that the theorem holds for <code>b'</code> (that's the \"inductive hypothesis\") and trying to prove it for <code>succ b'</code>.  So we can use the inductive hypothesis to rewrite the thing inside the brackets.</p>",
        "id": 269035417,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642966971
    },
    {
        "content": "<blockquote>\n<p>So why did I have to do induction in b instead of a</p>\n</blockquote>\n<p>Since <code>mynat</code> is an inductive datatype, we can use induction/recursion to construct something involving <code>mynat</code>. Addition is defined using recursion on the second argument. If we want to prove something about addition, we should induct on the second argument. Induction is basically a recursion that constructs a proof term.</p>",
        "id": 269035453,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642967035
    },
    {
        "content": "<p>Thanks everyone for these great answers</p>",
        "id": 269035773,
        "sender_full_name": "J. O.",
        "timestamp": 1642967412
    },
    {
        "content": "<p>I was able to prove the first goal with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n<span class=\"n\">refl</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>But im a bit unsure about the second goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Any hints would be appreciated</p>\n<p>I did this so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>And i get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">mynat.succ</span>\n<span class=\"n\">a</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">,</span>\n<span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I dont know how to continue really</p>",
        "id": 269046280,
        "sender_full_name": "J. O.",
        "timestamp": 1642981543
    },
    {
        "content": "<p>notice that <code>hd</code> matches the left side</p>",
        "id": 269046341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642981616
    },
    {
        "content": "<p>Do you know what induction is and how it works? Did you see this in class yet?</p>\n<p>The way induction works is that you get an inductive hypothesis which almost always is an essential part of the proof.</p>\n<p>The game is designed for people who are already familiar with mathematical induction (in fact it's designed for maths undergraduates at my university), so I don't explain the ins and outs of how it works -- apologies if this is not a good fit for you.</p>",
        "id": 269046352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642981647
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269047560,
        "sender_full_name": "Hans Parshall",
        "timestamp": 1642983228
    }
]