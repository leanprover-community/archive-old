[
    {
        "content": "<p>I'm trying to define two inductive families which depend on each other for each \"family-index step\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">mutual</span> <span class=\"kd\">inductive</span> <span class=\"n\">network</span><span class=\"o\">,</span> <span class=\"n\">reactor</span>\n<span class=\"k\">with</span> <span class=\"n\">network</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">network</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">reactor</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">network</span> <span class=\"n\">d</span>\n<span class=\"k\">with</span> <span class=\"n\">reactor</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">network</span> <span class=\"n\">d</span> <span class=\"bp\">→</span> <span class=\"n\">reactor</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>That is:</p>\n<ul>\n<li><code>network 0</code> should be constructible from <code>empty</code></li>\n<li><code>network (succ n)</code> should be constructible from <code>list (reactor n)</code></li>\n<li><code>reactor n</code> should be constructible from <code>network n</code></li>\n</ul>\n<p>The definition above produces the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nested</span> <span class=\"n\">occurrence</span> <span class=\"bp\">'</span><span class=\"n\">list.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">reactor.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">has_sub.sub.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_sub</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">has_one.one.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)))</span><span class=\"bp\">'</span> <span class=\"n\">contains</span> <span class=\"kd\">variables</span> <span class=\"n\">that</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"kd\">parameters</span>\n</code></pre></div>\n<p>I'm guessing this means that I can't write the <code>d - 1</code>.<br>\nCan I define this in a way that constrains the second constructor to <code>d = succ n</code> for some <code>n : ℕ</code>, so that I can then say:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">reactor</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">network</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>Or more generally: Is this even correct syntax?</p>",
        "id": 246440666,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1626692234
    }
]