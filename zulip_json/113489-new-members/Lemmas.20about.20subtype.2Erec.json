[
    {
        "content": "<p>I have as assumption something of the form <code>subtype.rec x1 t = subtype.rec x2 t</code>, and my goal is <code>x1 = x2</code>, I'm struggling to see what to do next (the <code>injection</code> tactic didn't work), any suggestions?</p>",
        "id": 180762282,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573758197
    },
    {
        "content": "<p><code>apply subtype.val_injective</code>?</p>",
        "id": 180762408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573758257
    },
    {
        "content": "<p>Sorry, that goes the wrong way round.</p>",
        "id": 180762534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573758337
    },
    {
        "content": "<p>That changes the goal to <code>x1.val = x2.val</code></p>",
        "id": 180762545,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573758354
    },
    {
        "content": "<p><code>exact congr_arg subtype.val h_your_subtype.rec_assumption</code></p>",
        "id": 180762608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573758372
    },
    {
        "content": "<blockquote>\n<p>That changes the goal to <code>x1.val = x2.val</code></p>\n</blockquote>\n<p>Hmm, are you nesting subtypes?</p>",
        "id": 180762707,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573758455
    },
    {
        "content": "<p>I _think_ so, but subtypes are confusing me</p>",
        "id": 180762912,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573758551
    },
    {
        "content": "<p>What are you trying to do?</p>",
        "id": 180763058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573758620
    },
    {
        "content": "<p>As in: bigger picture</p>",
        "id": 180763067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573758626
    },
    {
        "content": "<p>I think the easiest way to explain would be for me to paste my code here</p>",
        "id": 180763125,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573758659
    },
    {
        "content": "<p>That's generally a good idea <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 180763157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573758682
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- the type of those subsets of X which have cardinality r</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">powerset_len</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"n\">X</span><span class=\"o\">)}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">rset_fintype</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rset_mk</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_powerset_len</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">complete</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">example1</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"mi\">4</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rset_mk</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">example2</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">rset_mk</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">trivial</span><span class=\"o\">),</span>\n <span class=\"n\">rset_mk</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">trivial</span><span class=\"o\">),</span>\n <span class=\"n\">rset_mk</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">trivial</span><span class=\"o\">),</span>\n <span class=\"n\">rset_mk</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)</span>\n <span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">example1</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">example2</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">i</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">elems</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">stretch</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">∉</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">insert</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_powerset_len</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_powerset_len</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">insert_subset</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">complete</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_insert_of_not_mem</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">b_right</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">remove</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">erase</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_powerset_len</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">complete</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_erase_of_mem</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_powerset_len</span> <span class=\"n\">at</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">rset_card</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">card_of_subtype</span> <span class=\"o\">(</span><span class=\"n\">powerset_len</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">elems</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">card_powerset_len</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- in maths notation, shadow 𝒜 = {A−{i} | A ∈ 𝒜, i ∈ A}</span>\n<span class=\"n\">def</span> <span class=\"n\">shadow</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"err\">𝒜</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"n\">r</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">rset</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"err\">𝒜</span><span class=\"bp\">.</span><span class=\"n\">bind</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">A_val</span><span class=\"bp\">.</span><span class=\"n\">attach</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- I can use .image here, but since the function is injective I might as well prove it,</span>\n  <span class=\"c1\">-- it also might make writing mem_shadow easier</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">remove</span> <span class=\"bp\">⟨</span><span class=\"n\">A_val</span><span class=\"o\">,</span> <span class=\"n\">A_property</span><span class=\"bp\">⟩</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val_injective</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">shadow</span> <span class=\"n\">example2</span> <span class=\"c1\">-- should be {{0,1}, {0,2}, {0,3}, {0,4}, {1,2}, {1,3}, {2,3}, {2,4}}</span>\n</pre></div>",
        "id": 180763604,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573758907
    },
    {
        "content": "<p>Ok... that's a whole bunch of code... could you give a bit of context please? What's your goal beyond this? Is this set theory? I know nothing about set theory</p>",
        "id": 180764025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573759163
    },
    {
        "content": "<p>Yeah, sorry about that. It's combinatorics. I think the examples might help a little, but rset is the type of subsets with a given cardinality</p>",
        "id": 180764132,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759213
    },
    {
        "content": "<p>Then shadow ought to be a function acting on a family of rsets</p>",
        "id": 180764160,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759232
    },
    {
        "content": "<p>Kevin this is what happens when you only teach tactic mode</p>",
        "id": 180764339,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573759326
    },
    {
        "content": "<p>Hey I did get started with term mode</p>",
        "id": 180764382,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759352
    },
    {
        "content": "<p>But defining shadow seemed like such a pain in term mode that I switched to tactics</p>",
        "id": 180764414,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759374
    },
    {
        "content": "<p>Hopefully the code is vaguely understandable, if not I'm happy to tidy it or explain what I'm trying to do</p>",
        "id": 180764607,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759471
    },
    {
        "content": "<p>To be honest, I don't really follow what's going on. But that's mainly because I have no clue at all what kind of maths you are aiming for.</p>",
        "id": 180764659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573759505
    },
    {
        "content": "<p>Right now, I'm trying to define what the shadow is</p>",
        "id": 180764688,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759527
    },
    {
        "content": "<p>It should be a straightforward function on families of r-sets</p>",
        "id": 180764721,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759546
    },
    {
        "content": "<p>And this sort of thing is useful in enumerative combinatorics</p>",
        "id": 180764814,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759582
    },
    {
        "content": "<p>(But this is why I didn't start off by posting code)</p>",
        "id": 180764857,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759619
    },
    {
        "content": "<p>I need more maths explanation. I have never heard of the shadow before.</p>",
        "id": 180764908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573759654
    },
    {
        "content": "<p><a href=\"user_uploads/3121/wqVK3QJdaiHnYeYY76EY1AJ9/pasted_image.png\" target=\"_blank\" title=\"user_uploads/3121/wqVK3QJdaiHnYeYY76EY1AJ9/pasted_image.png\">https://leanprover.zulipchat.com/user_uploads/3121/wqVK3QJdaiHnYeYY76EY1AJ9/pasted_image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/3121/wqVK3QJdaiHnYeYY76EY1AJ9/pasted_image.png\" target=\"_blank\" title=\"https://leanprover.zulipchat.com/user_uploads/3121/wqVK3QJdaiHnYeYY76EY1AJ9/pasted_image.png\"><img src=\"user_uploads/3121/wqVK3QJdaiHnYeYY76EY1AJ9/pasted_image.png\"></a></div>",
        "id": 180765370,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573759897
    },
    {
        "content": "<p>X^(r) corresponds to the type rset r X, and it's the collection of subsets of X with size r (we're taking X to be finite)</p>",
        "id": 180765592,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573760011
    },
    {
        "content": "<p>You used <code>cases</code> too much</p>",
        "id": 180765709,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760058
    },
    {
        "content": "<p>It's better not to use <code>rintro ⟨i, hi⟩,</code> when constructing data</p>",
        "id": 180765760,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760097
    },
    {
        "content": "<p>Just use <code>intro i,</code> and fields of <code>i</code></p>",
        "id": 180765776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760103
    },
    {
        "content": "<p>Then you get a goal which doesn't involve this strange <code>subtype.rec</code></p>",
        "id": 180765814,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760121
    },
    {
        "content": "<p>It's also then obviously not that trivial</p>",
        "id": 180765936,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760188
    },
    {
        "content": "<p>You need to prove if A - {x1} = A - {x2} then x1 = x2</p>",
        "id": 180765970,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760201
    },
    {
        "content": "<p>Yeah this part shouldn't be super trivial</p>",
        "id": 180765978,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573760208
    },
    {
        "content": "<p>Yeah exactly</p>",
        "id": 180765990,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573760213
    },
    {
        "content": "<p>The alternative is also to use <code>cases</code> in the proof of that property</p>",
        "id": 180766030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760232
    },
    {
        "content": "<p>Could you explain what subtype.rec is, and why using cases made it show up?</p>",
        "id": 180766061,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573760248
    },
    {
        "content": "<p>And also how to use cases to prove the property?</p>",
        "id": 180766104,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573760275
    },
    {
        "content": "<p>The function you're passing to <code>finset.map</code> first does <code>cases</code> on its argument</p>",
        "id": 180766277,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760367
    },
    {
        "content": "<p>So you had better apply <code>cases</code> to the arguments also when you want to prove something about it, otherwise the function won't be able to reduce</p>",
        "id": 180766383,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760413
    },
    {
        "content": "<p>for example add <code>cases x1</code>, <code>cases x2</code> after <code>intros x1 x2 q</code> (or use <code>rintros</code> there also)</p>",
        "id": 180766424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760436
    },
    {
        "content": "<p><code>subtype.rec</code> is case analysis on a <code>subtype</code> value</p>",
        "id": 180766460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760460
    },
    {
        "content": "<p>If you apply <code>subtype.rec</code> to a variable, it's stuck. If you do case analysis on the variable then it becomes a constructor application, and then <code>subtype.rec (subtype.mk _ _) _</code> can reduce</p>",
        "id": 180766826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573760672
    },
    {
        "content": "<p>I think I see, thanks so much!</p>",
        "id": 180767404,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1573761001
    }
]