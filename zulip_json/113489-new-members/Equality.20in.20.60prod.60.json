[
    {
        "content": "<p>I have a proof that <code>(n, m) = (x, y)</code>. How can I get a proof from this, that <code>(n = x) ∧ (m = y)</code>?</p>",
        "id": 221229567,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1609349047
    },
    {
        "content": "<p>You should be able to rewrite with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mk.inj_iff\">docs#mk.inj_iff</a>.</p>",
        "id": 221229630,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609349114
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221229765,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609349218
    },
    {
        "content": "<p>More importantly, to find the answer on your own:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">library_search</span>     <span class=\"c1\">-- prod.mk.inj h</span>\n</code></pre></div>",
        "id": 221229871,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1609349288
    },
    {
        "content": "<p>I would suggest <code>cases h</code> though</p>",
        "id": 221253035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609368428
    },
    {
        "content": "<p><code>injection h</code> does more directly what you are looking for, but if those variables are actually variables and not expressions then <code>cases h</code> will perform the substitution of one for the other in your goal</p>",
        "id": 221253118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609368496
    },
    {
        "content": "<p>Link for the lazy: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#injection\">tactic#injection</a></p>",
        "id": 221256594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609372105
    },
    {
        "content": "<p>I don't understand how to use <code>injection</code>. E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- injection tactic failed, argument must be an equality proof where lhs and rhs are of the form (c ...), where c is a constructor</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>So how can I add the hypothesis <code>x.a = x'.a</code> and <code>x.b = x'.b</code>?</p>",
        "id": 228976563,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614959990
    },
    {
        "content": "<p>Tag with ext:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and write an <code>ext_iff</code></p>",
        "id": 228976875,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1614960083
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x'</span><span class=\"o\">,</span>\n  <span class=\"n\">injection</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228977189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614960209
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> is correct that <code>@[ext]</code> will probably do what you're actually trying to do</p>",
        "id": 228977216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614960224
    },
    {
        "content": "<p>Indeed: <code>@[ext]</code> causes <code>invalid definition, a declaration named 's.ext_iff' has already been declared</code> when trying to declare it manually.</p>",
        "id": 228977413,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1614960303
    },
    {
        "content": "<p><code>s.mk.inj</code> is also close to what you want, and exists even without <code>ext</code></p>",
        "id": 228977672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614960374
    },
    {
        "content": "<p>How does this work for inequalities? E.g:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">t'</span> <span class=\"o\">:</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₙ</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">≠</span> <span class=\"n\">t'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hₑ</span> <span class=\"o\">:</span> <span class=\"n\">t.a</span> <span class=\"bp\">=</span> <span class=\"n\">t'.a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t.b</span> <span class=\"bp\">≠</span> <span class=\"n\">t'.b</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 229351246,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615228744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">apply_assumption</span><span class=\"o\">,</span>\n<span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"n\">assumption'</span>\n</code></pre></div>",
        "id": 229351657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615228879
    },
    {
        "content": "<p>(I didn't test this)</p>",
        "id": 229351672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615228885
    },
    {
        "content": "<p>This does indeed work, but I don't understand it yet. I'll have to read up on the tactics.</p>",
        "id": 229351957,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615228977
    },
    {
        "content": "<p>TIL <code>apply_assumption</code> (though <code>apply hₙ</code> might be clearer)</p>",
        "id": 229352518,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615229194
    },
    {
        "content": "<p>/me was to lazy to copy the unicode symbols (-;</p>",
        "id": 229353581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615229579
    }
]