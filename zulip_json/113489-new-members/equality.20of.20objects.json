[
    {
        "content": "<p>What's the best way to go about proving two objects with many fields are equal? Conversely, how do I obtain equality of fields from the equality of objects?</p>",
        "id": 242574641,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623664506
    },
    {
        "content": "<p>If you're making the objects yourself then you'd better make an <code>ext</code> lemma, perhaps by dumping <code>@[ext]</code> before the definition of your structure. If you're using a structure someone else has made then the ext lemma might already be there. If you want to make the ext lemma by hand then you might want to consider using <code>cases</code> to take your instances apart.</p>\n<p>A simple example is the complex numbers, defined as two real numbers. I set them up in the complex number game, and in the 0th level <a href=\"https://github.com/ImperialCollegeLondon/complex-number-game/blob/3d767f14041f9002e435bed3a3527fdd297c166d/src/complex/Level_00_basic.lean#L189-L208\">I prove an ext lemma for them</a>.</p>",
        "id": 242574947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623664700
    },
    {
        "content": "<p>PS equality of fields from equality of objects comes for free. If <code>h : s1 = s2</code>  then <code>s1.foo = s2.foo</code> just by rewriting <code>h</code> and then using refl.</p>",
        "id": 242575076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623664793
    },
    {
        "content": "<p>I'm not sure why the latter doesn't work for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">to_submodule</span> <span class=\"o\">:=</span> <span class=\"n\">s__to_submodule</span><span class=\"o\">,</span> <span class=\"n\">smul_mem</span> <span class=\"o\">:=</span> <span class=\"n\">s_smul_mem</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">to_submodule.carrier</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">to_submodule</span> <span class=\"o\">:=</span> <span class=\"n\">t__to_submodule</span><span class=\"o\">,</span> <span class=\"n\">smul_mem</span> <span class=\"o\">:=</span> <span class=\"n\">t_smul_mem</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">to_submodule.carrier</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">s__to_submodule</span> <span class=\"bp\">=</span> <span class=\"n\">t__to_submodule</span>\n</code></pre></div>",
        "id": 242575648,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623665120
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 242575673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623665140
    },
    {
        "content": "<p>One moment</p>",
        "id": 242575684,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623665149
    },
    {
        "content": "<p><code>injection h</code> might close that goal?</p>",
        "id": 242575690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623665152
    },
    {
        "content": "<p>Nope...</p>",
        "id": 242575763,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623665178
    },
    {
        "content": "<p>I'm trying to set up a <code>set_like</code> for a structure that extends submodules...</p>",
        "id": 242575798,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623665198
    },
    {
        "content": "<p>you can probably just use the <code>ext</code> tactic. All you know is that the carriers are equal and you want the submodules to be equal, but ext for submodules will do that.</p>",
        "id": 242575818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623665215
    },
    {
        "content": "<p>I could be more helpful to you if you're more helpful to me though by setting up a MWE</p>",
        "id": 242575848,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623665231
    },
    {
        "content": "<p>Maybe <code>exact set_like.coe_injective h</code></p>",
        "id": 242575885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623665253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/equality.20of.20objects/near/242575885\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>exact set_like.coe_injective h</code></p>\n</blockquote>\n<p>This worked. Thanks</p>",
        "id": 242576291,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623665531
    },
    {
        "content": "<p>Although I'm looking at the proof of <code>set_like.coe_injective</code> for <code>submodule</code>, and it's so much simpler</p>",
        "id": 242576335,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623665577
    },
    {
        "content": "<p>Is your problem that you're not using <code>old_structure_cmd</code>?</p>",
        "id": 242579431,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623667782
    },
    {
        "content": "<p>Your proof has to fallback on the proof for submodule, but <code>set_option old_structure_cmd true</code> flattens everything out making that unnecessary.</p>",
        "id": 242579536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623667835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/equality.20of.20objects/near/242579431\">said</a>:</p>\n<blockquote>\n<p>Is your problem that you're not using <code>old_structure_cmd</code>?</p>\n</blockquote>\n<p>I suspected that might be the reason. Looks like I should use it</p>",
        "id": 242581729,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623669178
    },
    {
        "content": "<p>Is there any way to set <code>old_structure_cmd</code> within a section only?</p>",
        "id": 242581774,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623669219
    },
    {
        "content": "<p>Ah, looks like putting the option within a <code>section ... end</code> works as intended.</p>",
        "id": 242581921,
        "sender_full_name": "Winston Yin",
        "timestamp": 1623669329
    }
]