[
    {
        "content": "<p>I have encountered several situations in which the <code>dsimp only ...</code> suggestion does not behave like the original <code>squeeze_dsimp</code>. <br>\nShould they always match, or is this expected behaviour? For example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.vector</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">unit</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">vector</span> <span class=\"n\">ℕ</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[reducible, simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"bp\">$</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">squeeze_dsimp</span><span class=\"o\">,</span>\n<span class=\"c1\">-- simplifies to 'unique unit'</span>\n<span class=\"c1\">-- and suggest 'dsimp obly [g]'</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"bp\">$</span> <span class=\"n\">g</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">],</span>\n<span class=\"c1\">-- simplifies to unique (f 0).fst</span>\n<span class=\"c1\">-- dsimp only [g, f] is actually needed</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 234619218,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1618464415
    },
    {
        "content": "<p>Basically <code>squeeze_simp</code> is hard to write perfectly. Check out mathlib issues in GitHub, I think this is already there.</p>",
        "id": 234623238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618467939
    },
    {
        "content": "<p>In other words, this is unfortunately expected behaviour, but we wouldn't mind if a C++ hacker made it unexpected behaviour <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 234623328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618468005
    }
]