[
    {
        "content": "<p>how to prove this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"err\">∈</span><span class=\"n\">U</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"bp\">≠</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>any help appreciated <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 196317888,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588690003
    },
    {
        "content": "<p>never mind i found it</p>",
        "id": 196320867,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588691259
    },
    {
        "content": "<p>Do you mind posting what you found?</p>",
        "id": 196329454,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588694972
    },
    {
        "content": "<p>of course</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">exists_neq_of_infinite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span><span class=\"err\">∈</span><span class=\"n\">U</span><span class=\"o\">,</span><span class=\"n\">z</span><span class=\"bp\">≠</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">∈</span><span class=\"n\">U</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ho</span><span class=\"o\">,</span><span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"o\">,</span><span class=\"n\">hy&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">:=</span><span class=\"n\">exists_of_ssubset</span> <span class=\"o\">(</span><span class=\"n\">ssubset_iff_subset_ne</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">⟨</span><span class=\"n\">singleton_subset_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">ho</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">hh</span><span class=\"o\">,(</span><span class=\"n\">hh</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finite_singleton</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"k\">in</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"o\">,</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">not_mem_singleton</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hy&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ho</span><span class=\"o\">,</span><span class=\"k\">have</span> <span class=\"n\">hh</span><span class=\"o\">:</span><span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">,</span><span class=\"k\">from</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">eq_empty_or_nonempty</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hh</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hh</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">finite_empty</span><span class=\"o\">)))</span> <span class=\"n\">id</span><span class=\"o\">,</span><span class=\"n\">exists</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">hh</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">hy</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">finish</span><span class=\"bp\">⟩</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 196330307,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588695416
    },
    {
        "content": "<p>honestly i was surprised to find so few lemmas about infinite sets in mathlib</p>",
        "id": 196330503,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588695530
    },
    {
        "content": "<p>Finite sets are the important sets in mathematics. You can't prove anything without some sort of control over your objects</p>",
        "id": 196331265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588695908
    },
    {
        "content": "<p>i see</p>",
        "id": 196332069,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1588696242
    },
    {
        "content": "<p>i bet there are lemmas about infinite sets in flypitch?</p>",
        "id": 196338919,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588699418
    },
    {
        "content": "<p>flypitch is mostly doing transfinite set theory, which isn't quite the same</p>",
        "id": 196340708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588700320
    },
    {
        "content": "<p><code>set.infinite</code> is best understood as the negation of <code>set.finite</code>. Try to prove this theorem by contrapositive</p>",
        "id": 196340785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588700359
    },
    {
        "content": "<p>I see, so the proof I had in mind would look like \"use choice, you're in bijection with an infinite cardinal, use facts about cardinals\", but that's obviously overkill</p>",
        "id": 196341056,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588700502
    },
    {
        "content": "<p>Those theorems should be there in <code>set_theory.cardinal</code> if you want to go that route though</p>",
        "id": 196341165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588700544
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">exists_neq_of_infinite</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">by_contra</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_singleton</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">H</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196341843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588700904
    },
    {
        "content": "<p>Can I vote for <code>by_contra!</code> to do contradiction without a decidable assumption?</p>",
        "id": 196341964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588700967
    },
    {
        "content": "<p>There is also <code>by_cases!</code>.  Or as I would like to call it, <code>by_cases</code>.</p>",
        "id": 196343796,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588701852
    },
    {
        "content": "<p>If somebody submits a PR to core, I think we should this.</p>",
        "id": 196343824,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588701864
    },
    {
        "content": "<p>Would it be too expensive to search for a decidable instance first, and then fall back on a classical proof?</p>",
        "id": 196343956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588701946
    },
    {
        "content": "<p>I'm not usually a fan of exploratory typeclass inference because it's a waste of time if the search is going to fail</p>",
        "id": 196344073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588701996
    },
    {
        "content": "<p>How about renaming <code>by_cases!</code> to <code>by_cases</code> and <code>by_cases</code> to <code>if</code>?</p>",
        "id": 196344190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588702071
    },
    {
        "content": "<p>(even better if it literally uses <code>dite</code> instead of <code>decidable.by_cases</code>)</p>",
        "id": 196344376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588702161
    },
    {
        "content": "<p>Or <code>if</code> and <code>decidable_if</code>?</p>",
        "id": 196344381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588702164
    },
    {
        "content": "<p><code>if</code> should be decidable by default, like the term</p>",
        "id": 196344468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588702203
    }
]