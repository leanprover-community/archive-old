[
    {
        "content": "<p>Programming question here. Is there some way to define a recursive function using a <code>let ... in</code> expression ? Here's an example in Haskell, which I don't manage to translate to Lean : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"nf\">fac</span> <span class=\"n\">n</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">let</span>\n    <span class=\"n\">aux</span> <span class=\"mi\">0</span> <span class=\"n\">acc</span> <span class=\"ow\">=</span> <span class=\"n\">acc</span>\n    <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"n\">acc</span> <span class=\"ow\">=</span> <span class=\"n\">aux</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">acc</span><span class=\"p\">)</span>\n  <span class=\"kr\">in</span>\n  <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 209500473,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1599652289
    },
    {
        "content": "<p>No, I think you have to float <code>aux</code> out to a top-level function if you want to use the equation compiler. Alternatively you could use the recursor directly (either in term mode or in tactic mode).</p>",
        "id": 209501486,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599652959
    },
    {
        "content": "<p>Ok, thanks !</p>",
        "id": 209501524,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1599653001
    },
    {
        "content": "<p>Actually, we can even use tactic mode <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">fac</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">id</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">acc</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hk</span> <span class=\"o\">((</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">acc</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n    <span class=\"kn\">end</span>\n  <span class=\"k\">in</span> <span class=\"n\">aux</span> <span class=\"n\">n</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 209502091,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1599653395
    },
    {
        "content": "<p>can you prove anything about it though?</p>",
        "id": 209502334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599653555
    },
    {
        "content": "<p>I am a bit scared about the proof term which <code>induction</code> gives you...</p>",
        "id": 209502352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599653578
    },
    {
        "content": "<p>It looks okay actually. And at least it evaluates correctly</p>",
        "id": 209502406,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1599653629
    },
    {
        "content": "<p>If you want to prove things about it then it's probably better to float it to top-level</p>",
        "id": 209502459,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599653648
    },
    {
        "content": "<p>Indeed !</p>",
        "id": 209502475,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1599653659
    },
    {
        "content": "<p>can you prove (n+1)!=(n+1)*n! using your definition?</p>",
        "id": 209502483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599653665
    },
    {
        "content": "<p>Oh that's quite annoying indeed...</p>",
        "id": 209507692,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1599656983
    },
    {
        "content": "<p>Is <code>hk</code> just the identity function here? Trying to wrap my head around what that <code>induction</code> is doing...</p>",
        "id": 209629755,
        "sender_full_name": "Chris Wong",
        "timestamp": 1599740408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I was able to prove it with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">rec_succ</span> <span class=\"o\">{</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">zero_f</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">succ_f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">C</span> <span class=\"n\">zero_f</span> <span class=\"n\">succ_f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">succ_f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">C</span> <span class=\"n\">zero_f</span> <span class=\"n\">succ_f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fac</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">fac</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fac</span><span class=\"o\">],</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">rec_succ</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n&#39;</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">},</span>\n    <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">},</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Although I feel like  <code>rec_succ</code> should be builtin somewhere</p>",
        "id": 209644962,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599746209
    },
    {
        "content": "<p>Ah, dsimp can handle it after a <code>nat.add_one</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fac</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">fac</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_one</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fac</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_one</span> <span class=\"n\">n</span><span class=\"o\">],</span>\n  <span class=\"n\">generalize</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n&#39;</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">n_ih</span> <span class=\"o\">},</span> <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">n_ih</span> <span class=\"o\">},</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209652674,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599747894
    }
]