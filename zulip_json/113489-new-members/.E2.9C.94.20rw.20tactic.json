[
    {
        "content": "<p>When i do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">some_proof</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>How does it know what to rewrite?</p>\n<p>This question came up while doing the natural number game</p>",
        "id": 268984212,
        "sender_full_name": "J. O.",
        "timestamp": 1642893158
    },
    {
        "content": "<p>Like, if i did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_zero</span>\n</code></pre></div>\n<p>Does it find all <code>x+0</code> in the goal and rewrite them?</p>",
        "id": 268984307,
        "sender_full_name": "J. O.",
        "timestamp": 1642893292
    },
    {
        "content": "<p>The precise rule is quite complex. It goes something like this. If the goal is <code>(x + 0) + (y + 0) + (z + 0) = (x + 0)</code> and you <code>rw add_zero</code> (as opposed to giving the variable explicitly with <code>rw add_zero y</code>) then Lean has to decide what the variable X is such that it's supposed to change X+0 to X. So it looks through the term until it finds one; in the example above it will find the first x+0. And then it instantiates X to x and then it replaces <em>all</em> <code>x+0</code>s with <code>x</code>s. So it should turn <code>(x + 0) + (y + 0) + (z + 0) = (x + 0)</code> into <code>x + (y + 0) + (z + 0) = x</code></p>",
        "id": 268984637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642893749
    },
    {
        "content": "<p>And you can check this yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ x + (y + 0) + (z + 0) = x</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268984678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642893839
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20tactic/near/268984637\">said</a>:</p>\n<blockquote>\n<p>The precise rule is quite complex. It goes something like this. If the goal is <code>(x + 0) + (y + 0) + (z + 0) = (x + 0)</code> and you <code>rw add_zero</code> (as opposed to giving the variable explicitly with <code>rw add_zero y</code>) then Lean has to decide what the variable X is such that it's supposed to change X+0 to X. So it looks through the term until it finds one; in the example above it will find the first x+0. And then it instantiates X to x and then it replaces <em>all</em> <code>x+0</code>s with <code>x</code>s. So it should turn <code>(x + 0) + (y + 0) + (z + 0) = (x + 0)</code> into <code>x + (y + 0) + (z + 0) = x</code></p>\n</blockquote>\n<p>So it only does the first?</p>",
        "id": 268984892,
        "sender_full_name": "J. O.",
        "timestamp": 1642894094
    },
    {
        "content": "<p>is there a way to do all of them at once</p>",
        "id": 268984894,
        "sender_full_name": "J. O.",
        "timestamp": 1642894105
    },
    {
        "content": "<p>that would be cleaner than writing 4 <code>rw add_zero</code></p>",
        "id": 268984899,
        "sender_full_name": "J. O.",
        "timestamp": 1642894127
    },
    {
        "content": "<p>There's <code>repeat { rw add_zero }</code>.  With mathlib, we also have <code>simp_rw [add_zero]</code>.</p>",
        "id": 268984915,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642894169
    },
    {
        "content": "<p>So <code>simp_rw</code> is a different tactic?</p>",
        "id": 268984987,
        "sender_full_name": "J. O.",
        "timestamp": 1642894262
    },
    {
        "content": "<p>Is the bracket syntax nessacery?</p>",
        "id": 268984990,
        "sender_full_name": "J. O.",
        "timestamp": 1642894272
    },
    {
        "content": "<p>Yes, it's a different tactic, and no, <code>simp_rw add_zero</code> would work.</p>",
        "id": 268985045,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642894333
    },
    {
        "content": "<p>Why did you decide to use the brackets?</p>",
        "id": 268985050,
        "sender_full_name": "J. O.",
        "timestamp": 1642894351
    },
    {
        "content": "<p>Habit?</p>",
        "id": 268985060,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642894388
    },
    {
        "content": "<p>Ah ok. I thought there was a reason</p>",
        "id": 268985079,
        "sender_full_name": "J. O.",
        "timestamp": 1642894437
    },
    {
        "content": "<p>(<code>simp_rw</code> is a flavor of the <code>simp</code> tactic, which requires brackets, but <code>simp_rw</code> is supposed to feel like <code>rw</code> so if there's just one lemma you can omit the brackets)</p>",
        "id": 268985118,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642894448
    },
    {
        "content": "<p>(for compiler reasons)</p>",
        "id": 268985119,
        "sender_full_name": "J. O.",
        "timestamp": 1642894449
    },
    {
        "content": "<p>both <code>rw</code> and <code>simp</code> can take in a list of lemmas (the brackets are part of the list syntax)</p>",
        "id": 268985129,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642894485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/rw.20tactic/near/268985118\">said</a>:</p>\n<blockquote>\n<p>(<code>simp_rw</code> is a flavor of the <code>simp</code> tactic, which requires brackets, but <code>simp_rw</code> is supposed to feel like <code>rw</code> so if there's just one lemma you can omit the brackets)</p>\n</blockquote>\n<p>You said “if there is just one lemma”. What does it mean to have more than one lemma?</p>",
        "id": 268985337,
        "sender_full_name": "J. O.",
        "timestamp": 1642894840
    },
    {
        "content": "<p>oh wait</p>",
        "id": 268985340,
        "sender_full_name": "J. O.",
        "timestamp": 1642894853
    },
    {
        "content": "<p>nvm, i understand</p>",
        "id": 268985345,
        "sender_full_name": "J. O.",
        "timestamp": 1642894859
    },
    {
        "content": "<p>Yeah, you can do <code>rw [add_zero, add_zero, add_zero, add_zero]</code>, too.</p>",
        "id": 268985359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642894887
    },
    {
        "content": "<p>For a second I forgot that the tactics take in proofs not functions.</p>",
        "id": 268985362,
        "sender_full_name": "J. O.",
        "timestamp": 1642894889
    },
    {
        "content": "<p>I thought you meant like if there are being used within one lemma</p>",
        "id": 268985369,
        "sender_full_name": "J. O.",
        "timestamp": 1642894917
    },
    {
        "content": "<p>Also, small question, when should I use lemma and when should i use theorem. I know that a lemma is a small theorem, but what defines one?</p>",
        "id": 268985414,
        "sender_full_name": "J. O.",
        "timestamp": 1642894945
    },
    {
        "content": "<p>@_<strong>crab|467926</strong> <a href=\"#narrow/stream/113489-new-members/topic/rw.20tactic/near/268985362\">said</a>:</p>\n<blockquote>\n<p>For a second I forgot that the tactics take in proofs not functions.</p>\n</blockquote>\n<p>Some tactics can take functions as parameters. I know <code>simp</code> does</p>",
        "id": 268985549,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1642895170
    },
    {
        "content": "<p>I wasn’t going to say all. I was referring to the tactics I was working with (unless they can take in functions as well)</p>",
        "id": 268985572,
        "sender_full_name": "J. O.",
        "timestamp": 1642895226
    },
    {
        "content": "<p>As far as Lean is concerned, there is no difference between a <code>lemma</code> and a <code>theorem</code>. (The mathlib autogenerated documentation even just says everything is a <code>theorem</code>.)</p>",
        "id": 268985574,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642895227
    },
    {
        "content": "<p>Then why is there both?</p>",
        "id": 268985578,
        "sender_full_name": "J. O.",
        "timestamp": 1642895240
    },
    {
        "content": "<p>If you want, you can write <code>lemma</code> for things that lead up to a <code>theorem</code>.</p>\n<p>(The short answer is that there's a tradition in math to have both.)</p>",
        "id": 268985629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642895311
    },
    {
        "content": "<p>Ok</p>",
        "id": 268985646,
        "sender_full_name": "J. O.",
        "timestamp": 1642895345
    },
    {
        "content": "<p>Thanks everyone</p>",
        "id": 268985648,
        "sender_full_name": "J. O.",
        "timestamp": 1642895353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">J. O.</span> has marked this topic as resolved.</p>",
        "id": 268985650,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642895356
    }
]