[
    {
        "content": "<p>Why does this proof not work out? I have something of an \"off by one\" in my types, where I'm expecting something of type <code>A</code>, but instead I provided something that simply was <code>A</code>. It's my impression that, in the example that I am trying to prove, <code>A</code> should be quantified over all propositions.</p>\n<p><code>example (A : Prop) : ∀ A, ¬ ¬(¬ ¬ A ∨ ¬ ¬ ¬ A) :=\n  assume A,\n    assume h : ¬ (¬ ¬ A ∨ ¬ ¬ ¬ A),\n      show false, from \n        h (or.inl (assume h2 : ¬ A, \n          show false, from h2 A))</code></p>",
        "id": 203060945,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1594087413
    },
    {
        "content": "<p>The <code>(A : Prop)</code> and the <code>∀ A</code> have nothing to do with each other. Are you sure you want them both?</p>",
        "id": 203061351,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594088059
    },
    {
        "content": "<p>I think you just took a wrong turn near the end of your proof. This works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n      <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n        <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n          <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n            <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h3</span> <span class=\"n\">h2</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 203061535,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594088378
    },
    {
        "content": "<p>Oh, I see what happened. I got mistaken with quantifying the <code>A : Prop</code> for having a term of type <code>A</code>. My goal in the end was fundamentally flawed from the start. Thank you!</p>",
        "id": 203061788,
        "sender_full_name": "Brandon Wu",
        "timestamp": 1594088732
    },
    {
        "content": "<p>Well, this is exactly equivalent:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n      <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n        <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n          <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">¬</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n            <span class=\"k\">show</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h3</span> <span class=\"n\">h2</span><span class=\"o\">))))</span>\n</code></pre></div>",
        "id": 203062343,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1594089747
    }
]