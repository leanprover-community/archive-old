[
    {
        "content": "<p>one of the theorems I am trying to prove uses this version of bezouts defined over the integers</p>\n<p>'''<br>\ntheorem relatively_prime_sum_to_one (a b : ℤ) (h : relatively_prime a b) : <br>\n∃ m n: ℤ, m* a + n * b = 1 := sorry<br>\n'''<br>\nDoes lean already have a way to show the existence of m and n? Could I end up exacting something to get rid of the sorry?</p>",
        "id": 195366074,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1587954671
    },
    {
        "content": "<p>You can probably use <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/int/gcd.lean#L74\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/int/gcd.lean#L74\"><code>nat.gcd_eq_gcd_ab</code></a> from <code>data.int.gcd</code>. If you paste more of your code (esp. the definition of <code>relatively_prime</code>) we can give more details.</p>\n<p>By the way, to get proper syntax highlighting, use three backticks: ```, not single quotes.</p>",
        "id": 195366692,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1587955619
    },
    {
        "content": "<p>here is the definition of relatively_prime:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">relatively_prime</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">l</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">divides</span> <span class=\"n\">l</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 195493129,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1588036540
    },
    {
        "content": "<p>That's false</p>",
        "id": 195493197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588036615
    },
    {
        "content": "<p><code>1</code> always divides both <code>a</code> and <code>b</code></p>",
        "id": 195493207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588036626
    },
    {
        "content": "<p>Maybe use <code>nat.coprime</code> instead?</p>",
        "id": 195493226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588036648
    },
    {
        "content": "<p>I'm not sure if there is an <code>int.coprime</code> but you could use <code>nat.coprime (int.nat_abs a) (int.nat_abs b)</code></p>",
        "id": 195493252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588036680
    },
    {
        "content": "<p>ah right, thanks</p>",
        "id": 195493296,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1588036696
    },
    {
        "content": "<p>any suggestions on how to fill in the first theorem?</p>",
        "id": 195493305,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1588036710
    },
    {
        "content": "<p>Bryan already gave the suggestion</p>",
        "id": 195493333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588036769
    },
    {
        "content": "<p><code>exact nat.gcd_eq_gcd_ab</code> ?</p>",
        "id": 195493402,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1588036806
    },
    {
        "content": "<p>apologies my grasp of the syntax isn't too good</p>",
        "id": 195493412,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1588036820
    },
    {
        "content": "<p>You will probably have to do some modifications depending on the exact statement of the theorem</p>",
        "id": 195493431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588036848
    },
    {
        "content": "<p>There is another version, <code>euclidean_domain.gcd_eq_gcd_ab</code>, that works over any euclidean domain. Since <code>int</code> is a euclidean domain this should give you something closer to what you want</p>",
        "id": 195493531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588036987
    },
    {
        "content": "<p>you have to import <code>algebra.euclidean_domain</code></p>",
        "id": 195493549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588037010
    },
    {
        "content": "<p>so when I define relatively_prime as <code>def relatively_prime(a b:ℤ) :=  nat.coprime (int.nat_abs a) (int.nat_abs b)</code><br>\nand my theorem as <code>theorem relatively_prime_sum_to_one (a b : ℤ) (h : relatively_prime a b) : \n∃ m n: ℤ, m* a + n * b = 1 := </code></p>",
        "id": 195493639,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1588037159
    },
    {
        "content": "<p>how should I use <code>euclidean_domain.gcd_eq_gcd_ab</code>?</p>",
        "id": 195493682,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1588037178
    },
    {
        "content": "<p>I tried <code> exact euclidean_domain.gcd_eq_gcd_ab</code> but that did not work</p>",
        "id": 195493709,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1588037233
    },
    {
        "content": "<p>Here's the start:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">euclidean_domain</span>\n\n<span class=\"n\">def</span> <span class=\"n\">relatively_prime</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">euclidean_domain</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">relatively_prime_sum_to_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">relatively_prime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">[</span><span class=\"n\">gcd_a</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">gcd_b</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">gcd_eq_gcd_ab</span><span class=\"o\">],</span>\n\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but I see now that there is a hole in the library: <code>euclidean_domain.gcd</code> on int is not proven equal to <code>int.gcd</code></p>",
        "id": 195493905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588037481
    },
    {
        "content": "<p>What's more, it seems that <code>euclidean_domain.gcd</code> is not easily relatable to <code>int.gcd</code> because of a +- 1 difference. It seems that the proof using the nat version is easiest</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span>\n\n<span class=\"n\">def</span> <span class=\"n\">relatively_prime</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">coprime</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">relatively_prime_sum_to_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">relatively_prime</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">sign</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_a</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n           <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">sign</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_b</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">b</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_right_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul_sign</span><span class=\"o\">,</span>\n      <span class=\"n\">mul_right_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">mul_sign</span><span class=\"o\">,</span>\n      <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd_eq_gcd_ab</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_one</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 195494551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588038477
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269735\">@Brian Jiang</span> Sorry for this, but it seems you might have picked an example that is not appropriate for your level. You should try working through theorem proving in lean to get the hang of the syntax</p>",
        "id": 195494609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588038565
    },
    {
        "content": "<p>If this isn't easy, it's definitely a hole in the library</p>",
        "id": 195494681,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588038683
    },
    {
        "content": "<p>What's the +-1 issue?</p>",
        "id": 195494719,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588038723
    },
    {
        "content": "<p>This theorem itself is also a hole in the library, indeed</p>",
        "id": 195494738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588038773
    },
    {
        "content": "<p>It's easy enough to define <code>gcd_a</code>, <code>gcd_b</code> and <code>gcd_eq_gcd_ab</code> for integers using the parts of this proof</p>",
        "id": 195494760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588038808
    },
    {
        "content": "<p>It is true that <code>int.nat_abs (gcd a b) = int.gcd a b</code> but not <code>gcd a b = \\u (int.gcd a b)</code></p>",
        "id": 195494830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588038846
    },
    {
        "content": "<p>because <code>gcd 0 b = b</code> and <code>int.gcd 0 b = int.nat_abs b</code></p>",
        "id": 195494849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588038881
    },
    {
        "content": "<p>I think we need a variation on <code>gcd_eq_gcd_ab</code> for euclidean domains where the lhs is any multiple of the gcd</p>",
        "id": 195494938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039010
    },
    {
        "content": "<p>(in particular 1)</p>",
        "id": 195494964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588039058
    },
    {
        "content": "<p>alright, thanks!</p>",
        "id": 195495279,
        "sender_full_name": "Brian Jiang",
        "timestamp": 1588039446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/bezout/near/195493905\" title=\"#narrow/stream/113489-new-members/topic/bezout/near/195493905\">said</a>:</p>\n<blockquote>\n<p>but I see now that there is a hole in the library: <code>euclidean_domain.gcd</code> on int is not proven equal to <code>int.gcd</code></p>\n</blockquote>\n<p>This is a very well known hole. And each time we discuss it we end up noticing that sign issue, and the discussion stops.</p>",
        "id": 195531286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588061596
    },
    {
        "content": "<p><code>int.nat_abs (gcd a b) = int.gcd a b</code> should be there regardless</p>",
        "id": 195532694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062505
    },
    {
        "content": "<p>Isn't there something about normalization domains that should ensure that <code>gcd a b</code> is always the \"canonical\" element of the unit class, which in this case would mean that it's always nonnegative?</p>",
        "id": 195532839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062605
    },
    {
        "content": "<p>Otherwise this function looks pretty scatterbrained</p>",
        "id": 195532857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588062619
    }
]