[
    {
        "content": "<p>There is a <code>rat.denom_one</code>.  There is no <code>rat.denom_zero</code>.  However, given the goal </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>the tactic</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>will close the goal.</p>\n<p>Question: What is happening under the hood with <code>exact rfl</code>?</p>",
        "id": 222672499,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610589600
    },
    {
        "content": "<p><code>rfl</code> means that things are definitionally equal</p>",
        "id": 222672550,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610589639
    },
    {
        "content": "<p><code>refl</code> should also work</p>",
        "id": 222672559,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610589654
    },
    {
        "content": "<p>Here's why <code>0.denom = 1</code> is definitionally equal.</p>\n<p>First, <code>0</code> is defined as: <code>instance : has_zero ℚ := ⟨of_int 0⟩</code><br>\nSecond, <code>of_int</code> is defined as <code>def of_int (n : ℤ) : ℚ := ⟨n, 1, nat.one_pos, nat.coprime_one_right _⟩</code><br>\nThese four arguments correspond to the four arguments in the definition of a rational:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">rat</span> <span class=\"o\">:=</span> <span class=\"n\">mk'</span> <span class=\"o\">::</span>\n<span class=\"o\">(</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">denom</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cop</span> <span class=\"o\">:</span> <span class=\"n\">num.nat_abs.coprime</span> <span class=\"n\">denom</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Thus, <code>of_int n</code> means the rational number with <code>num = n</code>, <code>denom = 1</code>. In particular, <code>(of_int n).num = n</code> by definition and <code>(of_int n).denom = 1</code> by definition.</p>",
        "id": 222672785,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610589938
    },
    {
        "content": "<p>(This is all coming from data/rat/basic.lean)</p>",
        "id": 222672797,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610589956
    },
    {
        "content": "<p>So both of these examples are definitionally true (and <code>0.denom = 1</code> is a special case of the second example).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rat.of_int</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">num</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">rat.of_int</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 222672957,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610590142
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 222673882,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1610591306
    },
    {
        "content": "<p>Presumably <code>denom_zero</code> should be added as a simp lemma?</p>",
        "id": 222690981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610613626
    }
]