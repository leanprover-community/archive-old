[
    {
        "content": "<p>Is it possible that this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"n\">‚Ñù</span> <span class=\"err\">‚ä§</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñù</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>is not present in mathlib?</p>",
        "id": 205517687,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1596135207
    },
    {
        "content": "<p>In the description of the file times_cont_diff I find</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">We also prove that the usual operations (addition, multiplication, difference, composition, and</span>\n<span class=\"cm\">so on) preserve `C^n` functions.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>but I can't really find it anywhere in the file</p>",
        "id": 205520893,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1596136785
    },
    {
        "content": "<p>Does <code>times_cont_diff_top</code> help?</p>",
        "id": 205523111,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596137995
    },
    {
        "content": "<p>With something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The product of two `C^n`functions is `C^n`. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">times_cont_diff</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"err\">ùïú</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"err\">ùïú</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"err\">ùïú</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff</span> <span class=\"err\">ùïú</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">√ó</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_bounded_linear_map</span><span class=\"bp\">.</span><span class=\"n\">times_cont_diff</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_bounded_linear_map</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">is_bounded_linear_map</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">is_bounded_linear_map</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">hg</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205523635,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596138289
    },
    {
        "content": "<p>but one would need to show <code>has_scalar F F</code></p>",
        "id": 205523660,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596138301
    },
    {
        "content": "<p>Which I think would be possible from <code>normed_group F</code>...</p>",
        "id": 205523729,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596138330
    },
    {
        "content": "<p>Or you might require a field structure on <code>F</code></p>",
        "id": 205523864,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596138410
    },
    {
        "content": "<p>Sorry did you write that lemma or did you find it in the file? I don't see it!</p>",
        "id": 205524053,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1596138533
    },
    {
        "content": "<p>I wrote that, but it doesn't work yet. It's broken.</p>",
        "id": 205524859,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596138971
    },
    {
        "content": "<p>You have <code>is_bounded_bilinear_map.times_cont_diff</code>. But I think the consequence for products is not there, a big gap in the library!</p>",
        "id": 205524879,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596138986
    },
    {
        "content": "<p>The historical reason is probably that I only wrote at first what is needed for manifolds, and taking products is not really useful for this. But of course it should be added!</p>",
        "id": 205524954,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596139029
    },
    {
        "content": "<p>For this, I need to somehow endow <code>normed_group F</code> with the property of <code>normed_ring F</code>, but <code>normed_ring F</code> does not assume <code>normed_group F</code>...</p>",
        "id": 205526439,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1596139761
    },
    {
        "content": "<p>You probably want to do <code>[normed_ring F] [normed_algebra ùïú F]</code>.</p>",
        "id": 205526898,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596139972
    },
    {
        "content": "<p>I'll add it to my next PR then! I was just confused cause in the introduction you claimed it was in the file haha</p>",
        "id": 205535269,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1596144826
    }
]