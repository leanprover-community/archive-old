[
    {
        "content": "<p>I though that the difference between <code>#check</code> and <code>#check@</code> was basically that the second is \"more explicit\" than the first. But then I don't understand what's happening: if I <code>#check is_fractional f J</code> I get <code>is_fractional f J : Prop</code> (which means, I gather, that <code>is_fractional f J</code> is the proposition saying that there exists <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">a\\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>b</mi><mo>∈</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">\\forall b \\in J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>, the product <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∗</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\ast b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> is integral). ON the other hand, if I <code>#check@ is_fractional f J</code> I get the error <code>type mismatch at application\n  is_fractional\nterm f\nhas type\n  fraction_map R K : Type (max u_1 u_2)\nbut is expected to have type\n  Type ? : Type (?+1)</code><br>\nA part from the error itself, this leads me to think that there is a deeper difference between <code>#check</code> and <code>#check@</code></p>",
        "id": 209642564,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599745456
    },
    {
        "content": "<p>There is only <code>#check</code>, which gives you the type of the term you provide. The term, if it has any arguments, has the arguments also displayed, but only if they are explicit. In any place where you can provide a term, doing <code>@term</code> will make all of the arguments it has, including the implicit ones (the ones indicated by <code>{ }</code> or <code>[ ]</code>), explicit.</p>",
        "id": 209643771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599745926
    },
    {
        "content": "<p>So in your case, you can't just do <code>#check @is_fractional f J</code> because <code>@is_fractional</code> requires you to provide</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">localization_map</span> <span class=\"n\">S</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 209643978,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599746016
    },
    {
        "content": "<p>Ah, I see. And is there a way to make the <code>Prop</code> term explicit? So that I can see (without going back to the definition) what proposition <code>is_fractional f J</code> is?</p>",
        "id": 209645484,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599746424
    },
    {
        "content": "<p><code>#print is_fractional</code> will show the (expanded) definition of <code>is_fractional</code></p>",
        "id": 209647047,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599746609
    },
    {
        "content": "<p>That's <code>#print</code> not <code>#check</code>. <code>#check</code> tells you the type of something, not the definition.</p>",
        "id": 209647049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599746611
    },
    {
        "content": "<p>and can I also use <code>#print</code> inside a proof? I guess not, but then is there an alternative way to see what <code>is_fractional J</code> does when <code>J</code> is a \"concrete\" submodule I have defined along a proof?</p>",
        "id": 209647348,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599746718
    },
    {
        "content": "<p>Why does it matter what the exact definition is? What you want to know is the API, not the definition. The definition is an implementation issue.</p>",
        "id": 209647508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599746768
    },
    {
        "content": "<p>What do you actually want to do? Proofs are easy to work with. They have a name, and if you hover over them then you see their type, which is the statement of the theorem that they're a proof of. But definitions are harder. If you're spending any time working with a definition then before you start you should probably right-click on the definition and read the definition and the API which will be developed immediately after it. That is how you will use the object in question.</p>",
        "id": 209647838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599746886
    },
    {
        "content": "<p>(Answer to the first part of your comment)</p>\n<p>Well, because I am lost and I am trying to figure out what Lean has in mind. Since  I undestood that<code>is fractional f J</code> should be a proof of the existence of an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">a\\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∗</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\ast b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> is integral for every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>∈</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">b\\in J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>, I wanted to <code>cases  is fractional f J with a ha</code> to produce an instance of such an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>.</p>",
        "id": 209647855,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599746893
    },
    {
        "content": "<p>So you want to know how to get <code>a</code> and <code>ha</code> out of <code>is_fractional f J</code>, and there will be plenty of examples of this in the API.</p>",
        "id": 209647953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599746936
    },
    {
        "content": "<p>OK so I looked and it's just an existence statement, so you can use <code>cases</code> to get to <code>a</code> like you suggested. If it doesn't work for you then you'll have to post working code. Are you using tactics to define data? That might be why it's not working for you.</p>",
        "id": 209649097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599747167
    },
    {
        "content": "<p>My code is <code>cases is_fractional f M1 with a ha,</code> and the error I get is <code>cases tactic failed, it is not applicable to the given hypothesis</code>. I suspect that the problem is that my <code>M1</code> is a fractional idea, whereas in the definition of <code>is_fractional</code> it should be a submodule.</p>",
        "id": 209650502,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599747281
    },
    {
        "content": "<p>So, I might have to replace <code>M1</code> with <code>M1.val</code> or something like this-no?</p>",
        "id": 209650536,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599747296
    },
    {
        "content": "<p>I would be much happier communicating with you about explicit lean code than guessing what you're trying to do. It will save me having you ask you ten questions.</p>",
        "id": 209650697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599747353
    },
    {
        "content": "<p>That error usually means that the argument to <code>cases</code> did type check, but it wasn't something <code>cases</code> could apply to, most likely a function of some kind.</p>",
        "id": 209650785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599747376
    },
    {
        "content": "<p>Statements like \"<code>M1</code> is a fractional ideal\" are useless to me. I see <code>is_fractional</code> and <code>fractional_ideal</code> in the API and for all I know there are more.</p>",
        "id": 209650879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599747412
    },
    {
        "content": "<p>Ok, should I paste all my code here?</p>",
        "id": 209650963,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599747445
    },
    {
        "content": "<p>Ideally you would make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 209651038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599747461
    },
    {
        "content": "<p>OK, give me a sec, I' ll try to produce it</p>",
        "id": 209651314,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599747480
    },
    {
        "content": "<p>I hope this helps:</p>\n<p><code>\nimport linear_algebra.finite_dimensional\nimport order.zorn\nimport ring_theory.fractional_ideal\nimport ring_theory.polynomial.rational_root\nimport ring_theory.ideal.over\nimport set_theory.cardinal\nimport tactic\nlemma trial (h : is_dedekind_domain f) {M : ideal R}\n  (hM : ideal.is_maximal M) : is_unit (M : fractional_ideal f) :=\n-- ⟨⟨M, M⁻¹, _, _⟩, rfl⟩\nbegin\nlet setM1 := {x : K | ∀ y ∈ M, f.is_integer (x * f.to_map y)},\nlet M1 : fractional_ideal f,sorry,\nhave h_nonfrac : ∃ (I : ideal R), ↑M*M1=↑I,\n  cases is_fractional f M1.2 with a ha,\nend</code></p>\n<p>I have <code>sorried</code> the proof that <code>M1</code> is a fractional ideal, as it is very long</p>",
        "id": 209651991,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599747604
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 209652013,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599747613
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 209652089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599747670
    },
    {
        "content": "<p>You have to learn how to write a good question, it's a really important skill.</p>",
        "id": 209652316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599747762
    },
    {
        "content": "<p>I know, and I apologize for this.</p>",
        "id": 209652388,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599747789
    },
    {
        "content": "<p>You need to make it so that I can just paste what you post and see the same error. You can practice by posting what you post into a new file and seeing if you see the same error</p>",
        "id": 209652406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599747799
    },
    {
        "content": "<p>OK, I will do that. I apologize for wasting anyone's time. I might come back with the question if I manage to make it readable/answerable.</p>",
        "id": 209652616,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599747873
    },
    {
        "content": "<p>Right now I have no definition of <code>f</code> but you're surely nearly there.</p>",
        "id": 209653214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599748209
    },
    {
        "content": "<p>Ok, this is what I could do. It compiles on an empty file. I have <code>sorried</code> the proof that <code>M1</code> is a fractional ideal, as it seemed irrelevant to me but I might be wrong. Also, the final statement of my lemma is not important, I am try to understand the error I get.</p>\n<p>import linear_algebra.finite_dimensional<br>\nimport ring_theory.fractional_ideal<br>\nimport ring_theory.ideal.over<br>\nimport tactic</p>\n<p>open ideal ring</p>\n<p>variables {R K : Type*}</p>\n<p>variables {S : Type*} [integral_domain R] [integral_domain S] [algebra R S]<br>\nvariables {L : Type*} [field K] [field L] {f : fraction_map R K}</p>\n<p>variables {M : ideal R} [is_maximal M]</p>\n<p>lemma trial : is_unit (M : fractional_ideal f) :=<br>\nbegin<br>\nlet setM1 := {x : K | ∀ y ∈ M, f.is_integer (x * f.to_map y)},<br>\nlet M1 : fractional_ideal f,sorry,<br>\nhave h_nonfrac : ∃ (I : ideal R), ↑M*M1=↑I,<br>\n  cases is_fractional f M1 with a ha,<br>\nend</p>",
        "id": 209653745,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599748405
    },
    {
        "content": "<p>OK this is the first error I see with your code:</p>\n<div class=\"codehilite\"><pre><span></span><code>type mismatch at application\n  is_fractional f _\nterm\n  M1.property\nhas type\n  is_fractional f M1.val : Prop\nbut is expected to have type\n  submodule R (localization_map.codomain f) : Type u_2\n</code></pre></div>\n\n\n<p>Is that what you're talking about?</p>",
        "id": 209654916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599748631
    },
    {
        "content": "<p>Yes</p>",
        "id": 209655114,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599748697
    },
    {
        "content": "<p>Some formatting cleanup:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">fractional_ideal</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">over</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ideal</span> <span class=\"n\">ring</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fraction_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_maximal</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">trial</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">fractional_ideal</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">setM1</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">is_integer</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_map</span> <span class=\"n\">y</span><span class=\"o\">)},</span>\n  <span class=\"k\">have</span> <span class=\"n\">M1</span> <span class=\"o\">:</span> <span class=\"n\">fractional_ideal</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_nonfrac</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">fractional_ideal</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">M1</span> <span class=\"bp\">=</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">is_fractional</span> <span class=\"n\">f</span> <span class=\"n\">M1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 209655159,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599748714
    },
    {
        "content": "<p>OK so the error is pretty clear: you have a \"type mismatch\" which means that you have some function <code>F : A -&gt; B</code> and after it you wrote something which didn't have type <code>A</code> so Lean didn't know what to do</p>",
        "id": 209655218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599748758
    },
    {
        "content": "<p>By the way, using <code>sorry</code> to skip proofs is fine, but using <code>sorry</code> to skip definitions (as you do here) is dangerous. Wouldn't you rather talk about filling in that dangerous sorry, which occurs before the error?</p>",
        "id": 209655475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599748842
    },
    {
        "content": "<p>As for that <code>sorry</code>, you might be right and I read your post about never leaving <code>sorry</code>'s around; I have almost finished the proof that <code>M1</code> is fractional and was willing to do something different.</p>\n<p>What I am trying to do is to construct the ideal <code>I</code> whose existence is <code>h_nonfrac</code>. I thought about producing the <code>a</code> whose existence is granted by the definition of <code>is_fractional</code>, but I can't.</p>",
        "id": 209656006,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749024
    },
    {
        "content": "<p>OK great, let's leave the <code>sorry</code>, it sounds like it's under control. So let's just get clear what are the terms and what are the types.</p>",
        "id": 209656240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749094
    },
    {
        "content": "<p>You do cases on the term, not the type, right?</p>",
        "id": 209656419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749151
    },
    {
        "content": "<p>I would like to do the cases on the (existential) term of <code>Prop</code></p>",
        "id": 209656557,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749191
    },
    {
        "content": "<p>For example : I could just define a type <code>def X := P \\or Q</code>, that's just a definition, and I can't do cases on <code>X</code>.</p>",
        "id": 209656561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749192
    },
    {
        "content": "<p>Sure</p>",
        "id": 209656576,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749200
    },
    {
        "content": "<p>But if I got it right, <code>is_fractional f J</code> would be a term of <code>Prop</code> (hence, a proof); so I could do cases.</p>",
        "id": 209656657,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749238
    },
    {
        "content": "<p><code>is_fractional f J</code> has type <code>Prop</code> so you can't do cases on it. It's the statement of the theorem, not the proof.</p>",
        "id": 209656749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749270
    },
    {
        "content": "<p>You need to do cases on the proof, not the statement.</p>",
        "id": 209656829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749289
    },
    {
        "content": "<p>So you need to locate a term <code>h : is_fractional f J</code> for some appropriate <code>J</code> and then you can do cases on <code>h</code></p>",
        "id": 209656872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749309
    },
    {
        "content": "<p>What is the type of <code>M1</code> in your proof? What does it mean for <code>M1</code> to be of that type, mathematically?</p>",
        "id": 209657147,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599749403
    },
    {
        "content": "<p><code>Prop</code> is the universe, <code>is_fractional f _</code> is the Type (the theorem statement) and the thing you want to do cases on is the term.</p>",
        "id": 209657167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749407
    },
    {
        "content": "<p>Well, <code>M1</code> in my proof has type <code>fractional_ideal R f</code>, I think. And I think this might be a problem as it should have type <code>submodule  R f.codomain</code></p>",
        "id": 209657326,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749466
    },
    {
        "content": "<p>You can't get to choose the type of your term</p>",
        "id": 209657369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749484
    },
    {
        "content": "<p>I know</p>",
        "id": 209657524,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749526
    },
    {
        "content": "<p>So the next question is: do you understand the constructors and eliminators for <code>fractional_ideal f</code>? Do you understand how to make a term of type <code>fractional_ideal f</code> and do you understand what to do with terms of this type if you want to make other things (like extracting information from terms of this type)?</p>",
        "id": 209657539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749533
    },
    {
        "content": "<p>Do you understand the <em>definition</em> of <code>fractional_ideal f</code>?</p>",
        "id": 209657580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749549
    },
    {
        "content": "<p>(PS you wrote <code>fractional_ideal R f</code> but looking at the code it seems to be <code>fractional_ideal f</code>)</p>",
        "id": 209657899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749659
    },
    {
        "content": "<p>Well, I think I understand the definition <code>is_fractional</code>: it takes a submodule <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> and produces a proof of the existence of an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">a\\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∗</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\ast b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> is integer for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">b\\in I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>.</p>",
        "id": 209657954,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749679
    },
    {
        "content": "<p>No. It cannot do this</p>",
        "id": 209657995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749695
    },
    {
        "content": "<p>Ah.</p>",
        "id": 209658031,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749705
    },
    {
        "content": "<p>It cannot produce a proof of the existence of a because such an a might not exist, as you know</p>",
        "id": 209658105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749728
    },
    {
        "content": "<p>Ah, good point.</p>",
        "id": 209658163,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749746
    },
    {
        "content": "<p>It produces the <em>statement</em> that there exists an a such that ab is an integer for all b in I</p>",
        "id": 209658173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749750
    },
    {
        "content": "<p>You need to be really clear about the difference between theorem statements and proofs</p>",
        "id": 209658249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749766
    },
    {
        "content": "<p>But anyway, this was not the question</p>",
        "id": 209658280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749781
    },
    {
        "content": "<p>Seems a very wise advice.</p>",
        "id": 209658287,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749783
    },
    {
        "content": "<p>The question was: you are stuck with a term of type <code>fractional_ideal f</code> so do you understand the definition of <code>fractional_ideal</code>?</p>",
        "id": 209658349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749807
    },
    {
        "content": "<p>You can right click on it and peek the definition if you like</p>",
        "id": 209658442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749846
    },
    {
        "content": "<p>Well, I would have said a fractional ideal is a submodule of the codomain of f together with a proof that <code>is_fractional</code>?</p>",
        "id": 209658677,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749927
    },
    {
        "content": "<p>But I try to right-click, first-one sec</p>",
        "id": 209658721,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599749947
    },
    {
        "content": "<p>Right. A term of type <code>fractional_ideal f</code> is a pair. It is a submodule and a proof.</p>",
        "id": 209658722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749949
    },
    {
        "content": "<p>Sure, right click and peek</p>",
        "id": 209658758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599749963
    },
    {
        "content": "<p>You will see that it's a subtype: it's the type of all submodules <code>I</code> which satisfy the <code>is_fractional f I</code> statement.</p>",
        "id": 209658926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750016
    },
    {
        "content": "<p>And to get to that pair, you can do cases.</p>",
        "id": 209658965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750036
    },
    {
        "content": "<p>When you say that I can peek the definition , do you mean that I can read what's on the Infoview? Because that does not look like the pair we're speaking about.</p>",
        "id": 209659429,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750193
    },
    {
        "content": "<p>In VSCode, I press F12, which takes me to the source of the expression.</p>",
        "id": 209659546,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599750234
    },
    {
        "content": "<p>Yes, Yes, got it: it simply opens the file containing the <code>def</code> at the right point.</p>",
        "id": 209659668,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750268
    },
    {
        "content": "<p>I mean \"right click on <code>fractional_ideal</code> and select \"peek definition\", but if you are happy to jump to the definition you can do what Yakov suggests.</p>",
        "id": 209659679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750273
    },
    {
        "content": "<p>OKOK, got it.</p>",
        "id": 209659698,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750283
    },
    {
        "content": "<p>So that definition <code>def X := {a : Y // P a}</code> is called a subtype, and to make a term of type <code>X</code> you have to give it a term <code>a</code> of type <code>Y</code> and a proof that <code>P a</code> is true. There's the proof.</p>",
        "id": 209659762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750312
    },
    {
        "content": "<p>OK. But if I have a term <code>m</code> of type <code>X</code>,  can I extract the term of type <code>Y</code> and the proof from it?</p>",
        "id": 209659973,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750382
    },
    {
        "content": "<p>Sure, by <code>cases m with y hy</code></p>",
        "id": 209660003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750394
    },
    {
        "content": "<p>Ah!</p>",
        "id": 209660053,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750414
    },
    {
        "content": "<p>But you are going to have problems with this approach, because you have sorried data in your definition of M1</p>",
        "id": 209660080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750431
    },
    {
        "content": "<p>So, cases on <code>m</code> is like cases on \"the second component of <code>m</code>\"?</p>",
        "id": 209660099,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750440
    },
    {
        "content": "<p>So the moment Lean takes it apart it's going to get really confused.</p>",
        "id": 209660105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750441
    },
    {
        "content": "<p>No, cases on m is like cases on m.</p>",
        "id": 209660143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750458
    },
    {
        "content": "<p>Cases on the second component of <code>m</code> is <code>cases m.2</code> which is different</p>",
        "id": 209660183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750480
    },
    {
        "content": "<p>I don't know what you mean</p>",
        "id": 209660262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750504
    },
    {
        "content": "<p>But you said I can do cases on <code>m</code> to get the first/second element: is that the same thing as doing <code>m.1</code> or <code>m.2</code>?</p>",
        "id": 209660352,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750544
    },
    {
        "content": "<p>I want to do cases on a proof of the existence of something to get an instance of that something (in this case, I would like to get my hands on an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, whose existence is granted by <code>m.2</code>)</p>",
        "id": 209660572,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750612
    },
    {
        "content": "<p>Is that correct?</p>",
        "id": 209660601,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750629
    },
    {
        "content": "<p>Yes, you can <code>obtain</code> out of an existential, which is provided to you from the <code>property</code> of your <code>fractional_ideal f</code>.</p>",
        "id": 209661023,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599750776
    },
    {
        "content": "<p>but are you use you will be able to use those to prove what you want to prove? That's because of Kevin's statement that you've<code>sorry</code>ed the proof about the existence of <code>M1</code>.</p>",
        "id": 209661060,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1599750792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/113489-new-members/topic/.23check.20and.20.23check.40/near/209660352\">said</a>:</p>\n<blockquote>\n<p>But you said I can do cases on <code>m</code> to get the first/second element: is that the same thing as doing <code>m.1</code> or <code>m.2</code>?</p>\n</blockquote>\n<p><code>cases m with m1 m2</code> will destroy the term <code>m</code> and give you instead two news terms <code>m1</code> and <code>m2</code>, which you could have got to using <code>m.1</code> and <code>m.2</code> without destroying <code>m</code>. I don't understand what you mean by \"doing\" a term -- I don't think that makes any sense.</p>",
        "id": 209661117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750807
    },
    {
        "content": "<p>Let's fill in the sorry because you shouldn't sorry data.</p>",
        "id": 209661189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750840
    },
    {
        "content": "<p>What do you want M1 to be?</p>",
        "id": 209661247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750848
    },
    {
        "content": "<p>Sure-by \"doing\" I meant \"appending a dot followed by a number 1 or 2\"</p>",
        "id": 209661261,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750854
    },
    {
        "content": "<p>OK</p>",
        "id": 209661339,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750885
    },
    {
        "content": "<p>Oh yeah -- doing the cases just destroys <code>m</code> and keeps its pieces.</p>",
        "id": 209661464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750935
    },
    {
        "content": "<p>You can make <code>m</code> again from <code>m1</code> and <code>m2</code> using <code>\\&lt;m1, m2\\&gt;</code></p>",
        "id": 209661524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599750953
    },
    {
        "content": "<p>Can I simply copy-paste my actual (almost complete) proof of <code>have M1 : fractional_ideal f,    { sorry },</code>?</p>",
        "id": 209661718,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599750983
    },
    {
        "content": "<p>Or do you want the entire code together with that piece of proof?</p>",
        "id": 209661810,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751001
    },
    {
        "content": "<p>sure, I can try and plumb it in.</p>",
        "id": 209661825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751004
    },
    {
        "content": "<p>OK</p>",
        "id": 209661848,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751007
    },
    {
        "content": "<p>have M1 : fractional_ideal f,<br>\n{use setM1,<br>\n  {intros y h,simp,use 0,simp,},<br>\n  {intros a b ha hb,intros y h,rw add_mul a b (f.to_map y),<br>\n  apply localization_map.is_integer_add,apply ha,exact h,apply hb,exact h,},<br>\n  -- {intros c x h y h,<br>\n  -- apply smul_mul c},<br>\n   { intros c x h1 y h,<br>\n    rw algebra.smul_mul_assoc,<br>\n    apply localization_map.is_integer_smul,<br>\n    exact h1 y h,},sorry,<br>\n},</p>",
        "id": 209661908,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751017
    },
    {
        "content": "<p>but my question was different -- it was \"what do you want the definition of M1 to be mathematically\"? I was then going to try and make it myself.</p>",
        "id": 209661973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751041
    },
    {
        "content": "<p>As you see, I still have a <code>sorry</code> at the end</p>",
        "id": 209661980,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751045
    },
    {
        "content": "<p>Ah, sorry</p>",
        "id": 209661989,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751047
    },
    {
        "content": "<p>AH, ok: I am definining the inverse of the maximal ideal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>; so I defined a set <code>setM1</code> and then I wanted to prove it is (the first component of) a fractional ideal <code>M1</code>.</p>",
        "id": 209662140,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751103
    },
    {
        "content": "<p>I see. But it isn't, in general, right?</p>",
        "id": 209662293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751160
    },
    {
        "content": "<p>I haven't ever used this stuff before so I just spent 5 minutes reading the API for fractional_ideal</p>",
        "id": 209662332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751178
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 209662512,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599751232
    },
    {
        "content": "<p>What do you mean by \"it isn't in general\"?</p>",
        "id": 209662534,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751242
    },
    {
        "content": "<p>Did you read the API for <code>fractional_ideal</code>?</p>",
        "id": 209662570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751257
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">fractional_ideal</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mem_zero_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fractional_ideal</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x&#39;</span><span class=\"o\">,</span> <span class=\"n\">x&#39;_mem_zero</span><span class=\"o\">,</span> <span class=\"n\">x&#39;_eq_x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">x&#39;_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">x&#39;</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">x&#39;_mem_zero</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">x&#39;_eq_x</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">x&#39;_eq_zero</span><span class=\"o\">]),</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 209662622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751280
    },
    {
        "content": "<p>I have never worked with fractional ideals at all in Lean, but I know the theory back to front mathematically.</p>",
        "id": 209662655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751297
    },
    {
        "content": "<p>So to learn how to use them in Lean, the first thing I do is jump to the definition and look through the file it's in</p>",
        "id": 209662692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751315
    },
    {
        "content": "<p>If you're saying that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is the unique non-invertible prime in a Dedekind Domain, I certainly agree.</p>",
        "id": 209662763,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751330
    },
    {
        "content": "<p>I'm sure you do, because I am sure you know the mathematics every bit as well as I do</p>",
        "id": 209662824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751361
    },
    {
        "content": "<p>But I am now proving that every maximal ideal in a (non-zero) DD is invertible, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is not maximal</p>",
        "id": 209662828,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751362
    },
    {
        "content": "<p>Oh that's a relief! I hadn't spotted that you had a variable <code>[is_maximal M]</code></p>",
        "id": 209662930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751398
    },
    {
        "content": "<p>I am following Samuel's approach: first prove that maximal ones are invertible, then use this to prove every non-zero ideal is invertible.</p>",
        "id": 209663032,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751432
    },
    {
        "content": "<p>Do you have that <code>R</code> is not a field?</p>",
        "id": 209663061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751441
    },
    {
        "content": "<p>You didn't have it in the MWE</p>",
        "id": 209663115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751447
    },
    {
        "content": "<p>Good point-let me check.</p>",
        "id": 209663186,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751483
    },
    {
        "content": "<p>VERY good point; I have not.</p>",
        "id": 209663251,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751512
    },
    {
        "content": "<p>I will certainly add this (or simply assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">M\\neq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>)</p>",
        "id": 209663291,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751537
    },
    {
        "content": "<p>But you have that R is a Dedekind domain, right? Because this is a 1d phenomenon</p>",
        "id": 209663325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751555
    },
    {
        "content": "<p>Sure, this i have</p>",
        "id": 209663387,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751568
    },
    {
        "content": "<p>in the mwe I did not add this, as it seemed irrelevant at that point of the discussion</p>",
        "id": 209663426,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751583
    },
    {
        "content": "<p>and I tried to make it \"minimal\"</p>",
        "id": 209663443,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751592
    },
    {
        "content": "<p>but got it wrong again... <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span></p>",
        "id": 209663487,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751614
    },
    {
        "content": "<p>Have you read the API for fractional ideals? <code>inv</code> and <code>div</code> are already defined.</p>",
        "id": 209663563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751651
    },
    {
        "content": "<p>If you are proving theorems about fractional ideals, you should really read all of <code>ring_theory/fractional_ideal</code>, in a certain kind of way which won't take very long</p>",
        "id": 209663694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751689
    },
    {
        "content": "<p>You should read the docstring of every definition, and the statement of every theorem in the file</p>",
        "id": 209663731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751706
    },
    {
        "content": "<p>and skip all the proofs, most of them are obvious</p>",
        "id": 209663755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751718
    },
    {
        "content": "<p>Well, I tried to do that and read all of it (although I might confess I have not understood the whole of it).</p>",
        "id": 209663969,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751802
    },
    {
        "content": "<p>The definitions are essentially all fundamental, and the theorems all very well-known (to you). What is an example of something you don't understand?</p>",
        "id": 209664072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751848
    },
    {
        "content": "<p>Well, bits of codes I can't fully understand: for instance, <br>\n<code>noncomputable instance fractional_ideal_has_div :\n  has_div (fractional_ideal g) :=\n⟨ λ I J, if h : J = 0 then 0 else ⟨I.1 / J.1, fractional_div_of_nonzero h⟩ ⟩</code></p>",
        "id": 209664179,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599751888
    },
    {
        "content": "<p>That means \"we define the symbol <code>/</code> on fractional ideals as follows. If <code>J = 0</code> then <code>I/J=0</code> and if <code>J</code> isn't <code>0</code> then it's the pair consisting of the submodule<code>I.1/J.1</code>, and a proof which we did earlier which shows that this is a fractional ideal\"</p>",
        "id": 209664429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599751971
    },
    {
        "content": "<p>But you shouldn't be reading the definition, you should be reading the docstring which is missing, and which should say \"<code>I/J</code> is the fractional ideal <code>I/J</code> if <code>J</code> is non-zero, and some junk value if <code>J=0</code>\"</p>",
        "id": 209664548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752029
    },
    {
        "content": "<p>That's all you need to know for now about that definition. Anything else?</p>",
        "id": 209664579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752042
    },
    {
        "content": "<p>this was more or less ok, but the <code>noncomputable</code> bit is still obscure-yet I tried to go on. That' s what I mean when I say \"I understood almost all of it, but not all\".</p>",
        "id": 209664661,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752056
    },
    {
        "content": "<p><code>has_div</code> is a notational typeclass, so it's just saying what <code>/</code> means.</p>",
        "id": 209664714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752079
    },
    {
        "content": "<p><code>noncomputable</code> means the following.</p>",
        "id": 209664822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752116
    },
    {
        "content": "<p>Let <code>R</code> be the integers, and let <code>J</code> be an ideal defined by an extremely obscure method. Then might not be able to <em>literally work out</em> what <code>1/J</code> is.</p>",
        "id": 209665053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752197
    },
    {
        "content": "<p>...are you saying that <code>noncomputable</code> asks Lean not to care?</p>",
        "id": 209665331,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752308
    },
    {
        "content": "<p>If you ask Lean using <code>#eval</code> to compute the square of 4 it will say 16.</p>",
        "id": 209665364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752323
    },
    {
        "content": "<p>But if you used <code>#eval</code> to work out <code>1/J</code> then because it can't work out if <code>J</code> is 0 or not, it cannot evaluate the definition of <code>1/J</code> because it doesn't know which branch of the <code>if</code> to take.</p>",
        "id": 209665445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752360
    },
    {
        "content": "<p><code>if h : J = 0 then 0 else ⟨I.1 / J.1, fractional_div_of_nonzero h⟩</code></p>",
        "id": 209665534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752400
    },
    {
        "content": "<p>\"If something happens, run one computer program, and if it doesn't, then run another one\"</p>",
        "id": 209665599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752414
    },
    {
        "content": "<p>To actually run this program, the computer needs to know which thing happened.</p>",
        "id": 209665627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752427
    },
    {
        "content": "<p>Mathematicians <em>do not need to know</em>. This is why all of this sounds insanely weird to you.</p>",
        "id": 209665673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752441
    },
    {
        "content": "<p>And it might not be able to compute if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">J=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> or not?</p>",
        "id": 209665676,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752443
    },
    {
        "content": "<p>Right.</p>",
        "id": 209665685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752448
    },
    {
        "content": "<p>But we as mathematicians don't care.</p>",
        "id": 209665701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752457
    },
    {
        "content": "<p>If J=0 the definition is one thing, if it isn't zero it's another thing</p>",
        "id": 209665730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752470
    },
    {
        "content": "<p>and if we came up with this in a proof, we could just do a case split: we could create a hypothesis <code>h : J = 0 \\or not (J = 0)</code> and do <code>cases h</code></p>",
        "id": 209665825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752512
    },
    {
        "content": "<p>but if you are actually trying to write a computer program then you need to be sure that your computer program knows how to figure out which way to go next</p>",
        "id": 209665949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752546
    },
    {
        "content": "<p>because <code>J = 0</code> is a statement involving an infinite set (R) and so you can't just check all the cases.</p>",
        "id": 209666025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752574
    },
    {
        "content": "<p>But this is of no relevance to us.</p>",
        "id": 209666042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752582
    },
    {
        "content": "<p>There were times in the perfectoid project where we just wrote <code>noncomputable theory</code> at the top of our files.</p>",
        "id": 209666084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752601
    },
    {
        "content": "<p>Files which are used to power certain tactics need to be computable, but this does not.</p>",
        "id": 209666124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752620
    },
    {
        "content": "<p>OK. But would Lean complain on the nose if the <code>noncomputable</code> bit was missing, or would it explose? Or would it complain only once it would be asked to invert an ideal?</p>",
        "id": 209666343,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752708
    },
    {
        "content": "<p>Lean will only complain if you try to <code>#eval</code> something. It will <em>never</em> complain if you just want to prove theorems and build up the theory abstractly.</p>",
        "id": 209666415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752747
    },
    {
        "content": "<p>which is what I want to do</p>",
        "id": 209666436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752756
    },
    {
        "content": "<p>Ah ok.</p>",
        "id": 209666438,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752756
    },
    {
        "content": "<p>so noncomputable doesn't matter at all. Maybe some constructivist will come along later on and complain, but in my opinion this is their problem not ours.</p>",
        "id": 209666549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752789
    },
    {
        "content": "<p>Thanks so much, at any rate. I am sorry again for the beginning with my m-nonw-e.</p>",
        "id": 209666593,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752811
    },
    {
        "content": "<p>Now I think I can try to go back to my file trying to add <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">M\\neq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and trying to see if I can finish the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">M1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord\">1</span></span></span></span> is fractional.</p>",
        "id": 209666665,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752845
    },
    {
        "content": "<p>I agree that part of this can already be in <code>fractional_ideal</code></p>",
        "id": 209666692,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752857
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">trial</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">fractional_ideal</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">Minv</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">fractional_ideal</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 209666733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752880
    },
    {
        "content": "<p>This is the way to start your proof.</p>",
        "id": 209666786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752888
    },
    {
        "content": "<p>Ah!</p>",
        "id": 209666802,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752895
    },
    {
        "content": "<p>But I was looking through the API and I think that the following is missing:</p>",
        "id": 209666818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752903
    },
    {
        "content": "<p><code>(I/J)*J \\le I</code></p>",
        "id": 209666845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599752917
    },
    {
        "content": "<p>Yes, this I haven't seen. I will try modifying the proof with your hint, I hope to get somewhere soon...</p>",
        "id": 209666924,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599752957
    },
    {
        "content": "<p>After <code>lemma le_div_iff {I J K : submodule R A} : I ≤ J / K ↔ ∀ (x ∈ I) (z ∈ K), x * z ∈ J := iff.refl _\n</code> in <code>algebra_operations</code> there should be the lemma that <code>I &lt;= J/K iff I*K &lt;= J</code></p>",
        "id": 209667473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753172
    },
    {
        "content": "<p>You have <code>mul_le</code>. Do you understand what I'm saying?</p>",
        "id": 209667782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753283
    },
    {
        "content": "<p>Yes, I think I do and I think I also see how you want me to use it to get a very quick proof of the invertibility of <code>M</code>.</p>",
        "id": 209668246,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599753458
    },
    {
        "content": "<p>But I need to sit down and write everything properly on a sheet of paper.</p>",
        "id": 209668332,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599753485
    },
    {
        "content": "<p>Presumably your proof wants to go like this. Say M is maximal and non-zero (why not just work in this generality, rather than saying \"assume R is not a field\"). mathlib already has inverses so let's set J=1/M. Now let's consider <code>J*M=(1/M)*M</code>. By some lemma which isn't in the library apparently, we have <code>(I/K)*K &lt;= I</code>. Hence <code>J*M</code> is an ideal of R. Now M &lt;= 1 so 1/1 &lt;= 1/M  and 1/1=1 so <code>J*M</code> contains <code>M</code>.</p>",
        "id": 209668342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753488
    },
    {
        "content": "<p>Note that J/K &lt;= J/K and hence (J/K)*K &lt;= J</p>",
        "id": 209668428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753524
    },
    {
        "content": "<p>etc etc.</p>",
        "id": 209668587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753579
    },
    {
        "content": "<p>But you should not launch straight into a proof in a <code>begin end</code> block. You should plan your proof because ultimately you want it to be very short, and you want to factor out as many sublemmas as possible.</p>",
        "id": 209668711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753615
    },
    {
        "content": "<p>Yes, this is basically the proof I have written down so far; a part from the fact that<br>\n1) my definition of the inverse of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> was long and could probably be shortened, as you suggest<br>\n2) Certainly need to add <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">M\\neq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span><br>\n3) Still have some <code>sorry</code>'s here and there</p>",
        "id": 209669173,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599753800
    },
    {
        "content": "<p>What I'm saying is that before you write any Lean code you should have a complete maths proof in front of you with all the details written down.</p>",
        "id": 209669358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753874
    },
    {
        "content": "<p>And then you see you need (1/M)*M &lt;= R</p>",
        "id": 209669380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753888
    },
    {
        "content": "<p>and then you see that this follows from <code>(I/J)*J &lt;= I</code></p>",
        "id": 209669406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753902
    },
    {
        "content": "<p>and you then realise that this follows from <code>I &lt;= J/K iff I * K &lt;= J</code></p>",
        "id": 209669498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599753947
    },
    {
        "content": "<p>I agree; the problem is that as I started I was sure that having Samuel's proof under my eyes contained \"all the details\"; then I realised some \"details\" were missing; then other are missing, etc...</p>",
        "id": 209669609,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599753988
    },
    {
        "content": "<p>It took me some time, for instance, to realise that injectivity of the localisation map was used (and hence useful)</p>",
        "id": 209669721,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599754049
    },
    {
        "content": "<p>so the first thing you should do is prove <code>submodule.le_div_iff_mul_le</code></p>",
        "id": 209669744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599754063
    },
    {
        "content": "<p>Here's a proof; I've put it in <code>algebra_operations</code>. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">le_div_iff_mul_le</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span> <span class=\"bp\">/</span> <span class=\"n\">K</span> <span class=\"bp\">↔</span> <span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">K</span> <span class=\"bp\">≤</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_div_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_le</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>You'll need it. I'll PR it.</p>",
        "id": 209670277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599754302
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 209670421,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599754358
    },
    {
        "content": "<p>The idea is that ultimately the proof between the <code>begin end</code> block of the theorem should look pretty much like what is written in Samuel. But to make this happen you need the infrastructure underneath to be good. Otherwise you keep finding yourself going off on wild tangents.</p>",
        "id": 209670666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599754459
    },
    {
        "content": "<p>Let me know what you think the maths proof should look like and let's see if we can make the Lean proof look as decent.</p>",
        "id": 209670709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599754485
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4102\">#4102</a></p>",
        "id": 209670914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599754580
    },
    {
        "content": "<p>Well, I am trying to first write down _one_ proof myself (lest I'll never learn anything about Lean, nor have any fun). I will then try to polish it and once this will look to me as similar as possible as Samuel's, I will either PR it or show it to you so that you can delete it and write it from scratch.</p>",
        "id": 209672583,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599755287
    },
    {
        "content": "<p>OK! See if you can make it to the end and feel free to ask if you have any more questions. The answer to your original question is the following. You have several problems with your code. Firstly, you have sorried data (sorried proofs are fine but sorried data is not). Secondly, you are re-inventing the wheel with <code>setM1</code> and <code>M1</code> : they already defined inverses of fractional ideals and division of fractional ideals, and if it's in mathlib then it's a good idea to use it. Finally, you do cases on terms, not types. <code>is_fractional f _</code> is a type so you can never do cases on it. The term you're looking for (to do <code>cases</code> on) is <code>M1.2</code>, the second component of <code>M1</code>, but you might have problems doing <code>cases</code> on it because of the sorried data.</p>",
        "id": 209677526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599757328
    },
    {
        "content": "<p>Great, thanks. I'll work on it, hoping to (have fun, and) get somewhere. Thanks for your hints and comments.</p>",
        "id": 209750256,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1599810630
    }
]