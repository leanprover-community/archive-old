[
    {
        "content": "<p>I'm stuck on this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">this_diophantine_not_solvable</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h1</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">py</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The goal state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span>\n<span class=\"n\">py</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I don't know where to begin.   <code>ℤ</code> is a simple type to start with.</p>\n<p>Generalizing a bit, I see there is a <code>dioph</code> in <code>matlib</code>, but is this theorem available?  If not, any hints on how to prove?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Linear Diophantine equations ax + by = c are solvable if and only if</span>\n<span class=\"c1\">-- the greatest common divisor of a and b divides c</span>\n<span class=\"c1\">-- http://mathforum.org/library/drmath/view/51595.html</span>\n<span class=\"c1\">-- https://en.wikipedia.org/wiki/Diophantine_equation#One_equation</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">solvable_diophantine</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n     <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">int.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 220936841,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608931600
    },
    {
        "content": "<p>First you need to figure out the human proof (i.e., the proof that you would see when learning elementary number theory)</p>",
        "id": 220936980,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608931839
    },
    {
        "content": "<p>nat.gcd_eq_gcd_ab might help with the solvable_diophantine theorem</p>",
        "id": 220937111,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608932061
    },
    {
        "content": "<p>Applying <code>even</code> to both sides of <code>py</code> would be a straightforward way to prove that</p>",
        "id": 220937509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608932784
    },
    {
        "content": "<p>You can show that it is equivalent to <code> ¬ (2 | 1)</code>, and there is a decision procedure for the latter so <code>dec_trivial</code> will prove it</p>",
        "id": 220940596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608938608
    },
    {
        "content": "<p>or simply <code>¬ even 1</code>, which I'm sure also has a decision procedure</p>",
        "id": 220940605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608938640
    },
    {
        "content": "<p>in fact it's probably literally a theorem</p>",
        "id": 220940642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608938648
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.not_even_one\">docs#nat.not_even_one</a></p>",
        "id": 220940652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608938696
    },
    {
        "content": "<p>Thanks, I see the theory of <code>even</code> is well developed in <code>mathlib</code>.</p>\n<p>For the general case I will follow <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> suggestion to translate the <a href=\"https://en.wikipedia.org/wiki/Diophantine_equation#One_equation\">elementary number theory proof</a>.  There seems a fair amount to unpack.  I will look at how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.not_even_one\">docs#nat.not_even_one</a> is proven to look for clues on how to do the general case:<br>\n<a href=\"/user_uploads/3121/uOPUvAl_jbSAPVsDOtK6G-zc/Screenshot-from-2020-12-25-19-44-20.png\">Screenshot-from-2020-12-25-19-44-20.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/uOPUvAl_jbSAPVsDOtK6G-zc/Screenshot-from-2020-12-25-19-44-20.png\" title=\"Screenshot-from-2020-12-25-19-44-20.png\"><img src=\"/user_uploads/3121/uOPUvAl_jbSAPVsDOtK6G-zc/Screenshot-from-2020-12-25-19-44-20.png\"></a></div>",
        "id": 220942867,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608943496
    },
    {
        "content": "<p>wait what? It sounds like you are massively overcomplicating things with this diophantine business</p>",
        "id": 220943070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608943962
    },
    {
        "content": "<p>divisibility is easily decidable</p>",
        "id": 220943082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608943976
    },
    {
        "content": "<p>if you want an elementary proof that there is no integer<code>x</code> such that <code>x + x = 1</code>, observe that either <code>x &lt;= 0</code> or <code>x &gt;= 1</code>, and in the first case <code>x + x &lt;= 0</code> and in the second <code>x + x &gt;= 2</code>, so it can't be 1</p>",
        "id": 220943141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608944050
    },
    {
        "content": "<p>If you want Bezout's theorem, you can use nat.gcd_eq_gcd_ab as Thomas suggested, but it's not necessary for your theorem at all</p>",
        "id": 220943208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608944224
    },
    {
        "content": "<p>The <code>x+x=1</code> is artificial, I started with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and I rewrote <code>2*y</code> as <code>y+y</code> in the hope that it would make simplification easier.</p>\n<p>However now that I know <code>even</code> is defined I can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ℤ_even</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">even</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>and directly apply the available theorems in <code>mathlib</code> for even, so it takes me out of the Diophantine equation business.</p>\n<p>I just threw in the general case <code>a * x + b * y = c</code> to look more eager to drown myself in the details of a Number Theory course I took in 1982 from a guy named <a href=\"https://www.legacy.com/obituaries/postgazette/obituary.aspx?n=oswald-wyler&amp;pid=18457942\">Oswald Wyler</a> whose favorite thing to say was \"I like the integers\".</p>",
        "id": 220943313,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608944445
    },
    {
        "content": "<p>Take a look at the definition of divisibility. It is exactly the same as your <code>Z_even</code> up to commutation</p>",
        "id": 220943426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608944689
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_has_dvd\">docs#monoid_has_dvd</a></p>",
        "id": 220943437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608944746
    },
    {
        "content": "<p>actually I take it back, it's exactly the same: Z_even is defeq to <code>{x | 2 \\| x}</code></p>",
        "id": 220943476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608944796
    },
    {
        "content": "<p>and there is a decision procedure for divides, hence <code>not (2 \\| 1)</code> is true by dec_trivial</p>",
        "id": 220943482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608944838
    },
    {
        "content": "<p>it's also defeq to <code>{x | even x}</code></p>",
        "id": 220943527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1608944887
    },
    {
        "content": "<p>DONE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ℤ_even_is_not_a_submonoid</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_submonoid</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span>  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h1.one_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:=</span> <span class=\"n\">int.not_even_one</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h3</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Since <code>submonoid</code> is required for <code>integral_domain</code> I guess that's good  enough to prove that <code>{x:ℤ  | 2 ∣ x} </code> is not an integral domain.</p>\n<p>Here are related tangents I will drop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">solvable_diophantine</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n       <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">int.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∣</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ℝ_1_is_unique</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ℝ_0_is_unique</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n      <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n    <span class=\"bp\">→</span> <span class=\"n\">z</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But on the third hand it is not completely automated because first I try to do <code>is_integral_domain</code> and it says \"well I want an <code>is_monoid</code>\" so then I manually rewrite the proof to <code>is_submonoid</code>.  This involves a manual rewriting step.  There doesn't seem to be a way to write that as code.</p>\n<p>So that part is in my head instead of being a checkable proof step.</p>\n<p>So the next one comes easier</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex6b</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_subring</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">odd</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">h1.to_is_add_subgroup.to_is_add_submonoid.zero_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but it has that missing proof step because if I start with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ex6b</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_integral_domain</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">odd</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then I get the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">ring</span> <span class=\"bp\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">|</span> <span class=\"n\">odd</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>So then I manually rewrite the theorem to be <code>is_subring</code>.</p>\n<p>Is there any way to automate this issue of the missing sub-instance when I am trying to prove that a set is not an instance of an algebraic structure type?</p>",
        "id": 220945260,
        "sender_full_name": "Lars Ericson",
        "timestamp": 1608948773
    }
]