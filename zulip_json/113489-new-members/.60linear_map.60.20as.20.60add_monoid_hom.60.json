[
    {
        "content": "<p>I have bumped into the fact that <code>linear_map</code> does not extend <code>add_monoid_hom</code>, i.e., that the definition is <em>not</em>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">linear_map&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">add_monoid_hom</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I may be missing something but at the moment this appears to cause me some mild inconvenience since I cannot apply results about <code>add_monoid_hom</code>s to <code>linear_map</code>s. On the other hand, I note that the actual definition of <code>linear_map</code> has the advantage that we are saved from pointlessly proving <code>map_zero</code> in a bunch of places.</p>\n<p>My questions are:</p>\n<ol>\n<li>Am I missing something, and this is all a bit silly?</li>\n<li>Are there other reasons why it would be a Bad Thing to have <code>linear_map</code>s be <code>add_monoid_hom</code>s?</li>\n<li>Is there support for regarding <code>linear_map</code>s as <code>add_monoid_hom</code>s, e.g., via coercion? I have not yet found any.</li>\n</ol>",
        "id": 187591265,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581024883
    },
    {
        "content": "<p>Glancing this morning I wonder if an answer to 2 above would be that <code>add_monoid_hom</code> depends upon only two carrier types whereas <code>linear_map</code> needs three, so we might run into typeclass inference issues if it extended.</p>",
        "id": 187624315,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581067456
    },
    {
        "content": "<p>Is there an instance from <code>linear_map</code> to <code>add_monoid_hom</code>? Would this solve your problems?</p>",
        "id": 187717459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581169316
    },
    {
        "content": "<p>Well my problems have evaporated after I reworked things slightly for different reasons so this has become a bit theoretical. Also both <code>linear_map</code> and <code>add_monoid_hom</code> are structures rather than classes so I don't think I could appeal to instances as things stand, though I appreciate the suggestion.</p>",
        "id": 187718872,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581172025
    },
    {
        "content": "<p>I'm a little surprised this is not more of an issue but I expect this is mostly a reflection of my own ignorance. I'm not blocked so I think I'll just carry on, and keep an eye out for places in the codebase from which I might be able to understand better why this has not proven problematic.</p>",
        "id": 187718995,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581172265
    },
    {
        "content": "<p>You're right about instances -- my suggestion won't work. If <code>f : linear_map X Y</code> then you presumably have <code>f.map_zero</code> and <code>f.map_add</code> -- is this enough?</p>",
        "id": 187719054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581172406
    },
    {
        "content": "<p>Certainly, I can trivially build a term of type <code>add_monoid_hom</code> from a term of type <code>linear_map</code> because of the two results you mention. However I think I won't automatically have handy facts like that this construction itself preserves addition etc.</p>",
        "id": 187719104,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1581172532
    },
    {
        "content": "<p>I think <code>linear_map</code> was defined a long time before <code>add_monoid_hom</code>; maybe the former should be updated but I'm not sure</p>",
        "id": 187739006,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1581211305
    }
]