[
    {
        "content": "<p>Is there an easy  way of removing the following <code>sorry</code>: ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">@[derive has_le, derive has_lt]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mass</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">object</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mass</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">object_le</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"n\">object</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">o</span> <span class=\"n\">o'</span><span class=\"o\">,</span> <span class=\"n\">o.m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">o'.m</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">o.m</span> <span class=\"bp\">=</span> <span class=\"n\">o'.m</span> <span class=\"bp\">∧</span> <span class=\"n\">o.n</span> <span class=\"bp\">≤</span> <span class=\"n\">o'.n</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">object_le_linear</span> <span class=\"o\">:</span> <span class=\"n\">is_linear_order</span> <span class=\"n\">object</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The <code>object</code> structure is basically just an <code>ℕ × ℕ</code> and its <code>≤</code> is lexicographic.<br>\nI would like to avoid proving reflexivity,  transitivity, antisymmetry and totality manually. Is that possible?</p>",
        "id": 229869361,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615477173
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lex\">docs#lex</a></p>",
        "id": 229880252,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615480365
    },
    {
        "content": "<p>Unfortunately I need to keep the structure, so I can't just <code>def object := lex mass ℕ</code>.</p>",
        "id": 229884989,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615481895
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order.lift\">docs#linear_order.lift</a></p>",
        "id": 229885889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615482167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/Get.20is_linear_order/near/229885889\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order.lift\">docs#linear_order.lift</a></p>\n</blockquote>\n<p>I don't understand how to use this. Could you perhaps show an example? :)</p>",
        "id": 229886259,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615482283
    },
    {
        "content": "<p>Is this the intended use?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">object.to_lex</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">object</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lex</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">o.m</span><span class=\"o\">,</span> <span class=\"n\">o.n</span><span class=\"o\">)</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">object</span> <span class=\"o\">:=</span> <span class=\"n\">linear_order.lift</span> <span class=\"n\">object.to_lex</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 229887215,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1615482609
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span> <span class=\"n\">order.lexicographic</span>\n\n<span class=\"kd\">@[derive linear_order]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mass</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">object</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mass</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">object</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">linear_order.lift</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"n\">mass</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">o</span><span class=\"o\">:</span><span class=\"n\">object</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">o.m</span><span class=\"o\">,</span> <span class=\"n\">o.n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229887661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1615482753
    }
]