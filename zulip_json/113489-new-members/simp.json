[
    {
        "content": "<p>is it possible to tell which rules/lemmas simp used to simplify a type?</p>",
        "id": 147720756,
        "sender_full_name": "petercommand",
        "timestamp": 1542257808
    },
    {
        "content": "<p>use <code>squeeze_simp</code></p>",
        "id": 147720820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542257893
    },
    {
        "content": "<p>or <code>set_option trace.simplify.rewrite true</code></p>",
        "id": 147720829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542257909
    },
    {
        "content": "<p>thanks!</p>",
        "id": 147720864,
        "sender_full_name": "petercommand",
        "timestamp": 1542257958
    },
    {
        "content": "<p>will try both</p>",
        "id": 147720942,
        "sender_full_name": "petercommand",
        "timestamp": 1542258041
    },
    {
        "content": "<p>If I've got</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">k_n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">k_m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k_n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k_m</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>this _seems_ like something I should be able to just <code>simp</code>. Am I missing imports or something similar?</p>",
        "id": 208995643,
        "sender_full_name": "toc",
        "timestamp": 1599151101
    },
    {
        "content": "<p>I'd be somewhat surprised if <code>simp</code> worked on that, but maybe <code>ring</code> will?</p>",
        "id": 208995903,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1599151233
    },
    {
        "content": "<p>Well that got me</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span> <span class=\"mi\">102</span> <span class=\"mi\">0</span> <span class=\"mi\">102</span> <span class=\"mi\">0</span> <span class=\"n\">ring</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">ring</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">tactic</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>\n\n\n<p>is <code>ring</code> supposed to be the \"do some algebra\" tactic, then?</p>",
        "id": 208996700,
        "sender_full_name": "toc",
        "timestamp": 1599151565
    },
    {
        "content": "<p>That looks like you haven't put <code>import tactic</code> at the top of your file.</p>",
        "id": 208996798,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599151608
    },
    {
        "content": "<p>Here's the documentation on ring: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a></p>",
        "id": 208996848,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599151632
    },
    {
        "content": "<p>(trying that now, it is... taking a while to load/run)</p>",
        "id": 208997336,
        "sender_full_name": "toc",
        "timestamp": 1599151866
    },
    {
        "content": "<p>But that did ultimately work. Thanks!</p>",
        "id": 208997527,
        "sender_full_name": "toc",
        "timestamp": 1599151944
    },
    {
        "content": "<p>I think you'll hit the limits of the web editor pretty soon. I'd definitely recommend following the directions here <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">#install</a> if at all possible.</p>",
        "id": 208997889,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599152108
    },
    {
        "content": "<p>Yep! I'm in vscode now.</p>",
        "id": 208999488,
        "sender_full_name": "toc",
        "timestamp": 1599152827
    }
]