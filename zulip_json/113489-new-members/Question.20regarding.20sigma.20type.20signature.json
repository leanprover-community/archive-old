[
    {
        "content": "<p>In Theorem Proving in Lean, Section 7.2, <a href=\"https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#constructors-with-arguments\">https://leanprover.github.io/theorem_proving_in_lean/inductive_types.html#constructors-with-arguments</a> , there is an example for defining sigma types.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">sigma₁</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">dpair</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">sigma₁</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">sigma₁</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">sigma₁.dpair</span>\n</code></pre></div>\n<p>The type signature for <code>sigma₁.dpair</code> is shown as follows.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sigma₁.dpair</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">sigma₁</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>I was wondering why <code>dpair</code> is generating term of type <code>sigma₁ β</code> and not <code>sigma₁ α β</code>?</p>",
        "id": 219707127,
        "sender_full_name": "Rajiv",
        "timestamp": 1607776947
    },
    {
        "content": "<p>the alpha is implicit</p>",
        "id": 219707199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777057
    },
    {
        "content": "<p>because it was written <code>{α : Type u}</code></p>",
        "id": 219707211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607777075
    },
    {
        "content": "<p>Thanks Mario. Now I see it.</p>",
        "id": 219707239,
        "sender_full_name": "Rajiv",
        "timestamp": 1607777125
    }
]