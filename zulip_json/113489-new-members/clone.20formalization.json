[
    {
        "content": "<p>Hello everybody, we tried a testing formalization of a simple proposition about clones in several ITP's for comparison. LEAN seems pretty nice so far. However, I believe that there should be a better approach to certain parts the proof (if we just knew LEAN better).<br>\nYou can see the task description,  together with my complains (/ TODO) under the link.<br>\n<a href=\"http://atrey.karlin.mff.cuni.cz/~mirecek/formal-math/clones.lean\" target=\"_blank\" title=\"http://atrey.karlin.mff.cuni.cz/~mirecek/formal-math/clones.lean\">http://atrey.karlin.mff.cuni.cz/~mirecek/formal-math/clones.lean</a></p>",
        "id": 136329846,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1540292258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133339\">@Miroslav Olšák</span> I'm having trouble with certain symbols. I think unicode is being messed up or something. Could you post your code again with correct encoding? Maybe as a Github Gist, or something... (Don't know if you use github...)</p>",
        "id": 136331045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540294107
    },
    {
        "content": "<p>In Firefox you can set the text encoding manually to unicode (View... Text Encoding...) and then the page displays properly. Apparently that feature no longer exists in Chrome.</p>",
        "id": 136334848,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1540299184
    },
    {
        "content": "<p>All right, there it is on GitHub:<br>\n<a href=\"https://github.com/mirefek/clones-lean/blob/master/clones.lean\" target=\"_blank\" title=\"https://github.com/mirefek/clones-lean/blob/master/clones.lean\">https://github.com/mirefek/clones-lean/blob/master/clones.lean</a><br>\nAny suggestions to the code? Is there a better way for case analysis through fin 3? Or a tactic that can do  all the rewrite at the end of the code?</p>",
        "id": 136357974,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1540320228
    },
    {
        "content": "<p>I think you should use ternary functions rather than arrays</p>",
        "id": 136358074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540320322
    },
    {
        "content": "<p>or products, but curried will be nicer</p>",
        "id": 136358153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540320371
    },
    {
        "content": "<blockquote>\n<p>I think you should use ternary functions rather than arrays</p>\n</blockquote>\n<p>Definitely not. Sure, it suffices for this simple example but it does not correspond to the definition of clone at all.</p>",
        "id": 136360087,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1540322155
    },
    {
        "content": "<blockquote>\n<p>or products, but curried will be nicer</p>\n</blockquote>\n<p>Show me.</p>",
        "id": 136360141,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1540322182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What do you mean by curried products?</p>",
        "id": 136360748,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1540322868
    },
    {
        "content": "<p>You can write a function <code>X × Y → Z</code> as <code>X → Y → Z</code>.</p>",
        "id": 136360856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540322971
    },
    {
        "content": "<p>This is known as \"currying\"</p>",
        "id": 136360866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540322985
    },
    {
        "content": "<p>aka product is left-adjoint of hom</p>",
        "id": 136360871,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540322998
    },
    {
        "content": "<p>(sorry)</p>",
        "id": 136360917,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540323005
    },
    {
        "content": "<p>I see.<br>\nBut how to define the general composition for operations written like this?<br>\nI really think it is better to interpret them as functions A^n -&gt; A, in the case of clones, as mathematicians usually do.</p>",
        "id": 136361131,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1540323231
    },
    {
        "content": "<p>I tend to agree (I'm also a mathematician). But these CS people have really crazy operators that will do what you want.</p>",
        "id": 136361197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540323295
    },
    {
        "content": "<p>And they can explain the benefits. (The disadvantage is that it no longer looks like what you are used to, although you can prove it is the same thing.)</p>",
        "id": 136361225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540323328
    },
    {
        "content": "<p>I guess the advantage of the CS approach is that you can just give a single input and get a function.</p>",
        "id": 136361233,
        "sender_full_name": "Abhimanyu Pallavi Sudhir",
        "timestamp": 1540323336
    },
    {
        "content": "<p>I don't know what a clone is exactly, but what I saw on wiki looks like it is related operads. <span class=\"user-mention\" data-user-id=\"133339\">@Miroslav Olšák</span> Is that right?</p>",
        "id": 136361300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540323384
    },
    {
        "content": "<p>nlab claims clones are analogous to operads but I think the relationship is less obvious than it looks at first glance</p>",
        "id": 136361938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540323963
    },
    {
        "content": "<p>The composition operation for operads takes a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-ary operation and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span></span></span></span> operations of arity <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">n_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, ..., <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">n_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> and gives you an operation of arity <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>n</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">n_1 + \\cdots + n_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.58333em;\"></span><span class=\"strut bottom\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">+</span><span class=\"minner\">⋯</span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span></p>",
        "id": 136361968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540324007
    },
    {
        "content": "<p>where the picture is that the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03148em;\">k</span></span></span></span> operations each have access to disjoint subsets of the input variables</p>",
        "id": 136362014,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540324054
    },
    {
        "content": "<p>here, each of the composed operations has access to all the input variables. I guess maybe it is the same thing as saying that you have the power to duplicate variables.</p>",
        "id": 136362084,
        "sender_full_name": "Reid Barton",
        "timestamp": 1540324100
    },
    {
        "content": "<p>I understand the advantages of functional programming, but not in this case. If anybody feels that defining a clone by curried functions would be better, it would be nice to see such an approach.</p>\n<p>Concerning to operads, I don't know them very well. From what I see on Wiki right now, operads are more general than abstract clones since they does not have projections (and also, operads don't glue variables). I think Reid Barton is right, just faster than me :-)</p>",
        "id": 136362172,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1540324191
    },
    {
        "content": "<p>The fact that you can partially apply a curried function is not actually that important in this case, it's just the way lean naturally deals with n-ary functions</p>",
        "id": 136384717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540352695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133339\">@Miroslav Olšák</span> Okay, I see now. I thought that you only had to deal with ternary functions, but now I see that the statement involves membership in a clone, which involves arbitrary arity functions</p>",
        "id": 136385067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540353430
    },
    {
        "content": "<p>In this case, I will point you to <a href=\"https://github.com/leanprover/mathlib/blob/master/computability/primrec.lean#L1132-L1141\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/computability/primrec.lean#L1132-L1141\"><code>nat.primrec'</code></a>, which is somewhat similar in needing to deal with collections of n-ary functions and n-ary composition. I use functions of type <code>vector n A -&gt; A</code>, and n-ary composition is <code>λ a, f (of_fn (λ i, g i a))</code></p>",
        "id": 136385128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540353595
    },
    {
        "content": "<p>Interesting. Do you think that vectors behave in Lean better than arrays in general? (even though they are mathematically the same).</p>",
        "id": 136396537,
        "sender_full_name": "Miroslav Olšák",
        "timestamp": 1540372468
    }
]