[
    {
        "content": "<p>Hello again. I have a proof obligation of :</p>\n<div class=\"codehilite\"><pre><span></span> <span class=\"err\">⊢</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I'm not able to dismiss this with lt_succ_self (forall (n : nat), n &lt; succ n), and I'm not able to generalize them to the same term; trying to generalize them to some term h_2 leaves me with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span><span class=\"n\">h_2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I'm working with a self-defined instance of has_sizeof, and my lack of understanding of the relationship between has_size of and sizeof may or may not be to blame.</p>\n<p>Thank you for any help</p>",
        "id": 157895907,
        "sender_full_name": "cbailey",
        "timestamp": 1549662329
    },
    {
        "content": "<p>are you sure you have exactly one variable <code>h</code>?</p>",
        "id": 157896143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549662504
    },
    {
        "content": "<p>Check your local context for dupes</p>",
        "id": 157896152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549662517
    },
    {
        "content": "<p>Lean will happily let you call ten things <code>h</code></p>",
        "id": 157896160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549662528
    },
    {
        "content": "<p>it's a feature</p>",
        "id": 157896174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549662537
    },
    {
        "content": "<p>I hate this feature, especially while teaching</p>",
        "id": 157896196,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1549662555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126632\">@cbailey</span> if you want to get very intimidated, you could write <code>set_option pp.all true</code> just above your theorem and then look at what Lean really thinks your goal is. It might be a way of seeing if the two <code>h</code>'s are actually the same</p>",
        "id": 157896292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549662609
    },
    {
        "content": "<p>I think that the <code>generalize</code> should work. I am guessing you have two different things called <code>h</code></p>",
        "id": 157896312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549662639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  <code>set_option pp.all_true</code> is awesome, I learned something new already, thank you.  It does seem to have something to do with the fact that I had to define has_sizeof. The goal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">zTree</span>\n<span class=\"err\">⊢</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">zTree_pr2</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">zTree_pr2</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>has this term <code>has_sizeof_inst</code> which I wasn't able to find any info about in the source on github, but I guess is enough to prevent unification, since the only parts that are different are <code>zTree.has_sizeof</code> vs <code>zTree.has_sizeof_inst</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">zTree</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_lt</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">zTree</span> <span class=\"n\">zTree</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof</span> <span class=\"o\">(</span><span class=\"n\">zTree_pr2</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">zTree</span> <span class=\"n\">zTree</span><span class=\"bp\">.</span><span class=\"n\">has_sizeof_inst</span> <span class=\"o\">(</span><span class=\"n\">zTree_pr2</span> <span class=\"n\">t</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 157899519,
        "sender_full_name": "cbailey",
        "timestamp": 1549665512
    },
    {
        "content": "<p>It's hard for me to make any coherent comment because I don't know the type of anything</p>",
        "id": 157899733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549665730
    },
    {
        "content": "<p>It sounds like you made some poor choices earlier to lead you here. Why are you defining a has_sizeof instance? What is the context of this goal?</p>",
        "id": 157899735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549665731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> You're probably right; I spent last night/this morning doing some more reading so as not to waste everyone's time. I'm using the nested inductive definition from TPIL ch. 7,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n</pre></div>\n\n\n<p>I was writing a mutually recursive function from tree -&gt; string to give it has_repr following the pattern in Ch. 8, and the the proof Lean wanted for termination became:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"o\">(</span><span class=\"n\">tree_tail</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">sizeof</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>so between that and a few other attempts using patterns from TPIL chapter 8 that also got stuck on <code>list.sizeof</code> issues, I started (naively) prodding the has_sizeof typeclass  since TPIL ch. 7 doesn't go into any detail about how to define recursive functions on nested inductive types other than to say it's tricky; The mutually recursive definitions in 8.5 are on a type with two constructors. In searching Zulip I saw Dr. Carneiro and Dr. DeMoura mention that lean 3 does not supported nested inductive types and instead reduces them to normal inductive types internally, but that v4 will include support for nested inductive types. Will this kind of recursive function become admissible/feasible in version 4?</p>",
        "id": 157949098,
        "sender_full_name": "cbailey",
        "timestamp": 1549752790
    },
    {
        "content": "<p>I don't say that to judge you; it is actually very common to have XY problems asked here because you make a choice that seems okay and it doesn't really cause a problem until way down the line</p>",
        "id": 157949144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549752859
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Lean.20assignment.20from.20Kenny\" title=\"#narrow/stream/113488-general/topic/Lean.20assignment.20from.20Kenny\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Lean.20assignment.20from.20Kenny</a></p>",
        "id": 157949153,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549752882
    },
    {
        "content": "<p>I think that inductive type would be very messy, right</p>",
        "id": 157949158,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549752897
    },
    {
        "content": "<p>My first instinct is to say \"nested inductive = bad idea\" here</p>",
        "id": 157949169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549752928
    },
    {
        "content": "<p>The trouble with nested inductive types at the moment is that the code doesn't give you a strong enough recursor, so you're forced to use the equation compiler.</p>",
        "id": 157949172,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549752958
    },
    {
        "content": "<p>Also I'm not a Dr yet. :)</p>",
        "id": 157949218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549753004
    },
    {
        "content": "<p>And I guess the <code>sizeof</code> proof obligations are probably going to be quite difficult if they're not filled in automatically by the equation compiler.</p>",
        "id": 157949222,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549753014
    },
    {
        "content": "<p>v4 will not include support for nested inductive types, but it will have native support for mutual inductives</p>",
        "id": 157949238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549753063
    },
    {
        "content": "<p>at least as far as I know</p>",
        "id": 157949239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549753072
    },
    {
        "content": "<p>However Jeremy, Simon and I are working on a better compilation of nested inductive types, which will probably be fairly similar to the current implementation in this case</p>",
        "id": 157949291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549753137
    },
    {
        "content": "<p>except that you get a proper recursion principle using list.map instead of a mutual def</p>",
        "id": 157949301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549753161
    },
    {
        "content": "<p>Could you share the rest of your definitions between the inductive and the problematic proof?</p>",
        "id": 157949345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549753204
    },
    {
        "content": "<blockquote>\n<p>except that you get a proper recursion principle using list.map instead of a mutual def</p>\n</blockquote>\n<p>Why would the recursor use <code>list.map</code>?</p>",
        "id": 157949414,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549753332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> No I appreciate it, I didn't feel judged. I thought you were probably right and I needed to ask a better question. The code is here : <a href=\"https://gist.github.com/ammkrn/2ae08526358d27ce3705861cf9187d40\" target=\"_blank\" title=\"https://gist.github.com/ammkrn/2ae08526358d27ce3705861cf9187d40\">https://gist.github.com/ammkrn/2ae08526358d27ce3705861cf9187d40</a></p>",
        "id": 157949590,
        "sender_full_name": "cbailey",
        "timestamp": 1549753724
    },
    {
        "content": "<p>here's the expected type and computation rule for the (nondependent) recursor:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constant</span> <span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">rec&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">axiom</span> <span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">rec&#39;_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">tree</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">rec&#39;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">rec&#39;</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 157949601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549753773
    },
    {
        "content": "<p>in this case it's actually pretty easy to fix:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">tree</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tree_val</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"n\">def</span> <span class=\"n\">tree_list</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">tree</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n\n<span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">num_tree</span><span class=\"o\">,</span> <span class=\"n\">num_list_tree</span>\n<span class=\"k\">with</span> <span class=\"n\">num_tree</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">num_list_tree</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">num_list_tree</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"bp\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">num_tree</span> <span class=\"n\">hd</span> <span class=\"bp\">+</span> <span class=\"n\">num_list_tree</span> <span class=\"n\">tl</span>\n\n<span class=\"n\">mutual</span> <span class=\"n\">def</span> <span class=\"n\">string_tree</span><span class=\"o\">,</span> <span class=\"n\">string_list_tree</span>\n<span class=\"k\">with</span> <span class=\"n\">string_tree</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">string_list_tree</span> <span class=\"n\">l</span>\n<span class=\"k\">with</span> <span class=\"n\">string_list_tree</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"bp\">::</span> <span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">string_tree</span> <span class=\"n\">hd</span> <span class=\"bp\">++</span> <span class=\"n\">string_list_tree</span> <span class=\"n\">tl</span>\n</pre></div>",
        "id": 157949745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549753988
    },
    {
        "content": "<p>You shouldn't use projections for your recursive calls. It is important that lean realizes you are destructing the input to see the structural recursion</p>",
        "id": 157949755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549754027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> One of the things we would like to be able to support is recursive defs over mutual inductives that use map, like so:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">string_tree</span> <span class=\"o\">:</span> <span class=\"n\">tree</span> <span class=\"bp\">→</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tree</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"bp\">++</span><span class=\"o\">)</span> <span class=\"s2\">&quot;&quot;</span> <span class=\"o\">(</span><span class=\"n\">string_tree</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 157949872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549754199
    },
    {
        "content": "<p>this would eliminate the necessity to recapitulate basic list definitions and have lots of mutual defs for nested inductives</p>",
        "id": 157949890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549754241
    },
    {
        "content": "<p>In a nested inductive, this is the analogue of a \"structural induction\", because the definition of <code>foo (mk a l)</code> only refers to <code>foo &lt;$&gt; l</code> and functions thereof</p>",
        "id": 157949940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549754308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Wow, thank you so much. That's really smart/simple, but I completely missed it.</p>",
        "id": 157949951,
        "sender_full_name": "cbailey",
        "timestamp": 1549754341
    },
    {
        "content": "<p>I actually tried that definition yesterday, with the fold/map combo and got 'unexpected occurrence of recursive function'</p>",
        "id": 157950027,
        "sender_full_name": "cbailey",
        "timestamp": 1549754429
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 157950044,
        "sender_full_name": "cbailey",
        "timestamp": 1549754471
    },
    {
        "content": "<p>it still gives that error, but we're working on a compilation mechanism to accept definitions like that</p>",
        "id": 157950211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549754749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think that's a really elegant solution, I look forward to seeing that. Thanks again for the guidance, I 'm so happy this definition is working!</p>",
        "id": 157950555,
        "sender_full_name": "cbailey",
        "timestamp": 1549755339
    }
]