[
    {
        "content": "<p>I am getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">free_group.injective_lift_of_ping_pong</span> <span class=\"bp\">-</span> <span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"bp\">`</span><span class=\"n\">inhabited</span><span class=\"bp\">`</span> <span class=\"n\">instances</span> <span class=\"n\">should</span> <span class=\"n\">be</span> <span class=\"bp\">`</span><span class=\"n\">nonempty</span><span class=\"bp\">`.</span> <span class=\"n\">argument</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>from the linter.  I can change that parameter, but what do I use instead of <code>default ι</code> in my proofs now?</p>",
        "id": 276731181,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1648308528
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.arbitrary\">docs#classical.arbitrary</a></p>",
        "id": 276731312,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648308736
    },
    {
        "content": "<p>Ah, thanks. I was already doing things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">exact</span> <span class=\"n\">nonempty.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>\n      <span class=\"kd\">begin</span> <span class=\"bp\">…</span> <span class=\"kd\">end</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>:-D.</p>",
        "id": 276731418,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1648308928
    },
    {
        "content": "<p>Maybe I’ll add a pointer to <code>classical.arbitrary</code> from <a href=\"https://leanprover-community.github.io/mathlib_docs/init/logic.html#nonempty\">https://leanprover-community.github.io/mathlib_docs/init/logic.html#nonempty</a>? Ah, but that doesn’t work because it’d point form core into mathlib. I’ll maybe improve the linter message then.</p>\n<p>Hmm, but that would lose some conciseness there. I’ll leave it and let others learn via Zulip as well :-)</p>",
        "id": 276731471,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1648308998
    },
    {
        "content": "<p>I’ll leave a question on the SE site, for future users googling for this.<br>\n<span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , do you want to answer <a href=\"https://proofassistants.stackexchange.com/questions/1168/like-arbitrary-but-for-nonempty-instead-of-inhabited\">https://proofassistants.stackexchange.com/questions/1168/like-arbitrary-but-for-nonempty-instead-of-inhabited</a> for SE reputation points, or should I just do it?</p>",
        "id": 276731640,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1648309269
    },
    {
        "content": "<p>Oh I guess I should because I still haven't been active at all here.</p>",
        "id": 276731656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648309301
    },
    {
        "content": "<p>I wonder if there is  a black market for SE rep points already, where people pay with lines of lean proof scripts…</p>",
        "id": 276731721,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1648309358
    },
    {
        "content": "<p>there's also the <code>inhabit</code> tactic if you want to keep using <code>default</code></p>",
        "id": 276734026,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648312374
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.inhabit\">docs#tactic.interactive.inhabit</a></p>",
        "id": 276735375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648314144
    }
]