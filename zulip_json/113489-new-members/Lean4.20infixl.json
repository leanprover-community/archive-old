[
    {
        "content": "<p>I was looking at the examples at <a href=\"https://leanprover.github.io/lean4/doc/notation.html\">https://leanprover.github.io/lean4/doc/notation.html</a> and tried to chain infixl operator but keep getting an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">65</span>  <span class=\"s2\">\" @ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Div.div</span>  <span class=\"c1\">-- right-associative</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">8</span> <span class=\"bp\">@</span> <span class=\"mi\">4</span> <span class=\"bp\">@</span> <span class=\"mi\">2</span> <span class=\"c1\">-- works 4 == (8 / (4 / 2))</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">65</span>  <span class=\"s2\">\" $ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Div.div</span> <span class=\"c1\">-- left-associative</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">8</span> <span class=\"bp\">$</span> <span class=\"mi\">4</span> <span class=\"bp\">$</span> <span class=\"mi\">2</span> <span class=\"c1\">-- error function expected at 8 term has type ?m.2645</span>\n</code></pre></div>\n<p>The expanded notation did seem to work though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\" # \"</span> <span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"mi\">66</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Div.div</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"c1\">-- left-associative</span>\n<span class=\"k\">#eval</span> <span class=\"mi\">8</span> <span class=\"bp\">#</span> <span class=\"mi\">4</span> <span class=\"bp\">#</span> <span class=\"mi\">2</span> <span class=\"c1\">-- works 1 == ((8 / 4) / 2)</span>\n</code></pre></div>\n<p>Am I doing something wrong in the infixl decleration or is this a bug?</p>",
        "id": 267377899,
        "sender_full_name": "vlado",
        "timestamp": 1641762601
    },
    {
        "content": "<p>I'd say this is because <code>$</code> is already a reserved syntax for the Haskell style <code>$</code> operator but I'm not 100 percent sure.</p>",
        "id": 267379393,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1641764831
    },
    {
        "content": "<p>woops that was it, I tried both '$' and '@' and got the same error but '#' works, so must be using some other reserved operators. Thanks!</p>",
        "id": 267379466,
        "sender_full_name": "vlado",
        "timestamp": 1641764943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"469758\">@vlado</span> Just FYI, there's also a lean4 stream here on Zulip.</p>",
        "id": 267404539,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1641801351
    }
]