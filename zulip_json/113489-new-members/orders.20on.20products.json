[
    {
        "content": "<p>I want definitions like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">prod_has_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span>            <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">prod_preorder</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_refl</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">le_trans</span>      <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">le_trans</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">prod_has_le</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">prod_partial_order</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">prod</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_antisymm</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span> <span class=\"n\">prod_preorder</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>(At the moment just for ℕ × ℕ, Cauchy sequences and contraction mapping theorem, but probably for more later on.)</p>\n<p>These don't seem already to be in mathlib, so should I assume there is some good reason to exclude them? And if so, can I use some namespace trick to define them 'locally'?</p>",
        "id": 151190056,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1544295997
    },
    {
        "content": "<p>I think <code>attribute local instance</code> works for something which is already defined.</p>",
        "id": 151190145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544296083
    },
    {
        "content": "<p>For example this is from TPIL:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">prop_decidable</span>\n</pre></div>\n\n\n<p>(after <code>prop_decidable</code> has been defined)</p>",
        "id": 151190211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544296186
    },
    {
        "content": "<p>\"However, such commands can often be prefixed with the local modifier, which indicates that they only have effect until the current section or namespace is closed, or until the end of the current file.\"</p>",
        "id": 151190359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544296328
    },
    {
        "content": "<p>Thanks, I'll do that then.</p>",
        "id": 151190458,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1544296463
    },
    {
        "content": "<p>It would not surprise me if there were a trick to do it all in one go. Does <code>local instance...</code> not work?</p>",
        "id": 151190659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544296747
    },
    {
        "content": "<p>Oh! Do you need to import <code>pi_instances</code> or something? Maybe they're there?</p>",
        "id": 151190672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544296784
    },
    {
        "content": "<p>Hmm possibly. I didn't know about pi_instances.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"n\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">2</span>\n<span class=\"n\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"k\">then</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">4</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span>\n</pre></div>",
        "id": 151194606,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1544302331
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pi_instances</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>I thought it might work out of the box. But no.</p>",
        "id": 151194675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544302490
    },
    {
        "content": "<p>Maybe the reason it's not an instance is that some people might want to use lex order in some cases</p>",
        "id": 151194686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544302548
    }
]