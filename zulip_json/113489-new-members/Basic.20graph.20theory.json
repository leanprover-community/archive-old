[
    {
        "content": "<p>So I learned a little bit of lean through the natural numbers game, and I thought I would try to prove some basic graph theory proofs. I'm trying to prove that twice the sum of the edges is equal to the sum of the degrees in a simple graph. So far I have defined a graph (I've also created a complete graph and shown that is a graph), but I got stuck on the sum_degrees theorem</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">E_irreflexive</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">E_symmetric</span> <span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_fun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">sum_fun</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">edges</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">sum_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sum_fun</span> <span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">check_edge</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"k\">then</span> <span class=\"n\">sum_fun</span> <span class=\"n\">check_edge</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_degrees</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum_fun</span> <span class=\"o\">(</span><span class=\"n\">degree</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Any advice on how to start this theorem?</p>",
        "id": 210310183,
        "sender_full_name": "modderme123",
        "timestamp": 1600285202
    },
    {
        "content": "<p>A way I've proved this is with a combinatorial proof.  You can introduce an intermediate object, a <em>dart</em>, which is an ordered pair of adjacent vertices.  A dart is <em>at</em> a vertex if the vertex is the first entry of the pair, and you can show that the number of darts at a vertex is equal to the degree of the vertex --- then since darts are partitioned into which vertices they're at, you have the number of darts is equal to the sum of degrees.  There is a two-to-one map that sends darts to their corresponding edges, so the number of darts is equal to twice the number of edges.</p>",
        "id": 210312018,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600286081
    },
    {
        "content": "<p>(Let me know if you want to be added to the private Zulip graph theory stream. There are a number of people working on formalizing graph theory in Lean.  Also, right now you can use the <code>combinatorics.simple_graph</code> library, which defines things like simple graphs and the degree of a vertex for a (locally) finite graph.  Your definition of a graph when <code>V = n</code> would be equivalent to <code>simple_graph (fin n)</code>.)</p>",
        "id": 210312316,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600286224
    },
    {
        "content": "<p>Looking more carefully at your definitions, it looks like <code>edges</code> is counting the number of darts.  Adding in a definition that counts the number of edges, too, you might be able to use this setup:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E_irreflexive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E_symmetric</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_fun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">sum_fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">edges</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sum_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"k\">in</span> <span class=\"n\">sum_fun</span> <span class=\"n\">sum</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span>\n\n<span class=\"n\">def</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">check_edge</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"k\">in</span> <span class=\"n\">sum_fun</span> <span class=\"n\">check_edge</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span>\n\n<span class=\"n\">def</span> <span class=\"n\">darts</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">sum</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">sum_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"k\">in</span> <span class=\"n\">sum_fun</span> <span class=\"n\">sum</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">darts_eq_twice_edges</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">darts</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">edges</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">darts_eq_sum_degrees</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">darts</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">sum_fun</span> <span class=\"o\">(</span><span class=\"n\">degree</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_degrees</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sum_fun</span> <span class=\"o\">(</span><span class=\"n\">degree</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">edges</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">darts_eq_sum_degrees</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">darts_eq_twice_edges</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210313984,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600286994
    },
    {
        "content": "<p>You'll have to prove a number of lemmas about <code>sum_fun</code> for transforming sums of indicator functions, I think.</p>",
        "id": 210314228,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600287119
    },
    {
        "content": "<p>To get you started, I proved <code>darts_eq_twice_edges</code> and added a number of lemmas for <code>sum_fun</code>.  This also shows off a nice feature of Lean, where you can introduce your own notation --- I adapted the summation notation from <code>algebra.big_operators</code> for your <code>sum_fun</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E_irreflexive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E_symmetric</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_fun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">sum_fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">∑</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">sum_fun</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"c1\">-- this means `∑ x to n, foo` denotes `sum_fun (λ x, foo) n`</span>\n<span class=\"c1\">-- the `∑` is entered using \\sum</span>\n\n<span class=\"n\">def</span> <span class=\"n\">edges</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">darts</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_to_zero_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_zero_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_to_zero_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_add_eq_add_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_if_true</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n_n</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_if_false</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n_n</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_delta</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">linarith</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">n_n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">n_n</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">sum_if_false</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">intro</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">hlt</span> <span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_asymm</span> <span class=\"n\">hlt</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h&#39;</span><span class=\"o\">],</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h_a</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_fun_restrict&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_if_true</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">m_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_fun_restrict</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_fun_restrict&#39;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_congr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">n_ih</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_add_one</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">swap_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sum_add_eq_add_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">darts_eq_twice_edges</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">darts</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">edges</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">darts</span><span class=\"o\">,</span> <span class=\"n\">edges</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">sum_fun_restrict</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_congr</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">yel</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">key&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sum_congr</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_congr</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">key&#39;</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">key</span> <span class=\"n\">key&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xel</span> <span class=\"n\">y</span> <span class=\"n\">yel</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E_symmetric</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">xel</span> <span class=\"n\">yel</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_asymm</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">le_iff_eq_or_lt</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h_1</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h_2</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">x</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">y</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E_irreflexive</span> <span class=\"bp\">_</span> <span class=\"n\">yel</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_asymm</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">contrapose</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E_symmetric</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">yel</span> <span class=\"n\">xel</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">key&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sum_congr</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"n\">x</span> <span class=\"n\">xel</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sum_add_eq_add_sum</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_congr</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">key&#39;</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">key</span> <span class=\"n\">key&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_add_eq_add_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">swap_sum</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">two_mul</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">darts_eq_sum_degrees</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">darts</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">degree</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_degrees</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">degree</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">edges</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">darts_eq_sum_degrees</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">darts_eq_twice_edges</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210328886,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600296003
    },
    {
        "content": "<p>I'm sure the proof can be simplified by quite a bit.  It's just suggesting that there aren't enough lemmas to manipulate <code>sum_fun</code> yet!</p>",
        "id": 210329015,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600296113
    },
    {
        "content": "<p>Oh, that's funny. I didn't realize that everything was set up to completely prove it!  It's just</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">darts_eq_sum_degrees</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">darts</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">degree</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 210329129,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600296233
    },
    {
        "content": "<p>Wow, this is awesome!</p>",
        "id": 210329328,
        "sender_full_name": "modderme123",
        "timestamp": 1600296411
    },
    {
        "content": "<p>Found a way to simplify it somewhat.  Using <code>apply sum_congr</code> makes it so Lean tells you what needs to be proved, rather you than needing to tell Lean the statement with <code>have</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E_irreflexive</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E_symmetric</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">sum_fun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">sum_fun</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">∑</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">sum_fun</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"c1\">-- this means `∑ x to n, foo` denotes `sum_fun (λ x, foo) n`</span>\n<span class=\"c1\">-- the `∑` is entered using \\sum</span>\n\n<span class=\"n\">def</span> <span class=\"n\">edges</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">def</span> <span class=\"n\">darts</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_to_zero_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_zero_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_to_zero_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_add_eq_add_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_if_true</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n_n</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_if_false</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">n_n</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">hlt</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_fun_restrict&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_if_true</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">m_ih</span><span class=\"o\">,</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_fun_restrict</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_fun_restrict&#39;</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_of_le</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_congr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">n_ih</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"n\">step</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_add_one</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">swap_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">y</span> <span class=\"n\">to</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">generalizing</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">sum_fun</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sum_add_eq_add_sum</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">indic_indic_eq_and</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">b</span><span class=\"o\">]:</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">darts_eq_twice_edges</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">darts</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">edges</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">darts</span><span class=\"o\">,</span> <span class=\"n\">edges</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">sum_fun_restrict</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sum_congr</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">swap_sum</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sum_add_eq_add_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sum_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sum_add_eq_add_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sum_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">yel</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E_symmetric</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">xel</span> <span class=\"n\">yel</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">cc</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_asymm</span> <span class=\"n\">h_1</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h_1</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h_2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E_irreflexive</span> <span class=\"bp\">_</span> <span class=\"n\">yel</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">contrapose</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">E_symmetric</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">yel</span> <span class=\"n\">xel</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h&#39;</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">darts_eq_sum_degrees</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">darts</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">degree</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">sum_degrees</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"n\">to</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">degree</span> <span class=\"n\">G</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">edges</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">darts_eq_sum_degrees</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">darts_eq_twice_edges</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 210331067,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600297840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I'd like to be added to the secret graph theory group. I'm a bit of a novice at lean still but that is (roughly) my focus.</p>",
        "id": 210350679,
        "sender_full_name": "toc",
        "timestamp": 1600322046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I would also like to be part of the graph theory stream</p>",
        "id": 210868631,
        "sender_full_name": "Anton Lorenzen",
        "timestamp": 1600780994
    },
    {
        "content": "<p>Done!</p>",
        "id": 210902270,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600794918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I would like to be added to the graph theory stream please!</p>",
        "id": 212914265,
        "sender_full_name": "Thomas Lehéricy",
        "timestamp": 1602333770
    },
    {
        "content": "<p>Welcome Thomas!</p>",
        "id": 212914919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602334942
    },
    {
        "content": "<p>Don't play too much with graphs, probability theory in mathlib needs you!</p>",
        "id": 212914938,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602334996
    },
    {
        "content": "<p>Thank you Patrick! <br>\nI know :) I have two goals for now, one is doing a bit of deterministic planar map theory (proving some bijection between different classes of maps), and the second is to try to prove Donsker's invariance principle. Both would be useful for random planar maps. It seemed the graph theory half was more accessible as a warm-up.</p>",
        "id": 212915454,
        "sender_full_name": "Thomas Lehéricy",
        "timestamp": 1602335625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"337939\">@Thomas Lehéricy</span> It appears you've been added! The stream has been rather quiet since the beginning of the semester, though.</p>\n<p>I'd like the theory of combinatorial maps in general, which generalizes planar maps to graphs on surfaces of arbitrary genus (you could say a combinatorial map is a multigraph with faces attached such that the result is a closed oriented surface, possibly disconnected).  I have a couple ways of encoding them, but I wanted to see how the simple graphs API would work out, to then inform the design of the multigraphs API, to then inform the design of the combinatorial maps API.  Plus, many results can be lifted from one to the next, so it seems to be a good order to do things.</p>\n<p>(Once all three exist, we can say we can state the 4-color theorem.  A finite simple graph is <em>planar</em> if it comes from a combinatorial map of genus 0.  The theorem is that every planar simple graph has a proper vertex 4-coloring.)</p>\n<p>Somewhere I have most of the formalization of Sperner's lemma with some early attempts at multigraphs and combinatorial maps, but to finish it it'd be nice to flesh them out more.</p>",
        "id": 212930995,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602357933
    },
    {
        "content": "<p>We've got quite the backlog of PRs at the moment, but is there a plan for the next few graph theory PRs yet?</p>",
        "id": 212931067,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602358055
    },
    {
        "content": "<p>I still don't understand why this stream is private.</p>",
        "id": 212931072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602358078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I'm not sure.  <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, any reason to keep it private anymore?</p>",
        "id": 212931380,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602358484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Not immediately from me... Teaching and postdoc applications have taken priority...  There is a quasi-plan for PRs in a post on the <a class=\"stream\" data-stream-id=\"252551\" href=\"/#narrow/stream/252551-graph-theory\">#graph theory</a> stream though.</p>",
        "id": 212931464,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602358609
    },
    {
        "content": "<p>I think there was some value to it being private in the past and now it's clearly better as a public stream. I've made the change.</p>",
        "id": 212931711,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1602359033
    },
    {
        "content": "<p>I've also been planning on writing up at least a blog post on the different ways of dealing with subgraphs-as-graphs so that they can be more easily evaluated.  I've swapped out different designs on the <code>simple_graphs2</code> branch a few times, and it's always been relatively painless, so that at least indicates that we won't be locked into a design if a better one comes up.</p>",
        "id": 212931757,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602359085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/252551-graph-theory/topic/simple_graphs2/near/210826149\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/252551-graph-theory/topic/simple_graphs2/near/210822743\">said</a>:</p>\n<blockquote>\n<p>What do you think the next PR from this branch should be?</p>\n</blockquote>\n<p>Most of <code>simple_graph/basic.lean</code> seems good, except for the incomplete stuff about graph operations.  Some simp lemmas relating <code>simple_graph_on</code> to <code>simple_graph</code> might not make sense.  Also <code>simple_graph_from_rel_adj</code> can probably wait.</p>\n<p>The definitions in <code>simple_graph/hom.lean</code> seem fine, but the lemmas should be reviewed since the api is underutilized and seems somewhat incomplete.</p>\n<p><code>simple_graph/subgraph.lean</code> seems good, except for things about cycles and maybe induced graphs.  Cardinality results should be reviewed -- there's no application of them yet so the design might not be good.</p>\n<p><code>simple_graph/simple_graph_on.lean</code> is fine enough. It could certainly be expanded, but it at least has a <code>bounded_lattice</code> instance.</p>\n<p><code>simple_graph/degree_sum.lean</code> is close, but I think it can still be simplified a lot given a person sufficiently competent with <code>big_operators</code>.  It also would be nice to have an explicit handshake lemma.</p>\n</blockquote>\n<p>I think this is the quasiplan that kyle referred to</p>",
        "id": 212931775,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1602359121
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20graph.20theory/near/212931711\">said</a>:</p>\n<blockquote>\n<p>I think there was some value to it being private in the past and now it's clearly better as a public stream. I've made the change.</p>\n</blockquote>\n<p>Are you sure you changed it?</p>",
        "id": 212931876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602359284
    },
    {
        "content": "<p>I no longer see a \"lock\" icon next to the stream: <a href=\"#narrow/stream/252551-graph-theory\">https://leanprover.zulipchat.com/#narrow/stream/252551-graph-theory</a></p>",
        "id": 212932031,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602359609
    },
    {
        "content": "<p>When I click your link, Zulip says \"This stream does not exist or is private.\"</p>",
        "id": 212932036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602359640
    },
    {
        "content": "<p>It says \"public stream\" in the stream settings for me</p>",
        "id": 212932080,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602359673
    },
    {
        "content": "<p>Strange: <a href=\"/user_uploads/3121/PJhBnwt-GsOHKY44C1FH_7sn/Screen-Shot-2020-10-10-at-3.54.36-PM.png\">Screen-Shot-2020-10-10-at-3.54.36-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PJhBnwt-GsOHKY44C1FH_7sn/Screen-Shot-2020-10-10-at-3.54.36-PM.png\" title=\"Screen-Shot-2020-10-10-at-3.54.36-PM.png\"><img src=\"/user_uploads/3121/PJhBnwt-GsOHKY44C1FH_7sn/Screen-Shot-2020-10-10-at-3.54.36-PM.png\"></a></div>",
        "id": 212932083,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602359688
    },
    {
        "content": "<p>Weird.</p>",
        "id": 212932097,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602359722
    },
    {
        "content": "<p>I force reloaded the page and it works now!</p>",
        "id": 212932100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1602359731
    },
    {
        "content": "<p>A caveat about that plan: the graph operations of contraction/deletion of graphs are not formalized correctly to be useful for anything to do with studying graph minors yet.  There's a way to encode the type of all contractions and deletions with some nice properties, but it will take some development before it's ready.  (Here's the idea for matroids, where it's simpler: the type consists of a pair of subsets C and F of the ground set, where C is a subset of F.  Then the way in which it is a matroid is you restrict to F and then contract by C.  It seems to let you easily state relationships between contractions, deletions, and duals using equality.  Graphs are somewhat more complicated because, for example, isolated vertices matter.)</p>",
        "id": 212932169,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602359825
    },
    {
        "content": "<p>I'd love to see a few matroid PRs as well. I got stuck on contractions and deletions in <a href=\"https://github.com/bryangingechen/lean-matroids\">my old matroids repo</a> and never had a chance to go back and figure them out.</p>",
        "id": 212932309,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602360108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> and Edward Lee (who doesn't seem to be on Zulip) are still working on them</p>",
        "id": 212932431,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602360277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20graph.20theory/near/212930995\">said</a>:</p>\n<blockquote>\n<p>A finite simple graph is <em>planar</em> if it comes from a combinatorial map of genus 0.</p>\n</blockquote>\n<p>Surely it's planar if it can be drawn in the plane without edges crossing (and likewise for embeddings in surfaces of other genus); that should be easy to state right now, and reflects what I'd think of as the common understanding of what it means for a graph to be planar. You might then need the Jordan curve theorem or related results to prove that being planar is equivalent to characterisations that are more convenient to work with combinatorially, however.</p>",
        "id": 212938730,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1602370811
    },
    {
        "content": "<p>I believe that when Gonthier proved the four colour theorem in Coq he reduced everything to the setting where all paths were contained in the union of the lines x=integer and y=integer on the plane and all areas were unions of squares.</p>",
        "id": 212939085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602371430
    },
    {
        "content": "<p>I knew someone would object to this characterization of planar graphs <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. 2D topology is very well behaved.  Topological, smooth, and PL topology are basically equivalent, so, up to homeomorphism, you can just write down the cell structure, which is what the combinatorial map is.  I'm pretty sure it's easier to state everything in terms of the combinatorial data of the cell structure (it can be given as two permutations on the same set, one a fixedpoint-free involution), and the genus is easy to calculate for it.   Someone can then prove the correspondence between this notion of planarity and the topological one later -- I'm not sure you really gain anything by worrying about topological planarity of a graph for the 4-color theorem.</p>",
        "id": 212939289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602371800
    },
    {
        "content": "<p>Cf. the discussions of how it shouldn't really matter which of several different equivalent properties is considered to be \"the\" definition, but formalisation forces you to pick just one (and then proving that they are all equivalent becomes part of filling out the API and justifying that your definition defines the same thing as someone else's concept of \"the\" definition).</p>",
        "id": 212939628,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1602372468
    },
    {
        "content": "<p>Hello! I just finished the natural number game (again! things have changed a lot over the past year I guess). <br>\nI'm looking for resources/tutorials that are relevant to basic graph theory. I see that <a class=\"stream\" data-stream-id=\"252551\" href=\"/#narrow/stream/252551-graph-theory\">#graph theory</a> stream exists so I'm following it, but are there resources like the natural number game that can help me get my hands dirty? thanks!</p>",
        "id": 216824926,
        "sender_full_name": "Haden Hooyeon Lee",
        "timestamp": 1605490021
    },
    {
        "content": "<p>We don't have anything like the NNG for graph theory... the NNG is pretty unique in this regard</p>",
        "id": 216837830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605509917
    },
    {
        "content": "<p>graph theory is a pretty tricky subject for formalisation, because there are 37 different variations on the definition of a graph.</p>",
        "id": 216837855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605509950
    },
    {
        "content": "<p>Hi! I am interested in Lean, but havent really used it, just want to understand the structures and progress atm. I am interested to see some simple graph theory in Lean mathlib. I was refered to this:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/tree/hedetniemi/src\">https://github.com/leanprover-community/mathlib/tree/hedetniemi/src</a></p>\n<p>This branch is not included in the main repo, is it? Is there a reason for that? It seems the graph theory project in the link above hasnt been used for hte last 9months. Any plans of implementing this into the main library? Thanks!</p>",
        "id": 221484875,
        "sender_full_name": "Mario Krenn",
        "timestamp": 1609729021
    },
    {
        "content": "<p>There is a secret graph theory stream, I think. If you join that then you might get a clearer idea of what's going on.</p>",
        "id": 221485634,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1609730170
    },
    {
        "content": "<p>Oh super interesting. How could i join?</p>",
        "id": 221486087,
        "sender_full_name": "Mario Krenn",
        "timestamp": 1609730947
    },
    {
        "content": "<p>it's not really secret anymore</p>",
        "id": 221486167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609731039
    },
    {
        "content": "<p>you can find it in the zulip stream list</p>",
        "id": 221486177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609731054
    },
    {
        "content": "<p><a class=\"stream\" data-stream-id=\"252551\" href=\"/#narrow/stream/252551-graph-theory\">#graph theory</a></p>",
        "id": 221486182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609731061
    },
    {
        "content": "<p>great thanks! will observe a bit and hope this gives an interesting entry point :)</p>",
        "id": 221486371,
        "sender_full_name": "Mario Krenn",
        "timestamp": 1609731308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297962\">@Mario Krenn</span> the basic stuff from the <code>hedetniemi</code> branch is now in mathlib. But not the stuff in the direction of Hedetniemi itself. We got stuck in some stuff about random graphs. And then I got side-tracked by tons of other stuff. I'm not actually working with graphs myself, but if someone who actually knows something about random graphs would take that on, I think it would be a lot of fun.</p>",
        "id": 221491599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609739572
    },
    {
        "content": "<p>I dont know much about random graphs. But i would take a certain, simple proof in graph theory (about a property of perfect matchings) as motivation to learn using Lean. The simple property is used in quantum physics, which is my field of research, so when spending time on Lean i still can cheat myself that i work on my research :) I will come back here for sure with questions as soon as i managed the most basic examples. Thanks!</p>",
        "id": 221501625,
        "sender_full_name": "Mario Krenn",
        "timestamp": 1609750950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297962\">@Mario Krenn</span> cool, you should certainly talk with the people in the graph theory stream (-;</p>",
        "id": 221528379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609770309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20graph.20theory/near/221491599\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"297962\">Mario Krenn</span> the basic stuff from the <code>hedetniemi</code> branch is now in mathlib. But not the stuff in the direction of Hedetniemi itself. We got stuck in some stuff about random graphs. And then I got side-tracked by tons of other stuff. I'm not actually working with graphs myself, but if someone who actually knows something about random graphs would take that on, I think it would be a lot of fun.</p>\n</blockquote>\n<p>Since I had recent success with probability in combinatorics with the ballot problem and past success in using random graphs to show lower Ramsey bounds, I'm working on showing that there are graphs with arbitrarily high girth and chromatic number (which I think was the missing bit in Hedetniemi?) together with <span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span></p>",
        "id": 221529288,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1609770719
    },
    {
        "content": "<p>That's cool news!</p>",
        "id": 221529483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609770815
    },
    {
        "content": "<p>That was indeed the main missing bit.</p>",
        "id": 221529496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609770820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"297962\">Mario Krenn</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20graph.20theory/near/221501625\">said</a>:</p>\n<blockquote>\n<p>I dont know much about random graphs. But i would take a certain, simple proof in graph theory (about a property of perfect matchings) as motivation to learn using Lean. The simple property is used in quantum physics, which is my field of research, so when spending time on Lean i still can cheat myself that i work on my research :) I will come back here for sure with questions as soon as i managed the most basic examples. Thanks!</p>\n</blockquote>\n<p>Perfect matchings for simple graphs recently were added to mathlib <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.matching.is_perfect\">docs#simple_graph.matching.is_perfect</a> (there are some branches that have some more code that should get PRd sometime soon).  What about perfect matchings are you interested in formalizing?  Feel free to answer this in a new topic over at <a class=\"stream\" data-stream-id=\"252551\" href=\"/#narrow/stream/252551-graph-theory\">#graph theory</a>!</p>",
        "id": 221578166,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1609793113
    },
    {
        "content": "<p>Has there been any progress on subgraphs? I'd find it useful for some code I'm writing, and am happy to help with the PR, but not sure what the possible approaches are and the advantages/disadvantages</p>",
        "id": 231971617,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616768180
    },
    {
        "content": "<p>Maybe we can use the new <code>set_like</code> to define them</p>",
        "id": 231972924,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616768720
    },
    {
        "content": "<p>And give <code>set_like</code> some additional power about <code>closure</code></p>",
        "id": 231973068,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1616768763
    },
    {
        "content": "<p>is <a href=\"https://github.com/leanprover-community/mathlib/blob/2bef33c0e7ea7b4adb3a340adc00eed86f992fc3/src/data/set_like.lean\">this</a> what you're on about?</p>",
        "id": 231974074,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616769126
    },
    {
        "content": "<p>wait I can say <a href=\"https://github.com/leanprover-community/mathlib/issues/6768\">#6768</a> and that links it I think</p>",
        "id": 231974147,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616769155
    },
    {
        "content": "<p>that seems really useful if it works though, sub objects have been more annoying than expected the few times that I've used them</p>",
        "id": 231974345,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616769232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> what kind of subgraphs do you have in mind? <code>set_like</code> should be good for induced subgraphs</p>",
        "id": 231975228,
        "sender_full_name": "David Wärn",
        "timestamp": 1616769482
    },
    {
        "content": "<p>I wanted the general-case (I'm studying a graph parameter that is monotonic on subgraphs) but it's no big deal regardless; there was one comment a while ago:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Basic.20graph.20theory/near/212931757\">said</a>:</p>\n<blockquote>\n<p>I've also been planning on writing up at least a blog post on the different ways of dealing with subgraphs-as-graphs so that they can be more easily evaluated.  I've swapped out different designs on the <code>simple_graphs2</code> branch a few times, and it's always been relatively painless, so that at least indicates that we won't be locked into a design if a better one comes up.</p>\n</blockquote>\n<p>that mentioned there was issues with different approaches so wanted to see what they were before getting stuck in writing code</p>",
        "id": 231977719,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1616770315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> -- <span class=\"user-mention\" data-user-id=\"329425\">@Peter Nelson</span> has been working with matroids, including submatroids, contraction, deletion, etc, using the following definition:<br>\n<a href=\"https://github.com/e45lee/lean-matroids/blob/master/src/matroid/submatroid/matroid_in.lean#L18\">https://github.com/e45lee/lean-matroids/blob/master/src/matroid/submatroid/matroid_in.lean#L18</a><br>\nMaybe he can comment on whether this would be a good choice for graphs.</p>",
        "id": 232050958,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1616806600
    }
]