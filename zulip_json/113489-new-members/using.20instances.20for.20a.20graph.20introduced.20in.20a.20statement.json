[
    {
        "content": "<p>Hello,</p>\n<p>I am trying to formalize a statement in Lean from graph theory that has this form: for any natural N, there exists a natural M such that for any graph G a certain property holds. This property depends on N, M, and G. I omit what this property is because it is not relevant to the current issue that I am having. What is important is the order of the quantifiers: M can depend only on N, but not on the graph G.</p>\n<p>The graph must be finite. I consider only finite graphs.</p>\n<p>I have code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">combinatorics.simple_graph.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.sym.sym2</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.basic</span>\n\n\n<span class=\"kd\">universe</span> <span class=\"n\">un</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">some_definitions</span>\n\n  <span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">un</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">]</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">some_property</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">G.max_degree</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">M</span>  <span class=\"c1\">--this is a fake definition here much simpler than the actual one because the actual property is not relevant to the current issue</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">some_definitions</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">:</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">un</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">],</span>  <span class=\"c1\">--for any graph</span>\n  <span class=\"n\">some_property</span> <span class=\"n\">V</span> <span class=\"n\">G</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This does not compile and gives me these 2 errors on the line \"some_property V G N M\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">un</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span>\n\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">N</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">un</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span>\n</code></pre></div>\n<p>I don't know how to pass the instances for <code>fintype V</code> and <code>decidable_rel G.adj</code> to <code>some_property</code>. I tried naming them and passing them explicitly, but it still does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">:</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">un</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">V_fintype</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">G_adj_decidable</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">],</span>  <span class=\"c1\">--for any graph</span>\n  <span class=\"n\">some_property</span> <span class=\"n\">V</span> <span class=\"n\">V_fintype</span> <span class=\"n\">G</span> <span class=\"n\">G_adj_decidable</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I also tried treating them as assumptions in the implications, but this also does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">:</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">un</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">),</span>  <span class=\"c1\">--for any graph</span>\n  <span class=\"n\">fintype</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">some_property</span> <span class=\"n\">V</span> <span class=\"n\">G</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The fact that <code>V</code> is finite and <code>G.adj</code> is decidable should be assumptions in the \"for any graph\" part, but I don't know how to specify that. Effectively, the statement should be this: \"for any natural N, there exists a natural M such that for any <code>V</code> that is finite and any graph <code>G</code> on <code>V</code> such that <code>G.adj</code> is decidable, <code>some_property</code> holds\". How to formalize this?</p>\n<p>The only way I was able to use <code>fintype V</code> and <code>decidable_rel G.adj</code> is when <code>V</code> and <code>G</code> are declared as variables such as in the definition of <code>some_property</code>, but it seems that I can't use this approach in the statement of <code>some_theorem</code> because this would give me the wrong order of the quantifiers:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">some_results</span>\n\n  <span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">un</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">]</span>\n\n  <span class=\"c1\">--this does compile, but it seems that it has the wrong order of the quantifiers</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">some_theorem_incorrect</span> <span class=\"o\">:</span>\n    <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n    <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n    <span class=\"n\">some_property</span> <span class=\"n\">V</span> <span class=\"n\">G</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n    <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">some_results</span>\n</code></pre></div>\n<p>So, my second question: can you please confirm my understanding that the statement of <code>some_theorem_incorrect</code> effectively means this: \"for any <code>V</code> that is finite and any graph <code>G</code> on <code>V</code> such that <code>G.adj</code> is decidable, and for any natural <code>N</code>, there exists a natural <code>M</code> such that <code>some_property</code> holds\"? So, in this statement, <code>M</code> can depend on the graph <code>G</code>, right?</p>",
        "id": 299491066,
        "sender_full_name": "Mikhail Makarov",
        "timestamp": 1663553117
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">some_theorem</span> <span class=\"o\">:</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"n\">exists</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span>\n  <span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">un</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">],</span>\n  <span class=\"bp\">@</span><span class=\"n\">some_property</span> <span class=\"n\">V</span> <span class=\"n\">hV</span> <span class=\"n\">G</span> <span class=\"n\">hG</span> <span class=\"n\">N</span> <span class=\"n\">M</span>\n  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 299493804,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1663555877
    },
    {
        "content": "<p>Ok, so in this case it compiles, but in my real more complex case, I still get an error when I use \"@\" before the property name and pass the instances explicitly. Here is the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">⁇</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">V_fintype</span>\n</code></pre></div>\n<p>I will try to create a minimal reproducible example.</p>",
        "id": 299503044,
        "sender_full_name": "Mikhail Makarov",
        "timestamp": 1663565236
    },
    {
        "content": "<p>But in the meantime, can you explain why it didn't work with <code>some_property V G N M</code>? Why can't Lean automatically detect the instances from the assumptions like it does from declared variables?</p>",
        "id": 299503332,
        "sender_full_name": "Mikhail Makarov",
        "timestamp": 1663565491
    },
    {
        "content": "<p>Searching zulip for <code>by exactI</code> will find many other threads about this gotcha</p>",
        "id": 299514765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663572428
    }
]