[
    {
        "content": "<p>Dear All,</p>\n<p>this is more of a \"standard practice\" question.</p>\n<p>When proving a lemma, I use <code>apply (x → y)</code> whenever <code>y</code> is the <em>goal</em> that I want to prove.  Suppose that I have <code>x</code> as a hypothesis (but no <code>y</code> in the goal).  Suppose also that I am happy to lose the extra power that comes from having <code>x</code>, since my proof is going through <code>y</code>.  Is there a tactic that \"applies <code>(x → y)</code>\" to the <em>hypothesis</em> <code>x</code> and leaves hypothesis <code>y</code> instead?  So far, I have been doing this either with a clumsy <code>have : y := apply (x → y) x</code>, or by withholding the urge to do anything until I want to use <code>y</code>, at which point I write <code> (x → y) x</code> instead.</p>\n<p>As I said, what I know does the job, but I sometimes would rather have the more focused hypotheses, instead of the more general ones.</p>\n<p>Sorry if this is kind of vague: I can come up with an explicit example, if you want.</p>",
        "id": 219830962,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607947160
    },
    {
        "content": "<p>I am a bit confused about what are the types and what are the terms. <code>x -&gt; y</code> is the type of functions from x to y, not a function from x to y.</p>",
        "id": 219831114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607947249
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- nuke h</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- nuke hP</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hP</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219831282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1607947336
    },
    {
        "content": "<p>Sorry, I posted the question without realizing that I had a meeting about to start!</p>\n<p>In any case, I did not know either of the two tactics <code>specialize</code> or <code>replace</code> and they are both useful!  <code>replace</code> is the answer to the question that I had in mind, however I am glad that I learned also <code>specialize</code>!</p>",
        "id": 219838204,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607951225
    }
]