[
    {
        "content": "<p>Try as I might, I cannot complete this proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">surjective</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">b.val</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">int.cast_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.eq_int_cast</span><span class=\"o\">],</span>\n<span class=\"c1\">-- n: ℕ</span>\n<span class=\"c1\">-- b: zmod n</span>\n<span class=\"c1\">-- ⊢ ↑(b.val) = b</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How should I proceed?</p>",
        "id": 221430484,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609643231
    },
    {
        "content": "<p>Does <code>ext</code> help?</p>",
        "id": 221430633,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609643538
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 221430638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609643577
    },
    {
        "content": "<p>No, zmod doesn't have <code>ext</code>. I guess what I'm really trying to do is identify <code>zmod n</code> with quotients of <code>ℤ</code>, but there seems to be no API for this.</p>",
        "id": 221430837,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609643955
    },
    {
        "content": "<p>Maybe there is some sledgehammer to do this that I haven't found yet?</p>",
        "id": 221430908,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609644035
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 221431077,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609644372
    },
    {
        "content": "<p>Its a bit weird because <code>zmod n</code> is defined quite differently for <code>n=0</code> and <code>n &gt; 0</code>, for <code>n = 0</code> zmod n is just Z and for n positive it is <code>fin n</code> so sometimes you need to do cases on <code>n</code> for the proof to work.</p>",
        "id": 221431092,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609644422
    },
    {
        "content": "<p>I'd say the lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zmod.coe_coe_eq_self</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>should be added to mathlib</p>",
        "id": 221431150,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609644541
    },
    {
        "content": "<p>Maybe more useful is for me to describe my process for finding the proof:<br>\nFirst I had, <code>intro x</code> and then <code>use x.val</code> like you did. Then I tried <code>simp</code> and the goal was <code>↑(x.val) = x</code> so I tried the tactic <code>norm_cast</code> as there were up arrows in the goal, but it didn't help, so I thought maybe using <code>val</code> was not the right format for cast to work, so switched it to <code>use x</code> so that lean would insert a cast itself, so the goal after simp was then, <code>↑↑x = x</code> so I tried library search, nothing happened so I searched mathlib for the string <code>coe_coe</code> and found a bunch of things including <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.coe_coe_eq_self\">docs#fin.coe_coe_eq_self</a> which seemed very useful. And so I thought that this lemma would work, as <code>zmod</code> is basically the same as <code>fin</code>, so I looked up the definition of <code>zmod</code> in mathlib  and saw it split into two cases, so at that point I knew if I did cases on <code>n</code> then <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.coe_coe_eq_self\">docs#fin.coe_coe_eq_self</a>  should apply to one case, and the other case might also be doable with simp.</p>",
        "id": 221431427,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609645066
    },
    {
        "content": "<p>I see. Thanks for the explanation.</p>",
        "id": 221431551,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609645262
    },
    {
        "content": "<p>Seeing your lemma, I tried to also do <code>lemma zmod.coe_nat_coe_eq_self {n : ℕ} (a : zmod n) : ((a.val : ℕ) : zmod n) = a := by sorry</code>, but this somehow does work?</p>",
        "id": 221431609,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609645377
    },
    {
        "content": "<p>I think it's because <code>Z</code> is a ring, which might play better with <code>zmod</code>. This lemma doesn't really matter... but it would be nice to try to understand what's happening here.</p>",
        "id": 221431796,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1609645722
    },
    {
        "content": "<p>This is a good exercise! But if you want to use it for something else, I suggest simply using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.int_cast_surjective\">docs#zmod.int_cast_surjective</a></p>",
        "id": 221431870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609645921
    },
    {
        "content": "<p>The API for this stuff is somewhat extensive. You can find it in <code>data.zmod.basic</code></p>",
        "id": 221431968,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609646065
    },
    {
        "content": "<p>I think the documentation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.cast\">docs#zmod.cast</a> is wrong in that it says you can cast to a semiring, but actually you need somewhere for <code>-1</code> in <code>zmod 0</code> to go with the current definition.</p>",
        "id": 221431969,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1609646083
    },
    {
        "content": "<p>Should we make a <code>natmod n</code> :)</p>",
        "id": 221432029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609646177
    }
]