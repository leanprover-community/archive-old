[
    {
        "content": "<p>Question 4.2: I'm getting a type mismatch errors on all the example in ch4 exercise 2, first on the iff.intro, then on the or.elim, then on the iff.intro. Any insights would be appreciated!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"k\">show</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>  <span class=\"n\">hr</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hpx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"n\">r</span> <span class=\"n\">hpx</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"bp\">_</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n    <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">h2</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hVxpx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">hVxpx</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">intro_right</span> <span class=\"bp\">_</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">intro</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n   <span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n   <span class=\"o\">((</span><span class=\"n\">h1</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">assume</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"o\">((</span><span class=\"n\">h2</span> <span class=\"n\">hr</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 190099442,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583777285
    },
    {
        "content": "<p>Is this your real code? <code>p</code> is not declared anywhere</p>",
        "id": 190099795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583777511
    },
    {
        "content": "<p>also, <code>(assume hr : hr)</code> is clearly wrong</p>",
        "id": 190099815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583777521
    },
    {
        "content": "<p>For the first one, you need to write <code>assume hr a, hr</code> instead of <code>assume hr: hr</code></p>",
        "id": 190099883,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583777538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/190099795\" title=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/190099795\">said</a>:</p>\n<blockquote>\n<p>Is this your real code? <code>p</code> is not declared anywhere</p>\n</blockquote>\n<p>Sorry! P was defined at the top of my file and I forgot to include it when I copied it over.</p>",
        "id": 190100008,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583777616
    },
    {
        "content": "<p>The pattern for <code>assume</code> is <code>assume x : α, b</code> where <code>x</code> is an identifier, <code>α</code> is a type or proposition and <code>b</code> is a term or proof. But you can skip the type and you can chain multiple identifiers.</p>",
        "id": 190100050,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583777640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121918\">Edward Ayers</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/190099883\" title=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/190099883\">said</a>:</p>\n<blockquote>\n<p>For the first one, you need to write <code>assume hr a, hr</code> instead of <code>assume hr: hr</code></p>\n</blockquote>\n<p>Just made that correction, thank you! It's still giving me a type mismatch error on iff.intro though.</p>",
        "id": 190100302,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583777773
    },
    {
        "content": "<p>On the next example, take a look at the error:</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  or.elim h2 (λ (hVxpx : ∀ (x : α), p x), or.intro_left ?m_1[hVxpx] (hVxpx a))\nterm\n  λ (hVxpx : ∀ (x : α), p x), or.intro_left ?m_1[hVxpx] (hVxpx a)\nhas type\n  ∀ (hVxpx : ∀ (x : α), p x), p a ∨ ?m_1[hVxpx]\nbut is expected to have type\n  (∀ (x : α), p x) → ∀ (x : α), p x ∨ r\n</pre></div>",
        "id": 190100318,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583777780
    },
    {
        "content": "<p>Try commenting out the code that is complaining and replacing it with an underscore <code>_</code> and then seeing what type Lean wants you to replace the underscore with</p>",
        "id": 190100821,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583778055
    },
    {
        "content": "<p>In the case of the second exercise, you might want to comment out the entire proof and replace with an underscore and then slowly add lines back in.</p>",
        "id": 190100862,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583778092
    },
    {
        "content": "<p>Because eg there is a rogue <code>assume a : α,</code> at the top</p>",
        "id": 190100877,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583778116
    },
    {
        "content": "<p>Ok I was able to get 1 and 3 working. I realize now that I misunderstood the way that \"assume\" statements interact with universal quantifiers. I still can't figure out how to get the 'left to right' direction of 2. If I assume a specific element in the assumption to be able to or.elim, then I've lost the generality to exact on all elements in alpha on the right hand side. I feel like I'm missing something.</p>",
        "id": 190108141,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1583782168
    },
    {
        "content": "<p>I think that <code>(∀ x, p x ∨ r) -&gt; (∀ x, p x) ∨ r</code> needs to be done by contradiction.</p>",
        "id": 190113789,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1583785384
    },
    {
        "content": "<p>There is nothing much you can try with intuitionistic logic here. The assumption cannot be broken and the only allowed moves are <code>left</code> and <code>right</code>.</p>",
        "id": 190114515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583785809
    },
    {
        "content": "<p>I'm skimming through this chapter to see what seems allowed, and I'm always puzzled by this \"French quotation mark\" terminology. In English, do you say ' is a quotation mark? Do you ever use it alone?</p>",
        "id": 190115353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786380
    },
    {
        "content": "<p>the problem mentions that one of the directions requires classical reasoning</p>",
        "id": 190115451,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1583786433
    },
    {
        "content": "<p>Anyway, I guess this exercise is rather difficult in term mode, since it seems you are not allowed to use the lemmas describing the negation of quantifiers.</p>",
        "id": 190115455,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786437
    },
    {
        "content": "<p>Classical reasoning yes, but why half quotation marks?</p>",
        "id": 190115493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786460
    },
    {
        "content": "<p>I think I'd be happy calling a quotation mark a quotation mark. Does TPIL refer to one French quotation mark? I'm a bit confused about whether you're talking about ' vs \" or \" vs \"\"</p>",
        "id": 190115884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583786761
    },
    {
        "content": "<p>apostrophe or single quote</p>",
        "id": 190115921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583786763
    },
    {
        "content": "<p>They are sometimes used to quote inside quotations</p>",
        "id": 190115967,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583786803
    },
    {
        "content": "<p>TPIL says ‹ is a French quotation mark, but this symbol appears nowhere in France.  We do use  « as an opening quotation mark.</p>",
        "id": 190116004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786843
    },
    {
        "content": "<p>Single quotes are sometimes just normal quotes in the UK, right?</p>",
        "id": 190116042,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583786871
    },
    {
        "content": "<blockquote>\n<p>They are sometimes used to quote inside quotations</p>\n</blockquote>\n<p>I'm so disappointed, I thought python invented this wonderful trick.</p>",
        "id": 190116051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583786877
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Quotation_mark#History\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Quotation_mark#History\">Wiki says:</a></p>\n<blockquote>\n<p>The single quotation marks emerged around 1800 as a means of indicating a secondary level of quotation. One could expect that the logic of using the corresponding single mark would be applied everywhere, but it was not. In some languages using the angular quotation marks, the usage of single ones (‹…›) became obsolete, being replaced by double curved ones (“…”); the single ones still survive, for instance, in Switzerland.</p>\n</blockquote>",
        "id": 190116296,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583787036
    },
    {
        "content": "<p>Maybe we should call them Swiss quotes instead.</p>",
        "id": 190116310,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583787044
    },
    {
        "content": "<p>This would be less confusing, especially since French quotation marks are also used in Lean.</p>",
        "id": 190116373,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583787092
    },
    {
        "content": "<p>Given that angle quotation marks are paired, I don't see why there needs to be two different flavors anyway. Nesting FTW</p>",
        "id": 190135690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583804442
    },
    {
        "content": "<p>in Hong Kong written Chinese we use 「」 for the outer quote and 『』 for the inner quote</p>",
        "id": 190135839,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1583804710
    },
    {
        "content": "<p>(in mainland China they use '' and \"\")</p>",
        "id": 190135845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1583804726
    },
    {
        "content": "<p>「」looks like the \"round towards 0\" operation (ceiling if negative, floor if positive)</p>",
        "id": 190136645,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583806051
    },
    {
        "content": "<p>I'm getting an error message when I try to use <code>exp_log_eq</code> in term mode below for Chapter 6 Exercise 6.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">--6. Give a calculational proof of the theorem log_mul below.</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">real</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">real</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">exp</span> <span class=\"o\">:</span> <span class=\"n\">real</span> <span class=\"bp\">→</span> <span class=\"n\">real</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">log_exp_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">exp_log_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">exp_pos</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"kn\">variable</span>  <span class=\"n\">exp_add</span>    <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- this ensures the assumptions are available in tactic proofs</span>\n<span class=\"n\">include</span> <span class=\"n\">log_exp_eq</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">exp_pos</span> <span class=\"n\">exp_add</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exp_add</span><span class=\"o\">,</span> <span class=\"n\">exp_add</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">log_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>\n  <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">refl</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">exp_log_eq</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"c1\">--??????????</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">(</span><span class=\"n\">exp_log_eq</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"c1\">--??????????</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">exp</span><span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">exp_add</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">log_exp_eq</span>\n</pre></div>\n\n\n<p>I got it to work in tactic mode, but I want to understand what I'm doing wrong. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">log_mul</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">log</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">log</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:=</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">-</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">exp_log_eq</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">exp_add</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">log_exp_eq</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 190631151,
        "sender_full_name": "Rocky Kamen-Rubio",
        "timestamp": 1584250405
    },
    {
        "content": "<p><code>by rw exp_log_eq hx</code></p>",
        "id": 190631207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584250520
    },
    {
        "content": "<p><code>by exp_log_eq hx</code> doesn't work because <code>exp_log_eq</code> is not a tactic</p>",
        "id": 190631211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584250538
    },
    {
        "content": "<p>remember that <code>by tac</code> is shorthand for <code>begin tac, end</code></p>",
        "id": 190631255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584250576
    },
    {
        "content": "<p>For Russel's Paradox (Exercise 4.3) I came up with the following solution </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Russel's_Paradox</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">men</span><span class=\"o\">,</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">shaves</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"o\">:=</span>\n  <span class=\"n\">or.cases_on</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">a</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">shaves</span> <span class=\"n\">barber</span> <span class=\"n\">barber</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"o\">((</span><span class=\"n\">h</span> <span class=\"n\">barber</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>\n<p>I was wondering if anyone knew if there was a whether there was a constructive solution to this. If so, I would love a hint, but if not, how do you know??</p>",
        "id": 252377860,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631052106
    },
    {
        "content": "<p>Can you make your spoiler into a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 252379772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631053264
    },
    {
        "content": "<p>If I guessed correctly the question you're asking, the answer is that there is a constructive solution and the hint is that it boils down to exactly the same \"how do I do this constructively\" question which gets asked on this site time and time again :-) (namely <code>¬ (P ↔ ¬ P)</code>)</p>",
        "id": 252380104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631053498
    },
    {
        "content": "<p>It's the special case Q = false of <a href=\"https://twitter.com/XenaProject/status/1433904823947177988?s=20\">https://twitter.com/XenaProject/status/1433904823947177988?s=20</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/XenaProject/status/1433904823947177988?s=20\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/9686557e167ea0d81d62930b9cefbd210a469b3c/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313236333831303239373536303733353734342f674d69616e515f565f6e6f726d616c2e6a7067\"></a><p>Is `(P → P → Q) → ((P → Q) → P) → Q` provable constructively? [I should say that I know the answer]. Classically you just check all four cases P,Q in {T,F} and you're done, but constructively this isn't allowed.</p><span>- The Xena Project (@XenaProject)</span></div></div>",
        "id": 252380325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631053661
    },
    {
        "content": "<p>Quick question on problem 4</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Partial solution to problem 4 (Potentially)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Should we be structuring  our definitions like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">):(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or like this??</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span><span class=\"o\">:</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n</div></div>",
        "id": 252537157,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631137012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435815\">@Lucas Teixeira</span> The first one says \"When <code>p</code> is a natural number and <code>hn</code> is a proof that <code>p &gt; 1</code>, then <code>prime p hn</code> is a proof that <code>¬∃ x y : ℕ , p = x * y</code>, and that proof right now is <code>sorry</code>\". The second one says \"When <code>p</code> is a natural number, <code>hn</code> is a proof that <code>p &gt; 1</code>, and <code>hq</code> is a proof that <code>¬∃ x y : ℕ , p = x * y</code>, then <code>prime p hn hq</code> is a proposition, and that proposition hasn't been defined yet (it's <code>sorry</code>).\"</p>\n<p>Neither of these are quite what you're going for yet.</p>",
        "id": 252539797,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631138226
    },
    {
        "content": "<p>You want to replace the <code>sorry</code> in the following with a proposition that means \"<code>n</code> is prime\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 252540101,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631138401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252540101\">said</a>:</p>\n<blockquote>\n<p>You want to replace the <code>sorry</code> in the following with a proposition that means \"<code>n</code> is prime\":</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Gotcha. so something like this??</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 252540427,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631138536
    },
    {
        "content": "<p>Also, a reminder that primes don't satisfy <code>¬∃ x y : ℕ , p = x * y</code> either</p>",
        "id": 252540439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631138544
    },
    {
        "content": "<p>because <code>p = 1 * p</code></p>",
        "id": 252540467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631138561
    },
    {
        "content": "<p>Yeah, something like that, but as Mario says that's not yet the definition of a prime number.</p>",
        "id": 252540538,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631138607
    },
    {
        "content": "<p>lol that's embarrassing. Thanks y'all for the help.</p>",
        "id": 252541786,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631139206
    },
    {
        "content": "<p>I think I've got it now,  this is my final answer for exercise 4</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Exercise 4</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">even</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">infinitely_many_primes</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fermat_prime</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">infinitely_many_Fermat_primes</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">Fermat_prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">goldbach_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">→</span>  <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Goldbach's_weak_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fermat's_last_theorem</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">¬∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n</code></pre></div>\n</div></div>",
        "id": 252545805,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631141344
    },
    {
        "content": "<p>Looking good. Your answers for <code>goldbach_conjecture</code>, <code>Goldbach's_weak_conjecture</code>, <code>Fermat's_last_theorem</code> are wrong; hint: you almost never want to use <code>\\exists x, p -&gt; q</code></p>",
        "id": 252546506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631141817
    },
    {
        "content": "<p>For <code>prime</code>, as a small followup exercise try writing the not-exists as forall (the part in parentheses in the exists would be to the left of an implication arrow).</p>",
        "id": 252546578,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631141862
    },
    {
        "content": "<p>also, it's not wrong but it is unusual to put the <code>n &gt; 2</code> inside the <code>p,q</code> quantifiers of <code>goldbach_conjecture</code></p>",
        "id": 252546679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631141904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252546506\">said</a>:</p>\n<blockquote>\n<p>Looking good. Your answers for <code>goldbach_conjecture</code>, <code>Goldbach's_weak_conjecture</code>, <code>Fermat's_last_theorem</code> are wrong; hint: you almost never want to use <code>\\exists x, p -&gt; q</code></p>\n</blockquote>\n<p>Yeah I was feeling unsure about that. I'm having a hard time expressing statements which state  \"for all n greater than two\" and the conditionals inside the quantifier was an attempt at solving that. </p>\n<p>Does this work??</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>goldbach_conjecture, Goldbach's_weak_conjecture, Fermat's_last_theorem</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">even</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">goldbach_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Goldbach's_weak_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fermat's_last_theorem</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n</div></div>",
        "id": 252553398,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631146902
    },
    {
        "content": "<p>Almost. You usually want to pair <code>∀</code> with <code>→</code> and <code>∃</code> with <code>∧</code>: that is, adjectives turn into assumptions like so:</p>\n<ul>\n<li>\"for all reprehensible x, bla(x)\" becomes <code>∀ x, reprehensible x → bla x</code></li>\n<li>\"there is a reprehensible x such that bla(x)\" becomes <code>∃ x, reprehensible x ∧ bla x</code></li>\n</ul>\n<p>Using <code>∀ x, foo x ∧ bla x</code> also makes sense but is less common, because it distributes into two separate assumptions <code>∀ x, foo x</code> and <code>∀ x, bla x</code>.</p>",
        "id": 252554104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631147507
    },
    {
        "content": "<p>Here's a disproof of the Goldbach conjecture:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">goldbach_conjecture</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">goldbach_conjecture</span><span class=\"o\">,</span>  <span class=\"n\">nat.not_lt_zero</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 252554293,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631147664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252546578\">said</a>:</p>\n<blockquote>\n<p>For <code>prime</code>, as a small followup exercise try writing the not-exists as forall (the part in parentheses in the exists would be to the left of an implication arrow).</p>\n</blockquote>\n<p>You mean something like this??</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>prime'</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n</div></div>",
        "id": 252554543,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631147905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252554104\">said</a>:</p>\n<blockquote>\n<p>Almost. You usually want to pair <code>∀</code> with <code>→</code> and <code>∃</code> with <code>∧</code>: that is, adjectives turn into assumptions like so:</p>\n<ul>\n<li>\"for all reprehensible x, bla(x)\" becomes <code>∀ x, reprehensible x → bla x</code></li>\n<li>\"there is a reprehensible x such that bla(x)\" becomes <code>∃ x, reprehensible x ∧ bla x</code></li>\n</ul>\n<p>Using <code>∀ x, foo x ∧ bla x</code> also makes sense but is less common, because it distributes into two separate assumptions <code>∀ x, foo x</code> and <code>∀ x, bla x</code>.</p>\n</blockquote>\n<p>Ahh! that makes total sense. So my idea of using conditionals was unto something, they were just in the wrong place.</p>\n<p>I think this should work now right???</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>goldbach_conjecture, Goldbach's_weak_conjecture, Fermat's_last_theorem</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">even</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">,(</span><span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">goldbach_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Goldbach's_weak_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fermat's_last_theorem</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n</div></div>",
        "id": 252555021,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631148294
    },
    {
        "content": "<p>Sure, that <code>prime'</code> works.  Here's another version that can be convenient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime''</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 252555055,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631148320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252555055\">said</a>:</p>\n<blockquote>\n<p>Sure, that <code>prime'</code> works.  Here's another version that can be convenient:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime''</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That's pretty <span aria-label=\"sunrise\" class=\"emoji emoji-1f305\" role=\"img\" title=\"sunrise\">:sunrise:</span></p>",
        "id": 252555183,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631148457
    },
    {
        "content": "<p>Also, you don't need all four conjuncts for <code>prime</code>: since <code>p = x * y</code>, <code>x = 1</code> iff <code>y = p</code> and <code>y = 1</code> iff <code>x = p</code>, so one of each works</p>",
        "id": 252555251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631148495
    },
    {
        "content": "<p>(The actual thing I had in mind was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime''</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This uses the transformation of not-exists-and to forall-implies-not. It's not as nice, though.)</p>",
        "id": 252555282,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631148528
    },
    {
        "content": "<p>it's generally easier to work with forall and implies than negated exists in lean because of how application works</p>",
        "id": 252555330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631148583
    },
    {
        "content": "<p>Your answers look correct now, except that <code>Goldbach's_weak_conjecture</code> is false as stated (hint: there are 3 counterexamples)</p>",
        "id": 252555437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631148669
    },
    {
        "content": "<p><code>goldbach_conjecture</code> is also missing an assumption (there are an infinite number of counterexamples)</p>",
        "id": 252555571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631148793
    },
    {
        "content": "<p><code>Fermat's_last_theorem</code> has a trivial case as well</p>",
        "id": 252555658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631148876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252555658\">said</a>:</p>\n<blockquote>\n<p><code>Fermat's_last_theorem</code> has a trivial case as well</p>\n</blockquote>\n<p>How about now?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>prime, goldbach_conjecture, Goldbach's_weak_conjecture, Fermat's_last_theorem</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">even</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">goldbach_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Goldbach's_weak_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fermat's_last_theorem</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n</code></pre></div>\n</div></div>",
        "id": 252556681,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631149792
    },
    {
        "content": "<p>I think you got it</p>",
        "id": 252559602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631152541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252559602\">said</a>:</p>\n<blockquote>\n<p>I think you got it</p>\n</blockquote>\n<p>Thank you for being so incredibly helpful! Here's the full answer to the problem. Thought it'd be important to have noted seeing as how these are the types which you can't type check</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Exercise 4 Answers</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_power</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">even</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">infinitely_many_primes</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fermat_prime</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">infinitely_many_Fermat_primes</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">Fermat_prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">goldbach_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Goldbach's_weak_conjecture</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"bp\">→</span>  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">prime</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">prime</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Fermat's_last_theorem</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n</code></pre></div>\n</div></div>",
        "id": 252561194,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631153773
    },
    {
        "content": "<p>You should also compare with the mathlib \"answer key\", which doesn't have all of these but does have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.prime/src\">src#nat.prime</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.exists_infinite_primes/src\">src#nat.exists_infinite_primes</a></p>",
        "id": 252564250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631156359
    },
    {
        "content": "<p>mathlib doesn't make a habit of defining conjectures it can't prove, which is why none of the conjectures are defined, and <code>infinitely_many_primes</code> is proved rather than defined</p>",
        "id": 252564540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631156553
    },
    {
        "content": "<p><code>Fermat_prime</code> could conceivably be in mathlib, but I guess we don't have anything interesting to say about them</p>",
        "id": 252564574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631156600
    },
    {
        "content": "<p>I'm having some difficulties working with negation and quantifiers. </p>\n<p>I've gotten this far on this problem</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>(∀ x, p x) ↔ ¬ (∃ x, ¬ p x)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"k\">show</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"k\">from</span> <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">hnt</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">exists.elim</span> <span class=\"n\">hnt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">npx</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">npx</span><span class=\"o\">)</span>\n       <span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">ht</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">ht</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"k\">from</span> <span class=\"bp\">...</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n</div></div>\n<p>but I'm kind of at a loss with how to proceed with proving the second implication</p>",
        "id": 252841072,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631303695
    },
    {
        "content": "<p>Why don't you come back to this once you've got onto chapter 5, tactic mode, and you'll be able to write code which is much less unwieldy? As for the proof, after <code>lam x</code> your goal will be <code>p x</code> and the way to make progress is to replace it with <code>not not p x</code>, which is a classical step.</p>",
        "id": 252841525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631303872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252841525\">said</a>:</p>\n<blockquote>\n<p>As for the proof, after <code>lam x</code> your goal will be <code>p x</code> and the way to make progress is to replace it with <code>not not p x</code>, which is a classical step.</p>\n</blockquote>\n<p>Ahh, that makes sense. I was trying to perform the classical step on the quantifier itself and getting nowhere, it didn't occur to me to do the classical step on the contents of the quantifier instead.</p>",
        "id": 252844300,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631305028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252841525\">said</a>:</p>\n<blockquote>\n<p>Why don't you come back to this once you've got onto chapter 5, tactic mode, and you'll be able to write code which is much less unwieldy? </p>\n</blockquote>\n<p>I'll definitely take the advice and come back through these after having worked through chapter 5, but I don't think my difficulties stem from the unwieldyness of the code (for some background: I'm a functional programmer who's trying to get into pure mathematics through LEAN, rather than the other way round). The things I'm still developing an intuition around are:</p>\n<ol>\n<li>Navigating the inference rules for quantifiers</li>\n<li>Knowing when it is necessary to use the law of excluded middle</li>\n<li>If it is necessary to to use the law of excluded middle, which statements would it be strategic to do this on</li>\n</ol>\n<p>For example, I was able to get this far on these two problems:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>(∃ x, p x → r) ↔ (∀ x, p x) → r and (∃ x, r → p x) ↔ (r → ∃ x, p x)</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n   <span class=\"n\">iff.intro</span>\n     <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">mh</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n       <span class=\"bp\">λ</span> <span class=\"n\">apx</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">exists.elim</span> <span class=\"n\">mh</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">fpxr</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">fpxr</span> <span class=\"o\">(</span><span class=\"n\">apx</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n     <span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">sh</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n      <span class=\"k\">from</span> <span class=\"bp\">...</span>\n     <span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">iff.intro</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">:(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">hr</span><span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">exists.elim</span> <span class=\"n\">h1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">frpx</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exists.intro</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">frpx</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n    <span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n     <span class=\"k\">from</span> <span class=\"bp\">...</span>\n    <span class=\"o\">)</span>\n</code></pre></div>\n</div></div>\n<p>But I was unable to pull the trigger with the exists.intro function because I don't have an assumption of x to work with. As a work around I tried using the <code>a</code> which is defined as a variable to implement  <code>exists.intro a (λ px: p a, sh (λ x: α, px)</code> as a solution to the first problem but it led to this error </p>\n<p><code>type mismatch at application\n  sh (λ (x : α), px)\nterm\n  λ (x : α), px\nhas type\n  α → p a\nbut is expected to have type\n  ∀ (x : α), p x </code></p>\n<p>This has led me to believe that <strong>it might not be possible to construct an existential statement from the given assumptions</strong>, so I've opted to try out a classical approach, and find statements to use <code>em</code> on. </p>\n<p>I could go on to state my process of selecting candidate statements to use <code>em</code> on and list out some of the issues I came across when trying to implement <code>em</code> on said statements, but I would love to receive some feedback on the validity of the reasoning that I demonstrated above if there is anyone who is willing to offer that up.</p>",
        "id": 252875624,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631327883
    },
    {
        "content": "<blockquote>\n<p>But I was unable to pull the trigger with the exists.intro function because I don't have an assumption of x to work with.</p>\n</blockquote>\n<p>This one is sneaky: Notice the <code>variable a : α</code> assumption at the top</p>",
        "id": 252876989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631329460
    },
    {
        "content": "<p>But you are right that <code>a</code> doesn't work for the problem, because <code>p a</code> doesn't necessarily hold, and a classical approach is needed. You will actually need more than one application of <code>em</code> or <code>by_contradiction</code> here. Here's a hint: assume <code>(∃ x, p x → r)</code> is false and prove <code>(∀ x, p x)</code></p>",
        "id": 252877488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631330087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435815\">@Lucas Teixeira</span></p>",
        "id": 252877527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631330149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/113489-new-members/topic/TPIL.20Chapter.204.20Exercises/near/252877488\">said</a>:</p>\n<blockquote>\n<p>But you are right that <code>a</code> doesn't work for the problem, because <code>p a</code> doesn't necessarily hold, and a classical approach is needed. You will actually need more than one application of <code>em</code> or <code>by_contradiction</code> here. </p>\n</blockquote>\n<p>I see what you mean by <code>p a</code> doesn't necessarily hold, and that explains the type error that I was getting when I attempted to fit it into exists.intro.</p>\n<blockquote>\n<p>Here's a hint: assume <code>(∃ x, p x → r)</code> is false and prove <code>(∀ x, p x)</code></p>\n</blockquote>\n<p>And thank you for the hint, I'll work on it for a bit and try to follow up.<br>\nI'm assuming that this is a hint for the first problem <code>(∃ x, p x → r) ↔ (∀ x, p x) → r</code>??</p>",
        "id": 252885166,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631339406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span><br>\nI guess I'm having some trouble seeing how under the assumption of  <code>¬(∃ x, p x → r)</code> we would benefit from a proof of <code>(∀ x, p x)</code>. The way I see it, since the current goal is  <code>(∃ x, p x → r)</code> ,assuming<code>¬(∃ x, p x → r)</code> would change our goal into a derivation of a contradiction. </p>\n<p>The statements that I see following from <code>(∀ x, p x)</code> are <code>r</code>, <code>¬∃ x, ¬ p x</code>, and <code>p a</code>, none of them feel to have any immediate use. </p>\n<p>You mentioned that there is another use of em that was necessary. What was your process of coming to that conclusion like??</p>",
        "id": 252901891,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1631358534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435815\">@Lucas Teixeira</span> If you can prove <code>r</code>, then you can prove <code>(∃ x, p x → r)</code> and thus <code>false</code></p>",
        "id": 252921288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631378910
    },
    {
        "content": "<blockquote>\n<p>You mentioned that there is another use of em that was necessary. What was your process of coming to that conclusion like??</p>\n</blockquote>\n<p>That's probably too spoilerific to say, but roughly speaking there is nothing in this problem that would help prove the existential, or to prove <code>p x</code> from <code>not (not (p x))</code>, so you will need two applications of LEM around these two places.</p>",
        "id": 252921421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631379072
    },
    {
        "content": "<p>For the second problem, there is one proposition that would benefit a lot from <code>em</code>. Think of it this way: after applying <code>em foo</code>, you can simplify all statements involving <code>foo</code>, which might make the goal match the assumption after simplification, or make it provable outright</p>",
        "id": 252921599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631379220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> </p>\n<p>Thank you for your response! I ended up getting side tracked with other projects but I do plan on coming back to it soon enough</p>",
        "id": 254177360,
        "sender_full_name": "Lucas Teixeira",
        "timestamp": 1632216064
    }
]