[
    {
        "content": "<p>For some reason, I need a statement like the following.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mod8_odd</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span> <span class=\"bp\">∧</span> <span class=\"n\">odd</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>I have constructed the following proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">hh</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">hlb</span><span class=\"o\">,</span> <span class=\"n\">hub</span><span class=\"o\">,</span> <span class=\"n\">hodd</span> <span class=\"o\">⟩,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">int.even_zero</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">int.odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hlb</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">clear</span> <span class=\"n\">hlb</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlb</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hlb</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">clear</span> <span class=\"n\">hlb</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlb</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">int.even_bit0</span><span class=\"o\">,</span> <span class=\"n\">int.odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hlb</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">clear</span> <span class=\"n\">hlb</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlb</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hlb</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">clear</span> <span class=\"n\">hlb</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlb</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">int.even_bit0</span><span class=\"o\">,</span> <span class=\"n\">int.odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hlb</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">clear</span> <span class=\"n\">hlb</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlb</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hlb</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">clear</span> <span class=\"n\">hlb</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlb</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">not_true</span><span class=\"o\">,</span> <span class=\"n\">int.even_bit0</span><span class=\"o\">,</span> <span class=\"n\">int.odd_iff_not_even</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hodd</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hlb</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">clear</span> <span class=\"n\">hlb</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlb</span> <span class=\"o\">:</span> <span class=\"mi\">7</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"mi\">7</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hlb</span> <span class=\"o\">(</span><span class=\"n\">ne.symm</span> <span class=\"n\">hx</span><span class=\"o\">),</span> <span class=\"n\">clear</span> <span class=\"n\">hlb</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hlb</span> <span class=\"o\">:</span> <span class=\"mi\">8</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hx'</span><span class=\"o\">,</span>\n  <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_le</span> <span class=\"n\">hlb</span> <span class=\"n\">hub</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It works, but is sort of ugly. Is there a more elegant way of doing this?</p>",
        "id": 272724378,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1645469981
    },
    {
        "content": "<p>A quick version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.parity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.fin_cases</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mod8_odd</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span> <span class=\"bp\">∧</span> <span class=\"n\">odd</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₃</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">lift</span> <span class=\"n\">b</span> <span class=\"n\">to</span> <span class=\"n\">ℕ</span> <span class=\"n\">using</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.range</span> <span class=\"mi\">8</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">lift</span> <span class=\"n\">b</span> <span class=\"n\">to</span> <span class=\"n\">finset.range</span> <span class=\"mi\">8</span> <span class=\"n\">using</span> <span class=\"n\">h₂'</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h₃</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 272725327,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1645470470
    },
    {
        "content": "<p>The tactic <code>fin_cases</code> is doing the heavy lifting here:  the two <code>lift</code> exhibit the number of possibilities for <code>b</code> as coming from a finite set, then <code>fin_cases</code> makes a separate goal for each of this finite set of possibilities, and then <code>simp</code> deals with each of those cases.</p>",
        "id": 272725470,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1645470555
    }
]