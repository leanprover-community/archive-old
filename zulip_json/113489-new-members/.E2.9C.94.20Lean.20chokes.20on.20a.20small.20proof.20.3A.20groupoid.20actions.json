[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461830\">R√©mi Bottinelli</span> has marked this topic as resolved.</p>",
        "id": 304489387,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666019816
    },
    {
        "content": "<p>Looks like the problem is with <code>simp_rw</code>. I can reproduce: if I remove the first sorry from <code>inv</code>, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">of</span> <span class=\"n\">semidirect_product</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">87</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">of</span> <span class=\"n\">semidirect_product</span> <span class=\"n\">took</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">15</span><span class=\"n\">s</span>\n<span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"n\">of</span> <span class=\"n\">semidirect_product</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">97</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>Elaboration time looks normal but typechecking and post-processing is taking too long; Usually I only see such long post-processing times when there is a <code>@[simps]</code> attribute. <br>\nIf I also remove the sorries from <code>inv_comp'</code> and <code>comp_inv'</code> then it takes forever. However, replacing the <code>simp_rw</code>s by <code>ext, apply</code> makes it fast:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">semidirect_product</span> <span class=\"o\">:</span> <span class=\"n\">groupoid</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">obj</span> <span class=\"n\">g</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">¬∑‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">},</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"bp\">$</span> <span class=\"n\">obj</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul'</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">groupoid_action.mul_id'</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">‚ü®</span> <span class=\"n\">f.val</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h.val</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul'</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span><span class=\"bp\">‚Üê</span><span class=\"n\">groupoid_action.mul_comp'</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">subtype.coe_eq_of_eq_mk</span> <span class=\"n\">f.prop</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_eq_of_eq_mk</span> <span class=\"n\">h.prop</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">category.id_comp</span> <span class=\"o\">},</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">category.comp_id</span> <span class=\"o\">},</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">category.assoc</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">‚ü®</span> <span class=\"n\">inv</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">inv_eq_inv</span><span class=\"o\">,</span> <span class=\"n\">mul_eq_mul'</span><span class=\"o\">],</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">((‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">obj_p</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">‚ü©</span> <span class=\"bp\">‚Ä¢‚â´</span> <span class=\"n\">f.val</span><span class=\"o\">)</span> <span class=\"bp\">‚Ä¢‚â´</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">f.val</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.coe_eq_of_eq_mk</span> <span class=\"n\">f.prop</span><span class=\"o\">,</span>\n      <span class=\"n\">nth_rewrite_lhs</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üê</span><span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subtype.val_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">inv_eq_inv</span><span class=\"o\">],</span>\n    <span class=\"o\">}</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">inv_comp'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">groupoid.inv_comp</span> <span class=\"o\">},</span>\n  <span class=\"n\">comp_inv'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">groupoid.comp_inv</span> <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 304497349,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666022084
    },
    {
        "content": "<p>Ah, thanks a lot! I would have thought <code>simp_rw</code> to be quite fast.<br>\nBut I think in any case I should drop this code in favour of <code>functor.elements</code> and wrap around if needed. Agreed?</p>",
        "id": 304509627,
        "sender_full_name": "R√©mi Bottinelli",
        "timestamp": 1666025524
    },
    {
        "content": "<p>I went with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.groupoid</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.groupoid.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.structured_arrow</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.groupoid.vertex_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.types</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.elements</span>\n\n\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># Actions of groupoids</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">groupoid</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">action</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">u'</span> <span class=\"n\">v'</span> <span class=\"n\">u''</span> <span class=\"n\">v''</span>\n\n<span class=\"kd\">variables</span>  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">groupoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">groupoid</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Possible definition of an action on a set?</span>\n<span class=\"kd\">structure</span> <span class=\"n\">action</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Fw</span> <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">}))</span>\n\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">stabilizer</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span>  <span class=\"o\">:</span> <span class=\"n\">F.obj</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">vertex_group_one</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">functor_to_types.map_id_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">hf</span> <span class=\"n\">hf'</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">vertex_group_mul</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">functor_to_types.map_comp_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span> <span class=\"n\">hf'</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hf'</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">vertex_group_inv</span><span class=\"o\">,</span> <span class=\"n\">inv_eq_inv</span><span class=\"o\">,</span> <span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">nth_rewrite_lhs</span> <span class=\"mi\">0</span> <span class=\"bp\">‚Üê</span><span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span><span class=\"n\">functor_to_types.map_comp_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_iso.hom_inv_id</span><span class=\"o\">,</span> <span class=\"n\">functor_to_types.map_id_apply</span><span class=\"o\">],</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">semidirect_product</span> <span class=\"o\">:=</span> <span class=\"n\">F.elements</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">groupoid</span> <span class=\"o\">(</span><span class=\"n\">semidirect_product</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">category_theory.groupoid_of_elements</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">action</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">groupoid</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>\n<p>I don't know yet if I'll really need actions on a type, but I feel like this is probably the right way to go wrt mathlib.</p>\n<p><strong>Note.</strong> Strangely, this also takes quite a long time to typecheck: <code>category_theory.elements</code> seems to be the culprit.</p>",
        "id": 304510149,
        "sender_full_name": "R√©mi Bottinelli",
        "timestamp": 1666025680
    },
    {
        "content": "<blockquote>\n<p>I would have thought simp_rw to be quite fast. But I think in any case I should drop this code in favour of functor.elements </p>\n</blockquote>\n<p>Yeah I think so. It seems simp_rw is indeed quite fast but Lean has problem checking the term it generates.</p>",
        "id": 304518905,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666028315
    }
]