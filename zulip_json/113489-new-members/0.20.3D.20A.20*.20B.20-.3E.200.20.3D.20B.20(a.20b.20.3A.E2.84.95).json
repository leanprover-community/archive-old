[
    {
        "content": "<p>This seems like it should be so easy, but I'm not sure how to do this with the natural numbers.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">equation_zero_cancel_mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">):</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207102963,
        "sender_full_name": "Rick Love",
        "timestamp": 1597633939
    },
    {
        "content": "<p>Well it's not true,  guess it should be A=0 or B=0</p>",
        "id": 207102989,
        "sender_full_name": "Rick Love",
        "timestamp": 1597634002
    },
    {
        "content": "<p>Actually, the assumption is A &gt; 0</p>",
        "id": 207103039,
        "sender_full_name": "Rick Love",
        "timestamp": 1597634048
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">equation_zero_cancel_mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207103048,
        "sender_full_name": "Rick Love",
        "timestamp": 1597634076
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.eq_zero_of_mul_eq_zero\">docs#nat.eq_zero_of_mul_eq_zero</a> should be useful</p>",
        "id": 207103123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597634205
    },
    {
        "content": "<p>Once you get used to the names of the lemmas/theorems in mathlib, you can search the library here <a href=\"https://leanprover-community.github.io/mathlib_docs\">https://leanprover-community.github.io/mathlib_docs</a></p>",
        "id": 207103200,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597634309
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search\">https://leanprover-community.github.io/mathlib_docs/tactics.html#library_search</a></p>",
        "id": 207103405,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597634592
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html##find\">https://leanprover-community.github.io/mathlib_docs/commands.html##find</a></p>",
        "id": 207103483,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597634681
    },
    {
        "content": "<p>Ok, figured out how to use that with cases:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">equation_zero_cancel_mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span><span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">):</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"bp\">*</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">eq_zero_of_mul_eq_zero</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h_1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 207103800,
        "sender_full_name": "Rick Love",
        "timestamp": 1597635020
    },
    {
        "content": "<p>You may want to structure your statements so that they are better aligned with the usual conventions of mathlib. E.g. I would change <code>0=...</code> to <code>...=0</code></p>",
        "id": 207104092,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597635495
    },
    {
        "content": "<p>To expand on that, we try to make the right-hand side of all equalities and iffs to be \"simpler\" than the left-hand side.<br>\nThis means most of the time you want to rewrite/simplify, you apply equalities/iffs from left-to-right.</p>",
        "id": 207107040,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1597640073
    }
]