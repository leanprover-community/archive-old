[
    {
        "content": "<p>This example may be a little more verbose than needed, but is there a way to solve it? </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">nat_ceil</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">le_nat_ceil</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hN</span> <span class=\"n\">at</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">H2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199748377,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1591278212
    },
    {
        "content": "<p>i haven't tried your code yet because I\"m not at a computer, but I bet things will be easier for you if you use integers instead of naturals</p>",
        "id": 199748574,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591278279
    },
    {
        "content": "<p>I don't think <code>H2</code> means what you want it to mean</p>",
        "id": 199748865,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591278411
    },
    {
        "content": "<p>Yes but I just can't in this example. It's part of a bigger proof. I can bet you're right about H2.</p>",
        "id": 199748939,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1591278446
    },
    {
        "content": "<p>this works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">nat_ceil</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">le_nat_ceil</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hN</span> <span class=\"n\">at</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"n\">revert</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">id</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199749511,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591278697
    },
    {
        "content": "<p>the only way I know to get <code>norm_cast</code> to do what i want is to put all the information it needs into the goal state</p>",
        "id": 199749611,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591278735
    },
    {
        "content": "<p>actually in this case <code>norm_cast at H1</code> does fine</p>",
        "id": 199749988,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591278931
    },
    {
        "content": "<p>here's my final answer</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hN</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">=</span> <span class=\"n\">nat_ceil</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">le_nat_ceil</span> <span class=\"o\">(</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">a</span> <span class=\"o\">)),</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">hN</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199750147,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591279015
    },
    {
        "content": "<p>And I thought I had exhausted all ways to ask <code>norm_cast</code> to do the job!</p>",
        "id": 199750705,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1591279232
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> !</p>",
        "id": 199750754,
        "sender_full_name": "Dan Stanescu",
        "timestamp": 1591279256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/113489-new-members/topic/Casting.20Problem/near/199749611\">said</a>:</p>\n<blockquote>\n<p>the only way I know to get <code>norm_cast</code> to do what i want is to put all the information it needs into the goal state</p>\n</blockquote>\n<p>actually it's <code>push_cast</code> that I get this headache with. I think <code>norm_cast</code> always tries to remove coercions</p>",
        "id": 199750797,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591279281
    }
]