[
    {
        "content": "<p>Total noob to Lean and Zulip, so bear with me! I'm toying with the idea of writing verified/verifiable programs with Lean (mainly for personal projects for now) and I've hit an issue that tells me that I don't fully understand how Lean handles <code>termination_by</code>.</p>\n<p>Two versions of a trivial loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">0</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">sum</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>and the same with reversed order of branches:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum2</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"o\">(</span>\n    <span class=\"c1\">-- have _ := n - (i + 1) &lt; n - i</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">sum2</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>Where the first one verifies just fine, but the second one doesn't (with or without the <code>have</code> clause). In general, can I infer that Lean prefers the recursion first and the base cases second, or is that just an artefact of heuristics which may change at any time? I imagine there's a way to solve this problem by adding a different <code>have</code> clause, or by  specifying  a tactic via <code>decreasing_by</code>, but I haven't explored that yet.</p>",
        "id": 279702218,
        "sender_full_name": "Christoph M. Wintersteiger",
        "timestamp": 1650557459
    },
    {
        "content": "<p>That <code>have</code> doesn't mean what you think it does</p>",
        "id": 279709801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650560768
    },
    {
        "content": "<p>It says \"I have a statement, it's <code>n - (i + 1) &lt; n - i</code>\"</p>",
        "id": 279709837,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650560783
    },
    {
        "content": "<p>But termination wants to you to say \"I have a proof of <code>n - (i + 1) &lt; n - i</code>, it's <code>...</code>\"</p>",
        "id": 279709874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650560800
    },
    {
        "content": "<p>I would guess <code>have : i &lt; n := sorry</code>, is sufficient to make the recursion happy</p>",
        "id": 279709909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650560823
    },
    {
        "content": "<p>Here's the right notation for <code>have</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">sum2</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"o\">(</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"c1\">-- use h to prove this</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">sum2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">sum2</span> <span class=\"n\">i</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>I also added in a dependent <code>if</code> since you'll need that fact to prove what's needed.</p>",
        "id": 279710987,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650561300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Simple.20termination.20proofs/near/279709909\">said</a>:</p>\n<blockquote>\n<p>I would guess <code>have : i &lt; n := sorry</code>, is sufficient to make the recursion happy</p>\n</blockquote>\n<p>Thanks Eric, that changes everything! I thought the <code>_ :</code> is just a label for the <code>have</code> statement. Back to reading the manual!</p>",
        "id": 279711117,
        "sender_full_name": "Christoph M. Wintersteiger",
        "timestamp": 1650561362
    },
    {
        "content": "<p>the syntax is: <code>have &lt;label&gt; : &lt;type&gt; := &lt;term&gt;</code></p>",
        "id": 279711453,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650561522
    },
    {
        "content": "<p>(there are other syntax options available too)</p>",
        "id": 279711497,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650561544
    },
    {
        "content": "<p>If you had written <code>have _ : n - (i + 1) &lt; n - i := sorry</code> it would have been fine, note that the <code>:=</code> comes after the type/proposition, not before</p>",
        "id": 279711503,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1650561547
    }
]