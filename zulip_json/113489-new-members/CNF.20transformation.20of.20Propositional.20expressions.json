[
    {
        "content": "<p>In Lean 3, would it be possible to implement the CNF transformation of a propositional formula? How?</p>",
        "id": 174352770,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1566991535
    },
    {
        "content": "<p>Isn't it part of what <code>finish</code> or <code>tauto</code> are doing?</p>",
        "id": 174352861,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566991630
    },
    {
        "content": "<p>Not sure.  But I am teaching a logic course in Lean using Avigad book and I want to show the students the CNF transformation, I thought that would be nice to implement it in Lean</p>",
        "id": 174352972,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1566991767
    },
    {
        "content": "<p>I have no idea what I'm talking about, but you can have a look at the code of those tactics</p>",
        "id": 174353042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1566991819
    },
    {
        "content": "<p>Yes, we've done that in class before</p>",
        "id": 174354062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566992900
    },
    {
        "content": "<p>The simple way is to use a carefully chosen simp set</p>",
        "id": 174354103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566992956
    },
    {
        "content": "<p>The more efficient way is to prove it by recursion on the term</p>",
        "id": 174354157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1566993002
    },
    {
        "content": "<p>Hi Mario , can you share examples? It is still not clear to me how implement this kind of computation in Lean. Have  you implemented it over the type Prop or implemented your on data type for formulas and functions over this type?</p>",
        "id": 174355564,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1566994340
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 174356007,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1566994754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span><br>\nSince I like to give this as an exercise, I won't give exactly CNF, but here's a similar implementation for NNF (negation normal form), which turns everything into 'and', 'or', and negations of propositional atoms.</p>\n<p>Method 1, using <code>simp</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nnf₁</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iff_def</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">imp_iff_not_or</span><span class=\"o\">,</span> <span class=\"n\">not_or_distrib</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_and_distrib</span><span class=\"o\">]]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">nnf₁</span> <span class=\"c1\">-- ⊢ (¬p ∨ (¬q ∨ r) ∧ (¬r ∨ s)) ∨ p</span>\n</pre></div>\n\n\n<p>Method 2, by recursion:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">iff_def</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">imp_iff_not_or</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">not_and</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">p&#39;</span> <span class=\"n\">q&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p&#39;</span> <span class=\"bp\">∨</span> <span class=\"n\">q&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_and_distrib</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">not_or</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">p&#39;</span> <span class=\"n\">q&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">q&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">not_or_distrib</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">p&#39;</span> <span class=\"n\">q&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">q&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">]</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">p&#39;</span> <span class=\"n\">q&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">p&#39;</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">p&#39;</span> <span class=\"bp\">∨</span> <span class=\"n\">q&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">]</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nnf₂_aux</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span> <span class=\"bp\">×</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"bp\">`</span><span class=\"o\">(((</span><span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"err\">%%</span><span class=\"n\">b</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"err\">%%</span><span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"err\">%%</span><span class=\"n\">b</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"err\">%%</span><span class=\"n\">p</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b&#39;</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"n\">b</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a&#39;</span> <span class=\"bp\">∨</span> <span class=\"err\">%%</span><span class=\"n\">b&#39;</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"err\">%%</span><span class=\"n\">b</span> <span class=\"err\">%%</span><span class=\"n\">a&#39;</span> <span class=\"err\">%%</span><span class=\"n\">b&#39;</span> <span class=\"err\">%%</span><span class=\"n\">ha</span> <span class=\"err\">%%</span><span class=\"n\">hb</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b&#39;</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"n\">b</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a&#39;</span> <span class=\"bp\">∧</span> <span class=\"err\">%%</span><span class=\"n\">b&#39;</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"err\">%%</span><span class=\"n\">b</span> <span class=\"err\">%%</span><span class=\"n\">a&#39;</span> <span class=\"err\">%%</span><span class=\"n\">b&#39;</span> <span class=\"err\">%%</span><span class=\"n\">ha</span> <span class=\"err\">%%</span><span class=\"n\">hb</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">b&#39;</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a&#39;</span> <span class=\"bp\">∨</span> <span class=\"err\">%%</span><span class=\"n\">b&#39;</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">not_and</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"err\">%%</span><span class=\"n\">b</span> <span class=\"err\">%%</span><span class=\"n\">a&#39;</span> <span class=\"err\">%%</span><span class=\"n\">b&#39;</span> <span class=\"err\">%%</span><span class=\"n\">ha</span> <span class=\"err\">%%</span><span class=\"n\">hb</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a&#39;</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">b&#39;</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a&#39;</span> <span class=\"bp\">∧</span> <span class=\"err\">%%</span><span class=\"n\">b&#39;</span><span class=\"o\">),</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">nnf</span><span class=\"bp\">.</span><span class=\"n\">not_or</span> <span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"err\">%%</span><span class=\"n\">b</span> <span class=\"err\">%%</span><span class=\"n\">a&#39;</span> <span class=\"err\">%%</span><span class=\"n\">b&#39;</span> <span class=\"err\">%%</span><span class=\"n\">ha</span> <span class=\"err\">%%</span><span class=\"n\">hb</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"err\">%%</span><span class=\"n\">e</span><span class=\"o\">))</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nnf₂</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e&#39;</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nnf₂_aux</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"err\">%%</span><span class=\"n\">e</span> <span class=\"err\">%%</span><span class=\"n\">e&#39;</span> <span class=\"err\">%%</span><span class=\"n\">p</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">nnf₂</span> <span class=\"c1\">-- ⊢ (¬p ∨ (¬q ∨ r) ∧ (¬r ∨ s)) ∨ p</span>\n</pre></div>",
        "id": 174403931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567028727
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! In the first approach, I got the error </p>\n<div class=\"codehilite\"><pre><span></span>8:5: unknown identifier &#39;classical.imp_iff_not_or&#39;\nstate:\np q r s : Prop\n⊢ (p → (q → r) ∧ (r → s)) ∨ p\n</pre></div>\n\n\n<p>Where the symbol <code>imp_iff_not_or</code> is defined?</p>",
        "id": 174454804,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567086123
    },
    {
        "content": "<p>Maybe this next question will sound silly, but I am being curious to ask. In cases such the one above, how can I find definitions in Lean? Using emacs, how can I know if a need to open a namespace or import some file? How can I know what is already in the Lean distribution?</p>",
        "id": 174455259,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567086449
    },
    {
        "content": "<p>I guess you don't have mathlib</p>",
        "id": 174455800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567086805
    },
    {
        "content": "<p>In case where you know the exact name but clearly don't have the right imports I think nothing is faster than grep</p>",
        "id": 174455830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567086842
    },
    {
        "content": "<p>or the online analogue <a href=\"https://github.com/leanprover-community/mathlib/search?q=imp_iff_not_or&amp;unscoped_q=imp_iff_not_or\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/search?q=imp_iff_not_or&amp;unscoped_q=imp_iff_not_or\">https://github.com/leanprover-community/mathlib/search?q=imp_iff_not_or&amp;unscoped_q=imp_iff_not_or</a></p>",
        "id": 174455900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567086867
    },
    {
        "content": "<p>I guess  I didn't understand how to install mathlib. In <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/macos.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/macos.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/macos.md</a> it says that I need to install lean using elan. But I have already Lean and Emacs running fine. I just want to have mathlib but I don't know how.</p>",
        "id": 174635834,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567290876
    },
    {
        "content": "<p>If you're not doing it the community supported way then you don't just want to know how to install mathlib, you want to know how to install it, how to compile it and how to use it as a dependency in another project. The community have solved all these problems. Why don't you try it the community supported way first and then afterwards try and get it working with Emacs</p>",
        "id": 174636097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567291465
    },
    {
        "content": "<p>The whole thing is still a mess but we have worked hard to write documentation that just works, or at least usually does</p>",
        "id": 174636109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567291521
    },
    {
        "content": "<p>Once you see it all working the supported way you can try and switch back and then your problems will be far more precise</p>",
        "id": 174636113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567291561
    },
    {
        "content": "<p>I don't think installing mathlib directly is that technically challenging, it's just time consuming to compile</p>",
        "id": 174636161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567291606
    },
    {
        "content": "<p>and frankly, I am far happier to wait for lean to compile for an hour than spend a day doing installation troubleshooting</p>",
        "id": 174636169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567291639
    },
    {
        "content": "<p>the macos.md file is a bit strange to me... it doesn't say anything about mathlib itself</p>",
        "id": 174636218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567291761
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , that is my point too. I just want to understand how to install mathlib considering that lean and emacs are already working together and I have been using Lean only for my course, not with other projects or dependencies.</p>",
        "id": 174636219,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567291766
    },
    {
        "content": "<p>I believe you can run <code>leanpkg add leanprover-community/mathlib</code> from your project root and it should download mathlib and put it in your project dependencies</p>",
        "id": 174636265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567291860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think it is a problem if we don't have the \"low tech\" installation instructions available. There are various reasons why the \"install a script that does everything\" approach can fail (usually system configuration things, or paranoid people) and we should have a backup that just goes through the steps that the script is doing</p>",
        "id": 174636328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567291981
    },
    {
        "content": "<p>In particular, I'm not comfortable with the section that says to run:</p>\n<div class=\"codehilite\"><pre><span></span>curl https://raw.githubusercontent.com/leanprover-community/mathlib-tools/master/scripts/remote-install-update-mathlib.sh -sSf | bash\n</pre></div>\n\n\n<p>The containing section doesn't say anything precise about what the script is doing or how you can do it yourself</p>",
        "id": 174636392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567292141
    },
    {
        "content": "<blockquote>\n<p>(This will install tools that, amongst other things, let you download compiled binaries for mathlib.)</p>\n</blockquote>\n<p>How do I use said tools? What tools? Where should I do this, and how will it affect my filesystem?</p>",
        "id": 174636436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567292206
    },
    {
        "content": "<p>The linux install instructions end with a link to <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/install/project.md</a> . The OSX instructions should probably also link there, and it looks like a good place to start once you have lean but not mathlib</p>",
        "id": 174636497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567292386
    },
    {
        "content": "<p>Yep. I am those paranoid people! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>Mario, I got</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">r</span> <span class=\"bp\">∨</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n</pre></div>\n\n\n<p>is that the expected output? If I understood it right, the approach is all done in the type level, rewriting the goal. It would be interesting to contrast it with the transformation been done in the term level, with the explicit manipulation of the terms. But for that, I guess I would need to define my own datatype for propositional logic formulas, right?</p>",
        "id": 174636618,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567292630
    },
    {
        "content": "<p>The approach is to create a proof by recursion on the <code>expr</code> type</p>",
        "id": 174636910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567293217
    },
    {
        "content": "<p>and then hand it to lean</p>",
        "id": 174636913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567293228
    },
    {
        "content": "<p>It has to be done in <code>meta</code> land because directly interfacing with the elaborator is \"untrusted\"</p>",
        "id": 174636954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567293258
    },
    {
        "content": "<p>There isn't really an alternative if you want something that acts like a tactic</p>",
        "id": 174636958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567293280
    },
    {
        "content": "<p>But you can minimize the untrusted part to only \"reification\", that is, rewriting your propositional formula as the semantics of some inductive datatype</p>",
        "id": 174636971,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567293337
    },
    {
        "content": "<p>and then you can do manipulations on the inductive datatype in pure code</p>",
        "id": 174637010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567293363
    },
    {
        "content": "<p>Hum, I will need to assimilate it ... thank you</p>",
        "id": 174637268,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567293971
    },
    {
        "content": "<p>I believe we are talking about the same thing ... define a data type for formulas and provide code to manipulate them. But I didn’t understand the mention to reification and untrusted.</p>",
        "id": 174637487,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567294469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121542\">@Alexandre Rademaker</span> Here's some code that does NNF via reification:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">has_reflect</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">not</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">imp</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">iff</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"o\">(</span><span class=\"n\">ps</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ps</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"n\">false</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"kn\">eval</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"kn\">eval</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"kn\">eval</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"kn\">eval</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"kn\">eval</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span> <span class=\"bp\">→</span> <span class=\"n\">prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"n\">p</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"n\">p</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"o\">(</span><span class=\"n\">bnot</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"o\">((</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"o\">((</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">tt</span><span class=\"o\">))</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_equiv</span> <span class=\"n\">prop</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">l</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">rfl</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≈</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">≈</span> <span class=\"n\">p₁</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">p₃</span> <span class=\"o\">:</span> <span class=\"n\">prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p₂</span> <span class=\"bp\">≈</span> <span class=\"n\">p₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₃</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">not_congr</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"o\">:</span> <span class=\"n\">prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">not_congr</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and_congr</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q₁</span> <span class=\"bp\">≈</span> <span class=\"n\">q₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">q₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">q₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">and_congr</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or_congr</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q₁</span> <span class=\"bp\">≈</span> <span class=\"n\">q₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">q₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">q₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">or_congr</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">imp_congr</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q₁</span> <span class=\"bp\">≈</span> <span class=\"n\">q₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">q₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">q₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">imp_congr</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">iff_congr</span> <span class=\"o\">{</span><span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span> <span class=\"o\">:</span> <span class=\"n\">prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q₁</span> <span class=\"bp\">≈</span> <span class=\"n\">q₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p₁</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"n\">q₁</span> <span class=\"bp\">≈</span> <span class=\"n\">p₂</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"n\">q₂</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">iff_congr</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">prop</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">b</span> <span class=\"bp\">≈</span> <span class=\"n\">cond</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_not</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and_congr</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or_congr</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">))</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_and_distrib</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or_congr</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and_congr</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">))</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">not_or_distrib</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or_congr</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">))</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">imp_iff_not_or</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and_congr</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">))</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">not_imp</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"n\">ff</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and_congr</span>\n    <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or_congr</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or_congr</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">)))</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">iff_def</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n    <span class=\"n\">and_congr</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">imp_iff_not_or</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">imp_iff_not_or</span>\n<span class=\"bp\">|</span> <span class=\"n\">tt</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or_congr</span>\n    <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and_congr</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and_congr</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">tt</span><span class=\"o\">)))</span> <span class=\"err\">$</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">not_congr</span> <span class=\"n\">iff_def</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n    <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">not_and_distrib</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span>\n    <span class=\"k\">by</span> <span class=\"n\">classical</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">or_congr</span> <span class=\"n\">not_imp</span> <span class=\"n\">not_imp</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">reify</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">state</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"n\">prop</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"err\">%%</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">not</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">and</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">or</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"err\">%%</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">iff</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">reify</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">find_index</span> <span class=\"o\">(</span><span class=\"bp\">=</span><span class=\"err\">ₐ</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"k\">then</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">protected</span> <span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">reflect&#39;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">level</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">reflect&#39;</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nnf₃</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">target</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">reify</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">[],</span>\n  <span class=\"k\">let</span> <span class=\"n\">es</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">reflect&#39;</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"n\">nnf_equiv</span> <span class=\"n\">ff</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"err\">%%</span><span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">nnf</span> <span class=\"n\">ff</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">change</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"err\">%%</span><span class=\"n\">es</span> <span class=\"err\">%%</span><span class=\"o\">(</span><span class=\"n\">reflect</span> <span class=\"n\">p&#39;</span><span class=\"o\">))</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">nnf₃</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">prop</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nth</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I didn't write a function to convert from prop back to Prop, so the goal is left in a messy state after nnf, but it is defeq to the \"right\" goal and dsimp will clean it up</p>",
        "id": 174638930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567297364
    },
    {
        "content": "<p>Notice which parts are marked <code>meta</code>. The <code>reify</code> function will take the target expression from the elaborator and built an equivalent element of the inductive datatype <code>prop</code>; the <code>eval</code> function converts back to <code>Prop</code> and the first few lines convert the goal to something of the form <code>prop.eval es p</code> where <code>es</code> is a literal list of propositions and <code>p</code> is an expression of type <code>prop</code></p>",
        "id": 174638991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567297561
    },
    {
        "content": "<p>The main theorem is <code>nnf_equiv</code>, which says that <code>prop.eval es (p.nnf ff) &lt;-&gt; prop.eval es p</code>, and we apply it in the forward direction so that we only need to show <code>prop.eval es (p.nnf ff)</code>, which defeq simplifies to the desired expression</p>",
        "id": 174639081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567297692
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 174639105,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1567297795
    },
    {
        "content": "<p>I do understand the general feeling that <code>curl foobar | sh</code> is an evil pattern. But it is not that hard to <code>curl foobar &gt; bla; less bla; sh bla</code>. So I don't really find it evil in practice.</p>",
        "id": 174647022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567313809
    },
    {
        "content": "<p>Also, if you are paranoid about the shell scripts and tooling provided by the mathlib community, be sure to not put <code>import logic.foobar</code> at the top of your Lean files, if you haven't read through that <code>import</code> (and all its dependencies!). After all, it might be a bomb! Lean can execute code... it's not some sandbox.</p>",
        "id": 174647071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567313900
    },
    {
        "content": "<p>FWIW, even if you trust current mathlib, mathlib is <em>not secure</em>. Just after a pull request is approved but before it is merged someone could commit malicious code to <code>logic.basic</code> with the message \"spelling\" or something and have that merged and not noticed for a while, infecting everyone who upgrades checks-out the new master.</p>",
        "id": 174647323,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567314429
    },
    {
        "content": "<p>installation scripts are particularly attractive targets for criminals, though, since they are frequently run with administrator permissions</p>",
        "id": 174648101,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1567316017
    },
    {
        "content": "<p>I don't know if people are exactly installing mathlib at a breakneck pace right now though :P</p>",
        "id": 174648152,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567316079
    },
    {
        "content": "<p>just explaining the thought process of many paranoid people</p>",
        "id": 174648161,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1567316114
    },
    {
        "content": "<p>some things deserve more scrutiny than others</p>",
        "id": 174648165,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1567316128
    },
    {
        "content": "<p>Hey, I'm paranoid at times.  Doesn't mean I want break into systems :) j/k</p>",
        "id": 174648870,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1567317663
    },
    {
        "content": "<p>My point isn't about the security of the <code>curl | sh</code> practice, it's about the lack of documentation</p>",
        "id": 174650399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567320802
    },
    {
        "content": "<p>Suppose the script breaks for some obscure reason. How can I diagnose what's going on (assuming I'm technically literate but unfamiliar with lean), and possibly work around whatever problem arises? Documentation describing the intent and effect of the script goes a long way toward being able to address these problems, as well as mollifying the paranoid</p>",
        "id": 174650442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567320894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> Note that in your attack the malicious spelling commit would have to be authored by someone with write access. Granted we aren't very strict about enforcement, but there aren't <em>that</em> many people with write access</p>",
        "id": 174650541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567321130
    },
    {
        "content": "<p>That's good to know</p>",
        "id": 174650549,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567321165
    }
]