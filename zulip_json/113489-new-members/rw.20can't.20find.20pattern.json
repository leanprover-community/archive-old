[
    {
        "content": "<p>Hi, <br>\nI'm still leaning to use lean. So I'm trying to formalize some basic theorems.<br>\nI can often use rw without any problems, but in a particular situation it seems to not find the pattern.</p>\n<p>This is the state in the middle of a proof:<br>\n<a href=\"/user_uploads/3121/WeVRDTC7YxSoHwUVYaeksSqh/before-rw.png\">before-rw.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WeVRDTC7YxSoHwUVYaeksSqh/before-rw.png\" title=\"before-rw.png\"><img src=\"/user_uploads/3121/WeVRDTC7YxSoHwUVYaeksSqh/before-rw.png\"></a></div><p>Notice that the consequent of the hypothesis dni1  almost matches the goal, but it says x is not in the complement of P. To rewrite this part of dni1 into \"x is in P\", i wrote a lemma (probably already in mathlib):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">notin_compl_iff_in</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">a.compl</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"kd\">end</span>\n</code></pre></div>\n<p>Using the command </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">notin_compl_iff_in</span> <span class=\"n\">at</span> <span class=\"n\">dni1</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>It rewrites the antecedent of dni1 \"z \\notin P.compl\" into \"z \\in P\", but using the same command again it gives me an error, even though there is a second occurrence of the same pattern. The error I get:<br>\n<a href=\"/user_uploads/3121/KczqAcWjtiqgNIrNk7xxdLTV/after-rw.png\">after-rw.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KczqAcWjtiqgNIrNk7xxdLTV/after-rw.png\" title=\"after-rw.png\"><img src=\"/user_uploads/3121/KczqAcWjtiqgNIrNk7xxdLTV/after-rw.png\"></a></div><p>The only difference I can see is that x is a bound variable, and z is a free variable, but I dont see why this would matter. <br>\nAny help is appreciated</p>",
        "id": 263747175,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638675815
    },
    {
        "content": "<p>That's right, <code>rw</code> cannot rewrite under binders (like this <code>forall</code>). Try <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw\">tactic#simp_rw</a> instead.</p>",
        "id": 263747706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638676753
    },
    {
        "content": "<p>It says it failed to simplify.</p>",
        "id": 263747978,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638677048
    },
    {
        "content": "<p>Do you see a simple way to solve this without having to eliminate these quantifiers?</p>",
        "id": 263748066,
        "sender_full_name": "Bruno Bandeira Monteiro",
        "timestamp": 1638677205
    }
]