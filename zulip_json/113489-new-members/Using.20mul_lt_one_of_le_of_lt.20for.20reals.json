[
    {
        "content": "<p>I have a goal <code>a * b &lt; 1</code> where I know <code>0 &lt;= a &lt;= 1</code> and <code>0 &lt;= b &lt; 1</code>. I wanted to conclude using <code>mul_lt_one_of_le_of_lt</code>, but I get the error <code>invalid apply tactic, failed to synthesize type class instance for\n  covariant_class ℝ ℝ has_mul.mul has_lt.lt</code>. I've see these <code>covariant_class</code> things before in lemmas but this is the first time I've run into an issue with them. It seems like the issue is that if <code>c &lt;= 0</code> then <code>x &lt; y</code> does not imply <code>c * x &lt; c * y</code>. What's the easiest way to apply (something equivalent to) this lemma in my situation?</p>",
        "id": 294770003,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661203852
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_lt_one_of_nonneg_of_lt_one_left\">docs#mul_lt_one_of_nonneg_of_lt_one_left</a></p>",
        "id": 294770714,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661204215
    },
    {
        "content": "<p>Sorry, algebraic order lemmas are a bit of a maze!</p>",
        "id": 294770735,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661204226
    },
    {
        "content": "<p>thanks!</p>",
        "id": 294771780,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1661204773
    },
    {
        "content": "<p>Btw, the <code>covariant_class</code> you mention is the statement that multiplication by any given real on the left is strictly monotone.</p>\n<p>The <code>has_mul</code> field tells you which operation to use and the <code>has_lt</code> which relation.  The vast majority of covariant classes in mathlib use <code>+</code> or <code>*</code> as operation on the left, their swap for operations on the right, and <code>≤</code> or <code>&lt;</code> for monotone/strictly monotone.</p>\n<p>The first two fields that are both <code>ℝ</code> in your case, would be superfluous, if it were easy to deduce from the operation which type is acting on which type.</p>",
        "id": 294793214,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661220429
    },
    {
        "content": "<p>Btw, if you want to use fancier covariant typeclasses, this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_lt.mul_lt_of_le_of_lt_one'</span> <span class=\"n\">a1</span> <span class=\"n\">b1</span> <span class=\"n\">b0</span> <span class=\"n\">zero_lt_one</span>\n</code></pre></div>\n<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zero_lt.mul_lt_of_le_of_lt_one'\">docs#zero_lt.mul_lt_of_le_of_lt_one'</a> is a lemma that is not real-specific.<br>\nEdit: I see now that Yaël's suggestion is also not real-specific!  What I meant is that it does not use the <code>ordered_semiring</code> typeclass.</p>",
        "id": 294795354,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661222846
    }
]