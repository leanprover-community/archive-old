[
    {
        "content": "<p>I've been working through a book on axiomatic set theory and have been proving much of it in lean for fun using the constructions in <code>set_theory.zfc</code>. But I've run into a deterministic timeout on a few occasions. Here's a MWE.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Set</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dom</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">R.Union.Union</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x.pair</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">ran</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">R.Union.Union</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">,</span> <span class=\"n\">x.pair</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">fun_value</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">F.Union.Union</span> <span class=\"bp\">|</span> <span class=\"n\">x.pair</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">Union</span>\n<span class=\"kd\">def</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span> <span class=\"n\">pair_sep</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b.pair</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R.ran</span> <span class=\"n\">R.dom</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ttt</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">F.inv.fun_value</span> <span class=\"bp\">∅</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"c1\">-- deterministic timeout in vscode</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Set</span>\n</code></pre></div>\n<p>The <code>lean</code> command returns after ~10 seconds. <code>cases</code> and related tactics timeout regardless of the arguments. It doesn't timeout if I remove <code>.inv</code> or <code>.fun_value ∅</code> or replace <code>∈</code> with <code>=</code> in the goal. Is the goal just too complicated? What's going on? Can I increase the timeout threshold?</p>\n<p>The strange thing is I can do <code>nat.cases_on</code> without issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">nat.cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">F.inv.fun_value</span> <span class=\"bp\">∅</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 240268853,
        "sender_full_name": "Evan Haskell",
        "timestamp": 1621991273
    },
    {
        "content": "<p>I would guess that <code>cases</code> is trying to find the weak head normal form of the goal and this is particularly expensive for the example goal</p>",
        "id": 240272578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621995532
    },
    {
        "content": "<p>adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">Set.mem</span>\n</code></pre></div>\n<p>makes it instant</p>",
        "id": 240272682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621995654
    }
]