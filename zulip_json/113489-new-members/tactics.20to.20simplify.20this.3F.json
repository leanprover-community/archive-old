[
    {
        "content": "<p>Are there good tactics to simplify this? in particular, the three line proof of the two cases is literally the same. Can I somehow just say \"do this twice\"? Also, can I combine the three <code>apply</code> into one command?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"c1\">-- BEGIN</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_inf</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202906706,
        "sender_full_name": "Chris M",
        "timestamp": 1593927384
    },
    {
        "content": "<p>There are a few, you can do <code>all_goals { blah }</code> to run the tactic blah on all goals, or use a semicolon instead of a comma after one tactic to run the subsequent tactic on all goals produced by the first.</p>",
        "id": 202906722,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593927462
    },
    {
        "content": "<p>There's also <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#repeat\">tactic#repeat</a> for your first question. For your second, you can combine the <code>apply</code> like this: <code>apply le_inf inf_le_right inf_le_left, </code> but at that point you may as well just write <code>exact le_inf inf_le_right inf_le_left</code>.</p>",
        "id": 202906773,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593927561
    },
    {
        "content": "<p>And apply is applying functions / implications backwards from the goal, so you can chain them like so</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"err\">⊓</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_inf</span> <span class=\"n\">inf_le_right</span> <span class=\"n\">inf_le_left</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202906776,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593927584
    },
    {
        "content": "<p>Or just <code>:= le_antisymm (le_inf inf_le_right inf_le_left) (le_inf inf_le_right inf_le_left)</code> without <code>begin ... end</code></p>",
        "id": 202907298,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593928789
    },
    {
        "content": "<p>If you use <code>lemma</code> instead of <code>example</code>, then you'll be able to <code>#print</code> this lemma and see the actual expression generated by tactics.</p>",
        "id": 202907344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593928834
    },
    {
        "content": "<p>There might also be a WLOG trick?</p>",
        "id": 202910921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593936454
    }
]