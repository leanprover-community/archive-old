[
    {
        "content": "<p>I'm sorry for the trivial question but how do I get the finite set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>1</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{1, \\ldots, n\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">}</span></span></span></span>, and where would I look such basic stuff up myself?</p>",
        "id": 226688144,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613580943
    },
    {
        "content": "<p>ooh here in computer science land we start at 0</p>",
        "id": 226688508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581068
    },
    {
        "content": "<p>0 to n-1 then :)</p>",
        "id": 226688612,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613581101
    },
    {
        "content": "<p>There is <code>finset.range n</code> which is the \"finset\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0,1,2,\\ldots,n-1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 226688615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581103
    },
    {
        "content": "<p>thank you!</p>",
        "id": 226688650,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613581117
    },
    {
        "content": "<p>Just to be clear, there are several ways of talking about finite subsets of types, and furthermore you might not actually want a subset at all. Do you just want an abstract type <code>{0,1,2,...,n-1}</code> because we have one of those too, it's called <code>fin n</code>.</p>",
        "id": 226688768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581162
    },
    {
        "content": "<p>If by \"set\" you mean \"subset of something\" (e.g. of the naturals) then you want a <code>set</code> or a <code>finset</code> but if you just want some convenient set with n elements and by set you mean \"set in the sense of ZFC, i.e. something with no actual definition but just a collection of stuff\" then here in dependent type theory land we suggest that instead you use a type, which is also a collection of stuff with no actual definition.</p>",
        "id": 226688996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581235
    },
    {
        "content": "<p>PS What is your background and what are you thinking about doing?</p>",
        "id": 226689209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581317
    },
    {
        "content": "<p>I want to define a chain of ideals, and my best guess is to define it as a map from {0, ..., n-1}  to the set of all ideals and then put some conditions for each pair (i, i+1)</p>",
        "id": 226689274,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613581329
    },
    {
        "content": "<p>if you want a chain of ideals of length n then probably the best way to do this in Lean is a map <code>fin n -&gt; ideal R</code> plus some hypotheses.</p>",
        "id": 226689393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581378
    },
    {
        "content": "<p>except that I can never remember whether that is a chain of length n or n+1 or n-1 :-)</p>",
        "id": 226689477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581405
    },
    {
        "content": "<p>What I know for sure is that <code>fin n</code> has size <code>n</code>.</p>",
        "id": 226689512,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581421
    },
    {
        "content": "<p>Thank you <code>fin n</code> looks like a good idea!</p>\n<p>PS: Im a PhD in math in Edinburgh and I'm just playing around with Lean, so at the moment I'm looking at regular rings</p>",
        "id": 226689616,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613581448
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> PR'ed regular sequences a day or so ago -- was it you that mentioned them before? You inspired him :-)</p>",
        "id": 226689692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581486
    },
    {
        "content": "<p>Cool, gonna have a look at that!</p>",
        "id": 226689966,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613581565
    },
    {
        "content": "<p>It's here: <a href=\"https://github.com/leanprover-community/mathlib/issues/6282\">#6282</a> . Right now people are debating implementation-specific minutae about how best to say \"multiplication by c is injective\". Definitions need a lot of thought. Once they're in place, the fun part, namely proving theorems, can begin.</p>",
        "id": 226690252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613581677
    },
    {
        "content": "<p>Not sure if this is the same \"regular\" This looks like left-/right-cancellation to me, I was thinking of the regular in the sense of a regular scheme (in the sense of dim. of cotangent space equals Krull dimension). They are unrelated, aren't they?</p>",
        "id": 226691321,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613582062
    },
    {
        "content": "<p>But <code>fin n</code> is great, just realised that this is defined as a set-comprehension <code>{i : ℕ // i &lt; n}</code>, seems useful. Thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 226691930,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613582305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> from Wiki:</p>\n<blockquote>\n<p>More generally, let R be a regular local ring with maximal ideal m. Then any elements r1, ..., rd of m which map to a basis for m/m2 as an R/m-vector space form a regular sequence.</p>\n</blockquote>",
        "id": 226693321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613582885
    },
    {
        "content": "<p>More precisely, it is a subtype because of a <code>//</code>. A set comprehension would be: <code>{i : ℕ | i &lt; n}</code></p>",
        "id": 226693343,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613582902
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Regular_sequence\">https://en.wikipedia.org/wiki/Regular_sequence</a></p>",
        "id": 226693357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613582908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Oh I have to learn how to read github PRs, I only saw about 5 lines of code (defining left/right cancellation) instead of the entire thing, my bad!</p>\n<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Thank you for the terminology!</p>",
        "id": 226694682,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613583414
    },
    {
        "content": "<p>Well, to be fair, that PR doesn't do regular sequences yet.</p>",
        "id": 226695409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613583658
    },
    {
        "content": "<p>But it would be a natural next step</p>",
        "id": 226695427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613583668
    },
    {
        "content": "<p>Have the definition of a regular local ring has been on my mental todo list for a long time</p>",
        "id": 226695458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613583687
    },
    {
        "content": "<p>Looking forward to see the result.</p>",
        "id": 226696193,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613583975
    },
    {
        "content": "<p>Maybe you can do it!! <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 226696342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613584034
    },
    {
        "content": "<p>The question is: what should the definition of a regular ring or regular local ring be? There are perhaps 5 equivalent definitions of regular local ring, and one question is which one to use as our \"official\" definition.</p>",
        "id": 226696547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613584092
    },
    {
        "content": "<p>Then one has to think carefully about what theorems to prove about that definition, and get them all in the right order. They say that the Bourbaki books were all written in this way, with things constantly being re-arranged etc and read and re-read until everyone was happy.</p>",
        "id": 226696638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613584140
    },
    {
        "content": "<p>I guess the first step is <a href=\"https://en.wikipedia.org/wiki/Krull%27s_principal_ideal_theorem\">https://en.wikipedia.org/wiki/Krull%27s_principal_ideal_theorem</a> which doesn't require much in terms of definitions.</p>",
        "id": 226696953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613584268
    },
    {
        "content": "<p>Well... I guess we need an API around the Krull dimension</p>",
        "id": 226697809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613584637
    },
    {
        "content": "<p>Would it be reasonable to define chains of ideals as (strict_)monos from a (linear) order to the lattice of (prime) ideals?  This might save some typing on the conditions... Maybe?</p>",
        "id": 226702124,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613586338
    },
    {
        "content": "<p><code>fin n</code> is a linear order.</p>",
        "id": 226704472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613587121
    },
    {
        "content": "<p>(at least I hope it is!)</p>",
        "id": 226704492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613587133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> It should somehow be a discrete linear order, right? You want to have a notion of the \"next\" element.</p>",
        "id": 226704993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613587359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/Finite.20set/near/226704472\">said</a>:</p>\n<blockquote>\n<p><code>fin n</code> is a linear order.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.linear_order\">docs#fin.linear_order</a></p>",
        "id": 226705202,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613587446
    },
    {
        "content": "<p>I'm glad that survived the Pechershy purge!</p>",
        "id": 226705282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613587481
    },
    {
        "content": "<p>I really had in mind using it for finite types, but I thought that there could be a general notion of a chain indexed by a general order of some sort and then lots of results about chains based on finite linear orders.</p>",
        "id": 226705635,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613587630
    },
    {
        "content": "<p>By the way, Lean provides a nice way of avoiding \"off by 1\" errors. Suppose you have a sequence of elements <code>a : fin (n + 1) -&gt; X</code>, which you think of as a sequence a_0, a_1, ..., a_n. If you want to say that each one is related to the next, you say<code> forall i : fin n, R (a i.cast_succ) (a i.succ)</code>. The library has a nice API for viewing an element <code>i : fin n</code> as an element of <code>fin (n + 1)</code>.</p>",
        "id": 226705706,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1613587665
    },
    {
        "content": "<p>A lot of the trivial results will likely only look at two comparable elements of the chain anyways...</p>",
        "id": 226705727,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613587673
    },
    {
        "content": "<p>Also, Kevin, my way of remembering what is the \"right\" index is that you are always interested in counting <em>inclusions</em> rather than ideals.</p>",
        "id": 226705894,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613587739
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lifting the partial order of ideals to a partial order on prime ideals.</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_le_prime_spec</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">prime_spectrum</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p.val</span> <span class=\"bp\">≤</span> <span class=\"n\">q.val</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">has_lt_prime_spec</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]:</span> <span class=\"n\">has_lt</span> <span class=\"o\">(</span><span class=\"n\">prime_spectrum</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">p.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q.val</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- A finite chain of ideal has `n+1` ideals `I₀ ⊆ ... ⊆ Iₙ`</span>\n<span class=\"kd\">structure</span> <span class=\"n\">increasing_ideal_chain</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">chain</span><span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">prime_spectrum</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">incl</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">chain</span> <span class=\"n\">i.cast_succ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">chain</span> <span class=\"n\">i.succ</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>I'm still learning syntax and conventions. Could something like this look okay, or do you usually have a different approach than <code>structure</code>?</p>\n<p>How would I then either take a supremum of <code>m</code> such that such a chain <code>increasing_ideal_chain A m</code> exists ? (The main thing I don't understand in general is how to build a proposition of the form \"there is an element in X\", or \"the type X is not-empty\")</p>",
        "id": 226799638,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613649581
    },
    {
        "content": "<blockquote>\n<p>there is an element in X</p>\n</blockquote>\n<p>If <code>X</code> is a set, that's <code>X.nonempty</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nonempty\">docs#set.nonempty</a></p>\n<blockquote>\n<p>the type X is not-empty</p>\n</blockquote>\n<p>that's <code>nonempty X</code>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty\">docs#nonempty</a></p>",
        "id": 226800690,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613650147
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 226801560,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613650674
    },
    {
        "content": "<p>So could the following be an (equivalent) description of the Krull dimension? (Although probably not the desired definition)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">krull_dim</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"n\">increasing_ideal_chain</span> <span class=\"n\">A</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">increasing_ideal_chain</span> <span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 226801717,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613650765
    },
    {
        "content": "<p>That looks reasonable. But it specifies the Krull dimension as a relation between a ring and a nat.</p>",
        "id": 226803383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613651806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> I haven't thought about whether that's what we want, or whether it should be a function that returns a <code>nat</code></p>",
        "id": 226803420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613651829
    },
    {
        "content": "<p>For example <code>char_p</code> is set up in the same way as your Krull dim. But things like <code>dim</code> for vector spaces return the actual dimension, instead of being a relation.</p>",
        "id": 226803450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613651864
    },
    {
        "content": "<p>Doesn't that definition mean that if <code>krull_dim A n.succ</code> is true then so is <code>krull_dim A n</code>?</p>",
        "id": 226803476,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613651876
    },
    {
        "content": "<p>I guess that one is more a of properties if <code>n</code> is the Krull dimension... and haven't thought exactly about the logic, very likely <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 226803548,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613651915
    },
    {
        "content": "<p>I think I'm wrong, ignore me :)</p>",
        "id": 226803631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613651985
    },
    {
        "content": "<p>Can I define a supremum of all <code>m</code> such that there is a chain of length <code>m</code>? Do I need to use cardinals to allow the case where the supremum  is infinity?</p>",
        "id": 226803632,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1613651987
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a> help?</p>",
        "id": 226803691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613652012
    },
    {
        "content": "<p>No, that's the infimum</p>",
        "id": 226803813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613652099
    },
    {
        "content": "<p>Does something like this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">krull_dim</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">increasing_ideal_chain</span> <span class=\"n\">A</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>or perhaps</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">krull_dim</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⨆</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"bp\">$</span> <span class=\"n\">increasing_ideal_chain</span> <span class=\"n\">A</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 226804137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613652265
    },
    {
        "content": "<p>You can use <code>nat.find</code></p>",
        "id": 226806229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613653370
    },
    {
        "content": "<p>To find the smallest <code>n</code> such that there is no chain of that length.</p>",
        "id": 226806261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613653386
    },
    {
        "content": "<p>Every once in a while, I find myself wanting a \"less stringent\" condition, such as \"this number is an upper bound for the [degree of a polynomial, dimension/codimenson of a variety, cardinality of a finite set]\".  I think that this applies more frequently in the context of Krull dimension, heights, regular sequences.  At the moment, I find it a little awkward to deal with this, but maybe this is just me not being able to use the current APIs...</p>\n<p>Still, it seems that this discussion might be a good place where to hopefully plant a seed!</p>",
        "id": 226807009,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613653816
    },
    {
        "content": "<p>For instance, when talking about upper-semicontinuity it is really useful to have a good way of talking about stuff that satisfies an inequality.</p>",
        "id": 226807294,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613653975
    },
    {
        "content": "<p>Anyway, my afternoon of teaching begins!</p>",
        "id": 226807335,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613653990
    },
    {
        "content": "<p>I agree. So maybe we want to have <code>has_krull_dim_le</code> as well as <code>krull_dim</code></p>",
        "id": 226811835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613656202
    },
    {
        "content": "<p>The concept of the degree of a polynomial being equal to something is in some sense a very unnatural one. What can you say about the set of polynomials in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\R[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> with degree equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>? Nothing, it's not closed under anything, it's not a subthing, what it is is the difference between the submodule of polys of degree &lt;= n and the submodule of polys of degree &lt; n.</p>",
        "id": 226811990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613656265
    },
    {
        "content": "<p>It's not true that the product of two polynomials of degrees a and b has degree a+b in general, but it's always true that the product of two polynomials of degrees &lt;= a and &lt;= b has degree &lt;= a+b.</p>",
        "id": 226812262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613656395
    },
    {
        "content": "<p>The interesting structure is the filtration by degree &lt;= n</p>",
        "id": 226812338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613656432
    },
    {
        "content": "<p>Sure, but the same is not true for Krull dimension...</p>",
        "id": 226813982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613657061
    },
    {
        "content": "<p>There is a lot of interesting stuff to be said about varieties of dimension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">n = 2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>...</p>",
        "id": 226814047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613657087
    },
    {
        "content": "<p>There's still something funny going on though because the disjoint union of a point and a curve is 1-dimensional</p>",
        "id": 226873278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613679380
    },
    {
        "content": "<p>I tend to think that Kevin's observation on the degree is a reflection of using polynomials instead homogenous forms: the \"loss in degree\" is a consequence of \"stuff running off to infinity\".</p>\n<p>The issue with Krull dimension is that it is a sup over all chains, so it is \"non-local\" and, due to the primality restriction, it is also strange for reducible schemes.</p>\n<p>There is the notion of <em>catenary</em>, that addresses these issues somehow.</p>",
        "id": 226875493,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613680323
    }
]