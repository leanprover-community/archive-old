[
    {
        "content": "<p>How do I define a sequence recursively within a larger tactic mode proof?  Say I want to prove the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"sd\">/-- Definition of the limit of a sequence -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">converges_to</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"sd\">/-- If `s` is nonempty and bounded above, and does not contain its supremum `l`, then there</span>\n<span class=\"sd\">exists a strictly monotone sequence of elements of `s` which converges to `l`. -/</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">is_lub</span> <span class=\"n\">s</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl'</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">strict_mono</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">converges_to</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>\n\n<p>The proof should go like this:  We construct the sequence recursively.  Define <code>x 0</code> to be an arbitrary element of <code>s</code>.  Then, given that <code>x k</code> is defined, we have <code>x k &lt; l</code> since <code>l ∉ s</code>, so <code>max (x k) (l - 1 / (k + 1))</code> is not an upper bound for <code>s</code> and so there exists some element of <code>s</code> greater than this max, which I define to be <code>x (k + 1)</code>.</p>\n<p>How can I set this up?  I think I have found the right section of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a><br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#structural-recursion-and-induction\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#structural-recursion-and-induction</a><br>\nbut I don't know how to make a \"throwaway\" recursive definition within a larger tactic mode proof.</p>",
        "id": 213844396,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603140893
    },
    {
        "content": "<p>I would define an auxilliary noncomputable definition that takes an element of <code>s</code> (and the rest of the data) and returns the next element in the sequence.<br>\nThen <code>x n</code> is just <code>aux^[n] (x 0)</code></p>",
        "id": 213844959,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603141105
    },
    {
        "content": "<p>Then proving basic properties about <code>aux</code> also immediately splits up one large proof in many small ones.</p>",
        "id": 213845043,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603141151
    },
    {
        "content": "<p>If you really want a single proof, I would do the same, but use <code>let aux := ...</code></p>",
        "id": 213845178,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603141210
    },
    {
        "content": "<p>I see, so the nice syntax at <br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#structural-recursion-and-induction\">https://leanprover.github.io/theorem_proving_in_lean/induction_and_recursion.html#structural-recursion-and-induction</a><br>\nwith </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span>     <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">n</span>\n</code></pre></div>\n\n<p>is completely irrelevant to what I want to do?</p>",
        "id": 213845249,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603141249
    },
    {
        "content": "<p>Yeah, the equation compiler doesn't seem necessary at all for this purpose.<br>\nIf the function was going to be more complicated, and you did want to use the equation compiler, then the same advice still applies: split up the proof so that you define a top-level definition with the equation compiler, and then prove properties about it, before you actually begin the proof of the main theorem.</p>",
        "id": 213845582,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603141407
    },
    {
        "content": "<p>OK, thanks!  Let me try this method and see if I can figure it out.</p>",
        "id": 213845738,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603141469
    },
    {
        "content": "<p>You can also do it using <code>nat.rec_on</code>. For instance, the proof of Baire theorem in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dense_Inter_of_open_nat\">docs#dense_Inter_of_open_nat</a> does this.</p>",
        "id": 213846274,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1603141711
    },
    {
        "content": "<p>Interesting, I'll try it both ways!</p>",
        "id": 213846536,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603141841
    },
    {
        "content": "<p>For another example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hofer\">docs#hofer</a></p>",
        "id": 213846977,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1603142036
    }
]