[
    {
        "content": "<p>I see in mathlib the following theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">complex.abs_exp_of_real</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"bp\">↑</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real.exp</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n<p>But I don't see the corresponding complex version, that |e^z| = e^(re(z)) ?...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">complex.abs_exp_of_complex</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">C</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>Is this somewhere else perhaps? Thanks!</p>",
        "id": 211160253,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600966812
    },
    {
        "content": "<p>This indeed seems to be missing.  (It would be a very welcome addition, by the way!). In the short term, do you know how to prove it or would you like some pointers?</p>",
        "id": 211161415,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600967404
    },
    {
        "content": "<p>(The special functions library is quite far behind the other parts of analysis -- for example, mathlib has had the Banach open mapping theorem, Arzela-Ascoli, etc, for more than a year, but just got the derivative of arctan yesterday! <a href=\"https://github.com/leanprover-community/mathlib/issues/4138\">#4138</a> )</p>",
        "id": 211163896,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600968607
    },
    {
        "content": "<p>I guess I was hoping I wouldn't have to prove it. But it's not so bad. Thanks!</p>",
        "id": 211173224,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600973048
    },
    {
        "content": "<p>If you proved it, maybe you could PR it <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 211174873,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600973864
    },
    {
        "content": "<p>I don't know what PR means? But here's a (very badly, quickly scraped together) proof (each step is testing what's in library_search until I find something that makes progress... Definitely not mathlib ready!...):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">absExpExpRe</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">,</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">complex.re</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">rw1</span><span class=\"o\">:</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">complex.re</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"o\">(</span><span class=\"n\">complex.re</span> <span class=\"n\">z</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">complex.exp_of_real_re</span> <span class=\"n\">z.re</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">rw1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">rw2</span><span class=\"o\">:</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"o\">((</span><span class=\"n\">z.re</span><span class=\"o\">):</span><span class=\"n\">ℂ</span> <span class=\"o\">)),</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"n\">rw3</span><span class=\"o\">:</span> <span class=\"n\">z.re</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">z.re</span><span class=\"o\">):</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"n\">complex.abs_exp_eq_iff_re_eq.mpr</span> <span class=\"n\">rw3</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">rw2</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">rw4</span> <span class=\"o\">:</span> <span class=\"n\">complex.exp</span> <span class=\"o\">((</span><span class=\"n\">z.re</span><span class=\"o\">):</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">complex.of_real_exp</span> <span class=\"n\">z.re</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">rw4</span><span class=\"o\">,</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">rw5</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">,</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">complex.abs_of_real</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">rw5</span> <span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"n\">z.re</span><span class=\"o\">),</span>\n\n    <span class=\"k\">have</span> <span class=\"n\">rw6</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">real.exp</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">exact</span> <span class=\"n\">exppos</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">rw7</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">intros</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">abs_of_pos</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">rw7</span> <span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"n\">z.re</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rw6</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211178131,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600975379
    },
    {
        "content": "<p>PR stands for pull request, so adding it to mathlib via github. Scott made a nice video about the complete process <a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;ab_channel=leanprovercommunity\">https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;ab_channel=leanprovercommunity</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bnc8w9lxe8A\" href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A&amp;ab_channel=leanprovercommunity\"><img src=\"https://i.ytimg.com/vi/Bnc8w9lxe8A/default.jpg\"></a></div>",
        "id": 211178794,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1600975721
    },
    {
        "content": "<p><code>exppos</code> is something you also proved?</p>",
        "id": 211179026,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600975825
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.exp_pos\">docs#real.exp_pos</a></p>",
        "id": 211179119,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600975871
    },
    {
        "content": "<p>Whoops! Sorry, here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exppos</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">real.exp</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">real.exp_pos</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211179127,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600975875
    },
    {
        "content": "<p>(Again, I'm just scraping things together using library_search...)</p>",
        "id": 211179153,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600975900
    },
    {
        "content": "<p>Without changing the order of your proof, some cleanup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">absExpExpRe</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">complex.re</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">rw2</span><span class=\"o\">:</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"o\">((</span><span class=\"n\">z.re</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"n\">rw3</span><span class=\"o\">:</span> <span class=\"n\">z.re</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">z.re</span><span class=\"o\">):</span><span class=\"n\">ℂ</span> <span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">re</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">complex.abs_exp_eq_iff_re_eq.mpr</span> <span class=\"n\">rw3</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">complex.exp_of_real_re</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rw2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">complex.of_real_exp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex.abs_of_real</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">real.exp_pos</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refl</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 211180051,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600976384
    },
    {
        "content": "<p>Or by changing the order quite a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">absExpExpRe</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">complex.re</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">complex.exp</span> <span class=\"n\">z.re</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complex.abs_exp_eq_iff_re_eq.mpr</span> <span class=\"o\">(</span><span class=\"n\">complex.of_real_re</span> <span class=\"n\">z.re</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">complex.abs</span> <span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"n\">z.re</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">complex.of_real_exp</span> <span class=\"n\">z.re</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">real.exp</span> <span class=\"n\">z.re</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">complex.abs_of_real</span> <span class=\"n\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">z.re</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs_of_pos</span> <span class=\"o\">(</span><span class=\"n\">real.exp_pos</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 211180268,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1600976495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252920\">Alex Kontorovich</span> <a href=\"#narrow/stream/113489-new-members/topic/.7Cexp.7C.3F/near/211178131\">said</a>:</p>\n<blockquote>\n<p>Definitely not mathlib ready!...):</p>\n</blockquote>\n<p>If you have time ... we love to get PRs from new people, and this would be welcome (and we have a mechanism to credit Yakov and Ruben as co-authors).</p>",
        "id": 211183486,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1600978150
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span>  could I please have permission to push this to a branch?</p>",
        "id": 211192005,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600982842
    },
    {
        "content": "<p>What's your github username?</p>",
        "id": 211192138,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600982915
    },
    {
        "content": "<p>AlexKontorovich. Thanks!</p>",
        "id": 211192162,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600982931
    },
    {
        "content": "<p>Invitation sent! <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 211192186,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600982958
    },
    {
        "content": "<p>When I try from terminal to do: leanproject get -b mathlib:exp_facts<br>\nI get this error: zsh: /usr/local/bin/leanproject: bad interpreter: /usr/local/opt/python/bin/python3.7: no such file or directory<br>\nAny idea for how to fix it?... Thanks!</p>",
        "id": 211192535,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600983162
    },
    {
        "content": "<p>What's the result of <code>which python3.7</code>?</p>",
        "id": 211192709,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600983284
    },
    {
        "content": "<p>or <code>which python3</code>?</p>",
        "id": 211192721,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1600983293
    },
    {
        "content": "<p>Which installation instructions did you follow? If you didn't closely follow <a href=\"https://leanprover-community.github.io/get_started.html#regular-install\">https://leanprover-community.github.io/get_started.html#regular-install</a>, try that!</p>",
        "id": 211199331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600987920
    },
    {
        "content": "<p>Yes, I opened a terminal and typed what I was told here: <a href=\"https://leanprover-community.github.io/install/macos.html\">https://leanprover-community.github.io/install/macos.html</a>; it did its magic and ended after a while.</p>\n<p>Also:<br>\n% which python<br>\n/usr/bin/python<br>\nBut:<br>\n% which python3.7<br>\npython3.7 not found</p>\n<p>Could that be the problem? Do I not have the latest python?... Thanks!</p>",
        "id": 211206623,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1600994222
    },
    {
        "content": "<p>Hmm, sorry you're having trouble. Which version of macos are you running? It's possible things haven't been tested properly on the latest one (I don't like to upgrade unnecessarily...)</p>",
        "id": 211206704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600994311
    },
    {
        "content": "<p>Can you try <code>python --version</code>, and also <code>python3 --version</code>?</p>",
        "id": 211206714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600994334
    },
    {
        "content": "<p>Also, could you send us the output of <code>cat /usr/local/bin/leanproject</code>? I'm curious because my <code>leanproject</code> asks for python3.8, while your error message is about 3.7.</p>",
        "id": 211206830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1600994470
    }
]