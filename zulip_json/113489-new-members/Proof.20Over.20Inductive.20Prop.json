[
    {
        "content": "<p>I can't figure out how to handle the following inductive proposition in a proof.<br>\nSorry for not having a MWE - I hope the code is understandable anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">has_path_from_to</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">direct</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g.has_edge_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">composite</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">iₘ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">iₘ</span> <span class=\"bp\">→</span> <span class=\"n\">has_path_from_to</span> <span class=\"n\">iₘ</span> <span class=\"n\">i'</span> <span class=\"bp\">→</span> <span class=\"n\">has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span>\n</code></pre></div>\n<p>I'm trying to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">edges_inv_path_inv</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g.edges</span> <span class=\"bp\">=</span> <span class=\"n\">g'.edges</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">g'.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">has_path_from_to.direct</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">has_edge_from_to</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">has_path_from_to.direct</span> <span class=\"n\">p</span>\n    <span class=\"kd\">end</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">has_path_from_to.composite</span> <span class=\"n\">iₘ</span> <span class=\"n\">p_α</span> <span class=\"n\">p_ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"gr\">sorry</span> <span class=\"c1\">-- ?</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>\n<p>The goal state at the <code>sorry</code> is: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ι</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span>\n<span class=\"n\">g</span> <span class=\"n\">g'</span><span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span>\n<span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">:</span> <span class=\"n\">ι</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">g.edges</span> <span class=\"bp\">=</span> <span class=\"n\">g'.edges</span>\n<span class=\"n\">edges_inv_path_inv</span><span class=\"o\">:</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"bp\">→</span> <span class=\"n\">g'.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span>\n<span class=\"n\">iₘ</span><span class=\"o\">:</span> <span class=\"n\">ι</span>\n<span class=\"n\">p_α</span><span class=\"o\">:</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">iₘ</span>\n<span class=\"n\">p_ω</span><span class=\"o\">:</span> <span class=\"n\">g.has_path_from_to</span> <span class=\"n\">iₘ</span> <span class=\"n\">i'</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">g'.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span>\n</code></pre></div>\n<p>I thought it would be possible to inductively use <code>edges_inv_path_inv </code> on <code>p_α</code> and <code>p_ω</code>, since they are \"smaller\" than <code>g.has_path_from_to i i'</code>. But If I try to use <code>edges_inv_path_inv p_α </code>, Lean complains that <code>p_α</code> doesn't have the required type <code>g.has_path_from_to i i'</code>, which makes sense from how <code>edges_inv_path_inv</code> is defined in the goal state.<br>\nWhat I don't get is, of what use the recursive <code>edges_inv_path_inv</code> is, if it can only be used on <code>g.has_path_from_to i i'</code>?</p>",
        "id": 222747814,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610643855
    },
    {
        "content": "<p>Try moving <code>i i'</code>right of the colon, recursion can only happens on those arguments in lean.</p>",
        "id": 222748261,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610644028
    },
    {
        "content": "<p>You need to generalize on your <code>i i'</code></p>",
        "id": 222748270,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610644032
    },
    {
        "content": "<p>Awesome that worked! Now I have: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">edges_inv_path_inv</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g.edges</span> <span class=\"bp\">=</span> <span class=\"n\">g'.edges</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">g'.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">(</span><span class=\"n\">has_path_from_to.direct</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- doesn't matter</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">(</span><span class=\"n\">has_path_from_to.composite</span> <span class=\"n\">iₘ</span> <span class=\"n\">p_α</span> <span class=\"n\">p_ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">p_α'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">edges_inv_path_inv</span> <span class=\"n\">p_α</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">p_ω'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">edges_inv_path_inv</span> <span class=\"n\">p_ω</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">has_path_from_to.composite</span> <span class=\"n\">iₘ</span> <span class=\"n\">p_α'</span> <span class=\"n\">p_ω'</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>\n<p>The problem I have now though is that I get ...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span> <span class=\"n\">is</span> <span class=\"n\">decreasing</span>\n</code></pre></div>\n<p>... for both invocations of <code>edges_inv_path_inv</code>.<br>\nHow can I prove that <code>p_α</code> and <code>p_ω</code> are \"smaller\" than <code>has_path_from_to.composite iₘ p_α p_ω</code>? I thought this inductive approach would automatically imply that.</p>",
        "id": 222753252,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610645934
    },
    {
        "content": "<p>just deleting this fake tactic block should help</p>",
        "id": 222754212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610646352
    },
    {
        "content": "<p><code>... := has_path_from_to.composite iₘ (edges_inv_path_inv p_α) (edges_inv_path_inv p_ω)</code></p>",
        "id": 222754337,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610646391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20Over.20Inductive.20Prop/near/222754212\">said</a>:</p>\n<blockquote>\n<p>just deleting this fake tactic block should help</p>\n</blockquote>\n<p>Nope, that didn't work <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span> I'll try to get a MWE going...</p>",
        "id": 222754564,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610646485
    },
    {
        "content": "<p>well, at least the nonworking proof is shorter now</p>",
        "id": 222754646,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610646521
    },
    {
        "content": "<p>Ok, this produces the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">digraph</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">digraph</span>\n\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">has_edge_from_to</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">has_path_from_to</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"n\">direct</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g.has_edge_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">composite</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">iₘ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">iₘ</span> <span class=\"bp\">→</span> <span class=\"n\">has_path_from_to</span> <span class=\"n\">iₘ</span> <span class=\"n\">i'</span> <span class=\"bp\">→</span> <span class=\"n\">has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span>\n\n  <span class=\"kd\">lemma</span> <span class=\"n\">edges_inv_path_inv</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g.edges</span> <span class=\"bp\">=</span> <span class=\"n\">g'.edges</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">g'.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">(</span><span class=\"n\">has_path_from_to.direct</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">(</span><span class=\"n\">has_path_from_to.composite</span> <span class=\"n\">iₘ</span> <span class=\"n\">p_α</span> <span class=\"n\">p_ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n        <span class=\"k\">have</span> <span class=\"n\">p_α'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">edges_inv_path_inv</span> <span class=\"n\">p_α</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">p_ω'</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">edges_inv_path_inv</span> <span class=\"n\">p_ω</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">has_path_from_to.composite</span> <span class=\"n\">iₘ</span> <span class=\"n\">p_α'</span> <span class=\"n\">p_ω'</span>\n      <span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">digraph</span>\n</code></pre></div>",
        "id": 222757088,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610647418
    },
    {
        "content": "<p>The equation compiler seems not to understand that structural recursion should be happening here</p>",
        "id": 222757975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610647751
    },
    {
        "content": "<p>You can start like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">edges_inv_path_inv</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g.edges</span> <span class=\"bp\">=</span> <span class=\"n\">g'.edges</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">g'.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">intros</span> <span class=\"n\">i₀</span> <span class=\"n\">i'₀</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">h'</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">iₘ</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">IH₁</span> <span class=\"n\">IH₂</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222758012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610647768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Proof.20Over.20Inductive.20Prop/near/222758012\">said</a>:</p>\n<blockquote>\n<p>You can start like this</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">edges_inv_path_inv</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g.edges</span> <span class=\"bp\">=</span> <span class=\"n\">g'.edges</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">g.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">g'.has_path_from_to</span> <span class=\"n\">i</span> <span class=\"n\">i'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"n\">intros</span> <span class=\"n\">i₀</span> <span class=\"n\">i'₀</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">h'</span> <span class=\"n\">i</span> <span class=\"n\">i'</span> <span class=\"n\">iₘ</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">IH₁</span> <span class=\"n\">IH₂</span><span class=\"o\">,</span>\n <span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Awesome, I was able to prove it from there. Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> !</p>",
        "id": 222758504,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1610647972
    }
]