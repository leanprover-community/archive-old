[
    {
        "content": "<p>So there is a statement in the tutorial</p>\n<blockquote>\n<p>The macro h â–¸ e uses more effective heuristics for computing this implicit parameter, and often succeeds in situations where applying Eq.subst fails.</p>\n</blockquote>\n<p>I don't understand what is the underlying mechanism or semantics of  â–¸ that is different from Eq.subst</p>",
        "id": 305562865,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666458828
    },
    {
        "content": "<p>The function is just <code>Eq.subst</code> (or <code>Eq.substr</code>, but that's not super important). The difference is in the <em>elaborator</em>, the thing that decides how to fill in the higher order argument <code>motive</code> to the <code>Eq.subst</code> application. The generic elaborator for applying functions uses a different heuristic which is based on matching the goal against an application, while the <code>\\t</code> elaborator uses a heuristic more similar to <code>rw</code>, where it takes the entire goal and replaces all occurrences of the LHS of the provided equality with the variable</p>",
        "id": 305563875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666459477
    },
    {
        "content": "<p>so the <code> â–¸ </code> acts as a tactic, is that what you are trying to say because it does some magic underneath by replacing all occurrences of the LHS</p>",
        "id": 305572748,
        "sender_full_name": "Shubham Kumar",
        "timestamp": 1666465784
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 305581054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1666469104
    },
    {
        "content": "<p>I think it is more accurate to say that it acts as semantic sugar where the de-sugaring depends on context a bit.  I  think it uses a macro, and I donâ€™t think it technically goes through the tactic framework, but I could be mistaken on the difference.  In particular, tactics are not saved, in Lean, but notation, and some other forms of semantic sugar are.  In this case at least some of the information about <code>â–¸</code> is saved while other parts seem to be rewritten before saving the proof.</p>\n<p>For a really straight forward proof, it saves it internally as I type it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">abEq</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">):</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ab</span> <span class=\"bp\">â–¸</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">abEq</span>\n<span class=\"c1\">-- def abEq : (A B : Type) â†’ A â†’ A = B â†’ B :=</span>\n<span class=\"c1\">-- fun A B a ab =&gt; ab â–¸ a</span>\n</code></pre></div>\n<p>However, if I use the equality in the opposition order, then Lean swaps the order of the equalities as it saves the proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">baEq</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ba</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"o\">):</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ba</span> <span class=\"bp\">â–¸</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">baEq</span>\n<span class=\"c1\">-- def baEq : (A B : Type) â†’ A â†’ B = A â†’ B :=</span>\n<span class=\"c1\">-- fun A B a ba =&gt; (_ : A = B) â–¸ a</span>\n</code></pre></div>\n<p>The <code>_</code> is just pretty printing which hides certain proofs when pretty printing.  To see the proof, we can change the pretty printer settings:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs</span> <span class=\"n\">true</span>     <span class=\"c1\">-- to see proofs of Eq.symm</span>\n<span class=\"k\">#print</span> <span class=\"n\">baEq</span>\n<span class=\"c1\">-- def baEq : (A B : Type) â†’ A â†’ B = A â†’ B :=</span>\n<span class=\"c1\">-- fun A B a ba =&gt; Eq.symm ba â–¸ a</span>\n</code></pre></div>\n<p>The remaining <code>â–¸</code> are notation for <code>Eq.rec</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>  <span class=\"c1\">-- to remove â–¸</span>\n<span class=\"k\">#print</span> <span class=\"n\">baEq</span>\n<span class=\"c1\">-- def baEq : (A B : Type) â†’ A â†’ Eq B A â†’ B :=</span>\n<span class=\"c1\">-- fun A B a ba =&gt; Eq.rec a (Eq.symm ba)</span>\n</code></pre></div>\n<p><code>Eq.rec</code> (the built in recursor for equality) has a lot of implicit parameters which are filled in automatically:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span>   <span class=\"c1\">-- to see implicit params</span>\n<span class=\"k\">#print</span> <span class=\"n\">baEq</span>\n<span class=\"c1\">-- def baEq : (A B : Type) â†’ A â†’ @Eq Type B A â†’ B :=</span>\n<span class=\"c1\">--fun A B a ba =&gt; @Eq.rec Type A (fun x h =&gt; x) a B (@Eq.symm Type B A ba)</span>\n</code></pre></div>\n<p>This feature is discussed a bit more in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Eq#doc\">docs4#Eq</a> and in <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality\">Equality section of the manual</a>.</p>",
        "id": 305657892,
        "sender_full_name": "Jason Rute",
        "timestamp": 1666528231
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"115715\">@Jason Rute</span> that makes it a little bit clearer</p>",
        "id": 305708424,
        "sender_full_name": "Shubham Kumar ðŸ¦€ (he/him)",
        "timestamp": 1666558811
    }
]