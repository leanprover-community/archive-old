[
    {
        "content": "<p>Hi! I want to write a function that returns a type, but I wanted to guarantee that this type is always Inhabited. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but this syntax is wrong. I thought maybe something with a Sigma type could work, but I didn't have success. I am using this function in a system and I need to have an element of the returned type to use. Right now, as a temporary solution, I made f return a dependent pair, with the type and an element of that type, but this is a bit cumbersome. Is there a way to return a type that belongs to a given type class?</p>",
        "id": 283019665,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1653016425
    },
    {
        "content": "<p>Are you absolutely sure you want to return a type? This is almost always a mistake</p>",
        "id": 283019728,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653016475
    },
    {
        "content": "<p>You can't guarantee the type is inhabited within the function itself, but once you define <code>f</code>, you can prove <code>∀ n, inhabited (f n)</code> as a theorem</p>",
        "id": 283019770,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653016521
    },
    {
        "content": "<p>oh, I see... but the theorem doesn't allow me to recover an element of <code>f n</code> for a fixed <code>n</code>, does it?</p>",
        "id": 283019839,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1653016597
    },
    {
        "content": "<p><code>inhabited</code> is data, so you could recover it</p>",
        "id": 283019870,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653016663
    },
    {
        "content": "<p>But a better approach would be to define a separate function <code>Π n, f n</code> that gives the element outright</p>",
        "id": 283019885,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653016686
    },
    {
        "content": "<p>got it! thanks!</p>",
        "id": 283019898,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1653016720
    },
    {
        "content": "<p>the use case for returning a type is that I'm implementing a language inside of Lean... so I have a type corresponding to the deep embedding of it,  and I need to do the lift for a shallow embedding into native lean terms... the function that infers the corresponding type for a deep term in that language must return a Type in Lean</p>",
        "id": 283020064,
        "sender_full_name": "Tomaz Gomes Mascarenhas",
        "timestamp": 1653017036
    },
    {
        "content": "<p>Figured, that's the only time I've ever seen a function <code>ℕ → Type</code> being used</p>",
        "id": 283020153,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653017138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes Mascarenhas</span> has marked this topic as resolved.</p>",
        "id": 283020588,
        "sender_full_name": "Notification Bot",
        "timestamp": 1653017672
    },
    {
        "content": "<p>I think that every time we define a function on the naturals by recursion there's a function <code>nat -&gt; Type</code> being used (the motive). Granted, it's usually constant :-)</p>",
        "id": 283026810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653025569
    }
]