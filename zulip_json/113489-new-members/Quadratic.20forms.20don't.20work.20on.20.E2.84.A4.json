[
    {
        "content": "<p>Hi, I can't define a quadratic form over <code>ℤ</code>, but  I can over <code>ℚ</code>...</p>\n<p>Here is my code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">quadratic_form</span>\n\n<span class=\"c1\">-- this is the quadratic form x², and it works</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"bp\">@</span><span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">ℚ</span>  <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n\n <span class=\"c1\">-- this does not work</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"bp\">ℤ</span>  <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>The definition of <code>quadratic_form.proj</code> has the following signature in mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">proj</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">R₁</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R₁</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>with the assumtion <code>[comm_ring R₁]</code>. What is happening?</p>",
        "id": 204309721,
        "sender_full_name": "Eloi",
        "timestamp": 1595093552
    },
    {
        "content": "<p>What is the error?</p>",
        "id": 204310065,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595094065
    },
    {
        "content": "<p>The error is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span><span class=\"o\">))))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">quadratic_form</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">decidable_linear_ordered_add_comm_group</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">int_module</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_group</span> <span class=\"bp\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"bp\">ℤ</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span><span class=\"o\">))))</span>\n</code></pre></div>\n\n\n<p>There seem to be several typeclass diamonds here.</p>",
        "id": 204310145,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595094238
    },
    {
        "content": "<p>Hmmm... it's the olde <code>decidable_*</code> that strikes again <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 204310385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595094530
    },
    {
        "content": "<p>I wish we could fix all these problems in one go, but I guess it requires a complete rethinking of the way computation / decidability is handled <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> Most likely a problem for which a solution is not yet known.</p>",
        "id": 204310422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595094579
    },
    {
        "content": "<p>I'm not saying its the way to go, but if you just leave the type out lean looks happy</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">quadratic_form</span><span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"bp\">ℤ</span>  <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 204310505,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595094654
    },
    {
        "content": "<p>It works with <code>by convert</code> for some reason</p>",
        "id": 204310631,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595094823
    },
    {
        "content": "<p>I thought the problem would be with the module structure.</p>",
        "id": 204310677,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595094850
    },
    {
        "content": "<p>Does Lean know Z-module structures are unique?</p>",
        "id": 204310680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595094859
    },
    {
        "content": "<p>Hmmm, I don't recall seeing that</p>",
        "id": 204310693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595094898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Quadratic.20forms.20don't.20work.20on.20.E2.84.A4/near/204310680\">said</a>:</p>\n<blockquote>\n<p>Does Lean know Z-module structures are unique?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/module.lean#L683\">Yes!</a></p>",
        "id": 204310703,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1595094908
    },
    {
        "content": "<p>Couldn't we just define <code>*</code> on <code>int</code> to be whatever action comes from <code>add_comm_group</code>?</p>",
        "id": 204310772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595094966
    },
    {
        "content": "<p>You mean to make the two defeq? It would mean refactoring core...</p>",
        "id": 204312855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595097978
    }
]