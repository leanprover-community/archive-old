[
    {
        "content": "<p>I can't come up with a simpler example of this phenomenon, so I can only give you a slightly convoluted one. A complicated function I defined has one of its equations printed by Lean (by the <code>#print</code> command) as </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_of_sts_all_less_than_finite_func</span><span class=\"bp\">.</span><span class=\"n\">equations</span><span class=\"bp\">._</span><span class=\"n\">eqn_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">all_less_than</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set_to_subtype</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">subset_of_sts_all_less_than_finite_size_of</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_val</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">all_less_than</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">set_to_subtype</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x_property</span> <span class=\"o\">:</span> <span class=\"n\">x_val</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">subset_of_sts_all_less_than_finite_func</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">x_val</span><span class=\"o\">,</span> <span class=\"n\">x_property</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span>\n    <span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"n\">x_val</span> <span class=\"bp\">=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"n\">x_val</span> <span class=\"bp\">=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x_val</span> <span class=\"bp\">=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">subset_of_sts_all_less_than_finite_func</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">x_val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Note the <code>_</code>. These terms are fairly complicated and it doesn't seem like they can be inferred from the local context, so I'm confused as to why Lean represents them with <code>_</code>. Is this a a printing option? </p>\n<p>My problem is that these <code>_</code>'s propagate when trying to prove stuff about my definition, making it hard to complete proofs as an important part of the definition is just given as <code>_</code>.</p>",
        "id": 198263359,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590012516
    },
    {
        "content": "<p>As an example of the problem I'm having,  I have this in my local context,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">=</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">subset_of_sts_all_less_than_finite_func</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">y_val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</code></pre></div>\n\n\n<p>but <code>rw subtype.mk.inj_eq at h,</code> fails as <code>rewrite tactic failed, did not find instance of the pattern in the target expression\n  ⟨?m_3, ?m_4⟩ = ⟨?m_5, ?m_6⟩</code>, which doesn't make any sense, but I'm assuming it has something to do with the <code>_</code>'s.</p>",
        "id": 198263936,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590012805
    },
    {
        "content": "<p>try putting </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span>  <span class=\"n\">true</span>\n</code></pre></div>\n\n\n<p>it may show you what's wrong</p>",
        "id": 198264065,
        "sender_full_name": "Anas Himmi",
        "timestamp": 1590012865
    },
    {
        "content": "<p>It's because they are proofs (so terms whose type is a Prop) so any two proofs of the same prop are equal, hence sometimes not that relevant to see them all the time, this can be controlled with <code>set_option pp.proofs true</code></p>",
        "id": 198264077,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590012870
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">proofs</span> <span class=\"n\">true</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 198264108,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590012893
    },
    {
        "content": "<p>Any idea why <code>rw subtype.mk.inj_eq at h</code> isn't working?</p>",
        "id": 198264691,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590013231
    },
    {
        "content": "<p>Not without a <a href=\"https://github.com/leanprover-community/mathlib/wiki/Minimum-Working-Example-&#40;MWE&#41;\">#mwe</a> ;)</p>",
        "id": 198265070,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1590013473
    }
]