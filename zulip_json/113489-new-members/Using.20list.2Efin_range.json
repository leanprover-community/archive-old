[
    {
        "content": "<p>I need to prove the following lemma. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">fin_range</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">succ</span>  <span class=\"bp\">=</span>  <span class=\"mi\">0</span> <span class=\"bp\">::</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">fin_range</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>There are very few lemmas about <code>list.fin_range</code>, so it seems inevitable that any proof would have to work with the underlying <code>list.pmap</code>. Induction on <code>q</code> hasn't worked for me because that approach requires splitting the last element of a list from the rest. I've also tried hitting the goal with <code>ext</code> but that hasn't given me anything I can figure out how to work with. Does anyone have suggestions for how to proceed?</p>",
        "id": 206066838,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1596655477
    },
    {
        "content": "<p>I thought</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">eq_of_nth_le_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hBn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hAn</span> <span class=\"bp\">▸</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hBn</span> <span class=\"bp\">▸</span> <span class=\"n\">hi</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>might help, but I didn't prove that and even with it I couldn't make much progress. I'm not great at this stuff. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 206086071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596666724
    },
    {
        "content": "<p>that looks like an extensionality lemma to me</p>",
        "id": 206086315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596666908
    },
    {
        "content": "<p>is there anything like <code>list.nth_le_ext</code>?</p>",
        "id": 206086330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596666930
    },
    {
        "content": "<p><code>list.ext_le</code></p>",
        "id": 206086418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596666995
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">eq_of_nth_le_eq</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hAn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hBn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hAn</span> <span class=\"bp\">▸</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">hBn</span> <span class=\"bp\">▸</span> <span class=\"n\">hi</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">ext_le</span> <span class=\"o\">(</span><span class=\"n\">hAn</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hBn</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">hAn</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 206086556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596667102
    },
    {
        "content": "<p>only problem is that it doesn't help ;-)</p>",
        "id": 206086591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596667144
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pmap_map</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pmap</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">pmap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mem_map_of_mem</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">pmap</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">]]</span><span class=\"bp\">;</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fin_range</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">::</span> <span class=\"n\">map</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">fin_range</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fin_range</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_pmap</span><span class=\"o\">],</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">range_succ_eq_map</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pmap</span><span class=\"o\">],</span>\n  <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">pmap_map</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">pmap_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">list</span>\n</code></pre></div>",
        "id": 206087470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1596667807
    },
    {
        "content": "<p>I think a better strategy should be to use the fact that <code>list.map fin.val</code> is injective and use <code>range_succ_eq_map</code></p>",
        "id": 206087491,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596667819
    },
    {
        "content": "<p>oops too slow</p>",
        "id": 206087498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596667827
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ! With that we have a sorry-free proof that the canonical map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mi>q</mi></msup></mrow><annotation encoding=\"application/x-tex\">M^q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span></span></span></span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Λ</mi><mo stretchy=\"false\">(</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Lambda (M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Λ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> is multilinear.</p>",
        "id": 206092916,
        "sender_full_name": "Zhangir Azerbayev",
        "timestamp": 1596673208
    }
]