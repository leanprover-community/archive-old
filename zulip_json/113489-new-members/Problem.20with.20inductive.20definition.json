[
    {
        "content": "<p>Hi, I wrote the following code to get a subwalk of a walk, using the definitions in simple_graph.connectivity path of mathlib. However, I get error \"equation compiler failed to generate bytecode for 'subwalk._main'<br>\nnested exception message:<br>\ncode generation failed, VM does not have code for 'classical.choice'\" I tried adding noncomputable before the def, but then I get \"failed to prove recursive application is decreasing, well founded relation...\" What should I do? Am I doing the induction wrong?</p>\n<p>Thanks alot!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subwalk</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">),</span> <span class=\"n\">G.walk</span> <span class=\"n\">w</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">nil</span> <span class=\"n\">hw</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mem_support_nil_iff.1</span> <span class=\"n\">hw</span>\n<span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">hw</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">u</span><span class=\"bp\">=</span><span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">support</span> <span class=\"n\">at</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">list.eq_or_ne_mem_of_mem</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">hp</span><span class=\"o\">:</span><span class=\"n\">w</span><span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subwalk</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 305746509,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1666587182
    },
    {
        "content": "<p>Since you're constructing data, I suggest you do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">hw</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"bp\">▸</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 305746696,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666587410
    },
    {
        "content": "<p><code>by_cases</code> is using classical reasoning to generate the hypotheses and case-split for you, which makes it noncomputable. Regarding setting <code>noncomputable</code> leading to a well-founded recursion problem, it's possible that <code>finish</code> is somehow calling the nascent <code>subwalk</code> and that confuses the equation compiler.</p>",
        "id": 305746865,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666587545
    },
    {
        "content": "<p>Oh thank you, I hadn't realized the issue was coming from the finish, since the error was underlining in red the subwalk appearing higher in the proof, but that was indeed the issue. Thanks! As for your first comment, is there a specific advantage of working like that instead of in tactic mode exactly when building data?</p>",
        "id": 305747320,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1666587914
    },
    {
        "content": "<p>In general, tactic mode can create terms that are unfriendly for definitional equalities and complicate computation</p>",
        "id": 305747603,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666588140
    },
    {
        "content": "<p>Unless you use a very particular subset of tactics like <code>intro, refine, exact, have</code> etc</p>",
        "id": 305747627,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666588164
    },
    {
        "content": "<p>Ok thanks!</p>",
        "id": 305747745,
        "sender_full_name": "Jérémie Turcotte",
        "timestamp": 1666588240
    },
    {
        "content": "<p>One sec, I'll have an example for you of what to do</p>",
        "id": 305747820,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666588285
    },
    {
        "content": "<p>I was mistaken about using the <code>▸</code>, that is only for propositions</p>",
        "id": 305747844,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666588302
    },
    {
        "content": "<p>Ah, and the WF recursion isn't the <code>finish</code>, it's your reference of <code>subwalk</code> in the <code>suffices</code></p>",
        "id": 305747973,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666588415
    },
    {
        "content": "<p>I suggest looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/simple_graph.walk.drop_until/src\">src#simple_graph.walk.drop_until</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a vertex in the support of a path, give the path from (and including) that vertex to</span>\n<span class=\"sd\">the end. In other words, drop vertices from the front of a path until (and not including)</span>\n<span class=\"sd\">that vertex. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">drop_until</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">),</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">nil</span> <span class=\"n\">u</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mem_support_nil_iff.mp</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">r</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">u</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">u</span>\n  <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">cons</span> <span class=\"n\">r</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"n\">drop_until</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">h.cases_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">h'.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 305748071,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666588471
    },
    {
        "content": "<p>Because that's exactly what you want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">subwalk</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"n\">p.drop_until</span> <span class=\"n\">_</span> <span class=\"n\">hw</span>\n</code></pre></div>",
        "id": 305748191,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1666588548
    }
]