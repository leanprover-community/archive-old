[
    {
        "content": "<p>This must be a very FAQ, but what’s the equivalent of Coq’s <code>SearchAbout</code>? E.g. I want to find lemmas that mention one or more identifiers?</p>",
        "id": 267789485,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642023380
    },
    {
        "content": "<p><code>library_search</code>, <code>suggest</code>, or maybe just browsing the documentation? eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monotone\">docs#monotone</a></p>",
        "id": 267789700,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642023501
    },
    {
        "content": "<p>Hmm, close, but not quite what I was hoping for. For example, can I ask lean to show me all lemmas that  mention <code>(_ -&gt; bool) ≃ (_ -&gt; bool)</code> in their types?</p>",
        "id": 267798525,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642028024
    },
    {
        "content": "<p><code>#find</code> might work with wildcards</p>",
        "id": 267798789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642028183
    },
    {
        "content": "<p>I tried find and it didn't work <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span><br>\nI think the best we have is suggest</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">suggest</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>it seems like Coq's Search is better for this sort of thing</p>",
        "id": 267798848,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642028228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Often a regex search can turn up something. But <code>rg \".*→ bool.*≃.*→ bool\"</code> returns nothing.</p>",
        "id": 267827744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642053899
    },
    {
        "content": "<p>But one of the most powerful tools is the naming convention. In this case it's some sort of <code>congr</code> construction about <code>arrow</code>s. So I search for <code>def.*arrow_congr</code> and indeed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">equiv</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span>\n<span class=\"mi\">427</span><span class=\"o\">:</span><span class=\"kd\">@[congr, simps apply]</span> <span class=\"kd\">def</span> <span class=\"n\">arrow_congr</span> <span class=\"o\">{</span><span class=\"n\">α₁</span> <span class=\"n\">β₁</span> <span class=\"n\">α₂</span> <span class=\"n\">β₂</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">α₁</span> <span class=\"bp\">≃</span> <span class=\"n\">α₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">β₁</span> <span class=\"bp\">≃</span> <span class=\"n\">β₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"mi\">428</span><span class=\"bp\">-</span>  <span class=\"o\">(</span><span class=\"n\">α₁</span> <span class=\"bp\">→</span> <span class=\"n\">β₁</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">α₂</span> <span class=\"bp\">→</span> <span class=\"n\">β₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"mi\">429</span><span class=\"bp\">-</span><span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">e₂</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">e₁.symm</span><span class=\"o\">,</span>\n<span class=\"mi\">430</span><span class=\"bp\">-</span>  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">e₂.symm</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">e₁</span><span class=\"o\">,</span>\n<span class=\"o\">[</span><span class=\"n\">snip</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 267827959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1642054177
    },
    {
        "content": "<p>Perhaps maps to bool aren't found often because they don't come up often. I think conceptually, you're using the equiv of set a ~- set b when a ~- b, which I can't remember the name for right now</p>",
        "id": 267829393,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642055745
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.set_congr\">docs#equiv.set_congr</a>, nope that's not it</p>",
        "id": 267829465,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642055811
    },
    {
        "content": "<p>Nevermind too much the concrete question in this case. The lemma I was looking for doesn’t exist, because it’s unprovable in ZFC <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>. But I can make progress in other ways.  Thanks for helping, though!</p>",
        "id": 267848658,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1642069278
    },
    {
        "content": "<p>I think Joachim was looking for some kind of Hoogle (<a href=\"https://hoogle.haskell.org\">https://hoogle.haskell.org</a>) , but for lean.</p>",
        "id": 267849821,
        "sender_full_name": "Alcides Fonseca",
        "timestamp": 1642069951
    },
    {
        "content": "<p>The closest we have to that right now would be the <code>find</code> mentioned above.</p>",
        "id": 267849886,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642070009
    },
    {
        "content": "<p>Time for Loogle? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 267849966,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642070054
    },
    {
        "content": "<p>I've definitely been planning to look into that once doc-gen4 has all the other features <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 267850415,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642070326
    },
    {
        "content": "<p>The theoretical foundations and presentations provided by the author (<a href=\"https://github.com/ndmitchell/hoogle#background\">https://github.com/ndmitchell/hoogle#background</a>) are definitely worth a look btw.</p>",
        "id": 267850592,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1642070435
    }
]