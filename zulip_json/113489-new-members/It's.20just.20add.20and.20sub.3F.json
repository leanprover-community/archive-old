[
    {
        "content": "<p>Hi,<br>\nI'm a software guy trying to learn Lean. </p>\n<p>I think I have missed something obvious here. I would expect simp or some similar command do be able to <br>\nfix the example below or fail and prove that the equality is incorrect. What is a reasonable path forward?<br>\n(What tutorial to read?  How to reason with big but seemingly obvious reshuffle of add/sub?).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">a.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">-</span> <span class=\"n\">c.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span> <span class=\"bp\">-</span> <span class=\"n\">a.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                       <span class=\"n\">a.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n   <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266611117,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1641125086
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.linarith\">docs#tactic.linarith</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">-</span> <span class=\"n\">c.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span> <span class=\"bp\">-</span> <span class=\"n\">a.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">a.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266611223,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641125265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/It's.20just.20add.20and.20sub.3F/near/266611223\">said</a>:</p>\n<p>Awesome! I had only seen linarith in the context of inequalities so far.</p>",
        "id": 266611331,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1641125403
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#ring\">tactic#ring</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#abel\">tactic#abel</a> can also both prove this. Fun fact: linarith indeed does \"only\" do inequalities and proves this goal by showing both the the left hand side is <code>\\le</code> the right hand side, and vice-versa.</p>",
        "id": 266613056,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641128195
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#abel\">tactic#abel</a> is probably the right answer to the question of  how to deal with a seemingly obvious reshuffle of add and sub, indeed <code>abel</code> can prove this when we set up a similar goal over an arbitrary ring, not just the reals/complexes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a_re</span> <span class=\"n\">b_re</span> <span class=\"n\">c_re</span> <span class=\"n\">a_im</span> <span class=\"n\">b_im</span> <span class=\"n\">c_im</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a_re</span> <span class=\"bp\">*</span> <span class=\"n\">b_im</span> <span class=\"bp\">-</span> <span class=\"n\">c_re</span> <span class=\"bp\">*</span> <span class=\"n\">b_im</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c_im</span> <span class=\"bp\">*</span> <span class=\"n\">b_re</span> <span class=\"bp\">-</span> <span class=\"n\">a_im</span> <span class=\"bp\">*</span> <span class=\"n\">b_re</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">a_re</span> <span class=\"bp\">*</span> <span class=\"n\">b_im</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a_im</span> <span class=\"bp\">*</span> <span class=\"n\">b_re</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c_re</span> <span class=\"bp\">*</span> <span class=\"n\">b_im</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c_im</span> <span class=\"bp\">*</span> <span class=\"n\">b_re</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">abel</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The other two mentioned tactics don't manage this one, as <code>linarith</code> wants an ordering on the ring, and <code>ring</code> likes rings to be commutative.</p>",
        "id": 266613323,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641128537
    },
    {
        "content": "<p>I don't know what you're interested in but maybe this <a href=\"https://github.com/ImperialCollegeLondon/complex-number-game\">https://github.com/ImperialCollegeLondon/complex-number-game</a> might show you some techniques?</p>",
        "id": 266613558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641128934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/It's.20just.20add.20and.20sub.3F/near/266613558\">said</a>:</p>\n<blockquote>\n<p>I don't know what you're interested in but maybe this <a href=\"https://github.com/ImperialCollegeLondon/complex-number-game\">https://github.com/ImperialCollegeLondon/complex-number-game</a> might show you some techniques?</p>\n</blockquote>\n<p>Sure, i found it some days ago. I'm working on level 03 now.</p>",
        "id": 266617626,
        "sender_full_name": "Anders Larsson",
        "timestamp": 1641135519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"430763\">@Anders Larsson</span> <code>simp</code> can do this if you give it enough lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">a.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">-</span> <span class=\"n\">c.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span> <span class=\"bp\">-</span> <span class=\"n\">a.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                       <span class=\"n\">a.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">c.re</span> <span class=\"bp\">*</span> <span class=\"n\">b.im</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">c.im</span> <span class=\"bp\">*</span> <span class=\"n\">b.re</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Even though <code>repeat { rw mul_comm }</code> would run forever, <code>simp</code> is smarter and chooses some sort of normal form.</p>",
        "id": 266618226,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1641136391
    }
]