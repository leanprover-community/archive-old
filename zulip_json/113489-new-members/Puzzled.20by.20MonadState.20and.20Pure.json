[
    {
        "content": "<p>Lean4 has an interesting implementation of strongly connected components in Util/SCC.lean that begins like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.HashMap</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.SCC</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Very simple implementation of Tarjan's SCC algorithm.</span>\n<span class=\"cm\">  Performance is not a goal here since we use this module to</span>\n<span class=\"cm\">  compiler mutually recursive definitions, where each function</span>\n<span class=\"cm\">  (and nested let-rec) in the mutual block is a vertex.</span>\n<span class=\"cm\">  So, the graphs are small. -/</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Data</span> <span class=\"n\">where</span>\n  <span class=\"n\">index</span><span class=\"bp\">?</span>   <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"n\">lowlink</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"n\">onStack</span>  <span class=\"o\">:</span> <span class=\"n\">Bool</span>       <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">State</span> <span class=\"n\">where</span>\n  <span class=\"n\">stack</span>     <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">nextIndex</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">data</span>      <span class=\"o\">:</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">α</span> <span class=\"n\">Data</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"n\">sccs</span>      <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">StateM</span> <span class=\"o\">(</span><span class=\"n\">State</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">getDataOf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">Data</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">get</span>\n  <span class=\"k\">match</span> <span class=\"n\">s.data.find</span><span class=\"bp\">?</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">d</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>When I read <code>getDataOf</code>, it is unclear to me how this code typechecks properly.<br>\nVSCode seems to have determined somehow that <code>M</code> is an instance of <code>MonadState</code> <br>\nso that <code>get</code> is really <code>MonadState.get</code> and that <code>M</code> is also an instance of <code>Pure</code> so that <code>pure</code> is really <code>Pure.pure</code>.</p>\n<p>Can someone explain this?</p>\n<p>It would be really nice if the VS Code tooling could explain what makes a reference resolve the way it does and why some code typechecks properly.</p>",
        "id": 289917694,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1658113110
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Control/State.html#instMonadStateOfStateT\">Here's the instance definition</a> for <code>StateM</code> being a <code>MonadStateOf</code> (which gives <code>MonadState</code> by another instance). Click \"source\" to the right to see where it is inside the prelude.</p>",
        "id": 289918747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658114523
    },
    {
        "content": "<p>These docs also have lists of instances when you go to a class, so that can help you find where things are actually defined.</p>",
        "id": 289918756,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658114551
    },
    {
        "content": "<blockquote>\n<p>VSCode seems to have determined somehow that <code>M</code> is an instance of <code>MonadState</code></p>\n</blockquote>\n<p>My guess is that the determination is based on <code>abbrev M := StateM (State α)</code></p>",
        "id": 289918771,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1658114586
    },
    {
        "content": "<p>It's helpful to know some Haskell to be able to deal with this part of the library, since it's still rather light on documentation, and these are all Haskell-like idioms.</p>",
        "id": 289918829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658114680
    },
    {
        "content": "<p>I think it's just typeclass inference. <code>StateT</code> has an instance of <code>MonadStateOf</code>,  which is <code>MonadState</code> where the state type is set as an output parameter.</p>",
        "id": 289918861,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658114727
    },
    {
        "content": "<p>Oh they beat me to it.</p>",
        "id": 289918871,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658114747
    },
    {
        "content": "<p>The point of <code>StateM</code> is that you can use <code>get</code> to get the \"current\" <code>State α</code> value and then <code>put</code> to change it for code that runs \"after.\" It's a functional programming trick to get something like mutable state.</p>",
        "id": 289918944,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658114857
    },
    {
        "content": "<p>There are some spartan trace facilities, like <code>set_option trace.Meta.synthInstance</code> and some other ones discoverable via autocomplete if you type <code>set_option trace.</code></p>",
        "id": 289919007,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1658114977
    },
    {
        "content": "<p>Concretely, <code>StateM</code> is a way to concisely write code for functions that have types like <code>σ → α × σ</code>, where <code>σ</code> is the type for some state that you'd otherwise have to thread through everything manually.</p>",
        "id": 289919056,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658115016
    },
    {
        "content": "<p>(Making things more complicated, <code>StateM</code> is defined in terms of <code>StateT</code>, a so-called \"monad transformer,\" where you can compose multiple monad transformers to achieve multiple effects.)</p>",
        "id": 289919069,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658115099
    }
]