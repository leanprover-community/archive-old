[
    {
        "content": "<p>I have an explicit surjective map <code>p : X -&gt; Y</code> and a map <code>g : X -&gt; T</code> such that <code>p(x) = p(x')</code> implies <code>g(x)=g(x')</code>; how can I define the unique function <code>f : Y -&gt; T</code>such that <code>f o p = g</code>? </p>\n<p>I can do it like this, but I am certain that there is a simpler way ? Is it necessary to pass through the <code>quotient</code> infrastructure ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">function</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">factor</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hpg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">surjective.has_right_inverse</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">comp</span> <span class=\"n\">g</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_app</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hpg</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263919862,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638822339
    },
    {
        "content": "<p>Passing through <code>quotient</code> still wouldn't give you a map out of <code>Y</code>, right.</p>",
        "id": 263920029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638822423
    },
    {
        "content": "<p>[usual <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> moan -- your code doesn't paste]</p>",
        "id": 263920173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638822499
    },
    {
        "content": "<p>You don't need the <code>simp only [comp_app],</code>, it's definitional.</p>",
        "id": 263920379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638822610
    },
    {
        "content": "<p>The <code>quotient</code> infrastructure would give you a map out of <code>quotient R</code> for some R :-/</p>",
        "id": 263920614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638822754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/passing.20to.20the.20quotient.20via.20surjective.20maps/near/263920173\">said</a>:</p>\n<blockquote>\n<p>[usual <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> moan -- your code doesn't paste]</p>\n</blockquote>\n<p>It was copy pasted from VSCode, but I forgot to include the <code>open function</code> line, sorry !</p>",
        "id": 263920673,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638822794
    },
    {
        "content": "<p>And the <code>import tactic</code> line ;-)</p>",
        "id": 263920785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638822854
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.function.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">function.surjective.lift</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">hp.has_right_inverse.some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">function.surjective.lift_eq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">hp.lift</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"bp\">$</span> <span class=\"n\">hp.has_right_inverse.some_spec</span> <span class=\"n\">_</span> <span class=\"c1\">-- edit to include final `_`</span>\n</code></pre></div>",
        "id": 263920789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638822860
    },
    {
        "content": "<p>Johan is making an API for surjections analogous to the API for <code>quotient</code>.</p>",
        "id": 263920844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638822905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/passing.20to.20the.20quotient.20via.20surjective.20maps/near/263920785\">said</a>:</p>\n<blockquote>\n<p>And the <code>import tactic</code> line ;-)</p>\n</blockquote>\n<p>What is this line ? I fear I'm missing some magic here…</p>",
        "id": 263920850,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638822908
    },
    {
        "content": "<p>You can't use the <code>ext</code> tactic if you don't import it.</p>",
        "id": 263920887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638822929
    },
    {
        "content": "<p><code>import tactic</code> at the top of the file gives you (almost) all tactics.</p>",
        "id": 263920908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638822941
    },
    {
        "content": "<p>But I don't have this line at the top of my file !</p>",
        "id": 263920923,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638822953
    },
    {
        "content": "<p>Right, so you should see errors.</p>",
        "id": 263920973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638822967
    },
    {
        "content": "<p>I had errors when I copy-pasted your snippet.</p>",
        "id": 263920996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638822977
    },
    {
        "content": "<p><code>use</code> is also not a core lean tactic</p>",
        "id": 263921014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638822986
    },
    {
        "content": "<p>Nor is <code>obtain</code></p>",
        "id": 263921064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823008
    },
    {
        "content": "<p>Capisco, I had an <code>import data.fintype.basic</code> (because my <code>sandbox.lean </code> file has many purposes) and I presume that this <code>import</code> was doing the job!</p>",
        "id": 263921258,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638823084
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.ker\">docs#setoid.ker</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.quotient_ker_equiv_of_surjective\">docs#setoid.quotient_ker_equiv_of_surjective</a> would be helpful to relate the surjective map to the quotient api in this case.</p>",
        "id": 263921269,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638823090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <br>\nYour version renders an error, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">Exists.some_spec</span> <span class=\"n\">hp.has_right_inverse</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">Exists.some_spec</span> <span class=\"n\">hp.has_right_inverse</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">right_inverse</span> <span class=\"o\">(</span><span class=\"n\">Exists.some</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n</code></pre></div>\n<p>(but I don't understand it, because I don't understand the <code>$ ... $</code>constructions (and can't find their explanation in the docs, while I'm sure I've read it once!)</p>",
        "id": 263922191,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638823605
    },
    {
        "content": "<p><code>f $ g x</code> = <code>f (g x)</code>. It just reduced the amount of <code>()</code>.</p>",
        "id": 263922275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823650
    },
    {
        "content": "<p>So <code>f $ g $ h x</code> = <code>f (g (h x))</code></p>",
        "id": 263922315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823674
    },
    {
        "content": "<p>My code compiles on my side. So I don't know what's wrong.</p>",
        "id": 263922362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823704
    },
    {
        "content": "<p>It doesn't compile on today's master</p>",
        "id": 263922398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638823733
    },
    {
        "content": "<p>Oops, let me update my lean</p>",
        "id": 263922415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823745
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- rano% git show | head -1</span>\n<span class=\"c1\">-- commit 812431404d4669d4e055e2a790e964068ba5ac92</span>\n<span class=\"c1\">-- rano% cat src/demo.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic.function.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">function.surjective.lift</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n<span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">hp.has_right_inverse.some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">function.surjective.lift_eq</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">hp.lift</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hg</span> <span class=\"bp\">$</span> <span class=\"n\">hp.has_right_inverse.some_spec</span> <span class=\"n\">_</span>\n<span class=\"c1\">-- rano% lean src/demo.lean</span>\n<span class=\"c1\">-- rano%</span>\n</code></pre></div>",
        "id": 263922782,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823932
    },
    {
        "content": "<p>I seem to be on latest master, end Lean compiles this without error</p>",
        "id": 263922826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823952
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">hg</span> <span class=\"o\">(</span><span class=\"n\">Exists.some_spec</span> <span class=\"n\">hp.has_right_inverse</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">Exists.some_spec</span> <span class=\"n\">hp.has_right_inverse</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">right_inverse</span> <span class=\"o\">(</span><span class=\"n\">Exists.some</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n</code></pre></div>\n<p>also on commit <code>812431404d4669d4e055e2a790e964068ba5ac92</code></p>",
        "id": 263922910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638824013
    },
    {
        "content": "<p>Error on the <code>$</code> in <code>funext $ λ x, hg $ hp.has_right_inverse.some_spec</code></p>",
        "id": 263923003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638824049
    },
    {
        "content": "<p>Is has_right_inverse.some just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.surj_inv\">docs#function.surj_inv</a>?</p>",
        "id": 263923022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638824065
    },
    {
        "content": "<p>Oh lol your first post doesn't work and your second one does</p>",
        "id": 263923077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638824099
    },
    {
        "content": "<p>The first time you posted you missed off the final <code>_</code></p>",
        "id": 263923267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638824188
    },
    {
        "content": "<p>Oops, copy-paste-error :sorry:</p>",
        "id": 263923351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638824234
    }
]