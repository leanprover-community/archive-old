[
    {
        "content": "<p>I keep running into excessive memory consumption errors, and I've been unable to find a fix after scrolling through ZulipChat for a while, so I think maybe something about my workflow is incorrect: In short, I'm working on a mathlib project with some minor edits to algebra/groups/defs.lean. Is the following correct?</p>\n<ol>\n<li>I cloned mathlib using <code>leanproject get mathlib</code> - is this the right approach?</li>\n<li>After making some edits to algebra/group/defs.lean I shut down VS Code and rebuilt the olean using <code>lean --make src/alegbra/group.defs.lean</code> - is this the right approach?</li>\n</ol>\n<p>I've done the above and a number of other trouble-shooting steps I found in ZulipChat, but I still get an orange bar, then eventually a lot of \"excessive memory consumption detected at 'expression traversal'\" errors. For reference, <code>git status</code> and <code>leanproject check</code> look fine. What am I doing wrong? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 262747515,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1637883053
    },
    {
        "content": "<p>The file you're editing is really high up in the import heirarchy, so the moment you edit it, hundreds of later files which import this file either directly or indirectly need to be recompiled. Chaos hence ensues (it would take about 2 hours on a regular machine to recompile all the files).</p>",
        "id": 262747538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637883119
    },
    {
        "content": "<p>If you're absolutely sure you want to be editing this file (e.g. you want to make a PR to this file) then I would recommend closing all other files and then closing and re-opening VS Code.</p>",
        "id": 262747587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637883156
    },
    {
        "content": "<p>A1: yes it's correct. A2: the command you posted seems to have a typo but if you meant <code>lean --make src/algebra/group/defs.lean</code> then this will only recompile that one file, and not all of the hundreds of files which depend on it and also need to be recompiled.</p>",
        "id": 262747614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637883227
    },
    {
        "content": "<p>You might want to un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> by explaining why you want to edit such a fundamental file. Can you get away with leaving the file alone and just adding the things you want to add in a different file?</p>",
        "id": 262747685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637883322
    },
    {
        "content": "<p>Fair points. Probably there is a way to edit a different file to get a similar result. I've been working on learning meta programming, and in particular for a project that involves creating a term rewriter for commutative groups. As part of this I've been exploring <code>abel</code>, but learned recently that there have been some bugs reported. So as part of trying to better understand both <code>abel</code> and metaprogramming I've been debugging <a href=\"https://github.com/leanprover-community/mathlib/issues/8456\">issue 8456</a>. I've made some progress, but wanted to test some potential ideas I had for fixes, which seemed to necessitate editing algebra/group/defs.lean.</p>",
        "id": 262747890,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1637883693
    },
    {
        "content": "<p>But, ya, the small changes that I've made could probably be added elsewhere. I'm basically just adding a typeclass instance to the file, so that could probably be handled in another way.</p>",
        "id": 262747941,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1637883737
    },
    {
        "content": "<p>Oh if you're only adding a typeclass as opposed to deleting or changing stuff then your life would be a lot easier if you just added it in another file. I should say I don't know much at all about tactics. Another possibility is to be very clear about which files you're using (maybe just <code>tactic.abel</code> and <code>algebra.group.defs</code>?) and then make sure that on the blue line at the bottom of VS Code it says \"checking visible files\" rather than \"checking project files\" , and make sure you have no other mathlib files open, and then edit <code>algebra.group.defs</code>, and then close VS Code and on the command line just recompile those two files with <code>lean --make</code>, and you will hopefully be able to get away with it.</p>",
        "id": 262748090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637883965
    },
    {
        "content": "<p>PS it has oft been pointed out that <code>abel</code> doesn't work for abelian multiplicative groups! I don't have a clue how easy this would be to implement though, I'm a mathematician.</p>",
        "id": 262748186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637884191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20workflow/near/262748090\">said</a>:</p>\n<blockquote>\n<p>Another possibility is to be very clear about which files you're using (maybe just <code>tactic.abel</code> and <code>algebra.group.defs</code>?) and then make sure that on the blue line at the bottom of VS Code it says \"checking visible files\" rather than \"checking project files\" </p>\n</blockquote>\n<p>Yup, just have 'checking visible files' on.</p>\n<blockquote>\n<p>and make sure you have no other mathlib files open, and then edit <code>algebra.group.defs</code>, and then close VS Code and on the command line just recompile those two files with <code>lean --make</code>, and you will hopefully be able to get away with it.</p>\n</blockquote>\n<p>Is that any different from what I said about about using <code>lean --make src/algebra/group/defs.lean</code>? Just for clarity - in case I'm missing something...</p>",
        "id": 262748335,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1637884443
    },
    {
        "content": "<p>You also need to compile <code>src/tactic/abel.lean</code>. I have no idea how long this will take but I am cautiously optimistic that it won't be too long.</p>",
        "id": 262748369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637884480
    },
    {
        "content": "<p>Hmm I dunno though, <code>tactic.abel</code> imports <code>tactic.norm_num</code> which imports stuff from <code>data.rat</code> which imports loads of <code>data.int</code> which imports <code>algebra.char_zero</code> which imports...</p>",
        "id": 262748398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637884555
    },
    {
        "content": "<p>This is probably your problem.</p>",
        "id": 262748409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637884563
    },
    {
        "content": "<p>Yes, that seems likely...</p>",
        "id": 262748448,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1637884577
    },
    {
        "content": "<p>Will try adding the typeclass elsewhere and see if that gets me anywhere. Thanks for the help!</p>",
        "id": 262748462,
        "sender_full_name": "Ashley Blacquiere",
        "timestamp": 1637884612
    },
    {
        "content": "<p>Yeah, <code>abel</code> is importing all of field theory which will all need to be recompiled if you edit the file containing the definition of a group.</p>",
        "id": 262748541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637884714
    },
    {
        "content": "<p>Of course one might also ask why this is! But I'm not the person to answer this.</p>",
        "id": 262748549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637884732
    },
    {
        "content": "<p>If you're just testing new lemmas and defs and instances, I'd do them in a new file like Kevin suggested. If you're editing abel, you can then add your new file to the list of imports.</p>",
        "id": 262749638,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637886269
    },
    {
        "content": "<p>Yeah, what I often do is work on a new file until the very last moment possible, and pile everything in there. Working within mathlib files directly can be fairly frustrating... one thing that is helpful is just keeping on restarting the server, or turning off checking whilst typing</p>",
        "id": 262750319,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637887251
    },
    {
        "content": "<p>it'd be nice if we had a feature like Coq where you can turn on a mode that only runs Lean when you press a specific keybind</p>",
        "id": 262750326,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637887276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/mathlib.20workflow/near/262750326\">said</a>:</p>\n<blockquote>\n<p>it'd be nice if we had a feature like Coq where you can turn on a mode that only runs Lean when you press a specific keybind</p>\n</blockquote>\n<p>The Coq IDE also has a feature that allows you to have full control over the code you want to process. It's very useful when I'm trying to prove something in the beginning of a module that was already fully verified (and correct)</p>",
        "id": 262797558,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1637933503
    },
    {
        "content": "<p>I just dump an <code>#exit</code> under my work when I'm goofing around at the top of a large file</p>",
        "id": 262798801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637934266
    },
    {
        "content": "<p>ooh, that's a nice tip</p>",
        "id": 262805489,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637938419
    }
]