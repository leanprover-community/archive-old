[
    {
        "content": "<p>I have the beginnings of a formalisation of prime factorisations (as discussed in this thread: <a href=\"#narrow/stream/113489-new-members/topic/Proof.20of.20Euler's.20product.20formula.20for.20totient\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Proof.20of.20Euler's.20product.20formula.20for.20totient</a>), <br>\ndefined as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime_factorization</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n.factors.to_finset</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">n.factors.count</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>where for example <code>(prime_factorization 1200)</code> is <code>{(2, 4), (3, 1), (5, 2)}</code> since 1200 = 2^4 * 3^1 * 5^2.</p>\n<p>It's not the last word on the subject and there's plenty more work to be done at some point — for example, on divisibility.  But it covers everything I need for the proof of Euler's product formula for the totient function.  The main result, used in that proof, is that for any multiplicative function <code>f</code> and any <code>n &gt; 0</code> we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">pk</span> <span class=\"k\">in</span> <span class=\"n\">prime_factorization</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">pk.1</span> <span class=\"bp\">^</span> <span class=\"n\">pk.2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Where does this material best belong?  Should I add this to <code>data/nat/prime</code>, which is already over 1000 lines?  Or perhaps in <code>number_theory/divisors</code>?  Or would it be better to start a new file?</p>",
        "id": 262459946,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637676526
    },
    {
        "content": "<p>Can you post your file on a branch somewhere quickly? What imports does it require upon?</p>\n<p>Also, I still think that it's better to have some form of function that turns a <code>list</code>/<code>multiset</code> (<code>nat.factors</code>) into a <code>finset</code> with value/m,ultiplicity, with your statement being <code>φ n = pk in (new_function_name n.factors), φ pk.1 ^ pk.2</code> as this is definitely a useful function.</p>",
        "id": 262465958,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637679195
    },
    {
        "content": "<p>Another way of spelling that would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prime_factorization</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n.factors</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finsupp</span>\n</code></pre></div>\n<p>and then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">prime_factorization.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 262466185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637679317
    },
    {
        "content": "<p>ahh, yes we did have this discussion before and I forgot</p>",
        "id": 262466260,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637679356
    },
    {
        "content": "<p>The nice thing about the <code>ℕ →₀ ℕ</code> approach is that you can do a lookup of a factor in a way that is awkward for the list of pairs</p>",
        "id": 262466382,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637679395
    },
    {
        "content": "<p>The downside is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.to_finsupp\">docs#multiset.to_finsupp</a> <code>: multiset α ≃+ (α →₀ ℕ)</code>  is noncomputable, but we could easily add a computable version if the type is instead <code>multiset α ≃ (α →₀ ℕ)</code> (it's the <code>+</code> that poisons it)</p>",
        "id": 262466558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637679480
    },
    {
        "content": "<p>why is the <code>+</code> noncomputable?</p>",
        "id": 262466997,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637679650
    },
    {
        "content": "<p>because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.has_add\">docs#finsupp.has_add</a> is noncomputable</p>",
        "id": 262467123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637679723
    },
    {
        "content": "<p>Because it uses <code>classical.dec_eq</code> instead of taking a <code>decidable</code> argument (which I think was a deliberate choice to appease mathematicians)</p>",
        "id": 262467172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637679747
    },
    {
        "content": "<p>As in the previous discussion, doing this via <code>multiset</code> has a number of disadvantages (amongst others, the involvement of <code>prime_multiset</code> which  \"should be burnt to the ground\").</p>\n<p>You're right that there should be a general function <code>list α → finset (α × ℕ)</code>, and then I can replace the terminology <code>prime_factorization</code> with the application of this function to <code>n.factors</code>.</p>",
        "id": 262469608,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637680744
    },
    {
        "content": "<p>I think the finsupp idea is probably best though, still; it's got a huge api, too, as polynomials are built using finsupps</p>",
        "id": 262474194,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637682754
    },
    {
        "content": "<p>My comment above doesn't mention <code>prime_multiset</code>, only the coercion of <code>factors</code> to a multiset</p>",
        "id": 262495253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637692210
    },
    {
        "content": "<p>I've made a small start on refactoring via a new function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">census</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">l.to_finset</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">l.count</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and posted what I have so far on <a href=\"https://github.com/leanprover-community/mathlib/tree/SP_factorizations_draft_v1\">branch#SP_factorizations_draft_v1</a>.</p>\n<p>But as you've suggested, I'll probably end up re-writing this in terms of finsupp instead.</p>",
        "id": 262533064,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637713620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/113489-new-members/topic/Prime.20factorizations/near/262495253\">said</a>:</p>\n<blockquote>\n<p>My comment above doesn't mention <code>prime_multiset</code>, only the coercion of <code>factors</code> to a multiset</p>\n</blockquote>\n<p>Ah, sorry, I'd conflated the general use of <code>multiset</code> with the specific approach of using <code>factor_multiset (n : ℕ+) : prime_multiset</code>.</p>",
        "id": 262534614,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637715115
    },
    {
        "content": "<p>Your census function can, of course, be written to have better general performance, instead of the n ^ 2 (?) performance it is now. But might be more difficult to prove things about it in more performant definitions</p>",
        "id": 262541620,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637723005
    },
    {
        "content": "<p>Ok, I've re-written this all in terms of <code>finsupp</code> (using the definition of <code>prime_factorization</code> proposed earlier in this thread by <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>) and posted it at <a href=\"https://github.com/leanprover-community/mathlib/tree/SP_factorizations_draft_v3\">branch#SP_factorizations_draft_v3</a>.  I have a few basic utility lemmas, a couple of lemmas about the prime factorizations of coprime <code>a</code> and <code>b</code>, and the main result that for a multiplicative function <code>f</code> we have <code>f n = n.prime_factorization.prod (λ p k, f(p ^ k))</code>.</p>",
        "id": 262832713,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1637958515
    }
]