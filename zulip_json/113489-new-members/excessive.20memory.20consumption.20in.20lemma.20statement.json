[
    {
        "content": "<p>Hmm, I’m getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span>\n</code></pre></div>\n<p>in one of my proofs, which is rather innocent looking. I bisected the proof lines (by inserting <code>sorry</code>s) to an application of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">refine</span> <span class=\"n\">bsupr_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>if I move the <code>sorry</code> above that line, it works. <br>\nI tried making that line fully explicit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">bsupr_le</span> <span class=\"o\">(</span><span class=\"n\">submonoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">ι</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">noncomm_pi_coprod</span> <span class=\"n\">ϕ</span> <span class=\"n\">hcomm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mrange</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">finset.univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ϕ</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mrange</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">,</span>\n</code></pre></div>\n<p>but that did not help.</p>\n<p>I know this is not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, but maybe any hints so far?</p>\n<p>Before some refactoring, the proof worked.</p>",
        "id": 274442815,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646680426
    },
    {
        "content": "<p>I think if making the line fully explicit didn't help, then I think a mwe or even the full code would be helpful</p>",
        "id": 274444057,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646680949
    },
    {
        "content": "<p>I'd be tempted to just work round it with a <code>suffices : _, { exact bsupr_le this }</code> instead of bothering figuring out why, though</p>",
        "id": 274444143,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646680984
    },
    {
        "content": "<p>also, is that first <code>_</code> an instance search?</p>",
        "id": 274444535,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646681162
    },
    {
        "content": "<p>Hmm, that work-around does not help, it seems</p>",
        "id": 274453978,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646685623
    },
    {
        "content": "<p>That first <code>_</code> is the <code>complete_lattice</code> instance for <code>submonoid</code>, but passing that explicitly doesn’t help either.</p>",
        "id": 274454075,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646685676
    },
    {
        "content": "<p>My hint is to stop saying \"I know this is not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>\" and to let others see the code (e.g. are we on a mathlib branch?) Timeouts are hard to debug and can be caused by several things, but there are experts here.</p>",
        "id": 274454611,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646685944
    },
    {
        "content": "<p>Absolutely right, I was about to do that, just making it a bit more presentable :-)</p>",
        "id": 274454766,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646686020
    },
    {
        "content": "<p>This is the line that causes issues:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/11744/files#diff-dbff33c4f941f049b533b60208287dccc7a966ba9123603f9e09b8ea5ab6dbdeR140\">https://github.com/leanprover-community/mathlib/pull/11744/files#diff-dbff33c4f941f049b533b60208287dccc7a966ba9123603f9e09b8ea5ab6dbdeR140</a><br>\n(branch <code>joachim/pi_nom</code>, file <code>src/group_theory/noncomm_pi_coprod.lean</code>, lemma <code>noncomm_pi_coprod_mrange</code>).<br>\nHelp appreciated!</p>",
        "id": 274455914,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646686579
    },
    {
        "content": "<p>Oh, I think I have it</p>",
        "id": 274456302,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646686777
    },
    {
        "content": "<p>Because of the refactoring I no longer have a <code>bsupr</code>, but just a <code>bsupr</code>. So if I use <code>supr_le</code> instead of <code>bsupr_le</code>, it works…</p>",
        "id": 274456416,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646686810
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 274456454,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1646686820
    },
    {
        "content": "<p>So this is probably one of those situations where what was happening was that Lean was trying to prove that <code>bsupr ... = supr ...</code> and kept unfolding and unfolding and for some reason never gave up and said \"wait a minute, this actually doesn't match\". I've certainly seen this sort of thing happen before.</p>",
        "id": 274458273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646687562
    },
    {
        "content": "<p>Also in general <code>bsupr_le</code>, <code>bUnion_subset</code> and a few lemmas around them are particularly brittle because of the precise order of elaboration. What's even more infuriating is that their duals, <code>binfi_le</code>, <code>bInter_subset</code>... don't elaborate the same way because the LHS and RHS are swapped.</p>",
        "id": 274474340,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646695914
    }
]