[
    {
        "content": "<p>Can someone help me figure out why there is an error here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span>\n<span class=\"kd\">class</span> <span class=\"n\">incidence_geometry</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">point</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">line</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u2</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">online</span> <span class=\"o\">:</span> <span class=\"n\">point</span> <span class=\"bp\">→</span> <span class=\"n\">line</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">LC1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">},</span> <span class=\"n\">a</span><span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">:</span><span class=\"n\">line</span><span class=\"o\">),</span> <span class=\"n\">online</span> <span class=\"n\">a</span> <span class=\"n\">L</span> <span class=\"bp\">∧</span> <span class=\"n\">online</span> <span class=\"n\">b</span> <span class=\"n\">L</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">incidence_geometry</span>\n\n<span class=\"kd\">variables</span><span class=\"o\">[</span><span class=\"n\">AxA</span><span class=\"o\">:</span> <span class=\"n\">incidence_geometry</span><span class=\"o\">]</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">AxA</span>\n<span class=\"kd\">def</span> <span class=\"n\">lineofpair</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">line</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">L</span><span class=\"o\">,</span><span class=\"n\">hL</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">LC1</span> <span class=\"n\">ab</span> <span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279438981,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1650387917
    },
    {
        "content": "<p>What's the error? You'll probably need to defer to the axiom of choice explicitly</p>",
        "id": 279439411,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650388011
    },
    {
        "content": "<p>How do I do that?</p>",
        "id": 279439513,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1650388036
    },
    {
        "content": "<p>by the way: <a href=\"https://github.com/ericrbg/leanFAQ/wiki/Common-Issues#why-shouldnt-i-be-using-set_theoryzfc-for-sets\">https://github.com/ericrbg/leanFAQ/wiki/Common-Issues#why-shouldnt-i-be-using-set_theoryzfc-for-sets</a></p>",
        "id": 279439863,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650388148
    },
    {
        "content": "<p>you should probably use <code>Exists.some</code> along with its friend <code>Exists.some_spec</code></p>",
        "id": 279439911,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650388171
    },
    {
        "content": "<p>you can use them with dot notation too, so try <code>let L := (LC1 ab).some, have hL := (LC1 ab).some_spec</code> and play around with that</p>",
        "id": 279440024,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650388209
    },
    {
        "content": "<p>Maybe let L</p>",
        "id": 279440063,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650388228
    },
    {
        "content": "<p>yes, I should probably add this to the FAQ. Andre, the diference between <code>let</code> and <code>have</code> is that <code>let</code> remembers what it was set to, but not <code>have</code>.</p>",
        "id": 279440154,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650388278
    },
    {
        "content": "<p>thank you!</p>",
        "id": 279440366,
        "sender_full_name": "Andre Hernandez-Espiet (Rutgers)",
        "timestamp": 1650388395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407577\">Andre Hernandez-Espiet (Rutgers)</span> has marked this topic as resolved.</p>",
        "id": 279440389,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650388407
    },
    {
        "content": "<p>Keep in mind that If you use <code>let</code> in a definition, you will have to deal with <code>let</code> in proofs about that definition too.</p>",
        "id": 279441092,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650388741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407577\">@Andre Hernandez-Espiet (Rutgers)</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">lineofpair</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">LC1</span> <span class=\"n\">ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lineofpair_spec</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">point</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ab</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">online</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">lineofpair</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">online</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">lineofpair</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">LC1</span> <span class=\"n\">ab</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span>\n</code></pre></div>\n<p>The trick with using <code>Exists.some</code> is to immediately use <code>Exists.some_spec</code> afterwards to make the API for your definition. After that you never need to think about <code>Exists.some</code> or <code>Exists.some_spec</code> again.</p>",
        "id": 279447058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650391524
    }
]