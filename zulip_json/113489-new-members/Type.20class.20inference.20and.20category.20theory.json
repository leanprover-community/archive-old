[
    {
        "content": "<p>I just began looking at the category theory part of the library and I do not understand how type class inference works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.single_obj</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.local_predicate</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Top</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">sheaf_to_Type</span> <span class=\"n\">X</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hs.inter</span> <span class=\"n\">ht</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">sheaf_to_Type</span> <span class=\"n\">X</span> <span class=\"n\">T</span> <span class=\"c1\">-- this does not typecheck</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>magically (I don't know how this is possible but it is super cool) <code>X : Top.{u}</code> gets recognized by type class inference as a topological space. But how do I go the other way around and get a standard topological space get recognized as an object in its category?</p>",
        "id": 271576325,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644586316
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Top.of\">docs#Top.of</a></p>",
        "id": 271578855,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644587444
    },
    {
        "content": "<p>Ok thank you!</p>",
        "id": 271582073,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644588760
    },
    {
        "content": "<p>Why does <code>sheaf_to_top</code> only require one argument? I would guess that it should behave as <code>presheaf_to_top</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n\n<span class=\"k\">#check</span> <span class=\"n\">presheaf_to_Top</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">sheaf_to_Top</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 271582211,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644588833
    },
    {
        "content": "<p>I think the idea is for you to write <code>sheaf_to_Top T : sheaf _ X</code> if you want to specify the <code>X</code> as well.</p>",
        "id": 271582617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644589005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20and.20category.20theory/near/271582617\">said</a>:</p>\n<blockquote>\n<p>I think the idea is for you to write <code>sheaf_to_Top T : sheaf _ X</code> if you want to specify the <code>X</code> as well.</p>\n</blockquote>\n<p>Why is that convenient? I mean why can <code>X</code> usually be inferred for sheaves?</p>",
        "id": 271584821,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644590034
    },
    {
        "content": "<p>I think the idea is that this definition is used primarily in the context where you have other objects of the category <code>sheaf (Type*) X</code>. For example, if <code>Y : sheaf (Type*) X</code>, then you would be able to write <code>sheaf_to_Top T \\hom Y</code> to obtain the type of morphisms of sheaves from this thing to the given sheaf <code>Y</code>.</p>",
        "id": 271585227,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644590205
    },
    {
        "content": "<p>Ok thanks a lot! One more question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sheaf_to_Top</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩))</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sheaf_to_Type</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">Y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩))</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"c1\">--typechecks</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"c1\">--does not</span>\n</code></pre></div>\n<p>I understand that this does not work because despite <code>f</code> is really a <code>continuous_map s Y</code>, lean sees it as a <code>(of Y).sheaf_to_Top.val.obj (op ⟨s, hs⟩)</code> which is basically a type synonym for <code>continuous_map s Y</code>. Is there some trick to get lean recognize <code>f</code> as a <code>continuous_map</code> so that the above notation works?</p>",
        "id": 271588063,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644591522
    },
    {
        "content": "<p>Use a type-ascription is the solution I suspect.</p>",
        "id": 271588398,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644591634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, I hit the exact same thing in <a href=\"https://github.com/leanprover-community/mathlib/pull/11968\">#11968</a>. I assume there's no real solution here because Lean has too much to unfold?</p>",
        "id": 271588468,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644591671
    },
    {
        "content": "<p>You could also add the appropriate <code>has_coe_to_fun</code> instance to help lean along...</p>",
        "id": 271588773,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644591816
    },
    {
        "content": "<p>I suspect you could also get it to work by making certain definitions reducible, but I'd have to see the output of <code>set_option trace.class_instances true</code> to be sure. For now my advice is to either add new <code>has_coe_to_fun</code> instances or use type ascriptions.</p>",
        "id": 271588864,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644591846
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20and.20category.20theory/near/271588773\">said</a>:</p>\n<blockquote>\n<p>You could also add the appropriate <code>has_coe_to_fun</code> instance to help lean along...</p>\n</blockquote>\n<p>Yes I mean I though about that too but my above question was wrong sorry, I do not only want to use the notation, I also want to use the whole API for <code>continuous_map</code></p>",
        "id": 271589015,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644591921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113489-new-members/topic/Type.20class.20inference.20and.20category.20theory/near/271588398\">said</a>:</p>\n<blockquote>\n<p>Use a type-ascription is the solution I suspect.</p>\n</blockquote>\n<p>What is type-ascription? haha</p>",
        "id": 271589075,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644591948
    },
    {
        "content": "<p>You can write <code>(f : continuous_map _ _) x</code></p>",
        "id": 271589240,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644592013
    },
    {
        "content": "<p>You should still be able to use the <code>continuous_map</code> api just fine since <code>f</code> is indeed a <code>continuous_map</code>.</p>",
        "id": 271589347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644592053
    },
    {
        "content": "<p>Oh I see thanks haha I did not think about that</p>",
        "id": 271589511,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644592103
    },
    {
        "content": "<p>Well it is not working for me</p>",
        "id": 271589669,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644592189
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.single_obj</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.local_predicate</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Top</span> <span class=\"n\">category_theory</span> <span class=\"n\">topological_space</span> <span class=\"n\">opposite</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sheaf_to_Top</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩))</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sheaf_to_Type</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">Y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩))</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"c1\">--typechecks</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">continuous_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"c1\">--does not</span>\n</code></pre></div>",
        "id": 271589760,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644592217
    },
    {
        "content": "<p>This does should be a mwe</p>",
        "id": 271589814,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1644592236
    },
    {
        "content": "<p>This looks like it's an issue with the type of <code>x</code> as opposed to <code>f</code>.</p>",
        "id": 271590430,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644592520
    },
    {
        "content": "<p>Hmmm... maybe not.</p>",
        "id": 271590938,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644592735
    },
    {
        "content": "<p>You have to fill in those underscores for it to work, else Lean is not unfolding them enough <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 271592507,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644593412
    },
    {
        "content": "<p><span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.single_obj</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.sheaves.local_predicate</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Top</span> <span class=\"n\">category_theory</span> <span class=\"n\">topological_space</span> <span class=\"n\">opposite</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sheaf_to_Top</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sheaf</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩))</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">sheaf_to_Type</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"n\">Y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩))</span>\n\n<span class=\"k\">#check</span> <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">):=</span> <span class=\"n\">f</span> <span class=\"k\">in</span> <span class=\"n\">e</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 271592950,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644593631
    },
    {
        "content": "<p>I can't get it to work with type ascriptions.</p>",
        "id": 271593023,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644593650
    }
]