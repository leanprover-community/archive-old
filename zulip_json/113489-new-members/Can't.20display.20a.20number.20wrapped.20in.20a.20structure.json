[
    {
        "content": "<p>The following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">wrap</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">wrapN</span> <span class=\"o\">:</span> <span class=\"n\">wrap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">wrapN.t</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>complains that <code>result type does not have an instance of type class 'has_repr', dumping internal representation</code> and prints <code>#0</code>.  Is there a way to make this print something nicer, short of reimplementing <code>has_repr</code> by hand for the structure <code>wrapN</code>?</p>",
        "id": 310544356,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668659835
    },
    {
        "content": "<p>Reimplementing <code>has_repr</code> by hand is about one line of work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_repr</span> <span class=\"n\">wrapN.t</span> <span class=\"o\">:=</span> <span class=\"n\">nat.has_repr</span>\n</code></pre></div>",
        "id": 310573519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668677725
    },
    {
        "content": "<p><code>attribute [reducible] wrapN</code> is also enough to make this work</p>",
        "id": 310573701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668677808
    },
    {
        "content": "<p>But I have to do it for every instance of <code>wrap</code>?</p>",
        "id": 310649083,
        "sender_full_name": "Mike Shulman",
        "timestamp": 1668703092
    },
    {
        "content": "<p>This feels like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem</p>",
        "id": 310650069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668703388
    },
    {
        "content": "<p>What do you mean by instance of wrap (instance is a keyword) are you varying wrapN or the class?</p>",
        "id": 310650163,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1668703418
    },
    {
        "content": "<p>Also your title is misleading; your code example isn't a number wrapped in a struct, this is a <em>type</em> wrapped in a struct which typeclass resolution can't see though.</p>",
        "id": 310650209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668703430
    },
    {
        "content": "<p>A \"number wrapped in a struct\" would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">wrap</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">wrap</span>  <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">wrap.mk</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 310650438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668703500
    }
]