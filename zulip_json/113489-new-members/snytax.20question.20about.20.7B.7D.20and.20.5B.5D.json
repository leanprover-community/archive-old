[
    {
        "content": "<p>The definition of <code>eq</code> looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>What is the significance of the []?  I guess it has something to do with an implicit argument \"that can be inferred by typeclass inference\" but I don't know what it might be referring to specifically.</p>\n<p>Similarly, the definition of 'list' *in the reference manual, though not in <code>core.init</code>, looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n</code></pre></div>\n<p>Again I guess that {} is a reference to an implicit argument so that you can say which particular kind of empty list you have (i.e. an empty list of natural numbers, for example.) But why isn't it used in the mathlib code?</p>",
        "id": 267753931,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1642007026
    },
    {
        "content": "<p>I don't remember where this is documented, but what these do is alter whether the arguments to <code>eq</code> or <code>list</code> themselves are implicit or not for the constructor.</p>",
        "id": 267754324,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642007166
    },
    {
        "content": "<p>Compare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">test1</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">eq</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">inductive test1.eq : Π {α : Sort u}, α → α → Prop</span>\n<span class=\"cm\">constructors:</span>\n<span class=\"cm\">test1.eq.refl : ∀ {α : Sort u} (a : α), eq a a</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test1</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">test2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">:</span> <span class=\"n\">eq</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">eq</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">inductive test2.eq : Π {α : Sort u}, α → α → Prop</span>\n<span class=\"cm\">constructors:</span>\n<span class=\"cm\">test2.eq.refl : ∀ {α : Sort u} {a : α}, eq a a</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">test2</span>\n</code></pre></div>",
        "id": 267754630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642007291
    },
    {
        "content": "<p>It doesn't seem that <code>{}</code> in the definition of <code>list</code> does anything anymore.</p>",
        "id": 267754843,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1642007395
    },
    {
        "content": "<p>It's weird that the syntax for <code>eq</code> is [] rather than {}, given the behavior you illustrate.</p>",
        "id": 267754957,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1642007431
    },
    {
        "content": "<p>this syntax has always comfused me</p>",
        "id": 267755425,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1642007625
    },
    {
        "content": "<p>Some previous discussion at <a href=\"https://leanprover-community.github.io/archive/stream/236446-Type-theory/topic/The.20.60.7B.7D.60.20annotation.20for.20inductive.20types.html\">https://leanprover-community.github.io/archive/stream/236446-Type-theory/topic/The.20.60.7B.7D.60.20annotation.20for.20inductive.20types.html</a>, see <a href=\"https://github.com/leanprover-community/lean/pull/175\">lean#175</a> too</p>",
        "id": 267755443,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1642007635
    },
    {
        "content": "<p>I take it back, it's weirder than I thought. The [] makes the argument explicit; the default is implicit.</p>",
        "id": 267755508,
        "sender_full_name": "Jeremy Teitelbaum",
        "timestamp": 1642007654
    },
    {
        "content": "<p>This syntax changed in the community version of Lean so it may not be (accurately) documented anywhere.</p>",
        "id": 267768085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642012993
    }
]