[
    {
        "content": "<p>Is it possible to prove that two subtypes are equal?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">subtype</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"gr\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 246325968,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1626530264
    },
    {
        "content": "<p>Yes, first show <code>p = q</code></p>",
        "id": 246326133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626530490
    },
    {
        "content": "<p>Which you should be able to do by combining <a href=\"https://leanprover-community.github.io/mathlib_docs/find/propext\">docs#propext</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/funext\">docs#funext</a></p>",
        "id": 246326189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626530561
    },
    {
        "content": "<p>Is there a notion of subtype (like subset)?</p>",
        "id": 277493886,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648859147
    },
    {
        "content": "<p>If you scroll up this thread you'll see that there's indeed a <code>subtype</code>. It's defined in core as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Remark: subtype must take a Sort instead of Type because of the axiom strong_indefinite_description. -/</span>\n<span class=\"kd\">structure</span> <span class=\"n\">subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But I'm not sure this is what you mean by \"subtype\"</p>",
        "id": 277494400,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1648859816
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype\">docs#subtype</a>)</p>",
        "id": 277494433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648859856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I mean subtype relation like subset relation.</p>",
        "id": 277494449,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648859874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Not this.</p>",
        "id": 277494513,
        "sender_full_name": "Victor Porton",
        "timestamp": 1648859909
    },
    {
        "content": "<p>Can you elaborate on what you mean?</p>",
        "id": 277494521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648859920
    },
    {
        "content": "<p>The answer is \"no\" in the way you'd probably want -- every term has a type and only one type, and if you had subset-like subtypes you'd have to allow terms with more than one type.</p>\n<p>Instead, what we have is that for every <code>set</code> (equivalently, every predicate on a type), there exists a type whose terms are, in some sense, in one-to-one correspondence with the elements of the set. There's an injective function from that type to the original type whose image consists of the elements of that <code>set</code>. One possible implementation of this type is <code>subtype</code>.</p>",
        "id": 277494533,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648859936
    },
    {
        "content": "<p>If you like to hear things like \"subobject classifiers\" I once <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Difference.20between.20set.20and.20subtype/near/269546712\">posted a diagram</a>.</p>",
        "id": 277494551,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648859962
    },
    {
        "content": "<p>In Lean/mathlib we use coercions to make it seem like <code>subtype</code> is a \"subtype\" in the sense you want, but you have to get used to it.</p>",
        "id": 277494657,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648860056
    },
    {
        "content": "<p>For example, when I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Lean is automatically inserting coercions so that it's actually</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">subtype</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span>\n</code></pre></div>",
        "id": 277494683,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648860108
    },
    {
        "content": "<p>If you're wanting to consider more than one \"subtype\" of a type and relate them in different ways, it's usually less of a pain to work with sets, which, just to be clear, are just predicates on a type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 277494766,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1648860217
    }
]