[
    {
        "content": "<p>I defined a new class</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">equal_char_zero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">[</span><span class=\"n\">irrelevant</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and showed that whenever a there is an instance of this class, there is also an instance of the class <code>char_zero</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">char_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">equal_char_zero</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">cast_injective</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Now I would like to use the <code>cast_injective</code> property of this second instance in a proof where I know that I have the first one <code>[h: equal_char_zero R] </code>.  I don't know enough about instances, to know how to do this, what is the correct syntax?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">equal_char_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span>  <span class=\"o\">:</span>  <span class=\"bp\">...</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h.char_zero.cast_injective</span>     <span class=\"c1\">-- How do I access this correctly?</span>\n  <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>A possible working syntax (although ugly) seems to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">hh</span><span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">refine</span> <span class=\"n\">equal_char_zero.char_zero</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hh.cast_injective</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 280206549,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1650978314
    },
    {
        "content": "<p>Simply <code>apply nat.cast_injective</code></p>",
        "id": 280207730,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650978826
    },
    {
        "content": "<p>You should not use dot notation on <strong>classes</strong>. It is meant for structures and other definitions. In that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_injective\">docs#nat.cast_injective</a> is the user-facing version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_zero.cast_injective\">docs#char_zero.cast_injective</a>.</p>",
        "id": 280207738,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650978829
    },
    {
        "content": "<p>Oh so <code>apply @nat.cast_injective R,</code> to tell it explicitly which ring/add_monoid. Thanks Yaël</p>",
        "id": 280208747,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1650979274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> has marked this topic as resolved.</p>",
        "id": 280209227,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650979506
    }
]