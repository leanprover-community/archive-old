[
    {
        "content": "<p>Let's say I have a function <code>f  : A  →+* B</code> and an equality <code>A = C</code>. What is the clean way to get the corresponding function <code>f : C →+* B</code> . I know how to do it by constructing explicitly the <code>ring_hom</code> but it is a bit messy and I was wondering if there is a better way.</p>\n<p>I guess I have the same question if I have instead <code>B = D</code> and want to change the range of the function...</p>",
        "id": 303992955,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1665739492
    },
    {
        "content": "<p>What are <code>A</code> and <code>C</code>? Types? If so, don't use an equality!</p>",
        "id": 303993193,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665739574
    },
    {
        "content": "<p>Also, how do you know that the equality between <code>A</code> and <code>C</code> preserves ring operations? After all, <code>mul_opposite X = X</code> but they certanly aren't the same ring!</p>",
        "id": 303993325,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665739623
    },
    {
        "content": "<p>Yes, the idea is that you shouldn't have an equality of types at the beginning. Can you be more explicit?</p>",
        "id": 303993625,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665739730
    },
    {
        "content": "<p>Yes, sorry about that, I was not really clear. In fact <code>A</code> and <code>C</code>  are <code>subring</code> of the same ring in my case.</p>",
        "id": 303993993,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1665739858
    },
    {
        "content": "<p>Is either of <code>A</code> and <code>C</code> a free variable? If so, you can <code>subst your_equality</code></p>",
        "id": 303994243,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665739933
    },
    {
        "content": "<p>If this doesn't work we probably have <code>iso_of_eq</code> or something similar (I will look for this once I am at the computer)</p>",
        "id": 303995620,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665740430
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv.subring_congr\">docs#ring_equiv.subring_congr</a></p>",
        "id": 303996507,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665740773
    },
    {
        "content": "<p>Thanks a lot. I’ll try that!</p>",
        "id": 304000149,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1665742231
    },
    {
        "content": "<p>Hopefully <code>simp</code> is smart enough to make it disappear when you apply it...</p>",
        "id": 304000399,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665742350
    },
    {
        "content": "<p><code>A</code> is a term in <code>A : subring R</code>, and a type in <code>f : A -&gt;+* B</code>. Equality of terms is not evil :-) Maybe post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? There might be several independent things going on here.</p>",
        "id": 304006674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665745127
    }
]