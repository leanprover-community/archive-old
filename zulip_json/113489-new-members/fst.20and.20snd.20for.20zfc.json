[
    {
        "content": "<p>I need analogs of <code>fst</code> and <code>snd</code> for <code>Set.pair</code> of <code>zfc</code> module. Please help.</p>",
        "id": 279770874,
        "sender_full_name": "Victor Porton",
        "timestamp": 1650595443
    },
    {
        "content": "<p>Not sure what the recommended way is, but you can easily implement <code>fst</code> and <code>snd</code> using choice:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.zfc</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Set.fst</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">a.pair</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">h.some</span> <span class=\"k\">else</span> <span class=\"bp\">∅</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Set.snd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">a.pair</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">h.some_spec.some</span> <span class=\"k\">else</span> <span class=\"bp\">∅</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Set.fst_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.pair</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Set.fst</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Set.pair_inj</span> <span class=\"n\">h.some_spec.some_spec</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Set.snd_eq</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Set</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a.pair</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Set.snd</span><span class=\"o\">,</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Set.pair_inj</span> <span class=\"n\">h.some_spec.some_spec</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279772120,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650596503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> It is which version of Lean? My Lean 4 does not accept your code.</p>",
        "id": 279772440,
        "sender_full_name": "Victor Porton",
        "timestamp": 1650596770
    },
    {
        "content": "<p><code>set_theory.zfc</code> is part of lean 3 mathlib</p>",
        "id": 279772463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650596807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411273\">Victor Porton</span> <a href=\"#narrow/stream/113489-new-members/topic/fst.20and.20snd.20for.20zfc/near/279772440\">said</a>:</p>\n<blockquote>\n<p>It is which version of Lean? My Lean 4 does not accept your code.</p>\n</blockquote>\n<p>It's Lean 3. You should have mentioned in your question which version of Lean you are using. Note that there is also lean4 stream.</p>",
        "id": 279772613,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650596959
    },
    {
        "content": "<p>Can <code>elan</code> install both Lean4 and Lean3?</p>",
        "id": 279772712,
        "sender_full_name": "Victor Porton",
        "timestamp": 1650597050
    },
    {
        "content": "<p>yes</p>",
        "id": 279772956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1650597253
    },
    {
        "content": "<p>It does not compile with <code>invalid field notation, 'some' is not a valid \"field\" because environment does not contain 'Exists.some'</code>. It does not work even if I add <code>import logic.basic</code>. Why?</p>",
        "id": 279919351,
        "sender_full_name": "Victor Porton",
        "timestamp": 1650709529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> I indeed use Lean3, but it still does not compile (see above).</p>",
        "id": 279919559,
        "sender_full_name": "Victor Porton",
        "timestamp": 1650709848
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Exists.some\">docs#Exists.some</a> suggests that <code>import logic.basic</code> is enough in lean 3</p>",
        "id": 279931789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650727730
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Exists.some#doc\">docs4#Exists.some</a> tells you it does not exist in lean 4</p>",
        "id": 279931946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650727939
    },
    {
        "content": "<p>It works in the <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20set_theory.zfc%0A%0Anoncomputable%20theory%0Aopen_locale%20classical%0A%0Adef%20Set.fst%20%28p%20%3A%20Set%29%20%3A%20Set%20%3A%3D%0Aif%20h%20%3A%20%E2%88%83%20%28a%20b%20%3A%20Set%29%2C%20p%20%3D%20a.pair%20b%20then%20h.some%20else%20%E2%88%85%0A%0Adef%20Set.snd%20%28p%20%3A%20Set%29%20%3A%20Set%20%3A%3D%0Aif%20h%20%3A%20%E2%88%83%20%28a%20b%20%3A%20Set%29%2C%20p%20%3D%20a.pair%20b%20then%20h.some_spec.some%20else%20%E2%88%85%0A%0Alemma%20Set.fst_eq%20%7Ba%20b%20%3A%20Set%7D%20%3A%20%28a.pair%20b%29.fst%20%3D%20a%20%3A%3D%0Abegin%0A%20%20rw%20Set.fst%2C%0A%20%20split_ifs%2C%0A%20%20%7B%20exact%20%28Set.pair_inj%20h.some_spec.some_spec%29.1.symm%20%7D%2C%0A%20%20%7B%20cases%20h%20%E2%9F%A8_%2C%20_%2C%20rfl%E2%9F%A9%20%7D%2C%0Aend%0A%0Alemma%20Set.snd_eq%20%7Ba%20b%20%3A%20Set%7D%20%3A%20%28a.pair%20b%29.snd%20%3D%20b%20%3A%3D%0Abegin%0A%20%20rw%20Set.snd%2C%0A%20%20split_ifs%2C%0A%20%20%7B%20exact%20%28Set.pair_inj%20h.some_spec.some_spec%29.2.symm%20%7D%2C%0A%20%20%7B%20cases%20h%20%E2%9F%A8_%2C%20_%2C%20rfl%E2%9F%A9%20%7D%2C%0Aend\">online editor</a>. The error is probably related to your Lean 3 installation. Note that <code>logic.basic</code> is indirectly imported by <code>set_theory.zfc</code></p>",
        "id": 279932983,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1650729478
    }
]