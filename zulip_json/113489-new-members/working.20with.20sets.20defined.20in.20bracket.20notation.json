[
    {
        "content": "<p>I'm working on the below problem in set theory. I'm using  this problem as a springboard to learn about working with sets defined inside brackets. The goal on the last line is an existential with an argument <code>H</code>. I think if I can build this argument from the statements I have an reintroduce the existential, I should be able to solve the goal, but, in <code>H</code>, Lean changed my original statement into a different statement that I'm not sure how to deal with. I've looked around in mathlib for statements that might help, but I also wanted to ask here if there is anything in mathlib that might help me here. My code is below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">U</span>\n<span class=\"kd\">variable</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">diff_notation</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃₀</span><span class=\"o\">{(</span><span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">iff.intro</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_sUnion</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"bp\">⋃₀</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.right</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mem_sUnion</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">and.intro</span> <span class=\"n\">h1.left</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n<span class=\"bp\">``</span>\n</code></pre></div>",
        "id": 272404460,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645192741
    },
    {
        "content": "<p>You can use the <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp\">tactic#simp</a> tactic here -- if you want to know what lemmas it ends up using, you can do <code>simp?</code> or <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#squeeze_simp\">tactic#squeeze_simp</a>.</p>",
        "id": 272404771,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645192872
    },
    {
        "content": "<p>wow, that's amazing. Thanks so much!!!</p>",
        "id": 272405691,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645193352
    },
    {
        "content": "<p>are there any good rules about when simp can or can't be used? I've tried using it before and wasn't successful but it works here.</p>",
        "id": 272405815,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645193408
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/extras/simp.html\">https://leanprover-community.github.io/extras/simp.html</a></p>",
        "id": 272405891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1645193477
    },
    {
        "content": "<p>also, I have one other general question about tactics  that rewrite the goal to an equivalent form. When I was in high school, I had to do some proofs in trigonometry. My teacher would always tell us that we should work from one side of the equation to the other, i.e. don't work from both sides of the equation. rewriting the goal feels a lot like working from both sides of the equation. why is this allowed?</p>",
        "id": 272406046,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645193550
    },
    {
        "content": "<p>thanks for the link, that's exactly what I'm looking for</p>",
        "id": 272406118,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645193602
    },
    {
        "content": "<p>also, I have one other general question about tactics  that rewrite the goal to an equivalent form. When I was in high school, I had to do some proofs in trigonometry. My teacher would always tell us that we should work from one side of the equation to the other, i.e. don't work from both sides of the equation. rewriting the goal feels a lot like working from both sides of the equation. why is this allowed?</p>",
        "id": 272406119,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645193602
    },
    {
        "content": "<p>also, I have one other general question about tactics  that rewrite the goal to an equivalent form. When I was in high school, I had to do some proofs in trigonometry. My teacher would always tell us that we should work from one side of the equation to the other, i.e. don't work from both sides of the equation. rewriting the goal feels a lot like working from both sides of the equation. why is this allowed?</p>",
        "id": 272406235,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645193661
    },
    {
        "content": "<p>thanks for the link, that's exactly what I'm looking for</p>",
        "id": 272406236,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645193661
    },
    {
        "content": "<p>When writing proofs, there's broadly two kinds of reasoning: forward and backward reasoning.  In forward reasoning, you create new facts from already known facts (i.e., additional hypotheses), and in backward reasoning you modify the goal to something stronger (it's usually indicated by \"it suffices to show that\").</p>\n<p>It's easier to get forward reasoning right, and students tend to get the backward reasoning backwards, which is likely why you're told that you \"shouldn't prove things starting from the conclusion.\"</p>",
        "id": 272406548,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645193821
    },
    {
        "content": "<p>With Lean, you're just not allowed to do it wrong :-)</p>",
        "id": 272406673,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645193881
    },
    {
        "content": "<p>that makes sense. if I think about it, there should be no reason we can't work from both sides of the equation, so thanks for explaining that.</p>",
        "id": 272406915,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645193990
    },
    {
        "content": "<blockquote>\n<p>When writing proofs, there's broadly two kinds of reasoning: forward and backward reasoning.</p>\n</blockquote>\n<p>I have heard this so often but it's not my mental model of a proof at all. When writing proofs you can do anything mathematically valid, and in particular the concept of manipulating the hypotheses until they become closer to the goal and manipulating the goal until it becomes closer to the hypotheses are concepts which I find indistinguishable -- they're both \"applying the rules of mathematics in order to prove a theorem\". I am still totally bewildered about why people insist on making the distinction.</p>",
        "id": 272409990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645195585
    },
    {
        "content": "<p>I sometimes feel like this comes from school, where I remember being told that I'd be marked down if for my proof of <code>a = b</code>, I had to write down the steps to turn <code>a</code> to <code>b</code> or the other way round, I couldn't \"meet in the middle\". But, to be fair, I sometimes wish there was less <code>apply</code>s in Lean, especially when I was still learning. It's more verbose to write the <code>have := ..., replace := ...</code> style, but in some ways that's what we had to do.</p>",
        "id": 272410259,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645195728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/113489-new-members/topic/working.20with.20sets.20defined.20in.20bracket.20notation/near/272409990\">said</a>:</p>\n<blockquote>\n<p>in particular the concept of manipulating the hypotheses until they become closer to the goal and manipulating the goal until it becomes closer to the hypotheses are concepts which I find indistinguishable</p>\n</blockquote>\n<p>By mentioning manipulating hypothesis and manipulating goals... are you distinguishing these, or are those formal sequences of letters that you've learned mean something to the forward-backward thinkers?</p>",
        "id": 272410606,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645195906
    },
    {
        "content": "<p>I am able to distinguish a hypothesis from a goal, but I am unable to attach any mathematical use to concepts such as \"this tactic changes only the hypotheses\", \"this tactic changes only the goal\" and \"this tactic changes both goal and hypotheses\" (e.g. <code>subst</code>, <code>simp * at *</code> etc). Quite how the forwards/backwards people classify the latter tactics I don't know (and I don't care because the distinction seems to be of no help to me personally).</p>",
        "id": 272411000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645196068
    },
    {
        "content": "<p>I'm still a little confused about what's actually happening in the theorem that <code>simp</code> applies here. <code>simp</code> applies <code>exists_exists_and_eq_and</code>, but the statement in the theorem looks totally different from my goal, but it still works. <code>exists_exists_and_eq_and</code> is <code>(∃ (b : β), (∃ (a : α), p a ∧ f a = b) ∧ q b) ↔ ∃ (a : α), p a ∧ q (f a)</code>. My goal is <code>∃ (t : set U) (H : t ∈ {_x : set U | ∃ (p : set U) (H : p ∈ F), A ∩ p = _x}), c ∈ t</code>. I'm guessing that <code>a</code> and <code>b</code> are mapped to <code>t</code> and <code>p</code> in my goal, but I think I'm confused about how the predicate inside the bracket is treated by Lean.</p>",
        "id": 272414624,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645197774
    },
    {
        "content": "<p>Maybe this is one of those things I'll have to accept until it suddenly makes sense to me three months from now hahaha</p>",
        "id": 272414678,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645197799
    },
    {
        "content": "<p>Is there any way to simplify just the stuff in brackets so that I can see what's happening there?</p>",
        "id": 272415021,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645197970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466607\">@Andrew Lubrino</span> If things look different then they're not syntactically equal, however they can still be definitionally equal; maybe you want to read <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/formalising-mathematics-2022/Part_B/equality.html\">this</a> to see some explanation of these ideas.</p>",
        "id": 272415941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645198443
    },
    {
        "content": "<p>You can constrain <code>simp</code> by writing <code>simp only [&lt;lemma_name&gt;]</code><br>\nFor example, <code>simp only [exists_prop],</code> turns</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>∃ (t : set U) (H : t ∈ {_x : set U | ∃ (p : set U) (H : p ∈ F), A ∩ p = _x}), c ∈ t\n</code></pre></div>\n<p>Into</p>\n<div class=\"codehilite\" data-code-language=\"TeX\"><pre><span></span><code>∃ (t : set U), t ∈ <span class=\"nb\">{_</span>x : set U | ∃ (p : set U), p ∈ F ∧ A ∩ p = <span class=\"nb\">_</span>x<span class=\"nb\">}</span> ∧ c ∈ t\n</code></pre></div>\n<p>So you can use the lemmas one by one to understand what's happening. <code>squeeze_simp</code> used the following lemmas:</p>\n<p><code>exists_prop, mem_set_of_eq, exists_exists_and_eq_and, mem_inter_eq</code></p>",
        "id": 272415988,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645198456
    },
    {
        "content": "<p>Awesome, thank you both. This looks like there's a lot more for me to dig into. I really should have used <code>squeeze_simp</code> from the beginning. Thanks Kevin, I took a look through that page and there's actually a lot that I think is stuff I should know about. I'm going to read through that tonight.</p>",
        "id": 272416733,
        "sender_full_name": "Andrew Lubrino",
        "timestamp": 1645198825
    }
]