[
    {
        "content": "<p>Dear All,</p>\n<p>I am struggling to find a proof of the lemma below: I am convinced that it should be in mathlib, I have found <code>continuous_add</code>, but I know so little od the topology side of mathlib, that I am unable to get it to work.  Can anyone give me a pointer, please?</p>\n<p>Thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.convex.topology</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">translate_open</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oU</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 220796338,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608735869
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 220797148,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608736440
    },
    {
        "content": "<p>I have a set <code>A</code> of reals and a real <code>x ∈ A</code>.  I want to show that <code>A \\ {x} ≠ ∅</code> by showing that <code>A</code> contains a neighbourhood of <code>x</code>.  The neighbourhood in question is the translate of an intersection of sets that I already know are open and nonempty, hence the question!</p>",
        "id": 220797829,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608736975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> there is <code>continuous_add_left</code></p>",
        "id": 220797859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608736998
    },
    {
        "content": "<p>the first thing I would do is change your goal to preimage under addition, instead of images under subtraction.</p>",
        "id": 220797895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608737032
    },
    {
        "content": "<p>Hmm, maybe I should <code>import</code> more?  I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">has_continuous_add_left'</span>\n</code></pre></div>",
        "id": 220797950,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608737055
    },
    {
        "content": "<p>Let me try with replacing preimages!</p>",
        "id": 220797978,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608737081
    },
    {
        "content": "<p>without the <code>has_</code></p>",
        "id": 220797987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608737084
    },
    {
        "content": "<p>or better, <em>use</em> the preimage under addition instead of the image under subtraction as your neighbourhood</p>",
        "id": 220798030,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1608737126
    },
    {
        "content": "<p>I will try to make this work, thanks!</p>",
        "id": 220798178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608737229
    },
    {
        "content": "<p>This works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">translate_open</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">oU</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">continuous_add_right</span> <span class=\"n\">α</span> <span class=\"n\">U</span> <span class=\"n\">oU</span>\n</code></pre></div>\n<p>Now I will adjust the rest to what I have!</p>",
        "id": 220798344,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608737345
    },
    {
        "content": "<p>There is even <code>preimage_add_const_Ioo</code>!  Found by <code>simp</code>!</p>",
        "id": 220798951,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608737760
    },
    {
        "content": "<p>Is there no <code>homeomorph_add_left</code> in mathlib?</p>",
        "id": 220800231,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608738771
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/homeomorph.add_left\">docs#homeomorph.add_left</a></p>",
        "id": 220800368,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608738865
    },
    {
        "content": "<p>Ah, thanks for the pointer to <code>homeomorph.add_left</code>!  I am doing some very simple-minded argument, so I may not be needing it, but I am relieved to see that it is in mathlib!</p>",
        "id": 220802879,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1608740512
    }
]