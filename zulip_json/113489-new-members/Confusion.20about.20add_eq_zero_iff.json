[
    {
        "content": "<p>When I try the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_eq_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Lean tells me <code>rewrite tactic failed, did not find instance of the pattern in the target expression _ = 0</code><br>\nWhy is that? To me <code>h</code> obviously looks like an instance of <code>add_eq_zero_iff</code>. Is it because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> is not a <code>canonically_ordered_add_monoid</code> which <code>add_eq_zero_iff</code> requires?</p>",
        "id": 199825398,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591317086
    },
    {
        "content": "<p>It doesn't seem like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> should satisfy that.  The monoid of non-negative reals under addition would, though, I think.</p>",
        "id": 199826064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591317912
    },
    {
        "content": "<p>Lol, oh yeah I somehow just realized I'm being stupid</p>",
        "id": 199826155,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591318008
    },
    {
        "content": "<p>I didn't really think about what that theorem means</p>",
        "id": 199826159,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591318020
    },
    {
        "content": "<p>It looks like what I really want is <code>add_eq_zero_iff'</code></p>",
        "id": 199826173,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591318058
    },
    {
        "content": "<p>Or <code>add_eq_zero_iff_eq_zero_and_eq_zero_of_nonneg_of_nonneg</code></p>",
        "id": 199826242,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591318120
    },
    {
        "content": "<p>Which looks to be exactly the same lemma as <code>add_eq_zero_iff_eq_zero_of_nonneg</code> just with a longer name <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 199826369,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591318255
    },
    {
        "content": "<p>So we should remove the two I just mentioned perhaps as they assume  ordered_cancel_add_comm_monoid rather than ordered_add_comm_monoid</p>",
        "id": 199826871,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591318805
    },
    {
        "content": "<p>If you do <code>library_search</code>, it suggests <code>exact mul_self_add_mul_self_eq_zero.mp</code> which is exactly the theorem.</p>",
        "id": 199826900,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591318837
    },
    {
        "content": "<p>Oh yeah, I still remember the day that I understood that \"canonically ordered\" means \"a&lt;=b iff there exists c such that b=a+c\". So basically if you're canonical then everything is &gt;=0. So basically it's just <code>nat</code></p>",
        "id": 199839309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591337881
    },
    {
        "content": "<p>Computer scientists are so fixated with nat, it's crazy</p>",
        "id": 199839351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591337904
    },
    {
        "content": "<p>What about <code>nnreal</code>?</p>",
        "id": 199839902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591338718
    },
    {
        "content": "<p>I think the general practice comes from monoid orders</p>",
        "id": 199840982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591339972
    },
    {
        "content": "<p>Any (add_)monoid can be canonically ordered</p>",
        "id": 199840998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591340005
    },
    {
        "content": "<p>how do you canonically order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Bbb Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>?</p>",
        "id": 199841106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591340138
    },
    {
        "content": "<p>I suppose the order is usually not a partial order though</p>",
        "id": 199841164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591340184
    },
    {
        "content": "<p>nat can be canonically ordered as a multiplicative monoid by divisibility</p>",
        "id": 199841178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591340217
    },
    {
        "content": "<p>int can be canonically ordered but the order is trivial</p>",
        "id": 199841205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591340265
    },
    {
        "content": "<p>Kenny you can canonically order any group, because any set is a category</p>",
        "id": 199843062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591342132
    },
    {
        "content": "<p>do the nonnegative elements of an arbitrary ordered ring form a canonically ordered monoid?<br>\n(my motivating example is the cone of psd matrices, where you put an order on matrices <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>≤</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> A \\le B </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>−</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\"> A - B </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is positive semi-definite)</p>",
        "id": 199895542,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591371968
    },
    {
        "content": "<p>Wouldn't surprise me at all</p>",
        "id": 199941301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591396434
    }
]