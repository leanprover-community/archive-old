[
    {
        "content": "<p>Hi All, I am new here, new to Lean, new theorem proving, new to category theory etc, but I find Lean4 (my first real exposure to Lean) really impressive (CIC, strict, focus on speed, great interop story, macros, extensible syntax and a clean &amp; clever syntax, to name a few).</p>\n<p>My interest in Lean4 comes from the real possibility of being able to build real apps with it and less so on theorem proving / verification (although being able to leverage that at some time sounds really enticing). I got the impression from one of the videos from Lean Together 2021 that the idea is to turn Lean4 into a general purpose programming language. I know there is work to do and it may take a bit of time, which is fine for my purposes.</p>\n<p>So I am trying to get some real exposure to using Lean4 and nothing better than a small project. I saw some Github issues for \"help wanted\" and it has some ideas of projects although I may need some mileage with Lean4 before trying to work on some of those (or either lots of hand holding). The ideas that caught my attention were issues related to LSP, linters, for instance.</p>\n<p>I also have other things that interest me. Some examples: reusable CLI library to standardize the creation of command line apps, a canonical formatting tool a la 'cargo fmt', Javascript compilation target.</p>\n<p>If you have any feedback to how to get started with useful TODOs, please let me know.</p>\n<p>Thanks!</p>",
        "id": 267070657,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1641481524
    },
    {
        "content": "<p>When it comes to general purpose adoption of Lean 4, the first thing that comes to my mind is backend development. So being able to build servers and to talk to databases would be a neat thing to have as well :D</p>\n<p>For example, a while ago I was able to make Lean 4 talk to MySQL servers: <a href=\"https://github.com/arthurpaulino/LeanMySQL\">https://github.com/arthurpaulino/LeanMySQL</a></p>\n<p>Be mindful, however, that Lean 4 will evolve to attend the needs of <code>mathlib4</code> first</p>",
        "id": 267071506,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641481997
    },
    {
        "content": "<p>Understood re: \"Lean 4 will evolve to attend the needs of mathlib4 first\". Make sense specially considering Lean's history.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">For</span> <span class=\"kd\">example</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">while</span> <span class=\"n\">ago</span> <span class=\"n\">I</span> <span class=\"n\">was</span> <span class=\"n\">able</span> <span class=\"n\">to</span> <span class=\"n\">make</span> <span class=\"n\">Lean</span> <span class=\"mi\">4</span> <span class=\"n\">talk</span> <span class=\"n\">to</span> <span class=\"n\">MySQL</span> <span class=\"n\">servers</span><span class=\"o\">:</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">arthurpaulino</span><span class=\"bp\">/</span><span class=\"n\">LeanMySQL</span>\n</code></pre></div>\n<p>This is helpful on how to setup a project, build etc, thanks.</p>",
        "id": 267072678,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1641482644
    },
    {
        "content": "<p>That project uses Lean's FFI to have access to MySQL's C API.<br>\nSimply calling <code>lake new MyProject</code> will provide a simpler structure for a minimal Lean 4 project that doesn't need the FFI</p>",
        "id": 267073025,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641482838
    },
    {
        "content": "<p><a href=\"https://github.com/search?q=created%3A%3E2020+language%3ALean&amp;type=Repositories\">This</a> (Lean repos created after 2019) shows a list of Lean projects, but I guess it includes all versions of Lean. Should there be Lean vs Lean4 since the language is somewhat different?</p>",
        "id": 267075107,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1641483844
    },
    {
        "content": "<p>There's a tag for Lean4 (by language GH generally doesn't differentiate I think). And eventually Lean4 will eat Lean3 the same as 3 ate 2.</p>",
        "id": 267077023,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641484718
    },
    {
        "content": "<p><a href=\"https://github.com/topics/lean4\">https://github.com/topics/lean4</a></p>",
        "id": 267077052,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641484736
    },
    {
        "content": "<p>someone wrote a CLI library as well I think</p>",
        "id": 267077135,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641484782
    },
    {
        "content": "<p>Yeah, here: <a href=\"https://github.com/mhuisi/lean4-cli\">https://github.com/mhuisi/lean4-cli</a></p>",
        "id": 267077163,
        "sender_full_name": "Julian Berman",
        "timestamp": 1641484799
    }
]