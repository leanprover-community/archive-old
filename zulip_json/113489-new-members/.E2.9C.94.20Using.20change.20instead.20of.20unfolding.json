[
    {
        "content": "<p>Not using <code>unfold</code> is good general advice but also, if it's actually <em>not working</em>, then that suggests that something more complicated is going on</p>",
        "id": 272338097,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645139721
    },
    {
        "content": "<p>Depending on what that is, <code>dunfold</code> might work instead</p>",
        "id": 272338188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645139790
    },
    {
        "content": "<p>In my fantasy, <code>unfold</code> works that same way as <code>rw</code> with the only difference that <code>rw</code> uses <code>=</code> and <code>unfold</code> uses <code>:=</code> for the substitution. Is it a wrong way how to look at it?</p>",
        "id": 272338492,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645140005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20change.20instead.20of.20unfolding/near/272337731\">said</a>:</p>\n<blockquote>\n<p>Where can I read about adding API to functions in Lean? I don't have any idea what it means.</p>\n</blockquote>\n<p>Around here, \"API\" means all the technical lemmas that let you work with a definition so that you never need to unfold it. (In software, API means \"application programming interface,\" which is the official interface to a library or system, and you're meant to interact only through that official interface. In mathlib, we tend to treat definitions as being private, since aspects of the definition might change, and rewrite lemmas are more stable.)</p>",
        "id": 272338553,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645140057
    },
    {
        "content": "<p>I often want to use a lemma from <code>mathlib</code> but I need to expand my definition first. I don't think that creating my own lemma would make things easier.</p>",
        "id": 272338702,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645140143
    },
    {
        "content": "<p>If you find you're unfolding, what that can often indicate is that either (1) you're developing these lemmas or (2) you should be developing one of these lemmas.</p>",
        "id": 272338956,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645140349
    },
    {
        "content": "<p>This isn't always true. For some definitions, the interface <em>is</em> the definition. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subset\">docs#set.subset</a> is an implication, and it's used as one all the time.</p>",
        "id": 272339053,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645140399
    },
    {
        "content": "<p>In my case, it is often just a local function inside a tactic-style proof. Therefore, I am not motivated to make API around such function.</p>",
        "id": 272339087,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645140431
    },
    {
        "content": "<p>That is a quite relevant piece of information!</p>",
        "id": 272339110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645140448
    },
    {
        "content": "<p>Sounds like an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is in order <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 272339142,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645140477
    },
    {
        "content": "<p>Oh, sorry; I am new here. I haven't learnt yet what is relevant and what isn't.</p>",
        "id": 272339181,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645140483
    },
    {
        "content": "<p>Nevertheless, my main question has already been answered. I just need to look up what <code>convert</code> does.</p>",
        "id": 272339311,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645140568
    },
    {
        "content": "<p>I'm not sure your question has been answered. <code>convert</code> (and <code>convert_to</code>) are useful, but it doesn't sound like it's dealing with the <code>unfold</code> problem to me.</p>",
        "id": 272339456,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645140667
    },
    {
        "content": "<p>Given that you're talking about local functions, what's relevant is that <code>unfold</code> doesn't see those.  <code>simp only [f]</code> would probably work.</p>",
        "id": 272339521,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645140720
    },
    {
        "content": "<p>Did you introduce them using <code>let</code> or <code>set</code>? I suggest you try the latter.</p>",
        "id": 272339605,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645140754
    },
    {
        "content": "<p>I didn't know that <code>set</code> was a Lean command! I always used <code>let</code> inside tactic-style proofs. Is it really just <code>set</code> — the same word as the name of the type?</p>",
        "id": 272339759,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645140861
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#set\">tactic#set</a></p>",
        "id": 272339791,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645140880
    },
    {
        "content": "<p>You can just look up answers to questions like this yourself -- <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#set\">tactic#set</a></p>",
        "id": 272339808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645140893
    },
    {
        "content": "<p>I'm guessing Yael is suggesting it because it gives you a rewrite lemma in the local context, too.</p>",
        "id": 272339821,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645140913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20change.20instead.20of.20unfolding/near/272339521\">said</a>:</p>\n<blockquote>\n<p>Given that you're talking about local functions, what's relevant is that <code>unfold</code> doesn't see those.  <code>simp only [f]</code> would probably work.</p>\n</blockquote>\n<p>Oh! You told me a lot of useful information! Thank you very much!</p>\n<p>Just one last question. Does <code>simp only [f]</code> do anything if <code>f</code> can only make the expression longer?</p>",
        "id": 272339916,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645140979
    },
    {
        "content": "<p>Could we just make <code>(d)unfold</code> work with local definitions? It seems like an obvious thing to expect to work</p>",
        "id": 272339917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645140981
    },
    {
        "content": "<p>I think it's not <code>unfold</code>'s fault, but rather <code>let</code>'s. At least, that's what I remember.</p>",
        "id": 272339971,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645141031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20change.20instead.20of.20unfolding/near/272338492\">said</a>:</p>\n<blockquote>\n<p>In my fantasy, <code>unfold</code> works that same way as <code>rw</code> with the only difference that <code>rw</code> uses <code>=</code> and <code>unfold</code> uses <code>:=</code> for the substitution. Is it a wrong way how to look at it?</p>\n</blockquote>\n<p>Oh. Maybe prove me wrong with this.</p>",
        "id": 272339986,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645141039
    },
    {
        "content": "<p>I'm not really interested in assigning blame so much as making things work--clearly <code>dsimp only [f]</code> works, so why not <code>dunfold f</code> too.</p>",
        "id": 272340139,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645141136
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20change.20instead.20of.20unfolding/near/272339917\">said</a>:</p>\n<blockquote>\n<p>Could we just make <code>(d)unfold</code> work with local definitions? It seems like an obvious thing to expect to work</p>\n</blockquote>\n<p>I looked into this a couple days ago, but I got confused trying to understand how it worked. One thing I noticed is that <code>(d)unfold</code> has its own functions to collect definition lemmas, completely different from <code>simp</code>'s.</p>",
        "id": 272340203,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645141201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20change.20instead.20of.20unfolding/near/272339986\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20change.20instead.20of.20unfolding/near/272338492\">said</a>:</p>\n<blockquote>\n<p>In my fantasy, <code>unfold</code> works that same way as <code>rw</code> with the only difference that <code>rw</code> uses <code>=</code> and <code>unfold</code> uses <code>:=</code> for the substitution. Is it a wrong way how to look at it?</p>\n</blockquote>\n<p>Oh. Maybe prove me wrong with this.</p>\n</blockquote>\n<p>I don't think this is wrong in this case because <code>rw [f]</code> also doesn't work, right?<br>\nBut the main thing here is that local definitions are not the same as top-level definitions, and some tactics treat them differently</p>",
        "id": 272340318,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645141276
    },
    {
        "content": "<p>For a while, I thought that <code>(d)unfold</code> was literally <code>simp</code> with some special flags and its own tactic parser, so I was surprised to see that it had a very different frontend to <code>simp_core</code>...</p>",
        "id": 272340439,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645141340
    },
    {
        "content": "<p>Why would <code>unfold</code> be similar to <code>simp</code> please? I thought that <code>unfold</code> just performs a substitution (similar to <code>rw</code>) and nothing more.</p>",
        "id": 272340538,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645141434
    },
    {
        "content": "<p>Replacing a function by its definition is a special case of replacing the left side of some equation with the right side of the equation.</p>",
        "id": 272340924,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645141736
    },
    {
        "content": "<p>Yeah but <code>simp</code> performs some kind of search, right?</p>",
        "id": 272340978,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645141789
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 272341017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645141816
    },
    {
        "content": "<p>Doesn't <code>unfold</code> have to do the same thing?</p>",
        "id": 272341024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645141822
    },
    {
        "content": "<p>(One answer to \"why is it similar to <code>simp</code>?\" is, well, the source code shows it calls <code>simp_core</code>: <a href=\"https://github.com/leanprover-community/lean/blob/402f41cdedbd46a368fb7807bebe83550d887631/library/init/meta/interactive.lean#L1527\">link to source</a>)</p>",
        "id": 272341080,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645141874
    },
    {
        "content": "<p>Since it's using the <code>simp</code> engine, it's able to unfold definitions inside of foralls, lambdas, exists, etc.</p>",
        "id": 272341108,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645141901
    },
    {
        "content": "<p>The main obvious difference with <code>simp</code> is that by default <code>simp</code> will try to use all lemmas marked with the <code>simp</code> attribute, while <code>unfold f</code> will just use the equational lemmas for <code>f</code>... but this is just a difference in configuration (what lemmas are we using to simplify?).</p>",
        "id": 272341247,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645141984
    },
    {
        "content": "<p>I guess if your mental model is <code>unfold f</code> = replace <code>f</code> by its definition and <code>simp</code> = magic then yeah, they are different.</p>",
        "id": 272341292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645142029
    },
    {
        "content": "<p>And pretty much everyone starts out with that mental model.</p>",
        "id": 272341345,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645142044
    },
    {
        "content": "<p>Does <code>simp</code> normally perform operations that make the expression longer?</p>",
        "id": 272341374,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645142067
    },
    {
        "content": "<p>Yes, it doesn't care about length</p>",
        "id": 272341384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1645142076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/Using.20change.20instead.20of.20unfolding/near/272341292\">said</a>:</p>\n<blockquote>\n<p>I guess if your mental model is <code>unfold f</code> = replace <code>f</code> by its definition and <code>simp</code> = magic then yeah, they are different.</p>\n</blockquote>\n<p>Hell yeah, you described my mental model very accurately!</p>",
        "id": 272341434,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1645142123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 272341916,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645142421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Using.20change.20instead.20of.20unfolding/near/272341292\">said</a>:</p>\n<blockquote>\n<p>I guess if your mental model is <code>unfold f</code> = replace <code>f</code> by its definition and <code>simp</code> = magic then yeah, they are different.</p>\n</blockquote>\n<p>In fact, \"replace <code>f</code> by its definition\" is <code>delta f</code>. Once you use this tactic you realize you didn't actually want \"replace <code>f</code> by its definition\" at all</p>",
        "id": 272352196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645150958
    },
    {
        "content": "<p>Something I'm wondering about <code>unfold</code> is that it uses <code>get_eqn_lemmas_for ff</code> to get equation lemmas, but <code>simp</code> uses <code>get_eqn_lemmas_for tt</code>. That flag determines whether  <code>env.get_ext_eqn_lemmas_for</code> or <code>env.get_eqn_lemmas_for</code> is used, but I'm not sure what <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/library/tactic/eqn_lemmas.cpp#L109\">the first one does exactly</a>. (The <code>.h</code> file has no documentation.)</p>",
        "id": 272352772,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645151568
    }
]