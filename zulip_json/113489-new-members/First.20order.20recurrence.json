[
    {
        "content": "<p>I have a first order recurrence relation and I want to prove that if two terms in the sequence are the same, then their successive terms are also the same. How can I get past the <code>nat.rec</code> after  unfolding the definition of <code>a</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical.prop_decidable</span>\n\n<span class=\"sd\">/-- A first order recurrence relation -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">nat.rec_on</span> <span class=\"n\">n</span> <span class=\"n\">a₀</span>\n    <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">n</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">an</span> <span class=\"k\">then</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">an</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- If two terms of the sequence are equal, so are their successors -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215582758,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1604498075
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">m</span> <span class=\"k\">then</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">classical.some</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215585105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604499112
    },
    {
        "content": "<p><code>change</code> works because the goal we want to see is definitionally equal to the goal we have.</p>",
        "id": 215585645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1604499319
    },
    {
        "content": "<p>Thanks! Do you know why <code>dsimp</code> doesn't do this for you?</p>",
        "id": 215593578,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1604502639
    },
    {
        "content": "<p>If you don't mind using mathlib, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.sqrt</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical.prop_decidable</span>\n\n<span class=\"sd\">/-- A first order recurrence relation -/</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">a₀</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">nat.sqrt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n\n<span class=\"sd\">/-- If two terms of the sequence are equal, so are their successors -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 215594759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604503078
    },
    {
        "content": "<p>I used <code>import data.nat.sqrt</code> to write a different version of your recurrence relation. (I personally find it hard to parse the <code>nat.rec</code> version.)</p>",
        "id": 215594896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604503121
    },
    {
        "content": "<p>And if you don't mind using <code>simp</code>, then you can golf the proof to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If two terms of the sequence are equal, so are their successors -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 215595012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604503187
    },
    {
        "content": "<p><code>by rw [a, a, h]</code> also works</p>",
        "id": 215595134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604503222
    },
    {
        "content": "<p>Yes, using the equation compiler will make <code>unfold</code> do something more useful.</p>",
        "id": 215596099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604503605
    },
    {
        "content": "<p>In the original code <code>dsimp</code> is looking for <code>nat.rec</code> applied to <code>nat.succ m</code>, not to <code>m + 1</code>.</p>",
        "id": 215596155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604503626
    },
    {
        "content": "<p>You can also easily make it computable using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.sqrt</span>\n\n<span class=\"sd\">/-- A first order recurrence relation -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">a₀</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">nat.sqrt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 215596634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604503792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/113489-new-members/topic/First.20order.20recurrence/near/215594759\">said</a>:</p>\n<blockquote>\n<p>If you don't mind using mathlib, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.sqrt</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical.prop_decidable</span>\n\n<span class=\"sd\">/-- A first order recurrence relation -/</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">a₀</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">nat.sqrt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n\n<span class=\"sd\">/-- If two terms of the sequence are equal, so are their successors -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">a₀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</blockquote>\n<p>I initially tried to do it with pattern matching too but the equation compiler would complain that the VM doesn't have code for 'classical.choice'. I see<code>nat.sqrt</code> avoids having to use this. It's great to not have to use <code>rec</code>. Thank you!</p>",
        "id": 215596726,
        "sender_full_name": "Adrián Doña Mateo",
        "timestamp": 1604503810
    },
    {
        "content": "<p>actually it's adding <code>noncomputable</code> which avoids that error--I don't understand why it is required when there is <code>noncomputable theory</code> already</p>",
        "id": 215596939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1604503889
    },
    {
        "content": "<p>I saw that complaint... it's a bit silly, because there was <code>noncomputable theory</code> at the top of the file. Don't know why it still complained.</p>",
        "id": 215596941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1604503889
    },
    {
        "content": "<p>there is a bug about this</p>",
        "id": 215596990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604503905
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/451\">lean#451</a></p>",
        "id": 215597111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604503938
    }
]