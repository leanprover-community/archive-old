[
    {
        "content": "<p>I want to do a few exercises with partitions, such as to show that <code>{{a}, {b}, {c}} &lt;= {{a, b}, {c}}</code>. I think first step is to show that each of those are partitions, which means first showing they're setoids. I can do that manually but maybe there's another way?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">thing</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span>\n<span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">mk_classes</span> <span class=\"o\">{{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}}</span> <span class=\"bp\">_</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">⊢ ∀ (a : thing), ∃! (b : set thing) (H : b ∈ {{a}, {b}, {c}}), a ∈ b -/</span>\n</code></pre></div>",
        "id": 205959166,
        "sender_full_name": "Iocta",
        "timestamp": 1596574378
    },
    {
        "content": "<p>Actually I don't know how to do that manually.</p>",
        "id": 205961488,
        "sender_full_name": "Iocta",
        "timestamp": 1596575527
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span>\n<span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">mk_classes</span> <span class=\"o\">{{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}}</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span>\n<span class=\"c1\">-- x : thing</span>\n<span class=\"c1\">-- ⊢ (λ (b : set thing), ∃! (H : b ∈ {{a}, {b}, {c}}), x ∈ b) {b} ∧ ∀ (y : set thing), (λ (b : set thing), ∃! (H : b ∈ {{a}, {b}, {c}}), x ∈ b) y → y = {b}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>That can't be right</p>",
        "id": 205963603,
        "sender_full_name": "Iocta",
        "timestamp": 1596576820
    },
    {
        "content": "<p>Why would you expect {b} to work for any x? Why not use {x}?</p>",
        "id": 205964030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596577054
    },
    {
        "content": "<p>Yeah fair enough</p>",
        "id": 205964163,
        "sender_full_name": "Iocta",
        "timestamp": 1596577099
    },
    {
        "content": "<p>but the state after that is <code>⊢ (λ (b : set thing), ∃! (H : b ∈ {{a}, {b}, {c}}), x ∈ b) {x} ∧ ∀ (y : set thing), (λ (b : set thing), ∃! (H : b ∈ {{a}, {b}, {c}}), x ∈ b) y → y = {x}</code> which I can barely even parse</p>",
        "id": 205964234,
        "sender_full_name": "Iocta",
        "timestamp": 1596577138
    },
    {
        "content": "<p>Well it's what you've got to prove. Try <code>simp</code>.</p>",
        "id": 205964842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596577507
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span>\n<span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">mk_classes</span> <span class=\"o\">{{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}}</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n<span class=\"o\">},</span>\n<span class=\"n\">intro</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"k\">have</span> <span class=\"n\">hxa</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n        <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">singleton</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hxa</span><span class=\"o\">)),</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n            <span class=\"k\">have</span> <span class=\"n\">hxb</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n            <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">singleton</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hxb</span><span class=\"o\">)),</span>\n        <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"k\">have</span> <span class=\"n\">hxc</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n            <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">singleton</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hxc</span><span class=\"o\">)),</span>\n        <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n<span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205966606,
        "sender_full_name": "Iocta",
        "timestamp": 1596578644
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">thing</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">thing</span> <span class=\"o\">:=</span>\n<span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">mk_classes</span> <span class=\"o\">{{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}}</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205967026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596578894
    },
    {
        "content": "<p>ha</p>",
        "id": 205967254,
        "sender_full_name": "Iocta",
        "timestamp": 1596579065
    },
    {
        "content": "<p>This works, what would make it more stylish?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">set_partition</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">ab_connected</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">,</span>  <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∧</span>  <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"n\">ab_connected</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">ab_connected</span> <span class=\"n\">p&#39;</span><span class=\"o\">):=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">p&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">pab</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">hp&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">ab_connected</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">pab</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">pab</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">pab</span> <span class=\"k\">with</span> <span class=\"n\">hs</span> <span class=\"n\">pab</span><span class=\"o\">,</span>\n<span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205969457,
        "sender_full_name": "Iocta",
        "timestamp": 1596580683
    },
    {
        "content": "<p>For example, I don't yet have a feel for when I want <code>\\forall</code> vs left-of-colon, or when to use <code>\\and</code> vs <code>\\to</code>.</p>",
        "id": 205969845,
        "sender_full_name": "Iocta",
        "timestamp": 1596581017
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">,</span>  <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∧</span>  <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">→</span>\n<span class=\"o\">(</span><span class=\"n\">ab_connected</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">ab_connected</span> <span class=\"n\">p&#39;</span><span class=\"o\">):=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">p&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">pab</span><span class=\"o\">,</span>\n<span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span> <span class=\"n\">hp</span> <span class=\"o\">,</span> <span class=\"n\">hp&#39;</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">ab_connected</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205970171,
        "sender_full_name": "Iocta",
        "timestamp": 1596581184
    },
    {
        "content": "<p>The argument for putting as much as you can left-of-colon is that it doesn't make theorem statements any longer, but it makes proofs shorter because you don't need to write <code>intro</code> as much. The <code>\\and</code> v <code>\\to</code> thing is not the same though -- they mean different things. It's a bit confusing because (P and Q) -&gt; R is the same as P -&gt; (Q -&gt; R) so here they're playing a similar role (and in this situation you should use -&gt; not and, because functional programming is easier that way). However in general and and to just mean different things so you should use the one which is logically correct</p>",
        "id": 205970188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596581202
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span>\n<span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hp&#39;</span><span class=\"o\">:</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≤</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pab</span><span class=\"o\">:</span> <span class=\"n\">ab_connected</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">ab_connected</span> <span class=\"n\">p&#39;</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">ab_connected</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205970468,
        "sender_full_name": "Iocta",
        "timestamp": 1596581416
    },
    {
        "content": "<p>Trying to do it more generically using <code>is_monotone</code>. How can I use <code>h</code> to fill the <code>sorry</code>s? I can't even figure out how to do the equivalent of <code>unfold has_le at h</code>.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">thing</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">set_partition</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">ab_connected</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">is_monotone</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n <span class=\"bp\">∀</span> <span class=\"n\">x1</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x1</span> <span class=\"bp\">≤</span> <span class=\"n\">x2</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x1</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x2</span>\n\n\n<span class=\"kn\">example</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"o\">(</span><span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">]:</span> <span class=\"n\">is_monotone</span> <span class=\"n\">ab_connected</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span> <span class=\"n\">p</span> <span class=\"n\">p&#39;</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">ab_connected</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">rcases</span> <span class=\"n\">h&#39;</span> <span class=\"k\">with</span>  <span class=\"bp\">⟨</span><span class=\"n\">s</span> <span class=\"o\">,</span> <span class=\"n\">hsp</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">have</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n\n<span class=\"c1\">-- _inst_1 : preorder (set_partition thing)</span>\n<span class=\"c1\">-- pp&#39; : set_partition thing</span>\n<span class=\"c1\">-- h : p ≤ p&#39;</span>\n<span class=\"c1\">-- s : set thing</span>\n<span class=\"c1\">-- hsp : s ∈ ↑p</span>\n<span class=\"c1\">-- ha : a ∈ s</span>\n<span class=\"c1\">-- hb : b ∈ s</span>\n<span class=\"c1\">-- ⊢ ∃ (s&#39; : set thing) (H : s&#39; ∈ p&#39;.val), a ∈ s&#39;</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">s&#39;</span> <span class=\"n\">hs&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">finish</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">finish</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">hs&#39;</span> <span class=\"k\">with</span> <span class=\"n\">hs&#39;</span> <span class=\"n\">as&#39;</span><span class=\"o\">,</span>\n<span class=\"c1\">--         _inst_1 : preorder (set_partition thing)</span>\n<span class=\"c1\">-- pp&#39; : set_partition thing</span>\n<span class=\"c1\">-- h : p ≤ p&#39;</span>\n<span class=\"c1\">-- s : set thing</span>\n<span class=\"c1\">-- hsp : s ∈ ↑p</span>\n<span class=\"c1\">-- ha : a ∈ s</span>\n<span class=\"c1\">-- hb : b ∈ s</span>\n<span class=\"c1\">-- s&#39; : set thing</span>\n<span class=\"c1\">-- hs&#39; : s&#39; ∈ p&#39;.val</span>\n<span class=\"c1\">-- as&#39; : a ∈ s&#39;</span>\n<span class=\"c1\">-- ⊢ b ∈ s&#39;</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n<span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 205978995,
        "sender_full_name": "Iocta",
        "timestamp": 1596589839
    },
    {
        "content": "<p>I don't think this is provable without adding some more assumptions on the preorder on <code>set_partition thing</code>. For example, just because <code>p ≤ p'</code> in your arbitrary preorder, that doesn't necessarily give you any way to prove <code>s' ∈ p'.val</code> from <code>s ∈ ↑p</code>.</p>",
        "id": 205979376,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1596590434
    },
    {
        "content": "<p>How do I express the same assumptions as in the prior version above?</p>",
        "id": 205980562,
        "sender_full_name": "Iocta",
        "timestamp": 1596592290
    },
    {
        "content": "<p>I'm guessing you didn't prove what you thought you were proving</p>",
        "id": 205981019,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596592944
    },
    {
        "content": "<p>Sounds plausible, what do you have in mind?</p>",
        "id": 205981093,
        "sender_full_name": "Iocta",
        "timestamp": 1596593047
    },
    {
        "content": "<p>before, you wrote <code>p.val ≤ p'.val</code> where <code>p.val : set (set thing)</code></p>",
        "id": 205981123,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596593094
    },
    {
        "content": "<p>you're right :-/</p>",
        "id": 205981237,
        "sender_full_name": "Iocta",
        "timestamp": 1596593255
    },
    {
        "content": "<p>The order relation that I want is \"finer is lesser\". Is that the one that's <a href=\"https://github.com/leanprover-community/mathlib/blob/d9a6e478571a4f12a18960cc10f72412a4dcdd0c/src/data/setoid/partition.lean#L161\">built into partition</a>? How do I get <code>set_partition thing</code> to inherit that ordering?</p>",
        "id": 205996457,
        "sender_full_name": "Iocta",
        "timestamp": 1596613819
    },
    {
        "content": "<p>You can use partial_order.lift</p>",
        "id": 205997418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596614714
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">thing</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set_partition</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set_partition</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">set_partition</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">set_partition</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ab_connected</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ab_connected_of_le</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">p&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">ab_connected</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ab_connected</span> <span class=\"n\">p&#39;</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">set_partition</span>\n</code></pre></div>",
        "id": 205999242,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596616263
    },
    {
        "content": "<p>What does <code>//</code> do vs <code>|</code>?</p>",
        "id": 205999614,
        "sender_full_name": "Iocta",
        "timestamp": 1596616520
    },
    {
        "content": "<p>Makes a type not a term</p>",
        "id": 205999736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596616623
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">set_partition</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>doesn't make a type?</p>",
        "id": 205999777,
        "sender_full_name": "Iocta",
        "timestamp": 1596616680
    },
    {
        "content": "<p>well, function for generating types</p>",
        "id": 205999823,
        "sender_full_name": "Iocta",
        "timestamp": 1596616703
    },
    {
        "content": "<p>well it makes a set, which Lean knows how to coerce to type</p>",
        "id": 205999856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596616734
    },
    {
        "content": "<p>the results are defeq</p>",
        "id": 205999861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596616739
    },
    {
        "content": "<p>I have to say, the API of partition in the file is very incomplete</p>",
        "id": 205999973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596616833
    },
    {
        "content": "<p>but we pick <code>//</code> for clarity I guess</p>",
        "id": 205999984,
        "sender_full_name": "Iocta",
        "timestamp": 1596616845
    },
    {
        "content": "<p>if I understood you right, using <code>|</code> would have the same result in this case</p>",
        "id": 206000040,
        "sender_full_name": "Iocta",
        "timestamp": 1596616894
    },
    {
        "content": "<p>yes</p>",
        "id": 206000625,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596617374
    },
    {
        "content": "<p>Except you'd get little arrows everywhere</p>",
        "id": 206001143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596617834
    },
    {
        "content": "<p>Can I unfold that <code>h</code> so I can see what I'm actually working with?</p>",
        "id": 206002623,
        "sender_full_name": "Iocta",
        "timestamp": 1596619124
    },
    {
        "content": "<p>there's the <code>have := @h</code> trick</p>",
        "id": 206002636,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596619139
    },
    {
        "content": "<p>to make its arguments explicit</p>",
        "id": 206002645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596619146
    },
    {
        "content": "<p>doesn't help</p>",
        "id": 206002667,
        "sender_full_name": "Iocta",
        "timestamp": 1596619177
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 206003076,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596619554
    },
    {
        "content": "<p>?</p>",
        "id": 206003082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596619556
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">pp&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">p&#39;</span>\n<span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">ab_connected</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">p&#39;</span>\n<span class=\"err\">⊢</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">ab_connected</span>\n</code></pre></div>",
        "id": 206003173,
        "sender_full_name": "Iocta",
        "timestamp": 1596619611
    },
    {
        "content": "<p>oh well</p>",
        "id": 206003236,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596619680
    },
    {
        "content": "<p>also been wondering why is there no space between p and p'</p>",
        "id": 206003282,
        "sender_full_name": "Iocta",
        "timestamp": 1596619694
    },
    {
        "content": "<p>how about <code>have := @h _</code></p>",
        "id": 206003289,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596619697
    },
    {
        "content": "<p>oh I think that's a bug</p>",
        "id": 206003299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596619704
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">thing</span><span class=\"o\">⦄,</span> <span class=\"o\">(</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">mk_classes</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rel</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">mk_classes</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">rel</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 206003319,
        "sender_full_name": "Iocta",
        "timestamp": 1596619722
    },
    {
        "content": "<p>I think I need to use <code>h</code> here but I can't figure out how to apply it.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">thing</span>\n\n<span class=\"n\">def</span> <span class=\"n\">set_partition</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set_partition</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">set_partition</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">set_partition</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ab_connected</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ab_connected_of_le</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set_partition</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">p&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">ab_connected</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ab_connected</span> <span class=\"n\">p&#39;</span><span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rcases</span> <span class=\"n\">hp</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"n\">unfold</span> <span class=\"n\">ab_connected</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hs&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">thing</span><span class=\"o\">,</span> <span class=\"n\">s&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">p&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">hne</span> <span class=\"n\">hpart&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">hpart&#39;</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hpart&#39;</span> <span class=\"k\">with</span> <span class=\"n\">s&#39;</span> <span class=\"n\">hs&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hs&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hs&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hs&#39;</span> <span class=\"k\">with</span> <span class=\"n\">s&#39;</span> <span class=\"n\">hs&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>  <span class=\"n\">apply</span> <span class=\"n\">hs&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span>  <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>  <span class=\"n\">apply</span> <span class=\"n\">hs&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span>\n            <span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s&#39;</span><span class=\"o\">,</span>\n            <span class=\"c1\">-- pp&#39; : set_partition thing</span>\n            <span class=\"c1\">-- h : p ≤ p&#39;</span>\n            <span class=\"c1\">-- s : set thing</span>\n            <span class=\"c1\">-- hs : s ∈ p.val</span>\n            <span class=\"c1\">-- ha : a ∈ s</span>\n            <span class=\"c1\">-- hb : b ∈ s</span>\n            <span class=\"c1\">-- s&#39; : set thing</span>\n            <span class=\"c1\">-- hs&#39; : s&#39; ∈ p&#39;.val ∧ a ∈ s&#39;</span>\n            <span class=\"c1\">-- ⊢ b ∈ s&#39;</span>\n            <span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n<span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">set_partition</span>\n</code></pre></div>",
        "id": 206070833,
        "sender_full_name": "Iocta",
        "timestamp": 1596657542
    },
    {
        "content": "<p><code>h</code> means <code>p &lt;= p'</code> which means p is finer than p', which means whenever a and b are in the same part of p, then a and b are in the same part of p'. That's exactly the thing I need, but I can' t see how to actually <em>use</em> <code>h</code>, aka <code>this</code>.</p>",
        "id": 206085414,
        "sender_full_name": "Iocta",
        "timestamp": 1596666304
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hs&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hs&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 206086377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596666963
    },
    {
        "content": "<p>that does something, I'll fiddle with it</p>",
        "id": 206086491,
        "sender_full_name": "Iocta",
        "timestamp": 1596667071
    },
    {
        "content": "<p>as I said, the API for partition is really lacking</p>",
        "id": 206116653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596703424
    },
    {
        "content": "<p>It only excludes <code>S</code> from containing the empty set -- it still allows <code>S</code> itself to be empty.</p>",
        "id": 261388983,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636850363
    },
    {
        "content": "<p>Hmm, do you think it could have some issue with non-used colors?</p>",
        "id": 261389053,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636850426
    },
    {
        "content": "<p>(when mapping colorings to partitions and vice-versa)</p>",
        "id": 261389140,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1636850540
    },
    {
        "content": "<p>My use case for <code>is_antichain</code> was <a href=\"https://github.com/leanprover-community/mathlib/tree/combinatorics\">branch#combinatorics</a>, but yes I definitely had independent sets in mind.</p>",
        "id": 261389374,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636850886
    },
    {
        "content": "<p>The definition of partition is precisely to make \"equivalence relations on X = partitions of X\" true.</p>",
        "id": 261389569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636851207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20variable.20declaration/near/261389053\">said</a>:</p>\n<blockquote>\n<p>Hmm, do you think it could have some issue with non-used colors?</p>\n</blockquote>\n<p>This is ok if we use the coloring function to partition the vertices, since empty sets won't turn up.  I think it's <code>(setoid.ker C).classes</code>.  Then there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.is_partition_classes\">docs#setoid.is_partition_classes</a></p>",
        "id": 261389747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636851462
    }
]