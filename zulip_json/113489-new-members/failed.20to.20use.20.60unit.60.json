[
    {
        "content": "<p>What does using <code>unit</code> fail in this case?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"n\">unit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>error <code>failed to instantiate goal with unit</code></p>",
        "id": 247082434,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627143418
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">),</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span> <span class=\"n\">unit</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>error : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">Exists.intro</span> <span class=\"n\">unit</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">unit</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 247082449,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627143469
    },
    {
        "content": "<p><code>punit</code> is the universe polymorphic version of <code>unit</code></p>",
        "id": 247082508,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627143542
    },
    {
        "content": "<p>I found </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">),</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span> <span class=\"o\">(</span><span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>is fine.</p>",
        "id": 247082582,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627143620
    },
    {
        "content": "<p>The thing I don't understand is,  in the second error message, I thought <code>Type : Type 1</code> should be able to match <code>Type u : Type (u+1)</code>. Can't <code>u</code> be <code>0</code>?</p>",
        "id": 247082606,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627143710
    },
    {
        "content": "<p>the previous version is kind of <code>∀ u, ∃ I : Type u, true</code>, whilst the second is more like <code>∃ u, ∃ I : Type u, true</code>; the universe is a \"metavariable\" in the <code>Type*</code> example and is allowed to be filled in to what's needed later</p>",
        "id": 247082648,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627143751
    },
    {
        "content": "<p>okay, but actually it gets more interesting; do it as a <code>lemma/theorem</code> and it fails again, whilst as a <code>def</code> it's fine. I'm not too sure why that is.</p>",
        "id": 247082711,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627143851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/113489-new-members/topic/failed.20to.20use.20.60unit.60/near/247082711\">said</a>:</p>\n<blockquote>\n<p>okay, but actually it gets more interesting; do it as a <code>lemma/theorem</code> and it fails again, whilst as a <code>def</code> it's fine. I'm not too sure why that is.</p>\n</blockquote>\n<p>Yeah, I also found this! That is confusing.</p>",
        "id": 247082721,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627143897
    },
    {
        "content": "<p>I guess <code>punit</code> does not have enough APIs, lean even doesn't know <code>matrix punit punit ℚ</code> has one..</p>",
        "id": 247082802,
        "sender_full_name": "Alex Zhang",
        "timestamp": 1627144048
    },
    {
        "content": "<p><code>example</code> behaves like a <code>def</code></p>",
        "id": 247083192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627144777
    },
    {
        "content": "<p>In that it's type is affected by the implementation</p>",
        "id": 247083195,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627144790
    },
    {
        "content": "<p>Whereas lemmas the type is known before looking at the proof</p>",
        "id": 247083242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627144811
    },
    {
        "content": "<p>Which is why <code>def trivial' := trivial</code> works fine, but <code>lemma trivial' := trivial</code> fails</p>",
        "id": 247083253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627144854
    },
    {
        "content": "<p>so in a <code>lemma</code> <code>Type*</code> gets instantly evaluated to <code>Type u</code> for some <code>u</code>, whilst in a <code>def</code> it becomes <code>Type ?u_1</code>, and gets filled in by the proof?</p>",
        "id": 247083347,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1627145041
    },
    {
        "content": "<p><code>Type *</code> means \"guess the universe level based on how I use it\"</p>",
        "id": 247083800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627145662
    },
    {
        "content": "<p>So essentially your description is correct, but lemma fills in the universe metavariables when it reaches the <code>:=</code></p>",
        "id": 247083898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1627145816
    }
]