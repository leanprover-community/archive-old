[
    {
        "content": "<p>I was wondering if anyone might have advice on a learning path for getting to the point of being able to make useful contributions to the goal of easing the use of computer proof assistants like Lean. I have spent some time studying mathematical logic, primarily from \"First Order Mathematical Logic\" by Angelo Margaris, and I have started going through \"Lectures on the Curry-Howard Isomorphism\" by Morten Heine Sørensen and Pawel Urzyczyn (<a href=\"https://play.google.com/store/books/details?id=_mtnm-9KtbEC\" target=\"_blank\" title=\"https://play.google.com/store/books/details?id=_mtnm-9KtbEC\">https://play.google.com/store/books/details?id=_mtnm-9KtbEC</a>). In some respects there seems to be a bit of a catch-22 here, having the mathematics from these texts available in a fully formalized fashion would be an aid to understanding them, but first needing that understanding to formalize them or to understand their formalization. Nevertheless, I am making progress in these, but it is time consuming, so I would like to be sure that it is a good approach. I am also curious as to the kind of open problems in the field.</p>",
        "id": 158717169,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1550359585
    },
    {
        "content": "<p>My strategy was : read Theorem Proving In Lean, think of some hard problems, try to solve them, get stuck, ask loads of questions here, and then people start realising where the true bottlenecks are</p>",
        "id": 158719421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550363896
    },
    {
        "content": "<p>I do not specifically know those texts but that seems like a good approach. You have to be ok with things being slow at first</p>",
        "id": 158719424,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550363906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Did you already know type theory and logic before you did so?</p>",
        "id": 158720394,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1550365719
    },
    {
        "content": "<p>Would it be useful, apart from my own learning, for me to try and formalize the latter book in Lean?</p>",
        "id": 158725236,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1550375064
    },
    {
        "content": "<p>I don't think you need to know any of those if your goal is to \"make Lean easier to use\"</p>",
        "id": 158728570,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550381279
    },
    {
        "content": "<p>TBH if you're looking for a textbook Coq has way more mindshare at the moment, you may work through Software Foundations and some of the harder exercises in CPDT in Coq. At that point you're a year or two in and a whiz, and then you come back and pick up Lean since most things are similar...</p>",
        "id": 158728696,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550381423
    },
    {
        "content": "<p>I would say also most people don't use Lean/Coq to implement programs because specifying and proving program behavior is exceedingly tedious</p>",
        "id": 158728910,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550381821
    },
    {
        "content": "<p>unit tests in regular programming languages are already seen as a chore</p>",
        "id": 158728918,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550381830
    },
    {
        "content": "<p>anything which reduces the burden of writing proofs is ultimately what's needed; that means automatic proof search, better lemma and theorem search &amp; autocomplete, code linting, etc etc etc</p>",
        "id": 158728963,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550381915
    },
    {
        "content": "<p>none of those things really require a back to front knowledge of type theory / curry-howard isomorphism / etc</p>",
        "id": 158728972,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1550381957
    },
    {
        "content": "<p>I have been hesitant to start learning Coq because it appears designed for backward reasoning with tactics, and I would like to create proofs with forward reasoning so that they are readable outside of the proof assistant. Can I use forward reasoning with Coq, or automatically convert tactic style proofs to term style proofs that are readable outside of Coq?</p>",
        "id": 159138989,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1550823070
    },
    {
        "content": "<p>Yes you can reason any way you see fit in both Coq and Lean. I wouldn't say either of the tools is designed for either of the options, although backwards reasoning if of some preference in mechanized environments simply because you don't end up cluttering your goals with redundant assumptions (as much).</p>",
        "id": 159140250,
        "sender_full_name": "Moses Schönfinkel",
        "timestamp": 1550824946
    },
    {
        "content": "<p>I genuinely don't know why computer scientists seem to make so much fuss about forward v backward reasoning. This concept is never thought about in mathematics, a logical argument is a logical argument and who cares which order the steps go in. Can anyone enlighten me as to why this sort of thing seems to come up again and again in the CS community?</p>",
        "id": 159143791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550829161
    },
    {
        "content": "<p>I think it's primarily because it is actually a difference between \"natural proving style\" on paper vs on the computer</p>",
        "id": 159144065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550829447
    },
    {
        "content": "<p>No one writes a paper proof with a list of \"it suffices to show\" statements</p>",
        "id": 159144074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550829470
    },
    {
        "content": "<p>it's hard to follow</p>",
        "id": 159144078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550829476
    },
    {
        "content": "<p>but in a computer proof it's generally easier and more structured to approach proofs like this, where the forward proving steps are the exception, not the norm</p>",
        "id": 159144137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550829527
    },
    {
        "content": "<p>From my experience I would say it's not \"the computer scientists\" making the fuss, it's the mathematicians who are expecting formal proofs to look like LaTeX paper proofs</p>",
        "id": 159144306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550829645
    },
    {
        "content": "<p>But the reason that can't be right is that 99.9% of mathematicians have never even <em>heard</em> of the phrases \"forward reasoning\" and \"backward reasoning\" so we can't possibly be making a fuss about them :-)</p>",
        "id": 159146074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831383
    },
    {
        "content": "<p>We just reason.</p>",
        "id": 159146139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831411
    },
    {
        "content": "<p>no but you know it when it's explained to you</p>",
        "id": 159146156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831424
    },
    {
        "content": "<p>Yes we do -- but then we wonder what the fuss is about :-)</p>",
        "id": 159146171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831444
    },
    {
        "content": "<p>I say again -- why does this question even matter? We have \"thus\" and we have \"it suffices to prove that\"</p>",
        "id": 159146185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831466
    },
    {
        "content": "<p>and they can go in any order. And we, as far as I know, attach no special importance to this. They're just different ways of making progress.</p>",
        "id": 159146213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831486
    },
    {
        "content": "<p>But for some reason this is an issue in CS.</p>",
        "id": 159146221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831494
    },
    {
        "content": "<p>It's a style question. Like I said, if you saw someone prove an entire proof using \"it suffices to prove\" (I mean like 10+ uses of this), it would be disorientating</p>",
        "id": 159146232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831508
    },
    {
        "content": "<p>even though it's clearly how you come to proofs quite often</p>",
        "id": 159146280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831529
    },
    {
        "content": "<p>On the other hand, you might claim you're doing backwards reasoning but when I see 3000+ line files like multiset.lean consisting of lemma after lemma after lemma with three-line proofs, you're doing forward reasoning really.</p>",
        "id": 159146296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831554
    },
    {
        "content": "<p>for some reason the usual style of presentation prefers the \"rabbit out of a hat\" kind of steps</p>",
        "id": 159146298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831559
    },
    {
        "content": "<p>That's what you write with your short lemmas -- your preferred style.</p>",
        "id": 159146313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831575
    },
    {
        "content": "<p>Actually I'm writing closer to \"mathematical order\" there. It's backward reasoning, but I write in reverse order so it comes out looking like forward proof order</p>",
        "id": 159146339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831614
    },
    {
        "content": "<p>which is also what I do when composing paper proofs</p>",
        "id": 159146352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831637
    },
    {
        "content": "<p>Your backwards / forwards reasoning discussion seems to be going on at a micro-level -- within the proof of one lemma. If you wrote all the lemmas backwards in multiset.lean it wouldn't compile.</p>",
        "id": 159146353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831638
    },
    {
        "content": "<p>I'm saying I write the last lemma first, and work backwards, typing upward in the file</p>",
        "id": 159146416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831666
    },
    {
        "content": "<p>in the end it looks like I wrote in forward order</p>",
        "id": 159146421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831678
    },
    {
        "content": "<p>I think it might be a lemma v theorem thing. We prove theorems forwards and you prove lemmas backwards, and then we say we do things in different order. But we don't give the proofs of lemmas because they're trivial, and you prove lemmas in the right order, so we're both doing things the same way really, but focussing on different aspects.</p>",
        "id": 159146426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831697
    },
    {
        "content": "<p>I only prove lemmas in textual order if I happen to be sufficiently forward thinking to predict the lemmas in advance</p>",
        "id": 159146454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831735
    },
    {
        "content": "<p>Whereas we don't prove them at all, because the fact that you can do induction on multisets is trivial.</p>",
        "id": 159146531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831765
    },
    {
        "content": "<p>No, you have lemmas too, they are just at a different level</p>",
        "id": 159146553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550831781
    },
    {
        "content": "<p>Probably in real life (i.e. when I'm being a mathematician) I reason in a highly non-linear manner.</p>",
        "id": 159146674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550831937
    },
    {
        "content": "<p>\"it's the mathematicians who are expecting formal proofs to look like LaTeX paper proofs\". I think I fall into this category.</p>",
        "id": 159248726,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1550961722
    },
    {
        "content": "<p><a href=\"http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\">http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html</a> Patrick's working on it.</p>",
        "id": 159248774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550961765
    },
    {
        "content": "<p>This has been generated automatically from a Lean proof?</p>",
        "id": 159248894,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1550961966
    },
    {
        "content": "<p>Not really</p>",
        "id": 159248898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550961980
    },
    {
        "content": "<p>It's been generated from a .lean file though</p>",
        "id": 159248903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550961997
    },
    {
        "content": "<p>Is there a link to that file, and more info on the project?</p>",
        "id": 159248927,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1550962069
    },
    {
        "content": "<p>Check out the <code>Lean + LaTeX?</code> thread in #general</p>",
        "id": 159248970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550962095
    },
    {
        "content": "<p>As a computer scientist and software engineering guy, I've come to the conclusion that the phrase,  \"backwards reasoning\", is really not as clarifying as it could be. When we use (apply and.intro _ _), for example, to start a proof script, sure, we can think of \"going backwards through the arrow to the premises\", and all that. But a better way to think of what we've done is to give a complete proof term, defining the overall architecture of the proof, albeit with a few remaining holes still abstracted away. We then recursively fill the remaining \"stubs\" (aka holes) by applying the same method recursively. </p>\n<p>In the software design and engineering field, this is known as top-down, structured programming. A better term might be top-down, type-guided refinement. But that I think is the right way to think about what's happening. A complete working proof is given modulo fleshing out of remaining stubs. <br>\nIt's not really backwards, it's top-down. It's a great way to develop simple procedural or functional programs, and it's just as great a way to develop proofs. Nothing strange about it at all, if you see it as top-down, structured programming.</p>",
        "id": 159449218,
        "sender_full_name": "Kevin Sullivan",
        "timestamp": 1551208416
    },
    {
        "content": "<p>I don't think of it as strange. It is just that to me the resulting proof seems hard to read and comprehend, especially outside of the IDE.</p>",
        "id": 159582725,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1551335401
    }
]