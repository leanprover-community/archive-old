[
    {
        "content": "<p>While doing some simple geometry proofs I needed to drop a perpendicular from a point to line. Then take the cosine of the angle from by this perpendicular from the point it was droped from. Thus a I need a definition/lemma/something that says that in a right angle triangle the cosine is the adjacent over the hypotenuse.</p>\n<p><a href=\"/user_uploads/3121/ayCJMlkKYgp-X9jcyEVVSoGI/DropPerpendicular.drawio.png\">DropPerpendicular.drawio.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ayCJMlkKYgp-X9jcyEVVSoGI/DropPerpendicular.drawio.png\" title=\"DropPerpendicular.drawio.png\"><img src=\"/user_uploads/3121/ayCJMlkKYgp-X9jcyEVVSoGI/DropPerpendicular.drawio.png\"></a></div><p>I looked a through the euclidean_geometry in mathlib but couldn't find either points. I guess it is either somewhere else or not implemented yet.</p>\n<h2>First Question</h2>\n<p>So my first question is there somewhere I am missing where basic right angle triangle definitions are?</p>\n<h2>Second Question</h2>\n<p>I tried my hand both and would welcome any critique. </p>\n<ol>\n<li>For example would the way I defined the perpendicular drop be Ok or do you think there is a more useful way. </li>\n<li>To require a right angle better use pi/2 or use an inner product definition?</li>\n<li>What is the difference between having this on the lemma <br>\n<code> {V : Type*} {P : Type*} [inner_product_space ℝ V] [metric_space P] </code><br>\nor having variables at the beginning of my file</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n<span class=\"kn\">include</span> <span class=\"n\">V</span>\n</code></pre></div>\n<ol start=\"4\">\n<li>There is definitely a better way to do this. What I did seems very verbose, any thoughts?</li>\n</ol>\n<h2>Third Question</h2>\n<p>when doing proofs with euclidean_geometry is there a  <code>normed_add_torsor V P</code> goal that appears when I use the lemmas dist_eq_norm_vsub that I can clear at the end by assumption, but I have on idea what it is.</p>\n<p>Thanks for any comments or help.</p>\n<h1>Perpendicular Drop Code</h1>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">perpendicular_drop</span>\n    <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">p2</span> <span class=\"bp\">≠</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">p3</span> <span class=\"bp\">≠</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">≠</span> <span class=\"n\">p3</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span>\n    <span class=\"o\">(</span>\n      <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">pa</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">),</span> <span class=\"n\">pa</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">line_map</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n      <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span> <span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">⟫</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">∥</span> <span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">∥</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">∥</span><span class=\"o\">))</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">angle</span> <span class=\"n\">p1</span> <span class=\"n\">pa</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">angle</span> <span class=\"n\">p3</span> <span class=\"n\">pa</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"n\">π</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n    <span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">⟪</span> <span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">⟫</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">∥</span> <span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">∥</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">∥</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">line_map</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"n\">use</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">=</span> <span class=\"bp\">⟪</span> <span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">⟫</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">∥</span> <span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">∥</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span> <span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">∥</span><span class=\"o\">),</span> <span class=\"o\">{</span>\n    <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">xz</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span><span class=\"bp\">∥</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">rza</span><span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span><span class=\"bp\">∥^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∥</span><span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span><span class=\"bp\">∥^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">inv_mul_cancel</span><span class=\"o\">,</span> <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sq_eq_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">line_map_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">euclidean_geometry.angle</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inner_product_geometry.angle</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vsub_vadd_eq_vsub_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vsub_vadd_eq_vsub_sub</span><span class=\"o\">,</span>\n\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inner_sub_right</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real_inner_smul_right</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real_inner_smul_left</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">real_inner_smul_left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real_inner_comm</span> <span class=\"o\">(</span><span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span><span class=\"o\">),</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">real_inner_self_eq_norm_sq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rza</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">line_map_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">euclidean_geometry.angle</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inner_product_geometry.angle</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vsub_vadd_eq_vsub_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">vsub_vadd_eq_vsub_sub</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inner_sub_left</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_right</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_right</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real_inner_smul_right</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real_inner_smul_right</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">real_inner_smul_left</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">real_inner_self_eq_norm_sq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rza</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<h1>Cosine is Equal Adjacent over Hypotenuse</h1>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cos_adjacent_div_hypotenuse</span>\n  <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">p2</span> <span class=\"bp\">≠</span> <span class=\"n\">p1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">p3</span> <span class=\"bp\">≠</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hc</span><span class=\"o\">:</span> <span class=\"n\">p1</span> <span class=\"bp\">≠</span> <span class=\"n\">p3</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hpi_div_2</span><span class=\"o\">:</span> <span class=\"n\">angle</span> <span class=\"n\">p2</span> <span class=\"n\">p1</span> <span class=\"n\">p3</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">real.cos</span><span class=\"o\">(</span><span class=\"n\">angle</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dist</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"bp\">/</span> <span class=\"n\">dist</span> <span class=\"n\">p2</span> <span class=\"n\">p3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">abs_p321</span><span class=\"o\">:</span>\n    <span class=\"bp\">|</span><span class=\"n\">inner</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"bp\">∥</span><span class=\"n\">p1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span><span class=\"bp\">∥</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span><span class=\"bp\">∥</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">abs_real_inner_div_norm_mul_norm_le_one</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">abs_le</span> <span class=\"n\">at</span> <span class=\"n\">abs_p321</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">abs_p321</span> <span class=\"k\">with</span> <span class=\"n\">h_leq_one</span> <span class=\"n\">h_geq_one</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">p321</span><span class=\"o\">:</span> <span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span><span class=\"o\">)),</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">mixz</span><span class=\"o\">:</span> <span class=\"bp\">⟪</span><span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p1</span><span class=\"o\">)</span><span class=\"bp\">⟫</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n     <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">neg_eq_zero</span><span class=\"o\">,</span>\n     <span class=\"bp\">←</span> <span class=\"n\">inner_neg_left</span><span class=\"o\">,</span>\n     <span class=\"n\">neg_vsub_eq_vsub_rev</span><span class=\"o\">,</span>\n     <span class=\"n\">inner_eq_zero_iff_angle_eq_pi_div_two</span><span class=\"o\">],</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">euclidean_geometry.angle</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inner_product_geometry.angle</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real.cos_arccos</span> <span class=\"n\">h_leq_one</span> <span class=\"n\">h_geq_one</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- inner (p1 -ᵥ p2) (p3 -ᵥ p2) / (∥p1 -ᵥ p2∥ * ∥p3 -ᵥ p2∥) = dist p1 p2 / dist p2 p3</span>\n  <span class=\"n\">rw</span> <span class=\"n\">p321</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inner_add_right</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mixz</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real_inner_self_eq_norm_sq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">p321</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dist_eq_norm_vsub</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">dist_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">dist_eq_norm_vsub</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- ∥p1 -ᵥ p2∥ ^ 2 / (∥p1 -ᵥ p2∥ * ∥p3 -ᵥ p2∥) = ∥p1 -ᵥ p2∥ / ∥p3 -ᵥ p2∥</span>\n  <span class=\"k\">have</span> <span class=\"n\">nz_p12</span><span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">p1</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span><span class=\"bp\">∥</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">norm_neg</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">push_neg.not_eq</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">nz_p23</span><span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">p3</span> <span class=\"bp\">-ᵥ</span> <span class=\"n\">p2</span><span class=\"bp\">∥</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">push_neg.not_eq</span><span class=\"o\">,},</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">div_mul_eq_div_div_swap</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_right_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_eq_iff</span> <span class=\"n\">nz_p23</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_mul_cancel</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- ∥p1 -ᵥ p2∥ ^ 2 / ∥p1 -ᵥ p2∥ = ∥p1 -ᵥ p2∥</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_eq_iff</span> <span class=\"n\">nz_p12</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">nz_p23</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- clear normed_add_torsor V P that showed up: I have no idea why!!</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283780851,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1653413916
    },
    {
        "content": "<p>Geometry in mathlib defines and proves things in ways that make sense in more than two dimensions, where possible. There are at least two different ways of defining a perpendicular (from a point to an affine subspace that may not necessarily be a line). You can use <code>affine_subspace.mk' p s.directionᗮ</code>, which is the affine subspace through the point <code>p</code> in the direction orthogonal to the subspace <code>s</code> (which is not a line in general, depending on the dimensions involved); that's how <code>altitude</code> is defined for a general simplex, for example. Or you can take the <code>affine_span</code> of the point and its <code>orthogonal_projection</code> onto the subspace (required to have its direction a <code>complete_space</code>, which is automatically the case by type class inference when it's <code>finite_dimensional</code>); this is just a point, not a line, when the point lies in the subspace. Which one of those you want depends on what you want the resulting subspace to be in more than two dimensions, as well as what you want when the point lies in the subspace. Or if what you want is just the foot of the perpendicular rather than the line itself, just use <code>orthogonal_projection</code>, which there are lots of lemmas about.</p>\n<p>I'd say that if you're talking about a right angle <em>between two vectors</em>, either the inner product or the angle is appropriate (we have Pythagoras in both forms), but if you're talking about it <em>between three points</em>, using the angle is appropriate rather than the inner product.</p>\n<p>We have the law of cosines, in one form only for each of angles between vectors and angles between points (both of those include degenerate cases, not just the cases of an actual triangle). It would seem reasonable to add various rearranged forms of that result, such as one that gives an expression for the cosine of the angle in terms of the vector norms or distances (again, including degenerate cases, not restricted to a triangle; the way angles are defined means they end up as pi/2 if a zero vector is involved, so everything should work out in the degenerate cases). Once you have such rearranged forms, deducing results specific to the right-angled case should be straightforward. (Splitting out small lemmas that are independently meaningful - and, when you do so, thinking about what the appropriately general form of such a lemma is, which may not be the exact form you're using in your larger proof - is generally a good way to simplify proofs.)</p>\n<p>It may sometimes help to pass at least one point explicitly to <code>dist_eq_norm_vsub</code> even if <code>rw</code> can work out the point for itself; I think the issue you're having is about order of elaboration, where Lean needs to know the type <code>P</code> early enough to know what type class instance it should look for involving <code>P</code>.</p>",
        "id": 283818895,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1653434823
    }
]