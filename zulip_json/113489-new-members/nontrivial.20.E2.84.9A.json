[
    {
        "content": "<p>In the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>, why does <code>apply nat.cast_pos.mpr</code> generate a goal of <code>nontrivial ℚ</code> rather than filling this in automatically?  If I instead use the first line <code>apply (@nat.cast_pos ℚ _ _ p).mpr</code> then Lean fills in <code>nontrivial ℚ</code> with no problem.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.rat.default</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- apply (@nat.cast_pos ℚ _ _ p).mpr,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.cast_pos.mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">lt_trans</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.lt_one_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rat.nontrivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 268692311,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642685855
    },
    {
        "content": "<p>because it doesn't know that it's going to be about <code>ℚ</code> when it elaborates the term</p>",
        "id": 268692712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642686049
    },
    {
        "content": "<p>elaborating <code>nat.cast_pos.mpr</code> generates a side goal of <code>nontrivial ?m</code></p>",
        "id": 268692739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642686070
    },
    {
        "content": "<p>But then how is Lean able to fill in the other hole <code>ordered_semiring ℚ</code>?</p>",
        "id": 268692782,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642686091
    },
    {
        "content": "<p>It might be a little clearer to separate out that line into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.cast_pos.mpr</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>You will notice that the <code>ordered_semiring Q</code> also goes away in this version</p>",
        "id": 268693453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642686318
    },
    {
        "content": "<p>I think the reason is because it gets solved by unification, since <code>rat.ordered_semiring</code> appears in the statement of the <code>have</code> lemma</p>",
        "id": 268693701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642686444
    },
    {
        "content": "<p>Anyway, the way I would recommend to avoid this issue is to use <code>refine</code> instead of <code>apply</code> when you need the expected type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">nat.cast_pos.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 268694096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642686624
    },
    {
        "content": "<p>this does not generate any superfluous subgoals and does not require specifying <code>Q</code></p>",
        "id": 268694131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642686645
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 268694267,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642686710
    },
    {
        "content": "<p>Great, and in fact I can just golf it down to <code>exact nat.cast_pos.mpr (lt_trans one_pos h)</code></p>",
        "id": 268694591,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642686825
    },
    {
        "content": "<p>Kevin <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20covariant_class.20.E2.84.9D.20and.20ring_nf.20in.20calc/near/264572521\">pointed out</a> that <code>apply some_theorem.mp</code> (or <code>mpr</code>) is unconventional:</p>\n<blockquote>\n<p>Apply is not always the cleverest when it comes to type class inference.<br>\nYou would be better off doing <code>rw some_theorem</code></p>\n</blockquote>",
        "id": 268695168,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1642687077
    },
    {
        "content": "<p>what I usually do is append <code>some_theorem.1</code> to the next thing to need this proof term</p>",
        "id": 268695332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642687144
    },
    {
        "content": "<p>or <code>rw some_theorem</code> if I'm already in a rewrite sequence</p>",
        "id": 268695478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642687203
    },
    {
        "content": "<p>If <code>refine</code> generally cleverer about type class inference than <code>apply</code>?</p>",
        "id": 268695512,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1642687212
    },
    {
        "content": "<p>More specifically, <code>refine</code> is told the expected type, so it has more information at its disposal</p>",
        "id": 268695646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642687248
    },
    {
        "content": "<p><code>apply</code> can't because <code>apply thm</code> can mean <code>refine thm</code> or <code>refine thm _</code> or <code>refine thm _ _</code> ... and it needs to elaborate <code>thm</code> (without the type) to know which one it is (at which point it could provide the type, but it's too late for a lot of things)</p>",
        "id": 268695822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642687309
    }
]