[
    {
        "content": "<p>How would I take the <code>finset</code> union over a function from <code>fin n</code> to <code>finset</code>? That is, I think I want <code>∪_{i : fin n}, f i</code> where <code>f: fin n -&gt; finset</code>.</p>",
        "id": 279239556,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1650228361
    },
    {
        "content": "<p>Is it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.bUnion\">docs#finset.bUnion</a> ? Yeah that'll do it, use finset.univ to get all of fin n as a finset</p>",
        "id": 279239677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650228491
    },
    {
        "content": "<p>If you don't care about computability <code>⨆ i, f i</code> will work</p>",
        "id": 279239892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650228774
    },
    {
        "content": "<p>So like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n<span class=\"bp\">|</span> <span class=\"n\">func</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">string</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">term.all_var_set</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">f</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finset.bUnion</span> <span class=\"n\">finset.univ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">term.all_var_set</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>?</p>",
        "id": 279239931,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1650228826
    },
    {
        "content": "<p>I think I care about computability here.</p>",
        "id": 279239987,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1650228874
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 279240250,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1650229205
    },
    {
        "content": "<p>That looks good to me</p>",
        "id": 279240251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650229205
    },
    {
        "content": "<p>Great! Thank you!</p>",
        "id": 279240291,
        "sender_full_name": "Patrick Thomas",
        "timestamp": 1650229225
    }
]