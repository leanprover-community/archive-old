[
    {
        "content": "<p>Hello! Sorry if this question belongs in <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a>. I am still very new, so it feels right to ask here. <br>\n<code>logic.relation</code> has this lemma: </p>\n<div class=\"codehilite\" data-code-language=\"code\"><pre><span></span><code>lemma refl_trans_gen_eq_self (refl : reflexive r) (trans : transitive r) :\n  refl_trans_gen r = r :=\n</code></pre></div>\n<p>Is there a similar lemma for <code>trans_gen</code> which says that a transitive relation is its own transitive closure? I think that should be true, but I can't find it.</p>",
        "id": 218051640,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1606443669
    },
    {
        "content": "<p>Pretty mechanical conversion by me, I'm probably missing something:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.relation</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">relation</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">trans_gen</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_gen_eq_self</span> <span class=\"o\">(</span><span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">trans_gen</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">propext</span> <span class=\"bp\">$</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans_gen.single</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans_gen.tail</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hac</span> <span class=\"n\">hcd</span> <span class=\"n\">hac</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">trans</span> <span class=\"n\">hac</span> <span class=\"n\">hcd</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">trans_gen.single</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[trans]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"o\">:</span> <span class=\"n\">trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hbc</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans_gen.single</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"n\">hd</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">trans_gen.tail</span> <span class=\"n\">hab</span> <span class=\"n\">hd</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans_gen.tail</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hbc</span> <span class=\"n\">hcd</span> <span class=\"n\">hac</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hac.tail</span> <span class=\"n\">hcd</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">transitive_trans_gen</span> <span class=\"o\">:</span> <span class=\"n\">transitive</span> <span class=\"o\">(</span><span class=\"n\">trans_gen</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">trans</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_gen_idem</span> <span class=\"o\">:</span>\n  <span class=\"n\">trans_gen</span> <span class=\"o\">(</span><span class=\"n\">trans_gen</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">trans_gen</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"n\">trans_gen_eq_self</span> <span class=\"n\">transitive_trans_gen</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_gen_lift</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trans_gen</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans_gen.single</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">hac</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">trans_gen.single</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"n\">hac</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans_gen.tail</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hac</span> <span class=\"n\">hcd</span> <span class=\"n\">hac</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">trans_gen.tail</span> <span class=\"n\">hac</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">hcd</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_gen_lift'</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">trans_gen</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">trans_gen</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">trans_gen_idem</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">trans_gen_lift</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"n\">hab</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">trans_gen_closed</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">trans_gen</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">trans_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">trans_gen</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">trans_gen_lift'</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">trans_gen</span>\n</code></pre></div>",
        "id": 218055368,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606450002
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 218055861,
        "sender_full_name": "Andrew  Souther",
        "timestamp": 1606450917
    },
    {
        "content": "<p>This is probably worth PRing to mathlib.</p>",
        "id": 218056088,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1606451288
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5129\">#5129</a></p>",
        "id": 218056238,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1606451536
    }
]