[
    {
        "content": "<p>What is the best way to introduce notation? I want to define Aut(E/F) to be the automorphism group of the field extension E of F, and Lean lets me write <code> notation  `Aut(` E `/` F `)`:= E \\simeq\\_a [F] E </code>, but when I try to use this definition later it seems to not recognize something about the notation.</p>",
        "id": 205960149,
        "sender_full_name": "Jordan Brown",
        "timestamp": 1596574844
    },
    {
        "content": "<p>What exactly goes wrong later?</p>",
        "id": 205962585,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1596576164
    },
    {
        "content": "<p>Here's an MWE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kn\">notation</span>  <span class=\"bp\">`</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"bp\">`</span> <span class=\"n\">E</span> <span class=\"bp\">`/`</span> <span class=\"n\">F</span> <span class=\"bp\">`</span><span class=\"o\">)</span><span class=\"bp\">`</span><span class=\"o\">:=</span> <span class=\"n\">E</span> <span class=\"err\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">E</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">aut</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">Aut</span><span class=\"o\">(</span><span class=\"n\">E</span><span class=\"bp\">/</span><span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ϕ</span> <span class=\"n\">ψ</span> <span class=\"n\">χ</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span><span class=\"n\">refl</span><span class=\"o\">},</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">alg_equiv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ϕ</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">ext</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">alg_equiv</span><span class=\"bp\">.</span><span class=\"n\">symm_apply_apply</span> <span class=\"n\">ϕ</span> <span class=\"n\">a</span><span class=\"o\">},</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>When writing Aut(E/F), lean says : invalid definition, '|' or ':=' expected</p>",
        "id": 205963154,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1596576510
    },
    {
        "content": "<p>You have precedences issues.</p>",
        "id": 205963207,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596576566
    },
    {
        "content": "<p>How do you fix precedence issues?</p>",
        "id": 205963297,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1596576614
    },
    {
        "content": "<p>I randomly add precedences numbers until Lean and I are both happy.</p>",
        "id": 205963332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596576643
    },
    {
        "content": "<p>You can cheat by having a look at a similar notation definition.</p>",
        "id": 205963368,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596576663
    },
    {
        "content": "<p>I don't think I have ever seen round brackets being successfully used in notation</p>",
        "id": 205964362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596577213
    },
    {
        "content": "<p>This is also true. I think I already failed to do that. But maybe I didn't try enough random numbers.</p>",
        "id": 205964420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596577259
    }
]