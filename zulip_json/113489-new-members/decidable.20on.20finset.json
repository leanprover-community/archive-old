[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">partition</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">thing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">thing</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">a_b_connected</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">thing</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"o\">:</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">is_partition</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">thing</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]:</span>\n<span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">thing</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span>\n</code></pre></div>\n\n\n<p>Can I use <a href=\"https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.decidable_dexists_finset\">https://leanprover-community.github.io/mathlib_docs/data/finset/basic.html#finset.decidable_dexists_finset</a> instead of <code>[decidable (∃ (s : set thing) (H : s ∈ p), thing.a ∈ s ∧ thing.b ∈ s)]</code> somehow?</p>",
        "id": 205884767,
        "sender_full_name": "Iocta",
        "timestamp": 1596531095
    },
    {
        "content": "<p>Just use <code>Prop</code> instead of <code>bool</code> so that you don't need <code>decidable</code></p>",
        "id": 205884886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596531201
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a></p>",
        "id": 205884907,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596531223
    },
    {
        "content": "<p>When am I supposed to use <code>bool</code>?</p>",
        "id": 205884963,
        "sender_full_name": "Iocta",
        "timestamp": 1596531249
    },
    {
        "content": "<p>next to never</p>",
        "id": 205885012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596531312
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ rg <span class=\"s1\">&#39;\\bbool\\b&#39;</span> mathlib <span class=\"p\">|</span> wc -l\n<span class=\"m\">484</span>\n</code></pre></div>\n\n\n<p>that's a pretty good-sized never :)</p>",
        "id": 205885121,
        "sender_full_name": "Iocta",
        "timestamp": 1596531416
    },
    {
        "content": "<p>and what about Prop?</p>",
        "id": 205885183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596531474
    },
    {
        "content": "<p>2335</p>",
        "id": 205885243,
        "sender_full_name": "Iocta",
        "timestamp": 1596531489
    },
    {
        "content": "<p>well those numbers tell you nothing</p>",
        "id": 205885317,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596531560
    },
    {
        "content": "<p>what I meant was that you don't use <code>bool</code> to state propositions</p>",
        "id": 205885323,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596531567
    },
    {
        "content": "<p>if you look into the actual use cases of <code>bool</code> you will find them being used as a fixed type with two elements or in tactics (metaprogramming)</p>",
        "id": 205885387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1596531605
    },
    {
        "content": "<p>I'm not sure which one I mean here, but starting with <code>Prop</code> seems like a good bet. Thanks</p>",
        "id": 205885551,
        "sender_full_name": "Iocta",
        "timestamp": 1596531748
    }
]