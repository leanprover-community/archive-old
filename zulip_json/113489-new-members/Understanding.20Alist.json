[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/c28497fa056ae52b93aa9aca2fd20155d57fa016/src/data/list/alist.lean#L16\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/c28497fa056ae52b93aa9aca2fd20155d57fa016/src/data/list/alist.lean#L16\">https://github.com/leanprover-community/mathlib/blob/c28497fa056ae52b93aa9aca2fd20155d57fa016/src/data/list/alist.lean#L16</a> says that alist should have unique keys, but it in not clear to me how this is enforced. The alist.nodupkeys descructor is austensibly a proof that the keys are duplicated, but would this proof make more sense as a constuctor?</p>",
        "id": 180661410,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573672715
    },
    {
        "content": "<p>For example, <code> #reduce alist.keys (list.to_alist [{2,3}, {4,2}, {2,4}])</code> gives <code>list.map sigma.fst (list.erase_dupkeys._match_1 {2, 3} (list.erase_dupkeys._match_1 {4, 2} (list.erase_dupkeys._match_1 {2, 4} list.nil))) </code>,  and <code>#reduce (list.to_alist [{2,3}, {4,2}, {2,4}]).nodupkeys</code> triggers a memory consumption error (emacs).</p>",
        "id": 180661873,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573673033
    },
    {
        "content": "<p>in order to create an alist you need to provide an element of entries.nodupkeys, which is a proof that there are no duplicate keys</p>",
        "id": 180661967,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1573673085
    },
    {
        "content": "<p>to_alist ensures this by calling erase_dupkeys, which removes all duplicates from the input</p>",
        "id": 180662042,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1573673135
    },
    {
        "content": "<p>The <code>structure</code> syntax is a helper for defining inductive types with a single constructor (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#declaring-structures\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#declaring-structures\">TPiL section</a>). As Marc says, to construct an <code>alist</code>, you must supply both <code>entries</code> and <code>nodupkeys</code>.</p>",
        "id": 180662113,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1573673173
    },
    {
        "content": "<p>By the way, unless you know what you're doing, you probably want to use <code>#eval</code> instead of <code>#reduce</code> for this kind of experimenting.</p>",
        "id": 180662158,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573673204
    },
    {
        "content": "<blockquote>\n<p>By the way, unless you know what you're doing, you probably want to use <code>#eval</code> instead of <code>#reduce</code> for this kind of experimenting.</p>\n</blockquote>\n<p>Ok, I'll use <code>#eval</code></p>",
        "id": 180662576,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573673502
    },
    {
        "content": "<p>So suppose I were to omit using nodupkeys_erase_dupkeys in list.to_alist.<br>\nThen why does <code>#check (alist.mk [{2,3}, {4,2}, {2,4}] _).nodupkeys</code> typecheck?</p>",
        "id": 180662894,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573673678
    },
    {
        "content": "<p>My understanding is that by using <code>_</code> I am inferring a proof, which in this case should not exist.<br>\nMaybe the distinction is that running eval on this expressions produces <code>don't know how to synthesize placeholder</code>.</p>",
        "id": 180663052,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573673784
    },
    {
        "content": "<blockquote>\n<p>The <code>structure</code> syntax is a helper for defining inductive types with a single constructor (<a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#declaring-structures\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#declaring-structures\">TPiL section</a>). As Marc says, to construct an <code>alist</code>, you must supply both <code>entries</code> and <code>nodupkeys</code>.</p>\n</blockquote>\n<p>My bad, <code>nodupkeys</code> is in fact a constructor here, thanks.</p>",
        "id": 180663320,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573673952
    },
    {
        "content": "<blockquote>\n<p>So suppose I were to omit using nodupkeys_erase_dupkeys in list.to_alist.<br>\nThen why does <code>#check (alist.mk [{2,3}, {4,2}, {2,4}] _).nodupkeys</code> typecheck?</p>\n</blockquote>\n<p>If you look at the output of <code>#check</code> you'll see a metavariable (<code>?M_1</code> or something). <code>#check</code> is displaying what the type would be, assuming you were to fill in all the placeholders that couldn't be filled in automatically.</p>",
        "id": 180664368,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573674586
    },
    {
        "content": "<p>if you do this in regular code, you'll get <code>don't know how to synthesize placeholder</code>.<br>\ne.g.</p>\n<div class=\"codehilite\"><pre><span></span>abbreviation f : ℕ → Type := λ n, ℕ\ndef xs : list (sigma f) := [⟨2,3⟩, ⟨4,2⟩, ⟨2,4⟩]\ndef foo : alist f := alist.mk xs _\n</pre></div>",
        "id": 180664789,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1573674816
    },
    {
        "content": "<blockquote>\n<p>So suppose I were to omit using nodupkeys_erase_dupkeys in list.to_alist.<br>\nThen why does <code>#check (alist.mk [{2,3}, {4,2}, {2,4}] _).nodupkeys</code> typecheck?</p>\n</blockquote>\n<p><code>#check _ : 0 = 1</code> typechecks.</p>",
        "id": 180665154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573675004
    },
    {
        "content": "<blockquote>\n<p>My bad, <code>nodupkeys</code> is in fact a constructor here, thanks.</p>\n</blockquote>\n<p>structures only have a single constructor <code>mk</code>. a value/proof of <code>entries.nodupkeys</code> is a parameter to that constructor, not a constructor of <code>alist</code> itself. one might also call it a projection ;)</p>",
        "id": 180666259,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1573675682
    },
    {
        "content": "<p>This all makes sense. When I actually go to fill in the proof in the first place, I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span>example : list.nodupkeys [sigma.mk 1 3, sigma.mk 2 4] :=\nbegin\n  simp, exact eq.mp (ne.def 1 2) (nat.succ_ne_self 1).symm\nend\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>tactic failed, result contains meta-variables\nstate: no goals\n</pre></div>",
        "id": 180677074,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573682038
    },
    {
        "content": "<p>I think I read somewhere that simp should only be used in a finishing position but it seems that my alternative is a to use a long string of rewrites. Is this preferable?</p>",
        "id": 180677243,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573682161
    },
    {
        "content": "<p>The problem here is that Lean isn't inferring the type of <code>sigma.mk 1 3</code>. It's of type <code>sigma f</code> where <code>f : nat -&gt; Type</code> where <code>f 1 = nat</code> and <code>f 2 = nat</code>, but that's not enough to know <code>f</code> is the constant function.</p>",
        "id": 180678351,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573682923
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nodupkeys</span> <span class=\"o\">[(</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">sigma</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">ℕ</span><span class=\"o\">)),</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">2</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_ne_self</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 180678390,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573682976
    },
    {
        "content": "<p>Great, I now have a working toy example:</p>\n<div class=\"codehilite\"><pre><span></span>#eval alist.keys (alist.mk [(sigma.mk 1 3 : sigma (λ _, ℕ)), sigma.mk 2 4]\n                           (by {simp; exact eq.mp (ne.def 1 2) (nat.succ_ne_self 1).symm}))\n</pre></div>\n\n\n<p>produces [1,2]</p>",
        "id": 180679233,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573683521
    },
    {
        "content": "<p>The following also works </p>\n<div class=\"codehilite\"><pre><span></span>#eval (alist.keys (alist.mk [(sigma.mk 1 [1] : sigma (λ _, list ℕ)), sigma.mk 2 [4,5]]\n                            (by {simp; exact eq.mp (ne.def 1 2) (nat.succ_ne_self 1).symm})))\n</pre></div>\n\n\n<p>So now my question is the following: <br>\nI plan on using assoc lists with natural numbers in the sigma.fst spot.<br>\nIs there a tactic that I can use that will take care of disequality proofs between nats when I first define an alist?</p>",
        "id": 180680226,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573684103
    },
    {
        "content": "<p>You can try <code>dec_trivial</code></p>",
        "id": 180682082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573685377
    },
    {
        "content": "<p>For proving specific disequalities like <code>1 ≠ 2</code> you can use <code>norm_num</code>.</p>",
        "id": 180683998,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1573687018
    },
    {
        "content": "<p><code> failed to synthesize type class instance for |- decidable (list.nodupkeys [&lt;1,3&gt;,&lt;2,4&gt;]) </code><br>\nI think this means that I need to provide information that checking if for key duplicates is a decidable proposition.<br>\ndec_trivial points to of_as_true, which implicitly asks for a decidable proposition. Should I somehow provide <code>decidable_eq nat</code> to <code>@of_as_true</code>?</p>",
        "id": 180684088,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573687098
    },
    {
        "content": "<blockquote>\n<p>For proving specific disequalities like <code>1 ≠ 2</code> you can use <code>norm_num</code>.</p>\n</blockquote>\n<p>#eval (alist.keys (<a href=\"http://alist.mk\" target=\"_blank\" title=\"http://alist.mk\">alist.mk</a> [(<a href=\"http://sigma.mk\" target=\"_blank\" title=\"http://sigma.mk\">sigma.mk</a> 1 [3] : sigma (λ _,list ℕ)), <a href=\"http://sigma.mk\" target=\"_blank\" title=\"http://sigma.mk\">sigma.mk</a> 2 [4]] (by norm_num)))<br>\nWoohoo!</p>",
        "id": 180684414,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573687415
    },
    {
        "content": "<p>But somehow not in this form??:</p>\n<div class=\"codehilite\"><pre><span></span>def a : list (sigma (λ _, list ℕ)) := [sigma.mk 1 [3], sigma.mk 2 [4]]\n#eval (alist.keys (alist.mk a (by norm_num)))\n</pre></div>\n\n\n<p>What kind of witchcraft is this?</p>",
        "id": 180684693,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573687675
    },
    {
        "content": "<blockquote>\n<p>But somehow not in this form??:</p>\n</blockquote>\n<p>def a : list (sigma (λ _, list ℕ)) := [sigma.mk 1 [3], <a href=\"http://sigma.mk\" target=\"_blank\" title=\"http://sigma.mk\">sigma.mk</a> 2 [4]]<br>\n#eval (alist.keys (<a href=\"http://alist.mk\" target=\"_blank\" title=\"http://alist.mk\">alist.mk</a> a (by norm_num)))</p>\n<div class=\"codehilite\"><pre><span></span>What kind of witchcraft is this?\n</pre></div>\n\n\n<p>Nevermind, this works:</p>\n<div class=\"codehilite\"><pre><span></span>def a : list (sigma (λ _, list ℕ)) := [sigma.mk 1 [3], sigma.mk 2 [4]]\n#eval (alist.keys (alist.mk a (by rw a; norm_num)))\n</pre></div>",
        "id": 180685004,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573687960
    },
    {
        "content": "<blockquote>\n<p><code>failed to synthesize type class instance for |- decidable (list.nodupkeys [&lt;1,3&gt;,&lt;2,4&gt;])</code><br>\nI think this means that I need to provide information that checking if for key duplicates is a decidable proposition.</p>\n</blockquote>\n<p>That should be in mathlib, I guess it was missed. I'm sure <code>list.nodup</code> already has a decidable instance, and <code>alist.nodupkeys</code> is just a wrapper around that, so the proof should be easy</p>",
        "id": 180685287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573688234
    },
    {
        "content": "<p>alternatively:</p>\n<div class=\"codehilite\"><pre><span></span>abbreviation a : list (sigma (λ _, list ℕ)) := [sigma.mk 1 [3], sigma.mk 2 [4]]\n#eval (alist.keys (alist.mk a (by norm_num)))\n</pre></div>\n\n\n<p>defs are semi-reducible (see <a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=semi%20reducible#elaboration-hints\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=semi%20reducible#elaboration-hints\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=semi%20reducible#elaboration-hints</a>)</p>",
        "id": 180685300,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1573688263
    },
    {
        "content": "<p>I would suggest <code>norm_num [a]</code> instead of making it an abbreviation</p>",
        "id": 180685358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573688291
    },
    {
        "content": "<p>also </p>\n<div class=\"codehilite\"><pre><span></span>#eval (let a : list (sigma (λ _, list ℕ)) := [sigma.mk 1 [3], sigma.mk 2 [4]] in\n          (alist.keys (alist.mk a (by norm_num)))\n</pre></div>\n\n\n<p>works</p>",
        "id": 180685686,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573688625
    },
    {
        "content": "<blockquote>\n<p>alternatively:</p>\n</blockquote>\n<p>abbreviation a : list (sigma (λ _, list ℕ)) := [sigma.mk 1 [3], <a href=\"http://sigma.mk\" target=\"_blank\" title=\"http://sigma.mk\">sigma.mk</a> 2 [4]]<br>\n#eval (alist.keys (<a href=\"http://alist.mk\" target=\"_blank\" title=\"http://alist.mk\">alist.mk</a> a (by norm_num)))</p>\n<div class=\"codehilite\"><pre><span></span>defs are semi-reducible (see https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html?highlight=semi%20reducible#elaboration-hints)\n</pre></div>\n\n\n<p>I read this section, but it does not mention the abbreviation keyword. Where is this documented?</p>",
        "id": 180686179,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573689023
    },
    {
        "content": "<blockquote>\n<p>I would suggest <code>norm_num [a]</code> instead of making it an abbreviation</p>\n</blockquote>\n<p>Can I put a list of lemmas/definitions to rewrite with after any tactic?</p>",
        "id": 180686211,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573689085
    },
    {
        "content": "<blockquote>\n<p>I read this section, but it does not mention the abbreviation keyword. Where is this documented?</p>\n</blockquote>\n<p>no idea, sebastian told me about it some day. you can also just tag the def as reducible instead</p>",
        "id": 180686325,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1573689222
    },
    {
        "content": "<p>looks like it used to be in an old version of TPIL: <a href=\"https://leanprover.github.io/tutorial/tutorial.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/tutorial/tutorial.pdf\">https://leanprover.github.io/tutorial/tutorial.pdf</a></p>",
        "id": 180686451,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1573689356
    },
    {
        "content": "<p>Consider the following alists:</p>\n<div class=\"codehilite\"><pre><span></span>def a : alist (λ (_:ℕ), ℕ) :=\n  alist.mk [sigma.mk 1 2, sigma.mk 2 3, sigma.mk 3 4] (by norm_num)\n\ndef b : alist (λ (_:ℕ), list ℕ) :=\n  alist.mk [sigma.mk 1 [2], sigma.mk 2 [], sigma.mk 3 [1,2]] (by norm_num)\n\n#reduce (alist.replace 1 3 a)\n#reduce (alist.replace 1 [3] b)\n</pre></div>\n\n\n<p>Only the last line generates an error, saying that it failed to synthesize type class instance for decidable_eq or has_one. Looking at alist.replace and kreplace, I do not see any mention of decidability. Where is this coming from and how do I fix it?</p>",
        "id": 180763360,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573758805
    },
    {
        "content": "<p>What do you mean by <code>alist.replace 1 [3] b</code>? Lean is trying to interpret this, and the errors are what it gets. What do you want it to mean?</p>",
        "id": 180764010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573759153
    },
    {
        "content": "<p>You know about the implicit inputs to the function, right? If you hover over <code>alist.replace</code> in VS Code you will see <code>Π {α : Type u} {β : α → Type v} [_inst_1 : decidable_eq α]</code>. Lean is trying to figure out what alpha and beta are -- what do you think they are?</p>",
        "id": 180764274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573759308
    },
    {
        "content": "<p>When I look for alist.replace I see the following:</p>\n<div class=\"codehilite\"><pre><span></span>def replace (a : α) (b : β a) (s : alist β) : alist β :=\n⟨kreplace a b s.entries, (kreplace_nodupkeys a b).2 s.nodupkeys⟩\n</pre></div>",
        "id": 180764438,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573759389
    },
    {
        "content": "<p>In mathlib/src/data/list/alist.lean</p>",
        "id": 180764468,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573759409
    },
    {
        "content": "<p>But if you read the mathlib code then you don't see the variables. If you hover over the function then you'll see all the stuff I posted.</p>",
        "id": 180764516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573759438
    },
    {
        "content": "<p>Alternatively try <code>#check @alist.replace</code></p>",
        "id": 180764602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573759466
    },
    {
        "content": "<p>The @ means \"tell me all the details of all the inputs to this function, including the stuff which Lean is going to figure out by itself\"</p>",
        "id": 180764649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573759503
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>alist.replace :\n  Π {α : Type u_1} {β : α → Type u_2} [_inst_1 : decidable_eq α] (a : α), β a → alist β → alist β\n</pre></div>\n\n\n<p>Lean says \"ok I'll guess alpha, I'll guess beta, typeclass inference will guess _inst_1, now it's your turn\"</p>",
        "id": 180764712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573759540
    },
    {
        "content": "<p>You wrote <code>alist.replace 1 [3] b</code>. Lean thinks \"OK, so a is supposed to be 1, so alpha is some type which has a 1, gosh, there are lots of possibilities\". Lean then gets [3] and thinks \"Ok so beta 1 is supposed to be [3], I'll bear that in mind\". Lean then gets b and thinks \"OK so b must have type alist beta, but b <em>definitely</em> has type <code>alist (λ (_:ℕ), list ℕ)</code> so beta <em>must</em> be <code> (λ (_:ℕ), list ℕ)</code>. Hey this looks like it should work. I am now intrigued.</p>",
        "id": 180765127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573759777
    },
    {
        "content": "<p>I can get a more helpful error message if I put</p>\n<div class=\"codehilite\"><pre><span></span>#check (alist.replace (1:ℕ) ([1]:list ℕ) b)\n</pre></div>",
        "id": 180765464,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573759933
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  alist.replace 1 [1]\nterm\n  [1]\nhas type\n  list var : Type\nbut is expected to have type\n  ?m_1 1 : Type ?\n</pre></div>",
        "id": 180765552,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573759984
    },
    {
        "content": "<p>You should comment out those <code>#reduce</code>s, they really slow things down. So here's how I would start debugging:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">alist</span><span class=\"bp\">.</span><span class=\"n\">replace</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">b</span>\n</pre></div>",
        "id": 180765773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573760102
    },
    {
        "content": "<p>OK so indeed if we tell Lean what beta is, it works fine:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">alist</span><span class=\"bp\">.</span><span class=\"n\">replace</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">list</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">b</span>\n</pre></div>",
        "id": 180765853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573760149
    },
    {
        "content": "<p>So the problem is that Lean is failing to guess beta.</p>",
        "id": 180765862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573760162
    },
    {
        "content": "<p>This is some issue with the elaborator and it's beyond my pay grade to solve it. I would just fix it with the @ trick and move on.</p>",
        "id": 180765948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573760191
    },
    {
        "content": "<p>Great. +1 for showing how you would debug</p>",
        "id": 180766317,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573760394
    },
    {
        "content": "<p>FYI, same problem and solution for alist.insert</p>",
        "id": 180767602,
        "sender_full_name": "Scott Viteri",
        "timestamp": 1573761120
    }
]