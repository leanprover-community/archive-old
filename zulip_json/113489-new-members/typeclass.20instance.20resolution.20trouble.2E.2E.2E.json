[
    {
        "content": "<p>To get some experience, I am working to formalize nets in Lean using all of the lovely things about filters in mathlib. (Trying to prepare the way for more analysis.)</p>\n<p>There is something here that I don't understand about typeclass resolution. The following code generates a \"failed to synthesize typeclass instance\" error. I have a feeling that it has something to do with the instance of the topological space. I am not sure what the problem is, though. Thanks, in advance!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.directed</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.bases</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.subset_properties</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">F.1</span><span class=\"o\">),</span>  <span class=\"n\">j</span> <span class=\"bp\">⊆</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 266743718,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641248655
    },
    {
        "content": "<p><code>F.1</code>has type <code>set (set \\a)</code>. So when you write <code>i j : F.1</code>, lean is automatically coercing <code>F.1</code> to a type, given by the subtype associated to the set. This means that terms of this subtype are really dependent pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a,h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> is a set and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> is a proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> is contained in the given set of sets. So to use set inclusion, you would need to write <code>j.1 \\subset i.1</code> (or use type ascription to coerce these terms to sets). E.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">F.1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 266744516,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641249233
    },
    {
        "content": "<p>I only had to give lean the hint for <code>j</code>, since it is then able to figure out that <code>i</code> should be considered as a set as well, now that it knows that you're considering <code>j</code> as a set.</p>",
        "id": 266744588,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641249267
    },
    {
        "content": "<p>You might also consider using </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F.sets</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">F.sets</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">⊆</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>instead. Rather than coercing a set to a type</p>",
        "id": 266744607,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641249280
    },
    {
        "content": "<p>Right, I would follow what Alex said. It can be a bit of a pain to keep track of the various coercions.</p>",
        "id": 266744652,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641249323
    },
    {
        "content": "<p>I think <code>λ (i j ∈ F), j ⊆ i</code> would work too.</p>",
        "id": 266744751,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1641249375
    },
    {
        "content": "<p>Yes, that's essentially defeq to what Alex said.</p>",
        "id": 266744773,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641249404
    },
    {
        "content": "<p>Really you should write the type of the <code>def</code> before the <code>:=</code>, which would forestall some of these issues, I think.</p>",
        "id": 266744806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641249435
    },
    {
        "content": "<p>Fantastic! Thank you everyone.</p>",
        "id": 266744923,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641249518
    },
    {
        "content": "<p>Mathematically it's quite upsetting that a type is at one level of the heirarchy and a set is a term so it's at a lower level. Deciding whether to bump up subsets to subtypes can be a complicated design decision.</p>",
        "id": 266745431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641249870
    },
    {
        "content": "<p>Are you sure you didn't mean ∀ instead of λ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F.sets</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">F.sets</span><span class=\"o\">),</span> <span class=\"n\">j</span> <span class=\"bp\">⊆</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>Your current definition is strange because it doesn't actually use hi or hj</p>",
        "id": 266749051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641252209
    },
    {
        "content": "<p>That can't possibly be what was meant, but again, writing the type of <code>le</code> would help to clarify</p>",
        "id": 266750164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641252959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>: Come to think of it, I don't actually know how to write the type of \"le\" clearly.  I'll think about this.</p>\n<p>I'm trying to manufacture an le that depends on the filter F. </p>\n<p>So le (F) : F.1 \\to F.1 \\to Prop. </p>\n<p>I expect le: \\Pi (F : \\filter \\a) F.1\\to F.1 \\to Prop...will try.</p>",
        "id": 266761060,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641261410
    },
    {
        "content": "<p>Hmm. I tried this:</p>\n<p><code>def le (F : filter α) : F.1 → F.1 → Prop := λ(i j : F.1), j ⊆ i</code></p>\n<p>in hopes that specifying the type of <code>le</code> would evade the need to use either <code>\\in</code> or the type ascription. I still get the error. I'm wondering if I still haven't correctly assigned the type of <code>le</code>?</p>",
        "id": 266807841,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641303344
    },
    {
        "content": "<p><code>i</code> and <code>j</code> are not sets, so they don't have the <code>⊆</code> relation</p>",
        "id": 266808130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641303505
    },
    {
        "content": "<p><code>i</code> has type <code>{s : set A // s \\in F.sets}</code></p>",
        "id": 266808178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641303539
    },
    {
        "content": "<p>so <code>i.1</code> is a set</p>",
        "id": 266808192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641303552
    },
    {
        "content": "<p>so you probably want <code>λ(i j : F.1), j.1 ⊆ i.1</code></p>",
        "id": 266808212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641303565
    },
    {
        "content": "<p>Thank you, Mario. What you say agrees with Adam's comment above. I was exploring what Reid Barton suggested about trying to write the type of <code>le</code>, but I don't really see how that will get around having to write j.1 \\ss i.1, unless I'm still not writing the type of le correctly.</p>",
        "id": 266808414,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641303689
    },
    {
        "content": "<p>What, mathematically, are you trying to express? This definition looks a little weird, even after the various proposed fixes</p>",
        "id": 266808494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641303732
    },
    {
        "content": "<p>I'm trying to define a directed order on the sets in a filter F, so that if i and j are sets in the filter, then i \\le j when j \\subseteq i.</p>",
        "id": 266808604,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641303823
    },
    {
        "content": "<p>By the way, I think that subtype has a partial order instance, so while you need the <code>.1</code> to use subset, you might be able to avoid it with <code>i &lt;= j</code> instead</p>",
        "id": 266808614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641303837
    },
    {
        "content": "<p>The sets in a filter F already have an order on them</p>",
        "id": 266808661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641303851
    },
    {
        "content": "<p>Cool. I hoped as much. Is the order inclusion reversing? (I can probably see this in the code, but am pretty new to this!)</p>",
        "id": 266808726,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641303914
    },
    {
        "content": "<p>No, but IIRC there are a few theorems about directed orders in mathlib already, and I think the directedness can go either way</p>",
        "id": 266808777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641303952
    },
    {
        "content": "<p>I want to work with nets, so I need the dual of the usual order on sets in the filter.</p>",
        "id": 266808785,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641303961
    },
    {
        "content": "<p>You can use <code>order_dual</code> to explicitly get the reverse order</p>",
        "id": 266808835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1641303975
    },
    {
        "content": "<p>FABULOUS!</p>",
        "id": 266808843,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641303984
    },
    {
        "content": "<p>I can't wait to be more familiar with this...thanks again, Mario, and everyone!</p>",
        "id": 266808885,
        "sender_full_name": "Jon Bannon",
        "timestamp": 1641304013
    }
]