[
    {
        "content": "<p>Hi, how do I give myself a term <code>a</code> of a nonempty type <code>α</code>? At least that's what I assume <code>nonempty</code> means.<br>\nCheers :)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193908915,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586875833
    },
    {
        "content": "<p><code>nonempty alpha</code> has type Prop, and you want to move from that to type Type, you have to be noncomputable.</p>",
        "id": 193909021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586875889
    },
    {
        "content": "<p>This is why it is more of a kerfuffle than you might think.</p>",
        "id": 193909228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586875977
    },
    {
        "content": "<p>how do I become noncomputable? Am I already noncomputable?</p>",
        "id": 193909232,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586875980
    },
    {
        "content": "<p>oh</p>",
        "id": 193909243,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586875984
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"c1\">-- classical.choice : Π {α : Sort u_1}, nonempty α → α</span>\n</pre></div>",
        "id": 193909253,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1586875990
    },
    {
        "content": "<p>You're a mathematician, right? Then you're noncomputable :-)</p>",
        "id": 193909277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876002
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n</pre></div>",
        "id": 193909343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876029
    },
    {
        "content": "<p>You have to use the computer scientists' axiom of choice :-)</p>",
        "id": 193909414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876043
    },
    {
        "content": "<p>yes hahaha</p>\n<p>ok the <code>#check @classical.choice</code> works</p>",
        "id": 193909420,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586876046
    },
    {
        "content": "<p>oh nice it all works, cheers!</p>",
        "id": 193909584,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586876110
    },
    {
        "content": "<p>The difference between <code>nonempty</code> and <code>inhabited</code> is that <code>nonempty</code> is <code>Prop</code>-valued, and <code>inhabited</code> is <code>Type</code>-valued.</p>",
        "id": 193909636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876131
    },
    {
        "content": "<p>If you proved <code>nonempty alpha</code> but had every intention of occasionally using the element to actually make data (stuff in the Type universe) then you might want to consider using <code>inhabited alpha</code> instead. To a mathematician these are the same thing, but this whole Prop / Type dichotomy is a thing for computer scientists.</p>",
        "id": 193909853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876196
    },
    {
        "content": "<p>does that mean that <code>nonempty</code> tells me that a term exists, whereas <code>inhabited</code> hands me a term?</p>",
        "id": 193909968,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586876243
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#choice\" title=\"https://leanprover.github.io/theorem_proving_in_lean/axioms_and_computation.html#choice\">obligatory link to TPIL</a></p>",
        "id": 193909982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876248
    },
    {
        "content": "<p>Yes that's basically it. People who want everything to be computable can't get from Prop to Type, so they might want not to go into Prop in the first place.</p>",
        "id": 193910230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876326
    },
    {
        "content": "<p>But if all you ever want to do is prove theorems, then you might never notice the difference.</p>",
        "id": 193910583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876456
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"c1\">-- no problem here because goal is a Prop</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- goal is a Type</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- induction tactic failed, recursor &#39;nonempty.dcases_on&#39; can only eliminate into Prop</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193911011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876625
    },
    {
        "content": "<p>Think of it as a bug, not a feature ;-)</p>",
        "id": 193911122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876659
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- goal is a Type</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193911230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876707
    },
    {
        "content": "<p>ah right i see</p>\n<p>but if i am noncomputable I can solve the second example <code>nonempty alpha -&gt; alpha</code> by using <code>classical.choice h</code></p>",
        "id": 193911434,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586876782
    },
    {
        "content": "<p>ok thanks</p>",
        "id": 193911477,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586876804
    },
    {
        "content": "<p>There's a catch though:</p>",
        "id": 193911768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876902
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- goal is a Type</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">axioms</span> <span class=\"n\">thing</span> <span class=\"c1\">-- classical.choice</span>\n</pre></div>\n\n\n<p>Lean remembers that you used a nonconstructive axiom</p>",
        "id": 193911940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586876974
    },
    {
        "content": "<p>how come I can't use contradiction? I've done <code>open classical</code> and <code>local attribute classical.prop_decidable</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"n\">by_contra</span><span class=\"o\">,</span> <span class=\"c1\">-- tactic by_contradiction failed, target is not a negation nor a decidable proposition (remark: when &#39;local attribute classical.prop_decidable [instance]&#39; is used all propositions are decidable)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193926211,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586883161
    },
    {
        "content": "<p>Because neither <code>open classical</code> nor <code>local attribute classical.prop_decidable</code> is correct (you opened a namespace, and locally gave <code>classical.prop_decidable</code> no attributes). Try <code>open_locale classical</code> or <code>local attribute [instance] classical.prop_decidable</code>, preferably the former.</p>",
        "id": 193926973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586883536
    },
    {
        "content": "<p>ok it seems that my lean installation doesn't know what <code>open_locale</code> is</p>\n<p>(having just looked at the docs for the first time in a while), should I be using <code>leanpkg</code> or <code>leanproject</code>to manage my lean installation?</p>",
        "id": 193927756,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586883880
    },
    {
        "content": "<p><code>leanproject</code></p>",
        "id": 193929409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586884606
    },
    {
        "content": "<p>ok thanks</p>\n<p>i managed to get <code>local attribute [instance] classical.prop_decidable</code> working but not <code>open_locale classical</code> (lean seems to think that I'm trying to import <code>open_locale</code> and <code>classical</code> but I've no idea why)</p>",
        "id": 193929807,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586884793
    },
    {
        "content": "<p>You can't put that right after the imports</p>",
        "id": 193929909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586884821
    },
    {
        "content": "<p>The Lean parser has no way to know this is not a file name</p>",
        "id": 193929944,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586884836
    },
    {
        "content": "<p>until the new PR hits :-)</p>",
        "id": 193929973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586884849
    },
    {
        "content": "<p>Yes</p>",
        "id": 193929992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586884856
    },
    {
        "content": "<p>Just write something like \"universe u\" before open_locale</p>",
        "id": 193930000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586884860
    },
    {
        "content": "<p>and is released</p>",
        "id": 193930016,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586884865
    },
    {
        "content": "<p>ah ok I see, cheers</p>",
        "id": 193930021,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586884870
    },
    {
        "content": "<p>ah yes, now my lean is <code>lean 3.8.0</code> rather than <code>lean 3.4.2</code>, this is very nice</p>",
        "id": 193930070,
        "sender_full_name": "Luca Seemungal",
        "timestamp": 1586884894
    },
    {
        "content": "<p>Patrick wrote the tool, it is amazing for <del>beginners</del>everyone :-)</p>",
        "id": 193933623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586886526
    },
    {
        "content": "<p>I've had huge success with it at Xena.</p>",
        "id": 193933638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586886536
    },
    {
        "content": "<p>And you should have all olean files as well so no orange bars (or, orange bars which disappear quickly)</p>",
        "id": 193933713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586886581
    }
]