[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">quot</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">initial_object</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">of_carrier</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">carrier</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">eq_of_carrier</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">carrier</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">of_carrier</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>",
        "id": 157828946,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549589890
    },
    {
        "content": "<p>error: <code>invalid reference to undefined universe level parameter 'v'</code></p>",
        "id": 157828948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549589898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Yeah, this is the usual known elaborator bug which means you need to instead write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">ùíû</span>\n</pre></div>",
        "id": 157831771,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549594601
    },
    {
        "content": "<p>Is it really a bug? I thought it was an intentional decision to not make use of <code>variables</code> if doing so required fixing an otherwise unspecified universe.</p>",
        "id": 157834297,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549598742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"202815\">@Sam Jessup</span>, I've made a new \"topic\" for your question --- you're more likely to get useful answers if you keep different conversations separate.</p>",
        "id": 157834355,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549598826
    },
    {
        "content": "<p>If that was the issue you'd get a different error</p>",
        "id": 157834358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549598833
    },
    {
        "content": "<p>You should ask Kenny Lau to tell you what he's already done from Atiyah-MacDonald; there might be some significant overlap.</p>",
        "id": 157834366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549598873
    },
    {
        "content": "<p>I'm confused. What is the bug?</p>",
        "id": 157834422,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549598918
    },
    {
        "content": "<p>The bug is that the elaborator produces an expression referring to <code>v</code> without including <code>v</code> among the universe parameters of the declaration</p>",
        "id": 157834510,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549599064
    },
    {
        "content": "<p>Oh! I see. I had never understood this issue properly.</p>",
        "id": 157834563,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549599126
    },
    {
        "content": "<p>similar I think to <a href=\"https://github.com/leanprover/lean/issues/395\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/395\">https://github.com/leanprover/lean/issues/395</a>, but evidently different</p>",
        "id": 157834578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549599181
    }
]