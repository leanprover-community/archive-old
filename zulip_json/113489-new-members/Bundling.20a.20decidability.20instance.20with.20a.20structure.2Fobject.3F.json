[
    {
        "content": "<p>I've been working on something the last few months and running into two problems that might be interrelated. I've tried to distill to a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> but haven't succeeded  -- sorry, this thread doesn't have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (but maybe with help I can generate one). Maybe I can get some help anyway.</p>\n<p>(1) I have defined various <code>structure</code>s and Lean sometimes asks for decidability instances. Mostly I have gone the route of \"add the requested instance as an assumption <code>[decidable ...]</code> or <code>[decidable_pred ...]</code> wherever requested\".</p>\n<p>The first problem is that this has led to a proliferation of assumptions -- now (towards the later stages of the construction) I think I am up to <em>six</em> running decidability assumptions. Maybe some of these could be deduced from each other, but I've just been blindly adding whatever Lean asks for. They are things pretty similar to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">myobj</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">myobj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">X.f</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">myobj</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">X.f</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">X.g</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">myobj</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X.f</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">X.g</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">myobj</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">X.f</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">X.g</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"c1\">-- etc, 2-3 more variations like these</span>\n</code></pre></div>\n<p><strong>Question 1.</strong> Is there a simple \"smallest possible\" decidability assumption from which to deduce the examples listed above? The parameters are mostly about inequalities involving functions of the form <code>f : ℕ → Prop</code> and <code>g : ℕ → ℕ</code> above. Actually technically <code>f : ℕ → ℕ → Prop</code> and <code>g : ℕ → ℕ → ℕ</code>.<br>\n<strong>Question 2.</strong> Should I bundle such decidability assumption(s) into <code>myobj</code>? The thing is, I definitely want two otherwise-equal objects with different decidability instances to still be equal.</p>\n<p>Anyway there is a second more serious problem.</p>\n<p>(2) The <code>structure</code>s I'm defining are similar to <code>fin (n : ℕ)</code> in that they depend on auxiliary parameters.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">myobj2</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">myobj</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">structure</span> <span class=\"n\">myobj3</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">myobj</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">myobj2</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have been (to the best of my ability) intentional about what to bundle and what to leave out, since it's relevant to the construction to have various objects from the same underlying parameters. I tried bundling everything at one point and it seemed to make things much more complicated -- not least because there were no longer shared decidability instances.</p>\n<p>Well, I am encountering more and more difficult <code>motive is not type correct</code> errors.</p>\n<ul>\n<li>Sometimes this is because two parameters are only propositionally-equal (like <code>3+3</code> and <code>6</code> for <code>fin n</code>, only instead of nats as parameters it's <code>myobj</code> or <code>myobj2</code>).</li>\n</ul>\n<p>I can resolve this mostly by using <code>copy</code> patterns (<a href=\"#narrow/stream/113489-new-members/topic/dependent.20structures\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/dependent.20structures</a>). Though, I also have to re-assume, or else transfer, decidability instances on the copied object. Sometimes this seems to cause a diamond.</p>\n<ul>\n<li>The more serious problem is that even when things are <em>definitionally equal</em>, sometimes I can't seem to rewrite them without getting a <code>motive is not type correct</code> error. The main thing will be a definition like</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then later, I will get <code>motive is not type correct</code> errors when trying to rewrite <code>f x</code> to whichever of <code>f1 x</code> or <code>f2 x</code> it is. Sometimes <code>simp_rw</code> fixes it but not always.</p>\n<p>In some cases I can't even rewrite/unfold <code>f x</code> to <code>ite (p x) (f1 x) (f2 x)</code>!<br>\n(Or, it might be something to do with recursion -- my actual <code>f</code> is defined using well-founded recursion...)</p>\n<p>I <em>think</em> this is because, in context, there might be other objects that depend on \"<code>f x</code>\" that might need to be rewritten simultaneously (e.g. I have <code>X : my_complicated_object (f x)</code>. Or, it might be something about not being able to <code>rw</code> on the decidability assumptions?</p>\n<p><strong>Question 3.</strong> How do I diagnose / understand a <code>motive is not type correct</code> error? I think this is sometimes about rewriting under binders, and <code>simp_rw</code> can fix it. But the error messages I get are very complicated and I am not able to even identify <em>where</em> the error is generated.</p>",
        "id": 278495788,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649634064
    },
    {
        "content": "<p>You may want to add this to your file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n</code></pre></div>\n<p>In another <a href=\"#narrow/stream/116395-maths/topic/Strange.20type.20error.20with.20fintype_sdiff/near/270514943\">thread</a>, Keving suggested you to remove <code>open_locale classical</code> and use explicit decidability instances to avoid diamonds. I think it makes sense only if you have a small number of decidability instances and you want your decidability algorithms to be computable. But in your case using <code>convert</code> instead of <code>exact</code> in some places is easier than having so many decidability instances flying around.</p>",
        "id": 278497304,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1649636282
    },
    {
        "content": "<p>Given the examples, it looks like <code>[∀ (X : myobj) (n : ℕ), decidable (X.f n)]</code> and <code> [∀ (X : myobj) m, decidable (∀ n, X.f n → X.g n &lt; m)]</code> are the only ones you need.  Numbers 3 and 4 are consequences of the first one.</p>",
        "id": 278497712,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649636861
    },
    {
        "content": "<p>Another thing you might do is, rather than have <code>f : ℕ → Prop</code>, use <code>f : ℕ → bool</code>, which is a way to bake-in the decidability of the the predicate. It's hard to say whether this is appropriate given just the example though.</p>\n<p>For <code>∀ n, X.f n → X.g n &lt; m</code>, what does this being true or false represent?</p>",
        "id": 278497953,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649637155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456794\">Patrick Johnson</span> <a href=\"#narrow/stream/113489-new-members/topic/Bundling.20a.20decidability.20instance.20with.20a.20structure.2Fobject.3F/near/278497304\">said</a>:</p>\n<blockquote>\n<p>You may want to add this to your file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n</code></pre></div>\n<p>In another <a href=\"#narrow/stream/116395-maths/topic/Strange.20type.20error.20with.20fintype_sdiff/near/270514943\">thread</a>, Kevin suggested you to remove <code>open_locale classical</code> and use explicit decidability instances to avoid diamonds. I think it makes sense only if you have a small number of decidability instances and you want your decidability algorithms to be computable. But in your case using <code>convert</code> instead of <code>exact</code> in some places is easier than having so many decidability instances flying around.</p>\n</blockquote>\n<p>It does seem worth trying, yes. I just wasn't sure if the statements I listed actually <em>are</em> decidable already or something -- like I think <code>a &lt; b</code> for natural numbers might be decidable (?), so maybe something like <code>a &lt; g m</code> is too?</p>",
        "id": 278498264,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649637629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Bundling.20a.20decidability.20instance.20with.20a.20structure.2Fobject.3F/near/278497712\">said</a>:</p>\n<blockquote>\n<p>Given the examples, it looks like <code>[∀ (X : myobj) (n : ℕ), decidable (X.f n)]</code> and <code> [∀ (X : myobj) m, decidable (∀ n, X.f n → X.g n &lt; m)]</code> are the only ones you need.  Numbers 3 and 4 are consequences of the first one.</p>\n</blockquote>\n<p>Hmm. Should Lean be able to fill in 3 and 4 automatically, given the first one? This might well be a place where I blindly copied a request from the infoview (for the more complicated statement 3 or 4), then later on added in statement 1 for something else simpler.</p>",
        "id": 278498360,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649637837
    },
    {
        "content": "<p>Yes, that is a decidable proposition already given any pair of natural numbers <code>m</code> and <code>n</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"c1\">-- doesn't throw an error</span>\n</code></pre></div>",
        "id": 278498399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649637843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/113489-new-members/topic/Bundling.20a.20decidability.20instance.20with.20a.20structure.2Fobject.3F/near/278498360\">said</a>:</p>\n<blockquote>\n<p>Should Lean be able to fill in 3 and 4 automatically, given the first one?</p>\n</blockquote>\n<p>Yes, that's what I mean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">q</span><span class=\"o\">]</span>\n<span class=\"c1\">--variables [decidable p] -- fails if this line is commented out</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 278498438,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1649637960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113489-new-members/topic/Bundling.20a.20decidability.20instance.20with.20a.20structure.2Fobject.3F/near/278497953\">said</a>:</p>\n<blockquote>\n<p>Another thing you might do is, rather than have <code>f : ℕ → Prop</code>, use <code>f : ℕ → bool</code>, which is a way to bake-in the decidability of the the predicate. It's hard to say whether this is appropriate given just the example though.</p>\n</blockquote>\n<p>Oh I see. Interesting, I could try it. Separately, maybe I should just make a separate thread about what I'm trying to do. I'd hoped to avoid posting about it until it was done...</p>\n<blockquote>\n<p>For <code>∀ n, X.f n → X.g n &lt; m</code>, what does this being true or false represent?</p>\n</blockquote>\n<p>Just something like \"<code>X.g</code> is (or isn't) bounded by <code>m</code> in the region where <code>X.f</code> is true\".</p>",
        "id": 278498481,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1649637975
    }
]