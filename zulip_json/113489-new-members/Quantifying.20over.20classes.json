[
    {
        "content": "<p>Let's say I have a property of two groups (in the example, that they are not equal). I then have a Lemma which should state that for a given group <code>G</code> there exists another group <code>H</code> such that the property is satisfied.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_property</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">][</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">G</span> <span class=\"bp\">≠</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">example_lemma</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">,</span> <span class=\"n\">my_property</span> <span class=\"n\">G</span> <span class=\"n\">H</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This gives me the following error that is a bit strange, as the expected type seems to be exactly the same as the provided one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span>\n<span class=\"n\">G</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span>\n<span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">prop</span><span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">H</span>\n<span class=\"bp\">⊢</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">H</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">group</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>The question is how to quantify over classes. Or maybe we are not supposed to do that with classes, but only with structures? But then how would I do that?</p>\n<p>I notice that if I write <code>G = H </code> directly in the Lemma-statement, i don't get a mistake, but then probably only the types have to be equal, not the group structures.</p>",
        "id": 295214043,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661429389
    },
    {
        "content": "<p>usually the way to do this is <code>by exactI</code>, that is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_property</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">][</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">G</span> <span class=\"bp\">≠</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">example_lemma</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">my_property</span> <span class=\"n\">G</span> <span class=\"n\">H</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>it's not great :/ in lean4 this will be gone</p>",
        "id": 295214320,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661429518
    },
    {
        "content": "<p>(note that I changed to instance brackets in the lemma)</p>",
        "id": 295214372,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661429530
    },
    {
        "content": "<p>Ok, thanks! How do I learn about things like these?</p>",
        "id": 295215479,
        "sender_full_name": "Raphael Appenzeller",
        "timestamp": 1661429997
    },
    {
        "content": "<p>By asking here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 295217005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661430581
    },
    {
        "content": "<p>I don't think (group H) vs [group H] makes any difference?</p>",
        "id": 295222157,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661432508
    },
    {
        "content": "<p>I guess not, but it's probably better to state it in this way for <code>binport</code>/etc. What really is the difference overall apart from being able to skip names? Because this works, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 295229613,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661434685
    },
    {
        "content": "<p>It might have to do with triggering a typeclass search.</p>",
        "id": 295230408,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661434891
    },
    {
        "content": "<p>I think brackets inside existential quantifier never makes any difference; they only make difference in a function type whose terms can be applied to things, including forall propositions.</p>",
        "id": 295231237,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661435118
    },
    {
        "content": "<p>By the way <code>G ≠ H</code> doesn't mean the group stuctures are different/not isomorphic; it means the underlying types are not equal (which is an ill-behaved notion). If you have two [group G] instances then their equality is indeed equivalent to the group structures being equal, but we lack such extensionality lemmas for algebraic structures.</p>",
        "id": 295232421,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661435524
    },
    {
        "content": "<p>Actually, we don't: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group.ext\">docs#group.ext</a></p>",
        "id": 295232508,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661435554
    },
    {
        "content": "<p>Oh thanks! I think we are only missing them for more advanced structures, like <code>field</code>, <code>algebra</code>.</p>",
        "id": 295232598,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661435590
    },
    {
        "content": "<p>This is from the time <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> was trying to prove the equivalence between boolean rings and boolean algebras. As it turns out, those extensionality lemmas are not really what we want. Instead, I did it using an equivalence of categories: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/BoolRing_equiv_BoolAlg\">docs#BoolRing_equiv_BoolAlg</a></p>",
        "id": 295232823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661435648
    },
    {
        "content": "<p>So yeah we don't have it for <code>field</code> simply because boolean rings are not fields!</p>",
        "id": 295232881,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661435670
    },
    {
        "content": "<p>If you have the leisure you may try to prove <a href=\"https://gist.github.com/alreadydone/daa9760056383d31669755bbb41e2695#file-alg_closure_zorn-lean-L40-L45\">this</a> is a partial order, though I don't really need it as preorder is enough to apply Zorn's lemma.</p>",
        "id": 295233428,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661435827
    },
    {
        "content": "<p>Would that not be better expressed using <code>subfield</code>?</p>",
        "id": 295233740,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661435909
    },
    {
        "content": "<p><code>big k</code> doesn't have a field structure. It's a type of cardinality large enough to properly contain all algebraic extensions of <code>k</code>.</p>",
        "id": 295233881,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661435954
    },
    {
        "content": "<p>Yeah it's a bit weird: the carriers of the extensions under consideration are all subsets of a fixed set/type, but the field operations are not fixed (and the containment relation requires the operations to be preserved). When I came across this proof presented (a bit sketchily) in a textbook, I actually didn't believe it was correct for a while.</p>",
        "id": 295234766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661436232
    },
    {
        "content": "<p>Oh, that's pretty cursed indeed.</p>",
        "id": 295235000,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661436296
    },
    {
        "content": "<p>if <code>big</code> is in <code>Type u</code>, why can't you use <code>Type u</code> instead of some huge set?</p>",
        "id": 295238379,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661437361
    },
    {
        "content": "<p>is it about stating the compatibility conditions?</p>",
        "id": 295238473,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661437393
    },
    {
        "content": "<p>I explained why just above the definition of <code>alg_extension</code> in <a href=\"https://gist.github.com/alreadydone/daa9760056383d31669755bbb41e2695#file-alg_closure_zorn-lean-L40-L45\">the link</a></p>",
        "id": 295238750,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661437466
    },
    {
        "content": "<p>In short: there is a large enough family of canonical maps between subsets of a type with all triangles commuting, but not between all types in a universe.</p>",
        "id": 295239029,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661437553
    },
    {
        "content": "<p>oh, that makes sense... I wonder if there is a purely type-theoretic way to resolve this, but I doubt it</p>",
        "id": 295240946,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1661438101
    },
    {
        "content": "<p>I actually <a href=\"https://gist.github.com/alreadydone/ca738825fdfa3fe989ab79ef1af493b7\">took that approach</a> until I realized I can't take the direct limit ..</p>",
        "id": 295241717,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661438306
    }
]