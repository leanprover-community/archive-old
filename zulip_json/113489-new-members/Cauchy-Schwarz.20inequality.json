[
    {
        "content": "<p>Hello! I'm stuck on proving an example of Cauchy-Schwarz Inequality in the case of $ \\mathbb{R}^2 $.</p>\n<p>I notice that there are a bunch of theorems at hand, but they are all talking about element about <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html#inner_product_space\">inner_product_space</a>. For example <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html#real_inner_mul_inner_self_le\">real_inner_mul_inner_self_le</a> that I want to use here, it talks about 2 variables of type F, but I don't know how to instantiate variables of such type.</p>\n<p>I would like to know if there is a way to instantiate 2 variables of type F that fit in well in <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html#real_inner_mul_inner_self_le\">real_inner_mul_inner_self_le</a> and apply it, without modifying my statement here? Any hint welcome!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245288979,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1625735436
    },
    {
        "content": "<p>So you need to pick <code>F</code> by deciding how you want your inner product to be defined</p>",
        "id": 245289312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625735672
    },
    {
        "content": "<p>At a guess you want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space\">docs#euclidean_space</a>, so <code>F</code> is <code>euclidean_space ℝ 2</code></p>",
        "id": 245289369,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625735717
    },
    {
        "content": "<p>Which would make your statement something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which then is the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"n\">inner</span> <span class=\"n\">p</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Note I'm not suggesting you adjust your statement here, just suggesting some other statements you could prove first in order to prove your statement</p>",
        "id": 245289641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625735919
    },
    {
        "content": "<p>Thanks! I'll give it a try</p>",
        "id": 245289793,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1625736029
    },
    {
        "content": "<p>I have to change 2 to (fin 2) to make lean happy in the first statement. But the second one it complains about <code>has_inner ℕ (euclidean_space ℝ (fin 2))</code> <code>has_inner ℕ (fin 1.succ → ℕ)</code>, maybe I need to add extra info like <code>[inner_product_space ℝ p]</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">algebra_cauchy2_2xp3ysqleq13txsqpysq</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- let F:= euclidean_space ℝ (fin 2),</span>\n  <span class=\"c1\">-- have h₀ := @real_inner_mul_inner_self_le (euclidean_space ℝ (fin 2)) _ _ _,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"n\">inner</span> <span class=\"n\">p</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 245290927,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1625736843
    },
    {
        "content": "<p>Lean is inferring the wrong type for <code>![2, 3]</code></p>",
        "id": 245291064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625736952
    },
    {
        "content": "<p><code>(![2, 3] : euclidean_space ℝ (fin 2))</code> might be enough</p>",
        "id": 245291123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625736970
    },
    {
        "content": "<p>Once the lean web editor loads for me, I can try to debug</p>",
        "id": 245291323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625737114
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">algebra_cauchy2_2xp3ysqleq13txsqpysq</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">3</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:=</span> <span class=\"n\">real_inner_mul_inner_self_le</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245291652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625737366
    },
    {
        "content": "<p>By using the <code>let</code> I was able to force lean to infer the types correctly without using <code>@</code></p>",
        "id": 245291764,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625737464
    },
    {
        "content": "<p>The goal is trivial from the <code>sorry</code>, the key lemma you need to undo the mess made by <code>euclidean_space</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.sum_univ_succ\">docs#fin.sum_univ_succ</a></p>",
        "id": 245291819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625737529
    },
    {
        "content": "<p>If you remove it from the <code>simp</code> you'll see why</p>",
        "id": 245291860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625737562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks! That looks pretty nice! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.pi_Lp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">algebra_cauchy2_2xp3ysqleq13txsqpysq</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">13</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"mi\">3</span><span class=\"o\">],</span>\n  <span class=\"k\">let</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:=</span> <span class=\"n\">real_inner_mul_inner_self_le</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">pow_two</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₀</span><span class=\"o\">,</span>\n  <span class=\"n\">nlinarith</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Btw where can I find the construction syntax of <code>![x, y]</code>? It seems that it is not in  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space/\">euclidean_space</a></p>",
        "id": 245326629,
        "sender_full_name": "Kunhao Zheng",
        "timestamp": 1625756741
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/data/matrix/notation.html\">https://leanprover-community.github.io/mathlib_docs/data/matrix/notation.html</a></p>",
        "id": 245326959,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1625756859
    },
    {
        "content": "<p>We have specializations of AM-GM to two, three or four variables in mathlib, we should probably add such specializations of Cauchy-Schwarz to specific small numbers of real variables as well, for convenience when you want to use it with a few concrete expressions rather than having an inner product space.</p>",
        "id": 245387953,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1625790587
    }
]