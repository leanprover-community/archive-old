[
    {
        "content": "<p>I am working my way through the Mathematics in Lean tutorial, so I want to start beginning formalize some \"real\" notions, for example the condition that a module over a commutative ring is flat. Is there some tutorial or cheat sheet etc, how to even write down a definition? Is that supposed to be a <code>theorem </code> or a <code>def</code>? I am skimming through the mathlib files, but I don't yet see how the syntax would work out. Thanks!</p>",
        "id": 226195168,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1613163542
    },
    {
        "content": "<p>The definition of flatness will be a <code>def</code> of type <code>Prop</code>.</p>",
        "id": 226195438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613163652
    },
    {
        "content": "<p>definitions are hard to get right :-(</p>",
        "id": 226195465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613163663
    },
    {
        "content": "<p>The big question is: which definition will you use?</p>",
        "id": 226195762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613163808
    },
    {
        "content": "<p>My initial idea would be to say: for all injective maps of R-modules the tensor product with the module should still be injective.</p>",
        "id": 226195778,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1613163820
    },
    {
        "content": "<p>As a test case: then show that all free modules are flat.</p>",
        "id": 226195889,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1613163857
    },
    {
        "content": "<p>And which universes will everything be in?</p>",
        "id": 226195890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613163857
    },
    {
        "content": "<p>This might all be in a branch of mathlib. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 226195979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613163913
    },
    {
        "content": "<p>Being a beginner (for the moment I want to just play around and see a little bit of progress for myself) I would say the ring and the modules should be in the same universe.</p>",
        "id": 226196185,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1613164003
    },
    {
        "content": "<p>Or is that problematic?</p>",
        "id": 226196272,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1613164055
    },
    {
        "content": "<p>If it's just for fun to play around, that shouldn't be a problem</p>",
        "id": 226196529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613164197
    },
    {
        "content": "<p>Where is a good place to read about the syntax of definitions in lean?</p>",
        "id": 226196621,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1613164242
    },
    {
        "content": "<p>Of course <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mi>l</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb Q_l</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is in universe <code>Type 0</code>, but etale cohomology of a scheme in <code>Type 0</code> lives in <code>Type 1</code>, so with your definition those vector spaces wouldn't be flat... (assuming you define etale cohomology using the general topos theoretic machine)<br>\nBut it's totally fine to ignore that issue for now.</p>",
        "id": 226196660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613164267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> Have you seen the video recordings of \"Lean for the Curious Mathematician\"?</p>",
        "id": 226196823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613164351
    },
    {
        "content": "<p><a href=\"https://www.youtube.com/watch?v=8mVOIGW5US4&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N\">https://www.youtube.com/watch?v=8mVOIGW5US4&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"8mVOIGW5US4\" href=\"https://www.youtube.com/watch?v=8mVOIGW5US4&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N\"><img src=\"https://i.ytimg.com/vi/8mVOIGW5US4/default.jpg\"></a></div>",
        "id": 226196900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613164389
    },
    {
        "content": "<p>The ones on \"Structures and classes\" and \"Building a xyz hierarchy\" are probably most relevant if you want to learn about making definitions</p>",
        "id": 226196972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613164440
    },
    {
        "content": "<p>I noticed that they are there, watched the one about category theory, but nothing else; nor did I work through the exercises. I'll check these out, thanks!</p>",
        "id": 226197033,
        "sender_full_name": "Jakob Scholbach",
        "timestamp": 1613164454
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">flat</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- some predicate goes here</span>\n</code></pre></div>",
        "id": 226197082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613164492
    },
    {
        "content": "<p>At some point I wrote some code about tensoring linear maps with a module. In other words, give <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"></mspace><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"></mspace><msub><mi>M</mi><mn>1</mn></msub><mo>→</mo><msub><mi>M</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">f \\colon M_1 \\to M_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and another module <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>, the induced map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub><mo>⊗</mo><mi>M</mi><mo>→</mo><msub><mi>M</mi><mn>2</mn></msub><mo>⊗</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M_1 \\otimes M \\to M_2 \\otimes M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.<br>\nBut I don't know if that code ended up in mathlib.</p>",
        "id": 226197320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613164628
    },
    {
        "content": "<p>I think it's still waiting for attention by me or someone else: <a href=\"https://github.com/leanprover-community/mathlib/pull/4773\">https://github.com/leanprover-community/mathlib/pull/4773</a></p>",
        "id": 226197361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613164666
    },
    {
        "content": "<p>Is that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.prod_map\">docs#linear_map.prod_map</a>?</p>",
        "id": 226199701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613166057
    },
    {
        "content": "<p>Ah, tmul not prod</p>",
        "id": 226202316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613167452
    },
    {
        "content": "<p>Here's one possible \"definition\" which doesn't have universe issues:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.tensor_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flat_aux</span> <span class=\"o\">(</span><span class=\"bp\">𝔞</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">𝔞</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product.lift</span> <span class=\"bp\">$</span>\n<span class=\"n\">linear_map.mk₂</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_smul</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">])</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_smul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">flat</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"bp\">𝔞</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">function.injective</span> <span class=\"bp\">$</span> <span class=\"n\">flat_aux</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"bp\">𝔞</span>\n</code></pre></div>\n<p>Of course, this is a bit backwards, since it's a theorem that this is equivalent to the \"usual\" definition of flatness :)</p>",
        "id": 226224316,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613187846
    },
    {
        "content": "<p>Of course it doesn't matter if things are defined in a nonstandard way as long as it's mathematically equivalent to the standard way. The question is whether one can build the standard API from the definition. This now is a much easier and more fun challenge because it only involves proving theorems</p>",
        "id": 226236257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613208535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"247154\">@Jakob Scholbach</span> So there is a <a href=\"https://github.com/leanprover-community/mathlib/tree/flat-module\">branch#flat-module</a> of mathlib, in which I've tried to set up the basic theory for flatness.</p>",
        "id": 226347372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613367851
    },
    {
        "content": "<p>I got stuck for two reasons:</p>\n<ol>\n<li>mathlib doesn't have enough basic lemmas about tensor products in all the different variants. Tensor product of modules is there, but ideally we will have base change, associativity of base change, etc... There is currently no framework that makes <code>polynomial A</code> a (not the) tensor product of <code>A</code> and <code>polynomial int</code>. I think we should have such a framework in order for things to work smoothly.</li>\n<li>As definition I chose the minimalist assertion: <em>for every ideal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span>, the natural map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>⊗</mo><mi>M</mi><mo>→</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">I \\otimes M \\to M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is injective</em>. Bootstrapping from this to the \"usual\" definition of preserving injectivity of arbitrary maps was painful. I tried to follow <a href=\"https://stacks.math.columbia.edu/tag/00HD\">https://stacks.math.columbia.edu/tag/00HD</a> but the proof became very awkard because Lean doesn't let you smoothly move between submodules and injective maps. Recently I didn't have time to work on this, but my gut feeling is that we should first prove a general \"induction principle\" for the category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules, that will say something like \"if you have suitable predicate <code>P</code> on modules, then you only need to check it on finitely generated modules\", and maybe another version that will say \"if you have an even more suitable predicate <code>Q</code>, then you only need to check it on ideals\". Once we have those results, the proof of stacks-tag 00HD should be \"straightforward\".</li>\n</ol>",
        "id": 226347737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613368315
    },
    {
        "content": "<p>From my experience, proving these general induction principles is very worthwhile, particularly if it allows you to black-box a Zorn's lemma argument</p>",
        "id": 226349020,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613370076
    },
    {
        "content": "<p>Flat modules arose in a <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Rational.20basis.20of.20a.20number.20field/near/271853892\">recent thread</a> and I read the docs and thought about the technical problems encountered. I try to come up with a nicer characterization of the tensor product, but I don't see how we could possibly replace the universal property by something as concrete as <code>is_localization</code>. However, I find that instead of quantifying over all R-modules in a universe, we only need to quantify over maximal ideals of the ring R, in order to characterize the tensor product up to isomorphism. (Naively, we'd like to apply the universal property to M ⊗[R] N to obtain the isomorphism, which lies in <code>max u v</code> if M and N lies in universes u and v. Even though R may lie in a universe higher than max u v, the characterization using maximal ideals doesn't involve universe levels explicitly, only indirectly through the types, like the adopted definition of flatness, though I don't immediately see what problems will arise if we use the definition that quantifies over max u v.)</p>\n<p>The idea is as follows: for a binear map M × N → P to be a tensor product, the first (intrinsic, not universal) condition is that its image spans P. By the universal property for M ⊗ N we get a surjection M ⊗ N → P, which must kill some nonzero element x in M ⊗ N if it's not an isomorphism. Take a maximal element among submodules of M ⊗ N that doesn't contain x and call it Q. Then x is nonzero in (M ⊗ N)/Q and every nonzero submodule of (M ⊗ N)/Q contains x, so Rx is an essential submodule of (M ⊗ N)/Q, and it's also simple, hence isomorphic to R/m for some maximal ideal m in R, so (M ⊗ N)/Q <a href=\"https://math.stackexchange.com/a/2258952/12932\">embeds into the injective hull</a> E(R/m). Therefore, if for every m, every bilinear M × N → E(R/m) factors through P, then M ⊗ N -&gt; P kills no nonzero element and must be an isomorphism.</p>\n<p>Regarding the examples in ring_theory.flat (polynomial A vs. A ⊗ polynomial R, fin n → R, R × R (vs. (ℤ × ℤ) ⊗ R?), ℤ[i] ⊗ ℝ (vs. ℂ)): since these are all base change of free modules, they can be handled by a general theorem that says if R,A,N form a scalar tower, then a R-bilinear map f : A × M → N such that m-&gt;f(1,m) sends a R-basis of M to a A-basis of N is a tensor product. (Such bilinear maps are also in bijection with (semi)linear maps M → N.)</p>",
        "id": 272082753,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1644997802
    },
    {
        "content": "<p>It's crazy how localisation had such a nice characteristic predicate but tensoring has only what looks like far nastier ones</p>",
        "id": 272085831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645000156
    }
]