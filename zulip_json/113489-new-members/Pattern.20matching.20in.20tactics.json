[
    {
        "content": "<p>What's the proper way to use an anonymous constructor as a pattern-matching expression in a tactic proof? For example, I have <code>p: ∃ (h: a ∈ A), a ∉ B</code>, and when outside of a tactic context I can do <code>let ⟨a, ha⟩ := p in ...</code>. I'd love to be able to do something like this inside of tactics. Right now what I usually do is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">exact</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"kd\">begin</span>\n    <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>which is kind of clunky.</p>\n<p>Is there a better or more standard way to do this?</p>",
        "id": 224599874,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1612033600
    },
    {
        "content": "<p>Does <code>cases p with h1 h2</code>work for you? I'm a bit unclear about whether you're constructing data or not.</p>",
        "id": 224599905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612033652
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  X : Type</span>\n<span class=\"cm\">  A B : set X</span>\n<span class=\"cm\">  a : X</span>\n<span class=\"cm\">  h1 : a ∈ A</span>\n<span class=\"cm\">  h2 : a ∉ B</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224600067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612033806
    },
    {
        "content": "<p>I am a bit confused about what you are calling <code>a</code> here. In your example you'd get <code>a : a ∈ A</code>. As well as <code>cases</code> there are the tactics <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#rcases\">tactic#rcases</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#obtain\">tactic#obtain</a></p>",
        "id": 224600126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612033884
    },
    {
        "content": "<p>This is what I was looking for I think. Sorry the example is pretty contrived, I was more asking about just destructing the existential quantifier into it's two parts. I'm a little confused why this works, but thanks again!</p>",
        "id": 224600282,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1612034057
    },
    {
        "content": "<p>A proof of an existential quantifier is a pair of pieces of information, and cases just takes it apart into the two pieces.</p>",
        "id": 224600300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612034099
    },
    {
        "content": "<p>I understand that yeah, but I thought that <code>cases</code> only works with inductively defined types, and I hadn't really considered existential quantification as an inductively defined type.</p>",
        "id": 224600417,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1612034257
    },
    {
        "content": "<p>But I think I see now that it really only has one constructor, so no additional subgoals are created. As opposed to doing <code>cases</code> on a disjunction.</p>",
        "id": 224600462,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1612034287
    },
    {
        "content": "<p><code>obtain &lt;a, ha&gt; := p</code> works inside tactics you know</p>",
        "id": 224600688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612034554
    },
    {
        "content": "<p><code>obtain</code> is exactly what I'm looking for, and is especially useful since it uses <code>rcases</code>, thanks for pointing that out, hadn't seen it before.</p>",
        "id": 224600704,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1612034623
    },
    {
        "content": "<p>I think it's strictly better than the let-match you have in term mode</p>",
        "id": 224600761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612034654
    },
    {
        "content": "<p>Yeah, and reads better than <code>cases</code>/<code>rcases</code>. Thanks again</p>",
        "id": 224600791,
        "sender_full_name": "Enrico Borba",
        "timestamp": 1612034702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256383\">Enrico Borba</span> <a href=\"#narrow/stream/113489-new-members/topic/Pattern.20matching.20in.20tactics/near/224600417\">said</a>:</p>\n<blockquote>\n<p>I understand that yeah, but I thought that <code>cases</code> only works with inductively defined types, and I hadn't really considered existential quantification as an inductively defined type.</p>\n</blockquote>\n<p>You can ask Lean to show you the <a href=\"https://github.com/leanprover-community/lean/blob/master/library/init/logic.lean#L537-L538\">definition of exists</a>. It's a bit shocking that forall is absolutely core builtin while exists is one of hundreds of inductive types. But that's how it is in dependent type theory. In real life you don't have to care about such foundational issues, just learn the relevant syntax and tactics  (did you go through <a href=\"https://leanprover-community.github.io/learn.html\">https://leanprover-community.github.io/learn.html</a>?)</p>",
        "id": 224601439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1612035576
    },
    {
        "content": "<p>By the way, in some approaches to DTT forall is a coinductive type (where application is the destructor and <code>funext</code> is the bisimulation theorem)</p>",
        "id": 224602133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612036599
    }
]