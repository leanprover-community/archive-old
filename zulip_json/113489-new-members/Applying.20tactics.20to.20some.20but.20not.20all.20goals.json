[
    {
        "content": "<p>Hello,</p>\n<p>I have a few goals that can be solved by an identical sequence of tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">any_goals</span> <span class=\"o\">{</span><span class=\"n\">unfold</span> <span class=\"n\">Rule.eval_head</span><span class=\"o\">},</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span><span class=\"n\">refine</span> <span class=\"n\">le_sup_iff.mpr</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">any_goals</span><span class=\"o\">{</span><span class=\"n\">left</span><span class=\"o\">},</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n</code></pre></div>\n<p>(I'm not sure how to collapse that into a single usage of <code>any_goals</code> either )<br>\nHowever, some of these tactics also apply to later goals and destroy the proof I already developed for those goals.<br>\nSo I'm wondering if there is a way to apply tactics only to select goals and not other ones.</p>\n<p>Thanks,</p>",
        "id": 281350855,
        "sender_full_name": "Fancy Aluminum",
        "timestamp": 1651780494
    },
    {
        "content": "<p>Have you tried <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#work_on_goal\">tactic#work_on_goal</a>?</p>",
        "id": 281351673,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651780882
    },
    {
        "content": "<p>Hm the link doesn't work but <code>work_on_goal i {⋯}</code> applies the tactics <code>⋯</code> to the goal <code>i</code> (indexed from zero). You're not required to close the goals and Lean will remember any progress you make</p>",
        "id": 281352186,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1651781162
    },
    {
        "content": "<p>I have not, is there a way to use work_on_goal so that it works on multiple goals at once? From the documentation it seems that it only works on one at a time</p>",
        "id": 281352202,
        "sender_full_name": "Fancy Aluminum",
        "timestamp": 1651781163
    },
    {
        "content": "<p>I suppose I could solve the goal that is being ruined by any_goals first and then try</p>",
        "id": 281352287,
        "sender_full_name": "Fancy Aluminum",
        "timestamp": 1651781227
    },
    {
        "content": "<p>I think that <code>any_goals { tac1, tac2,... }</code> should apply to all goals where the sequence <code>tac1, tac2,...</code> works.  In particular, if one of the tactics does not work on the goals that you do not want to change, then you are in luck!</p>",
        "id": 281352565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651781384
    },
    {
        "content": "<p>Notice that <code>any_goals { tac1 }, any_goals { tac2 }</code> is very different from <code>any_goals { tac1, tac2 }</code>: the former is much more likely of using tactic <code>tac2</code> than the latter.</p>",
        "id": 281352961,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651781581
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#try\">tactic#try</a> might also be useful here?</p>",
        "id": 281353023,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1651781623
    },
    {
        "content": "<p>Thanks :) I feel like I understand Lean a bit better now. I was able to solve it a few different ways with your suggestions</p>",
        "id": 281353861,
        "sender_full_name": "Fancy Aluminum",
        "timestamp": 1651782044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/113489-new-members/topic/Applying.20tactics.20to.20some.20but.20not.20all.20goals/near/281352186\">said</a>:</p>\n<blockquote>\n<p>Hm the link doesn't work</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.interactive.work_on_goal\">docs#tactic.interactive.work_on_goal</a></p>",
        "id": 281385906,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1651807995
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 281499428,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651874795
    },
    {
        "content": "<p>For finer control and less wasted CPU cycles on with <code>try</code> or <code>any_goals</code>: if you want to apply the same thing to goals # 4, # 5, # 7, you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">swap</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n<span class=\"n\">iterate</span> <span class=\"mi\">3</span> <span class=\"o\">{</span> <span class=\"c\">/-</span><span class=\"cm\"> same thing that applies to all three -/</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>because <code>swap n</code> doesn't actually exchange the first goal with the <code>n</code>th, but actually do a cyclic permutation of the first <code>n</code> goals.</p>",
        "id": 281500092,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1651875368
    }
]