[
    {
        "content": "<p>It took me two weeks, but I now finally have a proof for Q5 from IMO 2013:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">imo2013Q5</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f_i</span><span class=\"o\">:</span>  <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f_ii</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">f_iii</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p><a href=\"https://github.com/dwrensha/mathematical-puzzles-in-lean/blob/master/src/imo2013_q5.lean\">https://github.com/dwrensha/mathematical-puzzles-in-lean/blob/master/src/imo2013_q5.lean</a></p>",
        "id": 223021366,
        "sender_full_name": "David Renshaw",
        "timestamp": 1610854187
    },
    {
        "content": "<p>(The code could definitely use some cleaning up, and I probably am doing some silly noobish things.)</p>",
        "id": 223021441,
        "sender_full_name": "David Renshaw",
        "timestamp": 1610854253
    },
    {
        "content": "<p>Will you contribute it to the repository?  <a href=\"https://github.com/leanprover-community/mathlib/tree/master/archive/imo\">https://github.com/leanprover-community/mathlib/tree/master/archive/imo</a></p>",
        "id": 223021887,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610855005
    },
    {
        "content": "<p>Yes, I'd like to eventually submit a pull request.</p>",
        "id": 223021957,
        "sender_full_name": "David Renshaw",
        "timestamp": 1610855113
    },
    {
        "content": "<p>I wanted to put some effort into cleanup first.</p>",
        "id": 223022020,
        "sender_full_name": "David Renshaw",
        "timestamp": 1610855183
    },
    {
        "content": "<p>Wow, cool!<br>\nLooks like you've (re)proved quite a few library lemmas though like your nth_power_gt_one  would follow from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/one_lt_pow\">docs#one_lt_pow</a> or nat_abs_pos would be a one-liner from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat_abs_pos_of_ne_zero\">docs#nat_abs_pos_of_ne_zero</a> I believe, hope you didn't spend too long on those! It's true that the library does have many gaps, but for lemmas like those I would usually assume they are already in the library somewhere, finding them can be tough though of course <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 223022424,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610855900
    },
    {
        "content": "<p>does mathlib have anything that I could have used instead of this lemma?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">factor_xn_m_yn</span>\n      <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n      <span class=\"o\">:</span>  <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span><span class=\"n\">i</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 223022822,
        "sender_full_name": "David Renshaw",
        "timestamp": 1610856489
    },
    {
        "content": "<p>There is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.pow_sub_pow_factor\">docs#polynomial.pow_sub_pow_factor</a> but its not quite the same I think?</p>",
        "id": 223023407,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610857333
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/geom_sum₂_mul\">docs#geom_sum₂_mul</a> ?</p>",
        "id": 223023938,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1610858216
    },
    {
        "content": "<p>ah, nice!</p>",
        "id": 223024019,
        "sender_full_name": "David Renshaw",
        "timestamp": 1610858341
    },
    {
        "content": "<p>I've submitted <a href=\"https://github.com/leanprover-community/mathlib/pull/5786\">https://github.com/leanprover-community/mathlib/pull/5786</a>.</p>",
        "id": 223060648,
        "sender_full_name": "David Renshaw",
        "timestamp": 1610914258
    },
    {
        "content": "<p>Thanks! I've sent you an invite to the mathlib repo. Please open a PR from a branch on the mathlib repo per the instructions <a href=\"https://leanprover-community.github.io/contribute/index.html\">here</a>.</p>",
        "id": 223060907,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610914665
    },
    {
        "content": "<p>I'm having trouble running the linter locally:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">lint</span><span class=\"bp\">-</span><span class=\"n\">style.sh</span>\n<span class=\"bp\">+</span> <span class=\"n\">touch</span> <span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">style</span><span class=\"bp\">-</span><span class=\"n\">exceptions.txt</span>\n<span class=\"bp\">+</span> <span class=\"n\">find</span> <span class=\"n\">src</span> <span class=\"n\">archive</span> <span class=\"bp\">-</span><span class=\"n\">name</span> <span class=\"bp\">'*.</span><span class=\"n\">lean'</span>\n<span class=\"bp\">+</span> <span class=\"n\">xargs</span> <span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">lint</span><span class=\"bp\">-</span><span class=\"n\">style.py</span>\n<span class=\"n\">Traceback</span> <span class=\"o\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"o\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/home/dwrensha/src/mathlib/./scripts/lint-style.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">212</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"bp\">&lt;</span><span class=\"n\">module</span><span class=\"bp\">&gt;</span>\n    <span class=\"n\">lint</span><span class=\"o\">(</span><span class=\"n\">Path</span><span class=\"o\">(</span><span class=\"n\">fn</span><span class=\"o\">))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/home/dwrensha/src/mathlib/./scripts/lint-style.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">206</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">lint</span>\n    <span class=\"n\">errs</span> <span class=\"bp\">=</span> <span class=\"n\">reserved_notation_check</span><span class=\"o\">(</span><span class=\"n\">lines</span><span class=\"o\">,</span> <span class=\"n\">fn</span><span class=\"o\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/home/dwrensha/src/mathlib/./scripts/lint-style.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">87</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">reserved_notation_check</span>\n    <span class=\"k\">if</span> <span class=\"n\">fn.relative_to</span><span class=\"o\">(</span><span class=\"n\">ROOT_DIR</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"n\">Path</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">tactic</span><span class=\"bp\">/</span><span class=\"n\">reserved_notation.lean'</span><span class=\"o\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/usr/lib64/python3.9/pathlib.py\"</span><span class=\"o\">,</span> <span class=\"n\">line</span> <span class=\"mi\">928</span><span class=\"o\">,</span> <span class=\"k\">in</span> <span class=\"n\">relative_to</span>\n    <span class=\"n\">raise</span> <span class=\"n\">ValueError</span><span class=\"o\">(</span><span class=\"s2\">\"{!r} is not in the subpath of {!r}\"</span>\n<span class=\"n\">ValueError</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">logic</span><span class=\"bp\">/</span><span class=\"n\">embedding.lean'</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">subpath</span> <span class=\"n\">of</span> <span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">dwrensha</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">mathlib'</span> <span class=\"n\">OR</span> <span class=\"n\">one</span> <span class=\"n\">path</span> <span class=\"n\">is</span> <span class=\"n\">relative</span> <span class=\"n\">and</span> <span class=\"n\">the</span> <span class=\"n\">other</span> <span class=\"n\">is</span> <span class=\"n\">absolute.</span>\n</code></pre></div>",
        "id": 223061409,
        "sender_full_name": "David Renshaw",
        "timestamp": 1610915307
    },
    {
        "content": "<p>Hmm, it's failing for me too for an unrelated reason:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ ./scripts/lint-style.sh\n+ touch scripts/style-exceptions.txt\n+ find src archive -name '*.lean'\n+ xargs ./scripts/lint-style.py\n++ find . -name '*.lean' -type f -executable\nfind: -executable: unknown primary or operator\n+ executable_files=\n</code></pre></div>\n<p>I guess the version of <code>find</code> in my version of macOS doesn't support <code>-executable</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"321696\">@Julian Berman</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/5721\">#5721</a> was supposed to make it easier to run the linter, right? Want to take a look?</p>",
        "id": 223061754,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610915747
    },
    {
        "content": "<p>This is quite weird, on my setup (MINGW64 on windows) using the fixes suggested at <br>\n<a href=\"https://apple.stackexchange.com/questions/116367/find-all-executable-files-within-a-folder-in-terminal\">https://apple.stackexchange.com/questions/116367/find-all-executable-files-within-a-folder-in-terminal</a> don't work, maybe using an approach like<br>\n<a href=\"https://github.com/npryce/adr-tools/commit/3dcf8388900a10c6bf6ea35e45a44758e6cd1a24\">https://github.com/npryce/adr-tools/commit/3dcf8388900a10c6bf6ea35e45a44758e6cd1a24</a><br>\nis most portable?</p>",
        "id": 223062247,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1610916385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/208328-IMO-grand-challenge/topic/2013.20Q5/near/223061754\">said</a>:</p>\n<blockquote>\n<p>Hmm, it's failing for me too for an unrelated reason:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ ./scripts/lint-style.sh\n+ touch scripts/style-exceptions.txt\n+ find src archive -name '*.lean'\n+ xargs ./scripts/lint-style.py\n++ find . -name '*.lean' -type f -executable\nfind: -executable: unknown primary or operator\n+ executable_files=\n</code></pre></div>\n<p>I guess the version of <code>find</code> in my version of macOS doesn't support <code>-executable</code>.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/5721\">#5721</a> was supposed to make it easier to run the linter, right? Want to take a look?</p>\n</blockquote>\n<p>Oy, yes will have a look in a few hours</p>",
        "id": 223063405,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610918124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> an immediate fix is this diff:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>⊙  g diff                                                                                                                                                                                                                                                                                                                                                      julian@Home ●\n<span class=\"gh\">diff --git a/scripts/lint-style.sh b/scripts/lint-style.sh</span>\n<span class=\"gh\">index d20887efd..5d00a6a4a 100755</span>\n<span class=\"gd\">--- a/scripts/lint-style.sh</span>\n<span class=\"gi\">+++ b/scripts/lint-style.sh</span>\n<span class=\"gu\">@@ -35,7 +35,7 @@ set -exo pipefail</span>\n\n touch scripts/style-exceptions.txt\n\n<span class=\"gd\">-find src archive -name '*.lean' | xargs ./scripts/lint-style.py</span>\n<span class=\"gi\">+find $PWD/src $PWD/archive -name '*.lean' | xargs ./scripts/lint-style.py</span>\n\n # 2. Global checks on the mathlib repository\n</code></pre></div>\n<p>i.e. to add <code>$PWD/</code> in front of <code>archive</code> and <code>src</code> in <code>lint-style.sh</code>.</p>\n<p>I'll send a PR to mathlib to fix, but given I've broken it once already and CI passed, I think it deserves a few unit tests to make sure I'm not breaking any other combination of absolute/relative, so will take me a day or so to get that sent over.</p>",
        "id": 223075738,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610936767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> if you're adventurous, you can use GNU find on macOS. (I do, it works fine, and only once in a blue moon do I need to tell something to use regular BSD find). <code>brew install findutils</code> and then placing it first on your PATH.</p>",
        "id": 223076017,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610937274
    },
    {
        "content": "<p>(Though yeah that sounds worth fixing too... will have a look tomorrow when I poke around more. Possibly the whole thing can just be a Python script...)</p>",
        "id": 223076018,
        "sender_full_name": "Julian Berman",
        "timestamp": 1610937280
    }
]