[
    {
        "content": "<p>The main <code>ex_bound'</code> lemma in this PR currently uses geom_sum by way of a private lemma. I did this because I found it awkward to apply <code>geom_sum</code> directly to the expression <code>(∑ (x : ℕ) in filter (λ (k : ℕ), n ≤ k) (range j), (1 / 2) ^ (x - n))</code> since the exponent is <code>x-n</code> rather than <code>x</code>. Is there a more elegant way of doing this?</p>",
        "id": 249532237,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629064639
    },
    {
        "content": "<p>Part of me just wants to give the canonical grumpy old man observation that if you're using subtraction on naturals to do mathematics rather than computer science, then you're doing it wrong. Can you rewrite to use addition on something else instead?</p>",
        "id": 249532289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629064705
    },
    {
        "content": "<p>For example in <code>factorial_mul_pow_sub_le_factorial</code> one could redefine m to be n + k, remove the hypothesis that m &gt;= n and just have integers n and k and an addition instead of a subtraction.</p>",
        "id": 249532406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629064838
    },
    {
        "content": "<p>Is it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_range_sub_sum_range\">docs#sum_range_sub_sum_range</a> that's responsible for getting the goal in that unpleasant state in the first place?</p>",
        "id": 249532919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629065647
    },
    {
        "content": "<p>I feel like that would be more pleasant if it were stated as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 249533007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629065798
    },
    {
        "content": "<p>Or even just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 249533070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629065912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238667/near/249532406\">said</a>:</p>\n<blockquote>\n<p>For example in <code>factorial_mul_pow_sub_le_factorial</code> one could redefine m to be n + k, remove the hypothesis that m &gt;= n and just have integers n and k and an addition instead of a subtraction.</p>\n</blockquote>\n<p>Indeed, there already exists a lemma that does this.</p>",
        "id": 249533076,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629065931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238667/near/249532919\">said</a>:</p>\n<blockquote>\n<p>Is it <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_range_sub_sum_range\">docs#sum_range_sub_sum_range</a> that's responsible for getting the goal in that unpleasant state in the first place?</p>\n</blockquote>\n<p>Good point, I just copied this from the proof of <code>exp_bound</code>, maybe both should be changed. I'll think about this thanks.</p>",
        "id": 249533152,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629066028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238667/near/249533070\">said</a>:</p>\n<blockquote>\n<p>Or even just</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">-</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span>\n  <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">finset.range</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I just came onto Zulip to post exactly this suggestion too. Get rid of j, replace it with n+m, use Eric's lemma, now you have no filter and you look like you're in much better shape.</p>",
        "id": 249533167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629066075
    },
    {
        "content": "<p>I'm surprised to see that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_range_sub_sum_range\">docs#sum_range_sub_sum_range</a> is in the exponential.lean file. It seems like this lemma, the lemma you proposed, and the other lemmas like this in the file should be moved to a more appropriate place.</p>",
        "id": 249535187,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629069373
    },
    {
        "content": "<p>Looking into moving  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum_range_sub_sum_range\">docs#sum_range_sub_sum_range</a> to <code>src/algebra/big_operator/basic.lean</code>,  I think we will want to make this <code>to_additive</code>. In the course of trying to prove this, I found that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_eq_of_eq_add'\">docs#sub_eq_of_eq_add'</a> is proved as additive and doesn't have a multiplicative counterpart. In fact, I don't know why the <code>add_group</code> section of <code>src/algebra/group/basic.lean</code> exists at all. Is there a reason why all of the lemmas in that section aren't proved as multiplicative statements with <code>to_additive</code>?</p>",
        "id": 249643484,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629145905
    },
    {
        "content": "<p>That goes for the <code>add_comm_group</code> section as well.</p>",
        "id": 249643699,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629145991
    },
    {
        "content": "<p>I think the history is just that <code>group</code> didn't use to have a <code>div</code>. Now that it does, I think it's totally reasonable to generalize all those lemmas</p>",
        "id": 249645356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629146820
    },
    {
        "content": "<p>It's also totally reasonable to just generalize the one you want to use right now</p>",
        "id": 249645385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629146838
    },
    {
        "content": "<p>Makes sense to me</p>",
        "id": 249645761,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629147042
    },
    {
        "content": "<p>welp, it is that way because I was opposed to <code>div</code> on group because it's ambiguous and not standard notation</p>",
        "id": 249645829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629147088
    },
    {
        "content": "<p>What's the ambiguity?</p>",
        "id": 249645933,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629147130
    },
    {
        "content": "<p>it could be either left or right division</p>",
        "id": 249645965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629147159
    },
    {
        "content": "<p><code>a * b^-1</code> or <code>b^-1 * a</code></p>",
        "id": 249646005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629147181
    },
    {
        "content": "<p>I see</p>",
        "id": 249646026,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629147196
    },
    {
        "content": "<p>Sure, but given the instance exists it seems silly to not have the lemmas exist</p>",
        "id": 249646182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629147286
    },
    {
        "content": "<p>I'm just lamenting that I wasn't in the room when that instance got added</p>",
        "id": 249647163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629147746
    },
    {
        "content": "<p>I blame MM0.</p>",
        "id": 249647321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629147816
    },
    {
        "content": "<p>I'm guessing it happened along with the group_with_zero stuff</p>",
        "id": 249647462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629147866
    },
    {
        "content": "<p>I think it was actually the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/div_inv_monoid\">docs#div_inv_monoid</a> refactor that is responsible</p>",
        "id": 249647484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629147876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238667/near/249645385\">said</a>:</p>\n<blockquote>\n<p>It's also totally reasonable to just generalize the one you want to use right now</p>\n</blockquote>\n<p>There are a lot of interdependencies in the lemmas in this file. It seems more prudent to generalize them all at once.</p>",
        "id": 249647499,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1629147885
    },
    {
        "content": "<p>Presumably you're happy with <code>div</code> on <code>comm_group</code> just not <code>group</code>?</p>",
        "id": 249647507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629147891
    },
    {
        "content": "<p>since we do have a division on division rings even though that's not commutative either</p>",
        "id": 249647513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629147896
    },
    {
        "content": "<p>it's probably not worth hewing to the mathematical convention here if it simplifies things</p>",
        "id": 249647690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629147969
    },
    {
        "content": "<p>If you have division on division rings but not groups then you  end up with unpleasantess when working with <code>units K</code> when you can divide in <code>K</code> but not <code>units K</code>.</p>",
        "id": 249647761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629148024
    },
    {
        "content": "<p>I think it's not so surprising that <code>a/b</code> means <code>a*b⁻¹</code> if anything, because the writing order is the same.</p>",
        "id": 249647774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629148034
    },
    {
        "content": "<p>Of course it doesn't mean I would write such a thing on paper.</p>",
        "id": 249647804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629148057
    },
    {
        "content": "<p>in quasigroups they have <code>b\\a</code> and <code>a/b</code> for this</p>",
        "id": 249647927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629148117
    },
    {
        "content": "<p>but that syntax is just ridiculous</p>",
        "id": 249647939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629148127
    },
    {
        "content": "<p>Obviously we should add a class <code>has_op_div</code> and give <code>div_inv_monoid</code> it with <code>x /ᵒᵖ y = y⁻¹ * x</code></p>",
        "id": 249647972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1629148145
    }
]