[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> do we already know, for example, that <code>structured_arrow</code> has colimits under certain conditions? All I meant in my comment in this PR is that this assertion (and the dual for costructured arrows) was missing, but it might already be somewhere else...</p>",
        "id": 239589524,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621516789
    },
    {
        "content": "<p>We don't - originally I didn't think that particular machinery would give results like you mention, but I realised that it actually does: We could use this to show the structured arrow category has connected colimits and the forgetful functor creates them. Non-connected colimits (eg coproducts) don't follow from this machinery though I think</p>",
        "id": 239597572,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1621519770
    },
    {
        "content": "<p>Why connected? These categories are just special cases of comma categories, so the work you did there should specialize</p>",
        "id": 239597828,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621519854
    },
    {
        "content": "<p>The forgetful functor from the under category doesn't create colimits in general, only the connected ones.</p>",
        "id": 239607202,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1621523072
    },
    {
        "content": "<p>Concretely, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">has_colimits_of_shape</span>\n  <span class=\"o\">[</span><span class=\"n\">has_colimits_of_shape</span> <span class=\"n\">J</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_colimits_of_shape</span> <span class=\"n\">J</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preserves_colimits_of_shape</span> <span class=\"n\">J</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_colimits_of_shape</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">comma</span> <span class=\"n\">L</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n</code></pre></div>\n<p>in the general case, and when specialising this to structured arrow <code>structured_arrow (S : D) (T : C тед D) := comma (functor.from_punit S) T</code> we take the functor <code>L</code> to be <code>functor.from_punit _</code>, which only preserves connected colimits not general ones</p>",
        "id": 239607639,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1621523233
    },
    {
        "content": "<p>Okay, but we can just assume that the functor preserves colimits, and worry about the connectedness condition later</p>",
        "id": 239608028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621523342
    },
    {
        "content": "<p>Could you write down for me the result you're expecting to see? I don't think I follow what you mean</p>",
        "id": 239608983,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1621523687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I understand now. The point I forgot was that we only have the natural <code>(co)structured_arrow.proj</code> projecting onto only one of the components of the comma construction, and the other projection is onto the <code>discrete punit</code>. So indeed the condition for these unit projections to be compatible with (co)limits would boil down to some connectedness condition. And I'm fine with this being postponed to a later PR anyway, so <a href=\"https://github.com/leanprover-community/mathlib/issues/7535\">#7535</a> is good to go as far as I'm concerned.</p>",
        "id": 239615622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621526227
    }
]