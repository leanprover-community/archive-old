[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I wonder whether we should make a wrapper type for sequences...</p>",
        "id": 177724972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570634819
    },
    {
        "content": "<p>I can Imagine that there will be lots of useful projections</p>",
        "id": 177725009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570634845
    },
    {
        "content": "<p>IIRC there is <code>data.stream</code> which is exactly that.  I'm not sure where it would come in handy though.</p>",
        "id": 177725484,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1570635080
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">has_countable_basis</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">countable</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"err\">⨅</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">principal</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>is slightly misleading since <code>s</code> in this definition is not necessarily a basis of <code>f</code>, but only a subbasis</p>",
        "id": 177725705,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570635187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I can imagine:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">sequence</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">converges</span>\n</pre></div>\n\n\n<p>and things like that, which just seem to read nice</p>",
        "id": 177725872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570635271
    },
    {
        "content": "<p>Or <code>x.filter</code> for the associated filter</p>",
        "id": 177725947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570635320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The detail is noted in the docstring; the definition is equivalent to the usual one though.  AFAICT we currently don't have much on subbases and bases for filters.  For now, this is probably the simpler definition.</p>",
        "id": 177729774,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1570637529
    },
    {
        "content": "<p>Damned, I've been caught not reading docstrings.</p>",
        "id": 177729839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570637582
    },
    {
        "content": "<p>There is a lot of things using filter bases waiting to be PRed from the prefectoid spaces project.</p>",
        "id": 177729887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570637614
    }
]