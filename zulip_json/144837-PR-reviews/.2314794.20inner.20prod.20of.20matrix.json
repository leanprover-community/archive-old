[
    {
        "content": "<p>I'd like some opinions on how I should implement the inner product induced by a matrix, which I attempted in this pull request (<a href=\"https://github.com/leanprover-community/mathlib/pull/14794\">#14794</a>). The problem is that I need both <code>matrix.pos_def</code> and <code>inner_product_space</code> in the same definition. And <code>matrix.pos_def</code> requires <code>ordered_semiring</code>, whereas <code>inner_product_space</code> requires <code>is_R_or_C</code>. But if I combine these two, I get conflicting instances of <code>semiring</code>.</p>\n<p>The partial order instance on <code>is_R_or_C</code> I proposed in the PR was clearly a bad idea because it leads to a second order instance on the reals.</p>\n<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>  proposed to redefine <code>is_R_or_C</code> to extend <code>star_ordered_ring</code> rather than <code>star_ring</code> alone. That would work, but it would mean that we need to register an order for the complex numbers, which has been very controversial in the past.</p>\n<p>Another option would be to restrict the <code>pos_def</code> definition to only <code>is_R_or_C</code>. That would make everything easier, although less general of course.</p>\n<p>Any other ideas or opinions?</p>",
        "id": 287419301,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1656140702
    },
    {
        "content": "<p>Didn't we end up defining an order on the complexes anyway? Otherwise it sounds like the intersection is just \\R, no?</p>",
        "id": 287419861,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1656141473
    },
    {
        "content": "<p>Right, there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.partial_order\">docs#complex.partial_order</a>, but the instance is only registered in a locale. If we make <code>is_R_or_C</code> ordered, then the instance would become global.</p>",
        "id": 287420755,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1656142457
    },
    {
        "content": "<p>Ah, I forgot it was localised.</p>",
        "id": 287420798,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1656142566
    },
    {
        "content": "<p>I would just like to add that it will probably get awkward at some point if the complex numbers are not a star ordered ring by default, so I think it's a good idea to register this instance globally.</p>",
        "id": 287438677,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1656168129
    },
    {
        "content": "<p>Sorry for only noticing this PR only now, but I feel like it would be better if the matrix construction goes through first defining the sesquilinear form and using all the properties there and then we need a general construction for constructing an inner product space from a sesquilinear form.</p>",
        "id": 289852889,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658014073
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.to_bilin'\">docs#matrix.to_bilin'</a> appropriate here, or do we need another def to include the star operation?</p>",
        "id": 289868902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658041322
    },
    {
        "content": "<p>I am afraid we need the version for <code>M₁ →ₛₗ[I₁] M₂ →ₛₗ[I₂] R</code>, which is what I am avoiding to do for some months now..</p>",
        "id": 289875600,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658051521
    },
    {
        "content": "<p>otherwise you only get it for real vector spaces</p>",
        "id": 289875659,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1658051573
    },
    {
        "content": "<p><del>Is it as simple as <code>M.to_bilin'.comp_left star_linear_equiv</code> or similar?</del></p>",
        "id": 289877156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658053982
    }
]