[
    {
        "content": "<p>here I provided a version of linear independence that might be more useful (to mathematicians at least):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">linear_independent_iff&#39;</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">R</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">v</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 178820002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571802004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> what do you think?</p>",
        "id": 178820010,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571802046
    },
    {
        "content": "<p>That definitely belongs in mathlib! :-)</p>",
        "id": 178822826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571806875
    },
    {
        "content": "<p>Oh wow! A PR by Kenny!</p>",
        "id": 178824197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571809282
    },
    {
        "content": "<p>And yes, that <code>iff'</code> looks really useful</p>",
        "id": 178824272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571809391
    },
    {
        "content": "<p>Nicely done proof. It never even occurred to me you only needed a monoid in this argument, rather than a group.</p>",
        "id": 178826118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571812217
    },
    {
        "content": "<p>you actually only need an integral domain</p>",
        "id": 178826285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571812470
    },
    {
        "content": "<p>proof: I changed <code>field</code> to <code>integral_domain</code> and Lean didn't complain</p>",
        "id": 178826290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571812484
    },
    {
        "content": "<p>I cannot remove commutativity yet</p>",
        "id": 178826381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571812575
    },
    {
        "content": "<p>all sources I consulted used fields</p>",
        "id": 178826542,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571812804
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/0CKK\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/0CKK\">https://stacks.math.columbia.edu/tag/0CKK</a></p>",
        "id": 178826658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571812964
    },
    {
        "content": "<p>I'll note that the proof of Lemma 9.13.2 is wrong (or maybe I misinterpreted it)</p>",
        "id": 178826662,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571812979
    },
    {
        "content": "<p>my proposed proof: if a1 ... an are such that sum ai^e = 0 for every e, then (x-a1)(x-a2)...(x-an) = x^n, so ai = 0</p>",
        "id": 178826682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> am I right?</p>",
        "id": 178826779,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813125
    },
    {
        "content": "<p>Right with what?</p>",
        "id": 178826789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813145
    },
    {
        "content": "<p>that the proof of Lemma 9.13.2 is wrong</p>",
        "id": 178826792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813158
    },
    {
        "content": "<p>I don't see the <code>integral_domain</code> on the PR page yet</p>",
        "id": 178826794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813160
    },
    {
        "content": "<p>and my new proof didn't even use the fact that a1 ... an are pairwise distinct</p>",
        "id": 178826859,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813223
    },
    {
        "content": "<p>What if <code>n = 1</code> and <code>a_1 = 0</code>?</p>",
        "id": 178826872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813253
    },
    {
        "content": "<p>then 0^0 = 1</p>",
        "id": 178826874,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813261
    },
    {
        "content": "<p>Aah, ok</p>",
        "id": 178826878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813270
    },
    {
        "content": "<p>this is the only interpretation that makes the theorem right even</p>",
        "id": 178826880,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813272
    },
    {
        "content": "<p>If they're not pairwise distinct then what's stopping n=p and all the a_i being the same and characteristic p?</p>",
        "id": 178826881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813274
    },
    {
        "content": "<p>oh no I was implicitly assuming char 0 for my Newton shenanigans</p>",
        "id": 178826923,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813295
    },
    {
        "content": "<p>I agree that I don't understand the stacks proof</p>",
        "id": 178826925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813304
    },
    {
        "content": "<p>I also agree it's easy in char 0</p>",
        "id": 178826958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Why don't you formalise the new proof (-;</p>",
        "id": 178827003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813415
    },
    {
        "content": "<blockquote>\n<p>I don't see the <code>integral_domain</code> on the PR page yet</p>\n</blockquote>\n<p>done</p>",
        "id": 178827006,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813425
    },
    {
        "content": "<p>I also agree that field can be weakened to ID because every ID is a subring of a field.</p>",
        "id": 178827008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813431
    },
    {
        "content": "<p>do you have a counter-example with division rings?</p>",
        "id": 178827018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813465
    },
    {
        "content": "<p>and commutative rings?</p>",
        "id": 178827021,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813475
    },
    {
        "content": "<p>I guess I need to wake up. What's wrong with the stacks proof?</p>",
        "id": 178827023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813480
    },
    {
        "content": "<p>no lambdas</p>",
        "id": 178827029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813488
    },
    {
        "content": "<p>can you fix it?</p>",
        "id": 178827042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813513
    },
    {
        "content": "<p>All lambdas = 1?</p>",
        "id": 178827090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813531
    },
    {
        "content": "<p>that's not what linear indep says</p>",
        "id": 178827092,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813543
    },
    {
        "content": "<p>wait I need to wake up</p>",
        "id": 178827107,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813568
    },
    {
        "content": "<p>wait I'm see-sawing here. All lambdas =1 :D</p>",
        "id": 178827111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813578
    },
    {
        "content": "<p>I messed up with the logic :P I thought it needs to be all lambdas</p>",
        "id": 178827124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813594
    },
    {
        "content": "<p>Anyways, the lemma is going to be false for general comm rings</p>",
        "id": 178827132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813621
    },
    {
        "content": "<p>The Dedekind lin.indep. lemma</p>",
        "id": 178827182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813647
    },
    {
        "content": "<p>do you have a counter example?</p>",
        "id": 178827186,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813658
    },
    {
        "content": "<p>Take Z/4Z, and lamda_i = 2, and a character that maps things to powers of 2</p>",
        "id": 178827189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813670
    },
    {
        "content": "<p>ok cool</p>",
        "id": 178827197,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813686
    },
    {
        "content": "<p>now for division rings :P</p>",
        "id": 178827198,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813690
    },
    {
        "content": "<p>Or maybe non-comm integral domains?</p>",
        "id": 178827205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813705
    },
    {
        "content": "<p>sure</p>",
        "id": 178827213,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813713
    },
    {
        "content": "<p>do they exist?</p>",
        "id": 178827214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813714
    },
    {
        "content": "<p>right, they're called domains :P</p>",
        "id": 178827217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813731
    },
    {
        "content": "<p>They don't have a name. So no.</p>",
        "id": 178827218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813732
    },
    {
        "content": "<p>I was brought up with <code>domain</code> = <code>commutative domain</code></p>",
        "id": 178827231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571813752
    },
    {
        "content": "<p>I was brought up with ring = commutative ring</p>",
        "id": 178827282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813778
    },
    {
        "content": "<p>at least not in Lean</p>",
        "id": 178827285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813779
    },
    {
        "content": "<p>I'm staring at the quaternions</p>",
        "id": 178827321,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813856
    },
    {
        "content": "<p>don't do that</p>",
        "id": 178827323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813864
    },
    {
        "content": "<p>I'm 50% sure there are other reasons that make it true there</p>",
        "id": 178827324,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571813866
    },
    {
        "content": "<p>Try some universal counterexample and see what happens</p>",
        "id": 178827394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813924
    },
    {
        "content": "<p>i.e. just take some random characters into some free non-comm ring and then quotient out by all the relations</p>",
        "id": 178827417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813950
    },
    {
        "content": "<p>forcing all the sums to be 0</p>",
        "id": 178827422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813957
    },
    {
        "content": "<p>and you have to hope that the a_i remain distinct</p>",
        "id": 178827430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813971
    },
    {
        "content": "<p>or get a feeling as to why this isn't happening</p>",
        "id": 178827432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571813983
    },
    {
        "content": "<p>that won't give us a counterexample with H</p>",
        "id": 178827443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571814002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> can you include lemma 13.2 in your PR?</p>",
        "id": 178827483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571814007
    },
    {
        "content": "<p>Oh do you actually care specifically about H?</p>",
        "id": 178827490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571814020
    },
    {
        "content": "<p>It's a little ingredient in Galois theory</p>",
        "id": 178827492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571814022
    },
    {
        "content": "<p>I don't think I ever used that lemma in Galois theory; how?</p>",
        "id": 178827497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571814037
    },
    {
        "content": "<p>Last time I thought about it, I remember using independence of characters</p>",
        "id": 178827508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571814061
    },
    {
        "content": "<blockquote>\n<p>Oh do you actually care specifically about H?</p>\n</blockquote>\n<p>or finite central simple division rings over fields</p>",
        "id": 178827510,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571814062
    },
    {
        "content": "<p>yeah but I don't remember using 13.2</p>",
        "id": 178827529,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571814081
    },
    {
        "content": "<p>Yeah, actually 13.3 and 13.4 are more useful</p>",
        "id": 178827588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571814129
    },
    {
        "content": "<p>But they should maybe not go in this PR</p>",
        "id": 178827591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571814137
    },
    {
        "content": "<p>9.13.3 for Hilbert 90 and 9.14.4 to prove adeles of K = adeles of Q tensor K ;-)</p>",
        "id": 178827607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571814178
    },
    {
        "content": "<p>Now I need to pull myself away from Lean, and do some other stuff...</p>",
        "id": 178827613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571814193
    },
    {
        "content": "<p>ha yes I'd better get back to this grant proposal review ;-)</p>",
        "id": 178827620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571814210
    },
    {
        "content": "<p>(j-k) (1,i,-1,-i) + (k-i) (1,j,-1,-j) + (i-j) (1,k,-1,-k) = 0</p>",
        "id": 178828023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571814728
    },
    {
        "content": "<p>conjecture: if a division ring satisfies Dedekind's linear independence of characters, then it is a field.</p>",
        "id": 178828114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571814904
    },
    {
        "content": "<p>Ha ha</p>",
        "id": 178829167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571816163
    },
    {
        "content": "<p>Sounds like a respectable MO question</p>",
        "id": 178829181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571816173
    },
    {
        "content": "<p>Better have a formalisation ready...</p>",
        "id": 178829189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571816193
    },
    {
        "content": "<p>Then you can post an answer by Lean after a day (-;</p>",
        "id": 178829197,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571816208
    },
    {
        "content": "<p>Although Swinnerton-Dyer would have criticised your use of the word \"conjecture\" there</p>",
        "id": 178829211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571816226
    },
    {
        "content": "<p>He once bemoaned to me the fact that nowadays anyone can come up with a question and call it a conjecture</p>",
        "id": 178829224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571816261
    },
    {
        "content": "<p>Whereas in the old days, conjectures were things which were undoubtedly true but which we just hadn't proved yet</p>",
        "id": 178829269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571816295
    },
    {
        "content": "<p>It is not a coincidence that shortly after this conversation I released a paper called \"questions about slopes of modular forms\"</p>",
        "id": 178829298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571816341
    },
    {
        "content": "<p>Wait, (j-k)i+(k-i)j+(i-j)k isn't 0</p>",
        "id": 178829530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571816588
    },
    {
        "content": "<p>oh</p>",
        "id": 178829632,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571816679
    },
    {
        "content": "<p>it was supposed be 1, (k-i)/(j-k), (i-j)/(j-k)</p>",
        "id": 178829679,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571816738
    },
    {
        "content": "<p>but oh well that's right division for you</p>",
        "id": 178829692,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571816750
    },
    {
        "content": "<p>I mean you have 3 vectors in H^2</p>",
        "id": 178829747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571816793
    },
    {
        "content": "<blockquote>\n<p>Although Swinnerton-Dyer would have criticised your use of the word \"conjecture\" there</p>\n</blockquote>\n<p>oh no I thought BSD were 3 persons</p>",
        "id": 178829787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571816848
    },
    {
        "content": "<p>You should pay more attention to the length of the dashes and hyphens</p>",
        "id": 178830029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571817032
    },
    {
        "content": "<p>It is Birch–Swinnerton-Dyer</p>",
        "id": 178830040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571817048
    },
    {
        "content": "<p>Or <code>Birch--Swinnerton-Dyer</code> in TeX</p>",
        "id": 178830061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571817071
    },
    {
        "content": "<p>1+a+b=0<br>\ni+aj+bk=0<br>\na+b=-1<br>\naj+bk=-i<br>\naj+bj=-j<br>\nb(k-j)=j-i<br>\nb=(j-i)/(k-j)<br>\na=-1-b=(i-k)/(k-j)</p>",
        "id": 178830176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571817213
    },
    {
        "content": "<p>Does Lean even know the quaternions? I don't think so.</p>",
        "id": 178830365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571817372
    },
    {
        "content": "<p>(k-j)^2 = -2, so 1/(k-j) = (j-k)/2<br>\nb=(j-i)(j-k)/2 = -1-i-k-j<br>\na = -1-b = i+j+k</p>",
        "id": 178830372,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571817377
    },
    {
        "content": "<p>so 1 (1,i,-1,-i) + (i+j+k) (1,j,-1,-j) + (-1-i-j-k) (1,k,-1,-k) = 0</p>",
        "id": 178830392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571817398
    },
    {
        "content": "<p>how to find a symmetric solution</p>",
        "id": 178830426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571817428
    },
    {
        "content": "<p>There might not be one I guess</p>",
        "id": 178830749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571817657
    },
    {
        "content": "<p>There's no nonzero symmetric solution in the reals to x+y+z=0</p>",
        "id": 178830791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571817691
    },
    {
        "content": "<p>bummer</p>",
        "id": 178830883,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571817738
    },
    {
        "content": "<p>I'm still not sure your algebra's right but I agree that there's a solution. It's 8 linear equations in 12 real variables</p>",
        "id": 178830949,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571817814
    },
    {
        "content": "<p>well (-1,-i) = (1,i) so it's really irrelevant</p>",
        "id": 178831024,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571817861
    },
    {
        "content": "<p>you just need to solve a(1,i) + b(1,j) + c(1,k) = 0</p>",
        "id": 178831033,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571817876
    },
    {
        "content": "<p>That's why only 8 equations</p>",
        "id": 178831038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571817884
    },
    {
        "content": "<p>oh</p>",
        "id": 178831046,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571817895
    },
    {
        "content": "<p>which (online/offline) calculator knows about quaternions? I can't get WA to work</p>",
        "id": 178831079,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571817925
    },
    {
        "content": "<p>What's wrong with my existence proof? ;-)</p>",
        "id": 178831105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571817953
    },
    {
        "content": "<p>Who cares what the answer is</p>",
        "id": 178831112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571817958
    },
    {
        "content": "<p>That's an exercise for the reader</p>",
        "id": 178831218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571818036
    },
    {
        "content": "<p>There will be a symmetry in the space of all solutions but perhaps not in any one individual solution</p>",
        "id": 178831311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571818106
    },
    {
        "content": "<p>what does Aut(H/R) look like?</p>",
        "id": 178831341,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571818160
    },
    {
        "content": "<p>there's somehow an element of order 3</p>",
        "id": 178831348,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571818168
    },
    {
        "content": "<blockquote>\n<p>what does Aut(H/R) look like?</p>\n</blockquote>\n<p>Isn't that SO_3?</p>",
        "id": 178831752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571818512
    },
    {
        "content": "<p>That's what the phycisists use all the time, right?</p>",
        "id": 178831759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571818524
    },
    {
        "content": "<p>so Galois theory fails badly :P</p>",
        "id": 178857466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571840078
    },
    {
        "content": "<blockquote>\n<p>I was brought up with ring = commutative ring</p>\n</blockquote>\n<p>You can see why now.</p>",
        "id": 178864778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571844257
    },
    {
        "content": "<p>Oh no this can be generalized to vector spaces using the same proof</p>",
        "id": 178926166,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571900638
    },
    {
        "content": "<p>per K. Conrad</p>",
        "id": 178926193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571900643
    },
    {
        "content": "<p>Lemma 2.12 of <a href=\"https://kconrad.math.uconn.edu/blurbs/galoistheory/galoisdescent.pdf\" target=\"_blank\" title=\"https://kconrad.math.uconn.edu/blurbs/galoistheory/galoisdescent.pdf\">https://kconrad.math.uconn.edu/blurbs/galoistheory/galoisdescent.pdf</a></p>",
        "id": 178926208,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571900655
    },
    {
        "content": "<p>non-abelian Hilbert 90 is true -- H^1(Gal(L/K),GL_n(L))=1</p>",
        "id": 178950165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571922985
    },
    {
        "content": "<p>why?</p>",
        "id": 178952760,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571924762
    },
    {
        "content": "<p>Because every L-semilinear action on a finite-dimensional L-vector space comes from a K-linear action on a subspace</p>",
        "id": 178963278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571930584
    },
    {
        "content": "<p>oh wow so Galois descent is just saying that H^1(G,GL(L,n)) = 0?</p>",
        "id": 178968350,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571933398
    },
    {
        "content": "<p>so let's say we have a crossed homomorphism f: G -&gt; GL(L,n); we need to find A in GL(L,n) such that f(g)(v) = g(A(A^-1 v))? but that's just saying f(g)(v)=g(v)? I'm slightly confused</p>",
        "id": 178968646,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571933605
    },
    {
        "content": "<p>I'm not sure how G acts on GL(L,n)</p>",
        "id": 178968716,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571933643
    },
    {
        "content": "<p>It acts on the entries of the matrices. I think that's the action you want</p>",
        "id": 178968831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571933743
    },
    {
        "content": "<p>so g(φ)(v) = g(φ(v))</p>",
        "id": 178969108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571933917
    },
    {
        "content": "<p>and (g(φ) φ^-1)(v) = g(v)?</p>",
        "id": 178969120,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571933933
    },
    {
        "content": "<blockquote>\n<p>so g(φ)(v) = g(φ(v))</p>\n</blockquote>\n<p>I don't think this is right. g(φ(v)) = g(φ)(g(v))</p>",
        "id": 178971410,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571935385
    },
    {
        "content": "<p>Unless I'm confused, which is very possible</p>",
        "id": 178971482,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571935429
    },
    {
        "content": "<p>You're writing G for Gal(L/K) right?</p>",
        "id": 178971549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571935447
    },
    {
        "content": "<p>yes</p>",
        "id": 178973818,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571936847
    },
    {
        "content": "<p>You want f(g)=g(A)/A or whatever your convention is in the nonabelian case</p>",
        "id": 178974522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571937285
    },
    {
        "content": "<p>A is a matrix with coefficients in L and Galois is acting on the matrix entries</p>",
        "id": 178974540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571937300
    },
    {
        "content": "<p>and one way of constructing it is noticing that some explicit formula for A works...as long as it gives an invertible matrix</p>",
        "id": 178974639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571937351
    },
    {
        "content": "<p>ok so Galois descent gives us an L-basis {e1 ... en} of L^n where the action of G is trivial, so f(g)(sum vi ei) = sum g(vi) ei, so f(g)(φ(v)) = φ(g(v)), so f(g)(v) = φ(g(φ^-1(v))) and this φ or φ^-1 should be what we want?</p>",
        "id": 178975731,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571937933
    },
    {
        "content": "<p>Anyway, should I include 2.12?</p>",
        "id": 178979196,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571940035
    },
    {
        "content": "<p>Which 2.12?</p>",
        "id": 178983451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571942342
    },
    {
        "content": "<p>Lemma 2.12 of <a href=\"https://kconrad.math.uconn.edu/blurbs/galoistheory/galoisdescent.pdf\" target=\"_blank\" title=\"https://kconrad.math.uconn.edu/blurbs/galoistheory/galoisdescent.pdf\">https://kconrad.math.uconn.edu/blurbs/galoistheory/galoisdescent.pdf</a></p>",
        "id": 179018410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571972973
    },
    {
        "content": "<p>monoid homomorphisms G-&gt;L are linearly-V independent given any vector space V over L</p>",
        "id": 179018455,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571973018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Sure, why not. The proof is a 1-liner <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> <br>\nMore seriously. If you it is in fact true that it only requires 7 tiny modifications of the current proof, I think you should do it. However, there is a little issue. Because it's not going to be true for arbitrary modules over an ID. So you can't reuse proofs. It will be true for free modules over an ID (maybe projective, or whatever), but I don't think mathlib knows what that means. So you might end up with two longish proofs that are really very similar.</p>",
        "id": 179020192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571976344
    },
    {
        "content": "<p>then maybe I should state it as separate theorems</p>",
        "id": 179020238,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571976383
    },
    {
        "content": "<p>it works over torsion-free modules</p>",
        "id": 179020257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571976425
    },
    {
        "content": "<p>the crucial step is av = 0 =&gt; a = 0 or v = 0</p>",
        "id": 179020267,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571976445
    },
    {
        "content": "<p>which reminds me that we should define torsion in mathlib and prove that it's left exact</p>",
        "id": 179020273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571976482
    },
    {
        "content": "<p>which reminds me that group cohomology hasn't been done</p>",
        "id": 179020328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571976547
    },
    {
        "content": "<p>hey I can do a lot if I do a PhD in mathlib :P</p>",
        "id": 179020336,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571976567
    },
    {
        "content": "<p>So the correct thing would be: define torsion-free. prove the theorem for such modules. state some nice corollaries.<br>\nBut that's a whole bunch of work. So you can also leave it like this, and add a remark/todo that says \"once we have torsion-free modules, generalize to those\".</p>",
        "id": 179020541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571976945
    },
    {
        "content": "<p>yeah let's just leave it there</p>",
        "id": 179020642,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571977117
    },
    {
        "content": "<blockquote>\n<p>which reminds me that group cohomology hasn't been done</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"243895\">@Shenyang Wu</span> 's MSc project is on group cohomology, but my experience with my MSc projects is that they don't end up in mathlib unless you make it clear early on that this is part of the deal.</p>",
        "id": 179027334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571987962
    },
    {
        "content": "<blockquote>\n<p>hey I can do a lot if I do a PhD in mathlib :P</p>\n</blockquote>\n<p>I feel like I could supervise 10 PhD students right now. I'm serious. It's very different to maths, where I felt that if I took on more than around 1 student per year then I would have difficulty coming up with appropriate projects for them.</p>",
        "id": 179027396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571988012
    },
    {
        "content": "<p>I was having a look at this proof, in particular thinking about how to make term mode proofs more comprehensible to mortals like me.</p>",
        "id": 179120209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572086103
    },
    {
        "content": "<p>This is a pretty fun theorem, not just a tedious lemma, and so I think it's worth a little thought on what we'd like theorems like this to look like.</p>",
        "id": 179120220,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572086133
    },
    {
        "content": "<p>(I don't at all mean to hold this PR up --- I'm happy if we hit merge right now.)</p>",
        "id": 179120221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572086146
    },
    {
        "content": "<p>One place I get stuck reading a proof like this is that I can't inspect the types of variables. For example, in the line </p>\n<div class=\"codehilite\"><pre><span></span>(λ s, finset.induction_on s (λ g hg i, false.elim) $ λ a s has ih g hg,\n</pre></div>\n\n\n<p>how do I work out what <code>a</code>, <code>s</code>, <code>has</code>, <code>ih</code>, <code>g</code>, and <code>hg</code> are? I can guess from the names, or do a little work to deduce them. But I don't know how to ask the editor for much help. Hovering the mouse over <code>hg</code> just gives me the extremely unhelpful tooltip for the <code>exact</code> tactic.</p>",
        "id": 179120272,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572086275
    },
    {
        "content": "<p>If we were in tactic mode, of course, I'd have no trouble here: I'd insert the cursor between tactic invocations, and inspect the tactic state.</p>",
        "id": 179120320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572086320
    },
    {
        "content": "<p>(I was actually thinking about trying to \"document\" this proof, without changing Kenny's code at all, just inserting some comments, but found it pretty painful because of this issue.)</p>",
        "id": 179120329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572086351
    },
    {
        "content": "<p>In fact, my efforts to turn the proof into a tactic style proof have so far been failing. :-(</p>",
        "id": 179120438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572086609
    },
    {
        "content": "<p>I thought since it's just a big chain of <code>have X : Y, from Z, ..., P</code>, it should have been easy, but I get weird errors <code>function expected at a, term has type i \\mem s</code>...</p>",
        "id": 179120479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572086672
    },
    {
        "content": "<p>What happens if you replace stuff by <code>_</code>s?</p>",
        "id": 179120551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1572086817
    },
    {
        "content": "<p>I guess that works just fine. :-)</p>",
        "id": 179121025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572087684
    },
    {
        "content": "<p>Somehow I'm averse to an inspection technique that involves \"delete a big chunk of Kenny's nice proof\". :-)</p>",
        "id": 179121033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572087712
    },
    {
        "content": "<p>The underscore method also has the significant failing that Lean is often too clever, and can work out the value of the underscore by itself, so doesn't tell you anything.</p>",
        "id": 179121226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572088005
    },
    {
        "content": "<p>(Yes, I know this means that Lean is smarter than I am.)</p>",
        "id": 179121227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572088014
    },
    {
        "content": "<p>Putting <code>{! !}</code> around an expression and using the \"Infer type\" hole command often works better. It should be possible to set up some keyboard shortcuts to make this easier...</p>",
        "id": 179121447,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572088395
    },
    {
        "content": "<p>What do people think of this as a patch to Kenny's proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Dedekind&#39;s linear independence of characters -/</span>\n<span class=\"c1\">-- See, for example, Keith Conrad&#39;s note https://kconrad.math.uconn.edu/blurbs/galoistheory/linearchar.pdf</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">linear_independent_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">linear_independent</span> <span class=\"bp\">_</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">dec_eq</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">L</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n   <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">L</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">distrib_mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_mul_action</span> <span class=\"n\">L</span> <span class=\"n\">L</span><span class=\"bp\">;</span>\n<span class=\"c1\">-- We prove linear independence by showing that only the trivial linear combination vanishes.</span>\n<span class=\"n\">exact</span> <span class=\"n\">linear_independent_iff&#39;</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"c1\">-- To do this, we use `finset` induction,</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">hg</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">ih</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n<span class=\"c1\">-- Here</span>\n<span class=\"c1\">-- * `a` is a new character we will insert into the `finset` of characters `s`,</span>\n<span class=\"c1\">-- * `ih` is the fact that only the trivial linear combination of characters in `s` is zero</span>\n<span class=\"c1\">-- * `hg` is the fact that `g` are the coefficients of a linear combination summing to zero</span>\n<span class=\"c1\">-- and it remains to prove that `g` vanishes on `insert a s`.</span>\n\n<span class=\"c1\">-- We now make the key calculation:</span>\n<span class=\"c1\">-- For any character `i` in the original `finset`, we have `g i • i = g i • a` as functions on the monoid `G`.</span>\n<span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">his</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- We prove these expressions are equal by showing</span>\n  <span class=\"c1\">-- the differences of their values on each monoid element `x` is zero</span>\n  <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"err\">$</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">j</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"k\">calc</span>\n    <span class=\"c1\">-- After that, it&#39;s just a chase scene.</span>\n          <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"n\">y</span>\n        <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">finset_sum_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">sub_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_sub_distrib</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n          <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_sub_add_left_eq_sub</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span> <span class=\"n\">has</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span> <span class=\"n\">has</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n      <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">has_sub</span><span class=\"bp\">.</span><span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]))</span>\n        <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">])</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n          <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"n\">y</span> <span class=\"o\">:</span>\n      <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">finset_sum_apply</span><span class=\"o\">,</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">finset_sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mul_sum</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hg</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">])</span>\n    <span class=\"n\">i</span>\n    <span class=\"n\">his</span><span class=\"o\">,</span>\n<span class=\"c1\">-- On the other hand, since `a` is not already in `s`, for any character `i ∈ s`</span>\n<span class=\"c1\">-- there is some element of the monoid on which it differs from `a`.</span>\n<span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">his</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hia</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">has</span> <span class=\"err\">$</span> <span class=\"n\">hia</span> <span class=\"bp\">▸</span> <span class=\"n\">his</span><span class=\"o\">,</span>\n<span class=\"c1\">-- From these two facts we deduce that `g` actually vanishes on `s`,</span>\n<span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">his</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h2</span> <span class=\"n\">i</span> <span class=\"n\">his</span> <span class=\"k\">in</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">i</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">i</span> <span class=\"n\">his</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">resolve_right</span> <span class=\"o\">(</span><span class=\"n\">mul_eq_zero</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub_ne_zero_of_ne</span> <span class=\"n\">hy</span><span class=\"o\">),</span>\n<span class=\"c1\">-- And so, using the fact that the linear combination over `s` and over `insert a s` both vanish,</span>\n<span class=\"c1\">-- we deduce that `g a = 0`.</span>\n<span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"k\">calc</span>\n  <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_one</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">map_one</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_single</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">his</span> <span class=\"n\">hia</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert</span> <span class=\"n\">at</span> <span class=\"n\">his</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">his</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"n\">hia</span><span class=\"o\">),</span> <span class=\"n\">zero_smul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">haas</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">haas</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_insert_self</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n    <span class=\"kn\">end</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hg</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"c1\">-- Now we&#39;re done; the last two facts together imply that `g` vanishes on every element of `insert a s`.</span>\n<span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">forall_mem_insert</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>(This is identical to Kenny's proof, except I added all the comments, and in two places replaced a <code>λ x</code> with a <code>λ x : G</code> to make sure the type was clear.)</p>",
        "id": 179121495,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572088467
    },
    {
        "content": "<p>Is this actually better?</p>",
        "id": 179121503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572088483
    },
    {
        "content": "<p>I probably should replace the flippant comment about the actual calculation, but I also need to think about the flight I have to catch shortly. :-)</p>",
        "id": 179121510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572088506
    },
    {
        "content": "<p>I'd love it if more proofs in mathlib were documented this way. PR it!</p>",
        "id": 179121562,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572088567
    },
    {
        "content": "<p>This is actually on an active PR. Perhaps <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  wouldn't mind if I just pushed to his PR?</p>",
        "id": 179121577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572088635
    },
    {
        "content": "<p>Oh, but the PR is marked as ready-to-merge already. I don't know what the etiquette is here.</p>",
        "id": 179121636,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1572088747
    },
    {
        "content": "<p>Oops, yeah, I pushed, and then noticed the ready-to-merge.</p>",
        "id": 179122034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1572089404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thanks!</p>",
        "id": 179129352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572102357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> A trick I use to view the tactic state in term mode without deleting anything is to insert <code>by {}; exact</code>. The <code>{}</code> will cause an error because the goal isn't closed, and it will show the tactic state at that point</p>",
        "id": 179141318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572123458
    },
    {
        "content": "<p>You can also use <code>by let :=</code> to capture what comes after and display it</p>",
        "id": 179141382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1572123560
    }
]