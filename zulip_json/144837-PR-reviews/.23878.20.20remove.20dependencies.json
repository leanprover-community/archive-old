[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Can you follow up on this please? </p>\n<blockquote>\n<p>There's a proof in algebra.archimedean that uses linarith and now fails because I changed the imports. Any idea why?</p>\n</blockquote>",
        "id": 163672908,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555609148
    },
    {
        "content": "<p>Ah, sorry. I didn't see the notification.</p>",
        "id": 163673468,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555609504
    },
    {
        "content": "<p>Short answer: no idea. linarith should be unaffected by imports, it doesn't use anything outside of the local context.</p>",
        "id": 163673503,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555609536
    },
    {
        "content": "<p>I'll look closer when I have a chance.</p>",
        "id": 163673518,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555609544
    },
    {
        "content": "<p>Cool, thanks</p>",
        "id": 163673530,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555609552
    },
    {
        "content": "<p>preliminary investigation tells me that all the definitions and constants that go in the proof when it succeeds are still visible by both <code>tactic/linarith.lean</code> and <code>algebra/archimedean.lean</code> when I change the imports.</p>",
        "id": 163673673,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555609626
    },
    {
        "content": "<p>Also, when I look at the transitive closure of the import graph and I look at the modules that are no longer visible after eliminating spurious dependencies, adding those imports to <code>tactic/linarith.lean</code> or <code>algebra/archimedean.lean</code> doesn't fix the problem.</p>",
        "id": 163673783,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555609696
    },
    {
        "content": "<p>The problem is that the casts to α that appear in the <code>have</code>statements are different from the one that appears in the goal. Changing the imports somehow changed the path that gets found from ℤ to α. So <code>linarith</code> sees the two cast expressions as different, and won't cancel them. You can see this if you add the line <code>set v := (↑⌊x + 1 / 2⌋ : α)</code> before the <code>split</code>. It rewrites the goal to <code>v</code> but not the hypotheses.</p>",
        "id": 163679348,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555613268
    },
    {
        "content": "<p>Ok so that's more an issue with <code>coe</code> than with <code>linarith</code>. Any suggestion on not getting caught like that in the future? (also fixing this problem)</p>",
        "id": 163679503,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555613380
    },
    {
        "content": "<p>can you post the pp.all expression? There shouldn't be an ambiguity like that</p>",
        "id": 163680119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555613856
    },
    {
        "content": "<p>Hmm? I think I'm misunderstanding, there's no ambiguity. The line <code>have := lt_floor_add_one (x + 1 / 2)</code> gives you hypothesis <code>this : x + 1 / 2 &lt; ↑⌊x + 1 / 2⌋ + 1</code>. The goal is <code>x - ↑⌊x + 1 / 2⌋ ≤ 1 / 2 ∧ ↑⌊x + 1 / 2⌋ - x ≤ 1 / 2</code>, and the cast is there from the beginning. Unsurprisingly, the term in the <code>set</code> line matches the one in the goal, since they're both coming from elaborating user input in the same place. But it isn't matching the output of <code>lt_floor_add_one</code>.</p>",
        "id": 163685814,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555617785
    },
    {
        "content": "<p>Here's the pp.all output, which I admit I didn't try very hard to parse.<br>\n(Edit - one sec, this was too long to paste) <a href=\"user_uploads/3121/EhwfEjxO2Gw4ohHk-L3CCT6_/trace.txt\" target=\"_blank\" title=\"user_uploads/3121/EhwfEjxO2Gw4ohHk-L3CCT6_/trace.txt\">trace.txt</a></p>",
        "id": 163685850,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555617829
    },
    {
        "content": "<p>No easy solution comes to mind. Paul-Nicolas and I have been looking at casts quite a bit lately, and debugging them is horrible, nothing less than pp.all helps.</p>",
        "id": 163686033,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555617961
    },
    {
        "content": "<p>And I don't have time at the moment to chase down why changing imports leads to a different instance.</p>",
        "id": 163686162,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555618041
    },
    {
        "content": "<p>Well, an easy solution for this particular case is to give explicit types to the <code>have</code> statements.</p>",
        "id": 163686209,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555618080
    },
    {
        "content": "<p>I am probably misunderstanding too, but isn't <code>↑⌊x + 1 / 2⌋</code> just a variable here from linarith's point of view? I thought that you were saying that the different occurrences of <code>↑⌊x + 1 / 2⌋</code> had different coes and end up as different variables so it isn't provable</p>",
        "id": 163687636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555619073
    },
    {
        "content": "<p>(PS: coes are ridiculously large. I wonder if we can get a performance improvement by making <code>int.cast</code> depend on a <code>[ring A]</code> rather than <code>[has_zero A] [has_one A] [has_neg A] [has_add A]</code>)</p>",
        "id": 163687790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555619166
    },
    {
        "content": "<p>Yes, that's exactly what's happening. Specifically, the <code>has_lift_t</code> instances must be defeq but not syntactically equal. I actually thought there was some support in <code>simp</code> to normalize these kinds of things, but maybe there are simp lemmas missing.</p>",
        "id": 163688513,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555619816
    },
    {
        "content": "<p>I'd be in favor of that change to <code>int.cast</code>.</p>",
        "id": 163688536,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555619839
    },
    {
        "content": "<p>That sounds like a good idea to me</p>",
        "id": 163688551,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555619865
    },
    {
        "content": "<p>I'm not sure how much of a performance gain it will be, but at least it will shrink the pp.all output a bit, and I don't think it will hurt anything.</p>",
        "id": 163688676,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555619953
    },
    {
        "content": "<p>A more robust method is to keep track of all the variable replacements, and whenever you find a new atom you see if it defeq matches a previous one and use that variable instead of making a new one</p>",
        "id": 163689004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555620235
    },
    {
        "content": "<p>That sounds very cumbersome</p>",
        "id": 163689086,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555620282
    },
    {
        "content": "<p>Surely it already has to be done to some extent; you are traversing the term(s) to find unique atoms, and this is just modifying the equality test</p>",
        "id": 163689113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555620321
    },
    {
        "content": "<p>It's <code>pw_filter</code> but with a monadic predicate</p>",
        "id": 163689133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555620356
    },
    {
        "content": "<p>Are you talking about change <code>simp</code> or <code>linarith</code>?</p>",
        "id": 163689363,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555620509
    },
    {
        "content": "<p>linarith, in its atom matching step</p>",
        "id": 163689381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555620530
    },
    {
        "content": "<blockquote>\n<p>(PS: coes are ridiculously large. I wonder if we can get a performance improvement by making <code>int.cast</code> depend on a <code>[ring A]</code> rather than <code>[has_zero A] [has_one A] [has_neg A] [has_add A]</code>)</p>\n</blockquote>\n<p>You mean <code>[has_neg A] [has_add A] [has_zero A] [has_one A]</code>, right? ;-)</p>",
        "id": 163689439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555620594
    },
    {
        "content": "<p>If school has taught me nothing else it's that a permutation of the correct answer is a correct answer</p>",
        "id": 163689554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555620666
    },
    {
        "content": "<p>If all this CS stuff has taught me anything, it's that runtime matters</p>",
        "id": 163689576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555620700
    },
    {
        "content": "<p>This would be reasonable, but I think the same change would need to be made in ring, or else the verification step will fail.</p>",
        "id": 163692195,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555622836
    },
    {
        "content": "<p>Are you referring to Mario's proposed fix?</p>",
        "id": 163693021,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555623571
    },
    {
        "content": "<p>Yes, to Mario's proposed change for how <code>linarith</code> identifies variables. If it identifies them up to definitional equality, instead of syntactic, the search step will succeed in the broken proof in <code>archimedean.lean</code>. But I think the verification step will still fail, since <code>ring</code> also seems to identify variables syntactically.</p>",
        "id": 163693314,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555623823
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">id</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 163693401,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555623880
    },
    {
        "content": "<p>I guess <code>ring</code> doesn't have a clue what this random function <code>id</code> is?</p>",
        "id": 163693443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555623925
    },
    {
        "content": "<p>Right -- it's working up to syntactic equality, that's the point you're making</p>",
        "id": 163693529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555623968
    },
    {
        "content": "<p>I think I'm finally agreeing with Mario. If you check only syntactically, you can get thrown off by the silliest thing like aliases</p>",
        "id": 163693568,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555624020
    },
    {
        "content": "<p>The details of the implementation of <code>ring</code> aren't fresh in my mind, but I suspect it's not such an easy change to make there.</p>",
        "id": 163693719,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555624146
    },
    {
        "content": "<p>In practice things like aliases and not unfolding things to defeq things haven't even been a problem for me as a <code>ring</code> user.</p>",
        "id": 163693724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555624151
    },
    {
        "content": "<p>If an equation is in the form <code>x - id x</code> then I figure it's not yet ready for <code>ring</code> and I fix it up.</p>",
        "id": 163693741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555624179
    },
    {
        "content": "<p>But what if it's in the form <code>↑⌊x + 1 / 2⌋ - ↑⌊x + 1 / 2⌋</code>?</p>",
        "id": 163693820,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555624233
    },
    {
        "content": "<p>Well that's an interesting question! My instinct as a <code>ring</code> user and someone who knows how to battle off <code>coe</code>s would be to remove all the arrows first before trying to use <code>ring</code></p>",
        "id": 163693861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555624273
    },
    {
        "content": "<p>i.e. change it to <code>↑(⌊x + 1 / 2⌋ - ⌊x + 1 / 2⌋)</code></p>",
        "id": 163693882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555624321
    },
    {
        "content": "<p>Would it help to canonicalize expressions so that their structure is completely conform to the language of rings?</p>",
        "id": 163693938,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555624352
    },
    {
        "content": "<p>Isn't there a canonical coercion from A to B whenever A &lt;= B in nat int rat real complex? And any coercion will be defeq to that. There's also at most one canonical coercion from nat int rat to a random ring. Can't you just make sure all coercions are the syntactically the canonical ones at every stage?</p>",
        "id": 163694156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555624560
    },
    {
        "content": "<p>Kevin, I think the coercions are a red herring. An automated proof broke, because changing imports caused some type class instances to be inferred differently, and the syntactic difference confuses <code>linarith</code>. There's an easy enough way to make <code>linarith</code> ignore the syntactic difference, but it only works if the same change happens to <code>ring</code>.</p>",
        "id": 163694458,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555624800
    },
    {
        "content": "<blockquote>\n<p>Would it help to canonicalize expressions so that their structure is completely conform to the language of rings?</p>\n</blockquote>\n<p>I'm not sure what you mean, help what?</p>",
        "id": 163694536,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555624824
    },
    {
        "content": "<p>Again, I don't know the details of <code>ring</code> so well, Mario would need to weigh in to say how big a change this would be.</p>",
        "id": 163694612,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555624921
    },
    {
        "content": "<p>Obviously I know far less about what's going on than you do -- but you can't just force all type class instances to be \"the right ones that we chose once and for all\"?</p>",
        "id": 163694717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555625034
    },
    {
        "content": "<p>Syntactically?</p>",
        "id": 163694768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555625047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  That's the solution adopted in Haskell and you need some strong assumptions about the type class system in order to make that work. Lean is too permissive for us to make that work</p>",
        "id": 163694894,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555625174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Instead of answering your question, I think I'll wait for Mario to comment</p>",
        "id": 163694907,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555625198
    },
    {
        "content": "<p>And while we're waiting, I'm headed to bed <span aria-label=\"sleeping\" class=\"emoji emoji-1f634\" role=\"img\" title=\"sleeping\">:sleeping:</span></p>",
        "id": 163695095,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555625416
    },
    {
        "content": "<p>Sleep tight!</p>",
        "id": 163695112,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555625446
    },
    {
        "content": "<p>The main problem with this change in both linarith and ring is that they rely on a total order on expressions (<code>expr.lt</code>) for which the lt-comparable exprs are syntactically equal. There is no analogous total order up to defeq, at least not anything cheap. So we basically have to preprocess the term and replace all atoms with numbered variables to impose a local order</p>",
        "id": 163697662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555628152
    },
    {
        "content": "<p>see <a href=\"https://github.com/leanprover-community/mathlib/issues/949\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/949\">#949</a></p>",
        "id": 163707551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555640780
    },
    {
        "content": "<blockquote>\n<p>The main problem with this change in both linarith and ring is that they rely on a total order on expressions (<code>expr.lt</code>) for which the lt-comparable exprs are syntactically equal. There is no analogous total order up to defeq, at least not anything cheap. So we basically have to preprocess the term and replace all atoms with numbered variables to impose a local order</p>\n</blockquote>\n<p>This basically happens in <code>linarith</code> already. Linear expressions are represented with <code>rb_map ℕ ℤ</code>. Pretty sure there are only two places that have to change:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/linarith.lean#L296\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/linarith.lean#L296\">https://github.com/leanprover-community/mathlib/blob/master/src/tactic/linarith.lean#L296</a> and just below at 310. That function becomes a bit less efficient, because you have to walk through the whole key list checking for defeq instead of using <code>rb_map.find</code>. But this shouldn't be noticeable.</p>",
        "id": 163717543,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555656127
    },
    {
        "content": "<p>I have a lot to do today and I'm not in the office. But when I have a few minutes I'll take a shot at changing this on top of your pr.</p>",
        "id": 163717740,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555656458
    },
    {
        "content": "<p>As expected, it's a small patch. I did a very nonscientific test that showed a 10% performance hit on the linarith test file. Not sure if this came from the changes to linarith, or ring, or if it's just noise.</p>",
        "id": 163736376,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555681726
    },
    {
        "content": "<p>I'd be very surprised if the change to linarith was that drastic, so hopefully it's just noise.</p>",
        "id": 163736405,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555681786
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/950\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/950\">https://github.com/leanprover-community/mathlib/pull/950</a></p>",
        "id": 163740804,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555685900
    },
    {
        "content": "<p>Seems like the performance change was mostly noise.</p>",
        "id": 163740808,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1555685911
    },
    {
        "content": "<p>Awesome! Thanks for doing this!</p>",
        "id": 163750125,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555695232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can we merge this? I reverted the changes to <code>tactic/interactive.lean</code>.</p>",
        "id": 164409302,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556488340
    }
]