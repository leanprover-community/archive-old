[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>pow</code> comes for free after I've proved semiring! :D</p>",
        "id": 146936148,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541593744
    },
    {
        "content": "<p>and about <code>map</code>: I don't really see how useful it would be <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 146936223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541593831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> why don't we prove that <code>submodule.map</code> and <code>submodule.comap</code> form a galois connection?</p>",
        "id": 146936726,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541594426
    },
    {
        "content": "<p>sure, it's one line</p>",
        "id": 146936749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541594468
    },
    {
        "content": "<p>I mean, why didn't we?</p>",
        "id": 146936755,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541594494
    },
    {
        "content": "<p>you could derive some other theorems from this galois connection, right?</p>",
        "id": 146936763,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541594506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I think <code>map</code> will be very useful. If <code>I : ideal R</code> and <code>f : R → S</code> you see mathematicians writing <code>I.S</code> all the time for the ideal generated by <code>I</code> in <code>S</code>.</p>",
        "id": 146937375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541595158
    },
    {
        "content": "<p><code>comap</code> is used to show that <code>Spec</code> is a functor.</p>",
        "id": 146937400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541595199
    },
    {
        "content": "<p>And implicitly we are using all the time that it behaves well in certain ways. Which are exactly the little lemmas in the beginning of A–MD.</p>",
        "id": 146937405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541595209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> added <code>map</code>. this might be the only time I use <code>ge</code> instead of <code>le</code>.</p>",
        "id": 146940064,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541598051
    },
    {
        "content": "<p>my laptop now has 27% battery</p>",
        "id": 146940426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541598417
    },
    {
        "content": "<p>why did you use <code>ge</code>?</p>",
        "id": 146940454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541598461
    },
    {
        "content": "<p>because the right hand side was simpler</p>",
        "id": 146940909,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541598914
    },
    {
        "content": "<p>I guess I’ll switch it back</p>",
        "id": 146942312,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541600348
    },
    {
        "content": "<p>I guess I’ll switch it back</p>",
        "id": 146942314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541600351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you have any other requests?</p>",
        "id": 146964872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541603726
    },
    {
        "content": "<p>i have 2 hours of train</p>",
        "id": 146964942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541603779
    },
    {
        "content": "<p>Nullstellensatz?</p>",
        "id": 146964974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541603813
    },
    {
        "content": "<p>Not that I ever use it</p>",
        "id": 146964983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541603822
    },
    {
        "content": "<p>Completion of a ring WRT an ideal</p>",
        "id": 146965009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541603853
    },
    {
        "content": "<p>Integral elements!</p>",
        "id": 146965014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541603857
    },
    {
        "content": "<p>oh wait Patrick might have done that</p>",
        "id": 146965017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541603859
    },
    {
        "content": "<p>Integral elements , as Patrick says</p>",
        "id": 146965034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541603879
    },
    {
        "content": "<p>Right, I think integral closure would be a reasonable next step.</p>",
        "id": 146965101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541603924
    },
    {
        "content": "<p>I mean, regarding this PR</p>",
        "id": 146965271,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604069
    },
    {
        "content": "<p>also, how should I call (M:N)?</p>",
        "id": 146965276,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604079
    },
    {
        "content": "<p>What is it?</p>",
        "id": 146965296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604096
    },
    {
        "content": "<p>x such that xN &lt;= M</p>",
        "id": 146965303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604105
    },
    {
        "content": "<p>Ok, so it is not some sort of index of a submodule.</p>",
        "id": 146965365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604142
    },
    {
        "content": "<p>that would be []</p>",
        "id": 146965377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604157
    },
    {
        "content": "<p>Aah, of course.</p>",
        "id": 146965384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604166
    },
    {
        "content": "<p>Ok, Kenny. We need to be able to write the I^n\\cdots D that is at the very bottom of Page 73  of <a href=\"https://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf\" target=\"_blank\" title=\"https://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf\">https://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf</a></p>",
        "id": 146965443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541604238
    },
    {
        "content": "<p>So, this looks like the fractional quotient, but it isn't exactly that, right?</p>",
        "id": 146965491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604244
    },
    {
        "content": "<blockquote>\n<p>Ok, Kenny. We need to be able to write the I^n\\cdots D that is at the very bottom of Page 73  of <a href=\"https://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf\" target=\"_blank\" title=\"https://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf\">https://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf</a></p>\n</blockquote>\n<p>Hmmm, there quite a lot of abuse of notation going on there...</p>",
        "id": 146965543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604285
    },
    {
        "content": "<p>Yes, we want abuse of notations</p>",
        "id": 146965564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541604301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think we can already write that</p>",
        "id": 146965565,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604301
    },
    {
        "content": "<p>I is an ideal and D is a subring (except that I is an ideal not in the same ring as D)</p>",
        "id": 146965584,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541604325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> AM calls it quotient, but I don’t think we want this name in Lean</p>",
        "id": 146965587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604332
    },
    {
        "content": "<p>because D is in the localization</p>",
        "id": 146965603,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541604355
    },
    {
        "content": "<p>then what is I^n • D supposed to mean?</p>",
        "id": 146965604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604356
    },
    {
        "content": "<p>I don't think it is actually used.</p>",
        "id": 146965631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604363
    },
    {
        "content": "<p>Sorry, we are having to discussions interleaved...</p>",
        "id": 146965658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604377
    },
    {
        "content": "<p>Crap, I'm getting to Offenburg. I'll lose wifi</p>",
        "id": 146965660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541604378
    },
    {
        "content": "<p>well the annihilator is used</p>",
        "id": 146965669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604388
    },
    {
        "content": "<p>I'll let Johan explain the abuse of notation</p>",
        "id": 146965672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541604394
    },
    {
        "content": "<p>and this quotient is a generalisation</p>",
        "id": 146965675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604395
    },
    {
        "content": "<p>Sure, annihilators are used.</p>",
        "id": 146965701,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604438
    },
    {
        "content": "<p>Speaking of localisations: <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> we couldn't find the fact that <code>s : S</code> becomes a unit in the localisation.</p>",
        "id": 146965776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604491
    },
    {
        "content": "<p>Maybe localisation was written before units</p>",
        "id": 146965798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541604521
    },
    {
        "content": "<p>so how should I name (M:N)?</p>",
        "id": 146965804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604538
    },
    {
        "content": "<p>I don't have a good idea...</p>",
        "id": 146966120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604794
    },
    {
        "content": "<p>If no one has a better idea, I suggest <code>colon</code></p>",
        "id": 146966129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541604800
    },
    {
        "content": "<p><code>M.colon N</code></p>",
        "id": 146966140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541604814
    },
    {
        "content": "<p>and what is I^n • D?</p>",
        "id": 146966142,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541604815
    },
    {
        "content": "<p><code>I</code> is an ideal in a subring <code>A₀</code> of a ring <code>A</code>. We localise at an element <code>s : A</code> so we get <code>A → A_s</code>. Inside this, we look at <code>D</code> which is the subring generated by the image of <code>A₀</code> and some elements we don't care about.</p>",
        "id": 146966302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604927
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do you have any other requests?</p>\n</blockquote>\n<p>I just looked through it all and you have got everything I can think of (including comap of prime is prime).</p>",
        "id": 146966331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541604959
    },
    {
        "content": "<p>With this information, the reader is supposed to figure out what <code>I^n • D</code> is. I would be surprised if Lean could do so as well.</p>",
        "id": 146966374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541604966
    },
    {
        "content": "<p>oh no, (analysis) limit stuffs use ideals</p>",
        "id": 147249919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541619787
    },
    {
        "content": "<p>so all those need to be compiled</p>",
        "id": 147249925,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541619791
    },
    {
        "content": "<p>Should we have a notation for <code>r • linear_map.id</code>?</p>",
        "id": 147262554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541631091
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">annihilator</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">lsmul</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span>\n\n<span class=\"n\">def</span> <span class=\"n\">colon</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">annihilator</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">N</span><span class=\"bp\">.</span><span class=\"n\">mkq</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 147264938,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541633881
    }
]