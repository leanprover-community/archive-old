[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span>, I don't want to hold up this PR, but I do want to catch up on where we are with bicategories!</p>\n<p>If I understand correctly, we don't yet have the construction that turns a monoidal category into a bicategory (by having a single 0-morphism at the bottom, and promoting objects to 1-morphisms and morphisms to 2-morphisms).</p>\n<ul>\n<li>Do you have a sense how hard that is going to be? Hopefully easy?</li>\n</ul>\n<p>I haven't thought about this, but is it plausible for us to then <em>drop</em> the independent proof of coherence for monoidal categories, and instead derive it from the new content in <a href=\"https://github.com/leanprover-community/mathlib/pull/12155\">#12155</a>?</p>\n<p>Finally, what are the prospects for deriving from the content of <a href=\"https://github.com/leanprover-community/mathlib/pull/12155\">#12155</a> that every bicategory is equivalent to one satisfying <code>bicategory.strict</code>? As far as I recall we didn't quite get over this line in the monoidal setting.</p>",
        "id": 275468687,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647408135
    },
    {
        "content": "<p>We haven't yet give any explicit connection between bicategories and monoidal categories, but it is easy to define one-point bicategories from monoidal categories as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.monoidal.category</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.bicategory.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoidal_category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bicategory.of_monoidal</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">monoidal_category</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n  <span class=\"n\">associator_naturality</span> <span class=\"n\">left_unitor_naturality</span> <span class=\"n\">right_unitor_naturality</span>\n  <span class=\"n\">triangle</span> <span class=\"n\">pentagon</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">bicategory</span> <span class=\"o\">(</span><span class=\"n\">bicategory.of_monoidal</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tensor_unit</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tensor_obj</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_category</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">whisker_left</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span> <span class=\"bp\">‚äó</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">whisker_right</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚äó</span> <span class=\"mi\">ùüô</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">associator</span>    <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">Œ±_</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">left_unitor</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span><span class=\"n\">_</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">right_unitor</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">œÅ_</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">associator_naturality_right'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">tensor_id</span><span class=\"o\">,</span> <span class=\"n\">associator_naturality</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 275528866,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1647444963
    },
    {
        "content": "<p>I think it is possible to derive the coherence for monoidal categories from the result in this PR, but I haven't tried it. We need to construct a pseudoofunctor between the one-point bicategory associated with a free monoidal category and the free bicategory of a one-point quiver, and prove that it is locally an equivalence of categories.</p>",
        "id": 275528976,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1647445005
    },
    {
        "content": "<p>Following the appendix of <a href=\"http://www.tac.mta.ca/tac/reprints/articles/20/tr20abs.html\">Verity's thesis</a>, we can define a strictification of a bicategory by the following way:<br>\n(1) Define indued bicategories associated with pseudofunctors. This is a bicategorical version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.induced_category\">docs#category_theory.induced_category</a>.<br>\n(2) Define strictification of a bicategory <code>B</code> as the induced bicategory associated with the composition of <code>free_bicategory.inclusion B</code> and <code>free_bicategory.lift (prefunctor.id B)</code>, which is a pseudofunctor from <code>locally_discrete (paths B)</code> to <code>B</code>.</p>\n<p>It is not hard to implement these definitions in lean. However, I'm not sure it is true that this strictification is strict in the sense of <code>bicategory.strict</code>. Moreover, even if it can be shown in lean, I have no idea if it is useful.</p>",
        "id": 275531478,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1647446011
    }
]