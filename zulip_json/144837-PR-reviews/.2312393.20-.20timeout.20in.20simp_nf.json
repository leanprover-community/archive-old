[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/12393\">#12393</a> is not failing the <code>simp_nf</code> check; rather the linter itself is failing. Any suggestion for how to debug this?</p>",
        "id": 274920691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646962079
    },
    {
        "content": "<p>is this not this bit from the docs?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  3. 'try_for tactic failed, timeout':</span>\n<span class=\"cm\">     This typically means that there is a loop of simp lemmas.</span>\n<span class=\"cm\">     Try to apply squeeze_simp to the right-hand side (removing this lemma from the simp set) to see</span>\n<span class=\"cm\">     what lemmas might be causing the loop.</span>\n\n<span class=\"cm\">     Another trick is to `set_option trace.simplify.rewrite true` and</span>\n<span class=\"cm\">     then apply `try_for 10000 { simp }` to the right-hand side.  You will</span>\n<span class=\"cm\">     see a periodic sequence of lemma applications in the trace message.</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 274920874,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646962267
    },
    {
        "content": "<p>Thanks! Although trying to follow those instructions on that PR branch, with this MWE, gives no output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.general_linear_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">n</span><span class=\"o\">))]</span>\n<span class=\"kn\">open</span> <span class=\"n\">matrix</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">special_linear_group.coe_neg</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">special_linear_group</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">â†‘</span><span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">try_for</span> <span class=\"mi\">10000</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>It seems like simp is stuck in a loop before it even tries to do any rewrites?</p>",
        "id": 274922326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646963712
    },
    {
        "content": "<p>Ah, the problem is <code>cached failure for linear_ordered_comm_ring R</code> which with <code>set_option trace.class_instances true</code> appears at least <del>a</del> <em>four</em> million times</p>",
        "id": 274923077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646964353
    }
]