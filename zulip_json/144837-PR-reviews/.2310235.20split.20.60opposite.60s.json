[
    {
        "content": "<p>I want to add <code>add_opposite</code> so that we can use <code>@[to_additive]</code> on proofs/defs that rely on <code>opposite</code> (I'm mostly interested in the opposite regular action of a group on itself). As a first step, I split category theory <code>opposite</code> from multiplicative <code>opposite</code>. In this PR I redefine <code>mul_opposite</code> as a one-field structure. Should I revert to the \"irreducible type tag\" trick?</p>",
        "id": 261078034,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636591563
    },
    {
        "content": "<p>I would certainly be happier to leave the one-field structure change to a separate PR because it's not an obvious win IMO</p>",
        "id": 261101326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636615234
    },
    {
        "content": "<p>A pro of a <code>structure</code> is that we can do <code>λ ⟨x⟩, _</code></p>",
        "id": 261171293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636656597
    },
    {
        "content": "<p>(I started to roll back to <code>@[irreducible] def</code> and realized that I no longer can do this)</p>",
        "id": 261172671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636657369
    },
    {
        "content": "<p>/poll Should we use structure or an irreducible def?<br>\nirreducible def<br>\nstructure</p>",
        "id": 261282427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636737103
    },
    {
        "content": "<p>With an irreducible def both <code>op_unop</code> and <code>unop_op</code> are <code>rfl</code>, and with a structure we can use <code>λ ⟨x⟩, _</code>.</p>",
        "id": 261282792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636737281
    },
    {
        "content": "<p>With the reducible def, you have to use <code>opposite.rec $ λ x, _</code> instead of <code>λ ⟨x⟩, _</code> I think</p>",
        "id": 261284563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636738032
    },
    {
        "content": "<p>This is a hard vote to cast because two people I trust have differing opinions. I realise this has been discussed publicly already but is there a thread I should examine or a quick summary of pros/cons available beyond the remarks above?</p>",
        "id": 261285793,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636738687
    },
    {
        "content": "<p>There's some relevant <del>discussion</del> explanation in <a href=\"https://github.com/leanprover/lean4/issues/777\">https://github.com/leanprover/lean4/issues/777</a>, as well as <del>some</del> a linked issue (<a href=\"https://github.com/leanprover-community/mathlib/issues/6045\">#6045</a>) which similar discussions happened with.</p>",
        "id": 261285982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636738794
    },
    {
        "content": "<p>No strong opinion here. How does it behave in Lean 4? i.e., is there still the fact that <code>op_unop</code> and <code>unop_op</code> are <code>rfl</code>? (the fact that this holds despite the irreducible tag is a little bit of a mystery to me, by the way).</p>",
        "id": 261286792,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1636739183
    },
    {
        "content": "<p><code>irreducible</code> only affects the type, not necessarily the definitions (unless you tag them with <code>irreducible</code> as well).</p>",
        "id": 261287116,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636739366
    },
    {
        "content": "<p>They can still unfold.</p>",
        "id": 261287138,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636739381
    },
    {
        "content": "<p>In Lean 4, there isn't a direct replacement for irreducible.  If you don't want <code>opposite A</code> and <code>A</code> to be defeq, I can give you is a constant <code>opposite : Type -&gt; Type</code> and a theorem <code>opposite_def : opposite A = A</code>.</p>",
        "id": 261287303,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636739455
    },
    {
        "content": "<p>I'm not sure if that's better or worse than a structure.</p>",
        "id": 261287320,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636739463
    },
    {
        "content": "<p>You'd then end up defining <code>op</code> and <code>unop</code> via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cast\">docs#cast</a> or via yet more <code>constant</code>s; so I think  that outcome is worse than a structure</p>",
        "id": 261288800,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636740122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> What should we use instead of <code>@[irreducible]</code> in Lean 4 in cases like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a>?</p>",
        "id": 261289792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636740531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310235.20split.20.60opposite.60s/near/261288800\">said</a>:</p>\n<blockquote>\n<p>You'd then end up defining <code>op</code> and <code>unop</code> via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cast\">docs#cast</a> or via yet more <code>constant</code>s; so I think  that outcome is worse than a structure</p>\n</blockquote>\n<p>This sounds like a reason to favour structures then?</p>",
        "id": 261290077,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636740651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2310235.20split.20.60opposite.60s/near/261289792\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> What should we use instead of <code>@[irreducible]</code> in Lean 4 in cases like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a>?</p>\n</blockquote>\n<p>My plan is to add an <code>irreducible_def is_O (f : α → E) (g : α → F) (l : filter α) : Prop := ∃ c : ℝ, is_O_with c f g l</code> command that generates a constant <code>is_O : ...</code> as well as a theorem <code>is_O_def : is_O f g l &lt;-&gt; ∃ c, is_O_with c f g l</code>.<br>\nI believe I have posted an implementation here somewhere, I should probably PR it to mathlib4 and integrate it with mathport now.</p>",
        "id": 261292908,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636741930
    },
    {
        "content": "<p>isn't generating constants \"bad\"? what's the reason this is ok?</p>",
        "id": 261293723,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1636742328
    },
    {
        "content": "<p>An irreducible definition is pretty much the same as a constant.</p>",
        "id": 261293803,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636742364
    },
    {
        "content": "<p>Will this constant show in <code>#print axioms</code>?</p>",
        "id": 261294079,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636742498
    },
    {
        "content": "<p>(I guess, you can generate a one-field structure behind the scenes to avoid polluting <code>#print axioms</code>)</p>",
        "id": 261294282,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636742602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> With a structure, <code>unop_op</code> is a <code>rfl</code>; <code>op_unop</code> in not a <code>rfl</code> anymore.</p>",
        "id": 261294469,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636742682
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">x</span> <span class=\"c1\">-- 'x' does not depend on any axioms</span>\n</code></pre></div>",
        "id": 261294910,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636742925
    },
    {
        "content": "<p>Will <code>theorem x_def : x = 42 := ...</code> need an axiom?</p>",
        "id": 261296018,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636743543
    },
    {
        "content": "<p>The encoding looks roughly like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">x_core</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">42</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x_core.x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">x_def</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">42</span> <span class=\"o\">:=</span> <span class=\"n\">x_core.prf</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">x_def</span> <span class=\"c1\">-- 'x_def' does not depend on any axioms</span>\n</code></pre></div>",
        "id": 261296953,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636743980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It looks like we'll have to switch to <code>structure</code> in Lean 4. Any objections to doing it now?</p>",
        "id": 261312560,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636752207
    },
    {
        "content": "<p>That wasn't my reading of Gabriel's message, unless the conclusion is that structures are less bad than than the <code>constant</code> approach.</p>\n<p>Do we see ourselves switching to making <code>set</code> a structure in lean4 as well? It just seems somewhat odd to make the decision to switch now, rather than waiting till we have more information; especially since 90% of the PR <a href=\"https://github.com/leanprover-community/mathlib/issues/10235\">#10235</a> isn't about switching to structure anyway</p>",
        "id": 261314256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636753123
    },
    {
        "content": "<p>Can you make either <code>op_unop</code> or <code>unop_op</code> a <code>rfl</code> with the <code>constant</code> approach?</p>",
        "id": 261322301,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636758010
    },
    {
        "content": "<p>I think we should eventually make set a structure, yes.</p>",
        "id": 261374027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636828936
    },
    {
        "content": "<p>I didn't say that irred defs are in all ways worse than structures.  It's a tradeoff, do we want pattern matching or the equality a = opposite a.</p>",
        "id": 261374057,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636829027
    },
    {
        "content": "<p>Does lean4 give us a way to do custom pattern matching (aka custom default recursors)? It's something that useful for things like <code>quotient</code> too, which currently ends up using the <code>quot</code> recursor and introducing <code>quot.mk</code> when we want <code>quotient.mk</code></p>",
        "id": 261374129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636829102
    },
    {
        "content": "<p>I have the impression that I use all the time things like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"n\">y</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">h.1</span>\n</code></pre></div>\n<p>(whenever I define a set by hand and I want to access one of the properties). If set is made a structure, would this be broken?</p>",
        "id": 261375333,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1636830764
    },
    {
        "content": "<p>This will work: <code>x ∈ {y | p y} = p x</code> will be a <code>rfl</code>. This won't be a <code>rfl</code> anymore: <code>{x | x ∈ s} = s</code>.</p>",
        "id": 261377408,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636833817
    },
    {
        "content": "<p>Also, we'll have to use something else instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually_eq\">docs#filter.eventually_eq</a> for sets.</p>",
        "id": 261377453,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636833862
    },
    {
        "content": "<p>E.g., we can have notation or a definition for <code>(λ x, x ∈ s) =ᶠ[l] (λ y, y ∈ s)</code>.</p>",
        "id": 261377537,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636833964
    },
    {
        "content": "<blockquote>\n<p>Does lean4 give us a way to do custom pattern matching (aka custom default recursors)? It's something that useful for things like <code>quotient</code> too, which currently ends up using the <code>quot</code> recursor and introducing <code>quot.mk</code> when we want <code>quotient.mk</code></p>\n</blockquote>\n<p>I am not sure we always want <a href=\"http://quotient.mk\">quotient.mk</a>, we also use <a href=\"http://quot.mk\">quot.mk</a> (grep line count: 1659:773) which seems more ergonomic to me as it doesn't require any setoid instances (which are always going to be non-canonical, so they're not instances, so we need custom lemmas with {} instead of []).<br>\nEither way, afaik Lean 4 doesn't have any way to provide custom pattern matching.</p>",
        "id": 261379936,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1636837497
    },
    {
        "content": "<p>Sorry, I mean <code>quotient.mk'</code></p>",
        "id": 261380897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636838997
    },
    {
        "content": "<p>Status report: <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> created a version of <a href=\"https://github.com/leanprover-community/mathlib/issues/10235\">#10235</a> without <code>structure</code>s, see <a href=\"https://github.com/leanprover-community/mathlib/issues/10302\">#10302</a> (build succeeded, waiting for linter&amp;tests). I think that we should merge it, then <a href=\"https://github.com/leanprover-community/mathlib/issues/10235\">#10235</a> will be about migration to <code>structure</code>s, so we can discuss it separately.</p>",
        "id": 261433146,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636916647
    },
    {
        "content": "<p>Thanks for fixing that up, I wasnt expecting you to adopt it!</p>",
        "id": 261433251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636916763
    },
    {
        "content": "<p>Regarding the non-structure question; are we sure <code>data/opposite.lean</code> shouldn't continue to be about <code>mul_opposite</code>, and have the other opposite as <code>category_theory/opposite.lean</code></p>",
        "id": 261433300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636916831
    },
    {
        "content": "<p>I want to have <code>add_opposite</code> ASAP, and this seemed to be the fastest route.</p>",
        "id": 261433309,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636916855
    },
    {
        "content": "<p>I think that we should move <code>data.opposite</code> to <code>category_theory.opposite</code> and leave the definition of <code>mul_opposite</code> in <code>algebra/opposites</code>.</p>",
        "id": 261433372,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636916899
    },
    {
        "content": "<p>The reason I argue for <code>mul_opposite</code> in data/opposite is that it would be handy to have opposite defined as early as possible so that we can talk about right actions. I think we have that now, but after the move we won't</p>",
        "id": 261433392,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636916946
    },
    {
        "content": "<p>Later we should split <code>algebra/opposites</code> in <code>algebra.group.opposite</code>, <code>algebra.ring.opposite</code>.</p>",
        "id": 261433399,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636916956
    },
    {
        "content": "<p>We have no <code>monoid</code> structure on <code>opposite M</code> till <code>algebra/opposites</code>, so we won't be able to talk about right <strong>actions</strong> (not just <code>has_scalar</code>) till we split this file.</p>",
        "id": 261433492,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636917053
    },
    {
        "content": "<p>Sure, but we only need <code>has_scalar</code> in order to define the <code>is_symmetric_smul</code> from another thread</p>",
        "id": 261433510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636917087
    },
    {
        "content": "<p>Having notation classes available really early is handy</p>",
        "id": 261433518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636917103
    },
    {
        "content": "<p>(and <code>opposite</code> sort of folds into the notation for right \"actions\")</p>",
        "id": 261433576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636917155
    },
    {
        "content": "<p>Mainly though my thought was that leaving <code>mul_opposite</code> in data/opposite means the PR just has to copy <code>data/opposite</code> to <code>category_theory/opposite</code> and do some renames, which makes the diff smaller</p>",
        "id": 261433595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636917209
    },
    {
        "content": "<p>I think that <code>algebra.group.opposite</code> that imports nothing but <code>algebra.group.inj_surj</code> is early enough. We can have <code>algebra.group.opposite_def</code> if you want.</p>",
        "id": 261433597,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1636917222
    },
    {
        "content": "<p>We might need an <code>right_nsmul</code> field in <code>add_comm_monoid</code>, which would make it needed very early; but that's out of scope for this discussion anyway</p>",
        "id": 261433666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636917330
    },
    {
        "content": "<p>Can we move forward with <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s PR?</p>\n<blockquote>\n<p>use mul_opposite for multiplicative opposite <a href=\"https://github.com/leanprover-community/mathlib/issues/10302\">#10302</a></p>\n</blockquote>\n<p>It seems uncontroversial to me. I'll <code>bors d+</code> it, because Yury had a bors-git request.</p>",
        "id": 261556560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637009200
    },
    {
        "content": "<p>I forgot today to deal with the git request Yury had.</p>",
        "id": 261556774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637009322
    },
    {
        "content": "<p>Note that you need to merge master because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.opposite_regular.is_pretransitive\">docs#mul_action.opposite_regular.is_pretransitive</a> added in <a href=\"https://github.com/leanprover-community/mathlib/issues/10310\">#10310</a></p>",
        "id": 261557985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637009921
    },
    {
        "content": "<p>I've done that. Are you sure bors will screw up without a rebase? Do you have a commit in mind that shows the behavior?</p>",
        "id": 261640921,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637069830
    },
    {
        "content": "<p>I'm happy to do the rebase, but I don't want to clobber the history until I'm sure CI passes with my merge</p>",
        "id": 261640950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637069847
    }
]