[
    {
        "content": "<p>The code in this PR looks fine to me. But I'm a bit worried that this will create a bunch of duplication with the existing <code>algebra</code> cleass. What do others think?</p>",
        "id": 230306581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615795266
    },
    {
        "content": "<p>I think as long as we fit it \"underneath\" the current <code>algebra</code> in the typeclass graph so that we don't end up with duplicate lemmas, it should be fine. Maybe it would be easier to review if we added the new non-unital semiring stuff in its own PR first though.</p>\n<p>(<a href=\"https://github.com/leanprover-community/mathlib/issues/6591\">#6591</a> for mobile)</p>",
        "id": 230314012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615799666
    },
    {
        "content": "<p>There's also not _that_ much you can say about algebras that are not necessarily unital or associative so I don't feel like I'm planting too much of a weed here.</p>",
        "id": 230314099,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615799732
    },
    {
        "content": "<p>I contend that we definitely do need a class for algebras that are not necessarily unital or associative. If we grant that I think it's just a question of whether we first \"fix\" the existing <code>algebra</code> class so that it allows the underlying ring to be non-unital and/or non-associative (I claim it will then become my <code>non_unital_non_associative_algebra</code> class) or have the two classes coexist until this work is done.</p>",
        "id": 230314584,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800004
    },
    {
        "content": "<p>I have proposed the \"coexisting\" path but I can see the other point of view.</p>",
        "id": 230314745,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800071
    },
    {
        "content": "<p>I think removing unitarity from <code>algebra</code> will be a big headache for defeqness of <code>algebra_map</code>, and probably isn't worth it</p>",
        "id": 230314781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800082
    },
    {
        "content": "<p>As opposed to removing associativity which should be considerably easier</p>",
        "id": 230314824,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800118
    },
    {
        "content": "<p>But the first point alone is enough to justify the new class</p>",
        "id": 230314879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800130
    },
    {
        "content": "<p>I completely agree on the relative effort of unitarity vs associativity.</p>",
        "id": 230314908,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800144
    },
    {
        "content": "<p>Hopefully most of the interesting things you can say about non-unital algebras are already stated about unital ones</p>",
        "id": 230315000,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800190
    },
    {
        "content": "<p>But I'm not yet convinced we should be planning to build a world in which we have <code>non_unital_algebra</code> and <code>algebra</code> where the answer to the question \"why does <code>algebra</code> also exist?\" is \"legacy reasons\".</p>",
        "id": 230315016,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800198
    },
    {
        "content": "<p>So it really just becomes a game of weakening typeclasses</p>",
        "id": 230315024,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800202
    },
    {
        "content": "<p>I feel like the argument is more \"convenient definitional reduction\"</p>",
        "id": 230315077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800241
    },
    {
        "content": "<p>Let's face it, we have a semigroup class and it doesn't cause problems, it's just that nobody uses it.</p>",
        "id": 230315157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615800270
    },
    {
        "content": "<p>Like the answer to \"why does add_group let you define both sub and neg\"</p>",
        "id": 230315171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800281
    },
    {
        "content": "<p>and note also that after some head-scratching and debate about the definition of <code>-&gt;*</code>, the \"map which preserves multiplication\" which we needed for group theory, it was decided that it should also preserve 1.</p>",
        "id": 230315259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615800333
    },
    {
        "content": "<p>We have both notions but IMHO the decision to give the notation to the one preserving 1 was the right call.</p>",
        "id": 230315426,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800417
    },
    {
        "content": "<p>It will be similar for algebras: I argue we need both unital and non-unital maps.</p>",
        "id": 230315462,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236591.20non-unital.20algebras/near/230315077\">said</a>:</p>\n<blockquote>\n<p>I feel like the argument is more \"convenient definitional reduction\"</p>\n</blockquote>\n<p>Are you saying that forgetting legacy issues, the current <code>algebra</code> definition is worth having? Couldn't we just have a <code>of_unital_algebra_map</code> constructor?</p>",
        "id": 230315738,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800594
    },
    {
        "content": "<p>A constructor wouldn't help; because the constructed object couldn't have an <code>algebra_map</code> defeq to it's constructor argument as it does today</p>",
        "id": 230316057,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800744
    },
    {
        "content": "<p>Sorry, I understand that point. I just mean why is that so valuable?</p>",
        "id": 230316093,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800775
    },
    {
        "content": "<p>I don't know for sure, but I suspect it is</p>",
        "id": 230316172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800826
    },
    {
        "content": "<p>(other than the fact that we'd have a bunch of refactoring to do)</p>",
        "id": 230316173,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800826
    },
    {
        "content": "<p>Fair enough. I don't have a good reason to doubt you, I just want to check I'm not missing something.</p>",
        "id": 230316267,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800849
    },
    {
        "content": "<p>Attempting to refactor would certainly help answer the question of where it's valuable, even if the refactor turns out not be be a good idea</p>",
        "id": 230316342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615800889
    },
    {
        "content": "<p>Agreed. It's really the only way to find out. Hands up who wants to do that?</p>",
        "id": 230316384,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615800921
    },
    {
        "content": "<p>Could we add an account in the module-doc string explaining the relationship (and desired future relationship) with <code>algebra</code>?</p>",
        "id": 230638670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615957164
    },
    {
        "content": "<p>I think it's fine to do \"big refactors\" in chunks, but we should record in the source what the remaining plans are.</p>",
        "id": 230638680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615957182
    },
    {
        "content": "<p>Shouldn't there be instances from <code>[semiring R]</code> to <code>[non_unital_semiring]</code> and to <code>[non_assoc_semiring]</code>?</p>",
        "id": 230639867,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615958133
    },
    {
        "content": "<p>In fact, why can't you just make <code>semiring</code> extend those?</p>",
        "id": 230639878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615958157
    },
    {
        "content": "<p>Okay, I see why you can't extend both simultaneously. But</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">semiring.non_unital_semiring</span> <span class=\"o\">:</span> <span class=\"n\">non_unital_semiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">‹</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">semiring.non_assoc_semiring</span> <span class=\"o\">:</span> <span class=\"n\">non_assoc_semiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">‹</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>seem worthwhile.</p>",
        "id": 230640819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615959042
    },
    {
        "content": "<p>I've run out of time, but I started just trying to replace the definition in <a href=\"https://github.com/leanprover-community/mathlib/tree/replace_algebra_def\">branch#replace_algebra_def</a>.</p>",
        "id": 230641984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615960267
    },
    {
        "content": "<p>I barely started, but so far it looks fine.</p>",
        "id": 230642001,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615960286
    },
    {
        "content": "<p>I did a bit more. Still seems plausible, although I'm getting a lot of goals with opaque <code>•</code>s that I can't decipher the definitions of...</p>",
        "id": 230659158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615972383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236591.20non-unital.20algebras/near/230640819\">said</a>:</p>\n<blockquote>\n<p>Okay, I see why you can't extend both simultaneously. But</p>\n</blockquote>\n<p>I don't, would you mind elaborating?</p>",
        "id": 230659514,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615972574
    },
    {
        "content": "<p>Thank you so much for starting this. I just finished with some other work so I will join in later today when I have some time again.</p>",
        "id": 230690695,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615988185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236591.20non-unital.20algebras/near/230690695\">said</a>:</p>\n<blockquote>\n<p>Thank you so much for starting this. I just finished with some other work so I will join in later today when I have some time again.</p>\n</blockquote>\n<p>Urgh, I had a bunch of unexpected non-Mathlib stuff come up this evening so I didn't get to this after all. I definitely will be eager and able to work on this tomorrow though so I'll pick things up wherever you leave things!</p>",
        "id": 230780586,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616020342
    },
    {
        "content": "<p>I pushed up a few commits to the <code>replace_algebra_def</code> branch. I'd love if this contributed to a decision on <a href=\"https://github.com/leanprover-community/mathlib/issues/6591\">#6591</a> :-)</p>",
        "id": 231052068,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616171845
    },
    {
        "content": "<p>Ah, sorry, I haven't been looking at this. I'm optimistic. :-)</p>",
        "id": 231127320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616222644
    },
    {
        "content": "<p>I did a bit more on the <a href=\"https://github.com/leanprover-community/mathlib/commits/replace_algebra_def\">https://github.com/leanprover-community/mathlib/commits/replace_algebra_def</a></p>\n<p>It's hard to know how much there is to do but I can say that:</p>\n<ol>\n<li>The fundamental changes to <code>algebra/algebra/basic.lean</code> are essentially done.</li>\n<li>So far all fixes for dependent files have been easy.</li>\n<li>A cheap way to lower bound the amount of remaining work is to do a free text search for <code>smul_def' :=</code>. Currently this stands at just 16 results. This is just a lower bound and perhaps once these are done there will be a zillion other things to fix but at the moment, I share <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's optimism.</li>\n</ol>",
        "id": 231157506,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616259446
    },
    {
        "content": "<p>Having said all that, I'm currently blocked on doing what I'd really like by the limbo in which <a href=\"https://github.com/leanprover-community/mathlib/issues/6591\">#6591</a> stands. I appreciate everyone's busy but I'd be grateful for anything that could be done to help here.</p>",
        "id": 231157583,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616259528
    },
    {
        "content": "<p>I think an easy way to get some parts of <a href=\"https://github.com/leanprover-community/mathlib/issues/6591\">#6591</a> out of limbo would be to do a short PR that just adds the new <code>semiring</code>-like typeclasses</p>",
        "id": 231157711,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616259642
    },
    {
        "content": "<p>As in everything except for the proposed new file <code>non_unital.lean</code>?</p>",
        "id": 231157756,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616259681
    },
    {
        "content": "<p>I'd be happy to do that for sure.</p>",
        "id": 231157759,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616259688
    },
    {
        "content": "<p>(I'd still be blocked but this would be progress)</p>",
        "id": 231157772,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616259708
    },
    {
        "content": "<p>Yeah, I think that would make for an easier review</p>",
        "id": 231157815,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616259729
    },
    {
        "content": "<p>Thanks, I'll do that now.</p>",
        "id": 231157837,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616259753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Sorry that I haven't been more responsive... I think there has been too much going on in your PR/proposal for me to easily wrap my head around. I would really have to sit down and think it through. And I haven had/taken the time to do that yet.</p>",
        "id": 231158267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260193
    },
    {
        "content": "<p>So if you can split of \"easy\" bits, and in that way remove some clutter, that would be great.</p>",
        "id": 231158338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260224
    },
    {
        "content": "<p>Then it will be easier to have a focused discussion.</p>",
        "id": 231158349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260237
    },
    {
        "content": "<p>In principal, I agree that we'll need something like this. So I want to put in some time and energy to move this forward in the coming week.</p>",
        "id": 231158375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616260282
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> No need to apologise, it has been a complicated story and I appreciate you have a lot going on. I'm happy to wait etc. if necessary.</p>",
        "id": 231158431,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616260332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> This aims to do what you have suggested: <a href=\"https://github.com/leanprover-community/mathlib/pull/6786\">https://github.com/leanprover-community/mathlib/pull/6786</a></p>",
        "id": 231158449,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616260361
    },
    {
        "content": "<p>I did a few more sorries in <code>replace_algebra_def</code>, although my optimism is decreasing a bit. There are a lot of errors remaining, and often they involving replacing a <code>rfl</code> with a hard-to-guess term mode proof.</p>",
        "id": 231264772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616389950
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It's great to wake up to progress on that branch. I think it will take a while but it will get done. I hope to have some time this afternoon and will do some more if I do.</p>",
        "id": 231297692,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616414260
    },
    {
        "content": "<p>Also, I hate to pester people who I know are busy but I'd be very grateful for closure on <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/6591\">#6591</a> (which I will merge / rebase if <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> goes through) in the near future.</p>",
        "id": 231297945,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616414401
    },
    {
        "content": "<p>Okay, I pushed a few more changes on <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a>, removing the need for the <code>rw</code>s that used to be <code>simp</code>. I've hit merge.</p>",
        "id": 231394664,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616452295
    },
    {
        "content": "<p>Wow, a lot happened on that branch while I was away. Thanks again <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 231440161,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616490624
    },
    {
        "content": "<p>So <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> adds three new types of semiring. Do we need to follow it up with the nine new types of <code>comm_</code> and <code>ring</code> variants?</p>",
        "id": 231440477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616490835
    },
    {
        "content": "<p>I don't know but I'm beginning to feel a bit paralysed here. Can't we just merge this?</p>",
        "id": 231440692,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616490947
    },
    {
        "content": "<p>Let's decide that further variants of <code>ring</code> are out of scope for this PR. But I think we do need to decide, prior to merging, what the plan is here.</p>",
        "id": 231440866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491041
    },
    {
        "content": "<p>I forget, actually, what the situation is with <code>comm_</code>. Is it possible that we could have made it a mixin, rather than a structure extension? I wouldn't know immediately what the tradeoff is here.</p>",
        "id": 231441026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491135
    },
    {
        "content": "<p>Aside for legacy, is there a reason why we have things like <code>comm_ring</code> and can't just have <code>[comm_mul] [ring]</code> etc.?</p>",
        "id": 231441044,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616491148
    },
    {
        "content": "<p>Oh maybe that's what you're saying.</p>",
        "id": 231441063,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616491160
    },
    {
        "content": "<p>Hmm, maybe we've designed ourselves into an exponential amount of work and should plan to unwind?</p>",
        "id": 231441221,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616491239
    },
    {
        "content": "<p>As in, mixin as opposed to extend</p>",
        "id": 231441233,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616491250
    },
    {
        "content": "<p>To be clear <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, my comments are not \"we should not merge this PR\" but \"this PR highlights a corner we seem to have painted ourselves into\"</p>",
        "id": 231441399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616491326
    },
    {
        "content": "<p>Absolutely, I appreciate that!</p>",
        "id": 231441434,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616491347
    },
    {
        "content": "<p>I'm just selfishly eyeing my distant goal but I think this is a great opportunity to think about these things and I'm glad we're doing it.</p>",
        "id": 231441500,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616491397
    },
    {
        "content": "<p>I guess we might want some meta programming that can turn something like <code>[[comm_ring]]</code> into <code>[comm_mul] [has_neg] ... [semi_ring]</code> so that we have the linear amount of typeclasses without a huge mouthful all the time?</p>",
        "id": 231441642,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616491494
    },
    {
        "content": "<p>I need to think a little since I seem to just be proposing unbundling everything.</p>",
        "id": 231441859,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616491608
    },
    {
        "content": "<p>Yes, the extra syntax would be really nice. (On the other hand, Lean already receives some deserved flak from other theorem proving communities about our profusion of kinds of brackets...)</p>",
        "id": 231442025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491713
    },
    {
        "content": "<p>btw -- I just started a new thread in general on this topic. Perhaps we can move the general discussion there for greater visibility.</p>",
        "id": 231442076,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236591.20non-unital.20algebras/near/231442025\">said</a>:</p>\n<blockquote>\n<p>Yes, the extra syntax would be really nice. (On the other hand, Lean already receives some deserved flak from other theorem proving communities about our profusion of kinds of brackets...)</p>\n</blockquote>\n<p>This feels a bit like when non-mathematicians complain about mathematical notation.</p>",
        "id": 231442111,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616491801
    },
    {
        "content": "<p>Have we made any progress on <a href=\"https://github.com/leanprover-community/mathlib/tree/replace_algebra_def\">branch#replace_algebra_def</a>? I would feel much happier about making this change if I was sure that was going to work.</p>",
        "id": 231729433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616631024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236591.20non-unital.20algebras/near/231729433\">said</a>:</p>\n<blockquote>\n<p>Have we made any progress on <a href=\"https://github.com/leanprover-community/mathlib/tree/replace_algebra_def\">branch#replace_algebra_def</a>? I would feel much happier about making this change if I was sure that was going to work.</p>\n</blockquote>\n<p>Technically yes, I even pushed up <a href=\"https://github.com/leanprover-community/mathlib/commit/dbc5baebaf4998aa5b1e5f222358a9a86ac9d734\">a commit</a> yesterday.</p>",
        "id": 231758796,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616658407
    },
    {
        "content": "<p>Assuming it's something we want, I'm very happy to continue to push on that. It's hard to know how much work it will be but my experience so far leaves me quite optimistic.</p>",
        "id": 231758876,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616658470
    },
    {
        "content": "<p>On the other hand I kind of gave up on <a href=\"https://github.com/leanprover-community/mathlib/pull/6786\">https://github.com/leanprover-community/mathlib/pull/6786</a> after the goalposts seemed to move at exactly the same speed as whatever effort was put in so I was actually beginning to think of diverting time to a different corner of Mathlib.</p>",
        "id": 231759005,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616658543
    },
    {
        "content": "<p>I'm of the opinion that the refactor is worth having even if we never manage to replace the existing <code>algebra</code></p>",
        "id": 231759684,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616659087
    },
    {
        "content": "<p>Yes: <code>replace_algebra_def</code> at the end of the day can not actually replace the def, and still it will have made lots of constructions more robust for future changes.</p>",
        "id": 231774057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616666824
    },
    {
        "content": "<p>I completely understand that you're frustrated by the slow progress on getting <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> merged. :-( Sorry. It's a pretty significant change to the algebraic hierarchy, and with people still thinking about the potential consequences we just can't rush it.</p>",
        "id": 231774219,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616666902
    },
    {
        "content": "<p>I definitely want it all to happen, I like Lie algebras too. :-)</p>",
        "id": 231774240,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616666913
    },
    {
        "content": "<p>I think part of what has happened is that we've started to realise that the various APIs for morphisms, equivalences, subobjects etc. tend to gradually drift out of sync over time, as people tweak the ones they are interested in.</p>\n<p>Eventually this does become a problem, particularly if there ends up being no canonical model for new instances to copy.</p>\n<p>You've come along with this PR at a moment when we're worried about this, and so we're using your PR as a \"volunteer\" guinea pig to work out what needs to be done. We'll get there. :-)</p>",
        "id": 231776205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616667945
    },
    {
        "content": "<p>Thanks for these words, we will of course get there, and I still feel I get easily 1000x more back from Mathlib, and its careful design decisions, than I put in. I'll put in some more time on the <a href=\"https://github.com/leanprover-community/mathlib/tree/replace_algebra_def\">branch#replace_algebra_def</a> this afternoon and get it a bit closer.</p>",
        "id": 231776831,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616668262
    },
    {
        "content": "<p>Should <code>mul_one_class</code> be called <code>unital_magma</code>?</p>",
        "id": 231776888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616668307
    },
    {
        "content": "<p>Maybe, and at the very least that should probably go in its doc string. On the other hand, <code>to_additive</code> might not like this.</p>",
        "id": 231777137,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616668428
    },
    {
        "content": "<p><code>unital_add_magma</code> ought to be easy for <code>to_additive</code>to understand</p>",
        "id": 231777532,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616668596
    },
    {
        "content": "<p>I'm just asking if the name would be better for mathematicians, since I'm not one!</p>",
        "id": 231784281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616671864
    },
    {
        "content": "<p>These are called loops I think</p>",
        "id": 231785840,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616672723
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Quasigroup#Loops\">https://en.wikipedia.org/wiki/Quasigroup#Loops</a></p>",
        "id": 231785853,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616672728
    },
    {
        "content": "<p>I claim that most mathematicians couldn't tell you what a magma is so I think either name is fine. On the one hand, even if I'm right that it's not a familiar term to most mathematicians, \"unital magma\" is at least _somewhat_ known. On the other hand, <code>mul_one_class</code> is pretty easy to guess.</p>",
        "id": 231785893,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616672742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, doesn't a loop have a inverse?</p>",
        "id": 231785991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616672768
    },
    {
        "content": "<p>Ah yes, more or less an inverse</p>",
        "id": 231786064,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616672796
    },
    {
        "content": "<p>I had to stare at this picture before I answered: <a href=\"https://en.wikipedia.org/wiki/Magma_%28algebra%29#/media/File:Magma_to_group4.svg\">https://en.wikipedia.org/wiki/Magma_%28algebra%29#/media/File:Magma_to_group4.svg</a></p>",
        "id": 231786089,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616672809
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/17Vz79Js7ZQeF1e9AMSKxgGV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/17Vz79Js7ZQeF1e9AMSKxgGV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/17Vz79Js7ZQeF1e9AMSKxgGV/image.png\"></a></div>",
        "id": 231786097,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616672814
    },
    {
        "content": "<p>That's also what I was going from</p>",
        "id": 231786137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616672836
    },
    {
        "content": "<p>I claim <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> 's answer as evidence that these terms are no familiar to mathematicians</p>",
        "id": 231786140,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616672837
    },
    {
        "content": "<p>Ahahah, we had the same idea</p>",
        "id": 231786144,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616672839
    },
    {
        "content": "<p>(I just hope whoever made that picture got it right <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 231786212,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616672873
    },
    {
        "content": "<p>I've heard of groups -- does this help?</p>",
        "id": 231786343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616672938
    },
    {
        "content": "<p>I am almost sure that all these terms more general than semigroup are very rarely used by \"standard\" mathematicians. Magma is probably quite well known, but for the others \"wikipedia here we come\"</p>",
        "id": 231786390,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616672956
    },
    {
        "content": "<p>.. and after reading Wikipedia, I would still check that all the assumptions are there with Lean...</p>",
        "id": 231787504,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616673515
    },
    {
        "content": "<p>I guess I've heard \"loop\" in the context of the 7-sphere but I only just realised it's the same term.</p>",
        "id": 231787657,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616673597
    },
    {
        "content": "<p>Loop is still reasonable because of... well, loops, that form a... loop (before taking homotopy classes, these are needed only for associativity)</p>",
        "id": 231787897,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1616673682
    },
    {
        "content": "<p>Moufang loops show up also every once in a while.</p>",
        "id": 231788355,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1616673864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I've added a couple of tiny commits to <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> to see if I can get the build passing.</p>",
        "id": 231825538,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616687144
    },
    {
        "content": "<p>I'm not sure if they'll suffice or even if we'll keep them (though I suspect we will).</p>",
        "id": 231825715,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616687201
    },
    {
        "content": "<p>Argh, a new failure. OK I'm looking at the next one 🤨</p>",
        "id": 231826009,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616687290
    },
    {
        "content": "<p>I think my new plan is perhaps to split this in two again, and create a new PR containing just <code>mul_one_class</code> and <code>add_zero_class</code>.</p>",
        "id": 231826462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616687448
    },
    {
        "content": "<p>right now we're getting into pain where the generalizations for <code>monoid</code> are breaking the elaborator that aren't generalized yet for <code>semiring</code></p>",
        "id": 231826534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616687474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236591.20non-unital.20algebras/near/231826462\">said</a>:</p>\n<blockquote>\n<p>I think my new plan is perhaps to split this in two again, and create a new PR containing just <code>mul_one_class</code> and <code>add_zero_class</code>.</p>\n</blockquote>\n<p>Yeah I think you're probably right.</p>",
        "id": 231827623,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616687846
    },
    {
        "content": "<p>Zeno says we can keep doing this and still get there eventually!</p>",
        "id": 231827646,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616687859
    },
    {
        "content": "<p>The <a href=\"https://github.com/leanprover-community/mathlib/pull/6786/commits/274ceb4987e8b19f0b0cc8fd66248bed9db8a427\">latest fix</a> was a fun example of computer-assisted proof. I didn't bother trying to understand the details of the middle of the lemma. I got Lean to do the work for me by asking it the type of the relevant subterm. It said <code>submonoid P.quotient</code>. I blindly inserted that and it worked.</p>",
        "id": 231828633,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616688187
    },
    {
        "content": "<p>Can you make a quick pr for the <code>mul_hom.inverse</code>?</p>",
        "id": 231828875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616688251
    },
    {
        "content": "<p>Yeah sure. Just pull that out totally on its own?</p>",
        "id": 231828929,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616688271
    },
    {
        "content": "<p>I had thought that might be worth doing.</p>",
        "id": 231828948,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616688280
    },
    {
        "content": "<p>Yeah, why not - was there anything else like that in the original PR?</p>",
        "id": 231828975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616688292
    },
    {
        "content": "<p>I feel like you might have added another <code>inverse</code> elsewhere, but I can't see it now</p>",
        "id": 231829013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616688304
    },
    {
        "content": "<p>No I don't think I did. I'll double check now but I'm pretty sure that was it.</p>",
        "id": 231829063,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616688320
    },
    {
        "content": "<p>(I mean I used <code>mul_hom.inverse</code> to define an inverse for the non-unital algebra homs that I was defining but these don't exist yet.)</p>",
        "id": 231829148,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616688348
    },
    {
        "content": "<p>Since you started this rolling, do you want to create the \"non-assoc monoid\" PR under your account? <a href=\"https://github.com/leanprover-community/mathlib/compare/non_assoc_monoids?expand=1\">https://github.com/leanprover-community/mathlib/compare/non_assoc_monoids?expand=1</a></p>",
        "id": 231829446,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616688453
    },
    {
        "content": "<p>Or shall I just go ahead and do it?</p>",
        "id": 231829811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616688574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I think I might use the coming week to see if I can carry out the refactor you started in <a href=\"https://github.com/leanprover-community/mathlib/tree/replace_algebra_def\">branch#replace_algebra_def</a> At the moment the branch is a bit of a mess and fairly stale (231 commits behind master, 56 ahead) so to make a serious effort I'd like to rebase, totally rewrite its history. The easiest way to do this might mean destroying some of your commits on that branch. Would that be OK?</p>",
        "id": 232163441,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616934035
    },
    {
        "content": "<p>Also I think I will divide the work in two. First I'll just change the definition of <code>algebra</code> to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_mul_assoc'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">mul_smul_comm'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Assuming I get this working, and once we have the not-necessarily-unital, not-necessarily-associative ring classes ready, I can then undertake weakening <code>semiring A</code> as a separate piece of work.</p>",
        "id": 232163568,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616934218
    },
    {
        "content": "<p>This should also allow a lot of the refactor not to be blocked by the rather delicate work that <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> is currently doing to introduce the non-unital, non-assoc stuff.</p>",
        "id": 232163621,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616934266
    },
    {
        "content": "<p>Of course!</p>",
        "id": 232164497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616935253
    },
    {
        "content": "<p>(I used to use rebase, and at some point decided it served no purpose of simply merging master. The git commit history looks messy, but it all gets squashed when it is added by bors, anyway.)</p>",
        "id": 232164529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616935299
    },
    {
        "content": "<p>Yes, as you say, changing the definition of <code>algebra</code> is pretty much orthogonal to other work introducing non_unital and non_assoc.</p>",
        "id": 232164598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616935365
    },
    {
        "content": "<p>I've made a bit more progress with <a href=\"https://github.com/leanprover-community/mathlib/issues/6865\">#6865</a> now; it refactors <code>monoid_hom</code> and <code>submonoid</code> to use the new relaxed typeclasses, and supplies instances for <code>pi</code>, <code>prod</code>, <code>opposite</code>, and <code>set</code>. Still to go is <code>finsupp</code>.</p>",
        "id": 232279611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617029069
    },
    {
        "content": "<p>That's great. I've made some more progress on <a href=\"https://github.com/leanprover-community/mathlib/tree/replace_algebra_def\">branch#replace_algebra_def</a> today too after a giant rebase. Slow but steady progress.</p>",
        "id": 232283581,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617030496
    },
    {
        "content": "<p>(I think there are only 6 remaining references to the old <code>algebra.mk</code> left, though there is plenty to do beyond refactoring these.)</p>",
        "id": 232283762,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617030568
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6865\">#6865</a> now has dfinsupp and monoid_algebra too, so I'm happy to call it done</p>",
        "id": 232490356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617135320
    },
    {
        "content": "<p>I'll hopefully have a look tonight or tomorrow.</p>",
        "id": 232541313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617170922
    },
    {
        "content": "<p>Great news, thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'll look too and share any remarks if I have them. This is really great!</p>",
        "id": 232553194,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617179070
    },
    {
        "content": "<p>I've pushed a bit harder on <a href=\"https://github.com/leanprover-community/mathlib/tree/replace_algebra_def\">branch#replace_algebra_def</a> over the last couple of days too. I'm getting a little worried by the fact that it's a lot of work and more importantly, it's very hard to tell how much work remains. With the latter concern in mind I've pivoted to mostly fixing errors with <code>sorry</code> in the hope that I can get some sort of bound on how much work there is by having a sorry-ridden, but working, build hopefully today.</p>",
        "id": 232553304,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617179140
    },
    {
        "content": "<p>I've hit merge on <a href=\"https://github.com/leanprover-community/mathlib/issues/6865\">#6865</a>. Let's get back to <a href=\"https://github.com/leanprover-community/mathlib/issues/6591\">#6591</a> soon! :-)</p>",
        "id": 232569557,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617187652
    },
    {
        "content": "<p>And I've cancelled it, because my other big refactor has broken it (in a trivial way)</p>",
        "id": 232573035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617189612
    },
    {
        "content": "<p>Once it's merged, I'll try to solve the merge conflicts it will create in <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a></p>",
        "id": 232573416,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617189836
    },
    {
        "content": "<p>Feel free to close <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> and cherry pick (or whatever) to a new PR + branch if that is an easier route to resolving conflicts.</p>",
        "id": 232579076,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617192748
    },
    {
        "content": "<p>The conflicts all look trivial to merge in the web UI, which I'd do myself if it weren't so utterly painful to select lines on mobile. Mind taking the reins again <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>?</p>",
        "id": 232718114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617263953
    },
    {
        "content": "<p>Of course happy to.</p>",
        "id": 232719153,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617264453
    },
    {
        "content": "<p>I'll have a go now. Nice to have a distraction from the <a href=\"https://github.com/leanprover-community/mathlib/tree/replace_algebra_def\">branch#replace_algebra_def</a> job which I'm now a bit worried about.</p>",
        "id": 232719235,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617264487
    },
    {
        "content": "<p>Resolved and pushed. <del>Just checking I didn't mess anything up.</del> Still some tidy up to do.</p>",
        "id": 232721304,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617265779
    },
    {
        "content": "<p>Once you have the merge sorted out and a cache to work from, can you try removing some of the <code>(_ : _ -&gt;* _)</code> annotations you added to get the build passing? I'm thinking my generalization of <code>monoid_hom</code> may have solved the problem those were working around</p>",
        "id": 232722332,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617266366
    },
    {
        "content": "<p>Sure, I'm keen to roll any of those back that are no longer needed.</p>",
        "id": 232722815,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617266632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236591.20non-unital.20algebras/near/232722332\">said</a>:</p>\n<blockquote>\n<p>Once you have the merge sorted out and a cache to work from, can you try removing some of the <code>(_ : _ -&gt;* _)</code> annotations you added to get the build passing? I'm thinking my generalization of <code>monoid_hom</code> may have solved the problem those were working around</p>\n</blockquote>\n<p>I just did this exercise and was able to push up <a href=\"https://github.com/leanprover-community/mathlib/pull/6786/commits/f3ab4402734ff43ab336c97484039aefd0dca832\">this commit</a> which removed the changes to <code>ring_theory/jacobson.lean</code>. However I found that the remaining breadcrumbs we added for the elaborator cannot be removed. Specifically we still need:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">analysis</span><span class=\"bp\">/</span><span class=\"n\">special_functions</span><span class=\"bp\">/</span><span class=\"n\">trigonometric.lean</span>\n<span class=\"bp\">-</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">exists_quadratic_eq_zero</span> <span class=\"n\">one_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_mul_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">⟩,</span>\n<span class=\"bp\">+</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">exists_quadratic_eq_zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">one_ne_zero</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exists_eq_mul_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">hw</span><span class=\"o\">⟩,</span>\n\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">/</span><span class=\"n\">invertible.lean</span>\n<span class=\"bp\">-</span> <span class=\"n\">invertible.map</span> <span class=\"n\">C.to_monoid_hom</span> <span class=\"n\">_</span>\n<span class=\"bp\">+</span> <span class=\"n\">invertible.map</span> <span class=\"o\">(</span><span class=\"n\">C.to_monoid_hom</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n\n <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">/</span><span class=\"kd\">variables</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">degrees_monomial_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">to_multiset_single</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">degrees_monomial_eq</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">to_multiset_single</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">polynomial</span><span class=\"bp\">/</span><span class=\"n\">degree</span><span class=\"bp\">/</span><span class=\"n\">definitions.lean</span>\n<span class=\"bp\">-</span> <span class=\"n\">leading_coeff_hom.map_pow</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n<span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">leading_coeff_hom</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span> <span class=\"n\">p</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 232753735,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617282781
    },
    {
        "content": "<p>Interesting that the <code>submonoid</code> annotations could go away, but not the <code>monoid_hom</code> ones</p>",
        "id": 232754270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617283023
    },
    {
        "content": "<p>I just addressed some of the pending review requests on <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a>. The following list still remains:</p>\n<ul>\n<li>[ ] <code>ring_hom</code> should be relaxed to require <code>non_assoc_semiring</code> instead of the current <code>semiring</code></li>\n<li>[ ] <code>subsemiring</code> should be relaxed to require <code>non_assoc_semiring</code> instead of the current <code>semiring</code> (and provided with a <code>non_assoc_semiring</code> instance)</li>\n<li>[ ] instances of the new classes for <code>opposite</code></li>\n<li>[ ] instances of the new classes for <code>with_zero</code> - <code>with_zero (some_semigroup)</code> is obviously a <code>semigroup_with_zero</code></li>\n<li>[ ] instances of the new classes for <code>monoid_algebra</code></li>\n<li>[ ] instances of the new classes for <code>direct_sum</code> (in <code>direct_sum_graded.lean</code>)</li>\n</ul>",
        "id": 233116239,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617574113
    },
    {
        "content": "<p>I don't plan to take these up myself in the near future but I will eventually return to this work if it is still pending. For now I would like to resume formalising some mathematics, rather than getting mired in this very valuable, but not so exciting refactoring work.</p>",
        "id": 233116259,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617574149
    },
    {
        "content": "<p>In addition, after pushing on the <a href=\"https://github.com/leanprover-community/mathlib/tree/replace_algebra_def\">branch#replace_algebra_def</a> last week I succeeded only in convincing myself that this is a very significant refactor. I'm willing to do it but it could take me weeks I'd need encouragement that this is something we really, definitely want enough.</p>",
        "id": 233116280,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617574184
    },
    {
        "content": "<p>So I guess I'm just saying: I'm absolutely not abandoning this effort but I am taking a break from it for at least a week!</p>",
        "id": 233116368,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1617574294
    },
    {
        "content": "<p>Generalizing <code>ring_hom</code> is not really viable yet, because it extends <code>monoid_with_zero_hom</code>. My suggestion would be simply removing that suggestion from the list.</p>",
        "id": 233168471,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617627543
    },
    {
        "content": "<p>I'd forgotten that pain point</p>",
        "id": 233171221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617629106
    },
    {
        "content": "<p>Although generalizing subsemiring is hard without ring_homs</p>",
        "id": 233171267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617629128
    },
    {
        "content": "<p>So I think we really do need that new typeclass, <code>mul_zero_one_class</code></p>",
        "id": 233171303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617629159
    },
    {
        "content": "<p>Which would be a common ancestor of <code>monoid_with_zero</code> and <code>non_assoc_semiring</code></p>",
        "id": 233171554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617629287
    },
    {
        "content": "<p>Can we kick that one down the road, and leave both <code>ring_hom</code> and <code>subsemiring</code> for later, then?</p>",
        "id": 233240794,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617662168
    },
    {
        "content": "<p>I'm a little suspicious that<code>non_assoc_semiring</code> isn't useful at all without the <code>ring_hom</code> support - so if anything, I'd lean towards either growing the PR to include <code>mul_zero_one_class</code>, or creating a separate PR that adds <code>mul_zero_one_class</code> first</p>",
        "id": 233241851,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617662965
    },
    {
        "content": "<p>We have <a href=\"https://github.com/leanprover-community/mathlib/issues/6865\">#6865</a> now to use as a template for such a separate PR, so the process is straightforward albeit very tedious</p>",
        "id": 233241977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617663066
    },
    {
        "content": "<p>In the interest of making gradual progress, I just split <a href=\"https://github.com/leanprover-community/mathlib/issues/7050\">#7050</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7049\">#7049</a> out of Oliver's work</p>",
        "id": 233244828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617665113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236591.20non-unital.20algebras/near/233171303\">said</a>:</p>\n<blockquote>\n<p>So I think we really do need that new typeclass, <code>mul_zero_one_class</code></p>\n</blockquote>\n<p>Done in <a href=\"https://github.com/leanprover-community/mathlib/issues/7176\">#7176</a></p>",
        "id": 234493297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618405031
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 234537742,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1618420307
    },
    {
        "content": "<p>Now merged. I might do one more split for <code>nonassoc_semiring</code>, since that's the one that permits all the extra generalizations</p>",
        "id": 234748620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618519079
    },
    {
        "content": "<p>(subsemiring, ring_hom, ...)</p>",
        "id": 234748705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618519104
    },
    {
        "content": "<p>We're getting there. :-)</p>",
        "id": 234771538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618529750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I was going to look at resolving the conflicts in <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> this afternoon but I see you've already done it. Thank you very much! I'm going to try and finish some other work over the next week and then I expect I'll take up the non-assoc ring / algebra work properly again.</p>",
        "id": 234833831,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1618570937
    },
    {
        "content": "<p>They were smaller than I expected so I figured I'd just try resolving them in-browser</p>",
        "id": 234834461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618571266
    },
    {
        "content": "<p>Next step: resolve on your phone!</p>",
        "id": 234834651,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1618571359
    },
    {
        "content": "<p>I've done that once or twice and the experience has been painful. Android's gboard now has a full-keyboard text selection mode that makes it marginally less bad.</p>",
        "id": 234834901,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618571493
    },
    {
        "content": "<p>Looks like <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> is back at the \"needs more annotations\" stage</p>",
        "id": 234851032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618579109
    },
    {
        "content": "<p>Yeah I see that. I'll add what's necessary to get the build green either this evening or tomorrow.</p>",
        "id": 234851758,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1618579358
    },
    {
        "content": "<p>I had a go at generalizing ring_hom on top of your PR in another branch, <a href=\"https://github.com/leanprover-community/mathlib/tree/non_unital_assoc_rings-eric-wieser\">branch#non_unital_assoc_rings-eric-wieser</a>. If the build passes, I'll push it onto your PR</p>",
        "id": 235752511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619127520
    },
    {
        "content": "<p>I also tried splitting out <code>semigroup_with_zero</code> into its own PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/7346\">#7346</a>), and was surprised to find that most of the <code>zero_eq_one</code> annotation regressions are actually introduced by that typeclass</p>",
        "id": 235955482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619254854
    },
    {
        "content": "<p>I found and pushed a way to avoid needing any of those annotations</p>",
        "id": 236003811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619296778
    },
    {
        "content": "<p>I'd appreciate if someone could take a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/7346\">#7346</a> so that I can resume the refactor of <code>subsemiring</code> to be non-associative on the branch above</p>",
        "id": 236175261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619444298
    },
    {
        "content": "<p>Likewise!</p>",
        "id": 236175653,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619444456
    },
    {
        "content": "<p>It turns out one of my very early claims in this saga was wrong - I claimed that <code>algebra R A</code> could be relaxed from <code>semiring A</code> to <code>non_assoc_semiring A</code> with minimal changes. Having just tried it, it turns out that this then isn't strong enough to prove <code>algebra.to_semimodule.mul_smul</code></p>",
        "id": 236181569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619446730
    },
    {
        "content": "<p>This doesn't matter as long as I do change the definition of <code>algebra</code> to extend <code>module</code> though, right?</p>",
        "id": 236184852,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619447890
    },
    {
        "content": "<p>I'm hoping to start that work (again, but properly this time) by the end of the week.</p>",
        "id": 236184930,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619447925
    },
    {
        "content": "<p>Unfortunately after the merge, <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> now hits a deterministic timeout. More unfortunately, it only does so in CI and not when run locally for me...</p>",
        "id": 236468567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619598272
    },
    {
        "content": "<p>Maybe you can change the <code>lean -T</code> parameter on your local Lean to match the one used in CI?</p>",
        "id": 236468990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619598500
    },
    {
        "content": "<p>I already have the <code>-T</code> parameter configured to match CI in my vscode settings</p>",
        "id": 236515451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619619840
    },
    {
        "content": "<p>Seems it was a nondeterministic cache and the problem went away</p>",
        "id": 236678144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619705121
    },
    {
        "content": "<p>The next problem is <code>@[simps]</code> timing out on a <code>direct_sum</code> lemma, which should hopefully be fixed by <a href=\"https://github.com/leanprover-community/mathlib/issues/7403\">#7403</a></p>",
        "id": 236678172,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619705132
    },
    {
        "content": "<p>I've said it before, but thank you so much for sticking with this! I'm planning to resume the work to change the algebra definition tomorrow afternoon (assuming <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> likes that idea).</p>",
        "id": 236679019,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619705409
    },
    {
        "content": "<p>Speaking as your boss I would strongly recommend that you just do what the heck takes your fancy.</p>",
        "id": 236697142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619710976
    },
    {
        "content": "<p>Is a non-unital algebra covered by <code>[module R A] [smul_comm_class R A A] [is_scalar_tower R A A]</code>?</p>",
        "id": 237038169,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619944944
    },
    {
        "content": "<p>Am I confused or is there a missing <code>[has_scalar A A]</code>? So the idea that the product of elements <code>x y : A</code> was <code>x • y</code> instead of <code>x * y</code>? I'm a bit uneasy about that.</p>\n<p>But more seriously, I don't see anything forcing the product to be linear. E.g., if <code>x y z : A</code>, we don't necessarily have <code>x • (y + z) = x • y + x • z</code> etc.</p>",
        "id": 237053770,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1619963064
    },
    {
        "content": "<p>Does this come from <code>distrib_mul_action</code>, if we're thinking about things this way?</p>",
        "id": 237060414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619968891
    },
    {
        "content": "<p>Yes, but I guess <code>add_smul</code> doesn't</p>",
        "id": 237064160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619972794
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib/issues/7441\">#7441</a> which at least shows that my suggestion offers some generalizations, albeit not the one you needed.</p>",
        "id": 237088314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619992477
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236591.20non-unital.20algebras/near/236003811\">said</a>:</p>\n<blockquote>\n<p>I found and pushed a way to avoid needing any of those annotations</p>\n</blockquote>\n<p>I had to add them back to <a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> in the end. I'm sure there's a similar solution, but we already decided not to bother looking for it.</p>",
        "id": 237846385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620403063
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6786\">#6786</a> should be ready for a final look over, I've wrapped up all the scope creep I can think of</p>",
        "id": 241418736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622739047
    },
    {
        "content": "<p>This is marvellous. There's a good chance I'll actually need to use <code>non_unital_non_assoc_semiring</code> tomorrow!</p>",
        "id": 241438790,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622747706
    },
    {
        "content": "<p>If you're lucky, the semiring lemmas you want to use with it will be generalized already!</p>",
        "id": 241444385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622750308
    },
    {
        "content": "<p>I think I might be able to generalize <a href=\"https://github.com/leanprover-community/mathlib/issues/6775\">#6775</a> using this as well; as it turns out, the correspondence between Boolean rings and Boolean algebras extends to Boolean rings without unit and generalized Boolean algebras.</p>",
        "id": 241458556,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1622756123
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/5e3e16a6488be72497f3dc476ec5306cd294251d/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f333132312f656d6f6a692f696d616765732f31383532372e706e67\" title=\"merge\"></p>",
        "id": 241839533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623099378
    },
    {
        "content": "<p>I just saw the notification. This is huge for me! Absolutely marvellous work. Thanks!</p>",
        "id": 241839846,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1623099499
    },
    {
        "content": "<p>Thanks a lot to <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> and <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> for making this happen.</p>",
        "id": 241839946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623099550
    },
    {
        "content": "<p>99% <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> for the record!</p>",
        "id": 241841071,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1623100108
    },
    {
        "content": "<p>I'm a little worried this may have substantially impacted the CI build time, although it's possibly that github is just under more load. Is there an easy way to measure?</p>",
        "id": 242028294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623225268
    },
    {
        "content": "<p>There's the <a class=\"stream\" data-stream-id=\"113538\" href=\"/#narrow/stream/113538-CI\">#CI</a>  stream, does it contain the information you need?</p>",
        "id": 242029596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623226102
    },
    {
        "content": "<p>According to that it's only 3 minutes slower, which isn't catastrophic</p>",
        "id": 242030547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623226677
    },
    {
        "content": "<p>The noise level in those timings is probably larger than 3 minutes.</p>",
        "id": 242032630,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623227868
    }
]