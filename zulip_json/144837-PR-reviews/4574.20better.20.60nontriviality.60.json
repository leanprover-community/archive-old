[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> In <a href=\"https://github.com/leanprover-community/mathlib/issues/4574\">#4574</a> I'm trying to make <code>nontriviality</code> tactic extensible. E.g., I want <code>nontriviality α</code> to work if the goal is <code>is_open s</code>, <code>s : set α</code>, and for some other goals.</p>",
        "id": 212983688,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602453744
    },
    {
        "content": "<p>I really like it!</p>",
        "id": 212983764,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602453867
    },
    {
        "content": "<p>I guess my <code>meta</code> code is suboptimal, feel free to improve it.</p>",
        "id": 212983844,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602454055
    },
    {
        "content": "<p>Here are a few things I don't know how to do:</p>\n<ul>\n<li>make it accept a list of additional <code>simp</code> lemmas;</li>\n<li>given <code>nontriviality R</code>, make it mark <code>semimodule.subsingleton R</code> as an instance.</li>\n</ul>",
        "id": 212983900,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602454138
    },
    {
        "content": "<p>One more idea: if we have <code>[inhabited α]</code>, then add <code>unique α</code> instead of <code>subsingleton α</code> to the context.</p>",
        "id": 212984133,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602454468
    },
    {
        "content": "<p>And I can't make <a href=\"https://github.com/leanprover-community/mathlib/blob/extend-nontriviality/src/analysis/calculus/times_cont_diff.lean#L2375\">https://github.com/leanprover-community/mathlib/blob/extend-nontriviality/src/analysis/calculus/times_cont_diff.lean#L2375</a> work with <code>nontriviality</code>.</p>",
        "id": 212984451,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602454945
    },
    {
        "content": "<p>Or let me try...</p>",
        "id": 212984456,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602454965
    },
    {
        "content": "<p>What about <a href=\"https://github.com/leanprover-community/mathlib/blob/73f119e04c35a4ab10eae68345472d78e5c4f6c7/src/analysis/normed_space/operator_norm.lean#L835\">https://github.com/leanprover-community/mathlib/blob/73f119e04c35a4ab10eae68345472d78e5c4f6c7/src/analysis/normed_space/operator_norm.lean#L835</a> ?</p>",
        "id": 212984525,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602455137
    },
    {
        "content": "<p>Maybe there's nothing that needs to be done there</p>",
        "id": 212984585,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602455231
    },
    {
        "content": "<p>But that lemma could be deleted after your tactic comes in, is that the idea?</p>",
        "id": 212984636,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602455288
    },
    {
        "content": "<p>AFAIR, <code>subsingleton E ∨ _</code> is used as a technical assumption in the proof of the inverse function theorem.</p>",
        "id": 212984659,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602455372
    },
    {
        "content": "<p>And the lemma's uses, in places like <a href=\"https://github.com/leanprover-community/mathlib/blob/952a407c2ea89c154d718aa1f92fd988f2b5d338/src/analysis/calculus/inverse.lean#L379\">https://github.com/leanprover-community/mathlib/blob/952a407c2ea89c154d718aa1f92fd988f2b5d338/src/analysis/calculus/inverse.lean#L379</a> , replaced by uses of the tactic?</p>",
        "id": 212984661,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602455375
    },
    {
        "content": "<p>E.g., in <a href=\"https://github.com/leanprover-community/mathlib/blob/952a407c2ea89c154d718aa1f92fd988f2b5d338/src/analysis/calculus/inverse.lean#L158\">https://github.com/leanprover-community/mathlib/blob/952a407c2ea89c154d718aa1f92fd988f2b5d338/src/analysis/calculus/inverse.lean#L158</a></p>",
        "id": 212984716,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602455413
    },
    {
        "content": "<p>Snap ... but yes, I meant that in the the inverse function where this lemma is currently used, could you use an improved <code>nontriviality</code> instead?</p>",
        "id": 212984717,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1602455413
    },
    {
        "content": "<p>I did not plan to refactor <code>analysis/calculus/inverse</code>.</p>",
        "id": 212984787,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602455566
    },
    {
        "content": "<p>And I don't see how can we get rid of this this assumption in the first part of the file.</p>",
        "id": 212984849,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602455683
    }
]