[
    {
        "content": "<p>I just made another hint tactic, this one called <code>rw_hint</code>. It just tries out every hypothesis and lemma in the environment, and reports which ones are usable as rewrites against the current goal.</p>",
        "id": 188684993,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582237199
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>## rw_hint\n\nThe tactic `rw_hint` will try to rewrite the goal using all available lemmas and hypotheses,\nreporting those that make progress.\n\n```\nexample (P Q : Prop) (h : P ↔ Q) (p : P) : Q :=\nbegin\n  rw_hint, -- Prints &quot;Try this: rw ←h&quot;\n  rw ←h, exact p,\nend\n```\n\nFor now, it really reports everything it finds, with no filter,\nso for many goals (particularly those involving numerals) you will see a lot of spurious junk.\n</pre></div>",
        "id": 188685046,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582237218
    },
    {
        "content": "<p>As you might expect there's some junk in the output, but it often seems useful.</p>",
        "id": 188685080,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582237237
    },
    {
        "content": "<p>(One day we'll summon the energy to get <code>rewrite_search</code> into mathlib, and then we'll really be cooking with gas.)</p>",
        "id": 188685107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1582237260
    },
    {
        "content": "<p>I'd like to solicit more thoughts about this one, particularly about my comments here: <a href=\"https://github.com/leanprover-community/mathlib/pull/2030#issuecomment-591372886\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/2030#issuecomment-591372886\">https://github.com/leanprover-community/mathlib/pull/2030#issuecomment-591372886</a> </p>\n<p>The \"throw everything at the wall and see what sticks\" approach doesn't appeal to me. I don't think the tactic is helpful for mathlib development, and I personally wouldn't direct students toward it. But others might feel differently and I don't want to reject Scott's work based on my own sense of aesthetics.</p>",
        "id": 189500454,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583162347
    },
    {
        "content": "<p>There's two types of tactics: those that remain in proof scripts and those that don't. <code>hint</code> is clearly in the latter category. For that reason, I'm a lot more opportunistic. Tactics that will remain in proof scripts need to be somewhat stable and predictable. But the ones from the \"discovery\" section can be wild, and if they change 2 or 3 times a month, I wouldn't care too much (especially if they become better).<br>\nHence I'm leaning towards \"let's merge this, and improve or replace it with something better when we have an idea\".</p>",
        "id": 189501373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583162895
    },
    {
        "content": "<p>I'm still hoping that these are steps towards <code>rw_search</code> and <code>back_search</code> landing in mathlib.</p>",
        "id": 189501406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583162914
    },
    {
        "content": "<p>Those might supersede <code>hint</code> and/or <code>suggest</code>.</p>",
        "id": 189501435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583162934
    },
    {
        "content": "<p>Maybe they don't.</p>",
        "id": 189501454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583162943
    },
    {
        "content": "<p>A bit of advertisement for our new oleans caches: if you are experimenting <a href=\"https://github.com/leanprover-community/mathlib-tools/pull/16\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib-tools/pull/16\">https://github.com/leanprover-community/mathlib-tools/pull/16</a>, you can have a look at that PR by doing in your favorite mathlib folder <code>git fetch upstream rw_hint &amp;&amp; git checkout rw_hint &amp;&amp; leanproject get-cache</code> (maybe replacing <code>upstream</code>  by the name you gave to the leanprover-community remote).</p>",
        "id": 189501499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583162970
    },
    {
        "content": "<p>Maybe I should create a <code>leanproject</code> command to do that. Typing three commands looks against the <code>leanproject</code> philosophy.</p>",
        "id": 189501615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583163014
    },
    {
        "content": "<p><code>leanproject fetch-branch rw_hint</code>?</p>",
        "id": 189501675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583163052
    },
    {
        "content": "<p>Or <code>test-branch</code>? I dunno... I'm bad at naming things.</p>",
        "id": 189501723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583163082
    },
    {
        "content": "<p>Let's go back to Rob's question. I just tried:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">rw_hint</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I'm not super impressed.</p>",
        "id": 189501949,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583163225
    },
    {
        "content": "<blockquote>\n<p>But the ones from the \"discovery\" section can be wild, and if they change 2 or 3 times a month, I wouldn't care too much</p>\n</blockquote>\n<p>There's a cost to updating them and a cost to reviewing them. If I'd never use a tactic, and would never suggest to someone else that they use it, I don't think either of these costs are worth it.</p>",
        "id": 189502035,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1583163259
    },
    {
        "content": "<p>Does anyone has a real use case to try out?</p>",
        "id": 189502125,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583163319
    },
    {
        "content": "<p>(I shouldn't be reviewing PRs when taking a break for marking student exercises, I'm in grumpy mode).</p>",
        "id": 189502227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583163371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> IIRC <code>rw_search</code> worked by minimising the edit distance between the LHS and the RHS. Could you sort the results of <code>rw_hint</code> using that metric? Or would that be a lot of work?</p>",
        "id": 189502985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583163837
    },
    {
        "content": "<p>I can imagine that it might be more useful after such a ranking takes place.</p>",
        "id": 189503055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583163856
    },
    {
        "content": "<p>I'll add some examples sometime. (I agree that <code>rw_hint</code> is of potentially dubious use. I won't be concerned if we decide it's not useful in mathlib, but I think look at more use cases is warranted. Sorry for making the PR without many examples.)</p>",
        "id": 189528421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583178171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, re: edit distance. <code>rw_hint</code> is not only intended for goals of the form <code>A = B</code>: you can ask it for suggestions rewriting arbitrary expressions. We could sort suggestions by edit distance if the goal was a transitive relation, but it feels like a weird special case.</p>",
        "id": 189528489,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583178232
    },
    {
        "content": "<p>Okay, I have added two new features, and documentation, that hopefully make <code>rw_hint</code> more useful.</p>",
        "id": 189556516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200464
    },
    {
        "content": "<p>First, you can use <code>rw_hint</code> inside a <code>conv</code> block, and this only finds rewrites that rewrite the entire current focus, rather than some subexpression. This can be helpful if you know which part of your goal you want to rewrite, and avoids spurious rewrite suggestions that work in other locations.</p>",
        "id": 189556552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200523
    },
    {
        "content": "<p>Second, you can use <code>rw_hint with p</code>, specifying a pattern <code>p</code>, and only rewrites that produce a new goal containing the pattern <code>p</code> will be reported. (Or, inside a <code>conv</code> block, the new goal must exactly match <code>p</code>.)</p>",
        "id": 189556601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200566
    },
    {
        "content": "<p>I added some test cases for these features.</p>",
        "id": 189556604,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200577
    },
    {
        "content": "<p>A typical use case I have in mind now is proving the following (fairly randomly chosen) lemma from <code>measure_theory</code>:</p>\n<div class=\"codehilite\"><pre><span></span>lemma pair_preimage_singleton (f : α →ₛ β) (g : α →ₛ γ) (b : β) (c : γ) :\n  (pair f g) ⁻¹&#39; {(b, c)} = (f ⁻¹&#39; {b}) ∩ (g ⁻¹&#39; {c}) :=\n</pre></div>",
        "id": 189556620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200624
    },
    {
        "content": "<p>Imagine we know that we want to rewrite <code>{(b,c)}</code> as <code>set.prod {b} {c}</code> (which is indeed the first step of the proof), but we're having trouble working out that the lemma that achieves this is <code>prod_singleton_singleton</code>.</p>",
        "id": 189556634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200674
    },
    {
        "content": "<p>We can just write <code>rw_hint</code>, but this produces lots of alternatives, and is painfully slow.<br>\nWe can do better using <code>conv { to_lhs, congr, skip, rw_hint }</code>, but this still produces eight alternatives:</p>\n<div class=\"codehilite\"><pre><span></span>    -- Try this: rw ←image_singleton -- prod.mk b &#39;&#39; {c}\n    -- Try this: rw ←prod_singleton_singleton -- set.prod {b} {c}\n    -- Try this: rw ←set_compr_eq_eq_singleton -- {b_1 : β × γ | b_1 = (b, c)}\n    -- Try this: rw singleton_def -- insert (b, c) ∅\n    -- Try this: rw ←finset.coe_singleton -- ↑(finset.singleton (b, c))\n    -- Try this: rw ←set_of_eq_eq_singleton -- {n : β × γ | n = (b, c)}\n    -- Try this: rw ←pair_eq_singleton -- {(b, c), (b, c)}\n    -- Try this: rw ←pure_def -- pure (b, c)\n</pre></div>",
        "id": 189556682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200707
    },
    {
        "content": "<p>(oh yeah: now I make it print the new goal after the rewrite. We may need to tweak the <code>Try this:</code> interaction in VSCode to not copy this comment...)</p>",
        "id": 189556700,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200737
    },
    {
        "content": "<p><code>rw_hint with set.prod _ _</code> however only return the one result we're looking for.</p>",
        "id": 189556718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200764
    },
    {
        "content": "<p>If we just do <code>rw_hint with set.prod _ _</code>, without a <code>conv</code> block to zoom in on <code>{(b, c)}</code>, then it's still slow, but happily only produces two suggestions: the one we're after, and one spurious one.</p>",
        "id": 189556896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583200939
    },
    {
        "content": "<p>I haven't looked into this PR but I feel like what you really want in this example is a non-definitional <code>change</code>. (Kind of like <code>convert</code> is a non-definitional <code>exact</code>.)</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">change&#39;</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">})</span> <span class=\"err\">∩</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"o\">{</span><span class=\"n\">c</span><span class=\"o\">}),</span>\n</pre></div>\n\n\n<p>then the new first goal would be <code>{(b,c)} = set.prod {b} {c}</code> and you could prove it by <code>library_search</code>, and in this case go back and change the whole thing into <code>rw</code></p>",
        "id": 189557023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583201124
    },
    {
        "content": "<p>Yes... the same occurred to me. Use <code>change</code>/<code>library_search</code> in this way is perhaps a bit verbose?</p>",
        "id": 189557087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583201200
    },
    {
        "content": "<p>I think <code>change' A</code> is basically <code>suffices : A, convert this,</code></p>",
        "id": 189557088,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583201200
    },
    {
        "content": "<p>This trick inside <code>conv</code> would solve that, however.</p>",
        "id": 189557099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583201246
    },
    {
        "content": "<p>I guess the other tech here is <code>rw (show {(b,c)} = set.prod {b} {c}, by library_search)</code></p>",
        "id": 189557155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583201304
    },
    {
        "content": "<p>Oh, that one is good, I always forget the <code>rw (show ...)</code> trick, and hadn't thought to use it with <code>library_search</code>.</p>",
        "id": 189557436,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583201761
    },
    {
        "content": "<p>Huh: except, that <code>library_search</code> takes forever, and fails.</p>",
        "id": 189557628,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583201990
    },
    {
        "content": "<p>oh, this is because I never PR'd the improvement to <code>library_search</code> that let it flip equations.</p>",
        "id": 189557710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583202114
    },
    {
        "content": "<p><code> rw ←(show set.prod {b} {c} = {(b,c)}, by library_search)</code> works, but that's not super intuitive.</p>",
        "id": 189557754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583202143
    },
    {
        "content": "<p><code>magically_turn {(b,c)} into set.prod {b} {c}</code></p>",
        "id": 189557848,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583202296
    },
    {
        "content": "<p>I guess you could use <code>convert (_ : target)</code>, but I think there was also a <code>convert_to</code> tactic with this semantics floating about</p>",
        "id": 189558436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583203336
    },
    {
        "content": "<p>Oh right!<br>\nAs usual, the hardest problem is naming...</p>",
        "id": 189558533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583203541
    },
    {
        "content": "<p>iirc it was first PR'd as... <code>change''</code></p>",
        "id": 189562586,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1583209677
    }
]