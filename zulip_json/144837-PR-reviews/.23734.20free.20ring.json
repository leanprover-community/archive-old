[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> May I please pick your brain for a little while? I just pushed to this branch... and I'm not sure if things should be refactored...</p>",
        "id": 165234589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557391467
    },
    {
        "content": "<p>Please look at this line <a href=\"https://github.com/leanprover-community/mathlib/blob/a7a2d682c3705f6142a1fa94a9eabebcf90103e5/src/ring_theory/free_comm_ring.lean#L165\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/a7a2d682c3705f6142a1fa94a9eabebcf90103e5/src/ring_theory/free_comm_ring.lean#L165\">https://github.com/leanprover-community/mathlib/blob/a7a2d682c3705f6142a1fa94a9eabebcf90103e5/src/ring_theory/free_comm_ring.lean#L165</a></p>",
        "id": 165234616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557391513
    },
    {
        "content": "<p>I prove that <code>free_comm_ring</code> is equivalent to <code>mv_polynomial</code> (but I don't show that it is a natural transformation <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>)</p>",
        "id": 165234623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557391541
    },
    {
        "content": "<p>And then afterwards, there are two special cases.</p>",
        "id": 165234626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557391553
    },
    {
        "content": "<p>Those could be done by composing two equiv's, but I don't know if that is good for \"defeq\"-purposes or not.</p>",
        "id": 165234686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557391581
    },
    {
        "content": "<p>Because we also know that <code>mv_polynomial _ punit</code> is <code>polynomial _</code></p>",
        "id": 165234717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557391624
    },
    {
        "content": "<p>I was thinking the same thing</p>",
        "id": 165234729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557391637
    },
    {
        "content": "<p>the latter two should follow from some other equiv, but maybe it hasn't been proven yet</p>",
        "id": 165234748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557391659
    },
    {
        "content": "<p>It's true that there are potential defeq problems with the way we define equivs in terms of other equivs, but that's a rabbit hole that will lead to a lot more code duplication so I'm inclined to only address issues caused by this as they arise</p>",
        "id": 165234840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557391760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So what shall I do? Leave them as is? Remove them? Redefine them as the composition of two equivs?</p>",
        "id": 165235176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557392117
    },
    {
        "content": "<p>redefine as composition, if the other equivs exist</p>",
        "id": 165235188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557392138
    },
    {
        "content": "<p>I think Kenny did this because he was hoping to replace <code>mv_polynomial</code> with <code>free_comm_ring</code></p>",
        "id": 165235244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557392169
    },
    {
        "content": "<p>Ok... there are analogous equivs for <code>free_ring</code>. But there I can't really do the composition trick.</p>",
        "id": 165235245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557392170
    },
    {
        "content": "<p>alternatively, you could show that when <code>A</code> is a subsingleton <code>free_ring A</code> is commutative and hence equiv to <code>free_comm_ring A</code></p>",
        "id": 165235295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557392251
    },
    {
        "content": "<p>That might be a good idea.</p>",
        "id": 165235514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557392413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do we know that a functor maps an equiv to an equiv?</p>",
        "id": 165268792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557419937
    },
    {
        "content": "<p>(And now I mean the <code>category/</code> version. Not <code>category_theory/</code>).</p>",
        "id": 165268816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557419955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> That's your domain, right?</p>",
        "id": 165268828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557419974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Can you clarify your question please?</p>",
        "id": 165268958,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557420070
    },
    {
        "content": "<p>We have <code>free_abelian_group</code> which is a functor. And now I have an equiv between two types... I would like to know that their free abelian groups are also equiv.</p>",
        "id": 165270550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557421249
    },
    {
        "content": "<p>I assume <code>free_abelian_group</code> has a <code>map</code> function?</p>",
        "id": 165273526,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557423919
    },
    {
        "content": "<p>It has an instance of <code>functor</code></p>",
        "id": 165274178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557424427
    },
    {
        "content": "<p>Even <code>monad</code></p>",
        "id": 165274192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557424440
    },
    {
        "content": "<p>Lawful?</p>",
        "id": 165276714,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557426350
    },
    {
        "content": "<p>Yep</p>",
        "id": 165277071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557426592
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">functor</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_functor</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">functor</span> <span class=\"n\">equiv</span> <span class=\"n\">function</span> <span class=\"n\">is_lawful_functor</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">f</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">map</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">transitivity</span> <span class=\"n\">id</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                        <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">symm_apply_apply</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n                        <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_lawful_functor</span><span class=\"bp\">.</span><span class=\"n\">id_map</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\"> same thing -/</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 165277592,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557426893
    },
    {
        "content": "<p>Ok, but this isn't in mathlib, with some goofy notation?</p>",
        "id": 165277804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557427014
    },
    {
        "content": "<p>That's mainly what I was asking...</p>",
        "id": 165277822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557427026
    },
    {
        "content": "<p>I would never pick a goofy notation</p>",
        "id": 165277902,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557427077
    },
    {
        "content": "<p>Well... maybe others did... I still struggle with <code>&lt;$&gt;</code> and <code>&lt;*&gt;</code>.</p>",
        "id": 165277987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557427123
    },
    {
        "content": "<p>So this should be <code>functor.map_equiv</code> or something like that?</p>",
        "id": 165278031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557427147
    },
    {
        "content": "<p>I just looked. It's not in there. You could put it in <code>data/equiv/functor.lean</code></p>",
        "id": 165278181,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557427261
    },
    {
        "content": "<p>or <code>data/equiv/instances.lean</code></p>",
        "id": 165278194,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557427269
    },
    {
        "content": "<p>Ok, will probably do that.</p>",
        "id": 165278379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557427406
    },
    {
        "content": "<p>Do we know of an equiv between <code>list X</code> and <code>multiset X</code> if <code>X</code> is a subsingleton?</p>",
        "id": 165284609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557432423
    },
    {
        "content": "<p>If we do, it will be in <code>multiset.lean</code> but I doubt it's there</p>",
        "id": 165285165,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1557432816
    },
    {
        "content": "<p>I pushed a bunch of stuff to this PR</p>",
        "id": 165286992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557434273
    },
    {
        "content": "<p>There is one annoying sorry left...</p>",
        "id": 165287022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557434282
    },
    {
        "content": "<p>And a bunch of commented code.</p>",
        "id": 165287052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557434294
    },
    {
        "content": "<p>I want to sleep now... if others want to take a look. Go ahead.</p>",
        "id": 165287062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557434308
    },
    {
        "content": "<p>Also, I proved that <code>equiv</code> between list and multiset for subsingletons, but it is noncomputable. And in the wrong file.</p>",
        "id": 165287100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557434351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm slowly converging to something that should be ready to merge. The equiv between <code>free_ring X</code> and <code>free_comm_ring X</code> for subsingletons is now in place. However, it is noncomputable. Should I separately prove a computable version for <code>pempty</code> and <code>punit</code>?</p>",
        "id": 165339019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557497515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> In my opinion this PR is now ready for review again. (I'm optimistic that Travis will be happy.)</p>",
        "id": 165342596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557500008
    },
    {
        "content": "<p>It doesn't need to be noncomputable. It is coming from this theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">subsingleton_equiv</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">ext_le</span>\n    <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">coe_card</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">coe_card</span><span class=\"o\">],</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">out_eq</span> <span class=\"bp\">_</span> <span class=\"o\">})</span> <span class=\"err\">$</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">subsingleton</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">out_eq</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>This generalizes to the basic equiv theorem that <code>quot A R ~= A</code> when <code>\\all x y, R x y -&gt; x = y</code>. The inverse function is defined by <code>quot.lift</code>, not <code>quot.out</code></p>",
        "id": 165369794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1557521328
    },
    {
        "content": "<p>Aha, let me try that.</p>",
        "id": 165390719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557546123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Done</p>",
        "id": 165394094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557552581
    },
    {
        "content": "<p>Also.. there are 2 instances that make <code>perm</code> a setoid on <code>list X</code></p>",
        "id": 165394099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557552599
    },
    {
        "content": "<p>One is defined in <code>perm.lean</code> but only for <code>(X : Type)</code>. The other is in <code>multiset.lean</code> and works for arbitrary universes.</p>",
        "id": 165394145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557552626
    },
    {
        "content": "<p>In this PR I've sneaked a fix that generalises the instance in <code>perm.lean</code> and removes the one in <code>multiset.lean</code>.</p>",
        "id": 165394147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557552649
    },
    {
        "content": "<p>Here is a link to the changes that I've stacked on top of Kenny's PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/734/files/379d911cd1050ee7bd94af9735b8f261601dab6f..eccc355ae26283e6f0cb6b6023ff958959414a25\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/734/files/379d911cd1050ee7bd94af9735b8f261601dab6f..eccc355ae26283e6f0cb6b6023ff958959414a25\">https://github.com/leanprover-community/mathlib/pull/734/files/379d911cd1050ee7bd94af9735b8f261601dab6f..eccc355ae26283e6f0cb6b6023ff958959414a25</a></p>",
        "id": 165399159,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557561348
    },
    {
        "content": "<p>Is there anyone who wants to review this PR? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 165732834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557940110
    }
]