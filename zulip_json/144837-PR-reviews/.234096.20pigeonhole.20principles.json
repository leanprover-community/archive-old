[
    {
        "content": "<p>To address issue <a href=\"https://github.com/leanprover-community/mathlib/issues/2722\">#2722</a>, PR <a href=\"https://github.com/leanprover-community/mathlib/issues/4096\">#4096</a> reformulates some cardinality theorems to be in the usual form of the pigeonhole principle.  It also gives stronger forms of them (if there are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> pigeons and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> holes, then there is a hole with at least <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi mathvariant=\"normal\">/</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n/m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">m</span></span></span></span> pigeons) for both finitely and infinitely many pigeons.</p>\n<ol>\n<li>What would be good names for these lemmas?</li>\n<li>Where should they go?</li>\n</ol>\n<p>For now, I just put them where they were convenient to define. It's certainly odd for one of them to be in <code>algebra.big_operators.order</code>!</p>",
        "id": 209853653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599875891
    },
    {
        "content": "<p>I'm also wondering about the canonical way to represent the fiber of a map between finsets.  It seemed reasonable to use <code>(s.filter (λ x, f x = y))</code> since there is a lot of support for <code>filter</code>, but I wasn't sure if there was something else to use instead.</p>",
        "id": 209853721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1599876045
    },
    {
        "content": "<p>I was going to say maybe <code>s.preimage f {y}</code> was another way, but it turns out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.preimage/src\">src#finset.preimage</a> is for a map from a general type to a <code>finset</code>. I think the fiber of a map (between types, sets or finsets) is important enough that it should have some API around it, and it should also be easy to work with the preimage of a map between finsets as well. I'm not sure if this stuff is already there and I'm missing it or if we need to build mathlib up in this area...</p>",
        "id": 209861999,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1599881093
    },
    {
        "content": "<p>I'd like to see some opinions from some more experienced folks. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what do you think?</p>",
        "id": 210206327,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1600213806
    },
    {
        "content": "<p>Here's a quick proposal for an <code>s.fiber</code>, with a few random lemmas.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">This is the preimage of b through f with domain s.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">fiber</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">mem_fiber</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.fiber</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">mem_filter</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">preimage_nonempty_iff_mem_image</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">s.fiber</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s.image</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_image</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n     <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xel</span><span class=\"o\">⟩,</span> <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rwa</span> <span class=\"n\">mem_fiber</span> <span class=\"n\">at</span> <span class=\"n\">xel</span> <span class=\"o\">},</span>\n     <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mem_fiber</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">preimage_card_ne_zero_iff_mem_image</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s.fiber</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s.image</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">zero_lt_iff_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">card_pos</span><span class=\"o\">,</span> <span class=\"n\">preimage_nonempty_iff_mem_image</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">finset</span>\n</code></pre></div>",
        "id": 211061037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600894459
    },
    {
        "content": "<p>A point against: this makes it harder to apply lemmas about filters.  A point for: it gives a canonical name for things about this type of preimage.</p>",
        "id": 211061152,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600894543
    },
    {
        "content": "<blockquote>\n<p>A point against: this makes it harder to apply lemmas about filters.</p>\n</blockquote>\n<p>That's not so much a point against as a requirement to add additional fiber lemmas to bring it to parity</p>",
        "id": 211069542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600899720
    },
    {
        "content": "<p><code>by simp [finset.nonempty]</code> proves <code>preimage_nonempty_iff_mem_image</code>.</p>",
        "id": 211069983,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1600900004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  What I meant was, given what you said, the point against is that it would require effort to write all those lemmas and maintaining the API. It's potentially not worth expending this effort if filters themselves are good enough.</p>",
        "id": 211070141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600900093
    },
    {
        "content": "<p>yep, API is a thing you have to do if you make a definition</p>",
        "id": 211070190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600900137
    },
    {
        "content": "<p>Do you think it's worth having this definition?</p>",
        "id": 211070390,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600900279
    },
    {
        "content": "<p>I tried to make the <code>preimage</code> definition once, before I realized that it doesn't exist for a reason. This seems like a reasonable alternative</p>",
        "id": 211070500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600900335
    },
    {
        "content": "<p>dunno about the name <code>fiber</code> though</p>",
        "id": 211070513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600900341
    },
    {
        "content": "<p>oh wait this isn't even a preimage</p>",
        "id": 211070567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600900396
    },
    {
        "content": "<p>Yeah, it's just the fiber of a single point.  It might better as a preimage of a finite set, though.  I know <code>finset.preimage</code> is already taken (<code>data.set.finite</code>)</p>",
        "id": 211070721,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600900522
    },
    {
        "content": "<p>I think that definition should be renamed though, it's sort of out of place</p>",
        "id": 211070745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600900557
    },
    {
        "content": "<p>I don't think there are any other basic finset functions defined in data.set.finite</p>",
        "id": 211070820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1600900586
    },
    {
        "content": "<p>A holdup with this PR right now is (1) what to name the pigeonhole principle lemmas and (2) where they should go in mathlib -- any thoughts?  I'll put the statements here for convenience:</p>",
        "id": 211321447,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601070161
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.pigeonhole</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">t.card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 211321463,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601070169
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fintype.pigeonhole</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 211321470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601070178
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">finset.strong_pigeonhole</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">t.card</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n</code></pre></div>",
        "id": 211321487,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601070186
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fintype.strong_pigeonhole</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">β</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">univ.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">card</span>\n</code></pre></div>",
        "id": 211321500,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601070193
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fintype.infinite_pigeonhole</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 211321506,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601070200
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fintype.strong_infinite_pigeonhole</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">infinite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 211321513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601070207
    },
    {
        "content": "<p>All of them seem to be in the correct place (either <code>data.finset.basic</code> or <code>data.fintype.basic</code>), but <code>finset.strong_pigeonhole</code> and <code>fintype.strong_pigeonhole</code> are absurdly in <code>algebra.big_operators.order</code>, purely for ready access to <code>sum_le_sum</code>.</p>",
        "id": 211321912,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601070436
    },
    {
        "content": "<p>The solution to the last problem is just to put them in a brand new file called <code>strong_pigeonhole</code>.</p>",
        "id": 211334768,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601084054
    },
    {
        "content": "<p>(perhaps in <code> combinatorics/</code>, as you suggested)</p>",
        "id": 211334854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601084169
    },
    {
        "content": "<p>Semi-offtopic: could someone please explain to me the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordinal.infinite_pigeonhole\">docs#ordinal.infinite_pigeonhole</a>? Does it immediately imply a version of <code>strong_pigeonhole</code> above with <code>card</code> instead of <code>finset.card</code>?</p>",
        "id": 211340023,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601091502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> You wrote this lemma <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 211340216,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601091889
    },
    {
        "content": "<p><code>ordinal.infinite_pigeonhole</code> is only relevant for infinite sets. It tells nothing about finitely many pigeons.</p>\n<p>As a special case of <code>ordinal.infinite_pigeonhole?</code>, it states that if <code>\\b</code> is a regular infinite cardinal and I have <code>\\b</code> pigeons and I put them in <code>\\a &lt; \\b</code> many holes, then there is one hole containing <code>\\b</code> many pigeons. It also applies for <code>\\b</code> infinite cardinals that are not regular, but then you have to take the cofinality.</p>",
        "id": 211348585,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1601107504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.234096.20pigeonhole.20principles/near/211334768\">said</a>:</p>\n<blockquote>\n<p>The solution to the last problem is just to put them in a brand new file called <code>strong_pigeonhole</code>.</p>\n</blockquote>\n<p>I put them in <code>combinatorics/pigeonhole</code> along with some module documentation about where all the pigeonhole principles are.  Given that <code>ordinal.infinite_pigeonhole</code> exists, maybe nothing needs to be renamed? (for now?)</p>",
        "id": 211399310,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601183695
    },
    {
        "content": "<p>I added versions for pigeons counted by weight.</p>",
        "id": 211403442,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601191930
    },
    {
        "content": "<p>What's left to do here?</p>",
        "id": 211564038,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601336043
    },
    {
        "content": "<p>Are we OK with the name <code>strong_pigeonhole</code>, or we want something like <code>exists_lt_card_filter_eq_of_mul_lt_card</code>?</p>",
        "id": 211564152,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601336153
    },
    {
        "content": "<p>I think we should change the name. As long as the doc-strings have the text, it's just as findable by <code>grep</code> or search.</p>",
        "id": 211584095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601359852
    },
    {
        "content": "<p>I really like this official naming principle even though it gives comedy outputs sometimes</p>",
        "id": 211584120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1601359906
    },
    {
        "content": "<p>Maybe <code>exists_lt_card_fiber_of_mul_lt_card</code>?</p>",
        "id": 211584524,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601360420
    },
    {
        "content": "<p>Something that has not really been exploited at all yet, but I'm sure will be, is that tomorrow's AI mathematicians are going to love the naming scheme. Even just being able to do things like \"oh, I have a hypothesis <code>a * b &lt; X.card</code>, perhaps I should try out this lemma ending <code>of_mul_lt_card</code>\" is magic when you're too \"dumb\" to \"understand\" that you ought to be using the pigeonhole principle.</p>",
        "id": 211584866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601360880
    },
    {
        "content": "<p>(and exactly the sort of thing that modern \"text generators\" excel at)</p>",
        "id": 211585027,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601361019
    },
    {
        "content": "<p>Offtopic: I fed some Lean code to GPT3 (using AI Dungeon) and while it seemed to realize it was source code for a proof assistant, it didn't seem to know which one <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  Some of what it generated:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n\n<div class=\"codehilite\"><pre><span></span><code>lemma inv_fun_surjective : ∀f g H : function.injective f ⟹ function.injective g ⟹ H f ≡ H g\nusing function.injective_inv_surjective by (fast)\nlemma inv_fun_refl : ∀f : function.injective f ⟹ f (inv_fun f) = refl_inv_fun f\nusing function.injective_refl by (fast)\nlemma inv_fun_trans : ∀f g H : function.injective f ⟹ function.injective g ⟹ H f ≡ H g\nusing function.injective_trans by (fast)\n\nTheorem qed.s_of_eq (a b : R) : (a = b) = (s a = s b).\nproof .\nintros.\napply eq_of_heq.\napply (eq.refl R) .\napply (eq.refl R) .\nunfold s, refl.\napply eq_composite.\nQed .\n\nDefinition inv_fun_perm (f : fintype α → fintype β) :=\n(λ h : forall x, f (h x) = Void) ∘ (λ (x : fintype) → h (inv_fun f x))\n\nDefinition inv_fun_refl (f : fintype α → fintype α) :=\n(λ (x : fintype α) (h : f x = x) : h)\n\nDefinition inv_fun_trans (f1 f2 : fintype α → fintype β) :=\n(λ (x : fintype α) (h : f1 x = f2 x), trans.idr)\n</code></pre></div>\n\n\n</div></div>",
        "id": 211586016,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601362167
    },
    {
        "content": "<p>See also <a href=\"#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/GPT/near/207374216\">https://leanprover.zulipchat.com/#narrow/stream/219941-Machine-Learning.20for.20Theorem.20Proving/topic/GPT/near/207374216</a></p>",
        "id": 211586876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601363101
    },
    {
        "content": "<p>My brain hurts.</p>",
        "id": 211587769,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601363949
    },
    {
        "content": "<p>I'm going to rename the lemmas and add more versions (e.g., versions with reversed inequalities)</p>",
        "id": 211716746,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601443047
    },
    {
        "content": "<p>Done, ready for review.</p>",
        "id": 211791561,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601485776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Did you modify the names in <code>data.fintype.basic</code>?  It looks like they might not have made it into your commit.</p>\n<p>I've added two more name changes for some non-pigeonhole lemmas in <code>data.finset.basic</code>.</p>",
        "id": 211809473,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601494675
    },
    {
        "content": "<p>I renamed <code>fintype.pigeonhole</code> to <code>exists_ne_map_eq_of_card_lt</code>. It seems that I forgot to rename the infinite pigeonhole thm.</p>",
        "id": 211810113,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601495007
    },
    {
        "content": "<p>Done</p>",
        "id": 211810993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601495408
    },
    {
        "content": "<p>Note that I removed all \"See also\" comments in <code>combinatorics/pigeonhole</code> because each theorem should list (most of? all?) the other 19.</p>",
        "id": 211811108,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601495481
    },
    {
        "content": "<p>And they're already in a dedicated file.</p>",
        "id": 211811125,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601495493
    },
    {
        "content": "<p>Ok, everything seems to be in order.  Thanks  for coming up with mathlib names!</p>",
        "id": 211812012,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601495891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Anything left to do besides merging?</p>",
        "id": 211862316,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601518467
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> said he'd like to be the one to hit merge? (Or maybe I misread and he said the opposite...)</p>",
        "id": 211862943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601519320
    },
    {
        "content": "<p>I'm happy to do it.</p>",
        "id": 211862954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1601519330
    },
    {
        "content": "<p>Oh, no rush. I just wasn't sure what state things were in.</p>",
        "id": 211863051,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1601519423
    },
    {
        "content": "<p>I wanted to say the opposite: I contributed too much code to this PR to merge it.</p>",
        "id": 211864254,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601520981
    }
]