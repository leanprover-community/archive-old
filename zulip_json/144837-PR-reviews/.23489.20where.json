[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> I tried your stuff out. It is really helpful. But I had some further questions, which I posted as feedback to the PR.</p>",
        "id": 148263248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543036534
    },
    {
        "content": "<p>Yep, silly mistake on my part<br>\nI'll fix it right up</p>",
        "id": 148263358,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543036744
    },
    {
        "content": "<p>And sure, I'll do the namespace thing<br>\nDo you want a few newlines and an <code>end</code>, too?</p>",
        "id": 148263361,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543036769
    },
    {
        "content": "<p>Yeah, I think that would be nice. But it isn't crucial. I can imagine people would think that it clutters the info message. And autocompletion will make typing the <code>end</code> very easy.</p>",
        "id": 148263858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543037808
    },
    {
        "content": "<p>A new-and-improved version is sitting atop <code>where-cmd</code>!</p>",
        "id": 148268618,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543048384
    },
    {
        "content": "<p>(please let me know if you find anything else wrong with it, Johan)</p>",
        "id": 148268677,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543048544
    },
    {
        "content": "<p>The only thing that is wrong is that you seem to have changed the branch name</p>",
        "id": 148268771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543048693
    },
    {
        "content": "<p>Hurray, I now get</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span>\n\n\n\n<span class=\"kn\">end</span> <span class=\"n\">nat</span>\n</pre></div>\n\n\n<p>I notice two things:</p>\n<ul>\n<li>I get all the variables! Not only those that have been used. That is good!</li>\n<li>The order seems a bit random. The original variables line was <code>variables {m n k : ‚Ñï} (x : ‚Ñ§)</code>.</li>\n</ul>",
        "id": 148268836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543048901
    },
    {
        "content": "<p>Woo! That first point is by luck---in some other file which is includes and has the same namespace, the same variable name appears as that which is not used in the file you are in (so its not 100% reliable)</p>",
        "id": 148269099,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543049470
    },
    {
        "content": "<p>The second point is hard, since there is no way to know the real order they are in.</p>",
        "id": 148269100,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543049471
    },
    {
        "content": "<p>One thing I could do is group by type? How about I do that</p>",
        "id": 148269101,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543049480
    },
    {
        "content": "<p>Ok, it's working now</p>",
        "id": 148273173,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543057543
    },
    {
        "content": "<p>It collects together variable of the same binders and type, and sorts by binders, implicit first (hopefully this is closest to the most likely intended order)</p>",
        "id": 148273231,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543057596
    },
    {
        "content": "<p>So e.g. above you should get</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñ§</span><span class=\"o\">)</span>\n\n\n\n<span class=\"kn\">end</span> <span class=\"n\">nat</span>\n</pre></div>",
        "id": 148273248,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543057627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> Is it within reach to also figure out universes?<br>\nI now get something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"err\">ùí¶</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">K</span> <span class=\"err\">ùí¶</span>\n\n\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n</pre></div>",
        "id": 148636438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324176
    },
    {
        "content": "<p>That's already very helpful, and I have no idea how hard it would be to replace those <code>?</code>s with <code>u</code>s and <code>v</code>s...</p>",
        "id": 148636489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324210
    },
    {
        "content": "<p>One time when this came up for me was a variable has type <code>Type*</code>, and I don't know what the asterisk syntax means!</p>\n<p>But I didn't realize it didn't work for any universes whatever. Would you be able to point me directly to the file you obtained that in?</p>",
        "id": 148636533,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543324280
    },
    {
        "content": "<p>I'll see if it's possible (the answer is almost certainly, but I'll have to have a look/hope its easy)</p>",
        "id": 148636590,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543324326
    },
    {
        "content": "<p>This was on line 702 in some version of <code>limits.lean</code>.</p>",
        "id": 148636603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324368
    },
    {
        "content": "<p>In mainline?</p>",
        "id": 148636616,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543324387
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/limits/limits.lean#L702\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/limits/limits.lean#L702\">https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/limits/limits.lean#L702</a></p>",
        "id": 148636634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324417
    },
    {
        "content": "<p>No, it's an older version</p>",
        "id": 148636636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324426
    },
    {
        "content": "<p>Not the current one that Scott and Reid are trying to get merged.</p>",
        "id": 148636646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324441
    },
    {
        "content": "<p>But it shouldn't be far off.</p>",
        "id": 148636688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324446
    },
    {
        "content": "<p>how does this PR work btw?</p>",
        "id": 148636702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543324463
    },
    {
        "content": "<p>it's really cool but I was under the impression it's not accessible information</p>",
        "id": 148636718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543324486
    },
    {
        "content": "<p>It looks like a life changing command</p>",
        "id": 148636732,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543324506
    },
    {
        "content": "<p>is there a tactic version? This is also useful under the hood I think</p>",
        "id": 148636745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543324528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> Aah, another request. Can you figure out which namespaces are open?</p>",
        "id": 148636834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324580
    },
    {
        "content": "<p>And include a line <code>open foo bar</code> in the output?</p>",
        "id": 148636839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324591
    },
    {
        "content": "<p>Maybe this is impossible, but it would be marvellous</p>",
        "id": 148636846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324602
    },
    {
        "content": "<p>Keeley, since you are into these kind of things, how much work would it be for you to write a script that goes through mathlib an report every definition of lemma whose parameters contains two instances for the same type class? This happens sometimes when one instance comes from a variable and the other one is explicitly in the declaration</p>",
        "id": 148636872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543324639
    },
    {
        "content": "<p>I second Mario's question! I don't understand what this is doing, but it's super nice.</p>",
        "id": 148636994,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543324744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> What do you mean with a \"tactic version\"? This is in <code>tactic.where</code>. Does that answer the question?</p>",
        "id": 148637095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324832
    },
    {
        "content": "<p>Or do you want an interactive tactic <code>where</code> that can be called in a <code>begin ... end</code>-block?</p>",
        "id": 148637107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324852
    },
    {
        "content": "<p>Mario you're going to be disappointed in me :D (but the only way I know, sorry)<br>\nUnfortunately you need access to the parser monad<br>\nBut, you can cheat and get this using a parser argument to an interactive tactic</p>\n<p>But how it works:<br>\nOk so for namespaces <code>tactic.open_namespaces</code> (I think) gives you the namespace as the first entry last time I read the source<br>\nBut it doesn't work when no namespace is open, so we just do something general: we emit a fake definition which is equal to unit <code>()</code> using <code>with_input command_like</code>, which respects namespaces (unlike <code>add_decl</code> and friends). We then resolve the name and see what happened to the prefix.</p>\n<p>For includes: we look at the fake definition we generated and inspect its type---the includes will be all in there.</p>\n<p>For variables: this one is a bit desperate, but it's the best we can do; we examine all definitions in the current namespace (there are usually on the order of hundreds, so this is very fast) and read all of the variable names they use in their pi binders. We then emit definitions <code>private def user__.xxxx.xxxx.user__ := let {n} := {n} in ()</code> for every such name <code>n</code> we found. If this is a syntax error then we detect it and discard the name. Otherwise, it must be a valid variable, and we report it.</p>\n<p>We then sort the variables/includes by type and then coalesce those with the same binder, and then report the result</p>",
        "id": 148637165,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543324915
    },
    {
        "content": "<p>Yep Johan that's really easy, and built-in to lean<br>\nI think it might have some extras, though, I should check what the command actually returns</p>",
        "id": 148637168,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543324920
    },
    {
        "content": "<p>The only output it gives right now is via trace, it can be nice to have this returned in a format where you can use it in other tactics. So something that produces this same information but with type <code>tactic (list name)</code> or whatever.</p>",
        "id": 148637205,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543324923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Your crawler can call <code>#print</code> for every statement in mathlib, right? Because then we could do the rest with some regexes.</p>",
        "id": 148637237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543324950
    },
    {
        "content": "<p>I think using Lean metaprogramming is always better than regex. In theory I should be able to do it, but I'm not lazy and busy</p>",
        "id": 148637341,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543325056
    },
    {
        "content": "<p>Rob since everything except namespaces (and namespaces to work properly) need to access <code>lean.parser</code>, I exposed this functionality as best I could to the parser monad at the bottom of <code>where.lean</code>. The idea is after your tactic's arguments you put a <code>(ns : parse get_namespaces)</code> for example, and <code>ns</code> will evaluate to a <code>name</code> which is the current namespace. That way you still get access into the parser</p>",
        "id": 148637373,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543325083
    },
    {
        "content": "<p>I can definitely do that Patrick</p>",
        "id": 148637378,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543325085
    },
    {
        "content": "<p>Oh, actually there is this one funny thing: I don't think you can programmically get lean to import all of the files in mathlib without externally setting that up first. So if you actually wanted a command which finds all of those double-ups it would take a bit of programming work (I would have to write a file, then spawn a new lean process which imports every defn in mathlib and computes the answer, and then reports it back)</p>",
        "id": 148637484,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543325168
    },
    {
        "content": "<p>By the way after fixing Puzzle <a href=\"https://github.com/leanprover/mathlib/issues/3\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/3\">#3</a> I finally found a way to get tactic block caching to work by just doing an import<br>\nAlmost all of <code>lean-category-theory</code> is serialisable now<br>\nA bit of yuck work with expanding string macros (which are atomic from the lean perspective) is needed, and then it needs to be made as fast as possible</p>",
        "id": 148637650,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543325361
    },
    {
        "content": "<p>I have a not-even-1/2 finished import parser for Lean in Rust: <a href=\"https://github.com/johoelzl/lean-import-parser\" target=\"_blank\" title=\"https://github.com/johoelzl/lean-import-parser\">https://github.com/johoelzl/lean-import-parser</a> it's more of a Rust experiment. But it can parse Lean files and produce a list of all non-prelude Lean files. But I guess also Patrick's visualization tool does something like this?</p>",
        "id": 148637867,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1543325640
    },
    {
        "content": "<p>What you mean? Listing lean files can be done from bash, right?</p>",
        "id": 148638015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543325765
    },
    {
        "content": "<p>Oh right, I thought it was about finding out the import structure...</p>",
        "id": 148638258,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1543326048
    },
    {
        "content": "<p>Ok, that makes sense.</p>",
        "id": 148638329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543326123
    },
    {
        "content": "<p>In principle my thing can find the import structure, but I never wrote that bit. It should be easy</p>",
        "id": 148638341,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543326142
    },
    {
        "content": "<p>Does anyone know why this snippet</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">trace_opens</span> <span class=\"o\">(</span><span class=\"n\">ns</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">opens</span> <span class=\"err\">‚Üê</span> <span class=\"n\">open_namespaces</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">ns</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"n\">name</span><span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"o\">:=</span> <span class=\"n\">opens</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">tail</span>\n   <span class=\"kn\">end</span><span class=\"o\">,</span>\n   <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"err\">$</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">to_string</span><span class=\"o\">,</span>\n   <span class=\"k\">if</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">skip</span>\n   <span class=\"k\">else</span> <span class=\"n\">trace</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">&quot;opens {str}&quot;</span>\n</pre></div>\n\n\n<p>fails to compile, not being able to synthesise a typeclass for <code>‚ä¢ decidable (list.length l = 0)</code> !?!?!</p>",
        "id": 148638532,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543326373
    },
    {
        "content": "<p>What if you replace that test with testing for the empty list?</p>",
        "id": 148638555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543326441
    },
    {
        "content": "<p>It works fine! strangest thing</p>",
        "id": 148638571,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543326477
    },
    {
        "content": "<p>It would be nice to have an answer to your question, but at least you can go on</p>",
        "id": 148638637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543326513
    },
    {
        "content": "<p>Yeah following the convention of the other functions I split that one it half, and it just worked too<br>\nvery weird</p>",
        "id": 148638748,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543326652
    },
    {
        "content": "<p>It's actually pretty common that, depending on the intricacies of the elaboration process, Lean sometimes tries to solve type class instances too soon and then forgets to <code>apply_instance</code> when it would be needed</p>",
        "id": 148638842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543326767
    },
    {
        "content": "<p>ok</p>",
        "id": 148639156,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543327176
    },
    {
        "content": "<p>I think it has to do with the way <code>match</code> creates a new definition</p>",
        "id": 148639220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543327213
    },
    {
        "content": "<p>if you replace the definition of <code>l</code> with something that doesn't use <code>match</code> it works</p>",
        "id": 148639325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543327306
    },
    {
        "content": "<p>That's the trace:</p>\n<div class=\"codehilite\"><pre><span></span>[class_instances] (0) ?x_0 : decidable (@list.length name l = 0) := nat.decidable_eq ?x_116 ?x_117\n[type_context.is_def_eq_detail] [1]: decidable (@list.length name l = 0) =?= decidable (?x_116 = ?x_117)\n[type_context.is_def_eq_detail] [2]: @list.length name l = 0 =?= ?x_116 = ?x_117\n[type_context.is_def_eq_detail] process_assignment ?x_116 := @list.length name l\n[type_context.is_def_eq_detail] failed to assign ?x_116 to\n@list.length name l\nvalue contains local declaration l which is not in the scope of the metavariable\n[type_context.is_def_eq_detail] on failure: @list.length name l = 0 =?= ?x_116 = ?x_117\n[type_context.is_def_eq_detail] on failure: decidable (@list.length name l = 0) =?= decidable (?x_116 = ?x_117)\n[type_context.is_def_eq] decidable (@list.length name l = 0) =?= decidable (?x_116 = ?x_117) ... failed  (approximate mode)\nfailed is_def_eq\n</pre></div>",
        "id": 148639399,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1543327344
    },
    {
        "content": "<p><code>value contains local declaration l which is not in the scope of the metavariable</code> is it</p>",
        "id": 148639419,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1543327365
    },
    {
        "content": "<p>Actually <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I don't know if lean stores universe variable names anywhere in the type of functions which use them. I can even think of a way to figure out which is which is we know the possible pool of names, but not for arbitrary names.<br>\nI guess it could check for <code>u</code>, <code>v</code>, <code>w</code>, <code>u\\1</code>, <code>u\\2</code>, <code>u\\3</code>, etc and then give up if it's not found. It will take a bit of programming work though, and it's quite late for me!</p>",
        "id": 148639849,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543327859
    },
    {
        "content": "<p>Probably that would still be pretty handy though, even if the actual search is a bit lame</p>",
        "id": 148639866,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543327888
    },
    {
        "content": "<p>Don't want to have to scroll around to figure out the universe labels</p>",
        "id": 148639872,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543327898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> What you've done so far is already incredible! I don't want to push you... Thanks a lot!</p>",
        "id": 148639932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543327924
    },
    {
        "content": "<p>Great! By the way, I did the <code>open</code> thing and I've just pushed it (I pushed a slightly worse version which can have duplicates and doesn't delete namespaces if they aren't necessary a few minutes ago)</p>",
        "id": 148640071,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543328076
    },
    {
        "content": "<p>I guess you can access the universe names:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">‚Üê</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">set</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">univ_params</span>\n</pre></div>\n\n\n<p>outputs <code>[u]</code></p>",
        "id": 148640243,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1543328282
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">universe</span> <span class=\"n\">test_univ</span>\n\n<span class=\"n\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">test_univ</span> <span class=\"o\">:=</span> <span class=\"n\">punit</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">s</span> <span class=\"err\">‚Üê</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">test</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">univ_params</span>\n</pre></div>\n\n\n<p>also works</p>",
        "id": 148640293,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1543328328
    },
    {
        "content": "<p>Sweet! Cheers Johannes</p>",
        "id": 148640603,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543328637
    },
    {
        "content": "<p>using that call I can even do one better with <code>.type</code> outright</p>",
        "id": 148641334,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543329319
    },
    {
        "content": "<p>(pushed)</p>",
        "id": 148641341,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543329328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> What's the status with this one. Did you still want to add things? (universe variables?) Or is it good to go?</p>",
        "id": 148860885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543584450
    },
    {
        "content": "<p>Oh no I pushed the universe variable fix thanks to Johannes they day I wrote that last comment^<br>\nSo all the features are in there now<br>\nIt does the instance thing too</p>",
        "id": 148865034,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543588804
    },
    {
        "content": "<p>This is now merged! <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 152242446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545295809
    },
    {
        "content": "<p>By the way, one thing that the olean viewer could theoretically support is complete and correct answers to this question. Unfortunately since it's looking at oleans it is one step behind lean; you have to save your file and <code>--make</code> it before you can get the right answer</p>",
        "id": 152242972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545296604
    },
    {
        "content": "<p>Can this be a button on VS code?</p>",
        "id": 152257114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545313711
    },
    {
        "content": "<p>An option when you right click or something</p>",
        "id": 152257134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545313742
    },
    {
        "content": "<p>This isn't meant to be at dig at Mario's call in the GitHub pull request, but it was decided not to be included in tactic.interactive by default and so unless the vscode extension is actually changed (an amount of work unknown to me) I can't make this happen.</p>\n<p>And if it were instead to be imported by default I couldn't offer right-click support either, but I could add a hole command? Maybe we could all have a make-hole keyboard shortcut?</p>",
        "id": 152368037,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1545438889
    },
    {
        "content": "<p>Ooh, I thought that in the end Mario was fine with including it in <code>tactic.interactive</code>...</p>",
        "id": 152374778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545452838
    },
    {
        "content": "<p>right, sorry I wasn't clear about that</p>",
        "id": 152374819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545452890
    },
    {
        "content": "<p>I forgot that it hadn't been put back before the merge</p>",
        "id": 152374822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545452926
    },
    {
        "content": "<p>No worries... PRs are cheap (-;</p>",
        "id": 152374979,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545453317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> This seems to be a little bug in <code>#where</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíü</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">D</span> <span class=\"err\">ùíü</span>\n</pre></div>\n\n\n<p>The order of the variables isn't really right. I can't introduce <code>G</code> before I have those categories.</p>\n<p>It's not very important, because I can still get the information I need. But if it is withing Lean 3's capabilities to sort these variables correctly, that would be awesome!</p>",
        "id": 155323910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547720186
    },
    {
        "content": "<p>It would also be a good opportunity to move it back to the default tactic file</p>",
        "id": 155324185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547720491
    }
]