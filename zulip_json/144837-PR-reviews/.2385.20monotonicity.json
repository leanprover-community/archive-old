[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>: what is missing on this PR?</p>",
        "id": 135362082,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538938339
    },
    {
        "content": "<p>Is it correct that there is some overlap with <code>linarith</code> in use cases? (I'm just trying to get a feel for what this is doing.)</p>",
        "id": 135399492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539001689
    },
    {
        "content": "<p>In the cases where no arithmetic or little arithmetic is involved, yes, that's true. It also works with any relation you want</p>",
        "id": 135407173,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539009081
    },
    {
        "content": "<p>The overlap is just enough that if you have a long chain of monotonicity, you don't have to drop <code>mono</code> in the middle to use <code>linarith</code></p>",
        "id": 135407285,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539009146
    },
    {
        "content": "<p>what I like is that it works with different relations. But I think we want a more general rewrite. Where congruence rules are added in a database for arbitrary relations. And then I just say <code>grw [r1, r2, r3]</code>. maybe even trying to match modulo AC?</p>",
        "id": 135827830,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539607393
    },
    {
        "content": "<p>I like the idea but I'm hesitant. One benefit of calling <code>mono</code> directly is that, unlike with rewrite, with orderings, only one direction works.</p>",
        "id": 135839710,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539618092
    },
    {
        "content": "<p>yes, the relation may not be symmetric, or reflexive or even transitive. And with symmetry for rewrite its only a special case for <code>&lt;- r</code>. For rewriting its more important that the relation is reflexive, and for <code>simp</code> that it is transitive.</p>",
        "id": 135841066,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539619438
    },
    {
        "content": "<p>In terms of usability I think it goes further. If you have <code>h : x ≤ y</code> and you want to rewrite <code>a ≤ b - x</code>, only <code>rw &lt;- h</code> is available.</p>",
        "id": 135841718,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539620048
    },
    {
        "content": "<p>This works with generalized rewriting. The congruence rules would be:</p>\n<div class=\"codehilite\"><pre><span></span>((≥) ⇒ (≤) ⇒ (→)) (≤) (≤)\ni.e. a&#39; ≥ a → b&#39; ≤ b → (a&#39; ≤ b&#39; → a ≤ b)\n\n((≤) ⇒ (≥) ⇒ (≤)) (-) (-)\ni.e. a&#39; ≤ a → b&#39; ≥ b → (a&#39; - b&#39; ≤ a - b)\n</pre></div>",
        "id": 135843736,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539622233
    },
    {
        "content": "<p>So the <code>&lt;- h</code> translates to a flip of the actual relation.</p>",
        "id": 135843793,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539622305
    },
    {
        "content": "<p>This is by the way how <code>transfer</code> works, just that it doesn't apply a rewrite step, but tries to build up the relation proof exhaustively (hoping that it has rules for all constants and variables)</p>",
        "id": 135843955,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539622459
    },
    {
        "content": "<p>I like the idea. It is quite a bit different from what I implemented and I would rather do it as a separate project</p>",
        "id": 135852211,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539631309
    },
    {
        "content": "<p>Survery: do you (the reviewers) prefer for the attribute to be named <code>monotonic</code> or <code>mono</code>?</p>",
        "id": 135925544,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539720183
    },
    {
        "content": "<p><code>monotonic</code> (on the unpopular principle that abbreviations are always a bad idea)</p>",
        "id": 135949962,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539752373
    },
    {
        "content": "<p>The tactic's name is <code>mono</code> though so do you think it's also a bad idea?</p>",
        "id": 135950021,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539752424
    },
    {
        "content": "<p>if possible the tactic and attribute should have the same name. I prefer <code>mono</code> over <code>monotonicity</code> due to its length, and for me <code>mono</code> is clearly <code>monotonicity</code></p>",
        "id": 135953945,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539759358
    },
    {
        "content": "<p>monotone, monomorphism, monoid, monomial, monopole</p>",
        "id": 136001257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539810817
    },
    {
        "content": "<p>I vote <code>mono</code>. The shorter the name of a tactic is, the more awesome it sounds</p>",
        "id": 136001322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539810865
    },
    {
        "content": "<p>... but I have never understood the desire to abbreviate (or rather, I think I understand the stated desire, to require fewer keystrokes and to fit more content per pixel, but don't think it's a valuable outcome)</p>",
        "id": 136001332,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539810879
    },
    {
        "content": "<p>I'd prefer things to be clear, rather than just clear from context.</p>",
        "id": 136001335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539810891
    },
    {
        "content": "<p>tactics with short and cryptic names like <code>omega</code> and <code>auto</code> seem to be quite popular</p>",
        "id": 136001366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539810931
    },
    {
        "content": "<p>it makes them more \"name-like\" rather than \"decription-like\"</p>",
        "id": 136001385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539810951
    },
    {
        "content": "<p>but that is because they are useful!</p>",
        "id": 136001433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539810965
    },
    {
        "content": "<p>as in \"use the mono tactic\" rather than \"use the tactic that does monotonicity reasoning\"</p>",
        "id": 136001437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539810973
    },
    {
        "content": "<p><code>/- the result now follows -/ by monotonicity</code></p>",
        "id": 136001470,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811023
    },
    {
        "content": "<p>But again, I understand that no one is interested at this point in writing literate proofs.</p>",
        "id": 136001492,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811057
    },
    {
        "content": "<blockquote>\n<p>But again, I understand that no one is interested at this point in writing literate proofs.</p>\n</blockquote>\n<p>Why do you believe that?</p>",
        "id": 136001539,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539811084
    },
    {
        "content": "<p>No, I mean literally name like, as in Joe or Sue</p>",
        "id": 136001545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539811089
    },
    {
        "content": "<p>I think it makes the language more colourful</p>",
        "id": 136001560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539811104
    },
    {
        "content": "<p>because I don't think you should take too seriously the \"description-like\" aspect of a tactic name anyway</p>",
        "id": 136001613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539811195
    },
    {
        "content": "<p>for a given tactic you will usually want to know exactly what it does and the description itself always falls short</p>",
        "id": 136001690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539811234
    },
    {
        "content": "<p>I do appreciate this point.</p>",
        "id": 136001694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811242
    },
    {
        "content": "<p>if it's just a name, then you just get used to the foibles of that tactic</p>",
        "id": 136001707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539811261
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>But again, I understand that no one is interested at this point in writing literate proofs.</p>\n</blockquote>\n<p>Why do you believe that?</p>\n</blockquote>\n<p>Because I've never seen anyone try to write one? I considered trying to make the proof of the infinitude of primes in mathlib 'literate', but went on to other things.</p>",
        "id": 136001725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811287
    },
    {
        "content": "<p>looks like Neil beat you to it</p>",
        "id": 136001734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539811300
    },
    {
        "content": "<p>Oh, I didn't see.</p>",
        "id": 136001739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811308
    },
    {
        "content": "<p><a href=\"http://neil-strickland.staff.shef.ac.uk/dagstuhl/Systems/Lean_mathlib/Tasks/primes/\" target=\"_blank\" title=\"http://neil-strickland.staff.shef.ac.uk/dagstuhl/Systems/Lean_mathlib/Tasks/primes/\">http://neil-strickland.staff.shef.ac.uk/dagstuhl/Systems/Lean_mathlib/Tasks/primes/</a></p>",
        "id": 136001741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539811315
    },
    {
        "content": "<p>I would like to see what you would add or change, you've done a few presentations with this proof now</p>",
        "id": 136001789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539811346
    },
    {
        "content": "<p>Well, I think it's important to have everything in a single text file, even if there are tools to extract \"human\" and \"cryptic Lean\" available.</p>",
        "id": 136001827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811428
    },
    {
        "content": "<p>it looks like neil invented his own version of coqdoc, with popout text</p>",
        "id": 136001994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539811581
    },
    {
        "content": "<p>I would hope that from same text file that we produce the <code>olean</code> file, we can also extract the following text:</p>\n<blockquote>\n<p>We take p to be the smallest prime factor of N!+1.</p>\n<p>First, we need to show that p is prime; this is immediate from the definition of the smallest prime factor, as long as we know that N!+1 is greater than one. (This follows since N! is at least one, so N!+1 is greater than one.)</p>\n<p>Next we show that p &gt; N. We prove this by contradiction, so we assume p &lt;= N. We observe that p | N! + 1, and p | N!. The first follows since p was chosen as a prime factor of N!+1. The second follows as 1 &lt;= p &lt;= N, and any such number divides N!. Combining these two facts, we have that p | 1. (This is just the fact that if n | a and n | a+b, then n | b.) We showed earlier that a prime cannot divide one, giving the desired contradiction.</p>\n</blockquote>\n<p>I think this text very faithfully follows the proof given in mathlib.</p>",
        "id": 136002240,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811866
    },
    {
        "content": "<p>Now, it is unclear to me whether that text should appear in the <code>lean</code> file.</p>",
        "id": 136002251,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811879
    },
    {
        "content": "<p>But if it doesn't, that's only because we'd have written some tool that could _generate_ that text from the Lean source.</p>",
        "id": 136002261,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811906
    },
    {
        "content": "<p>Generating an approximation of that text is not at all crazy, I think.</p>",
        "id": 136002307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539811934
    },
    {
        "content": "<p>that text is in the lean file</p>",
        "id": 136002407,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539812046
    },
    {
        "content": "<p>Even better would be that that text is what appears in the Lean file, and the \"lean source\" is extracted from it ...</p>",
        "id": 136002413,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539812050
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 136002421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539812058
    },
    {
        "content": "<p>click on the show raw text button</p>",
        "id": 136002434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539812071
    },
    {
        "content": "<p>Okay, yes, I understand. It's great that Neil has written a prototype tool for <code>leandoc</code>. Now we need to think about what lean sources should look like with <code>leandoc</code> available.</p>",
        "id": 136002577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539812195
    },
    {
        "content": "<p>Obviously they should not have html in the comments, but markdown.</p>",
        "id": 136002593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539812218
    },
    {
        "content": "<p>But maybe what Neil has written is an excellent start.</p>",
        "id": 136002614,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539812240
    },
    {
        "content": "<p>On the subject of <code>mono</code>, do we agree that if the tactic is called <code>mono</code>, <code>mono</code> is also a good name for the attribute?</p>",
        "id": 136045229,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539871380
    }
]