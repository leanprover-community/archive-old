[
    {
        "content": "<p>I just made a huge block of 20 PRs about the new design for homology, and as an outgrowth of this the definition and basic API for left-derived functors.</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7460\">#7460</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7466\">#7466</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7462\">#7462</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7464\">#7464</a> --- small easy PRs for the homology redesign</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7467\">#7467</a> --- more about kernel and image subobjects (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7460\">#7460</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7466\">#7466</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7473\">#7473</a> --- the main refactor of chain complexes and homology (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7467\">#7467</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/7462\">#7462</a>, and <a href=\"https://github.com/leanprover-community/mathlib/issues/7464\">#7464</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7479\">#7479</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7481\">#7481</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7482\">#7482</a> --- minor PRs exercising the refactor, but not esential for what comes later (depend on <a href=\"https://github.com/leanprover-community/mathlib/issues/7473\">#7473</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7480\">#7480</a> --- augmentation and truncation of chain complexes (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7473\">#7473</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7485\">#7485</a> --- refactor of the projective object API (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7473\">#7473</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7477\">#7477</a> --- chain complexes supported in a single degree  (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7473\">#7473</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7478\">#7478</a> --- the category of chain complexes is additive, and various functoriality properties (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7477\">#7477</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7463\">#7463</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7483\">#7483</a> --- homotopies (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7478\">#7478</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7484\">#7484</a> --- the homotopy category (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7483\">#7483</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7465\">#7465</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a> --- projective resolutions (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7485\">#7485</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7484\">#7484</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7487\">#7487</a> --- derived functors (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7488\">#7488</a> --- abelian categories with enough projectives have projective resolutions (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7480\">#7480</a>)</li>\n</ul>",
        "id": 237310228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620129469
    },
    {
        "content": "<p>Sorry to dump everything at once: I'm sure CI is overwhelmed for a while now. :-) I wanted to get derived functors working nicely before committing to PRs of the early stuff.</p>",
        "id": 237310627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620129634
    },
    {
        "content": "<p>This is really awesome!</p>",
        "id": 237328599,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620136595
    },
    {
        "content": "<p>A few steps got merged. Current PRs ready for review: <a href=\"https://github.com/leanprover-community/mathlib/issues/7467\">#7467</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7514\">#7514</a>.</p>",
        "id": 237604608,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620276028
    },
    {
        "content": "<p>Next up seems to be the huge redesign: <a href=\"https://github.com/leanprover-community/mathlib/issues/7473\">#7473</a><br>\n(I've merged master, which shrunk the diff from ~1600 added lines to ~1500 <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>)</p>",
        "id": 237801051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620384194
    },
    {
        "content": "<p>This could actually be split up if we were happy to have a regression for a while in the middle. The problem here is that I have not just renamed <code>image_to_kernel_map</code> to <code>image_to_kernel</code>, but also largely rewritten it to use the subobject API.</p>",
        "id": 237813070,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620390090
    },
    {
        "content": "<p>This would ideally be it's own PR.</p>",
        "id": 237813129,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620390122
    },
    {
        "content": "<p>I personally think that a split is not necessary</p>",
        "id": 237813172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620390125
    },
    {
        "content": "<p>However it completely breaks the existing work on homology.</p>",
        "id": 237813195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620390135
    },
    {
        "content": "<p>That that work has been entirely rewritten, so if we did want to make the PRs more fine grained, we could ditch that as a first step, replace image_to_kernel_map, then put back in the new homology.</p>",
        "id": 237813329,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620390211
    },
    {
        "content": "<p>But I agree this isn't necessary, and in any case I couldn't even start until next week.</p>",
        "id": 237813353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620390231
    },
    {
        "content": "<p>Now I'm going to go to sleep listening to the waves breaking on a cliff. :-)</p>",
        "id": 237813448,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620390262
    },
    {
        "content": "<p>Thank you so much for all this homology work. It would be wonderful if we have finally cracked it. there are so many cohomology theories which we are in a position to do once we have the machine working.</p>",
        "id": 237813537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620390324
    },
    {
        "content": "<p>Two related things that really should be explored sooner rather than later: working with short exact sequences, and building a nat-indexed chain complex where you want to specify some fixed finite number of terms by hand, then do the rest inductively (e.g. in the main use case, 0 everywhere).</p>",
        "id": 238067277,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620600176
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7473\">#7473</a> is on the queue</p>",
        "id": 238263521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620718255
    },
    {
        "content": "<p>The two interesting PRs to review now are <a href=\"https://github.com/leanprover-community/mathlib/issues/7477\">#7477</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7485\">#7485</a>. Also ready for review now are <a href=\"https://github.com/leanprover-community/mathlib/issues/7479\">#7479</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/7481\">#7481</a>, and <a href=\"https://github.com/leanprover-community/mathlib/issues/7482\">#7482</a>, but these are less interesting, and just \"leaves\" on this big batch of PRs.</p>",
        "id": 238281986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620727811
    },
    {
        "content": "<p>Next up on the critical path is <a href=\"https://github.com/leanprover-community/mathlib/issues/7478\">#7478</a>, showing that various categories and functors are additive. Hopefully this one is quite straightforward, and then we have <a href=\"https://github.com/leanprover-community/mathlib/issues/7483\">#7483</a>, introducing homotopies, after which we can start trying things out in LTE.</p>",
        "id": 238702433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620953405
    },
    {
        "content": "<p>Added some comments for <a href=\"https://github.com/leanprover-community/mathlib/issues/7478\">#7478</a></p>",
        "id": 238704028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620954792
    },
    {
        "content": "<p>Thanks! I've updated.</p>",
        "id": 238705272,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620955830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I guess at some point we should add the analogue of <code>single₀_map_homological_complex</code> for the functor <code>single</code>. Would you like to leave that to a later PR?</p>",
        "id": 238705606,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620956088
    },
    {
        "content": "<p>Done.</p>",
        "id": 238712654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620962129
    },
    {
        "content": "<p>I just ported <a href=\"https://github.com/leanprover-community/mathlib/issues/6308\">#6308</a>, on old WIP PR about the normalized Moore complex, over to the new design. It was fairly straightforward, happily.</p>",
        "id": 238748551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620989746
    },
    {
        "content": "<p>That's good news! Thanks for trying that!</p>",
        "id": 238764708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620998270
    },
    {
        "content": "<p>I feel like the top post is too far up, so here is a new copy of the status of these PRs</p>",
        "id": 238867207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621052748
    },
    {
        "content": "<ul>\n<li><del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7460\">#7460</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7466\">#7466</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7462\">#7462</a>  <a href=\"https://github.com/leanprover-community/mathlib/issues/7464\">#7464</a></del> --- small easy PRs for the homology redesign</li>\n<li><del>#7467</del> --- more about kernel and image subobjects <del>(depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7460\">#7460</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7466\">#7466</a>)</del></li>\n<li><del>#7473</del> --- the main refactor of chain complexes and homology (depends on <del>#7467, <a href=\"https://github.com/leanprover-community/mathlib/issues/7462\">#7462</a>, and <a href=\"https://github.com/leanprover-community/mathlib/issues/7464\">#7464</a></del>)</li>\n<li><del>#7479 <a href=\"https://github.com/leanprover-community/mathlib/issues/7481\">#7481</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7482\">#7482</a></del> --- minor PRs exercising the refactor, but not esential for what comes later (depend on <del>#7473</del>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7480\">#7480</a> --- augmentation and truncation of chain complexes (depends on <del>#7473</del>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7485\">#7485</a> --- refactor of the projective object API (depends on <del>#7473</del>)</li>\n<li><del>#7477</del> --- chain complexes supported in a single degree  (depends on <del>#7473</del>)</li>\n<li><del>#7478</del> --- the category of chain complexes is additive, and various functoriality properties (depends on <del>#7477</del> and <del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7463\">#7463</a></del>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7483\">#7483</a> --- homotopies (depends on <del>#7478</del>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7484\">#7484</a> --- the homotopy category (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7483\">#7483</a> and <del>#7465</del>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a> --- projective resolutions (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7485\">#7485</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7484\">#7484</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7487\">#7487</a> --- derived functors (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7488\">#7488</a> --- abelian categories with enough projectives have projective resolutions (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7480\">#7480</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7512\">#7512</a> --- definition of <code>tor</code> in a monoidal category (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7487\">#7487</a>)</li>\n<li><del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7514\">#7514</a></del> --- the opposite of an abelian category is abelian</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7525\">#7525</a> --- definition of <code>ext</code> in a linear abelian category (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7487\">#7487</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7488\">#7488</a> and <del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7514\">#7514</a></del>)</li>\n</ul>",
        "id": 238867208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621052750
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7480\">#7480</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/7485\">#7485</a>, and <a href=\"https://github.com/leanprover-community/mathlib/issues/7483\">#7483</a> have been merged, and I've added a dependency in <a href=\"https://github.com/leanprover-community/mathlib/issues/7484\">#7484</a> to David Warn's <a href=\"https://github.com/leanprover-community/mathlib/issues/7501\">#7501</a>, which bors is currently merging.</p>",
        "id": 238901982,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621089106
    },
    {
        "content": "<p>The derived category is on the horizon!?</p>",
        "id": 238902562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621089673
    },
    {
        "content": "<p>I'm starting the LTE refactor.</p>",
        "id": 238902778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621089876
    },
    {
        "content": "<p>The derived category itself is still a bit harder than anything in these PRs. We need some nontrivial work on localization first.</p>",
        "id": 238902905,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621089977
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/cat_localization\">branch#cat_localization</a></p>",
        "id": 238902976,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621090064
    },
    {
        "content": "<p>But that's just some silly inductive construction. We probably want more control on the inverses we add</p>",
        "id": 238903031,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621090095
    },
    {
        "content": "<p>And besides, now that we have the free category on a quiver, we can even simplify this inductive construction significantly</p>",
        "id": 238903379,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621090410
    },
    {
        "content": "<p>I don't know the maths here, but I guess the localization can be defined as a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.quotient\">docs#category_theory.quotient</a> of a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.paths\">docs#category_theory.paths</a></p>",
        "id": 238911254,
        "sender_full_name": "David Wärn",
        "timestamp": 1621098104
    },
    {
        "content": "<p>The remaining tail, as far as I can see:</p>\n<ul>\n<li><del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7484\">#7484</a></del> --- the homotopy category (depends on <del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7483\">#7483</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7465\">#7465</a></del>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a> --- projective resolutions (depends on <del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7485\">#7485</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7484\">#7484</a></del>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7487\">#7487</a> --- derived functors (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7488\">#7488</a> --- abelian categories with enough projectives have projective resolutions (depends on <del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7480\">#7480</a></del>)</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7512\">#7512</a> --- definition of <code>tor</code> in a monoidal category (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7487\">#7487</a>)</li>\n<li><del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7514\">#7514</a></del> --- the opposite of an abelian category is abelian</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7525\">#7525</a> --- definition of <code>ext</code> in a linear abelian category (depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/7487\">#7487</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/7488\">#7488</a> and <del> <a href=\"https://github.com/leanprover-community/mathlib/issues/7514\">#7514</a></del>)</li>\n</ul>",
        "id": 239700361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621576719
    },
    {
        "content": "<p>I've kicked <a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a> on the queue</p>",
        "id": 240811256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622453370
    },
    {
        "content": "<p>Derived functors are now unblocked!</p>",
        "id": 240844467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622473875
    }
]