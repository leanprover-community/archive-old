[
    {
        "content": "<p>This PR is refactoring the limit API to work with arbitrary universes. I didn't dare to take on the refactor myself, but <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> proved that it is very doable!<br>\nStill, I think this is a change that we should consider carefully, because we don't want to get bitten by it later on. (We've done several refactors of the universe levels for objects/morphisms, and those weren't always fun.)<br>\nSo I invite <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> to look at this PR. Input from others is of course also very welcome.</p>",
        "id": 261752835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637136105
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> could you please take a look and leave a review?</p>",
        "id": 262412157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637642300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> <br>\nI just found that universes were not generalized in <a href=\"https://leanprover-community.github.io/mathlib_docs/category_theory/limits/preserves/basic.html\">https://leanprover-community.github.io/mathlib_docs/category_theory/limits/preserves/basic.html</a><br>\nI think this is an unintentional omission, right?</p>",
        "id": 264642789,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1639342085
    },
    {
        "content": "<p>Maybe preserves_limits should have the universe restriction, but preserves_limit and preserves_limits_of_shape could be generalized.</p>",
        "id": 264642967,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1639342336
    },
    {
        "content": "<p>That was probably intentional for that PR since I wanted to make minimal changes.<br>\nThat said, what a coincidence that <a href=\"https://github.com/leanprover-community/mathlib/pull/10736\">#10736</a> was just opened yesterday. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 264651629,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639354172
    },
    {
        "content": "<p>Thanks for the work! Great to see it's already completed.</p>\n<p>Continuous functors are defined to be functors that preserves small limits, so I think the universe restriction on preserves_limits is reasonable. However I suspect that in most cases where a functor preserves_limits we should also be able to show it preserves_limits_of_size with arbitrary values of the two universe variables. This is the case at least for functors with adjoints; counterexamples may exist but should be rare. (Of course there are functors that preserves finite limits but not all small limits, but I suspect set-theoretic constructions are needed to produce examples for different universe levels of the index category J.)</p>\n<p>I noticed the universe restriction on preserves_colimit when working on colimits in categories produced by the Grothendieck construction. (BTW, the bundled module category people are working on and discussing is also an example, and I hope the API will be of broader use.) The hom-types of the base category and the fiber categories may belong to different universe, and the total category would have hom-types in the max of the universes, and we need to consider cocones indexed by the same category J in the base, fiber, and total categories; fortunately we can talk about these cocones and their colimits thanks to this PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/10243\">#10243</a>). However when I try to state that functors between fiber categories preserves limits, Lean complains. It seems Lean is unable to automatically fixate the fiber hom-type universes to be equal to that of J; I'll try to fixate the universes manually to see if the error goes away. (It doesn't make much sense to allow different hom-type universe for fibers and base, since if they are different we can usually only expect colimits in the total category to exist for J in the minimum of the universes, so the total category doesn't has_limits even when the base and fibers has_limits. PresheafedSpace could be shown to has_colimits only because Top.presheaf is defined to require value category hom-types belong to the same universe as the topological space.) So I may not end up using your new PR, but still great to see it happen!</p>",
        "id": 264656518,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1639361211
    },
    {
        "content": "<p>I made that PR when trying to show that monomorphsims of functors can be checked pointwise, which follows easily from existing material as well, but the universes does not match. I guess it is until now that people didn't really need to talk about limits of functors, where these issue mostly occur.<br>\nI'll probably only generalize the unverses in the <code>functor_category</code> files though. I don't think I would go on and generalize all ocurrences of <code>preserves_limits</code> since most categories doesn't have arbitrary limits to begin with.</p>",
        "id": 264657089,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639362002
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/evaluation_adjunction.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/evaluation_adjunction.lean</a></p>\n<p>Is the result at the bottom of that file what you're proving Andrew?</p>",
        "id": 264657878,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639362993
    },
    {
        "content": "<p>Oh that's great!<br>\nI was thinking of using <code>category_theory/limits/constructions/epi_mono.lean</code>.<br>\nDo we know that <code>evaluation.obj X</code> preserves epi as well?</p>",
        "id": 264658589,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639363933
    },
    {
        "content": "<p>Yeah it should be there</p>",
        "id": 264658601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639363970
    },
    {
        "content": "<p>Well, one direction</p>",
        "id": 264658617,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639363984
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.nat_trans.epi_app_of_epi\">docs#category_theory.nat_trans.epi_app_of_epi</a></p>",
        "id": 264658622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639364015
    },
    {
        "content": "<p>I guess you want the other direction?</p>",
        "id": 264658674,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639364071
    },
    {
        "content": "<p>Yeah. It should still follow from <a href=\"https://github.com/leanprover-community/mathlib/pull/10736\">#10736</a> though.</p>",
        "id": 264658839,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639364338
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10793\">#10793</a></p>",
        "id": 264916429,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639511878
    }
]