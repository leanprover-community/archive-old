[
    {
        "content": "<p>Mathematicians find it frustrating when their goal is \"obviously the same\" as a hypothesis, except the hypothesis is about integers and the goal is about real numbers. These docs attempt to give some hints about how to deal with this, plus a slightly more in-depth discussion about what is going on for those who are interested. Comments are welcome.</p>",
        "id": 136607409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540646906
    },
    {
        "content": "<p>I suggested to fix two typos, and had two other minor comments. See my review on Github.</p>",
        "id": 136614223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540659241
    },
    {
        "content": "<p>I was struck by the comment \"your goal is <code>↑x * ↑y = ↑z</code>, something which you suspect is a statement about real numbers\", which reminds me that in HoTT they always write <code>Path ℝ (↑x * ↑y) ↑z</code>. We can get goals like <code>⊢ @eq real x y</code> with <code>pp</code> options, but as soon as you throw in coercions or operator syntax, it's unreadable... I'm dreaming of more laser-focused <code>pp</code> options that would just show the types of coercions or equalities in a nice way</p>",
        "id": 136614403,
        "sender_full_name": "Scott Olson",
        "timestamp": 1540659558
    },
    {
        "content": "<p>There might be a way of doing it by switching <code>pp.implicit</code> on or something</p>",
        "id": 136615244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540661057
    },
    {
        "content": "<p>I didn't think about it too hard</p>",
        "id": 136615246,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540661063
    },
    {
        "content": "<p>Unfortunately it doesn't work because <code>pp.notation</code> (on by default) hides the implicit arguments of the operators, and setting that to false makes up most of the mess that <code>pp.all</code> causes</p>",
        "id": 136615271,
        "sender_full_name": "Scott Olson",
        "timestamp": 1540661142
    },
    {
        "content": "<p>Aargh. My PR is not quite ready. My plan was to give a recipe so that undergraduate mathematicians had an algorithm to deal with any such \"easy in maths\" issues they came up with. But I've just found one that does not seem to be covered by what I wrote:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- what now?</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The first one is fine. For the second one, I am hoping for a proof which does not require knowing the explicit name of the theorem that says that two rationals are equal iff the corresponding reals are equal. You can see that in the first example I did not need to know the name of any theorem in mathlib; there are 5 choose 2 such theorems and ideally I would like students not to have to know their names explicitly. How do I solve the second goal? I would like to add this to the docs but I don't know myself (in the past I've just found the name of the theorem and applied it directly)</p>",
        "id": 136650007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540729447
    },
    {
        "content": "<p>There are not 5 choose 2 theorems, there are 5</p>",
        "id": 136650021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540729504
    },
    {
        "content": "<p>That sentence does not bode well</p>",
        "id": 136650029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540729517
    },
    {
        "content": "<p>I think it would help if rather than speaking vaguely about the coercions you just list all of them and their names</p>",
        "id": 136650038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540729539
    },
    {
        "content": "<p><code>nat.cast</code>, <code>int.cast</code>, <code>rat.cast</code>, <code>complex.of_real</code>, <code>int.coe_nat</code></p>",
        "id": 136650039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540729559
    },
    {
        "content": "<p>all the names are based on these segments</p>",
        "id": 136650079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540729575
    },
    {
        "content": "<blockquote>\n<p>Aargh. My PR is not quite ready.</p>\n</blockquote>\n<p>Don't worry, they haven't accepted any PR in 10 days</p>",
        "id": 136650087,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540729608
    },
    {
        "content": "<p>I was looking at them earlier today FYI... I would have merged Kevin's but there were some outstanding fixes</p>",
        "id": 136650097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540729643
    },
    {
        "content": "<p>The point of the docs was to show 1st year mathematicians an algorithm for proving everything of this nature which is \"trivial in maths\". The algorithm currently only relies on the students knowing <code>rw</code> and <code>simp</code> but if we cannot do this one with these tools then of course I am going to have to tell them about more tools</p>",
        "id": 136650102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540729671
    },
    {
        "content": "<p>I mean for the section where you talk about the names of the theorems</p>",
        "id": 136650151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540729734
    },
    {
        "content": "<p>Mario what I need -- what <em>they</em> need -- is an algorithm which generates all 5 choose 2 proofs of <code>example (a b : X) (H : (a : Y) = b) : a = b</code> for <code>X</code> and <code>Y</code> running through NZQRC with <code>X&lt;Y</code></p>",
        "id": 136650167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540729768
    },
    {
        "content": "<p>If the algorithm is \"here are 5 choose 2 proofs\" then so be it</p>",
        "id": 136650173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540729792
    },
    {
        "content": "<p>I really want to hide the names of the theorems from the students, because we are well into \"trivial in maths\" territory here.</p>",
        "id": 136650219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540729828
    },
    {
        "content": "<p>This is what that <code>cast</code> tactic we talked about would be for</p>",
        "id": 136650222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540729848
    },
    {
        "content": "<p>And my philosophy is: if it's trivial in maths, make it easy in Lean.</p>",
        "id": 136650227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540729855
    },
    {
        "content": "<p>If the theorem is literally <code>a = b</code> with variables, simp can figure it out</p>",
        "id": 136650288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540729928
    },
    {
        "content": "<p>the problem is when you have <code>a + b = c</code> so that <code>\\u (a + b) = \\u c</code> can simplify in two ways, to <code>a + b = c</code> and <code>\\u a + \\u b = \\u c</code></p>",
        "id": 136650295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540729976
    },
    {
        "content": "<p>You usually want to convert between those last two, but the path is \"uphill\" part of the way, to the non-simp normal form <code>\\u (a + b) = \\u c</code></p>",
        "id": 136650310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730026
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H2</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">--- gaargh dammit</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136650378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730126
    },
    {
        "content": "<p>and simp chooses one of them kind of at random, leading to \"gaargh dammit\" moments</p>",
        "id": 136650432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730192
    },
    {
        "content": "<p>I understand how to get from <code>\\u a + \\u b = \\u c</code> to <code>\\u (a + b) = \\u c</code> and hopefully I explain that in the docs. The trick which beginners can use is to prove <code>\\u a + \\u b = \\u (a + b)</code> using <code>simp</code> and then rewrite.</p>",
        "id": 136650433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730214
    },
    {
        "content": "<p>But here I am struggling to do this just using simp and rw</p>",
        "id": 136650435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730222
    },
    {
        "content": "<p>and I would like to put more examples of this in until I never struggle again</p>",
        "id": 136650441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730236
    },
    {
        "content": "<p>I know how to achieve it using only the explicit lemma <code>\\u a = \\u b &lt;-&gt; a = b</code></p>",
        "id": 136650444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730245
    },
    {
        "content": "<p>Invoking <code>real.of_int_inj</code> or whatever, magical functions with mysterious and inconsistent names, is exactly what I want to avoid</p>",
        "id": 136650456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730277
    },
    {
        "content": "<p>However if these cannot be avoided then I think they should be explicitly listed in the docs</p>",
        "id": 136650503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730308
    },
    {
        "content": "<p>all 5 choose 2 of them</p>",
        "id": 136650511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730328
    },
    {
        "content": "<p>there are not 5 choose 2!</p>",
        "id": 136650515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730340
    },
    {
        "content": "<p>:-)</p>",
        "id": 136650518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730344
    },
    {
        "content": "<p>there are, it's just that you can't tell some of them apart ;-)</p>",
        "id": 136650523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730354
    },
    {
        "content": "<p>some of them are the same theorem</p>",
        "id": 136650526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730367
    },
    {
        "content": "<p>not if you fill in the implicit arguments</p>",
        "id": 136650528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730377
    },
    {
        "content": "<p>like N -&gt; Q and N -&gt; R</p>",
        "id": 136650529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730379
    },
    {
        "content": "<p>I know I know. What I need is an algorithm which takes 5 choose 2 inputs and spits out an output in each case, and you're observing that the underlying function isn't injective.</p>",
        "id": 136650589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730420
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H2</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 136650651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730548
    },
    {
        "content": "<p>Mathematician sees : \"q = 3 -&gt; q = 3\"</p>",
        "id": 136650653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730575
    },
    {
        "content": "<p>If it is the \"initial\" function for N,Z,Q, it's named after the source (because it can't be named after the target, which is generic) and it's called <code>cast</code>. The functions <code>int.coe_nat</code> and <code>complex.of_real</code> are separate for reasons, and they (and other such specialized functions) are usually named by the target. More generally, the rule of thumb is it's named after whatever is introduced last</p>",
        "id": 136650661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730592
    },
    {
        "content": "<p>Dammit why isn't this easier</p>",
        "id": 136650663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730612
    },
    {
        "content": "<p>it's trivial in maths.</p>",
        "id": 136650664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730620
    },
    {
        "content": "<p>Did you say something about a <code>cast</code> tactic?</p>",
        "id": 136650665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730629
    },
    {
        "content": "<p>a wishlist tactic, yes</p>",
        "id": 136650704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730644
    },
    {
        "content": "<p>The strategy for using the <code>inj</code> functions is to take the \"smaller\" field and lift it to the larger one using <code>inj</code> (on the goal or the hypothesis, wherever it is). Then <code>simp</code> will bring them together</p>",
        "id": 136650731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730747
    },
    {
        "content": "<p>does <code>rat.cast_inj.1 $ by simpa</code> work for your example?</p>",
        "id": 136650780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>Lean scores 9/10 on this one</p>",
        "id": 136650781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730834
    },
    {
        "content": "<p>like I said, try <code>q + q = r</code> and lean will score a lot less</p>",
        "id": 136650826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730891
    },
    {
        "content": "<p>which one fails?</p>",
        "id": 136650827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540730904
    },
    {
        "content": "<p>First one</p>",
        "id": 136650828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730911
    },
    {
        "content": "<p>In my notes I explain an algorithm for <code>q + q = r</code>; I think <code>\\u q + \\u q = \\u (q + q)</code> gets solved by <code>simp</code> in all ten cases</p>",
        "id": 136650831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540730943
    },
    {
        "content": "<p>oh, <code>(@rat.cast_inj ℝ _ _ _ _).1 $ by simpa</code> works, not so nice</p>",
        "id": 136650893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540731042
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>Lean gets 10/10 for this one</p>",
        "id": 136650899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731068
    },
    {
        "content": "<p>no, I mean <code>q + q = r -&gt; q + q = r</code></p>",
        "id": 136650903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540731104
    },
    {
        "content": "<p><code>q = 3</code> is the same kind of problem</p>",
        "id": 136650951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540731130
    },
    {
        "content": "<p>I know, but this can be reduced to <code>\\u a = \\u b -&gt; a = b</code> by proving the sublemma which I just proved above, and then rewriting it</p>",
        "id": 136650953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731152
    },
    {
        "content": "<p>of course, they are all trivial theorems</p>",
        "id": 136650954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540731167
    },
    {
        "content": "<p>like literally two applications of lemmas</p>",
        "id": 136650955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540731176
    },
    {
        "content": "<p>but you don't want to refer to any lemmas, so it is hard</p>",
        "id": 136650960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540731188
    },
    {
        "content": "<p>I know!</p>",
        "id": 136650961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731195
    },
    {
        "content": "<p>That's the point of the docs.</p>",
        "id": 136650962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731199
    },
    {
        "content": "<p>To find out if I have to refer to the lemmas, and to spell out explicitly which lemmas to use, so that beginners ultimately have an algorithm for proving any \"trivial in maths\" statements of this form</p>",
        "id": 136650966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731232
    },
    {
        "content": "<p>Yesterday I thought I had got it down to 0 lemmas but now I realise there is this one glitch</p>",
        "id": 136651009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731260
    },
    {
        "content": "<p>if you want to codify it to this extent, it's better to (prod someone to) write a tactic</p>",
        "id": 136651011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540731283
    },
    {
        "content": "<p>All these things ought to be \"cast everything to <code>complex</code> and run <code>ring</code>\".</p>",
        "id": 136651020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540731302
    },
    {
        "content": "<p>you don't need <code>ring</code>, <code>simp</code> is enough. But \"cast everything to <code>complex</code>\" is the hard part here</p>",
        "id": 136651044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540731336
    },
    {
        "content": "<blockquote>\n<p>All these things ought to be \"cast everything to <code>complex</code> and run <code>ring</code>\".</p>\n</blockquote>\n<p>Octonians, surely?</p>",
        "id": 136651164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731580
    },
    {
        "content": "<p>lol, you complain about <code>nat</code> subtraction having poor properties and then you cast to a number field which isn't even associative</p>",
        "id": 136651234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540731641
    },
    {
        "content": "<p>OK maybe quaternions are better</p>",
        "id": 136651303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731772
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>0/10 for Lean here</p>",
        "id": 136651305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731778
    },
    {
        "content": "<p>and we also learn that someone thinks that Q R C are a different colour to N and Z, I only just noticed this</p>",
        "id": 136651313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540731806
    },
    {
        "content": "<p>The reason I am interested in these questions is that they come up in real life and I am being asked them again and again by beginners attempting to do mathematics. Just a simple question such as \"prove that the square root of 2 is irrational\" is fraught with these difficulties. The numerator of a rational is an int, the denominator is a nat, and getting from <code>q ^ 2 = 2</code> to <code>n ^ 2 = 2 * d ^ 2</code> (the latter in int) is hard for beginners. And then getting from this to a statement about q not being <code>sqrt 2</code>in the reals is hard again. The fact that I've just been teaching this stuff in M1F means that these questions come up, and my docs are an attempt to resolve these issues once and for all. The reason I think this is important is that it's exactly the \"trivial in maths, hard in Lean\" phenomenon which puts beginners off, and once they're gone, I've lost them.</p>",
        "id": 136651435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732045
    },
    {
        "content": "<p>I realise now however that my docs do not cover all use cases, because I am currently stuck on <code>example (q : ℚ) (H : (q : ℝ) = 3) : q = 3</code>.</p>",
        "id": 136651480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732104
    },
    {
        "content": "<p>you don't need to convince me that these problems are important, or come up often. But I am apparently more comfortable than you with asking people to use the theorems that are there expressly for the purpose</p>",
        "id": 136651493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540732164
    },
    {
        "content": "<p>I am too old to remember a big list of theorems, and my users are too new to know the list, so this is two reasons why I really need to write this list down.</p>",
        "id": 136651543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732211
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>\n\n\n<p>Two down, eight to go</p>",
        "id": 136651553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732254
    },
    {
        "content": "<p>[just to be clear, simp never works here]</p>",
        "id": 136651559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732278
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_inj</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</pre></div>",
        "id": 136651612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732388
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℝ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℂ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℝ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℂ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℝ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℂ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span>\n</pre></div>\n\n\n<p>8/10</p>",
        "id": 136651657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540732473
    },
    {
        "content": "<p>the <code>rat.cast_inj</code> ones don't work for some reason</p>",
        "id": 136651662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540732500
    },
    {
        "content": "<p>?! :-)</p>",
        "id": 136651672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732508
    },
    {
        "content": "<p>lol, <code>by simpa using h</code> works</p>",
        "id": 136651732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540732574
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_inj&#39;</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℝ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℂ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℚ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℝ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℂ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℝ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span> <span class=\"n\">ℂ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>10/10</p>",
        "id": 136651813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540732778
    },
    {
        "content": "<p>You still need to know the names of the five theorems though :-(</p>",
        "id": 136651866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732809
    },
    {
        "content": "<p>that's probably the best you will get unless you write a tactic that applies these five theorems. (It's not that hard, I'm sure your minions can do it)</p>",
        "id": 136651889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540732883
    },
    {
        "content": "<p>I will fix up the docs giving as much of an algorithm as I can.</p>",
        "id": 136651891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732919
    },
    {
        "content": "<p>But I am always looking for challenges for my minions.</p>",
        "id": 136651930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732929
    },
    {
        "content": "<p>What exactly are you envisaging?</p>",
        "id": 136651933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732952
    },
    {
        "content": "<p>How much can one hope for?</p>",
        "id": 136651937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540732969
    },
    {
        "content": "<p>look at the type of the equality of the selected hypothesis or the target, if it's real or int or rat you can apply the right theorem by a lookup table</p>",
        "id": 136651947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540733032
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">((((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">53</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"mi\">53</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">cast</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 136652004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540733123
    },
    {
        "content": "<p>Would something like that require Hudon-like powers?</p>",
        "id": 136652005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540733130
    },
    {
        "content": "<p>as long as you keep the scope limited it should be fine</p>",
        "id": 136652052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540733188
    },
    {
        "content": "<p>I am trying to get from you a feeling as to what is reasonable here</p>",
        "id": 136652058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540733203
    },
    {
        "content": "<p>so I can give them an accessible challenge</p>",
        "id": 136652060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540733211
    },
    {
        "content": "<p>the hudon powers come in when generalizing it to multiple hypotheses, reverting things, evaluating numerals or something</p>",
        "id": 136652063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540733217
    },
    {
        "content": "<p>I'm thinking closer to just automating literally those 10 examples</p>",
        "id": 136652072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540733251
    },
    {
        "content": "<p>OK! I guess that is already a challenge as far as I am concerned!</p>",
        "id": 136652075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540733266
    },
    {
        "content": "<p>also possibly where the hypothesis and goal are switched</p>",
        "id": 136652124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1540733289
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">should_I_be_a_simp_lemma</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_inj</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>Is that a bad simp lemma? Is it already there if I do the right import?</p>",
        "id": 136652751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540734435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> How would <code>rewrite_search</code> fare on these problems?</p>",
        "id": 136653290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540735331
    },
    {
        "content": "<p>I suspect <code>rewrite_search!</code> (bang) will dispatch them using <code>simp</code> accidentally, but I'll give <code>rewrite_search</code> a try and see if it gets lost.</p>",
        "id": 136653417,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1540735563
    },
    {
        "content": "<p>Well, I don't really mind which version you try... it would be nice if some tactic kills these.</p>",
        "id": 136653478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540735726
    },
    {
        "content": "<p>Here are the 11 examples which <code>simp</code> doesn't kill.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_inj</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_inj</span>\n</pre></div>",
        "id": 136653623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540736029
    },
    {
        "content": "<p>My understanding is that <code>simp</code> knows the right lemma in most cases, but applies things in the wrong order and gets stuck (it simplifies <code>\\u 3</code> to 3). The iff statement corresponding to<code>int.of_nat_inj</code> should perhaps be a simp lemma, and if I've got this right then that kills the last example.</p>",
        "id": 136653673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540736077
    },
    {
        "content": "<p>I fed it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- set_option trace.simplify.rewrite true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">((</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_int</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_coe_nat</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_int_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_nat_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_rat_cast</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>and it gives back the proof</p>\n<div class=\"codehilite\"><pre><span></span>rw complex.of_real_sub,\nrw complex.of_real_rat_cast,\nrw rat.cast_add,\nrw rat.cast_mul,\nrw rat.cast_coe_int,\nrw rat.cast_coe_nat,\n</pre></div>\n\n\n<p>or in short form</p>\n<div class=\"codehilite\"><pre><span></span>conv_rhs { rw complex.of_real_sub, congr, rw [complex.of_real_rat_cast, rat.cast_add],\n           congr, rw rat.cast_coe_int, skip, rw rat.cast_mul, congr, rw rat.cast_coe_nat }\n</pre></div>",
        "id": 136654313,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1540737092
    },
    {
        "content": "<p>Ok, I don't understand completely. Did you give it hints, or did it find these proofs all alone?</p>",
        "id": 136654427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540737303
    },
    {
        "content": "<p>I had to cheat an tell it \"use the coersion bundle of lemmas\",<br>\nwe have a cute little command <code>suggestion coes</code> to do this</p>\n<p>To get it I just stripped out the body of the <code>begin...end</code> block and inserted a call to <code>rewrite_search {trace_result := tt}</code> instead<br>\nAnd yeah <code>rewrite_search!</code> just cheats</p>",
        "id": 136654501,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1540737470
    },
    {
        "content": "<p>Ok, but could we potentially use this as a hammer to kill variants of these lemmas in one line (one word)...</p>",
        "id": 136654571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540737558
    },
    {
        "content": "<p>Actually I didn't even need to write <code>suggestion coes</code>, I just needed to <em>create</em> the coes bundle, which didn't exist until it needed to just now. Rewrite search can detect its getting desperate and searches through its library of things to see if any bundle of things \"coersions, category_theory, arithmetic, etc.\" are applicable and it starts trying the detected most relevant ones. This is still pretty crude though, we want to minimise the amount of handling like this</p>\n<p>That's right. I mean, so long as you give it access to <code>simp</code> (which it doesn't have without the bang) it is just like a shotgun version of <code>simp</code>, which should be at least as strong</p>",
        "id": 136654660,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1540737681
    },
    {
        "content": "<p>Cool! <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> What do you think of this?</p>",
        "id": 136654705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540737738
    },
    {
        "content": "<p>I don't really understand what is being said. I generated that long begin end proof with simp. Proving the equalities is not the problem, proving the injectivity of the coercions is the problem</p>",
        "id": 136655787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540739426
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/447\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/447\">https://github.com/leanprover/mathlib/pull/447</a></p>",
        "id": 136657206,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1540741193
    },
    {
        "content": "<p>Hi. I'm one of <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s minions who's just started learning about Lean. Here's a first attempt at a tactic that obviates the need to remember the names for all the <code>cast_inj</code> things by just trying each of them in sequence:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">nzqrc</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n  <span class=\"n\">eh</span> <span class=\"err\">←</span> <span class=\"n\">intro</span> <span class=\"bp\">`</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat_inj</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">cast_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">to_expr</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_inj</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">exact</span> <span class=\"bp\">&lt;|&gt;</span>\n  <span class=\"n\">trace</span> <span class=\"s2\">&quot;failed: no matching coercion&quot;</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">nzqrc</span>\n</pre></div>\n\n\n<p>I mentioned that I suspect the code could be made a lot tidier, and he suggested that I post it again in this stream. Would be very grateful if I could get some guidance with maybe taking something like this further as a tactic that makes dealing with coercions more straightforward for beginners?</p>",
        "id": 136665415,
        "sender_full_name": "Jean Lo",
        "timestamp": 1540752392
    },
    {
        "content": "<p>I guess my dream would be a tactic which takes as input a hypothesis which a mathematician would find indistinguishable from the goal (ie the same modulo coercions) and solves the goal. Is that asking too much?</p>",
        "id": 136665750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540753072
    },
    {
        "content": "<p>I wouldn't have a clue how to start writing it though</p>",
        "id": 136665790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540753087
    },
    {
        "content": "<p>I think Keeley demonstrated that <code>rewrite_search!</code> can do that. So we should just get that tactic into mathlib.</p>",
        "id": 136665870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540753287
    },
    {
        "content": "<p>Can <code>rewrite_search</code> simplify this proof from <code>data.zmod.quadratic_reciprocity</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">euler_criterion_units</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">euler_criterion</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmodp</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy0</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">zero_pow</span> <span class=\"o\">(</span><span class=\"n\">succ_pos</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"bp\">;</span> <span class=\"n\">cc</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">euler_criterion_units</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">⟨</span><span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">mk0</span> <span class=\"bp\">_</span> <span class=\"n\">hy0</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">mk0</span> <span class=\"bp\">_</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">euler_criterion_units</span> <span class=\"n\">hp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">mk0</span> <span class=\"bp\">_</span> <span class=\"n\">ha</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">])</span> <span class=\"k\">in</span>\n  <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hy</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 136665925,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540753395
    },
    {
        "content": "<p>6 lines is outrageously long.</p>",
        "id": 136665964,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540753442
    },
    {
        "content": "<p>And this certainly fits into the category of indistinguishable to most mathematicians.</p>",
        "id": 136665992,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540753510
    },
    {
        "content": "<p>It cannot Chris, but maybe it is just missing a lemma. If you strip the body of that proof and replace it with a call to <code>tidy</code> I get two goals (this is with the suped-up <code>tidy</code> of Scott's category theory library though, so mathlib tidy might be different). Do the goals you get look reasonable? I just looked very quickly and couldn't tell if they were nonsense or not.</p>",
        "id": 136681427,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1540782654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> <span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> if I take a step back and look at the current state of <a href=\"https://github.com/leanprover-community/mathlib/blob/cast_docs/docs/extras/casts.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/cast_docs/docs/extras/casts.md\">what I wrote</a>, it seems to me that where we are is something like the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"c1\">-- next one fails but</span>\n<span class=\"c1\">-- attribute [simp] int.of_nat_eq_of_nat_iff</span>\n<span class=\"c1\">-- fixes is it. Is this a good simp lemma?</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- currently fails</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">((((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span> <span class=\"bp\">↔</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">12</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n</pre></div>\n\n\n<p>I think beginners would be rightly confused about the randomness of this. I am dreaming of a failsafe <code>cast_num</code> tactic which can replace <code>simp</code> here and which would solve every case. I do not know anything about <code>rewrite_search!</code> other than the fact that it doesn't seem to be in my mathlib -- sorry -- I've not been following these tactic developments. But this post is supposed to be some sort of indication as to what my <del>minions</del>clients would be after.</p>",
        "id": 136690806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1540800699
    },
    {
        "content": "<blockquote>\n<p>It cannot Chris, but maybe it is just missing a lemma. If you strip the body of that proof and replace it with a call to <code>tidy</code> I get two goals (this is with the suped-up <code>tidy</code> of Scott's category theory library though, so mathlib tidy might be different). Do the goals you get look reasonable? I just looked very quickly and couldn't tell if they were nonsense or not.</p>\n</blockquote>\n<p>I tried it. The second goal was false, it guessed <code>1</code> as a solution for the <code>exists</code> statement.</p>",
        "id": 136726568,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540838714
    },
    {
        "content": "<p>But this is not related to the NZQRC casts, right?</p>",
        "id": 136726817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1540838942
    },
    {
        "content": "<p>No</p>",
        "id": 136727453,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540839517
    },
    {
        "content": "<p>But actually you might find similar problems with more complicated statements involving things like exists.</p>",
        "id": 136727490,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1540839567
    }
]