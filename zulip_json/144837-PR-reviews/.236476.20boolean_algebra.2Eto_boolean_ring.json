[
    {
        "content": "<p>Most of this PR is ready for review, but I'm stuck on defining the final <code>equiv</code> between <code>boolean_algebra</code> and <code>boolean_ring</code>. I think I have all the pieces but I'm stuck with some scary equalities between structures that I don't know how to simplify. See the <code>sorry</code>s <a href=\"https://github.com/leanprover-community/mathlib/pull/6476/files#diff-d9391fd66fc8b5b1b4f34b04e9cdc2289a7a5b54a1c4d9b8c2def01da8218b23R320\">here</a>. Any help or suggestions are welcome!</p>",
        "id": 242095576,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623257065
    },
    {
        "content": "<p>If you add <code>@[ext]</code> to <code>class boolean_ring α</code> and if you <em>also</em> define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kd\">lemma</span> <span class=\"n\">ring.ext</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_add</span> <span class=\"o\">:</span> <span class=\"n\">i.add</span> <span class=\"bp\">=</span> <span class=\"n\">j.add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"n\">i.mul</span> <span class=\"bp\">=</span> <span class=\"n\">j.mul</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_zero</span> <span class=\"o\">:</span> <span class=\"n\">i.zero</span> <span class=\"bp\">=</span> <span class=\"n\">j.zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"n\">i.one</span> <span class=\"bp\">=</span> <span class=\"n\">j.one</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>then you can finish your first proof with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">rcases</span> <span class=\"n\">BR</span> <span class=\"k\">with</span> <span class=\"o\">⟨⟨⟩⟩,</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">to_boolean_algebra</span><span class=\"o\">,</span> <span class=\"n\">boolean_algebra.to_boolean_ring</span><span class=\"o\">],</span>\n      <span class=\"n\">ext1</span><span class=\"o\">,</span>\n      <span class=\"n\">ext1</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">to_boolean_algebra.add_eq</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">to_boolean_algebra.mul_eq</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">to_boolean_algebra.zero_eq</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">to_boolean_algebra.one_eq</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>It's a bit surprising that <code>ring.ext</code> isn't there. You don't even need that the zeros are equal, you can deduce this from the fact that the additions are equal and the fact that they're both add_group structures. Are we missing an import? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring.ext\">docs#ring.ext</a> Edit: apparently not.</p>",
        "id": 242118386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623267463
    },
    {
        "content": "<p>Maybe ring.ext should also ask that negs are the same, and then we need lemmas saying subs, nsmuls, gsmuls and npows are the same.</p>",
        "id": 242119110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623267841
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">monoid.ext</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"n\">i.mul</span> <span class=\"bp\">=</span> <span class=\"n\">j.mul</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"n\">i.one</span> <span class=\"bp\">=</span> <span class=\"n\">j.one</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">i_mul</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">i_one</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">i_npow</span><span class=\"o\">,</span> <span class=\"n\">i_npow_zero</span><span class=\"o\">,</span> <span class=\"n\">i_npow_succ</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">j_mul</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">j_one</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">j_npow</span><span class=\"o\">,</span> <span class=\"n\">j_npow_zero</span><span class=\"o\">,</span> <span class=\"n\">j_npow_succ</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">i_mul</span> <span class=\"bp\">=</span> <span class=\"n\">j_mul</span> <span class=\"n\">at</span> <span class=\"n\">h_mul</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">i_one</span> <span class=\"bp\">=</span> <span class=\"n\">j_one</span> <span class=\"n\">at</span> <span class=\"n\">h_one</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h_one</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_npow</span> <span class=\"o\">:</span> <span class=\"n\">i_npow</span> <span class=\"bp\">=</span> <span class=\"n\">j_npow</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i_npow_zero</span><span class=\"o\">,</span> <span class=\"n\">j_npow_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i_npow_succ</span><span class=\"o\">,</span> <span class=\"n\">j_npow_succ</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h_npow</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Do we not have _any_ of these?? I am holding off from generating the lemmas Bryan needs simply because I am half-expecting someone to tell me that they're already there. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> you would have noticed them when doing the group/monoid refactor if they were there (because they're now harder work to prove!)</p>",
        "id": 242122409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623269205
    },
    {
        "content": "<p><code>attribute [ext] ring</code> will prove these things for you</p>",
        "id": 242125778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623270823
    },
    {
        "content": "<p>It will prove a very poor version of what we want, because it will demand equality of npow and sub and neg and gpow etc etc</p>",
        "id": 242125946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623270887
    },
    {
        "content": "<p>We should(?) have stuff like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">group.ext</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"n\">i.mul</span> <span class=\"bp\">=</span> <span class=\"n\">j.mul</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(I'm in the middle of proving it)</p>",
        "id": 242126053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623270951
    },
    {
        "content": "<p>I think we don't have these just because no-one ever needed them. (In which situation would you have two different group structures on a space, that happen to be the same but in a non-obvious way?)</p>",
        "id": 242127375,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623271552
    },
    {
        "content": "<p>When proving that boolean algebra structures on alpha are equiv to boolean ring structures? (i.e. see the first post in this thread)</p>",
        "id": 242127467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623271580
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module_ext\">docs#module_ext</a> in this style. And I thought I saw one for algebra, but maybe in a PR.</p>",
        "id": 242127483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623271589
    },
    {
        "content": "<p><code>ring.ext</code> doesn't exist for the reason <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> said. Similar versions exist for other classes when this arose, like I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/partial_order.ext\">docs#partial_order.ext</a> exists. I think <code>ring.ext</code> should only require that add and mul are the same, everything else should follow.</p>",
        "id": 242127845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623271761
    },
    {
        "content": "<p>Also <code>monoid.ext</code> doesn't need the one to be the same</p>",
        "id": 242128010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623271832
    },
    {
        "content": "<p>Are there any useful applications of this equivalence between boolean ring structures and boolean algebra structures, aside from the fact that it's a philosophically satisfying result?</p>",
        "id": 242128053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623271854
    },
    {
        "content": "<p>Then is Bryan doing something wrong? He's trying to prove that there's a bijection between boolean ring and boolean algebra structures on a type. Checking that his constructions round trip involves precisely having to show that two ring structures are the same because their additions and multiplications agree.</p>",
        "id": 242128129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623271884
    },
    {
        "content": "<p>It makes sense for it to appear in this context, although I agree that it's not particularly likely to be used</p>",
        "id": 242128300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623271960
    },
    {
        "content": "<p>I think that these ext lemmas are useful if only to record the information about which fields of a structure imply which other fields</p>",
        "id": 242128359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623271989
    },
    {
        "content": "<p>In metamath we would normally just use these fields in the structure, i.e. a ring is a pair of an add and mul and everything else is derived. In lean we like to have lots of redundant fields so the proof that they are redundant is missing</p>",
        "id": 242128580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623272089
    },
    {
        "content": "<p>We could make a <code>ring.of_add_mul</code> function...</p>",
        "id": 242128707,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623272154
    },
    {
        "content": "<p>Right, but that wouldn't prove the ext lemma I don't think?</p>",
        "id": 242128781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623272176
    },
    {
        "content": "<p>In fact that's the kind of function that we may well already have.</p>",
        "id": 242128796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623272188
    },
    {
        "content": "<p>True</p>",
        "id": 242128804,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623272195
    },
    {
        "content": "<p>the ext lemma would be equivalent to the assertion that <code>ring.of_add_mul</code> is surjective</p>",
        "id": 242128806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1623272197
    },
    {
        "content": "<p>Am I making a meal of this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">group.ext</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"n\">i.mul</span> <span class=\"bp\">=</span> <span class=\"n\">j.mul</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">iG</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">j</span> <span class=\"o\">},</span>\n  <span class=\"n\">change</span> <span class=\"n\">i_mul</span> <span class=\"bp\">=</span> <span class=\"n\">j_mul</span> <span class=\"n\">at</span> <span class=\"n\">h_mul</span><span class=\"o\">,</span> <span class=\"n\">subst</span> <span class=\"n\">h_mul</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"n\">i_one</span> <span class=\"bp\">=</span> <span class=\"n\">j_one</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">j_mul_one</span> <span class=\"n\">i_one</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">i_one_mul</span> <span class=\"n\">j_one</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h_one</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_inv</span> <span class=\"o\">:</span> <span class=\"n\">i_inv</span> <span class=\"bp\">=</span> <span class=\"n\">j_inv</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mul_left_inj</span> <span class=\"n\">a</span><span class=\"o\">],</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">i_mul_left_inv</span> <span class=\"n\">a</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">j_mul_left_inv</span> <span class=\"n\">a</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h_inv</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_div</span> <span class=\"o\">:</span> <span class=\"n\">i_div</span> <span class=\"bp\">=</span> <span class=\"n\">j_div</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">i_div_eq_mul_inv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">j_div_eq_mul_inv</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h_div</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_npow</span> <span class=\"o\">:</span> <span class=\"n\">i_npow</span> <span class=\"bp\">=</span> <span class=\"n\">j_npow</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i_npow_zero'</span><span class=\"o\">,</span> <span class=\"n\">j_npow_zero'</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i_npow_succ'</span><span class=\"o\">,</span> <span class=\"n\">j_npow_succ'</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h_npow</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_gpow_aux</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">i_gpow</span> <span class=\"o\">(</span><span class=\"n\">int.of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">j_gpow</span> <span class=\"o\">(</span><span class=\"n\">int.of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">i_gpow_zero'</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">j_gpow_zero'</span> <span class=\"n\">g</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i_gpow_succ'</span><span class=\"o\">,</span> <span class=\"n\">j_gpow_succ'</span><span class=\"o\">,</span> <span class=\"n\">IH</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_gpow</span> <span class=\"o\">:</span> <span class=\"n\">i_gpow</span> <span class=\"bp\">=</span> <span class=\"n\">j_gpow</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">z</span> <span class=\"k\">with</span> <span class=\"n\">z</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h_gpow_aux</span> <span class=\"n\">z</span> <span class=\"n\">x</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">i_gpow_neg'</span><span class=\"o\">,</span> <span class=\"n\">j_gpow_neg'</span><span class=\"o\">],</span>\n      <span class=\"n\">congr'</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h_gpow_aux</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h_gpow</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 242129024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623272295
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/pysBJqwz8OhZ-fuD5Buf9vHH/module_ext.png\">module_ext.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pysBJqwz8OhZ-fuD5Buf9vHH/module_ext.png\" title=\"module_ext.png\"><img src=\"/user_uploads/3121/pysBJqwz8OhZ-fuD5Buf9vHH/module_ext.png\"></a></div><p>This VS Code bracket colorizer comes into its own with this proof :-)</p>",
        "id": 242129400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623272477
    },
    {
        "content": "<p>OOH! How can I get a rainbow in my own VSCode?</p>",
        "id": 242129477,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623272511
    },
    {
        "content": "<p>(a) install Bracket Pair Colorizer 2 (b) wait for possibly up to a month for the VS Code gods to randomly decide to start using it (at least, this was my experience)</p>",
        "id": 242129606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623272555
    },
    {
        "content": "<p>Woah, it even underlines the bracketed sections! Thanks :D</p>",
        "id": 242129974,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623272730
    },
    {
        "content": "<p>Thanks so much for the tips <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> and everyone else! I'll try to take a look later tonight or later this week.</p>",
        "id": 242136359,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623275781
    },
    {
        "content": "<p>If I'm not making a meal of it, then a minor modification (read: delete stuff) will work for monoid but then for <code>ring</code> maybe you have to repeat a bunch of code? :-/ But that will at least give you a route to what you want, although people seemed suspicious that the result was needed...</p>",
        "id": 242137136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623276241
    },
    {
        "content": "<p>Only tangentially related here, but... I think we should teach <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#ext\">attr#ext</a> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/extensional_attribute\">docs#extensional_attribute</a>) to learn how to read <code>@[notation_class]</code>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/notation_class_attr\">docs#notation_class_attr</a>) so that instead of creating a lemma about <code>group.mul</code> it creates one about <code>(*)</code></p>",
        "id": 242138192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623276997
    },
    {
        "content": "<p>That is, have it generate a lemma like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">div_inv_monoid.ext</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">div_inv_monoid</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span>\n  <span class=\"o\">(</span><span class=\"n\">h_one</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one.one</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_mul</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_inv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_inv.inv</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_inv.inv</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_div</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_div.div</span> <span class=\"n\">G</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_npow</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_pow.pow</span> <span class=\"n\">G</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_pow.pow</span> <span class=\"n\">G</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">h_gpow</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_pow.pow</span> <span class=\"n\">G</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">j</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_pow.pow</span> <span class=\"n\">G</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span><span class=\"o\">))),</span>\n  <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 242139683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623278123
    },
    {
        "content": "<p>This <em>might</em> not be true -- you might find that type class inference picks up on <code>i</code> (even though it's not in square brackets in the lemma statement) and uses it as the div_inv_monoid instance throughout.</p>",
        "id": 242140493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623278739
    },
    {
        "content": "<p>I take it back -- it does seem to work.</p>",
        "id": 242140619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623278818
    },
    {
        "content": "<p>I know the statement is sane because I was able to prove it up to npow, when I got annoyed with rewrite by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gpow_eq_pow\">docs#gpow_eq_pow</a> failing and ran out of time to try <code>@</code>s</p>",
        "id": 242141326,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623279432
    },
    {
        "content": "<p>btw we do use the ext lemmas in mathlib already in one place I know of: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/preadditive/schur.lean#L90\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/preadditive/schur.lean#L90</a></p>",
        "id": 242146996,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1623284450
    },
    {
        "content": "<p>The statement that Bryan has feels a bit like trying to show <code>monoid α ≃ add_monoid α</code>, which I'm pretty sure we never bother with. Instead of the equiv, should we have <code>lattice_like R</code> and <code>ring_like L</code> to mirror <code>additive</code> and <code>multiplicative</code>?</p>",
        "id": 242163803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623306043
    },
    {
        "content": "<p>I'm finally coming back to this. I think I'll try to make some PRs filling in some of these <code>*.ext</code> lemmas, at least up to <code>ring</code> or so. Hopefully it's not too painful to extend what <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> has already done above!</p>",
        "id": 245349878,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1625767752
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8391\">#8391</a> has <code>ext</code> lemmas for all the <code>class</code>es in <code>algebra.group.defs</code>. The proofs are all very repetitive, so I'm wondering if we should be automating most or all of this.</p>",
        "id": 246804905,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1626923802
    },
    {
        "content": "<p>Can you reduce the work by proving something like <code>injective comm_monoid.to_monoid</code> then reuse <code>monoid.ext</code> to prove <code>comm_monoid.ext</code>?</p>",
        "id": 246812987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626935060
    }
]