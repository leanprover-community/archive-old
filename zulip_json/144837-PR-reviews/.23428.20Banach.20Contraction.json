[
    {
        "content": "<p>PR by <span class=\"user-mention\" data-user-id=\"120559\">@Rohan Mitta</span>.</p>",
        "id": 151452941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544541519
    },
    {
        "content": "<p>I edited this PR based on feedback from Patrick, I think it's ready now but any other feedback would be appreciated!</p>",
        "id": 151607136,
        "sender_full_name": "Rohan Mitta",
        "timestamp": 1544708486
    },
    {
        "content": "<p>I think there is still overlap with existing stuff, eg <a href=\"https://github.com/leanprover/mathlib/blob/master/data/real/cau_seq_filter.lean#L164\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/real/cau_seq_filter.lean#L164\">https://github.com/leanprover/mathlib/blob/master/data/real/cau_seq_filter.lean#L164</a></p>",
        "id": 151618862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544717788
    },
    {
        "content": "<p>And I'm sure you can extract lemmas from the Banach contraction proof</p>",
        "id": 151618877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544717805
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 151834889,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1544875267
    },
    {
        "content": "<p>In fact I don't think I found a use for anything in cau_seq_filter.lean<br>\n   (Edit : I see this was because I didn't go beyond the first half of metric_sequences.lean)</p>",
        "id": 151834942,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1544875398
    },
    {
        "content": "<p>We've got <code>sequentially_complete.tendsto_div</code>used in metric_sequences.lean, in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">lim_sequence_of_mem_closure</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">closure</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>But nothing from metric_sequences.lean is actually used in banach_contraction.lean any more</p>",
        "id": 151835097,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1544875693
    },
    {
        "content": "<p>Isn't this basically constructive? It's a shame I that we have to mark as noncomputable the function to return the fixed point because the definition of completeness uses an exists.</p>",
        "id": 152036009,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545060694
    },
    {
        "content": "<p>It looks very non-computable to me</p>",
        "id": 152036085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545060728
    },
    {
        "content": "<p>This is what we keep repeating to our students: compactness and completeness give you elements for free! Constructive maths don't give anything for free, they want you to suffer.</p>",
        "id": 152036140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545060786
    },
    {
        "content": "<p>Why is that? If I have a cauchy sequence of, say, reals then I have constructed a real</p>",
        "id": 152036161,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545060806
    },
    {
        "content": "<p>This is a very special case, because you constructed real like that</p>",
        "id": 152036192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545060837
    },
    {
        "content": "<p>And it's breaking an abstraction barrier</p>",
        "id": 152036251,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545060852
    },
    {
        "content": "<p>We want to use this theorem for many complete spaces which are not constructed as completions</p>",
        "id": 152036288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545060887
    },
    {
        "content": "<p>OK. Can you give me an example?</p>",
        "id": 152036327,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545060917
    },
    {
        "content": "<p>Differentiable functions for instance</p>",
        "id": 152036342,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545060934
    },
    {
        "content": "<p>Say you want to prove Cauchy-Lipschitz theorem about existence and uniqueness of solutions to nice ordinary differential equations</p>",
        "id": 152036376,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545060958
    },
    {
        "content": "<p>I think @Rohan Mitta will probably want to kill me because I put Mario off reviewing this <span class=\"emoji emoji-1f615\" title=\"oh no\">:oh_no:</span></p>",
        "id": 152044239,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545067395
    },
    {
        "content": "<p>I panicked</p>",
        "id": 152044258,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545067405
    },
    {
        "content": "<p>if you want some more tips: the style of tactic indentation isn't quite standard, there are some funny names like <code>Banach's_fixed_point</code> and generally nonconforming names (they should be more or less strictly based on reading the symbols), <code>fixed_point_of_iteration_limit'</code> and <code>fixed_point_of_iteration_limit</code> are the same, the main theorem is far too long (I think it can be shorter, and this should also be lemma'd if not)</p>",
        "id": 152045032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545067926
    },
    {
        "content": "<p>I wrote that last remark many times, so I guess they'll need more help there. But I really want to finish completions (before the end of July 2018...)</p>",
        "id": 152045161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545068043
    },
    {
        "content": "<p>We do have a much shorter one here <a href=\"https://github.com/agjftucker/mathlib/blob/Banach/analysis/topology/banach_contraction.lean#L253\" target=\"_blank\" title=\"https://github.com/agjftucker/mathlib/blob/Banach/analysis/topology/banach_contraction.lean#L253\">https://github.com/agjftucker/mathlib/blob/Banach/analysis/topology/banach_contraction.lean#L253</a></p>",
        "id": 152045274,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545068156
    },
    {
        "content": "<p>That's much better!</p>",
        "id": 152045404,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545068241
    },
    {
        "content": "<p>What's the difference with the next statement?</p>",
        "id": 152045488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545068297
    },
    {
        "content": "<p>Why can't you get rid of <code>0 ≤ K →</code>?</p>",
        "id": 152045558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545068361
    },
    {
        "content": "<p>The statement is much the same but the method is different</p>",
        "id": 152045561,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545068366
    },
    {
        "content": "<p>I think because otherwise you need inhabiteds ?</p>",
        "id": 152045676,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545068433
    },
    {
        "content": "<p>In fact you need at least two distinct points</p>",
        "id": 152045720,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545068479
    },
    {
        "content": "<p>the space is already inhabited</p>",
        "id": 152045730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545068490
    },
    {
        "content": "<p>why two points?</p>",
        "id": 152045736,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545068494
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 152045796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545068531
    },
    {
        "content": "<p>crazy computers...</p>",
        "id": 152045799,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545068536
    },
    {
        "content": "<p>To prove that K &gt;=0 I think you need two</p>",
        "id": 152045811,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545068551
    },
    {
        "content": "<p>yeah, but if the space has only one point then it's a fixed point :P</p>",
        "id": 152045947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545068651
    },
    {
        "content": "<p>Yeah!</p>",
        "id": 152045958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545068665
    },
    {
        "content": "<p>Let's begin with this very natural case disjunction!</p>",
        "id": 152045970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545068678
    },
    {
        "content": "<p>lol</p>",
        "id": 152045977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545068683
    },
    {
        "content": "<p>I would suggest putting <code>K &gt;= 0</code> in the definition of lipschitz</p>",
        "id": 152045995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545068703
    },
    {
        "content": "<p>OK I can change that in the main theorem :) But I might still need some <code>0 \\leq K</code> in the preceding lemmas</p>",
        "id": 152046020,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545068722
    },
    {
        "content": "<blockquote>\n<p>I would suggest putting <code>K &gt;= 0</code> in the definition of lipschitz</p>\n</blockquote>\n<p>Yes, definitely -- I played a lot with this in Isabelle, and it turned out to be much more manageable once I enforced <code>K &gt;= 0</code>.</p>",
        "id": 152054653,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1545075800
    },
    {
        "content": "<p>will do. Thanks</p>",
        "id": 152054798,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1545075905
    },
    {
        "content": "<blockquote>\n<p>Let's begin with this very natural case disjunction!</p>\n</blockquote>\n<p>That's pretty much how the proof I was taught as an undergraduate began!</p>",
        "id": 152056937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545077755
    }
]