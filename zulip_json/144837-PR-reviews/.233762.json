[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, does my question about proving</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">Monad_Mon_equiv</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">unit_iso</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">func</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n\n<p>make sense? (I'm hoping I'm not being dumb, and that is the correct right hand side.)</p>",
        "id": 206889657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597367922
    },
    {
        "content": "<p>My suspicion is that you have been \"evil\" enough in your proofs that not only does this not work by <code>rfl</code>, but that it's going to be painful to prove at all.</p>",
        "id": 206889674,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597367956
    },
    {
        "content": "<p>And the solution is to not use <code>functor.ext</code> and related machinery.</p>",
        "id": 206889684,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597367971
    },
    {
        "content": "<p>Yes it makes sense. I'll try to see if your suggestion of using nat_iso.of_components works.</p>",
        "id": 206890479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597368936
    },
    {
        "content": "<p>Yeah, the stupid eq_to_hom lemmas I added we're because of the use of functor.ext.</p>",
        "id": 206890563,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597369039
    },
    {
        "content": "<p>Is there any other reasonable way to prove equality of functors?</p>",
        "id": 206890820,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597369357
    },
    {
        "content": "<p>I suspect the answer is \"never prove equality of functors\"</p>",
        "id": 206890836,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597369393
    },
    {
        "content": "<p>I went through several rounds of trying to make use of equalities of functors, but in every case <code>eq.rec</code> eventually came back to bite me.</p>",
        "id": 206890990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597369580
    },
    {
        "content": "<p>I see. To be honest, I also found these proofs surprisingly painful. Probably for similar reasons.</p>",
        "id": 206891103,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597369698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I tried this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">Monad_Mon_equiv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Monad</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"err\">‚âå</span> <span class=\"o\">(</span><span class=\"n\">Mon_</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">functor</span> <span class=\"o\">:=</span> <span class=\"n\">Monad_to_Mon</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">inverse</span> <span class=\"o\">:=</span> <span class=\"n\">Mon_to_Monad</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">unit_iso</span> <span class=\"o\">:=</span> <span class=\"n\">nat_iso</span><span class=\"bp\">.</span><span class=\"n\">of_components</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">eq_to_iso</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">to_of_mon_end_obj</span><span class=\"o\">)))</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">id_map</span><span class=\"o\">,</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span><span class=\"o\">,</span> <span class=\"n\">comp_to_nat_trans</span><span class=\"o\">,</span> <span class=\"n\">eq_to_iso</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span>\n        <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">vcomp_eq_comp</span><span class=\"o\">,</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">Monad</span><span class=\"bp\">.</span><span class=\"n\">to_nat_trans_eq_to_hom</span><span class=\"o\">,</span>\n        <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">id_app</span><span class=\"o\">,</span> <span class=\"n\">id_comp</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom_refl</span><span class=\"o\">,</span> <span class=\"n\">comp_id</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">counit_iso</span> <span class=\"o\">:=</span> <span class=\"n\">nat_iso</span><span class=\"bp\">.</span><span class=\"n\">of_components</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">eq_to_iso</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">of_to_mon_end_obj</span><span class=\"o\">)</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Mon_</span><span class=\"bp\">.</span><span class=\"n\">hom_eq_to_hom</span><span class=\"o\">,</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">id_map</span><span class=\"o\">,</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span><span class=\"o\">,</span> <span class=\"n\">Mon_</span><span class=\"bp\">.</span><span class=\"n\">comp_hom&#39;</span><span class=\"o\">,</span> <span class=\"n\">id_comp</span><span class=\"o\">,</span>\n        <span class=\"n\">eq_to_hom_refl</span><span class=\"o\">,</span> <span class=\"n\">eq_to_iso</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">,</span> <span class=\"n\">comp_id</span><span class=\"o\">],</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>But it seems essentially equivalent to what's already there, and the example you mentioned still doesn't work.</p>",
        "id": 206892787,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597371929
    },
    {
        "content": "<p>Any suggestions?</p>",
        "id": 206892796,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597371949
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 206894999,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597375422
    },
    {
        "content": "<p>I'm now thinking the way around this is to define the unit/counit_iso without every touching eq_to_hom/eq_to_iso</p>",
        "id": 206895449,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597376064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I got it to work! (I just constructed the isomorphisms between the functors directly.)</p>\n<p>See: <a href=\"https://github.com/leanprover-community/mathlib/blob/b9111c09ced26e65e8ccca4214e34f689d86a708/src/category_theory/monad/equiv_mon.lean#L230\">https://github.com/leanprover-community/mathlib/blob/b9111c09ced26e65e8ccca4214e34f689d86a708/src/category_theory/monad/equiv_mon.lean#L230</a></p>",
        "id": 206896712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597378420
    },
    {
        "content": "<p>Now the question is: Should I keep the isomorphism between the categories <code>Monad_Mon_iso</code>?<br>\nThis uses <code>to_nat_trans_eq_to_hom</code> and <code>Mon_.hom_eq_to_hom</code>. I don't see how to avoid this (or some variant, e.g. I can just introduce these claims in the middle of a tactic block using <code>have : ...</code>).</p>",
        "id": 206896850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597378626
    },
    {
        "content": "<p>For much the same reason as we had trouble with the equiv, I'm not sure that the isomorphism is actually useful.</p>",
        "id": 206897280,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1597379306
    },
    {
        "content": "<p>I agree. I added a note in the docstring at the top of the file. do you think I should just delete the iso?</p>",
        "id": 206897353,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597379464
    },
    {
        "content": "<p>Ok. I'll do that tomorrow (it's late)</p>",
        "id": 206897433,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597379594
    }
]