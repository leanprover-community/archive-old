[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255743\">@Paul van Wamelen</span> introduces <code>coprime</code> in a <code>comm_monoid_with_zero</code> to mean that two elements share no prime factors. I'd also considered, but not yet implemented, defining <code>coprime a b</code> at the level of a <code>gcd_monoid</code> to mean <code>gcd a b = 1</code>. These unfortunately only agree in the case of unique factorization.</p>",
        "id": 208495265,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598808253
    },
    {
        "content": "<p>Does anyone have strong opinions on this definition? If no opinions pop up, then Paul's definition should take precedence because Paul has actually implemented it first.</p>",
        "id": 208495301,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598808338
    },
    {
        "content": "<p>You can still define <code>gcd_monoid.coprime</code>. But how many different notions of <code>coprime</code> will mathlib know by then? I think some of the older ones should maybe be refactored away, if they are generalised by (one of) these.</p>",
        "id": 208495466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598808564
    },
    {
        "content": "<p>I'd like to make <code>nat.coprime</code> a property of a <code>gcd_monoid</code> structure on N, but it's in core</p>",
        "id": 208495568,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598808697
    },
    {
        "content": "<p>Ooh, that's right. And I think <code>gcd</code> has special VM support for fast GMP calculations</p>",
        "id": 208495654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598808743
    },
    {
        "content": "<p>I think your latter case is covered by my <code>is_coprime</code></p>",
        "id": 208495677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598808808
    },
    {
        "content": "<p>I mean, we could make an instance of <code>gcd_monoid</code> for <code>nat</code> where <code>gcd</code> and <code>lcm</code> are the core definitions, but that wouldn't coincide definitionally with the instance coming from unique factorization, once I get a <code>unique_factorization_monoid</code> instance on N</p>",
        "id": 208495740,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598808874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233984/near/208495677\">said</a>:</p>\n<blockquote>\n<p>I think your latter case is covered by my <code>is_coprime</code></p>\n</blockquote>\n<p>Not if we're working in a monoid without addition or subtraction, I don't think.</p>",
        "id": 208495759,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598808915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233984/near/208495568\">said</a>:</p>\n<blockquote>\n<p>I'd like to make <code>nat.coprime</code> a property of a <code>gcd_monoid</code> structure on N, but it's in core</p>\n</blockquote>\n<p>Ooh wait, we can't rip <code>nat.gcd</code> out of core. But we could definitely rip the definition of coprime away.</p>",
        "id": 208495823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598808981
    },
    {
        "content": "<p>In <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}[X,Y]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span></span></span></span> the elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> are considered to be coprime, because we have a UFD and there's a standard meaning. But the ideals <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(Y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> are not, because their sum is not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>.  In particular there is already some kind of ambiguity in standard mathematical usage.</p>",
        "id": 208496016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598809185
    },
    {
        "content": "<p>Personally, I would prefer to restrict the name <code>coprime</code> for coprime ideals and for pairs of elements whose associated ideals are coprime. I think the word \"non_associated\" (or something like that) would be better for, e.g., the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X,Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> example that Kevin mentioned.</p>",
        "id": 208496386,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598809665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233984/near/208496386\">said</a>:</p>\n<blockquote>\n<p>Personally, I would prefer to restrict the name <code>coprime</code> for coprime ideals and for pairs of elements whose associated ideals are coprime. I think the word \"non_associated\" (or something like that) would be better for, e.g., the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X,Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> example that Kevin mentioned.</p>\n</blockquote>\n<p>Isn't there already <code>comaximal</code> for the ideal definition, when there's no other name for <code>coprime</code> for UFD/naturals?</p>",
        "id": 208496495,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598809806
    },
    {
        "content": "<p>I don't think my \"implemented it first\" should be a reason for going with my definition. I'm more than happy to wait for Aaron's work and his definition if that would work better. I also doubt that <code>coprime</code> in a <code>comm_monoid_with_zero</code> would ever be used unless you are already in <code>gcd_monoid</code> so no harm in having it \"only\" in <code>gcd_monoid</code>.</p>",
        "id": 208496828,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1598810345
    },
    {
        "content": "<p>coprime/comaximal in a monoid with zero has a very precise meaning, which is not necessarily saying that the two elements do not share a prime factor: it says that in any quotient in which the two elements are identified with zero, all the elements are identified with zero. I.e. the associated congruences are coprime. Whether this will be used in practice is a different question.</p>",
        "id": 208497223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598810980
    },
    {
        "content": "<p>(note that for monoids it's a very restrictive notion)</p>",
        "id": 208497281,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598811029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255743\">Paul van Wamelen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233984/near/208496828\">said</a>:</p>\n<blockquote>\n<p>I don't think my \"implemented it first\" should be a reason for going with my definition. I'm more than happy to wait for Aaron's work and his definition if that would work better. I also doubt that <code>coprime</code> in a <code>comm_monoid_with_zero</code> would ever be used unless you are already in <code>gcd_monoid</code> so no harm in having it \"only\" in <code>gcd_monoid</code>.</p>\n</blockquote>\n<p>If that's how you feel, I should probably prioritize my relevant work</p>",
        "id": 208497970,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598811973
    },
    {
        "content": "<p>Should I PR it separately, or add it to your branch, <span class=\"user-mention\" data-user-id=\"255743\">@Paul van Wamelen</span> ?</p>",
        "id": 208498216,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598812364
    },
    {
        "content": "<p>Yours should probably be its own PR.</p>",
        "id": 208498505,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1598812895
    },
    {
        "content": "<p>Actually, there is a bit of a problem with defining <code>coprime a b</code> in a UFD (or UFM) as <code>gcd a b = 1</code>: you would first have to pick a <code>normalization</code>. As Kevin has pointed out a few times already, that could get painful...</p>",
        "id": 208500127,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1598815344
    },
    {
        "content": "<p>The definition of UFD needs to be changed, it is not a predicate on rings right now</p>",
        "id": 208500137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598815388
    },
    {
        "content": "<p>I have a predicate-on-rings (actually on monoids) definition on my branch, but I'm afraid I don't have a great answer to the normalization problem</p>",
        "id": 208500153,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598815435
    },
    {
        "content": "<p>We could generalize <code>gcd_monoid</code> to not require normalization, and only have all of the equations be true up to <code>associated</code>, and then have a separate normalized version</p>",
        "id": 208500201,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598815477
    },
    {
        "content": "<p>and then we'd define <code>coprime a b</code> as <code>is_unit (gcd a b)</code></p>",
        "id": 208500205,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598815505
    },
    {
        "content": "<p>But that's not going to be defeq to <code>nat.coprime</code></p>",
        "id": 208500273,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598815585
    },
    {
        "content": "<p>I'm finding though that we have a normalization for pretty much every specific example we care about - is this not the case here?</p>",
        "id": 208501709,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598817680
    },
    {
        "content": "<p>Oh right, there's another definition, which still isn't definitionally equal to <code>nat.coprime</code>, but which I think is always at least equivalent to what we want: instead of saying that two elements have no common prime factors, say they have no common non-unit factors</p>",
        "id": 208502222,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598818421
    },
    {
        "content": "<p>(i.e. any common factor must be a unit)</p>",
        "id": 208502387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598818606
    },
    {
        "content": "<p>I don't think we have a normalization for <code>gaussian_int</code>, do we?</p>",
        "id": 208502471,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1598818755
    },
    {
        "content": "<p>let A be the integral closure of Z in C. It is well-known that there are no irreducibles in A, so any two elements are trivially coprime1, but one can easily find elements that are not coprime2. (I'm just exploring examples)</p>",
        "id": 208502483,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598818795
    },
    {
        "content": "<p>Are 2 and 3 coprime2? (edit: yeah they are)</p>",
        "id": 208502485,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598818799
    },
    {
        "content": "<p>how do coprime1 and coprime2 behave under ring homs?</p>",
        "id": 208502630,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598818958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255743\">Paul van Wamelen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233984/near/208502471\">said</a>:</p>\n<blockquote>\n<p>I don't think we have a normalization for <code>gaussian_int</code>, do we?</p>\n</blockquote>\n<p>Hmmm... I think we don't, we should add that.</p>",
        "id": 208502639,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598819010
    },
    {
        "content": "<p>There is no definition of a normalisation which has nice mathematical properties, so why not just use the axiom of choice to make one?</p>",
        "id": 208502841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598819325
    },
    {
        "content": "<p>I think for now I'm going to redo what I need in terms of <code>(associates.mk a) ⊓ (associates.mk b) = 1</code>. I can always later restate it in terms of whatever coprime definition we come up with.</p>",
        "id": 208503069,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1598819654
    },
    {
        "content": "<p>Go ahead. I think we should have a definition at the <code>comm_monoid_with_zero</code> level or more general, as a property of the common factors: either saying the common factors are all units, or are not prime. I think we can refactor fairly easily if we decide which one's correct without changing any UFD API.</p>",
        "id": 208503448,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598820147
    }
]