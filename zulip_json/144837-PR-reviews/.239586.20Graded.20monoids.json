[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9586\">#9586</a> tries to split out some of the graded ring logic from <code>direct_sum</code> such that we can also work with additively-graded multiplicative monoids.</p>\n<p>While in principle a graded monoid is just some collection of types <code>(A : ι → Type*)</code> that has a suitable identity in <code>A 0</code> and multiplication <code>A i → A j → A (i + j)</code> that satisfy the usual monoid axioms, in practice it's helpful to state these axioms with<code>Σ i, A i</code> on which a multiplication can be placed.</p>\n<p>Rather than putting a non-canonical  (because they could also be multiplicatively-graded)<code>has_mul</code> instances on <code>sigma</code> (which was previously what <code>direct_sum</code> did via local instances), this creates a type alias <code>graded_monoid</code> and puts the instance on that. The problem with this approach is that you would probably expect <code>graded_monoid</code> to be the typeclass (which is instead <code>gmonoid</code>), not the type alias for the sigma type.</p>\n<p>Does anyone have a better suggestion for the name of this type alias?</p>",
        "id": 256583086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633615642
    },
    {
        "content": "<p>Also struggling to come up with a good name. Would <code>gsigma</code> be insane?</p>",
        "id": 256596970,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633620425
    },
    {
        "content": "<p>I guess it would match the others</p>",
        "id": 256599218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633621157
    },
    {
        "content": "<p><code>graded_term</code> might also work</p>",
        "id": 256599419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633621225
    }
]