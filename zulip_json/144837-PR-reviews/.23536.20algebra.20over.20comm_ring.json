[
    {
        "content": "<p>Changed the target to <code>ring</code> not <code>comm_ring</code>.</p>",
        "id": 154831785,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547118828
    },
    {
        "content": "<p>So... <code>algebra</code> should probably be a class.</p>",
        "id": 154901762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547195039
    },
    {
        "content": "<p>als ik het verandere naar en class, wat zou de name zijn?</p>",
        "id": 154901803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195051
    },
    {
        "content": "<p>Why not keep calling it <code>algebra</code>?</p>",
        "id": 154901811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547195084
    },
    {
        "content": "<p>het naam von de morphisme dat het algebra defineeret</p>",
        "id": 154901813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195086
    },
    {
        "content": "<p>waarhijdlijk?</p>",
        "id": 154901826,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195114
    },
    {
        "content": "<p>dus als we hebben dat C is een R-algebra, het pi in C wordt “algebra C pi” heetet?</p>",
        "id": 154901885,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195198
    },
    {
        "content": "<p>I don't get it. What is the trouble with changing <code>structure algebra</code> on line 28 to <code>class algebra</code>?</p>",
        "id": 154901890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547195212
    },
    {
        "content": "<p>dat man kun niet meer “i x” zeggen</p>",
        "id": 154901913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195247
    },
    {
        "content": "<p>voor “i : algebra R A” en “x : R”</p>",
        "id": 154901919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195260
    },
    {
        "content": "<p>Why not? Aaah, because coercions and type class inference don't play well together?</p>",
        "id": 154901969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547195288
    },
    {
        "content": "<p>dat als algebra een class is, we zouden niet hebben een naam voor de instance</p>",
        "id": 154901976,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195323
    },
    {
        "content": "<p>Ok, so this is a question about the levels of bundling we want... is that right?</p>",
        "id": 154902089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547195498
    },
    {
        "content": "<p>nee, dit is over het naam van de morphism defineerend</p>",
        "id": 154902154,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195553
    },
    {
        "content": "<p>Wait, no. I really don't get it. We can just use classes as if they are structures, right?</p>",
        "id": 154902156,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547195563
    },
    {
        "content": "<p>nee nog</p>",
        "id": 154902167,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195580
    },
    {
        "content": "<p>je kunt niet zeggen “i : algebra R A” als algebra class is</p>",
        "id": 154902181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195613
    },
    {
        "content": "<p>(je kunt, maar het moet ons niet)</p>",
        "id": 154902188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547195631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> What do you think?</p>",
        "id": 154902322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547195794
    },
    {
        "content": "<p>Somehow I would expect to use this as <code>{R S : Type} [comm_ring R] [algebra R S]</code>. But apparently that is rather hard. Because now we cannot map an <code>r : R</code> into <code>S</code> without awful contortions.</p>",
        "id": 154902418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547195994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> If we had <code>S : Algebra R</code>, then you could write <code>S.hom r</code> to map <code>r : R</code> to <code>S</code>.</p>",
        "id": 154902505,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547196117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> waar ben je?</p>",
        "id": 154902561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547196131
    },
    {
        "content": "<p>Somewhere in a train in Germany...</p>",
        "id": 154902576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547196150
    },
    {
        "content": "<p>I had to travel back today, sorry.</p>",
        "id": 154902585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547196161
    },
    {
        "content": "<p>dus je wil niet class hebben?</p>",
        "id": 154902586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547196161
    },
    {
        "content": "<p>I no longer know what is good and what I want and what to do <span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span></p>",
        "id": 154902605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547196186
    },
    {
        "content": "<p>lekker!</p>",
        "id": 154902613,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547196201
    },
    {
        "content": "<p>What was your reason for <code>algebra R S</code> instead of <code>S : Algebra R</code>?</p>",
        "id": 154902678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547196244
    },
    {
        "content": "<p>dat we kunnen zeggen dat S een korp is</p>",
        "id": 154902684,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1547196268
    },
    {
        "content": "<p>Aah, of course, and you want to move between <code>R1</code>-algebra and <code>R2</code>-algebra structures if there is an <code>f : R1 -&gt; R2</code> and <code>S</code> is an <code>R2</code>-algebra.</p>",
        "id": 154902721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547196321
    },
    {
        "content": "<p>korp -&gt; lichaam</p>",
        "id": 154902728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547196332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> What is the approach that canonical structures take in situations like these? I guess you have the bundled <code>Algebra R</code> version, and you will have to write explicitly the functors for moving between <code>Algebra R1</code> and <code>Algebra R2</code>. Is that right?</p>",
        "id": 154902809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547196444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> (I subscribed you to this stream. No sure if you want that... It's all about discussing PRs to mathlib.)</p>",
        "id": 154902859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547196482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> It looks like the instance <code>S : set R, h : is_subring S |- algebra S R</code> would never work if the first parameter of <code>algebra</code> is an out_param</p>",
        "id": 156674418,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548234956
    },
    {
        "content": "<p>should we reconsider making it a class instead of making it a structure?</p>",
        "id": 156674481,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548234999
    },
    {
        "content": "<p>I think for algebra we cannot have it an <code>out_param</code> anymore. We already see that it is a problem for <code>module</code>, but for <code>algebra</code> it completely breaks down</p>",
        "id": 156677314,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548238222
    },
    {
        "content": "<p>ok</p>",
        "id": 156677450,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548238344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> then why is module still using out_param?</p>",
        "id": 156677473,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548238381
    },
    {
        "content": "<p>What does this mean in practice for people like me who don't really know what an <code>out_param</code> is?</p>",
        "id": 156677476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548238382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> its some work to change it right now, and it requires the user to annotate more types at inconvenient places</p>",
        "id": 156679581,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548240591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> well I tried to change it before, and then I got some error, and I posted it in the general chat, and nobody helped fix the error</p>",
        "id": 156679641,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548240622
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Module.20refactor\" title=\"#narrow/stream/113488-general/topic/Module.20refactor\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Module.20refactor</a></p>",
        "id": 156679664,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548240662
    },
    {
        "content": "<p>Yes, we should revive this branch.</p>",
        "id": 156679759,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1548240727
    },
    {
        "content": "<p>do we have any more comments for this PR? It's been here for more than a month</p>",
        "id": 156728185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548280126
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">subalgebra</span><span class=\"bp\">.</span><span class=\"n\">comm_ring</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">comm_ring</span> <span class=\"err\">↥</span><span class=\"n\">S</span>\n</pre></div>\n\n\n<p>why should this cause an instance loop?</p>",
        "id": 156759442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548321925
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances] (9) ?x_68 : comm_ring ?x_66 := @subalgebra.comm_ring ?x_72 ?x_73 ?x_74 ?x_75 ?x_76 ?x_77\n[class_instances] (10) ?x_74 : comm_ring ?x_72 := @subalgebra.comm_ring ?x_78 ?x_79 ?x_80 ?x_81 ?x_82 ?x_83\n[class_instances] (11) ?x_80 : comm_ring ?x_78 := @subalgebra.comm_ring ?x_84 ?x_85 ?x_86 ?x_87 ?x_88 ?x_89\n[class_instances] (12) ?x_86 : comm_ring ?x_84 := @subalgebra.comm_ring ?x_90 ?x_91 ?x_92 ?x_93 ?x_94 ?x_95\n[class_instances] (13) ?x_92 : comm_ring ?x_90 := @subalgebra.comm_ring ?x_96 ?x_97 ?x_98 ?x_99 ?x_100 ?x_101\n[class_instances] (14) ?x_98 : comm_ring ?x_96 := @subalgebra.comm_ring ?x_102 ?x_103 ?x_104 ?x_105 ?x_106 ?x_107\n...\n</pre></div>",
        "id": 156759448,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548321938
    },
    {
        "content": "<p>can't Lean see that there is no <code>↥</code>?</p>",
        "id": 156759463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548321958
    },
    {
        "content": "<p>You are searching for <code>comm_ring ?</code></p>",
        "id": 156759558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548322066
    },
    {
        "content": "<p>that's already a bad sign - what started this search?</p>",
        "id": 156759570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548322082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[class_instances] (0) ?x_2 : @vector_space ?x_0 L ?x_1\n  (@ring.to_add_comm_group L\n     (@domain.to_ring L (@division_ring.to_domain L (@field.to_division_ring L (@discrete_field.to_field L _inst_2))))) := @lc.vector_space ?x_3 ?x_4 ?x_5 ?x_6 ?x_7\nfailed is_def_eq\n[class_instances] (0) ?x_2 : @vector_space ?x_0 L ?x_1\n  (@ring.to_add_comm_group L\n     (@domain.to_ring L (@division_ring.to_domain L (@field.to_division_ring L (@discrete_field.to_field L _inst_2))))) := @algebra.vector_space ?x_8 ?x_9 ?x_10 ?x_11 ?x_12 ?x_13 ?x_14\n...\n[class_instances] (1) ?x_9 : comm_ring ?x_8 := @subalgebra.comm_ring ?x_24 ?x_25 ?x_26 ?x_27 ?x_28 ?x_29\n[class_instances] (2) ?x_26 : comm_ring ?x_24 := @subalgebra.comm_ring ?x_30 ?x_31 ?x_32 ?x_33 ?x_34 ?x_35\n[class_instances] (3) ?x_32 : comm_ring ?x_30 := @subalgebra.comm_ring ?x_36 ?x_37 ?x_38 ?x_39 ?x_40 ?x_41\n[class_instances] (4) ?x_38 : comm_ring ?x_36 := @subalgebra.comm_ring ?x_42 ?x_43 ?x_44 ?x_45 ?x_46 ?x_47\n...\n</pre></div>",
        "id": 156759638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548322130
    },
    {
        "content": "<p>oh no I see the problem</p>",
        "id": 156759658,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548322158
    },
    {
        "content": "<p>my private project is actually a very good testcase, I'll test it before hassling you to accept the PR :P</p>",
        "id": 156759734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548322215
    },
    {
        "content": "<blockquote>\n<p>that's already a bad sign - what started this search?</p>\n</blockquote>\n<p>This is something I've never understood. Why is searching for <code>comm_ring</code> a bad sign? Some things are commutative rings...</p>",
        "id": 156760833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548323628
    },
    {
        "content": "<p>The problem is that we're searching for <code>comm_ring ?x_8</code>, that is, a commutative ring instance for a type we haven't determined yet</p>",
        "id": 156766944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548331148
    },
    {
        "content": "<p>I can see that this will be problematic, but maybe later on in our search we'll figure out what that type is and then we'll be fine.</p>",
        "id": 156771325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548336055
    },
    {
        "content": "<p>Is searching for an instance on a metavariable not always completely futile?</p>",
        "id": 156772450,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1548337161
    },
    {
        "content": "<p>I don't know because I don't understand the search algorithm. It wouldn't be futile if the algorithm said \"ok I can't find this immediately so let's put it on hold and search for other stuff and then come back to it\"</p>",
        "id": 156773087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548337777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> ok I've tested my file, please merge it :P</p>",
        "id": 156788344,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548349598
    }
]