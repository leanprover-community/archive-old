[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111433\">@Alistair Tucker</span>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, I'm thinking about adding</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inf'_mem_filter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">t.nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">t.inf'</span> <span class=\"n\">H</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.inf'_mem</span> <span class=\"n\">F.sets</span> <span class=\"n\">F.inter_sets</span> <span class=\"n\">t</span> <span class=\"n\">H</span> <span class=\"n\">p</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf'_mem_nhds</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">t.nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">t.inf'</span> <span class=\"n\">H</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">inf'_mem_filter</span> <span class=\"n\">t</span> <span class=\"n\">H</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>as follow-ups to <a href=\"https://github.com/leanprover-community/mathlib/issues/7245\">#7245</a>. Given they just have one line proofs, do you think they're actually worth having, or should I just inline them where I need them and assume others will successfully find <code>finset.inf'_mem</code> and work on that it applies to <code>(𝓝 x).sets</code>?</p>",
        "id": 235069175,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618749547
    },
    {
        "content": "<p>Perhaps the <code>p</code> argument should be explicit to sup_induction?</p>",
        "id": 235069235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618749621
    },
    {
        "content": "<p>Then it would be straightforward to use that lemma for these things</p>",
        "id": 235069257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618749648
    },
    {
        "content": "<p>Given <code>F : filter α</code>, every proof that involves <code>F.sets</code> should be internal to <code>order.filter.basic</code>. However I also find it suspicious that you need to talk about <code>t.inf'</code>. This also makes your <em>statement</em> look unmathematical.</p>",
        "id": 235070862,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618751112
    },
    {
        "content": "<p>I feel like that first one should be proved as <code>inf'_induction H p F.inter_mem_sets h</code>, which despite the lemma name doesn't reference <code>.sets</code> at all</p>",
        "id": 235071708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618752072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, what is suspicious about the <code>t.inf'</code>? I've proved the Stone-Weierstrass theorem, and would be using this lemma <a href=\"https://github.com/leanprover-community/mathlib/blob/stone_weierstrass2/src/topology/continuous_function/stone_weierstrass.lean#L274\">here</a>.</p>",
        "id": 235072362,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618752702
    },
    {
        "content": "<p>I need to take a finite-but-nonempty intersection of neighbourhoods at that moment, so I don't see a way to avoid <code>finset.inf'</code>.</p>",
        "id": 235072714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618753015
    },
    {
        "content": "<p>I mean reading this statement requires guessing what is the mysterious <code>t.inf'</code>. I see no such problem with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inf'_mem_filter</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">t.nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">filter.bInter_mem_sets</span> <span class=\"n\">t.finite_to_set</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inf'_mem_nhds</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">t.nonempty</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">filter.bInter_mem_sets</span> <span class=\"n\">t.finite_to_set</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 235076818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618757169
    },
    {
        "content": "<p>But these versions obviously don't need the <code>t.nonempty</code> assumption, so maybe I really don't know what is this <code>t.inf'</code> and I'm proving lemmas that have nothing to do with your lemmas.</p>",
        "id": 235076955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618757302
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.inf'\">docs#finset.inf'</a></p>",
        "id": 235078659,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618758310
    },
    {
        "content": "<p>Why using it in this context then? The docstring explicitly says \"If α has a top element you may instead use s.inf which does not require s nonempty.\"</p>",
        "id": 235079753,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618759379
    },
    {
        "content": "<p>Thanks, Patrick, you're exactly right. I needed <code>inf'</code> in other places nearby to take the pointwise infimum of some functions (and so there really need that the index set is nonempty, hence the <code>inf'</code>), and got distracted by that into needlessly using <code>inf'</code> to take the intersection of some neighbourhoods.</p>",
        "id": 235108023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618786294
    },
    {
        "content": "<p><code>filter.bInter_finset_mem_sets</code> is even handier for my purpose than <code>filter.bInter_mem_sets</code>.</p>",
        "id": 235108055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618786323
    }
]