[
    {
        "content": "<p>For all speed devils out there: this PR is providing a framework to compute with permutations in cycle notation. But it seems to be slowish atm. Speedups welcome.</p>",
        "id": 255634642,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633030580
    },
    {
        "content": "<p>In particular, I think it is slow because of how determining the perm's factors is slow, it is a search over all possible supports.</p>",
        "id": 255647980,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633035804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Is this a matter of changing the function that computes those factors?</p>",
        "id": 255693520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633067242
    },
    {
        "content": "<p>I am not sure. It's just my guess from what I think could be slow. I haven't checked how the factorization of a perm could be reformulated. In addition, I don't know how to use the profiler information to drill down to where the slowness comes from.</p>",
        "id": 255733558,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633090396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Do you have some hints or tips on how to debug this?</p>",
        "id": 255789059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633113464
    },
    {
        "content": "<p>Is there a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> / usage example?</p>",
        "id": 255811285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633124419
    },
    {
        "content": "<p>I think the basic questions is: can we make</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.perm.concrete_cycle</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">c</span><span class=\"o\">[(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">7</span><span class=\"o\">),</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>faster? (On <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/repr-perm\">branch#pechersky/repr-perm</a>.)</p>",
        "id": 255811404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633124496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> are you ok with merging the PR as is, and making it faster later? I imagine that making these computations fast might actually be a job for a <code>norm_num</code> extension, instead of <code>dec_trivial</code>.</p>",
        "id": 256845961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633761547
    },
    {
        "content": "<p>I don't really understand what this PR is doing, sorry.</p>",
        "id": 256848314,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633764056
    },
    {
        "content": "<p>I fear that it is not adding any maths, just a computational version of something, but it isn't actually efficient enough to be usable. I might be wrong about what's in the PR however.</p>",
        "id": 256848920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633764701
    },
    {
        "content": "<p>I don't see any reason not to merge it. An improvement in running time for the computation is a completely separate PR anyway.</p>",
        "id": 256850669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1633766436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> the PR gives two things, one is the ability to write a cyclic permutation in a syntax akin to the regular way of writing \"(1 2 3 4)\", in a way that lean knows that \"(1 2 3 4)\" is the same as \"(3 4 1 2)\" definitionally. The second thing it does is gives a repr instance to permutations over fintypes. That second part is the slow part.</p>",
        "id": 256906678,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633821728
    },
    {
        "content": "<p>For pedagogical purposes, being able to write \"(1 3 2 4)\" and have that behave as expected was my goal.</p>",
        "id": 256906721,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633821797
    },
    {
        "content": "<p>In a similar way that we have data.matrix.notation. I'm sorry that I didn't make that clearer in the commits or comments.</p>",
        "id": 256906744,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633821839
    }
]