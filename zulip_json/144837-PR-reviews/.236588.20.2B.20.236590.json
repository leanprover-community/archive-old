[
    {
        "content": "<p>I have been alerted by Johan of PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6588\">#6588</a>.  I had been preparing <a href=\"https://github.com/leanprover-community/mathlib/issues/6590\">#6590</a> that I just pushed.  My version is not really polished, but I thought that it might be simpler to discuss two coexisting PRs, rather than one PR and something somewhere else!  Do let me know if there is a better way of dealing with this!</p>",
        "id": 229326094,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615220082
    },
    {
        "content": "<p>At first sight, it looks like the two PRs complement each other very well, but I have not yet had a chance to look carefully at <a href=\"https://github.com/leanprover-community/mathlib/issues/6588\">#6588</a>.</p>\n<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 229326636,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615220216
    },
    {
        "content": "<p>It looks to me like <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s is just filling gaps in API, which looks like the obvious candidate to merge first - then your PR might be able to use some of the new definitions within its proofs</p>",
        "id": 229327917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615220495
    },
    {
        "content": "<p>Ok, I am happy to wait, of course.  I simply took the <code>algebra/regular</code> file as a template and started changing the statements since I needed injectivity of smultiplication maps on general modules, not only on <code>R</code> itself viewed as an <code>R</code>-module.  PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6588\">#6588</a> seems indeed to be adding the statement that in several cases, elements of algebras/rings/domains/... are regular/<code>M</code>-regular.  If I read correctly the PR!</p>",
        "id": 229329516,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615220857
    },
    {
        "content": "<p>I am also planning to prove interactions between <code>M</code>-regular and left-regular, when the module <code>M</code> coincides with <code>R</code> itself.  This might be more in line with what Anne is doing, possibly.</p>",
        "id": 229329865,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615220931
    },
    {
        "content": "<p>Thank you for pointing out the connection <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>. I agree with <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> (though I might be a bit biased <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>) that <a href=\"https://github.com/leanprover-community/mathlib/issues/6588\">#6588</a> would fit nicely as a dependency of <a href=\"https://github.com/leanprover-community/mathlib/issues/6590\">#6590</a>, for example as a <code>is_regular.of_no_zero_smul_divisors</code> lemma.</p>",
        "id": 229330488,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615221126
    },
    {
        "content": "<p>But my PR is mostly just a few dependencies for the trace form PR that I'm cleaning up at the moment, so I don't mind too much if it gets changed around, as long as <code>lmul_injective</code> and <code>lsmul_injective</code> are still available at the end.</p>",
        "id": 229330662,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615221189
    },
    {
        "content": "<p>I think that I am simply developing some API for the <code>lsmul</code> injective concept, following the <code>regular</code> PR, which is probably something similar for the <code>mul_injective</code> one.</p>",
        "id": 229330920,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615221263
    },
    {
        "content": "<p>Aren't you just developing api for <code>smul</code> injective?</p>",
        "id": 229330989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615221293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> doesn't seem to care about any API for it beyond \"it's injective for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_smul_divisors\">docs#no_zero_smul_divisors</a>\", and \"if smul is injective then obviously so is the defeq lsmul\"</p>",
        "id": 229331112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615221338
    },
    {
        "content": "<p>In any case, I am not completely sure that I understand the implication of what is a dependency on what else, but I was going to wait a bit longer before pushing mine, since I do not consider it \"polished enough\", still.  However, since it seemed timely to do it now, with <a href=\"https://github.com/leanprover-community/mathlib/issues/6588\">#6588</a> in the queue, I just went for it!  So feel free to delay mine with no worries!</p>",
        "id": 229331119,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615221340
    },
    {
        "content": "<p>Yes, I do not think that there is much overlap, other than some of the things that Anne is formulating with <code>lsmul_injective</code> could also be formulated by saying that something is appropriately <code>regular</code></p>",
        "id": 229331316,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615221404
    },
    {
        "content": "<p>No problem, I'll mark <a href=\"https://github.com/leanprover-community/mathlib/issues/6590\">#6590</a> as a work in progress to indicate that it doesn't need to merged soon, and you can continue developing at your pace.</p>",
        "id": 229331406,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615221435
    },
    {
        "content": "<p>What I meant by adding as a dependency is that you could do <code>git merge origin/smul_injective</code> on your branch, so you get access to the results before they are merged into master.</p>",
        "id": 229331581,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615221494
    },
    {
        "content": "<p>Eric, I will move the conversation to different types here, since Zulip seems better suited for a lengthy discussion!</p>",
        "id": 229331627,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615221515
    },
    {
        "content": "<p>Right, I'm suggesting your API contain something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_regular.smul</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_regular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">â€¢</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- proof is what you have right now</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_regular.mul</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">is_regular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_regular</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_regular.smul</span>\n</code></pre></div>",
        "id": 229331817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615221591
    },
    {
        "content": "<p>Are you suggesting defining injectivity across a scalar tower?  something like \"an element <code>a</code> in <code>R</code> has injective multiplication on the <code>S</code>-module <code>M</code>, where <code>S</code> is an <code>R</code>-algebra\"?</p>",
        "id": 229331837,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615221601
    },
    {
        "content": "<p>I'm not suggesting you touch the definition</p>",
        "id": 229331943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615221627
    },
    {
        "content": "<p>Just generalize the lemma statement</p>",
        "id": 229331969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615221636
    },
    {
        "content": "<p>ah, I see!  You want injectivity \"through\" smultiplication in a scalar tower!</p>",
        "id": 229332024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615221654
    },
    {
        "content": "<p>If you find yourself writing <code>is_scalar_tower R R M</code> it usually means you haven't generalized enough</p>",
        "id": 229332114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615221693
    },
    {
        "content": "<p>Anne, I did what you said: I am still a little worried by these \"pyrotechnic\" uses of git, but I think that I can handle this!</p>\n<p>I imagine that <code>bors</code> will pick up on the dependency, and I have also explicitly mentioned it in the PR comment.</p>",
        "id": 229332578,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615221860
    },
    {
        "content": "<p>Another instance that seems to be missing is <code>has_scalar G G</code> where <code>G</code> is a semigroup.  I do not actually need this for my PR, but some of the statements would be true in this generality and I am \"forced\" to prove them for <code>monoid</code>s because of a missing instance!  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 229337768,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615223606
    },
    {
        "content": "<p>Indeed, although I think there was a PR to turn <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.regular\">docs#mul_action.regular</a> into a real instance.</p>",
        "id": 229338693,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615223980
    },
    {
        "content": "<p>Nevermind, that PR got merged already :P</p>",
        "id": 229338916,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615224057
    },
    {
        "content": "<p>In my PR, at some point I would like to use a <code>monoid_with_zero R</code> and an action on an <code>add_comm_monoid M</code> that I would like to be a <code>smul_with_zero R M</code> action.  However, I could not find <code>smul_with_zero</code> or something similar: does it exist?  The typeclass should assert that there is a scalar multiplication between <code>R â†’ M â†’ M</code>and <code>0 : R</code> produces the constant map to <code>0 : M</code>.</p>\n<p>My solution was to assume <code>semiring R</code> and <code>semimodule M</code>, but I do not actually use the addition on <code>R</code>.  I would like this to work for a <code>monoid_with_zero R</code> and a <code>smul_with_zero R M</code>.</p>",
        "id": 229432624,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615274362
    },
    {
        "content": "<p><code>zero_smul</code> is the name for this axiom and I can quite believe that the structure you want isn't there. Go ahead and make it if others confirm it's missing! This stuff is very easy to make, all the proofs in the API are straightforward term mode one-liners.</p>",
        "id": 229433391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615274903
    },
    {
        "content": "<p>Yes, in the proof with <code>semiring</code> I use <code>zero_smul</code> and it stops working if I use <code>monoid_with_zero</code>.  I will wait to see if someone else comments on this, to see if it really is not in mathlib!</p>",
        "id": 229434769,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615275950
    },
    {
        "content": "<p>Does beginning the class <code>smul_with_zero</code> like what is below look reasonable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">smul_with_zero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">zero_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">smul_with_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_smul</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_smul'</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">smul_with_zero</span>\n</code></pre></div>",
        "id": 229619734,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615364720
    },
    {
        "content": "<p>After that, I think that I should probably create instances showing that this happens in most situations where you have a <code>scalar_tower</code>, a <code>semiring</code> and whatever else I can think of!</p>",
        "id": 229619873,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615364783
    },
    {
        "content": "<p>I think you probably want to extend <code>has_scalar</code> rather than take it as an assumption</p>",
        "id": 229622517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615366284
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_zero_class\">docs#mul_zero_class</a> might be a good name to draw inspiration from</p>",
        "id": 229622672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615366380
    },
    {
        "content": "<p>Eric, I updated the definition with your <code>extends</code> suggestion.  I will look at the <code>mul_zero_class</code> later: I have to teach now!</p>\n<p>Thanks!</p>",
        "id": 229622888,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615366470
    },
    {
        "content": "<p>Why do you assume M has a zero?</p>",
        "id": 229639368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615374849
    },
    {
        "content": "<p>Note that this is half way to <code>distrib_mul_action</code></p>",
        "id": 229639470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615374911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236588.20.2B.20.236590/near/229639368\">said</a>:</p>\n<blockquote>\n<p>Why do you assume M has a zero?</p>\n</blockquote>\n<p>Because it's needed on the RHS of <code>(0 : R) â€¢ m = 0</code></p>",
        "id": 229641018,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615375757
    },
    {
        "content": "<p>Are there any interesting examples of <code>smul_with_zero</code> that don't also satisfy <code>r â€¢ (0 : M) = 0</code>? I'd be inclined to put both <code>smul_zero</code> and <code>zero_smul</code> in the same class.</p>\n<p>From there, you could add a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">smul_zero_class</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>and an instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span>  <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 229641222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615375862
    },
    {
        "content": "<p>Eric, I think that you are right: in what I would consider, also the identity <code>r â€¢ (0 : M) = 0</code> holds and I am happy to assume it.</p>\n<p>I like your suggestions: let me see how they play out!</p>",
        "id": 229644593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615377654
    },
    {
        "content": "<p>If I write what is below, lean complains about <code>smul_with_zero R M</code> (error message copied below).  What am I doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">The</span> <span class=\"n\">code</span> <span class=\"n\">that</span> <span class=\"n\">was</span> <span class=\"n\">here</span> <span class=\"n\">now</span> <span class=\"n\">seems</span> <span class=\"n\">to</span> <span class=\"n\">work</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 229704531,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615396324
    },
    {
        "content": "<p>I found a similar question where the answer was \"use <code>set_option old_structure_cmd true</code>\", which indeed removed the error.</p>\n<p>Is this the correct way of proceeding?<br>\nWhat does the <code>set_option old_structure_cmd true</code> command do?</p>",
        "id": 229705217,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615396561
    },
    {
        "content": "<p>This seems to work: any input, especially on the <code>old_structure_cmd</code> line are especially welcome!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">smul_with_zero</span> <span class=\"kd\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">smul_zero'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">zero_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">smul_with_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_zero</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">smul_zero'</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_smul</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_smul'</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_action_with_zero.mk</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">mul_smul</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">mul_zero</span> <span class=\"n\">zero_mul</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">smul_with_zero</span>\n</code></pre></div>",
        "id": 229706253,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615396893
    },
    {
        "content": "<p><code>old_structure_cmd</code> is the right thing to do - you're adding new classes to a heirarchy of old structures, so your structures should be \"old\" too</p>",
        "id": 229706821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615397087
    },
    {
        "content": "<p><code>smul_with_zero</code> only requires <code>has_zero R</code>, not <code>monoid_with_zero R</code></p>",
        "id": 229706896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615397115
    },
    {
        "content": "<p>Can golf the last bit with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">monoid.to_mul_action</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 229707170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615397214
    },
    {
        "content": "<p>Also, the linter is complaining about a repetition on the <code>monoid_with_zero</code>: I will update in a sec!</p>",
        "id": 229707191,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615397220
    },
    {
        "content": "<p>Yes, that's because you repeated <code>[monoid_with_zero R]</code> in both <code>variables</code> and the lemmas statement</p>",
        "id": 229707282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615397247
    },
    {
        "content": "<p>Liberal use of <code>section</code>s can avoid that type of issue</p>",
        "id": 229707325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615397262
    },
    {
        "content": "<p>As can just not putting any typeclasses in <code>variables</code>, if you know you're going to jump around a lot, and you don't have very many</p>",
        "id": 229707371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615397282
    },
    {
        "content": "<p>With your golfing, I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">monoid.to_mul_action</span> <span class=\"o\">}</span>\n\n<span class=\"n\">invalid</span> <span class=\"kd\">structure</span> <span class=\"kd\">notation</span> <span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">structure</span>\n  <span class=\"n\">monoid.to_mul_action</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Î </span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">Î±</span><span class=\"o\">],</span> <span class=\"n\">mul_action</span> <span class=\"n\">Î±</span> <span class=\"n\">Î±</span>\n<span class=\"n\">mwe.lean</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">invalid</span> <span class=\"kd\">structure</span> <span class=\"n\">value</span> <span class=\"o\">{</span><span class=\"bp\">...</span><span class=\"o\">},</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">known</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">structure</span>\n  <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 229707785,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615397411
    },
    {
        "content": "<p>Could this be related to the fact that I was not able to get Lean to auto-generate a skeleton for a definition?</p>",
        "id": 229707860,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615397441
    },
    {
        "content": "<p>This seems to work and the linting only complains about the missing doc-string!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--  `smul_with_zero` is a class consisting of a Type `R` with `0 : R` and a scalar multiplication</span>\n<span class=\"sd\">of `R` on a Type `M` with `0`, such that the equality `r â€¢ m = 0` holds if at least one among `r`</span>\n<span class=\"sd\">or `m` equals `0`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">smul_with_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">smul_zero'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">zero_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">smul_with_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">smul_zero'</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_smul</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_smul'</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_action_with_zero.mk</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">mul_smul</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">mul_zero</span> <span class=\"n\">zero_mul</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">smul_with_zero</span>\n</code></pre></div>",
        "id": 229708350,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615397617
    },
    {
        "content": "<blockquote>\n<p>Could this be related to the fact that I was not able to get Lean to auto-generate a skeleton for a definition?</p>\n</blockquote>\n<p>No, it's because I meant <code>monoid.to_mul_action _</code>. I'd encourage you to learn that pattern of error message, because I end up seeing that type of thing all the time!</p>",
        "id": 229709114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615397847
    },
    {
        "content": "<p>I am trying, but I think that I am misunderstanding something that you are saying: even like this, I still get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- invalid structure value {...}, expected type is known, but it is not a structure</span>\n<span class=\"c1\">--   mul_action_with_zero R R</span>\n</code></pre></div>",
        "id": 229720228,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615401979
    },
    {
        "content": "<p>Does it become happier if you fill in the <code>_</code> with <code>R</code>?</p>",
        "id": 229720731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402162
    },
    {
        "content": "<p>No, it had picked up <code>R</code> already: the error message is still the same</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kd\">structure</span> <span class=\"n\">value</span> <span class=\"o\">{</span><span class=\"bp\">...</span><span class=\"o\">},</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">known</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">structure</span>\n  <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 229720877,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402210
    },
    {
        "content": "<p>I also tried to put <code>'</code> for the fields, since this is what I had, but that does not seem to affect the error</p>",
        "id": 229720948,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402243
    },
    {
        "content": "<p>There's something wacky going on there...</p>",
        "id": 229721251,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402352
    },
    {
        "content": "<p>In case it helps, here is the whole file</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--  `smul_with_zero` is a class consisting of a Type `R` with `0 : R` and a scalar multiplication</span>\n<span class=\"sd\">of `R` on a Type `M` with `0`, such that the equality `r â€¢ m = 0` holds if at least one among `r`</span>\n<span class=\"sd\">or `m` equals `0`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">smul_with_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">smul_zero'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">zero_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">smul_with_zero</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">smul_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">smul_zero'</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">zero_smul</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_smul'</span> <span class=\"n\">m</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_action_with_zero.mk</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">mul_smul</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">mul_zero</span> <span class=\"n\">zero_mul</span>\n<span class=\"c1\">-- works with no problems</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">R</span> <span class=\"o\">}</span>\n<span class=\"c1\">-- given an error, even if the previous one is not there</span>\n</code></pre></div>",
        "id": 229721418,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402413
    },
    {
        "content": "<p>Should <code>smul_with_zero</code> <em>extend</em> <code>has_zero R</code>, instead of assuming it?</p>",
        "id": 229721621,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402479
    },
    {
        "content": "<p>No</p>",
        "id": 229721828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402556
    },
    {
        "content": "<p>Ok, here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> where I don't understand the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">bad</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dumb</span> <span class=\"o\">:</span> <span class=\"n\">â„•</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">bad</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">â€¢</span><span class=\"o\">)</span> <span class=\"o\">}</span>  <span class=\"c1\">-- invalid structure value</span>\n</code></pre></div>",
        "id": 229721903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402571
    },
    {
        "content": "<p>I tried it and it did not work indeed!</p>",
        "id": 229721907,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402572
    },
    {
        "content": "<p>Ah, ok; the problem is that <code>has_scalar</code> does _not_ use <code>old_structure_cmd</code></p>",
        "id": 229721989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402617
    },
    {
        "content": "<p>To make your example more minimal, you can also eliminate the <code>variables</code>... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 229722038,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402635
    },
    {
        "content": "<p>To make this work, you'd need to make everything in <code>group_action/defs</code> an old structure too</p>",
        "id": 229722084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402657
    },
    {
        "content": "<p>so putting the old command before the import?</p>",
        "id": 229722116,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402673
    },
    {
        "content": "<p>No, it would need to be in the file itself</p>",
        "id": 229722154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402683
    },
    {
        "content": "<p>I'd recommend maybe just creating a fresh branch where you do only that, and pushing it to kick off a build</p>",
        "id": 229722222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402699
    },
    {
        "content": "<p>ah, are there any issues with doing this?</p>",
        "id": 229722235,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402701
    },
    {
        "content": "<p>That's what the build on the branch would tell you :)</p>",
        "id": 229722254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402710
    },
    {
        "content": "<p>ok, I will try that</p>",
        "id": 229722258,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402712
    },
    {
        "content": "<p>already in the file <code>group_actions/defs</code> it causes problems</p>",
        "id": 229722592,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402828
    },
    {
        "content": "<p>The other approach you could try is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--  `smul_with_zero` is a class consisting of a Type `R` with `0 : R` and a scalar multiplication</span>\n<span class=\"sd\">of `R` on a Type `M` with `0`, such that the equality `r â€¢ m = 0` holds if at least one among `r`</span>\n<span class=\"sd\">or `m` equals `0`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">smul_with_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">smul_zero'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">zero_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">smul_with_zero</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">smul_zero'</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_smul</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_smul'</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">smul_with_zero</span>\n</code></pre></div>\n<p>where I changed <code>smul_with_zero</code> to not extend <code>has_scalar</code>. I don't know if that API makes much sense though.</p>",
        "id": 229722761,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615402876
    },
    {
        "content": "<p>What are the implications of using <code>extends</code> as opposed to assuming the typeclass?</p>",
        "id": 229722989,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615402947
    },
    {
        "content": "<p>Also, are we doing this simply so that the proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_action_with_zero.mk</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">mul_smul</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">mul_zero</span> <span class=\"n\">zero_mul</span>\n</code></pre></div>\n<p>could be golfed to the other one, or are there further issues that I am not aware of?</p>",
        "id": 229723178,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615403007
    },
    {
        "content": "<p>We're doing it so that <code>{}</code> notation can be used for creating instances</p>",
        "id": 229723236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615403031
    },
    {
        "content": "<p>because I haven't run into a class that didn't allow that before</p>",
        "id": 229723359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615403060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236588.20.2B.20.236590/near/229722592\">said</a>:</p>\n<blockquote>\n<p>already in the file <code>group_actions/defs</code> it causes problems</p>\n</blockquote>\n<p>For reasons I don't understand, all those problems go away after adding <code>refl</code>s to the broken proofs</p>",
        "id": 229723422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615403085
    },
    {
        "content": "<p>Ah, ok; I understand them now - once you add <code>old_structure_cmd</code>, the lemmas in <code>mul_action</code> start referring to some weird <code>smul</code> that is defeq but not eq to the usual smul</p>",
        "id": 229724101,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615403322
    },
    {
        "content": "<p>Which would be fixed by replacing <code>mul_smul</code> with <code>mul_smul'</code> etc</p>",
        "id": 229724167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615403341
    },
    {
        "content": "<p>I am trying to add <code>refl</code>, but it does not fix <em>all</em> broken proofs.</p>",
        "id": 229724472,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615403453
    },
    {
        "content": "<p>I managed to fix the broken proofs, but I now have non-terminal simps...</p>",
        "id": 229727314,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615404472
    },
    {
        "content": "<p>I pushed this branch, but I have very little faith that it will build...</p>",
        "id": 229727613,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615404570
    },
    {
        "content": "<p>There seems to be something nasty here happening with <code>old_structure</code>s that somehow doesn't affect single-argument typeclasses like <code>ring</code></p>",
        "id": 229728065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615404711
    },
    {
        "content": "<p>Even though I have managed to finish the proofs, I did not really understand what was going on.</p>",
        "id": 229729154,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615405090
    },
    {
        "content": "<p>I think the best bet might be the \"lean 4\" way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.defs</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/--  `smul_with_zero` is a class consisting of a Type `R` with `0 : R` and a scalar multiplication</span>\n<span class=\"sd\">of `R` on a Type `M` with `0`, such that the equality `r â€¢ m = 0` holds if at least one among `r`</span>\n<span class=\"sd\">or `m` equals `0`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">smul_with_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">smul_zero'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">zero_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">smul_with_zero</span>\n\n<span class=\"c1\">-- todo: this should replace the global one</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_zero</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">smul_zero'</span> <span class=\"n\">r</span>\n\n<span class=\"c1\">-- this one has a typeclass that is neither stronger nor weaker than the global one</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">zero_smul</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_smul'</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">smul_with_zero</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">smul_zero'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">â€¢</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">zero_smul'</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ€</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">â€¢</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mul_action_with_zero.smul_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 229730399,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615405602
    },
    {
        "content": "<p>Where you abandon <code>extends smul_with_zero</code> entirely and manually write the code it generates - namely duplicating the axioms, and defining <code>mul_action_with_zero.smul_with_zero</code> by hand</p>",
        "id": 229730439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615405619
    },
    {
        "content": "<p>Lean 4 forces us to do this as far as I understand</p>",
        "id": 229730528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615405644
    },
    {
        "content": "<p>Ok, I will try with this option, since the build of the <code>old_structures</code> in <code>group_theory</code> gave further errors</p>",
        "id": 229733029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615406553
    },
    {
        "content": "<p>When I import your code with the line </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">mul_action_with_zero.smul_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>in the file where I would like to use it, Lean complains saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">maximum</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">depth</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span>\n<span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"n\">limit</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">increased</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth'</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">the</span> <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">visualized</span> <span class=\"kd\">by</span> <span class=\"n\">setting</span> <span class=\"n\">option</span>\n<span class=\"bp\">'</span><span class=\"n\">trace.class_instances'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>on some lemmas.  If I comment out just that line, then it does not complain</p>\n<p>(Note that I have not yet used the new class, I simply imported the file at the top)</p>",
        "id": 229735016,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615407208
    },
    {
        "content": "<p>Whoops</p>",
        "id": 229736066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615407551
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 229736069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615407553
    },
    {
        "content": "<p>What I wrote amounted to \"all mul_actions are mul_actions\"</p>",
        "id": 229736093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615407562
    },
    {
        "content": "<p>You'll want to remove the primes from your lemma names</p>",
        "id": 229736433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615407671
    },
    {
        "content": "<p>Ok, thanks: that fixed it!</p>",
        "id": 229741599,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615409371
    },
    {
        "content": "<p>I will try to use the new class, but tomorrow: I am done for today!</p>",
        "id": 229741638,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615409389
    },
    {
        "content": "<p>Just one more question: if I remove the primes from the field in the class, then I can no longer state the lemmas without the primes, since Lean says that the lemma already exists.  Does this mean that I can use the lemma, even if I did not prove it explicitly?  Will it be a simp lemma?</p>",
        "id": 229741869,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615409467
    },
    {
        "content": "<p>Yes, lean automatically adds definitions (\"projections\") for every structure field. The ones it adds automatically in your case are identical to the ones you were after.</p>",
        "id": 229768819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615420535
    },
    {
        "content": "<p>They won't be <code>simp</code> lemmas, but you can <code>attribute [simp] S.X</code> later.</p>",
        "id": 229770313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615421289
    },
    {
        "content": "<p>Thanks!  I think that I managed to make the <code>class</code> and the <code>simp</code> <code>attribute</code> work!</p>\n<p>I will now start testing it!</p>",
        "id": 229814319,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615452434
    },
    {
        "content": "<p>Just to confirm that I am on the right track: the instance below should also be added, right?  Lean came as close to begging me to introduce it as is reasonable!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">monoid_with_zero.to_mul_action_with_zero</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">),</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"n\">zero_mul</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 229827117,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615458766
    },
    {
        "content": "<p>Also, the linter tells me that a priority should be lowered and with the command below it no longer complains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- see Note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">smul_with_zero</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 229828233,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615459377
    },
    {
        "content": "<p>You should also add <code>semimodule.to_mul_action_with_zero</code></p>",
        "id": 229832721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615461708
    },
    {
        "content": "<p>I just pushed the instance on <code>semimodule</code>, thanks!</p>",
        "id": 229833994,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615462393
    },
    {
        "content": "<p>There has been quite a bit of movement on PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6590\">#6590</a>, but finally, it seems that it builds!</p>\n<p>If anyone has any further comments, I would be very happy to hear them!  For my part, I am happy with it.  I plan to add something about <code>M</code>-regularity under injective maps, but this is for a separate PR, since I am not really willing to change this PR, unless requested to do so!  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 230064672,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615568785
    },
    {
        "content": "<p>It might make sense to split the PR into the scary new typeclass bit and the not-scary new <code>is_smul_regular</code> bit, but lets see whether any other reviewer feels strongly</p>",
        "id": 230066309,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615569511
    },
    {
        "content": "<p>I agree that this should have been the correct way, but given how it is now, it might make sense to leave it as is.</p>\n<p>Still, if it is preferred to split it, I can certainly do it!</p>",
        "id": 230066470,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615569590
    },
    {
        "content": "<p>Splitting ought to be straightforward, since you can just delete the new <code>is_smul_regular</code> file</p>",
        "id": 230067241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615569954
    },
    {
        "content": "<p>Eric, you were right: I was just resisting, since I am not too comfortable with git!  I did manage to loose the <code>smul_regular</code> file on my machine, but I could copy it from the history in github!</p>",
        "id": 230082116,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615576224
    },
    {
        "content": "<p>Now there are two separate PRs.</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/6590\">#6590</a>, introducing <code>smul_with_zero</code> and <code>mul_action_with_zero</code>: two typeclasses to deal with multiplicative actions of monoid with zero, without the need to assume the presence of an addition!</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/6659\">#6659</a>, introducing <code>M</code>-regular elements, called <code>is_smul_regular</code>: the analogue of <code>is_left_regular</code>, but defined for an action of monoid_with_zero on a module <code>M</code>.</li>\n</ul>",
        "id": 230082398,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615576355
    }
]