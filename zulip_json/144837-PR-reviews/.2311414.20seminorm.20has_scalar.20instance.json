[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/113488-general/topic/Ordered.20semirings/near/268008553\">said</a>:</p>\n<blockquote>\n<p>Eh, maybe. [the need for an ordered_semiring isntance is] in <a href=\"https://github.com/leanprover-community/mathlib/pull/11329\">#11329</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/11414\">#11414</a>.</p>\n</blockquote>\n<p>I don't see the relevance to 11329?</p>",
        "id": 268008974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642164644
    },
    {
        "content": "<p>Or even to <a href=\"https://github.com/leanprover-community/mathlib/pull/11414\">#11414</a></p>",
        "id": 268009031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642164700
    },
    {
        "content": "<p>Have you seen the <code>has_scalar</code> instance I proposed?</p>",
        "id": 268011681,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642166200
    },
    {
        "content": "<p>How does it compare to the one that's already in <a href=\"https://github.com/leanprover-community/mathlib/pull/11414\">#11414</a>?</p>\n<p>Edit: for reference from the <a href=\"https://github.com/leanprover-community/mathlib/pull/11329#discussion_r784802725\">comment in question</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- TODO: Generalize to `[canonically_ordered_comm_semiring 𝕝] [module 𝕝 ℝ] [ordered_smul 𝕝 ℝ]`</span>\n<span class=\"c1\">--  `[smul_comm_class 𝕝 ℝ ℝ]`</span>\n<span class=\"c1\">-- This currently doesn't work because `canonically_ordered_comm_semiring 𝕝` doesn't imply</span>\n<span class=\"c1\">-- `ordered_semiring 𝕝`</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">seminorm</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n          <span class=\"n\">smul'</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_smul_comm</span><span class=\"o\">,</span> <span class=\"n\">p.smul</span><span class=\"o\">],</span>\n          <span class=\"n\">triangle'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">smul_le_smul_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">p.triangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">nnreal.coe_nonneg</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n            <span class=\"o\">(</span><span class=\"n\">smul_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">}⟩</span>\n</code></pre></div>",
        "id": 268012585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642166672
    },
    {
        "content": "<p>The version in comment is more general.</p>",
        "id": 268014939,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642167900
    },
    {
        "content": "<p>How so?</p>",
        "id": 268015347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642168062
    },
    {
        "content": "<p>Well, you don't need compatibility with the <code>nnreal</code> action. Or am I missing something?</p>",
        "id": 268016357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642168579
    },
    {
        "content": "<p>Can you come up with an action that satisfies your hypotheses but not mine?</p>",
        "id": 268016470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642168666
    },
    {
        "content": "<p>Eric, I can't come up with anything. Why do you think I work on mathlib rather than my tripos?</p>",
        "id": 268017240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642169016
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Ordered.20semirings\">#general &gt; Ordered semirings</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span></p>",
        "id": 268017528,
        "sender_full_name": "Notification Bot",
        "timestamp": 1642169158
    },
    {
        "content": "<p>Here's the example in the other direction: <code>𝕝 = units (ℝ≥0)</code>, which has an action that factors through <code>ℝ≥0</code>, but is not a semiring at all.</p>",
        "id": 268017947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642169350
    },
    {
        "content": "<p><del>Eh, I do believe that's a semiring!</del></p>",
        "id": 268018034,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642169397
    },
    {
        "content": "<p>Okay, no semiring <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 268018114,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642169428
    },
    {
        "content": "<p>Is there a concrete maths question?</p>",
        "id": 268030026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642174795
    },
    {
        "content": "<p>I think the best attempt at the concrete question is \"what actions on <code>ℝ</code> can be promoted to actions on the codomain of a <code>seminorm</code>\". I don't know if that counts as a maths question. My answer is \"any actions on <code>ℝ</code> that factor through an action on <code>ℝ≥0</code>\".</p>",
        "id": 268030506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642174964
    }
]