[
    {
        "content": "<p>Does anyone have any ideas why <code>simp</code> does not do what <code>rw</code> can do at <a href=\"https://github.com/leanprover-community/mathlib/blob/b6eafec612fd479faee3d4848a5a403c055a604c/src/linear_algebra/linear_independent.lean#L847\">https://github.com/leanprover-community/mathlib/blob/b6eafec612fd479faee3d4848a5a403c055a604c/src/linear_algebra/linear_independent.lean#L847</a> and the other goals there?</p>",
        "id": 226768418,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613627640
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?</p>",
        "id": 227702057,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614214785
    },
    {
        "content": "<p>When I debug this kind of issues, I typically turn on the trace options and stare at the logs for a while:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite_failure</span> <span class=\"n\">false</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent_fin_cons</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">fin.cons</span> <span class=\"n\">x</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">submodule.span</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">linear_independent_equiv</span> <span class=\"o\">(</span><span class=\"n\">fin_succ_equiv</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">linear_independent_option</span><span class=\"o\">],</span>\n  <span class=\"n\">convert</span> <span class=\"n\">iff.rfl</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- TODO: why doesn't simp use `fin_succ_equiv_symm_coe` here?</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">fin_succ_equiv_symm_coe</span><span class=\"o\">,</span> <span class=\"n\">fin.cons_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fin_succ_equiv_symm_coe</span><span class=\"o\">]</span> <span class=\"c1\">--&lt;-- STARE HERE },</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">fin_succ_equiv_symm_none</span><span class=\"o\">,</span> <span class=\"n\">fin.cons_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">comp_app</span><span class=\"o\">,</span> <span class=\"n\">fin_succ_equiv_symm_coe</span><span class=\"o\">,</span> <span class=\"n\">fin.cons_succ</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 227734936,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614242408
    },
    {
        "content": "<p>This is the trace output:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[simplify] eq: v x_1 = fin.cons x v (⇑((fin_succ_equiv n).symm) ↑x_1)\n[simplify] eq: v x_1\n[simplify] eq: x_1\n[simplify] eq: v\n[simplify] eq: fin.cons x v (⇑((fin_succ_equiv n).symm) ↑x_1)\n[simplify] eq: x\n[simplify] eq: v\n[simplify] eq: fin.cons\n[simplify] eq: eq\n[simplify.failure] unable to synthesize instance for: subsingleton V\n1. [simplify.failure] fail to instantiate emetas: 'eq_iff_true_of_subsingleton' at\nv x_1 = @fin.cons n (λ (ᾰ : fin (n + 1)), V) x v (⇑((fin_succ_equiv n).symm) ↑x_1)\npartially instantiated lemma:\n@eq_iff_true_of_subsingleton V ?x_1 (v x_1)\n  (@fin.cons n (λ (ᾰ : fin (n + 1)), V) x v (⇑((fin_succ_equiv n).symm) ↑x_1))\n</code></pre></div>",
        "id": 227734976,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614242437
    },
    {
        "content": "<p>What you see here is the subterms that simp visits.  Note that it never gets to <code>(fin_succ_equiv n).symm x_1</code>.</p>",
        "id": 227735054,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614242512
    },
    {
        "content": "<p>Now why doesn't it go there?  If you look at the log, you'll see that it doesn't try custom congruence lemmas.  So it uses the automatically generated ones.  How do these look like?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- insert this after the first simp</span>\n<span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n<span class=\"n\">cl</span> <span class=\"bp\">←</span> <span class=\"n\">mk_specialized_congr_lemma_simp</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">cl.type</span><span class=\"o\">,</span>\n<span class=\"n\">trace</span> <span class=\"n\">cl.arg_kinds</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 227735593,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614242839
    },
    {
        "content": "<p>And this is what it prints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x_1</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">p_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">i.succ</span><span class=\"o\">),</span>\n    <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p_1</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">fin.cons</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">fin.cons</span> <span class=\"n\">x_1</span> <span class=\"n\">p_1</span> <span class=\"n\">i</span>\n<span class=\"o\">[</span><span class=\"n\">fixed_no_param</span><span class=\"o\">,</span> <span class=\"n\">fixed_no_param</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">fixed</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 227735620,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614242864
    },
    {
        "content": "<p>Clearly, simp can't rewrite in the third (explicit) argument of fin.cons.</p>",
        "id": 227735917,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614243041
    },
    {
        "content": "<p>Why is this?  This is simply because the return type of <code>fin.cons</code> depends on the <code>i</code>.  If you would rewrite at the <code>i</code>, then the simplified term would have a different type (and require casts).</p>",
        "id": 227735974,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614243080
    }
]