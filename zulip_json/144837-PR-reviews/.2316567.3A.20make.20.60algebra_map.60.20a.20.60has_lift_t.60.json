[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/16567\">#16567</a> I've been experimenting with making <code>algebra_map</code> a coercion of some kind, because a student at Imperial is working on partial fractions for the undergraduate list and if you don't make the canonical map from e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">[</mo><mi>T</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}[T]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">C</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">]</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}(T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span> (or more generally the map from a polynomial ring to its field of fractions) into a coercion of some kind then goals have many occurrences of <code>algebra_map</code> which make them unreadable; with the coercion it's really nice.</p>\n<p>There was some chat about this previously <a href=\"#narrow/stream/113488-general/topic/Should.20.60algebra_map.60.20be.20a.20coercion.3F/near/297077308\">here</a>. The way to do it which doesn't cause too much disruption to mathlib is making it a low priority <code>has_lift_t</code>. One proof breaks because it finishes earlier than it used to, which is a preliminary good sign I guess, but mathlib compiled otherwise (unsurprisingly I guess). But the <code>simp_nf</code> linter is not happy and because I feel a bit out of my depth here I thought I'd ask before going any further. It's complaining about the file <code>data.complex/is_R_or_C</code>. An example of what it doesn't like is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp, norm_cast, is_R_or_C_simps, priority 900]</span> <span class=\"kd\">lemma</span> <span class=\"n\">of_real_zero</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_real_alg</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Apparently after my super-cool modification <code>simp</code> can prove this already. So do I just delete the <code>simp</code> tag and the <code>priority 900</code> (which AFAIK is just to do with <code>simp</code> but I'm not 100% sure about this...). And the <code>is_R_or_C_simps</code> tag too? </p>\n<p>I've just pushed this modification of <code>is_R_or_C</code> to the branch and the file is now linting but I just wanted to check I'm not going in the wrong direction before pushing on too much more with this.</p>",
        "id": 299801782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663691721
    },
    {
        "content": "<p>I'll bet the priority setting on this was because of a prior <code>simp_nf</code> linting failure.</p>",
        "id": 299806119,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663693163
    },
    {
        "content": "<p>I put the priority of the has_lift_t at 37 because I didn't have a clue what I was doing, I thought I'd start low and see what happened. Maybe a different thing would have happened if I'd made it &gt; 900? I wanted it lower than default because default broke a ton of stuff and I wasn't really sure whether that was good or bad</p>",
        "id": 299806979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663693434
    },
    {
        "content": "<p>Thanks for taking this on, it's something that I'd been wanting for a while.</p>\n<p>I'm surprised there was relatively little breakage. Instances with a lower priority still have a nasty habit of popping up in my experience, so we apparently did our jobs right and ensured that the overlap between <code>algebra</code> and <code>has_lift_t</code> is small!</p>",
        "id": 299834590,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663702655
    },
    {
        "content": "<p>I feel like <code>has_coe_t</code> might be a better choice as a class than <code>has_lift_t</code> here, mostly because prefer to read <code>(x : R[X])</code> over <code>↑x</code>.</p>",
        "id": 299835076,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663702862
    },
    {
        "content": "<p>maybe what is really needed is a notation like that for <code>has_lift_t</code></p>",
        "id": 299837857,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663703846
    },
    {
        "content": "<p>won't <code>has_coe_t</code> cause issues with nat.cast and such?</p>",
        "id": 299838061,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663703914
    },
    {
        "content": "<p>I don't think <code>has_lift_t</code> causes less issues, since (confusingly) the <code>↑</code> inserted by the elaborator, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe\">docs#coe</a>, uses a <code>has_lift_t</code> instance.</p>",
        "id": 299841280,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663705053
    },
    {
        "content": "<p>Hmm. I tried has_coe and it was a disaster, I'll try has_coe_t tomorrow. Right now the branch is compiling and linting, although I should change the prio from 37 to perhaps something like 900.</p>",
        "id": 299850832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663709325
    },
    {
        "content": "<p>Oh yeah, <code>has_coe</code> will definitely cause a lot of issues because we have tons of \"transitive\" instances like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subalgebra.algebra'\">docs#subalgebra.algebra'</a> that are going to be incompatible with the transitivity implementation in <code>has_coe</code> → <code>has_coe_t</code></p>",
        "id": 299886355,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1663737982
    }
]