[
    {
        "content": "<p>The discussion on PR <a href=\"https://github.com/leanprover-community/mathlib/issues/6585\">#6585</a> is at the following point:  in what form(s) should we provide the <code>associated</code> bilinear form to a quadratic form?  Here's the current construction: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/associated\">docs#associated</a>.  And here are the different things one might want to provide:</p>\n<ul>\n<li>Over a commutative ring <code>R</code> of non-2 characteristic, the operation of constructing the associated bilinear form is an <code>R</code>-linear map.</li>\n<li>Over a general ring of non-2 characteristic, the operation of constructing the associated bilinear form is an additive homomorphism</li>\n<li>Over a ring of non-2 characteristic with a distinguished commutative subring <code>S</code>, the operation of constructing the associated bilinear form is an <code>S</code>-linear map.</li>\n</ul>\n<p>One sees such problems fairly often.  For example, in <code>normed_space/dual</code>, the map of a normed space into its double dual is provided as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normed_space.inclusion_in_double_dual\">docs#normed_space.inclusion_in_double_dual</a> for a general nondiscrete normed field, where it is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map\">docs#continuous_linear_map</a>, but at some point we should also get around to writing an upgraded, separately-named construction over an <code>is_R_or_C</code> field, which is a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_isometry\">docs#linear_isometry</a>.</p>\n<p>And likewise in <a href=\"https://github.com/leanprover-community/mathlib/issues/6606\">#6606</a> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> points out that a construction I want to use over a noncommutative ring is actually the same as the construction <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bilin_form.to_lin\">docs#bilin_form.to_lin</a> over a commutative ring, except that over a general ring it has the structure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>rather than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 229941717,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615502639
    },
    {
        "content": "<p>So, general question:  do we have a systematic naming convention for such situations, and a systematic approach to the construction (eg, which one gets to be the \"default\" form which has the simplest name and which the others are simp'd to, which one(s) get a full suite of API lemmas)?</p>",
        "id": 229941841,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615502701
    },
    {
        "content": "<p>One the one hand, one might want to make the weakest version the default form, because it applies most generally.  On the other hand, usually the strongest version (like, in <a href=\"https://github.com/leanprover-community/mathlib/issues/6585\">#6585</a>, the <code>R</code>-linear map over a commutative ring) is often the one most used in practice, and it's a shame to make that version even a little less convenient to use.</p>",
        "id": 229942201,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615502897
    },
    {
        "content": "<p>And, specific question:  how should we proceed in <a href=\"https://github.com/leanprover-community/mathlib/issues/6585\">#6585</a>?  Do we need three different versions of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/associated\">docs#associated</a>?</p>\n<p>I actually wondered if there were some way of using <code>out_param</code> to do all 3 at once -- make the default construction the construction of an <code>S</code>-linear map where <code>S</code> is a commutative subring of <code>R</code>, and have Lean search for an appropriate <code>S</code>, hoping it would find <code>R</code> itself when <code>R</code> is commutative, <code>ℤ</code> when <code>R</code> is noncommutative, and other instances in other situations as appropriate.  But I've never used <code>out_param</code> before and don't know if this is the kind of thing it can do.</p>",
        "id": 229942476,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615503058
    },
    {
        "content": "<p>Another example of this, which I think is solved by <code>out_param</code> plus clever notation: in the measure theory library, somehow integrals can either infer the measure on the space (if it's a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_space\">docs#measure_space</a>) or have that measure separately provided.  This is similar to what I was hoping for -- the commutative subring <code>S</code> could be provided explicitly, or could be guessed in the two standard cases <code>S = R</code> and <code>S = ℤ</code>.</p>",
        "id": 229942844,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615503244
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 229945307,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1615504483
    },
    {
        "content": "<p>Thank you, fixed!</p>",
        "id": 229945394,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615504536
    },
    {
        "content": "<p>Oh, another example:  we have a map from an inner product space to its dual, which is always injective, but an isomorphism only if the space is Hilbert (i.e., complete).  We have chosen the latter as being the default form (here this means that it gets the shorter name!). This is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space.to_dual_map\">docs#inner_product_space.to_dual_map</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space.to_dual\">docs#inner_product_space.to_dual</a>.</p>",
        "id": 229946741,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615505206
    },
    {
        "content": "<p>I will just say that I don't have a good solution to the issue, but that it is important that we find something.<br>\nSorry that I'm not more helpful</p>",
        "id": 229978773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615526901
    },
    {
        "content": "<p>The bilinear form question reminds me a bit of the following issue we had in group theory: the notation for a group hom is <code>-&gt;*</code> which is <code>monoid_hom</code>. Now what should <code>map</code> be? Should it take submonoids to submonoids or subgroups to subgroups? In the end we decided on the latter and this was simply because we thought that in general groups were more popular in practice.</p>",
        "id": 229987333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615533792
    },
    {
        "content": "<p>Indeed, that's very much analogous!</p>",
        "id": 229987780,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615534167
    },
    {
        "content": "<p>Although, apart from the general issue (does the more general/less structured version take priority, or the less general/more structured version), there is a point which is specific to <a href=\"https://github.com/leanprover-community/mathlib/issues/6585\">#6585</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/6606\">#6606</a>, and other PRs where the generalization being considered is dropping a commutativity hypothesis.</p>\n<p>Namely, that there is a joint framework for the two versions, as pointed out by Eric:  in both cases we're considering <code>S</code>-linear maps for <code>S</code> a commutative subring of the full ring.</p>",
        "id": 229988144,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615534454
    },
    {
        "content": "<p>I am experimenting with the following approach:</p>\n<ul>\n<li>awkward name and full suite of lemmas for the most general version (<code>S</code>-linear for some commutative subring <code>S</code>), with <code>S</code> implicit in the lemmas</li>\n<li>nice names <em>as abbreviations</em> and no lemmas for the two important special cases</li>\n</ul>",
        "id": 229989031,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615535119
    },
    {
        "content": "<p>OK, I pushed this approach on <a href=\"https://github.com/leanprover-community/mathlib/issues/6585\">#6585</a>.  It seems to work, although there is not too much material in the rest of the file to test it thoroughly.  Feedback welcome!</p>",
        "id": 229989838,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615535729
    },
    {
        "content": "<p>I don't think <code>abbreviation</code> is actually useful here at all:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo_def</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">abbreviation</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">foo_def</span>  <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>  <span class=\"c1\">-- ok</span>\n</code></pre></div>\n<p>You still need a lemma that simplifies <code>bar</code> to <code>foo</code>.</p>",
        "id": 230001894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615542719
    },
    {
        "content": "<p>So <code>abbreviation</code> isn't just inlining?</p>",
        "id": 230002446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615542971
    },
    {
        "content": "<p>No, abbreviation is almost the same as <code>@[reducible] def</code>.</p>",
        "id": 230003422,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615543423
    },
    {
        "content": "<p>Do we have inlining? (my son taught me this word earlier this week).</p>",
        "id": 230003486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615543443
    },
    {
        "content": "<p>We have <code>notation</code> for that.</p>",
        "id": 230003570,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615543490
    },
    {
        "content": "<p>Right, but notation isn't scoped and doesn't work with dot notation or @</p>",
        "id": 230004175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615543775
    },
    {
        "content": "<p><code>abbreviation</code> also means <code>@[inline]</code> (<del> <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#inline\">attr#inline</a> </del>) but it seems to not help</p>",
        "id": 230004300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615543840
    },
    {
        "content": "<p>Please don't get confused by <code>@[inline]</code>, it only affects the VM.</p>",
        "id": 230004402,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615543904
    },
    {
        "content": "<p>The abbreviations are definitely doing something.  If I comment out the lemmas written for <code>associated_hom</code> (i.e., the general, with-<code>S</code>) case, then the file breaks at three places: </p>\n<ul>\n<li><code>associated_lin_mul_lin</code></li>\n<li><code>to_matrix'_comp</code></li>\n<li><code>exists_bilin_form_self_neq_zero</code></li>\n</ul>\n<p>The first two are lemmas about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">associated</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">R₁</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R₁</span><span class=\"o\">]</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R₁</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">associated_hom</span> <span class=\"n\">R₁</span>\n</code></pre></div>\n<p>and the third is a lemma bout</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">abbreviation</span> <span class=\"n\">associated'</span> <span class=\"o\">:</span> <span class=\"n\">quadratic_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">bilin_form</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">associated_hom</span> <span class=\"n\">ℤ</span>\n</code></pre></div>",
        "id": 230032919,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615557790
    },
    {
        "content": "<p>And the file breaks in the same three places if I reinstate the lemmas but change <code>abbreviation</code> to <code>def</code>.</p>",
        "id": 230033398,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615557973
    },
    {
        "content": "<p>Very strange - I don't think the <code>abbreviation</code> is a bad idea, it just doesn't seem to be as silver a bullet as I'd hoped it might be</p>",
        "id": 230041511,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615560889
    },
    {
        "content": "<p>But it sounds like it at least glints occasionally.</p>",
        "id": 230041558,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615560911
    },
    {
        "content": "<p>Whatever the issues with <code>abbreviation</code> in the abstract, it seems to be working exactly as hoped here.</p>\n<p>We can always add duplicate lemmas later if we discover that there are specific lemmas which can't see through the <code>abbrevation</code>.</p>",
        "id": 230045728,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615562320
    }
]