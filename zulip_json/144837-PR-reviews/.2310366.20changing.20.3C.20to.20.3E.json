[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz</span> Thanks for your PR. Unfortunately this is a place where Lean is not as flexible as human mathematicians. For technical reasons we try to avoid talking about <code>≥</code> and <code>&gt;</code> in mathlib.</p>",
        "id": 261813283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637168044
    },
    {
        "content": "<p>Basically, the problem is that some parts of Lean works less smoothly if you mix them.</p>",
        "id": 261813367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637168077
    },
    {
        "content": "<p>So we even have a linter that is supposed to reject these changes. I don't know why it didn't trigger.</p>",
        "id": 261813532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637168141
    },
    {
        "content": "<p>If you find it very sad that you can write <code>∃ c &gt; 0, ...</code> then I completely agree. It makes me cry as well. But it's a compromise we choose to live with.</p>",
        "id": 261813703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637168206
    },
    {
        "content": "<p>What exactly is the issue? The code compiled just fine. I guess there is no easy way to make it work with <code>∃ c : ℝ_+, ..</code></p>",
        "id": 261814425,
        "sender_full_name": "Moritz",
        "timestamp": 1637168501
    },
    {
        "content": "<p>One possible issue is that tactics like <code>rw</code> work on a syntactic level. If to prove <code>0 &lt; p</code>, I can rewrite that to <code>0 &lt; p ^ 3</code> (let's say for some reason), given an iff statement of <code>0 &lt; p ^ 3 &lt;-&gt; 0 &lt; p</code>, then that's great. However <code>0 &lt; p ^ 3 &lt;-&gt; 0 &lt; p</code> won't work on <code>p &gt; 0</code>. You might say, well, they're obviously the same! But syntactically they're not. So <code>rw</code> would then have to do some checking of \"OK, is <code>0 &lt; p</code> exactly the same as <code>p &gt; 0</code>\"? And in this case, that's true, easily. But how deep should that check go? If I have some complex <code>~&lt;~</code> that is like <code>&lt;</code> for this purpose, but the checks need to be much deeper, then what? Or if I have some <code>q</code> that at some deep underlying level, is equal to <code>p</code>, how deep should <code>rw</code> check that <code>0 &lt; p</code> is the same as <code>0 &lt; q</code>? That's my understanding of the issue.</p>",
        "id": 261817057,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1637169657
    },
    {
        "content": "<p>I personally did several PRs already that were to go <strong>the other way</strong>, changing <code>∃ M &gt; 0, </code> to <code>∃ M, 0 &lt; M ∧ </code>.</p>",
        "id": 261817944,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637170039
    },
    {
        "content": "<p>ah that makes sense</p>",
        "id": 261818733,
        "sender_full_name": "Moritz",
        "timestamp": 1637170348
    },
    {
        "content": "<p>We do use <code>&gt;</code> and <code>≥</code> a lot after binders in mathlib (300+ times), so this PR would be fine with me. But indeed, it is sometimes annoying when doing <code>rw</code>.</p>",
        "id": 261823420,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1637172162
    },
    {
        "content": "<p>I was wondering if we could make <code>∃ c &gt; 0,</code> notation for <code>∃ (c) (H : 0 &lt; c),</code>, but it seems like this might be handled in C...</p>",
        "id": 261845707,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1637181688
    },
    {
        "content": "<p>That would be the optimal solution from my POV, but I don't see how to do it in a way that isn't a ball of hacks</p>",
        "id": 261846263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637181946
    },
    {
        "content": "<p>While we're on this subject, do we have a preferred path to Lean 4 for these binders? If I understand correctly they are not currently in Lean 4, so our options are:</p>\n<ol>\n<li>Add support in Lean 4.</li>\n<li>Add support in user space (e.g. in mathlib 4), if possible.</li>\n<li>Not add support and have mathport desugar them.</li>\n<li>Not add support and backport removing them from Lean 3.</li>\n</ol>",
        "id": 261853676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637185350
    },
    {
        "content": "<p>I feel like these binders are a cute trick but more trouble than they are worth, so my preference is to forget aspirations to backwards compatibility and go with 4!</p>",
        "id": 261853823,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637185428
    },
    {
        "content": "<p>(re: \"more trouble\": it is easy to say something other than what you mean, and they are an unexpected language feature that adds rather than subtracts to the learning curve.)</p>",
        "id": 261854065,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637185545
    },
    {
        "content": "<p>Do you suggest that we start writing <code>∃ x, x ∈ s ∧ p x</code> instead of <code>∃ x ∈ s, p x</code>?</p>",
        "id": 261861136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637188758
    },
    {
        "content": "<p>Yes, that is suggestion 4.</p>",
        "id": 261863515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637190289
    },
    {
        "content": "<p>But it's clear that people like 2.</p>",
        "id": 261863535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637190307
    },
    {
        "content": "<p>In Lean 4 is it possible to have a few special binders with well-defined meanings?</p>\n<p><code>x ∈ s</code> would mean <code>(x) (h : x ∈ s)</code>, and for inequalities we could make, for example, <code>x &gt; c</code> mean <code>(x) (h : c &lt; x)</code> (like what Ruben suggested)</p>",
        "id": 261864849,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637191202
    },
    {
        "content": "<p>This is done already in lean 4 to some extent, but it is a maintenance burden because you have to support lots of indexing styles on lots of binders</p>",
        "id": 261866378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637192135
    },
    {
        "content": "<p>I would like this to be handled as a \"binder macro\" which applies uniformly in every context (maybe unless some particular binder has an override)</p>",
        "id": 261866488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637192200
    },
    {
        "content": "<p>There is no need to backport remove them, mathport can perfectly well handle desugaring them. It's just an open question whether we actually want to do that</p>",
        "id": 261866543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637192259
    },
    {
        "content": "<p>I don't want to desugar anything in mathport, because I don't want lean 4 to <em>have</em> less sugar</p>",
        "id": 261866695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637192353
    },
    {
        "content": "<p>but it's quite possible to do that if we want to</p>",
        "id": 261866737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1637192390
    }
]