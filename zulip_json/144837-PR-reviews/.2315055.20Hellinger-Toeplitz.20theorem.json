[
    {
        "content": "<p>In principle this should be easy to review. There is one issue with the definitions that are already in mathlib: the condition <code>is_self_adjoint</code> is not self-adjointness, but symmetry. Self-adjointness means that a linear operator is equal to its adjoint . So Hellinger-Toeplitz is the statement that an everywhere defined symmetric operator is self-adjoint.</p>",
        "id": 288005574,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1656584661
    },
    {
        "content": "<p>One reason why I bring that up is that for unbounded operators symmetric and self-adjoint are not the same thing, because in general one has only <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊂</mo><msup><mi>A</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">A \\subset A^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is symmetric.</p>",
        "id": 288006139,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1656584976
    },
    {
        "content": "<p>In that case I think we should in fact rename <code>inner_product_space.is_self_adjoint</code> to <code>inner_product_space.is_symmetric</code>! Would you be up for PRing that?</p>",
        "id": 288027244,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1656595701
    },
    {
        "content": "<p>The rename is not as simple as I thought. In <code>analysis/inner_product_space/rayleigh</code> it should be <code>is_self_adjoint</code>. So I think we need a definition <code>is_self_adjoint</code> for <code>continuous_linear_map</code> which is by definition <code>A.adjoint = A</code> and by Hellinger-Toeplitz we can upgrade <code>linear_map A</code> and <code>A.is_symmetric</code> to <code>continuous_linear_map A'</code> and <code>A'.is_self_adjoint</code>.<br>\nI would also like to move the definition of <code>is_symmetric</code> and the future <code>is_self_adjoint</code> to <code>analysis/inner_product_space/adjoint</code>, because <code>inner_product_space/basic</code> is &gt;2500 and it is annoying editing that file.</p>",
        "id": 288102639,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1656632749
    },
    {
        "content": "<p>Note that there is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/self_adjoint\">docs#self_adjoint</a>, which works exactly as you would want for <code>continuous_linear_map</code>.</p>",
        "id": 288103256,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1656633285
    },
    {
        "content": "<p>Perfect that should save one definition and also makes it more clear that why the symmetry condition should not be called self-adjointness. Unfortunately we will not be able to use that for unbounded operators, since <code>linear_pmap</code> is not a additive group.</p>",
        "id": 288106421,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1656636307
    }
]