[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , you <a href=\"https://github.com/leanprover-community/mathlib/pull/3210#discussion_r447398763\">asked</a> me on this PR, </p>\n<blockquote>\n<p>Why do you have an implicit <code>𝕜</code> here and an explicit <code>𝕜</code> in <code>normed_algebra.zero_ne_one</code>?</p>\n</blockquote>\n<p>This is just a situation where I didn't know how to do what I really wanted, so maybe you can explain it to me here over chat.</p>",
        "id": 202611602,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593630887
    },
    {
        "content": "<p>I would have guessed that the correct choice was to have an implicit <code>𝕜</code> in all three of the following lemmas:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">normed_algebra</span><span class=\"bp\">.</span><span class=\"n\">norm_one</span> <span class=\"o\">(</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝕜&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">normed_algebra</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"err\">𝕜&#39;</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">norm_algebra_map_eq</span> <span class=\"err\">𝕜&#39;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"err\">𝕜</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">normed_algebra</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_one</span> <span class=\"o\">(</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝕜&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">normed_algebra</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"err\">𝕜&#39;</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">norm_pos_iff</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">normed_algebra</span><span class=\"bp\">.</span><span class=\"n\">norm_one</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">normed_algebra</span><span class=\"bp\">.</span><span class=\"n\">to_nonzero</span> <span class=\"o\">{</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"err\">𝕜&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">normed_algebra</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonzero</span> <span class=\"err\">𝕜&#39;</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_ne_one</span> <span class=\"o\">:=</span> <span class=\"n\">normed_algebra</span><span class=\"bp\">.</span><span class=\"n\">zero_ne_one</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202611686,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593630932
    },
    {
        "content": "<p>But when I make this switch, I get the following error, which I don't know how to fix:</p>",
        "id": 202611725,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593630952
    },
    {
        "content": "<p>in the proof of the second lemma (<code>zero_ne_one</code>), when I drop the <code>𝕜</code> from the <code>rw</code>, 3 new goals appear,  complaining about lack of <code>normed_algebra</code> and <code>normed_field</code> instances.</p>",
        "id": 202612076,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593631108
    },
    {
        "content": "<p>I think that Lean can't guess <code>𝕜</code> based on <code>𝕜'</code>, so <code>𝕜</code> should be an explicit argument. I don't know whether you want <code>𝕜'</code> to be explicit or not.</p>",
        "id": 202612622,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593631365
    },
    {
        "content": "<p>OK, is this a general rule for all facts about normed algebras, normed spaces, vector spaces, modules, ..., that the base field/ring should be explicit in all definitions and lemmas?</p>",
        "id": 202612737,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593631433
    },
    {
        "content": "<p>Unless you have an argument of type <code>𝕜</code>, yes.</p>",
        "id": 202613545,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593631821
    },
    {
        "content": "<p>E.g., <code>has_fderiv_at</code> doesn't take <code>𝕜</code> as an argument but <code>differentiable_at</code> does.</p>",
        "id": 202613636,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593631868
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 202613644,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593631873
    },
    {
        "content": "<p>If you don't mind, let me ask you another question about variables.</p>",
        "id": 202613669,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593631888
    },
    {
        "content": "<p>I tried rewriting the first lemma with the variables introduced separately,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"err\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝕜&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_ring</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">normed_algebra</span> <span class=\"err\">𝕜</span> <span class=\"err\">𝕜&#39;</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">normed_algebra</span><span class=\"bp\">.</span><span class=\"n\">norm_one</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"err\">𝕜&#39;</span><span class=\"o\">)</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">norm_algebra_map_eq</span> <span class=\"err\">𝕜&#39;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"err\">𝕜</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 202613702,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593631910
    },
    {
        "content": "<p>This gives the error <code>unknown identifier '𝕜'</code> -- why?</p>",
        "id": 202613796,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593631954
    },
    {
        "content": "<p>You can use <code>include 𝕜</code> after <code>variables</code>.</p>",
        "id": 202614304,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593632192
    },
    {
        "content": "<p>Otherwise only variables mentioned in the statement of a lemma/definition and the corresponding <code>instance</code>s are visible in <code>tactic</code> mode proofs.</p>",
        "id": 202614426,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593632250
    },
    {
        "content": "<p>Thank you, that works!  I will read about <code>include</code>.</p>",
        "id": 202614440,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593632258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233210.2C.20openness.20of.20units/near/202614426\">said</a>:</p>\n<blockquote>\n<p>Otherwise only variables mentioned in the statement of a lemma/definition and the corresponding <code>instance</code>s are visible in <code>tactic</code> mode proofs.</p>\n</blockquote>\n<p>Are you saying, by the way, that in term mode I would not have this error?</p>",
        "id": 202614589,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593632321
    },
    {
        "content": "<p>Yes.</p>",
        "id": 202614715,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593632392
    },
    {
        "content": "<p>Thanks again.</p>",
        "id": 202614968,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1593632502
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-sections\">https://leanprover.github.io/theorem_proving_in_lean/interacting_with_lean.html#more-on-sections</a></p>",
        "id": 202615059,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593632543
    },
    {
        "content": "<p>Read near \"Note that double does not have y as argument\"</p>",
        "id": 202615081,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593632554
    }
]