[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">new_string_literal</span> <span class=\"o\">:=</span> <span class=\"c\">/-</span><span class=\"cm\">&quot;</span>\n<span class=\"cm\">## Markdown heading</span>\n\n<span class=\"cm\">String blocks are like comments:</span>\n<span class=\"cm\">``lean</span>\n<span class=\"cm\">/-- My declaration -/</span>\n<span class=\"cm\">def my_declaration : string :=</span>\n<span class=\"cm\">/-&quot;</span>\n<span class=\"cm\">  They can be nicely nested</span>\n<span class=\"cm\">&quot;-/</span>\n<span class=\"cm\">``</span>\n<span class=\"cm\">&quot;-/</span>\n</code></pre></div>",
        "id": 201728350,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592920410
    },
    {
        "content": "<p>What's the first character of the literal? <code>#</code> or newline?</p>",
        "id": 201728803,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592920589
    },
    {
        "content": "<p>and the last?</p>",
        "id": 201728826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592920597
    },
    {
        "content": "<p>The newline is the first character.  The last two characters are <code> ` </code> and a newline.</p>",
        "id": 201728913,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592920631
    },
    {
        "content": "<p>I'm not convinced by this specific syntax, because my mental lexing algorithm uses <code>/-</code> to always indicate the start of a comment, and the next character in the case of <code>/--</code> or <code>/-!</code> just specify which kind of comment. Turning it into a string literal would cause a bunch more mental lookahead. But I can't find any alternative nestable string literal syntax in a popular language, except perhaps CDATA in XML...</p>",
        "id": 201731202,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1592921692
    },
    {
        "content": "<p>What is the expected result for <code>/-\" am I a string or a comment? -/</code>?</p>",
        "id": 201731429,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1592921784
    },
    {
        "content": "<p>Obviously <code>unknown command `«/-\"»` </code>.</p>",
        "id": 201736629,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592924125
    },
    {
        "content": "<p>how about using <code>“</code> and <code>”</code> for nestable strings?</p>",
        "id": 201736883,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592924235
    },
    {
        "content": "<p>Let me explain the motivation behind making the syntax similar to comments.  A big requirement is here that comments and strings can be nested in any alternation.  The comments already had code to support the <code>/- /- -/ -/</code> nesting.  If we introduced a brand-new syntax for string literals, then we would also have to adapt the nesting code and the syntax highlighting.</p>",
        "id": 201736903,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592924247
    },
    {
        "content": "<p>It is also problematic to use the same token for both the begin and the end.  Let's say we choose <code>\"\"\"</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">description</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">How to write documentation:</span>\n<span class=\"s2\">`​``lean</span>\n<span class=\"s2\">add_tactic_doc {</span>\n<span class=\"s2\"> description := &quot;&quot;&quot;</span>\n   <span class=\"n\">Description</span> <span class=\"n\">goes</span> <span class=\"n\">here</span><span class=\"bp\">.</span>\n <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">}</span>\n<span class=\"s2\">`​``</span>\n<span class=\"s2\">&quot;&quot;&quot;</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201737852,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592924625
    },
    {
        "content": "<p>Oh, the Zulip highlighting correctly highlights the issue.</p>",
        "id": 201737951,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592924655
    },
    {
        "content": "<p>I haven't seen a programming language with nestable \"normal\" strings, but a few languages have nestable \"raw\" strings (which don't interpret escape sequences), by tagging the outermost delimiter with a string that never occurs inside the string. In Rust this looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code>let example1 = r#&quot;\n  These &quot;quotes&quot; do not cause the end of the string literal, only a quote with a # can.\n&quot;#;\n\nlet example2 = r#####&quot;\n  With more hashes like this, the string can mention &quot;, &quot;#, &quot;##, &quot;###, and &quot;#### without ending.\n&quot;#####;\n</code></pre></div>\n\n\n<p>C++ implements the same idea with <code>R\"foo( ... )foo\"</code> instead of <code>r###\" ... \"###</code> (arbitrary identifier labels instead of <code>#</code>s).</p>\n<p>Your alternative approach seems to be driven by a need these languages didn't have - specifically embedding Lean code in Lean strings, so you can depend on the fact the internal delimiters will be balanced. This is the same reason some languages adopted nestable comments, since you are often putting, say, Lean code in Lean comments.</p>",
        "id": 202077903,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593170475
    },
    {
        "content": "<p>Yes, we already have nestable comments.  And we also use comments for extended documentation.  It seemed a reasonable choice to reuse the comment syntax since <code>/-\" \"-/</code> will be mostly used by strings containing documentation.</p>",
        "id": 202079108,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593171330
    },
    {
        "content": "<p>There are actually a few other (not so hip) languages that have nestable string syntax:</p>\n<ul>\n<li>Perl: <code>print q{q{}q{q{}}}</code> prints <code>q{}q{q{}}</code>.  For bonus points you can use any kind of parenthesis after <code>q</code>.  Other kinds of strings have similar prefixes like <code>qq</code> (with escapes), or <code>m</code> (for regexps).</li>\n<li>Tcl: <code>puts {{a}}</code>.  Interestingly, Tcl also uses the string syntax for function bodies (because they <em>are</em> strings)</li>\n</ul>",
        "id": 202079343,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593171521
    },
    {
        "content": "<p>I completely forgot that Perl (and Ruby, which copied it from Perl) had this feature literally, nice.</p>",
        "id": 202079514,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593171694
    },
    {
        "content": "<p>Raku (previously Perl 6) which seems to aspire to be the cutest programming language, has <code>Q[...]</code> syntax akin to Perl but also allows the use of Japanese quoting like <code>｢this, which also ｢nests｣ properly｣</code>.</p>",
        "id": 202079720,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593171859
    },
    {
        "content": "<p>Come to think of it, Lean already uses French quotation marks, which could nest, but for identifiers instead of strings.</p>",
        "id": 202079742,
        "sender_full_name": "Scott Olson",
        "timestamp": 1593171904
    }
]