[
    {
        "content": "<p>tried to define the Fréchet derivative (<a href=\"#narrow/stream/113489-new-members/topic/type.20class.20inference.20sadness\" title=\"#narrow/stream/113489-new-members/topic/type.20class.20inference.20sadness\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/type.20class.20inference.20sadness</a>) and ended up writing down some things about bounded linear maps. Defined bounded linear maps as a structure, &amp; still working on showing some of its elementary properties of the operator norm.</p>",
        "id": 158562538,
        "sender_full_name": "Jean Lo",
        "timestamp": 1550176794
    },
    {
        "content": "<p>Have you seen <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/analysis/normed_space/operator_norm.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/analysis/normed_space/operator_norm.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/analysis/normed_space/operator_norm.lean</a> ?</p>",
        "id": 158562962,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1550177182
    },
    {
        "content": "<p>I haven't. This is very sad.</p>\n<p>Thanks for pointing that out &amp; apologies for the duplicated work.</p>",
        "id": 158563117,
        "sender_full_name": "Jean Lo",
        "timestamp": 1550177315
    },
    {
        "content": "<p>I have the suspicion a lot of people are playing with Fréchet derivatives ;)</p>",
        "id": 158564543,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1550178431
    },
    {
        "content": "<p>Also I think you're right in removing is_bounded_linear_map and bundling it instead</p>",
        "id": 158564591,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1550178471
    },
    {
        "content": "<p>Yes, our algebraic gang make it more and more ridiculous that we don't have derivatives in mathlib</p>",
        "id": 158564681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550178513
    },
    {
        "content": "<p>I went and read through the file — turns out most of the things that I set out to show have been done already! that's lovely.</p>\n<p>What is being worked on in <code>operator_norm.lean</code> at the moment? I'd love to know if there's anything I can do to help, though it's somewhat awkward that I've both defined the norm (equivalently but) differently, and also formulated most things in a different generality (over an arbitrary normed field, instead of the reals, though I suspect most of the proofs still work unaltered anyway.)</p>",
        "id": 158566194,
        "sender_full_name": "Jean Lo",
        "timestamp": 1550179531
    },
    {
        "content": "<p>The fact that there are real everywhere in that file is because I was too eager to get things done, and also I wanted to minimize the risk of being stuck with weird type class issue. I guess you could work on generalizing this aspect and PR it, but you'll need to make sure <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> is not doing it at the same time</p>",
        "id": 158566602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550179789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> This week I made a small start on the Fréchet derivative: <a href=\"https://github.com/leanprover-community/mathlib/blob/multivariate/src/analysis/deriv.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/multivariate/src/analysis/deriv.lean\">https://github.com/leanprover-community/mathlib/blob/multivariate/src/analysis/deriv.lean</a>. I expect to have the chain rule soon, at which point I'll issue a pull request to put it i the main library. I hope that doesn't get in your way? I have no plans to do anything with operators.</p>",
        "id": 158584554,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1550198298
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> not at all. &amp; it's really exciting to finally see derivatives in mathlib!</p>\n<p>I would like to make an attempt at proving some miscellaneous things about bounded linear maps in the meantime, then.</p>\n<p>Incidentally, I've become quite fond of working with <code>linear_map</code> as a bundled structure — is there any chance there's a way to have that sort of interface  for <code>bounded_linear_maps</code> alongside the formulation  (as a subspace of the k-linear maps from E to F) currently in <code>operator_norm</code>? Or would that just horrifically mangle the code and make things confusing?</p>",
        "id": 158600468,
        "sender_full_name": "Jean Lo",
        "timestamp": 1550221469
    },
    {
        "content": "<p>I suggest to refactor operator_norm so as to use the bundled version. We should remove the unbundled one.</p>",
        "id": 158600672,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1550221745
    },
    {
        "content": "<p>In amsterdam, I did a live demo on derivatives, and the first thing I did was rewrite <code>is_bounded_linear_map</code> as a structure. I think it's well worth it</p>",
        "id": 158600966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550222096
    },
    {
        "content": "<p>Not noteworthy enough for a whole separate PR and not even sure if it's a helpful thing to have done, but I spent some time filling in the gaps in a bundled version of bounded operators.</p>\n<p>Nothing's been refactored — <code>bounded_linear_map</code> as a structure exists alongside <code>bounded_linear_maps</code> as a subspace of <code>linear_map</code>, and <code>op_norm</code> alongside <code>operator_norm</code>; most/all of the results stated for <code>bounded_linear_maps</code> over reals have just been reproduced for <code>bounded_linear_map</code> over arbitrary <code>normed_field</code>s, so in particular no breaking changes have been inflicted upon <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> 's nice fréchet derivative code.</p>",
        "id": 159241573,
        "sender_full_name": "Jean Lo",
        "timestamp": 1550948994
    },
    {
        "content": "<p>It looks like there is some git issue in this PR. It seems to also contain trigonometry</p>",
        "id": 159245026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550954786
    },
    {
        "content": "<p>About arbitrary normed field, does it mean Jeremy's work won't be usable for complex and p-adic spaces? It would be nice to have a theory of derivatives covering those cases as well</p>",
        "id": 159245084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550954897
    },
    {
        "content": "<p>ah, frick, sorry about that. There were some git issues locally and I merged with the <code>ours</code> strategy at one point, that might have messed things up. Give me a second to either fix this or open up a separate PR w/o these issues?</p>",
        "id": 159245416,
        "sender_full_name": "Jean Lo",
        "timestamp": 1550955599
    },
    {
        "content": "<p>You can probably fix it and force push, the probability that it will mess up someone's repo seems low</p>",
        "id": 159245488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550955671
    },
    {
        "content": "<p>I have force-pushed. Things appear to be sane. Sorry for the silliness.</p>\n<p>re: arbitrary normed field: things in <code>normed_space/deriv</code> in <a href=\"https://github.com/leanprover/mathlib/issues/748\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/748\">#748</a> appear to always be stated for normed space over reals, but I've really not read through nearly enough of it to say anything constructive about how hard/easy it'd be to make the proofs there work in greater generality.</p>",
        "id": 159246143,
        "sender_full_name": "Jean Lo",
        "timestamp": 1550956920
    },
    {
        "content": "<p>Don't worry, very few contributors to mathlib never messed up any git branch. I wrote a few comments about unneeded assumption and easy stuff to add.</p>",
        "id": 159246379,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550957367
    },
    {
        "content": "<p>thanks! I've tossed in a commit that removes the spurious assumptions (got to love division by zero) and second one containing all the instances except for the <code>ring_theory/algebra</code> one.</p>\n<p>the <code>vector_space</code> instance was done in the trivial, verbose, there's-probably-something-simple-that-oneshots-this way — I don't know nearly enough lean &amp; I'd love to learn of a better way to state the instance if someone'd point it out.</p>",
        "id": 159250118,
        "sender_full_name": "Jean Lo",
        "timestamp": 1550964347
    },
    {
        "content": "<blockquote>\n<p>removes the spurious assumptions (got to love division by zero) </p>\n</blockquote>\n<p>Yes, you need to learn to stop worrying and love division by zero <span aria-label=\"nuclear\" class=\"emoji emoji-2622\" role=\"img\" title=\"nuclear\">:nuclear:</span>. This is a three stages process. First you need to realize you couldn't <em>state</em> this thing (even the original version with extra assumptions) without division by zero. Then you get happy users of your lemma, because they get fewer proof obligations. And then, according to people who worked on large scale formalization such as the odd order theorem, if you don't have that kind of tricks, then at some point there is a phase transition and you get completely stuck.</p>",
        "id": 159269318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551001163
    },
    {
        "content": "<p>About the instance, one could indeed automate this, but I don't have time for this now. This could be a nice exercise in reading the tactic tutorial and then the <code>pi_instance</code> and <code>subtype_instance</code> tactics, and then see what you can do here</p>",
        "id": 159269381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551001286
    },
    {
        "content": "<p>so the instance for <code>algebra k (bounded_linear_map k E E)</code> is there now, but importing <code>ring_theory.algebra</code> appears to also have done things that I don't know about and now one of the old proofs about <code>operator_norm</code> has a max-class-instance-resolution-depth error. (I tried the obvious thing of tweaking the max_depth but it either just takes longer to fail, or turns everything into deterministic timeouts.) Maybe I should go figure out which exact instance it's been failing to find, and including it by hand? What's the best practice in this case?</p>\n<p>&amp; thanks for the pointers; I'll go look at those tactics and hopefully make the instances nicer once I've done that.</p>",
        "id": 159275227,
        "sender_full_name": "Jean Lo",
        "timestamp": 1551013010
    },
    {
        "content": "<p>(the type class instance thing is fixed now; thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> )</p>",
        "id": 159276733,
        "sender_full_name": "Jean Lo",
        "timestamp": 1551015854
    },
    {
        "content": "<p>no problem</p>",
        "id": 159276735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551015868
    },
    {
        "content": "<p>I am sorry that I have been bad about reviewing duties. The work by Jan-David and Jean looks nice, but I am not following it closely. Do I need to take a closer look? <br>\nAs to generalizing normed spaces over the reals to an arbitrary normed field: I think it should work because ultimately every scalar appears inside a norm that maps it to a real anyhow. But I just tried it and the elaborator blew up on me. I added a comment to the PR that shows what I tried. I don't have time or energy now to figure out what is going wrong, but I'd be happy if someone can get it to work.</p>",
        "id": 159308044,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1551062135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> I pushed some adjustments to your PR in <a href=\"https://github.com/avigad/mathlib/compare/fderiv...leanprover-community:fderiv\" target=\"_blank\" title=\"https://github.com/avigad/mathlib/compare/fderiv...leanprover-community:fderiv\">https://github.com/avigad/mathlib/compare/fderiv...leanprover-community:fderiv</a> . Let me know what you think. I think that bundled bounded linear maps would be helpful for many of the proofs, but I didn't touch anything to do with that since Jean's PR is in progress</p>",
        "id": 159308380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551062743
    },
    {
        "content": "<p>Looks great! Except for the overly short proof of the chain rule at the end. How about adding enough information so that someone who wants to know how to prove the chain rule can learn it from the formal proof (without feedback from Lean), and then merging?</p>",
        "id": 159309376,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1551064483
    },
    {
        "content": "<p>Look at it this way. If you Google the chain rule, you find the mess of a proof I linked to earlier: <a href=\"https://math.stackexchange.com/questions/2216797/frechet-derivative-chain-rule\" target=\"_blank\" title=\"https://math.stackexchange.com/questions/2216797/frechet-derivative-chain-rule\">https://math.stackexchange.com/questions/2216797/frechet-derivative-chain-rule</a>. It would be really nice if the mathlib repository, online, gave a more precise and elegant proof. If you add four lines of <code>have</code>s, anyone can follow along.</p>",
        "id": 159309645,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1551064948
    },
    {
        "content": "<p>I don't mind inscrutably clever proofs when they abbreviate tedious, straightforward, and uninteresting details. But when our proof scripts start obscuring the interesting mathematical ideas, they become less useful, and we are missing an opportunity to teach and explain.</p>",
        "id": 159309750,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1551065133
    },
    {
        "content": "<p>I suggest you unpack my version of the chain rule with haves and shows the way you like it. I'm no good at verbose proof style</p>",
        "id": 159310632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551066711
    },
    {
        "content": "<p>Sorry that I've been away and this has been in development limbo for a while — I PR'd <a href=\"https://github.com/leanprover-community/mathlib/issues/802\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/802\">#802</a> because I invoked the lemma in a proof for continuity → boundedness for nontrivial normed fields; <a href=\"https://github.com/leanprover-community/mathlib/issues/829\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/829\">#829</a> implements that proof in the meantime for <code>is_bounded_linear_map</code> with <a href=\"https://github.com/leanprover-community/mathlib/issues/802\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/802\">#802</a> as a dependency. Now that <a href=\"https://github.com/leanprover-community/mathlib/issues/802\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/802\">#802</a> has gone through, my intention was to PR that continuity → boundedness proof stated for <code>bounded_linear_map</code>, at which point all of the theorems originally stated in the file (alongside some new ones) would have been reproduced for the bundled version, and I wanted to move on to maybe either do some generic functional analysis stuff or refactor some of <code>analysis/derivative</code>.  But some changes to mathlib while I wasn't paying attention seem to have turned much of my not-yet-PR'd code into type class inference hell, so that'll take a while to fix.</p>",
        "id": 162037146,
        "sender_full_name": "Jean Lo",
        "timestamp": 1553858376
    },
    {
        "content": "<p>Hmmm.... sorry for the pain. I hope fixing it is not too hard. I've found that a lot of errors are saying that type class search maxed out. Increasing the search depth from the default (32) to 40 usually already helps a lot.</p>",
        "id": 162039075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553860295
    },
    {
        "content": "<p>Thanks for the tip. It turned out less awful than I thought it was &amp; increasing the search depth did fix most of it, and the other errors that are being thrown seem to be mostly superficial.</p>\n<p>Currently I'm spending some time on a tentative attempt at refactoring <code>analysis.deriv</code>: stating things with <code>bounded_linear_map</code> seems to help simplify some theorems quite a bit. <code>analysis.deriv</code> seems to be the only file at the moment that depends on <code>is_bounded_linear_map</code>, so it might be viable to remove the old code soon if this goes well (and, of course, if we actually <em>want</em> this bundled thing.)</p>\n<p>In the meantime I figured I should wait a little for the verdict on the nontrivial normed field stuff in <a href=\"https://github.com/leanprover-community/mathlib/issues/829\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/829\">#829</a> : with luck that'd make the continuity→boundedness proof a lot less ad-hoc.</p>\n<p>Hope these things I'm doing/trying to do sound more or less sensible?</p>",
        "id": 162044953,
        "sender_full_name": "Jean Lo",
        "timestamp": 1553865281
    },
    {
        "content": "<p>As a result of some discussion earlier today on github (<a href=\"https://github.com/leanprover-community/mathlib/pull/726#issuecomment-481191842\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/726#issuecomment-481191842\">https://github.com/leanprover-community/mathlib/pull/726#issuecomment-481191842</a>), this PR should probably be superseded by <a href=\"https://github.com/leanprover-community/mathlib/issues/919\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/919\">#919</a>.</p>\n<p><del>#919 Is basically most of this PR except changes to <code>deriv.lean</code>, except most/all of the duplication &amp; clutter that's resulted from me being confused while struggling to keep up with mathlib have been removed. The intention is to sort out any problems in this before filing a separate PR for the derivative stuff.</del> <a href=\"https://github.com/leanprover-community/mathlib/issues/919\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/919\">#919</a> in turn superseded by <a href=\"https://github.com/leanprover-community/mathlib/issues/927\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/927\">#927</a> .</p>\n<p><del>(So <code>leanpkg build</code> doesn't complain, but Travis CI is upset that the <code>update-mathlib</code> doesn't work with the code in the PR. I never got around to figuring out how the <code>update-mathlib</code> script worked — can someone perhaps take a look at the error messages in the test logs &amp; point at what I'm doing wrong?)</del> have been informed that I should be making PRs from <code>mathlib-community</code> instead for Travis builds to pass. Am still confused, because it appears that no repository by that name exists on github? And <code>mathlib/docs/howto-contribute.md</code> doesn't seem to tell me anything about it. Sorry for being very out of date on this, but what's the proper way to file a pull request presently?</p>",
        "id": 163032847,
        "sender_full_name": "Jean Lo",
        "timestamp": 1554921453
    },
    {
        "content": "<p>Sorry about this. We've just recently updated the PR merge process, in the hope of making it easier on the maintainers. I think right now it's best if you create a branch on the <code>leanprover-community/mathlib</code> repository, and then make a PR from your branch to <code>master</code>.</p>",
        "id": 163254453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555142510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>: I don't know too much about how mergify works, but can we arrange so that people can make PRs from their own forks again? Losing this is pretty confusing, because it's the \"standard github way\".</p>",
        "id": 163254512,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555142580
    },
    {
        "content": "<p>If you don't have the ability to create branches on leanprover-community, ping any of the maintainers (I'm not sure the exact list - Mario, Chris, Patrick, ....?)</p>",
        "id": 163254613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555142648
    },
    {
        "content": "<p>We really need to update the <code>howto-contribute</code> doc, as at the moment it is wrong.</p>",
        "id": 163254663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555142714
    },
    {
        "content": "<p>Got some help from <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> about the pull request process; I've now closed <a href=\"https://github.com/leanprover-community/mathlib/issues/919\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/919\">#919</a>, moved the changes onto a branch of <code>leanprover-community/mathlib</code>, and PR'd that instead (<a href=\"https://github.com/leanprover-community/mathlib/issues/927\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/927\">#927</a>).</p>\n<p>Thanks so much for your patience in explaining this stuff to me &amp; sorry for making a small mess of it. I hope it all works okay now.</p>",
        "id": 163269236,
        "sender_full_name": "Jean Lo",
        "timestamp": 1555167692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What is broken with PRs from outside of leanprover-community?</p>",
        "id": 163269956,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1555168758
    },
    {
        "content": "<p>Now I'm not sure. I made a trivial PR from my fork, and it looked fine. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>, did you see what the problem was?</p>",
        "id": 163302591,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555221696
    },
    {
        "content": "<p>It's the Python stuff that fails. <a href=\"https://travis-ci.org/leanprover-community/mathlib/builds/516836152?utm_source=github_status&amp;utm_medium=notification\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/builds/516836152?utm_source=github_status&amp;utm_medium=notification\">https://travis-ci.org/leanprover-community/mathlib/builds/516836152?utm_source=github_status&amp;utm_medium=notification</a></p>",
        "id": 163305636,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555227305
    },
    {
        "content": "<p>Ah, I see.  Let me talk to Simon privately about this.</p>",
        "id": 163308373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555232357
    }
]