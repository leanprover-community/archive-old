[
    {
        "content": "<p>I went through data/set/finite to review what we have and to reorganize it (including addressing issue <a href=\"https://github.com/leanprover-community/mathlib/pull/11177\">#11177</a> about where <code>set.to_finset</code> lemmas should go). The main organizational principle was to collect all the <code>fintype</code> instances and then try to have the <code>set.finite</code> term constructors derive from them in a formulaic way. Then I tried putting everything else into broad categories.</p>\n<p>There are some other changes mixed in here that probably should have been other PRs, including a handful of renamings, argument order modifications, and <code>fintype</code> argument generalizations. This also makes <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.infinite\">docs#set.infinite</a> be protected so that it doesn't conflict with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infinite\">docs#infinite</a>. Hopefully these changes don't make the PR too hard to review...</p>\n<p>It's finally passed CI, so it would be nice if it could be reviewed before bitrot inevitably sets in, though it probably will stay fresh enough for awhile.</p>",
        "id": 282370864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652560360
    },
    {
        "content": "<p>I asked two questions. I don't think I'm brave enough to read the diffs of the main file...</p>",
        "id": 282376686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652568991
    },
    {
        "content": "<p>There was an interesting bug that Scott's questioning revealed, explaining a mystery I've been running into recently.</p>\n<p>My understanding is that, with Gabriel's improvements to congr lemmas, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_of_finset\">docs#fintype.card_of_finset</a> has become much more likely to apply. This lemma lets the cardinality of a <code>fintype</code> defined using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_finset\">docs#fintype.of_finset</a> to be turned into the cardinality of the underlying <code>finset</code>, which tends to be good since it's easier to compute cardinalities of finsets. However, it turns out that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.fintype_inter\">docs#set.fintype_inter</a>, which is the <code>fintype</code> instance for set intersections, was defined as <code>fintype.of_finset (s.to_finset.filter t) (by simp)</code>. That's using the set <code>t</code> as a predicate!</p>\n<p>Here's an example of the sort of thing this leads to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ x ∈ s ∧ t x ↔ x ∈ t ∧ s x</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The fix is to use <code>fintype.of_finset (s.to_finset.filter (∈ t)) (by simp)</code> for the instance instead.</p>",
        "id": 282380789,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652575688
    },
    {
        "content": "<blockquote>\n<p>I don't think I'm brave enough to read the diffs of the main file...</p>\n</blockquote>\n<p>It might be easier skimming through the new <a href=\"https://github.com/leanprover-community/mathlib/blob/31812fd5280f2081e08a42f46e889dd4f1cc30fa/src/data/set/finite.lean\">src/data/set/finite.lean</a> first, and then trusting that I (hopefully) didn't lose anything when shuffling things around <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> (mathlib compiling is at least proof nothing that was used is missing!) Beyond that, I'm not sure I have any words that might encourage bravery .</p>",
        "id": 282720014,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652829673
    },
    {
        "content": "<p>A followup PR will be to make <code>set.finite</code> protected to make way for a <code>Prop</code>-valued <code>finite</code> typeclass to accompany <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infinite\">docs#infinite</a>.</p>\n<p>(<a href=\"https://gist.github.com/kmill/cc77564f9e499002aae8c23111a7bd00\">Here's a gist</a> with an experiment in implementing <code>finite_set</code> and <code>finite_type</code>. <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>: <code>finite_type</code> is using your definition so that it works for <code>Sort*</code>.)</p>",
        "id": 282720221,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652829820
    },
    {
        "content": "<p>I know this is a tedious sort of PR to review, but it would be helpful getting it in soon for the next PRs about finiteness, if anyone would like to take a look.</p>",
        "id": 283118325,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653076420
    },
    {
        "content": "<p>I'll take a look as soon as I have time (also known as monday).</p>",
        "id": 283120631,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653077735
    }
]