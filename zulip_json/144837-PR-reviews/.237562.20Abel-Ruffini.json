[
    {
        "content": "<p>Wow! Congratulations! <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"clink\" class=\"emoji emoji-1f942\" role=\"img\" title=\"clink\">:clink:</span></p>",
        "id": 238093523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620628655
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_poly</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h05</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">nat.zero_lt_bit1</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h15</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">one_lt_bit1.mpr</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat_degree_le_iff_coeff_eq_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_add</span><span class=\"o\">,</span> <span class=\"n\">coeff_sub</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hn</span><span class=\"o\">),</span>\n        <span class=\"n\">coeff_C_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h15.trans</span> <span class=\"n\">hn</span><span class=\"o\">)),</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">coeff_C</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">h05.trans</span> <span class=\"n\">hn</span><span class=\"o\">)),</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_nat_degree_of_ne_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_add</span><span class=\"o\">,</span> <span class=\"n\">coeff_sub</span><span class=\"o\">,</span> <span class=\"n\">coeff_X_pow</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">coeff_C_mul</span><span class=\"o\">,</span> <span class=\"n\">coeff_X</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">h15</span><span class=\"o\">),</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">coeff_C</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h05</span><span class=\"o\">),</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is this something that a <code>norm_num</code> extension could easily do?</p>",
        "id": 238093852,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620628920
    },
    {
        "content": "<p>That would be nice.</p>",
        "id": 238093941,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1620628973
    },
    {
        "content": "<p>Well, probably not <code>norm_num</code> because it is supposed to work with numbers, but <code>norm_poly</code>. Putting together the terms with the same <code>X^i</code> coefficient, and then asking <code>norm_num</code> if the higher degree coefficient is obviously non-zero, seems like a reasonable task.</p>",
        "id": 238094197,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620629176
    },
    {
        "content": "<p>Can <code>simp</code> find that chain of rewrites?</p>",
        "id": 238095084,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620629925
    },
    {
        "content": "<p>I think that simp has trouble evaluating coefficients, since it doesn't know whether to use <code>if_pos</code> or <code>if_neg</code>.</p>",
        "id": 238095577,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1620630227
    },
    {
        "content": "<p>Probably a better way to prove this is to prove that nat_degree(f+g)=nat_degree(f) if nat_degree(g)&lt;nat_degree(f) and that nat_degree(C*X^d)&lt;=d.</p>",
        "id": 238097553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620631461
    }
]