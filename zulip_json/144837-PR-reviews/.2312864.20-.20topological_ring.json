[
    {
        "content": "<p>Speaking of touching a bunch of files, this hits 31, so it would be nice if it didn't sit in the queue forever (not that it's been there a long time). Simultaneously, the nature of the change is quite different from Sebastien's, so I don't expect things to be nearly as tumultuous.</p>",
        "id": 276676875,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648241189
    },
    {
        "content": "<p>I think my only question here is whether we want to discourage or encourage <code>[ring R] [topological_semiring R]</code> vs <code>[ring R] [topological_ring R]</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/12864\">#12864</a>, as they have the same mathematical content</p>",
        "id": 276689768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648249247
    },
    {
        "content": "<p>Are there examples of this (edit: redundancy of typeclasses) happening elsewhere in mathlib?</p>",
        "id": 276689788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648249268
    },
    {
        "content": "<p>sorry, of what happening elsewhere? <code>[ring R] [topological_semiring R]</code> is the default throughout mathlib. That's because the old <code>topological_ring</code> used to have a <code>[semiring R]</code> type class assumption. So the rings were always unital and it was a moot point.</p>",
        "id": 276689902,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648249379
    },
    {
        "content": "<p>It would be nice if there were a way for Lean to automatically infer the <code>continuous_neg</code> field of <code>[topological_ring R]</code> in the presence of the other fields when <code>R</code> is <code>[non_assoc_ring R]</code>, but <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> tells me this need to wait for Lean 4 for reasons I am unaware of.</p>",
        "id": 276690258,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648249665
    },
    {
        "content": "<p>Sorry, that was vague; I mean are there existing situations in mathlib where <code>[foo X] [weak_baz_using_weak_foo X]</code> and <code>[foo X] [baz_using_foo X]</code> have the same mathematical content, and if so which did we pick as the preferred spelling?</p>",
        "id": 276690496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648249870
    },
    {
        "content": "<p>Ah I see. I'm not aware of other occurrences of this, but someone who knows the library more fully might.</p>",
        "id": 276690762,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648250127
    },
    {
        "content": "<p>I would go with the shorter spelling, as it's also the most like use case in practice.</p>",
        "id": 276698098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1648258642
    },
    {
        "content": "<p>I think this is ready for review again (CI pending). I went through all occurrences in mathlib, and everywhere the assumption was <code>[ring α]</code> I used <code>[topological_ring α]</code> instead of <code>[topological_semiring α]</code>. We should probably put a note about this somewhere so that people don't end up using the wrong one.</p>",
        "id": 277096579,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648618721
    },
    {
        "content": "<p>I think putting that note in the docstring for <code>topological_semiring</code> should be enough</p>",
        "id": 277105855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648626661
    }
]