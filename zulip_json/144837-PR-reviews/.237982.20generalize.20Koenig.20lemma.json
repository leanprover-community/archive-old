[
    {
        "content": "<p>While we're on the topic <span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> ...</p>",
        "id": 243264015,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624129196
    },
    {
        "content": "<p>Making a useful <code>ulift_hom</code> construction seems somewhat nontrivial, so I suggest we leave it to a later PR if and when it's actually needed.<br>\nPing: <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span></p>",
        "id": 243264155,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624129331
    },
    {
        "content": "<p>That's fine with me, as long as we have a TODO comment so this isn't forgotten, and a docstring describing what <code>as_small</code> actually does (since there are many small categories equivalent to <code>C</code>, but this one is in a particular universe)</p>",
        "id": 243264242,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624129491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> out of curiosity, how do you propose to even define <code>ulift_hom C</code>?</p>",
        "id": 243264425,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624129732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237982.20generalize.20Koenig.20lemma/near/243264242\">said</a>:</p>\n<blockquote>\n<p>That's fine with me, as long as we have a TODO comment so this isn't forgotten, and a docstring describing what <code>as_small</code> actually does (since there are many small categories equivalent to <code>C</code>, but this one is in a particular universe)</p>\n</blockquote>\n<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> done (see projects section of the module docstring)</p>",
        "id": 243264647,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624130083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237982.20generalize.20Koenig.20lemma/near/243264425\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> out of curiosity, how do you propose to even define <code>ulift_hom C</code>?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">ulift_hom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">C</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v‚ÇÇ</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ulift_hom.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">ulift</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">quiver.hom</span> <span class=\"n\">C</span> <span class=\"n\">_</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">ulift.up</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">ulift.up</span> <span class=\"o\">(</span><span class=\"n\">ulift.down</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">ulift.down</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This seems to work? Though I'm sure you've thought about this more than I have</p>",
        "id": 243265015,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1624130737
    },
    {
        "content": "<p>Aha! That's how  you add a universe parameter to <code>C</code>. Okay, then yes I will add this  now ;)</p>",
        "id": 243265065,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624130803
    },
    {
        "content": "<p>Okay, I generalized and added a <code>ulift_hom</code> construction.</p>\n<p>I feel like <code>as_small</code> will be quite useful as is, so I kept it around, while generalizing so that it yields a type in <code>Type (max w v u)</code> given <code>C : Type u</code> with <code>[category.{v} C]</code>.</p>",
        "id": 243266369,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624132870
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 243383450,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624282892
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/5e3e16a6488be72497f3dc476ec5306cd294251d/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f333132312f656d6f6a692f696d616765732f31383532372e706e67\" title=\"merge\"></p>",
        "id": 243383900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624283105
    },
    {
        "content": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 243384170,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1624283227
    }
]