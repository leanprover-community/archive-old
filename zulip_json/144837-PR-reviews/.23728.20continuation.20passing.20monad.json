[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"110294\">@Johannes HÃ¶lzl</span>, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span>, any thoughts about this monad?</p>",
        "id": 158592333,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550209909
    },
    {
        "content": "<p>It's an interesting idea, and obviously you managed to get it to typecheck so there's that</p>",
        "id": 158592393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550209984
    },
    {
        "content": "<p>Isn't there a simplified version of this when you just want a \"result\" monad where you can return early (like exceptions but it's the expected result)</p>",
        "id": 158592416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550210042
    },
    {
        "content": "<p>Although I think the <code>option</code> monad has the wrong behavior for short circuiting escape unless you are in a lazy context</p>",
        "id": 158592450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550210093
    },
    {
        "content": "<p>Why is <code>option</code> wrong for that?</p>",
        "id": 158592471,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550210161
    },
    {
        "content": "<p>By the way, continuation passing is fairly standard and can't be replaced by a sum type. It allows you to have multiple targets for gotos</p>",
        "id": 158592520,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550210217
    },
    {
        "content": "<p>Consider this example: <a href=\"https://github.com/cipher1024/call-cc/blob/master/src/call_cc.lean\" target=\"_blank\" title=\"https://github.com/cipher1024/call-cc/blob/master/src/call_cc.lean\">https://github.com/cipher1024/call-cc/blob/master/src/call_cc.lean</a>. With it, I use continuation passing to verify the correctness of Duff's device</p>",
        "id": 158592533,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550210279
    },
    {
        "content": "<p>For example, if you define a function <code>list A -&gt; bool</code> that checks if any element satisfies a predicate <code>P : A -&gt; bool</code>, you would like to short circuit on success but you still have to pop the call stack back to the start before you can return</p>",
        "id": 158592580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550210338
    },
    {
        "content": "<p>Right, you could do that with continuation passing</p>",
        "id": 158592593,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550210369
    },
    {
        "content": "<p>I'm a little wary of <code>call_cc</code> since this has often been pointed to as one of the more confusing features of scheme to reason about, but maybe having laws will help</p>",
        "id": 158592661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550210503
    },
    {
        "content": "<p><a href=\"http://okmij.org/ftp/continuations/against-callcc.html\" target=\"_blank\" title=\"http://okmij.org/ftp/continuations/against-callcc.html\">http://okmij.org/ftp/continuations/against-callcc.html</a></p>",
        "id": 158592706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550210545
    },
    {
        "content": "<p>If you can avoid it, it's good to avoid it, just like gotos (actually, they're a bit more expressive than forward jumps). If you're going to use it, use the laws</p>",
        "id": 158592797,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1550210709
    }
]