[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Could one of you please take a look at this line: <a href=\"https://github.com/leanprover-community/mathlib/pull/2554/files#diff-92b98102703f73caffdeddcf66864201R538\" title=\"https://github.com/leanprover-community/mathlib/pull/2554/files#diff-92b98102703f73caffdeddcf66864201R538\">https://github.com/leanprover-community/mathlib/pull/2554/files#diff-92b98102703f73caffdeddcf66864201R538</a></p>",
        "id": 195666932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588142973
    },
    {
        "content": "<p>Other people who are experts on lists are also very welcome to take a look</p>",
        "id": 195666944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588142989
    },
    {
        "content": "<p>urh, yes that can be done better. The definition of <code>split_wrt_composition</code> is not good, and it makes the rest of the proofs tedious</p>",
        "id": 195667326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588143261
    },
    {
        "content": "<p>it will take a bit to get an adequate replacement working</p>",
        "id": 195667335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588143276
    },
    {
        "content": "<p>This definition of <code>split_wrt_composition</code> in terms of <code>of_fn</code> (as opposed to an induction on the length of the composition, say) is the one I need for the application in  <a href=\"https://github.com/leanprover-community/mathlib/issues/2513\" title=\"https://github.com/leanprover-community/mathlib/issues/2513\">#2513</a>, where I use multilinear functions (applied to elements of <code>fin k -&gt; E</code>). In particular, starting from <a href=\"https://github.com/leanprover-community/mathlib/blob/3f89f37b6a4c7c7962f276107d62b6129f53bd49/src/analysis/analytic/composition.lean#L1142\" title=\"https://github.com/leanprover-community/mathlib/blob/3f89f37b6a4c7c7962f276107d62b6129f53bd49/src/analysis/analytic/composition.lean#L1142\">https://github.com/leanprover-community/mathlib/blob/3f89f37b6a4c7c7962f276107d62b6129f53bd49/src/analysis/analytic/composition.lean#L1142</a>, there is a tricky argument where I have to fight three times DTT hell, and where I fear that changing the definition would make it much harder.</p>",
        "id": 195670156,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588145271
    },
    {
        "content": "<p>are you using <code>split_wrt_composition</code> in that proof currently? I can try not to break whatever applications you have</p>",
        "id": 195670456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588145461
    },
    {
        "content": "<p>would it suffice to have an equality to the <code>of_fn</code> definition?</p>",
        "id": 195670487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588145489
    },
    {
        "content": "<p>Yes, I use <code>split_wrt_composition</code> to define the change of variables in the proof, so it is there everywhere in the proof. It is not obvious to me if having an equality to the <code>of_fn</code> definition would be enough, as there are many dependent stuff so I don't know if a rewrite would work or not.</p>",
        "id": 195670744,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588145694
    },
    {
        "content": "<p>In fact I am not sure that changing the definition would break the proof. If you come up with a better definition for which <code>join_split_wrt_composition</code> becomes straightforward, can you give a gist containing it here on Zulip, and then I will check if it creates problems down the road.</p>",
        "id": 195671345,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588146080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> did you have any recommendations for a better definition for <code>split_wrt_composition</code> or are you still working on it?</p>",
        "id": 195902656,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588281398
    },
    {
        "content": "<p>sorry, I haven't had much time for lean. Should be able to get to it this weekend at the latest</p>",
        "id": 195920498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588294023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Got some time to look at this. As a test, I tried marking <code>split_wrt_composition</code> as <code>irreducible</code> and making all the lemmas except <code>length_split_wrt_composition</code>, <code>join_split_wrt_composition</code>, and <code>split_wrt_composition_join</code> private, and everything still seems to compile. So it seems you only need a pretty simple API and the definition doesn't matter</p>",
        "id": 196153777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588581227
    },
    {
        "content": "<p>That's good to hear. So, if you want to play with a different definition, go ahead! (Or it means we can come back to this later as a refactoring would not break things, as you prefer).</p>",
        "id": 196154307,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588581579
    },
    {
        "content": "<p>Right, I think this means that we can merge, and refactor later. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you agree?</p>",
        "id": 196156095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588582834
    },
    {
        "content": "<p>And in that case, would it be better to merge with the definition marked <code>irreducible</code> and the lemmas <code>private</code>?</p>",
        "id": 196156119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588582854
    },
    {
        "content": "<p>I'm working on the refactor now, just of those few proofs. Give me a few hours</p>",
        "id": 196156161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588582889
    },
    {
        "content": "<p>Pushed</p>",
        "id": 196157313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588583730
    },
    {
        "content": "<p>I deleted <code>nth_le_split_wrt_composition</code> but you weren't using it. Let me know if you want it restored</p>",
        "id": 196157457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588583837
    },
    {
        "content": "<p>Did you check if it breaks <a href=\"https://github.com/leanprover-community/mathlib/issues/2513\" title=\"https://github.com/leanprover-community/mathlib/issues/2513\">#2513</a>? (You would just need to check if the file <a href=\"https://github.com/leanprover-community/mathlib/blob/sgouezel_series_composition/src/analysis/analytic/composition.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/sgouezel_series_composition/src/analysis/analytic/composition.lean\">https://github.com/leanprover-community/mathlib/blob/sgouezel_series_composition/src/analysis/analytic/composition.lean</a> compiles on your branch)</p>",
        "id": 196158514,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588584621
    },
    {
        "content": "<p>yes</p>",
        "id": 196158566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588584662
    },
    {
        "content": "<p>er, no it doesn't break</p>",
        "id": 196158580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588584671
    },
    {
        "content": "<p>yes it works</p>",
        "id": 196158587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588584674
    },
    {
        "content": "<p>Then that's great, thanks a lot. Your definition is definitely better!</p>",
        "id": 196158606,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588584687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks!</p>",
        "id": 196160339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588585842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I think the last two theorems should be tagged <code>simp</code>. Otherwise, Let's Get This Merged.</p>",
        "id": 196160405,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588585896
    },
    {
        "content": "<p>Rofl there was me thinking it stood for something else</p>",
        "id": 196162255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588587008
    },
    {
        "content": "<p>I think Johan knows about the standard meaning here</p>",
        "id": 196162305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588587033
    },
    {
        "content": "<p>Hooray! Bryan kicked it on the queue</p>",
        "id": 196167202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588590875
    },
    {
        "content": "<p>This has landed in master. I have merged master in <a href=\"https://github.com/leanprover-community/mathlib/issues/2513\" title=\"https://github.com/leanprover-community/mathlib/issues/2513\">#2513</a> and, well, it looks like Mario has broken my proof :-)</p>",
        "id": 196173484,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588595400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Oh, I guess you use <code>nth_le_split_wrt_composition</code> after all. It doesn't look like a good theorem to me, but in the interest of minimizing the diff I've reproved the theorem. Most likely you can get much more savings by architecting the proofs in <code>analysis.analytic.composition</code> differently, but I haven't looked at this file in detail yet.</p>",
        "id": 196178444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588598304
    },
    {
        "content": "<p>Thanks for adding it back. I have fixed the build.</p>",
        "id": 196198212,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588606590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Thanks. I'll take a look after dinner.</p>",
        "id": 196198754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Is there a informal source of this composition of power series, in the generality that you formalised it?</p>",
        "id": 196213604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588613471
    },
    {
        "content": "<p>He explained several times that the informal reference is Bourbaki except he does it differently</p>",
        "id": 196213797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588613558
    },
    {
        "content": "<p>Because he didn't want to bother with some quotient used in Bourbaki</p>",
        "id": 196213837,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588613573
    },
    {
        "content": "<p>Ok, I never followed the discussions very closely, until I realised that I was going to be the reviewer of this PR.</p>",
        "id": 196213925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588613627
    },
    {
        "content": "<p>I don't think I've ever reviewed anything under <code>analysis/</code> before.</p>",
        "id": 196214002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588613647
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/Analytic.20functions\" title=\"#narrow/stream/116395-maths/topic/Analytic.20functions\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Analytic.20functions</a></p>",
        "id": 196214022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588613662
    },
    {
        "content": "<p>You need to read this thread</p>",
        "id": 196214034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588613671
    },
    {
        "content": "<p>Yes, I don't have a reference except for Bourbaki (in this fascicule where they don't give proofs). My goal is the analytic local inverse theorem, in its most general version (over any non-discrete normed field), for which I didn't find a reference either (and the various proofs of particular cases in the literature do not work for the general case, or have bootstrapping issues -- you need to know it over complex numbers to obtain it over general fields, and over complex numbers you use the fact that analytic is equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> and rely on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> local inverse theorem). So I came up with another direct proof, for which I won't have a reference either.</p>",
        "id": 196218624,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588615922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Do you have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">composition</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">composition</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">blocks_fun</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">inv_embedding</span> <span class=\"n\">j</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 196219019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588616088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196214002\" title=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196214002\">said</a>:</p>\n<blockquote>\n<p>I don't think I've ever reviewed anything under <code>analysis/</code> before.</p>\n</blockquote>\n<p>The good news is, there is no analysis in this PR, it's just reindexing finite sums -- which is not the most pleasant thing to do in Lean, especially when the argument on paper would use a lot of dots like in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><msub><mi>k</mi><mn>1</mn></msub></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mrow><msub><mi>k</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><msub><mi>k</mi><mn>2</mn></msub></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>f</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mo>…</mo><mtext> </mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(f_1(x_1, \\dotsc, x_{k_1}), f_2(x_{k_1+1}, \\dotsc, x_{k_2}), \\dotsc, f_i(\\dotsc))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0001em;vertical-align:-0.2501em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> and end up with the word \"trivially\".</p>",
        "id": 196219085,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588616122
    },
    {
        "content": "<p>No, not explicitly because I didn't need it, but it is exactly what <code>c.embedding</code> and <code>c.index</code> and <code>c.inv_embedding</code> are there for.</p>",
        "id": 196219578,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588616340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I pushed some golfing.</p>",
        "id": 196220459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588616744
    },
    {
        "content": "<p>To another branch, 1 sec</p>",
        "id": 196220475,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588616750
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/compare/sgouezel_series_composition...jmc_series_composition?expand=1\" title=\"https://github.com/leanprover-community/mathlib/compare/sgouezel_series_composition...jmc_series_composition?expand=1\">https://github.com/leanprover-community/mathlib/compare/sgouezel_series_composition...jmc_series_composition?expand=1</a></p>",
        "id": 196220591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588616799
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 196220610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588616811
    },
    {
        "content": "<p>Nice! Maybe use a more evocative name than <code>composition.equiv</code> (<code>composition.blocks_fin_equiv</code> or something like that?) but otherwise this is way better. Don't hesitate to push directly to the branch, by the way!</p>",
        "id": 196220986,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588616973
    },
    {
        "content": "<p>However, I'm struggling proving it's an equiv. I don't know the composition API</p>",
        "id": 196221141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588617034
    },
    {
        "content": "<p>Let me have a look.</p>",
        "id": 196221255,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588617098
    },
    {
        "content": "<p>Wow, <code>congr</code> proved (almost) everything: <a href=\"https://github.com/leanprover-community/mathlib/compare/sgouezel_series_composition...jmc_series_composition?expand=1\" title=\"https://github.com/leanprover-community/mathlib/compare/sgouezel_series_composition...jmc_series_composition?expand=1\">https://github.com/leanprover-community/mathlib/compare/sgouezel_series_composition...jmc_series_composition?expand=1</a></p>",
        "id": 196222183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588617562
    },
    {
        "content": "<p>OK, the kids are in bed, I'm back. The following works.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">composition</span><span class=\"bp\">.</span><span class=\"n\">blocks_fin_equiv</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">composition</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">Σ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">blocks_fun</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">inv_embedding</span> <span class=\"n\">j</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">composition</span><span class=\"bp\">.</span><span class=\"n\">index</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">composition</span><span class=\"bp\">.</span><span class=\"n\">embedding</span> <span class=\"n\">c</span> <span class=\"n\">i</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">composition</span><span class=\"bp\">.</span><span class=\"n\">mem_range_embedding_iff&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range_self</span> <span class=\"o\">},</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">A</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">heq_ext_iff</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">composition</span><span class=\"bp\">.</span><span class=\"n\">inv_embedding</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">composition</span><span class=\"bp\">.</span><span class=\"n\">embedding</span><span class=\"o\">,</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_val</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">A</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">embedding_comp_inv</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I already needed the right inv, so the lemma is already available. I will probably extract one or two lemmas for the left inv. Can I start from your branch, or do you have some work in progress?</p>",
        "id": 196230246,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588621271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> You can use my branch, but you can also pull my branch into yours.</p>",
        "id": 196230964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588621631
    },
    {
        "content": "<p>Just run <code>git merge jmc_blabla</code> when you have your branch checked out</p>",
        "id": 196231044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588621675
    },
    {
        "content": "<p>Possibly after <code>git fetch jmc_blabla</code></p>",
        "id": 196231112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588621693
    },
    {
        "content": "<p>Don't <code>embedding_inj</code> and <code>right_inv</code> imply <code>left_inv</code>?</p>",
        "id": 196232271,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588622230
    },
    {
        "content": "<p>BTW, LHS of <code>embedding_comp_inv</code> is simpler than RHS.</p>",
        "id": 196232560,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588622391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196218624\" title=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196218624\">said</a>:</p>\n<blockquote>\n<p>Yes, I don't have a reference except for Bourbaki (in this fascicule where they don't give proofs). My goal is the analytic local inverse theorem, in its most general version (over any non-discrete normed field), for which I didn't find a reference either (and the various proofs of particular cases in the literature do not work for the general case, or have bootstrapping issues -- you need to know it over complex numbers to obtain it over general fields, and over complex numbers you use the fact that analytic is equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> and rely on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> local inverse theorem). So I came up with another direct proof, for which I won't have a reference either.</p>\n</blockquote>\n<p>Doing local inverse theorem for complex analytic functions using the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">C^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span> version is non-sense. I'm sure Newton had a proof in the analytic case long before non-analytic functions became functions. Ok, maybe not Newton, but certainly people in the early 19th century.</p>",
        "id": 196234392,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588623258
    },
    {
        "content": "<p>When you do the naive combinatorial proof, you want to bound the growth rate of the coefficients of the inverse. What comes out from the formula is that they are bounded by the coefficients of the inverse of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>+</mo><msubsup><mo>∑</mo><mn>2</mn><mi mathvariant=\"normal\">∞</mi></msubsup><msup><mi>R</mi><mrow><mo>−</mo><mi>n</mi></mrow></msup><msup><mi>z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">z + \\sum_{2}^\\infty R^{-n} z^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">R &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is some number. To show that these coefficients grow at most exponentially, you can either compute them with awful formulas, or appeal to the local inverse theorem for analytic functions in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>. I will try to avoid both the awful formulas and the local inverse theorem in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> by going another route.</p>",
        "id": 196235922,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588624204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196232271\" title=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196232271\">said</a>:</p>\n<blockquote>\n<p>Don't <code>embedding_inj</code> and <code>right_inv</code> imply <code>left_inv</code>?</p>\n</blockquote>\n<p>There is a sigma type here, so knowing that each embedding is injective is not enough, we need that the family as a whole is injective (and this follows easily from the other lemmas that have already been proved in the file).</p>",
        "id": 196237260,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588624890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196232560\" title=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196232560\">said</a>:</p>\n<blockquote>\n<p>BTW, LHS of <code>embedding_comp_inv</code> is simpler than RHS.</p>\n</blockquote>\n<p>Switched, thanks.</p>",
        "id": 196237292,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588624910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196230964\" title=\"#narrow/stream/144837-PR-reviews/topic/.232554.20split.20list.20join/near/196230964\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> You can use my branch, but you can also pull my branch into yours.</p>\n</blockquote>\n<p>I have merged your branch into mine, cleaned up everything, and pushed back. Note that I am very happy that you have cleaned this up, but this corresponds to the preexisting part of the file, not to the PR :)</p>",
        "id": 196237441,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588624977
    },
    {
        "content": "<p>Ok, well... I'll just go through the entire file.<br>\nI just split of <a href=\"https://github.com/leanprover-community/mathlib/issues/2598\" title=\"https://github.com/leanprover-community/mathlib/issues/2598\">#2598</a> from my chev-warn branch. It should allow even further golfing.</p>",
        "id": 196238613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588625532
    },
    {
        "content": "<p>I will continue looking at this tomorrow.</p>",
        "id": 196238722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588625604
    },
    {
        "content": "<p>I've just realized that now we use <code>⨅</code>, <code>∏</code>, and <code>Π</code> in <code>mathlib</code>.</p>",
        "id": 196240961,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588626854
    },
    {
        "content": "<p>We actually use four of them: <code>⨅</code>, <code>⊓</code>, <code>Π</code>, <code>∏</code>.  But I can't visually tell which one you're missing.</p>",
        "id": 196242011,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588627540
    },
    {
        "content": "<p>We just need big wedge now</p>",
        "id": 196242164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588627621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I made a number of smaller PRs. Hopefully they can help with golfing a bunch of summy-proddy part of the proofs.</p>",
        "id": 196284088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588670021
    }
]