[
    {
        "content": "<p>I'm running into some weird problems with sheafs in <a href=\"https://github.com/leanprover-community/mathlib/pull/14930\">#14930</a>, presumably self-inflicted by <a href=\"https://github.com/leanprover-community/lean/pull/723\">leanprover-community/lean#723</a>.<br>\nIt seems to me that <code>simp</code> is now simplifying something I can't see in the goal state, and this is causing other lemmas to no longer match.</p>\n<p>Could someone more familiar with <code>eq_to_hom</code> take a look? (unfortunately I just blew away the cache, but I suspect it won't take long to produce a new one)</p>",
        "id": 287424662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656148564
    },
    {
        "content": "<p>It looks like the problem is that lean is simplifying <code>eq_to_hom h : op A ⟶ op B</code> where <code>h : op A = op B</code> to <code>eq_to_hom h' : op A ⟶ op B</code> where <code>h' : A = B</code></p>",
        "id": 287427437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656152735
    },
    {
        "content": "<p>is the issue <a href=\"https://leanprover-community.github.io/mathlib_docs/find/op_inj_iff\">docs#op_inj_iff</a>?</p>",
        "id": 287428080,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656153552
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite.op_inj_iff\">docs#opposite.op_inj_iff</a></p>",
        "id": 287428097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656153589
    },
    {
        "content": "<p>Looks like adding <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_to_hom_map\">docs#eq_to_hom_map</a> to the <code>simp</code> should fix whatever the problem is (still not sure why it is not a simp lemma)</p>",
        "id": 287428124,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656153600
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.eq_to_hom_map\">docs#category_theory.eq_to_hom_map</a></p>",
        "id": 287428173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656153640
    },
    {
        "content": "<p>everyone else has a bunch of stuff open today</p>",
        "id": 287428179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656153649
    },
    {
        "content": "<p>Ah, I see what's happening; <code>opposite</code> is irreducible</p>\n<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2314930.20Lean.203.2E44.2E0/near/287428080\">said</a>:</p>\n<blockquote>\n<p>is the issue <a href=\"https://leanprover-community.github.io/mathlib_docs/find/op_inj_iff\">docs#op_inj_iff</a>?</p>\n</blockquote>\n<p>Yes exactly. Making that not be proved by <code>iff.rfl</code> solved the issue</p>",
        "id": 287428196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656153695
    },
    {
        "content": "<p>Is this new <code>iff.rfl</code> stuff documented anywhere?</p>",
        "id": 287428335,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656153873
    },
    {
        "content": "<p>No; where would you like such documentation to live?</p>",
        "id": 287428437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656154008
    },
    {
        "content": "<p>Perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#dsimp\">tactic#dsimp</a>?</p>",
        "id": 287428445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656154028
    },
    {
        "content": "<p>Writing documentation there maybe requires a new lean release...</p>",
        "id": 287428461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656154070
    },
    {
        "content": "<p>Well my first question would just be how does it work</p>",
        "id": 287428530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656154157
    },
    {
        "content": "<p>is there an auxiliary definition generated for these lemmas?</p>",
        "id": 287428534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656154165
    },
    {
        "content": "<p>Or I guess <code>dsimp</code> doesn't really need the lemma anyways? it just needs to know that the two sides are defeq?</p>",
        "id": 287428591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656154214
    },
    {
        "content": "<p>There are two things that seems to be going on here:</p>\n<ul>\n<li><code>dsimp</code> doesn't care about the proof, as ultimately it just does a single <code>change</code> (or equivalent), using <code>_refl_lemma</code> lemmas to guide it to the preferred form</li>\n<li><code>simp</code> seems to use the proof of <code>_refl_lemma</code>s always, but apparently prioritizes using them over regular simp lemmas</li>\n</ul>\n<p>The change in 3.44.0 is that lemmas proved by <code>iff.rfl</code> are now tagged with <code>_refl_lemma</code> to match lemmas proved with <code>rfl</code>.</p>",
        "id": 287428840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656154596
    },
    {
        "content": "<p>The problem with <code>opposite.op_inj_iff</code> is that the two sides are defeq when the lemma is declared, but are no longer defeq after the <code>attribute [irreducible]</code>.</p>",
        "id": 287428861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656154652
    },
    {
        "content": "<p>So the same would apply to the next 3 lemmas right?</p>",
        "id": 287428918,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656154730
    },
    {
        "content": "<p>I think we might already have a linter to spot that type of thing</p>",
        "id": 287428927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656154753
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14930/commits/29582a79587e66ee95b890e1c119c10cf21ff869\">https://github.com/leanprover-community/mathlib/pull/14930/commits/29582a79587e66ee95b890e1c119c10cf21ff869</a></p>",
        "id": 287428928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656154754
    },
    {
        "content": "<p>Or maybe not the <code>op_unop</code>/<code>unop_op</code> ones?</p>",
        "id": 287428930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656154764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2314930.20Lean.203.2E44.2E0/near/287428930\">said</a>:</p>\n<blockquote>\n<p>Or maybe not the <code>op_unop</code>/<code>unop_op</code> ones?</p>\n</blockquote>\n<p>I think these are safe because the type of the LHS and RHS are syntactically and definitionally the same</p>",
        "id": 287428937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656154784
    },
    {
        "content": "<p><code>op_inj</code> changes the type of an equality from <code>@eq X</code> to <code>@eq (opposite X)</code></p>",
        "id": 287428990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656154814
    },
    {
        "content": "<p>I don't really understand any more why we have <code>op (unop x)</code> defeq to <code>x</code> when <code>opposite</code> is irreducible... but anyways it's going away with eta for structures right?</p>",
        "id": 287429102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656155000
    },
    {
        "content": "<p>The point of making <code>opposite</code> irreducible was to stop things like <code>op x = x</code> being possible to prove or even state</p>",
        "id": 287429300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656155298
    },
    {
        "content": "<p>Pretty much the entire point of <code>irreducible</code> on types is to make things like <code>op (unop x) = x</code> defeq</p>",
        "id": 287429310,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656155336
    },
    {
        "content": "<p>If we didn't care about that we could just use a structure instead</p>",
        "id": 287429318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656155350
    },
    {
        "content": "<p>(which indeed is what we probably want to do with eta for structures)</p>",
        "id": 287429321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656155363
    },
    {
        "content": "<p>Is this a temporary fix, or should these irreducible lemmas not be proven with <code>rfl</code> and <code>iff.rfl</code>?</p>",
        "id": 287436709,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656166020
    },
    {
        "content": "<p>On this note, is it good practice to write down <code>rfl</code> lemmas that are already proven by <code>simp</code>?</p>",
        "id": 287437053,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656166455
    },
    {
        "content": "<p>The commit I link to above is the right solution IMO</p>",
        "id": 287437467,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656167032
    },
    {
        "content": "<p>Either that, or simp should check that the type of a refl-rewritten proof is still defeq to the original with current irreducibility settings</p>",
        "id": 287437586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656167146
    },
    {
        "content": "<p>But that's no longer blocking this PR anyway, it seems the other type aliases already handle this correctly</p>",
        "id": 287437643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656167170
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14930\">#14930</a> is back to fixing broken <code>simp</code>s that are applying lemmas in a slightly different order to before</p>",
        "id": 287437663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656167205
    },
    {
        "content": "<p>So, the general idea is to avoid <code>dsimp</code> when a proof being <code>rfl</code> depends on reducibility attributes?</p>",
        "id": 287440091,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656169922
    },
    {
        "content": "<p>That probably merits a library note</p>",
        "id": 287440141,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656169964
    },
    {
        "content": "<p>Note that nothing notable has really changed here; we would have the same problem on master if the lemma were written <code>: (opposite.op x = opposite.op y) = (x = y) := rfl</code> (I tested this, I can confirm the same problem appears)</p>",
        "id": 287440273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656170069
    },
    {
        "content": "<p>Actually, that's really just something that should be documented in <code>dsimp</code> itself if it isn't already</p>",
        "id": 287442484,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656172715
    },
    {
        "content": "<p>Is the idea that anything <code>dsimp</code> gives should also be achievable with <code>change</code>?</p>",
        "id": 287442485,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656172715
    },
    {
        "content": "<p>Something I haven't worked out yet from this change; in <code>simp</code>, do refl lemmas have higher priority than regular ones, or is it just that <code>=</code> lemmas have higher priority than <code> ↔ </code>? (The answer to this shouldn't have changed in 3.44.0, but the relevance has)</p>",
        "id": 287454685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656190374
    },
    {
        "content": "<p>Ah, yep:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">constant</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">section</span>\n<span class=\"c1\">-- one eq, one iff</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo_eq_bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">9000</span><span class=\"o\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo_one_eiff_true</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- priority was ignored</span>\n  <span class=\"n\">guard_target</span> <span class=\"n\">bar</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span>\n<span class=\"c1\">-- both iff</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo_iff_bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">bar</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">9000</span><span class=\"o\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">foo_one_iff_true</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"c1\">-- priority was respected</span>\n  <span class=\"n\">guard_target</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287494143,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656251086
    },
    {
        "content": "<p>I think this means that Lean 3.44.0 has a design flaw; right now <code>rfl</code> iff lemmas are internally (invisibly) promoted to <code>rfl</code> eq lemmas, which makes their priorities surprising (and makes the porting very annoying in <a href=\"https://github.com/leanprover-community/mathlib/pull/14930\">#14930</a>)</p>",
        "id": 287494234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656251182
    },
    {
        "content": "<p>This is probably fixable, but maybe we should just revert the change and I'll try it again a different way later, now that I know this gotcha</p>",
        "id": 287494247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656251215
    },
    {
        "content": "<p>Ah, the fix wasn't too bad: <a href=\"https://github.com/leanprover-community/lean/pull/736\">leanprover-community/lean#736</a>. I guess that should be 3.44.1?</p>",
        "id": 287496777,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656254688
    },
    {
        "content": "<p>Is there any way to get mathlib CI to run against an unreleased lean version?</p>",
        "id": 287511889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656274559
    },
    {
        "content": "<p>I believe so, because Anne did that to backport <code>has_coe_to_fun</code>. Try changing <code>leanpkg.toml</code>?</p>",
        "id": 287512012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656274727
    },
    {
        "content": "<p>I think what people have done in the past is to point <code>leanpkg.toml</code> to a release on their own fork of Lean.</p>",
        "id": 287512023,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1656274756
    },
    {
        "content": "<p>Is there anything more to creating such a release than making a tag? Does elan build lean locally, or do I have to deploy binaries somehow?</p>",
        "id": 287512452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656275391
    },
    {
        "content": "<p>Yes you just need to make a tag, but please do it on your own fork.</p>",
        "id": 287512764,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656275829
    },
    {
        "content": "<p>Excellent, thanks. I'll convince myself that the change is an improvement before we throw away another version number again</p>",
        "id": 287513124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656276287
    },
    {
        "content": "<p>What exactly does the uploading of the lean binaries?</p>",
        "id": 287516468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656281128
    },
    {
        "content": "<p>Currently I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">binary</span> <span class=\"n\">package</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">provided</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">linux'</span>\n</code></pre></div>",
        "id": 287516521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656281181
    },
    {
        "content": "<p>Do I really have to download them from the CI build and reupload them to the release?</p>",
        "id": 287516727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656281490
    },
    {
        "content": "<p>This is strange.  Pushing to a tag should trigger the github actions, which will automatically upload the releases.  But I don't see any actions being run on the v3.44.1 tag in your repo.  <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span>  Adding the binary manually will of course also work in a pinch.</p>",
        "id": 287542723,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656315692
    },
    {
        "content": "<p>Adding the binary manually did the trick</p>",
        "id": 287543150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656316035
    },
    {
        "content": "<p>Do you know where the CI script that's supposed to do that is?</p>",
        "id": 287543980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656316623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2314930.20Lean.203.2E44.2E0/near/287513124\">said</a>:</p>\n<blockquote>\n<p>Excellent, thanks. I'll convince myself that the change is an improvement before we throw away another version number again</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14984\">#14984</a> is passing the build (and awaiting the linter),  and is about half the size of <a href=\"https://github.com/leanprover-community/mathlib/pull/14930\">#14930</a>; so I think the latest patch to Lean is working as intended</p>",
        "id": 287548616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656319583
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/c8a1a26c0aadd59403b5344aca9cedd28db2b077/.github/workflows/on-push.yml\">https://github.com/leanprover-community/lean/blob/c8a1a26c0aadd59403b5344aca9cedd28db2b077/.github/workflows/on-push.yml</a></p>",
        "id": 287548792,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656319697
    },
    {
        "content": "<p>CI was happy (I just pushed a rebase to clean up the history for review so it's running again, the original run was <a href=\"https://github.com/leanprover-community/mathlib/commit/85aac758bd27f3d3af7fcb54847fbb6fc2ce7009\">https://github.com/leanprover-community/mathlib/commit/85aac758bd27f3d3af7fcb54847fbb6fc2ce7009</a>).</p>\n<p>Are you happy to release 3.44.1?</p>",
        "id": 287556098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656324146
    },
    {
        "content": "<p>Well done Eric for getting to the bottom of this! How will it change the way things work in practice?</p>",
        "id": 287556123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656324183
    },
    {
        "content": "<p>Basically it just means that we don't need weird lemmas stated in the form <code>p = q</code> where <code>p q : Prop</code></p>",
        "id": 287556170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656324230
    },
    {
        "content": "<p>like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.mem_set_of_eq\">docs#set.mem_set_of_eq</a></p>",
        "id": 287556198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656324244
    },
    {
        "content": "<p>Or at least, we no longer need them for <code>dsimp</code></p>",
        "id": 287556241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656324264
    },
    {
        "content": "<p>There are two reasons we might still need them:</p>\n<ul>\n<li>Someone feels very strongly about <code>propext</code>, and doesn't want <code>simp</code> to use it. These people can either add <code>=</code> copies of lemmas themselves, or use <code>dsimp</code> before <code>simp</code>, since <code>dsimp</code> doesn't use any axioms</li>\n<li><code>=</code> simp lemmas live in a different priority \"universe\" to <code>iff</code> simp lemmas; the lowest-priority lemmas in the former universe are tried before the highest-priority lemmas in the latter</li>\n</ul>",
        "id": 287556360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656324359
    },
    {
        "content": "<p>(Discovering that this second bullet point has always been true was the surprise that made 3.44.0 undesirable)</p>",
        "id": 287556433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656324395
    },
    {
        "content": "<p>(more notably but unrelated to the thread above, 3.44.x gives us approximate outline and breadcrumb views in vscode)<br>\n<a href=\"/user_uploads/3121/HEQAs0cD3kiQIIrK2AUwrfYq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/HEQAs0cD3kiQIIrK2AUwrfYq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/HEQAs0cD3kiQIIrK2AUwrfYq/image.png\"></a></div>",
        "id": 287556656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656324554
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/pull/737\">lean#737</a></p>",
        "id": 287556830,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1656324681
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14984\">#14984</a> is now green, and points to the real release!</p>",
        "id": 287580426,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656337948
    }
]