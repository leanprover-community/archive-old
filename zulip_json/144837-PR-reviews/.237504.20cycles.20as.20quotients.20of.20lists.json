[
    {
        "content": "<p>Does anyone have further comments here? <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> ?</p>",
        "id": 242301650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623387904
    },
    {
        "content": "<p>My objection is as follows: <code>next l x</code> is documented to return the element after the first occurrence of <code>x</code> in <code>l</code>, wrapping around if the occurrence is at the last position in <code>l</code>. The current implementation returns <code>l.head</code> instead if <code>x</code> is <code>l.last</code>, even if <code>x</code> occurs in <code>l</code> before <code>l.last</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">next</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"c1\">-- returns 1 instead of the 3 I expect</span>\n</code></pre></div>\n<p>I propose to <a href=\"https://github.com/leanprover-community/mathlib/commit/51d8fe41fce9e8d1a43c865a4da3b6d1b9bbe1d5\">the define <code>next</code> instead as follows</a>, which always picks the first occurrence. Apart from some style issues, I am happy to apply the linked commit and merge. Though someone else who didn't write it, should also take a look at it of course.</p>",
        "id": 242318975,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623402671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> What do you think of Anne's proposal?</p>",
        "id": 242319323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623402853
    },
    {
        "content": "<p>The current implementation is: get the first element in the list whose predecessor is an <code>x</code>. I agree that the docstring could be improved, but to me the current behavior makes sense.</p>",
        "id": 242337084,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623414259
    },
    {
        "content": "<p>We can implement it in either way, it's really meant to be used when 'nodup l' so that it makes sense with the cycle quotient or 'form_perm'. I'm sorry I haven't been able to respond in the PR, it's been a few busy weeks here (started new job).</p>",
        "id": 242338399,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1623414967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237504.20cycles.20as.20quotients.20of.20lists/near/242337084\">said</a>:</p>\n<blockquote>\n<p>The current implementation is: get the first element in the list whose predecessor is an <code>x</code>. I agree that the docstring could be improved, but to me the current behavior makes sense.</p>\n</blockquote>\n<p>Ah, that makes sense too. I still slightly prefer changing the definition of <code>next</code> to avoid a quadratic running time, though it's not a blocker for me anymore (when did mathlib care about computability, let alone running time?)</p>",
        "id": 242440324,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623491013
    }
]