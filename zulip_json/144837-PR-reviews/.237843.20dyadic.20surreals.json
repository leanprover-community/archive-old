[
    {
        "content": "<p>We're having some discussion about instance priorities <a href=\"https://github.com/leanprover-community/mathlib/pull/7843#discussion_r647430790\">here</a></p>\n<p>Currently there are two instances defined for surreal numbers:<br>\n<code>instance : ordered_add_comm_group surreal</code> and <br>\n<code>noncomputable instance : linear_ordered_add_comm_group surreal</code></p>\n<p>What's a proper way to ask Lean to infer <code>instance add_comm_group</code> from the computable instance and not the noncomputable one. Lowering priorities isn't quite working. </p>\n<p>The current hack is to just use <code>instance : add_comm_group surreal := by apply_instance</code> before the <code>noncomputable</code> instance.</p>\n<p>Thanks,</p>",
        "id": 242071240,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1623247805
    },
    {
        "content": "<p>Can you tell us why you would like some things to remain <code>computable</code>? If this is not important, I'd just go for the noncomputable version otherwise.</p>",
        "id": 242072123,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623248118
    },
    {
        "content": "<p>The confusing thing here is that <code>linear_ordered_add_comm_group</code> has a direct path to <code>add_comm_group</code> that does not go through <code>ordered_add_comm_group</code>.</p>",
        "id": 242072932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623248405
    },
    {
        "content": "<p>I think the right thing to do is split <code>ordered_add_comm_group surreal</code> in two</p>",
        "id": 242072980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623248423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237843.20dyadic.20surreals/near/242072123\">said</a>:</p>\n<blockquote>\n<p>Can you tell us why you would like some things to remain <code>computable</code>? If this is not important, I'd just go for the noncomputable version otherwise.</p>\n</blockquote>\n<p>No particular reason tbh. Because there are far fewer <code>noncomputable</code> theorems in the library, I think I just assumed that one should make theorems <code>computable</code> whenever possible.</p>",
        "id": 242073021,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1623248439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237843.20dyadic.20surreals/near/242072980\">said</a>:</p>\n<blockquote>\n<p>I think the right thing to do is split <code>ordered_add_comm_group surreal</code> in two</p>\n</blockquote>\n<p>That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">surreal</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span>               <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">add_assoc</span>         <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"n\">add_assoc_equiv</span> <span class=\"o\">},</span>\n  <span class=\"n\">zero</span>              <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span>          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.zero_add_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_zero</span>          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">(</span><span class=\"n\">pgame.add_zero_equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">neg</span>               <span class=\"o\">:=</span> <span class=\"n\">has_neg.neg</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span>      <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"n\">pgame.add_left_neg_equiv</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_comm</span>          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"n\">pgame.add_comm_equiv</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">surreal</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span>                <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">),</span>\n  <span class=\"n\">lt</span>                <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">),</span>\n  <span class=\"n\">le_refl</span>           <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">le_trans</span>          <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">pgame.le_trans</span> <span class=\"o\">},</span>\n  <span class=\"n\">lt_iff_le_not_le</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ox</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">oy</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">pgame.lt_iff_le_not_le</span> <span class=\"n\">ox</span> <span class=\"n\">oy</span> <span class=\"o\">},</span>\n  <span class=\"n\">le_antisymm</span>       <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">quotient.sound</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">add_le_add_left</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">hx</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">pgame.add_le_add_left</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">surreal.add_comm_group</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 242073120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623248479
    },
    {
        "content": "<p>This fixes the problem and groups things a little more tidily</p>",
        "id": 242073156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623248500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237843.20dyadic.20surreals/near/242073021\">said</a>:</p>\n<blockquote>\n<p>No particular reason tbh. Because there are far fewer <code>noncomputable</code> theorems in the library, I think I just assumed that one should make theorems <code>computable</code> whenever possible.</p>\n</blockquote>\n<p><code>theorem</code>s are never computable, only <code>def</code>s are</p>",
        "id": 242073271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623248528
    },
    {
        "content": "<p>Oops...</p>",
        "id": 242073481,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1623248599
    },
    {
        "content": "<p>I'll apply your suggested fix and split up the instances into two.</p>",
        "id": 242073521,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1623248615
    },
    {
        "content": "<p>I take it back - the right fix is probably to just change <code>linear_ordered_add_comm_group</code> to extend <code>ordered_add_comm_group</code> instead of <code>add_comm_group</code>. I thought there was a reason for it being that way, but I can't see one</p>",
        "id": 242073653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623248654
    },
    {
        "content": "<p>I'll open a quick PR to do that and see what breaks</p>",
        "id": 242073682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623248667
    },
    {
        "content": "<p>In the mean time the split is probably fine in your PR, it's at worst ultimately unnecessary</p>",
        "id": 242073893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623248750
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 242074099,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1623248828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237843.20dyadic.20surreals/near/242073682\">said</a>:</p>\n<blockquote>\n<p>I'll open a quick PR to do that and see what breaks</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7861\">#7861</a></p>",
        "id": 242074969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623249137
    },
    {
        "content": "<p>Eric, I do not know if this is the reason, but the way it was, you had no \"repetition\" in the fields: one Typeclass assumption only dealt with the order relation, the other only with the algebraic operation.</p>\n<p>In any case, as you can probably guess from my involvement with the <code>ordered</code>-refactor, I did not find the <code>ordered</code> typeclasses flexible enough anyway!</p>",
        "id": 242076634,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623249776
    },
    {
        "content": "<p>Repetition in fields is handled just fine by <code>old_structure_cmd</code>, and is ubiquitous in the algebra heirarchy - so is not in itself a concern</p>",
        "id": 242077604,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623250155
    },
    {
        "content": "<p>Remember these are not typeclass assumptions, they're fields</p>",
        "id": 242077666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623250183
    },
    {
        "content": "<p>Of course, my comment simply gave an aesthetic reason for why the other splitting had been made: even though you <em>can</em> repeat fields, you can also be minimalistic and not repeat them!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 242078388,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623250458
    },
    {
        "content": "<p>But you're not actually minimizing anything, the net effect of the \"minimization\" you propose is the same number of fields but needing one more definition and running into more problems like this one!</p>",
        "id": 242079092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623250694
    },
    {
        "content": "<p>Oh, I was not suggesting that the other way is better from the programming side of things, just that it saves up space in your mind: on the one hand you have the order relation, on the other you have the algebraic operation.  Clean and tidy!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242080451,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623251199
    },
    {
        "content": "<p>I'm having a weird (universe?) problem in the <a href=\"https://github.com/leanprover-community/mathlib/blob/4f7e0ddd0f9e6eb044657520cfbd2685b6d49a8a/src/set_theory/surreal.lean#L302\">following proof</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">pow_half_left_moves</span>\n<span class=\"c1\">-- pow_half_left_moves : ∀ {n : ℕ}, (pow_half n).left_moves = punit</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_half_left_moves'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">punit</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">pow_half</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_half_left_moves</span><span class=\"o\">],</span>\n  <span class=\"n\">fsplit</span><span class=\"o\">,</span> <span class=\"c1\">-- apply equiv.cast does not work?</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">fsplit</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>After the first <code>simp</code> the goal is <code>punit \\equiv punit</code> and yet <code>apply equiv.cast</code>throws the following error. <br>\nI got above proof from <code>tidy?</code> but I don't quite understand why we need <code>fsplit</code> and <code>dec_trivial</code> to prove something as simple as  <code>punit \\equiv punit</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pow_half_left_moves'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">punit</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">pow_half</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_half_left_moves</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">equiv.cast</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">307:3: invalid apply tactic, failed to unify</span>\n<span class=\"cm\">  punit ≃ punit</span>\n<span class=\"cm\">with</span>\n<span class=\"cm\">  ?m_1 ≃ ?m_2</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">n : ℕ</span>\n<span class=\"cm\">⊢ punit ≃ punit</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 243254185,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1624115380
    },
    {
        "content": "<p>There should be something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique_equiv_punit\">docs#unique_equiv_punit</a> instead of equiv.cast</p>",
        "id": 243254262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624115511
    },
    {
        "content": "<p>Nice! Thanks</p>",
        "id": 243254399,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1624115677
    },
    {
        "content": "<p>What's the output of <code>set_option pp.universes true</code> before that snippet?</p>",
        "id": 243254620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624116037
    },
    {
        "content": "<p><code> ⊢ punit.{u_1} ≃ punit.{u_2+1} </code></p>",
        "id": 243254708,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1624116222
    },
    {
        "content": "<p>You might just want to put the right universe on the LHS in the lemma statement</p>",
        "id": 243254788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624116330
    },
    {
        "content": "<p>What's the result of <code>#check pow_half_left_moves</code> with that option enabled?</p>",
        "id": 243254913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624116529
    },
    {
        "content": "<p><code> pow_half_left_moves.{u_1} : (pgame.pow_half.{u_1} ?M_1).left_moves = punit.{u_1+1} </code></p>",
        "id": 243254931,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1624116588
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237843.20dyadic.20surreals/near/243254262\">said</a>:</p>\n<blockquote>\n<p>There should be something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique_equiv_punit\">docs#unique_equiv_punit</a> instead of equiv.cast</p>\n</blockquote>\n<p>This worked, btw</p>",
        "id": 243255016,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1624116691
    },
    {
        "content": "<p>What's the real name of that definition I was suggesting?</p>",
        "id": 243255136,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624116881
    },
    {
        "content": "<p>It is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.punit_equiv_punit\">docs#equiv.punit_equiv_punit</a></p>",
        "id": 243255219,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1624116996
    },
    {
        "content": "<p>This theorem's better because <code>pgame.lean</code> uses <code>punit</code> a lot without specifying its universe. So there are a lot of <code>punit</code>s floating around with unspecified universes.</p>",
        "id": 243255234,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1624117037
    },
    {
        "content": "<p>The linter forced me to change <code>lemma</code> to <code>def</code> and the proof is shorter! This is very mysterious to me, why would a <code>def</code> proof be shorter than a <code>lemma</code> proof?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">pow_half_left_moves</span>\n<span class=\"c1\">-- pow_half_left_moves : ∀ {n : ℕ}, (pow_half n).left_moves = punit</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_half_left_moves'</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">punit</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">pow_half</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_half_left_moves</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">equiv.punit_equiv_punit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pow_half_left_moves''</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">punit</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">pow_half</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left_moves</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_half_left_moves</span><span class=\"o\">]</span>\n<span class=\"c1\">-- works!!!</span>\n</code></pre></div>",
        "id": 243301523,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1624193056
    },
    {
        "content": "<p>An equiv is data, so it should be a def. And because it is data, it's not great to use tactics to define it. Instead, you might want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.cast\">docs#equiv.cast</a></p>",
        "id": 243301754,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624193501
    },
    {
        "content": "<p>In this case, what data you get is basically equivalent. But it'll be easier to prove things about the data you constructed if you use existing defs</p>",
        "id": 243301822,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624193572
    },
    {
        "content": "<p>Also, I would make the (n : nat) variable explicit. Otherwise it's hard to conjure up the proper n when you invoke the statement, without using @</p>",
        "id": 243301901,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1624193652
    },
    {
        "content": "<p>Thanks, will do!</p>",
        "id": 243303209,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1624196017
    },
    {
        "content": "<p>Those two definitions are not the same!</p>",
        "id": 243306276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624200767
    },
    {
        "content": "<p>When you use <code>def</code>. It deduces the universe argument to <code>punit</code> from the \"proof\"</p>",
        "id": 243306291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624200794
    },
    {
        "content": "<p>The universe it deduces is not the same as the one in the <code>lemma</code></p>",
        "id": 243306297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624200816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237843.20dyadic.20surreals/near/242074969\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237843.20dyadic.20surreals/near/242073682\">said</a>:</p>\n<blockquote>\n<p>I'll open a quick PR to do that and see what breaks</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7861\">#7861</a></p>\n</blockquote>\n<p>Basically nothing broke, I just took a really long time to fix the easy CI error.</p>",
        "id": 243888649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624610139
    },
    {
        "content": "<p>What would be a good name for this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nsmul_nonneg_of_pos</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_add_comm_monoid</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Also, which file should this belong to? same file as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_add_comm_monoid\">docs#ordered_add_comm_monoid</a> ?<br>\nThanks,</p>",
        "id": 244611480,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1625165801
    },
    {
        "content": "<p><code>nsmul_nonneg_of_pos</code> -- but isn't it true for <code>0 \\le x</code> as well?</p>",
        "id": 244611577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625165854
    },
    {
        "content": "<p>Ooh, you already guessed the name (-;</p>",
        "id": 244611606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625165875
    },
    {
        "content": "<p>Ah right, I'll generalize it to <code>0 \\le x</code></p>",
        "id": 244611696,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1625165905
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 244611701,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1625165909
    },
    {
        "content": "<p>The file defining <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_module\">docs#ordered_module</a> might also be a good place</p>",
        "id": 244614590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625167332
    },
    {
        "content": "<p>Looks like that lemma (and some of the other similar ones) are already in mathlib: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nsmul_pos\">docs#nsmul_pos</a><br>\nI totally did not see this before, probably because it is in the file algebra.group_power.order</p>\n<p>I'll rewrite the relevant code in <code>surreal.lean</code> using these library lemmas.</p>",
        "id": 244615604,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1625167917
    },
    {
        "content": "<p>There's also a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/gsmul_pos\">docs#gsmul_pos</a> but in a separate file :-/</p>",
        "id": 244615765,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1625167989
    },
    {
        "content": "<p>I'll take a closer look at all the files in the folder algebra/group_power</p>",
        "id": 244615899,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1625168050
    },
    {
        "content": "<p>Ah yeah, I think I remember being annoyed by that file when I split it out of a larger file</p>",
        "id": 244617218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625168762
    },
    {
        "content": "<p>The import graph is messy there</p>",
        "id": 244617263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625168768
    },
    {
        "content": "<p>I think <code>data.int.basic</code> imports the file containing <code>nsmul_pos</code>, meaning <code>gsmul_pos</code> can't go there yet</p>",
        "id": 244617691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625169034
    },
    {
        "content": "<p>Hi, Can someone take a look at this PR? It has been stable and hasn't had any changes for a while.<br>\nThanks,</p>",
        "id": 245694369,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626100472
    },
    {
        "content": "<p>What's the correct file to import to make the following proof work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 245751701,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626124839
    },
    {
        "content": "<p>I need the import to be minimal as this is needed for proving <code>int.pow_right_injective</code>.</p>",
        "id": 245751830,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626124912
    },
    {
        "content": "<p>I managed to get it to work with <code>import algebra.group_power.lemmas</code> but not with <code>import algebra.group_power.basic</code>.</p>",
        "id": 245753364,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626125662
    },
    {
        "content": "<p>Not sure if this is the optimal import though.</p>",
        "id": 245753382,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626125673
    },
    {
        "content": "<p><code>assumption_mod_cast</code> might solve this goal (this is unrelated to the import question)</p>",
        "id": 245756399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626127580
    },
    {
        "content": "<p>Thanks, this is working when <code>norm_cast, assumption</code> also works.</p>\n<p>Actually, I found the <code>lemma</code> that <code>norm_cast</code> needs to solve this problem: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_pow\">docs#nat.cast_pow</a></p>",
        "id": 245758364,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626128909
    },
    {
        "content": "<p>and also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.coe_nat_pow\">docs#int.coe_nat_pow</a></p>",
        "id": 245758396,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626128959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237843.20dyadic.20surreals/near/245694369\">said</a>:</p>\n<blockquote>\n<p>Hi, Can someone take a look at this PR? It has been stable and hasn't had any changes for a while.<br>\nThanks,</p>\n</blockquote>\n<p>I made a few suggestions. Mostly requests to move content to earlier files. You may even consider adding a <code>surreal/dyadic.lean</code> or <code>game/dyadic.lean</code> file, particularly if later you or someone else will do dyadic dedekind cuts.</p>",
        "id": 246299181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626489003
    },
    {
        "content": "<p>Thanks! I just implemented the suggested changes.</p>\n<p>I'm planning on refactoring <code>surreal.lean</code> into <code>surreal/basic.lean</code> and <code>surreal/dyadic.lean</code> in a short separate PR<br>\nThis PR has already become too complex :P</p>",
        "id": 246344926,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626556405
    },
    {
        "content": "<p>But isn't this all new material being added in this PR? It seems simpler to do the refactor as part of this PR. I don't particularly object if you want to defer it, I just don't see why it would be easier.</p>",
        "id": 246360516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626585090
    },
    {
        "content": "<p>Ok, I'll refactor it here itself.</p>",
        "id": 246377063,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626613945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span> sorry this has taken a while to review. I'm curious -- are you planning on defining the multiplication on surreals? It seems a bit strange to have the map from Z[1/2] to the surreals without being able to say that it is multiplicative.</p>",
        "id": 252572349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631164655
    },
    {
        "content": "<p>No worries, I have been quite busy over the summer myself.</p>",
        "id": 252572815,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631165062
    },
    {
        "content": "<p>I am not able to define associativity of multiplication for surreals.</p>",
        "id": 252572940,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631165155
    },
    {
        "content": "<p>The proof gets too big, you essentially have to prove 3-4 theorems simultaneously for the recursion to work.</p>",
        "id": 252573026,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631165196
    },
    {
        "content": "<p>As of now, I have some additive results about the surreal map and it might even be enough to deal with real numbers.</p>",
        "id": 252573070,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631165247
    },
    {
        "content": "<p>Oh wait, we only have multiplication on <code>pgame</code> not on <code>surreals</code>.</p>",
        "id": 252573182,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631165348
    },
    {
        "content": "<p>Would it be better to add these results to the <code>archive</code> folder?</p>",
        "id": 252573262,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631165407
    },
    {
        "content": "<p>I'm really hoping to do some Cauchy sequences and get to the map <code>real \\to surreal</code> and show that it is an ordered abelian group embedding.</p>",
        "id": 252573511,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631165651
    },
    {
        "content": "<p>Ah, okay, I remember re: the multiplication now.</p>",
        "id": 252575644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631167611
    },
    {
        "content": "<p>I had trouble even understanding what we were meant to be inducting on.</p>",
        "id": 252575682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631167641
    },
    {
        "content": "<p>Do you still have a link to that paper that had a detailed proof? Perhaps we should stick that in a comment somewhere in mathlib.</p>",
        "id": 252575766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631167694
    },
    {
        "content": "<p>Yups, these are the notes: <a href=\"http://www.cs.cmu.edu/afs/cs/academic/class/15859-s05/www/lecture-notes/comb-games-notes.pdf\">http://www.cs.cmu.edu/afs/cs/academic/class/15859-s05/www/lecture-notes/comb-games-notes.pdf</a><br>\nAnd the result is Theorem 3.8</p>",
        "id": 252926369,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631384327
    },
    {
        "content": "<p>I'll add a comment about this in the doc string</p>",
        "id": 252926393,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631384375
    },
    {
        "content": "<p>Okay, I think after that I'll be happy to merge. Ping me here if I. don't notice on github. :-)</p>",
        "id": 252947509,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1631408733
    },
    {
        "content": "<p>Awesome!</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I added the reference in <code>docs/references.bib</code> and added a paragraph at the beginning of <code>set_theory/surreal/basic.lean</code> under the heading \"Multiplication of surreal numbers\".</p>",
        "id": 253030949,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1631501988
    }
]