[
    {
        "content": "<p>There are two design questions about semistandard Young tableaux holding up this PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16195\">#16195</a>, which is otherwise mostly finished. I would benefit from expert advice on this; the PR has been sitting untouched for a bit over a week. See discussion <a href=\"https://github.com/leanprover-community/mathlib/pull/16195#discussion_r951897372\">here</a>.</p>\n<p><strong>The first question</strong> is about how to define the entries of the tableau. For <code>{μ : young_diagram} (T : ssyt μ)</code>, the <code>T.entry</code> function could be defined in at least five ways:</p>\n<ol>\n<li>A function <code>ℕ → ℕ → ℕ</code>, which is asserted to be zero outside <code>μ.cells</code>.</li>\n<li>A function <code>ℕ → ℕ → ℕ</code>, quotienting by identifying two <code>T</code>'s that agree on <code>μ.cells</code>.</li>\n<li>A function <code>ℕ × ℕ → ℕ</code>, which is asserted to be zero outside <code>μ.cells</code>.</li>\n<li>A function <code>ℕ × ℕ → ℕ</code>, quotienting by identifying two <code>T</code>'s that agree on <code>μ.cells</code>.</li>\n<li>A function <code>μ.cells → ℕ</code>.</li>\n</ol>\n<p>Option 1 is the implementation I've used, not necessarily for great reasons (feeling intuitively like the <code>i</code> and <code>j</code> often arise separately rather than as a pair; not being familiar with quotients in Lean).</p>",
        "id": 296876003,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1662143857
    },
    {
        "content": "<p><strong>The second question</strong> is about whether to bundle in the data of the underlying <code>young_diagram</code> into the definition of <code>ssyt</code>.</p>\n<ol>\n<li><code>structure ssyt (μ : young_diagram)</code></li>\n<li><code>structure ssyt</code> with <code>(shape : young_diagram)</code> as a field</li>\n<li>No <code>structure</code> at all, just a proposition <code>def is_ssyt (μ : young_diagram) (entry : ℕ → ℕ → ℕ) : Prop</code>.</li>\n</ol>\n<p>Option 1 is my current implementation, not necessarily for great reasons (it's convenient for some things, e.g. having numerous <code>T</code>'s intrinsically of the same shape) but bad for others (dependent type stuff, like with <code>fin</code>).</p>",
        "id": 296876417,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1662144037
    },
    {
        "content": "<p>My instinct for Q1 would be to do what you did, because I am guessing that in practice the thing you'll have handy to input to the function is two natural numbers and most of the time you won't even care about the fact that it's zero outside the cells because you'll only be evaluating it in the cells. Quotients add unnecessary complexity, you'll just be <code>lift</code>ing everywhere. My instinct for Q2 would also be to do what you did. I wouldn't take my word too seriously on implementation issues but at least in my mind your design choices seem reasonable.</p>",
        "id": 296886264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1662148362
    },
    {
        "content": "<p>Your guesses are largely correct regarding what I’ve done so far. That said I’ve run into a couple of awkward dependent type issues when proving that two functions (RSK and its inverse) are inverse functions, because the shape changes during the algorithm, so it’s not instantly true that <code>f_inv (f T)</code> has the same shape as <code>T</code>.</p>",
        "id": 296891235,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1662150635
    },
    {
        "content": "<p>That's probably surmountable though.</p>",
        "id": 296891335,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1662150705
    }
]