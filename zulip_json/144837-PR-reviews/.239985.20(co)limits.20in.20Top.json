[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> Here is an example illustrating  what I had in mind for this PR:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.category.Top.limits</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Top.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Top.explicit_binary_fan</span> <span class=\"o\">:</span> <span class=\"n\">binary_fan</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">binary_fan.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">(</span><span class=\"n\">Top.of</span> <span class=\"bp\">$</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">prod.fst</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">prod.snd</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Top.is_limit_explicit_binary_fan</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">Top.explicit_binary_fan</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">binary_fan</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">S.fst</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">S.snd</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">fac'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">tidy</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">uniq'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">walking_pair.left</span><span class=\"o\">,</span>\n      <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n     <span class=\"o\">{</span> <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">walking_pair.right</span><span class=\"o\">,</span>\n      <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⨯</span> <span class=\"n\">Y</span> <span class=\"bp\">≅</span> <span class=\"n\">Top.of</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">limit.is_limit</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cone_point_unique_up_to_iso</span> <span class=\"o\">(</span><span class=\"n\">Top.is_limit_explicit_binary_fan</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">⨯</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">≅</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">C₁</span> <span class=\"o\">:=</span> <span class=\"n\">is_limit_of_preserves</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">limit.is_limit</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)),</span>\n    <span class=\"n\">C₂</span> <span class=\"o\">:=</span> <span class=\"n\">is_limit_of_preserves</span> <span class=\"o\">(</span><span class=\"n\">forget</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X.is_limit_explicit_binary_fan</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"n\">C₁.cone_point_unique_up_to_iso</span> <span class=\"n\">C₂</span>\n</code></pre></div>",
        "id": 260362194,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636082395
    },
    {
        "content": "<p>The main point is that you get the isomorphism of objects in <code>Top</code>, and you can then deduce the isomorphism for <code>Type</code>s by using the fact that the forgetful functor preserves limits.</p>",
        "id": 260362260,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636082441
    },
    {
        "content": "<p>Thanks for clarifying. I think I know what you mean now.</p>",
        "id": 260362625,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1636082912
    }
]