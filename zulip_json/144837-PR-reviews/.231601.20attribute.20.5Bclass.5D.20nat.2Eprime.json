[
    {
        "content": "<p>Not a PR, but numbered from the same, er, numberspace?<br>\nI created issue <a href=\"https://github.com/leanprover-community/mathlib/issues/1601\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1601\">#1601</a> about the awkward side effects of having <code>attribute [class] nat.prime</code> in a different module than the one that defines <code>nat.prime</code>.</p>",
        "id": 178911792,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571879134
    },
    {
        "content": "<p>You can revert a class using <code>unfreezeI</code></p>",
        "id": 178912168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571879529
    },
    {
        "content": "<p>but I agree that having <code>attribute [class] nat.prime</code> globally in a file other than <code>data.nat.prime</code> is liable to cause problems</p>",
        "id": 178912189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571879576
    },
    {
        "content": "<p>It should just be on the definition itself</p>",
        "id": 178912200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571879588
    },
    {
        "content": "<p>For <code>nat.prime</code> in particular I think it is probably viable to treat it as a type class, particularly as there aren't a whole lot of theorems whose conclusion is that a number is prime, are there?</p>",
        "id": 178912212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571879620
    },
    {
        "content": "<p>meaning that the \"type class trap\" is not that much of a hindrance</p>",
        "id": 178912270,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571879664
    },
    {
        "content": "<p>having to insert facts into the instance cache with <code>haveI</code>, etc.</p>",
        "id": 178912284,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571879678
    },
    {
        "content": "<p>I remember when we first talked about this, the idea was to make <code>nat.prime</code> a \"weak typeclass\" in the sense that it has the <code>class</code> attribute but no instances</p>",
        "id": 178912307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571879711
    },
    {
        "content": "<p>so it's only helping to get things out of the context</p>",
        "id": 178912323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571879750
    },
    {
        "content": "<p>Maybe an <code>instance (p : primes) : p.prime</code></p>",
        "id": 178912401,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571879823
    },
    {
        "content": "<p>so that you can express conclusions of the form \"there exists a prime p such that ...\" and unpack them without needing <code>resetI</code>?</p>",
        "id": 178912420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571879854
    },
    {
        "content": "<p>Haha, can you actually write the instance type as <code>p.prime</code>? I don't think I've ever seen it written that way</p>",
        "id": 178912469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571879883
    },
    {
        "content": "<p>oh, that wouldn't work anyways. but <code>instance primes.prime (p : primes) : (p : ℕ).prime</code> works</p>",
        "id": 178912512,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571879970
    },
    {
        "content": "<p>Also <code>ring_char K</code> would want to be an instance, whenever <code>K</code> is a finite field.</p>",
        "id": 178917776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571887958
    },
    {
        "content": "<p>I reposted my crazy idea at <a href=\"https://github.com/leanprover-community/mathlib/issues/1601\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1601\">#1601</a>, where I propose to ditch this class, and just use bundled primes as argument to <code>Z_p</code> and <code>Q_p</code> and <code>zmod</code> (so we ditch <code>zmodp</code>)</p>",
        "id": 178917788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571888020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you see any obvious disadvantages to my proposal?</p>",
        "id": 178956314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571926656
    },
    {
        "content": "<p>Otoh, if we make <code>nat.prime</code> a class, should we do it properly? As in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 178956443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571926711
    },
    {
        "content": "<p>Because I remember having trouble applying a theorem that wanted a <code>[prime p]</code>, and I couldn't <code>haveI : prime p := bla</code>. In this case I think <code>p</code> was <code>ring_char K</code> for some finite field.</p>",
        "id": 178956574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571926782
    },
    {
        "content": "<p>The error message seemed to suggest that this was because <code>prime</code> was not a proper class, but only a <code>def</code> tagged as a class.</p>",
        "id": 178956923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571926950
    },
    {
        "content": "<p>I started writing a response on the issue last night, but apparently I fell asleep first</p>",
        "id": 178956996,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571926994
    },
    {
        "content": "<p>I think this would basically work, but one disadvantage would be that the coercion from <code>primes</code> to <code>nat</code> might not fire as often as you like. For example, if <code>p : primes</code>, then <code>p - 1</code> would only work if the expected type was already known (say <code>nat</code> or <code>int</code>).</p>",
        "id": 178957135,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571927063
    },
    {
        "content": "<p>That might not be a big deal in practice, I'm not sure</p>",
        "id": 178957157,
        "sender_full_name": "Reid Barton",
        "timestamp": 1571927081
    },
    {
        "content": "<p>That's true.</p>",
        "id": 178957380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571927206
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1648\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1648\">#1648</a> is my first attempt at \"class\"ifying <code>nat.prime</code>.</p>",
        "id": 179916451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572947666
    }
]