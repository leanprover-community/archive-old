[
    {
        "content": "<p>Can an analysis maintainer please confirm that this should be kicked on the merge queue?</p>",
        "id": 207489190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597899966
    },
    {
        "content": "<p>In reviewing this PR, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/3746#issuecomment-677504939\">says</a>,</p>\n<blockquote>\n<p>I don't understand at all why you have this assumption of non-vanishing cosine everywhere. Why not</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">has_deriv_at_tan</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">pi</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">tan</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">cos_ne_zero_iff</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_cos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">has_deriv_at_real_of_complex</span> <span class=\"o\">(</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">has_deriv_at_tan</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">of_real_re</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"o\">((</span><span class=\"n\">cos</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Even better would be to take the time to do <code>cos_ne_zero_iff</code> for complex cosine as well, and have this assumption in the complex version as well. If you really have an assumption about cos(x) then you can still use <code>cos_ne_zero_iff</code> before using it, but I think the lemma about tan should have the natural statement.</p>\n</blockquote>\n<p>Actually <span class=\"user-mention\" data-user-id=\"314430\">@Benjamin Davidson</span> (the author of the PR, and my student) had previously <a href=\"#narrow/stream/113489-new-members/topic/definition.20of.20tan\">asked</a> about doing it this way -- but <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> replied there with advice against it.</p>\n<p>I have no strong preference, and I don't think Ben does either.  Patrick, Kevin, can you come to an agreement?</p>",
        "id": 208405818,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598658015
    },
    {
        "content": "<p>Oh I don't have a clue about these things. Just do what Patrick says</p>",
        "id": 208425397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598692936
    },
    {
        "content": "<p>Heather and Benjamin, I'm really sorry about this mess. I wasn't aware of this previous discussion. I still prefer my version.</p>",
        "id": 208425581,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598693318
    },
    {
        "content": "<p>That's alright, Patrick. Heather's post captures my thoughts on this, too; based off Kevin's response to my previous question we had decided that the more user-friendly option would be to use <code>cos x ≠ 0</code> and that <code>cos_ne_zero_iff</code> can be used to convert <code>∀ k : ℤ, x ≠ (2 * k + 1) * pi / 2</code> otherwise. However, I agree that outside of that concern using the latter assumption would be more ideal - hence my original inquiry - and have made the changes you suggested in the lemmas in the <code>real</code> namespace (I will push it to the PR shortly) .</p>\n<p>To make the same changes in the lemmas in the <code>complex</code> namespace would prove significantly trickier. In order to prove <code>cos_ne_zero_iff</code> for complex cosine as you suggest, I would need to write a complex version of <code>cos_eq_zero_iff</code>, which, in turn, would require a complex version of <code>sin_eq_zero_iff</code>. I can prove <code>complex.sin_eq_zero_iff</code> using the formula <code>sin (x+i*y) = sin x * cosh y + i * cos x * sinh y</code> but  that formula does not seem to exist in mathlib. As such, I am going to leave the  lemmas in the <code>complex</code> namespace unchanged for now, and perhaps at some point I can come back and try to prove all that I've just listed in order to accomplish that as well.</p>\n<p>Sounds good?</p>",
        "id": 208497124,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1598810796
    },
    {
        "content": "<p>I'm not familiar with this corner of mathlib but, on paper, I think you're making it much more complicated than it needs to be.</p>",
        "id": 208497729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598811605
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><msup><mi>e</mi><mrow><mi>i</mi><mi>z</mi></mrow></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>i</mi><mi>z</mi></mrow></msup><mo>=</mo><mn>0</mn><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><msup><mi>e</mi><mrow><mn>2</mn><mi>i</mi><mi>z</mi></mrow></msup><mo>=</mo><msup><mi>e</mi><mrow><mi>i</mi><mi>π</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\cos(z) = 0 \\iff e^{iz} + e^{-iz} = 0 \\iff e^{2iz} = e^{i\\pi}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">cos</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66844em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.907994em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66844em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span></span></span></span></span></span></span></span>. This I very much hope to be easy in mathlib. Then the question is whether we know in mathlib that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mi>z</mi></msup><mo>=</mo><msup><mi>e</mi><mi>w</mi></msup><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>z</mi><mo>−</mo><mi>w</mi><mo>∈</mo><mn>2</mn><mi>i</mi><mi>π</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">e^z = e^w \\iff z - w \\in 2i\\pi\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.688392em;vertical-align:-0.024em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>. If yes then you get <code>complex.cos_eq_zero_iff</code> easily.</p>",
        "id": 208497839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598811797
    },
    {
        "content": "<p>I think that this extension to complexes looks like a cool little project which should be done at some point, but could definitely be done in a later PR. I think that <code>sin (x+i*y) = sin x * cosh y + i * cos x * sinh y</code> (and an analogous formula for <code>cos</code>) would be natural additions to mathlib. I think <code>i</code> is usually called <code>I</code>?</p>",
        "id": 208497902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598811867
    },
    {
        "content": "<p>I say you not should try to deduce <code>complex.cos_eq_zero_iff</code> from its real counterpart, but the other way around.</p>",
        "id": 208497919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598811924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233746.20deriv.20tan/near/208497902\">said</a>:</p>\n<blockquote>\n<p>I think <code>i</code> is usually called <code>I</code>?</p>\n</blockquote>\n<p>You should ask the guy who PRd <code>complex</code> to mathlib... he will know.</p>",
        "id": 208498037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598812106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233746.20deriv.20tan/near/208497919\">said</a>:</p>\n<blockquote>\n<p>I say you not should try to deduce <code>complex.cos_eq_zero_iff</code> from its real counterpart, but the other way around.</p>\n</blockquote>\n<p>Right, my idea was to deduce the <code>complex</code> version independently (tracing back to the formula I mentioned) and then modify the <code>real</code> version to rely on the <code>complex</code> one.</p>",
        "id": 208498224,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1598812390
    },
    {
        "content": "<p>What's the point of this formula compared to the fundamental theorem about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><mi>z</mi></msup><mo>=</mo><msup><mi>e</mi><mi>w</mi></msup><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">e^z = e^w \\iff \\cdots </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.04398em;\">z</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.688392em;vertical-align:-0.024em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span>?</p>",
        "id": 208498290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598812518
    },
    {
        "content": "<p>And we have it! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.exp_eq_exp_iff_exists_int\">docs#complex.exp_eq_exp_iff_exists_int</a></p>",
        "id": 208498352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598812594
    },
    {
        "content": "<p>No specific point, that's just what I came up with in trying to prove this. I will gladly use your method (if I can figure out how).</p>",
        "id": 208498435,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1598812761
    },
    {
        "content": "<p>Do you need more details?</p>",
        "id": 208498442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598812776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233746.20deriv.20tan/near/208497902\">said</a>:</p>\n<blockquote>\n<p>I think that this extension to complexes looks like a cool little project which should be done at some point, but could definitely be done in a later PR. I think that <code>sin (x+i*y) = sin x * cosh y + i * cos x * sinh y</code> (and an analogous formula for <code>cos</code>) would be natural additions to mathlib. I think <code>i</code> is usually called <code>I</code>?</p>\n</blockquote>\n<p>So, regardless of how I manage to prove the <code>complex</code> part, is it ok to go ahead with merging my PR and save the <code>complex</code> part for a later time? Once I make this push, that is.</p>",
        "id": 208498502,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1598812874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233746.20deriv.20tan/near/208498442\">said</a>:</p>\n<blockquote>\n<p>Do you need more details?</p>\n</blockquote>\n<p>I'd like to try to work it out for myself, but I will definitely ask you if I'm not able to. Thank you!</p>",
        "id": 208498515,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1598812921
    },
    {
        "content": "<p>You can have one or two PRs, as you wish, but I think you'll save work by having only one.</p>",
        "id": 208498576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598813000
    },
    {
        "content": "<p>Because the second one would modify stuff added by the first one.</p>",
        "id": 208498583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598813016
    },
    {
        "content": "<p>Okay. I'll give it a shot. If I find it difficult I'll save it for another PR.</p>",
        "id": 208498803,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1598813338
    },
    {
        "content": "<p>I am ready to commit my changes to this PR, but I wanted to ask for advice on where in <code>analysis.special_functions_trigonometric</code> I should put everything since <code>pi</code> is not yet defined at the points in the file where I had originally placed my <code>tan</code> lemmas. What do you suggest? <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 208714921,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1598978555
    },
    {
        "content": "<p>It seems that my changes in recent PRs from <code>∀ k, ...</code> to <code>cos x ≠ 0</code> go against <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> 's advice. Patrick, why do you prefer <code>∀ k, ...</code>? For me <code>cos x = 0</code> / <code>cos x ≠ 0</code> looks more natural, and we have lemmas to switch between these two forms.</p>",
        "id": 220502676,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608439437
    },
    {
        "content": "<p>In the real world we would clearly describe the zeros of cos instead of assuming <code>cos = 0</code>. But if you observed that the weird version is convenient for formalization then it's not a problem.</p>",
        "id": 220528514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1608484993
    }
]