[
    {
        "content": "<p>I like it and and would be fine with merging it, but I haven't been following the discussion.  Is this what people want?<br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> requested this AFAICT.</p>",
        "id": 204661344,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595422678
    },
    {
        "content": "<p>Since <code>p : X \\times Y</code> is not defeq to <code>(p.1, p.2)</code>, can we make</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)}</span>\n</code></pre></div>\n\n\n<p>syntactic sugar for </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"err\">\\</span><span class=\"n\">times</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)}</span>\n</code></pre></div>\n\n\n<p>because the latter has better defeq behaviour...</p>",
        "id": 204662421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595423235
    },
    {
        "content": "<p>Making the comma have special behaviour should be possible and in fact it is already a special case in the parser. The rewriting of <code>x</code> to <code>p.1</code> and <code>y</code> to <code>p.2</code> is more complicated though, and it would get even worse if we also want to support <code>{(x, (y, z), w) | ...} : set (nat × (nat × nat) × nat)</code></p>",
        "id": 204664242,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595424297
    },
    {
        "content": "<p>Aha... (maybe it's easier to make <code>p</code> be defeq to <code>(p.1, p.2)</code> <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> )</p>",
        "id": 204664587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595424483
    },
    {
        "content": "<p>Why would it get worse? <code>rintro</code> can do it?</p>",
        "id": 204679453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595430922
    },
    {
        "content": "<p>We've had lots of trouble with such definitions right? Wasn't <code>uncurry</code> broken (maybe it still is?)</p>",
        "id": 204679927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595431047
    },
    {
        "content": "<p>It means you can't apply your predicate to a pair that is not of the form <code>(x,y)</code> and hope that it works. You'll have to manually do cases all the time.</p>",
        "id": 204680053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595431096
    },
    {
        "content": "<p>I mean the rewriting in the parser would be difficult to implement correctly. The outcome would be easier to use indeed.</p>",
        "id": 204681616,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595431805
    },
    {
        "content": "<p>This is causing trouble <a href=\"https://github.com/leanprover-community/mathlib/pull/3610\">here</a>. The changes are all fixable but the fixes feel like regressions. I'm wondering if we should reconsider the syntax here.</p>",
        "id": 205251230,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595950335
    },
    {
        "content": "<p>Why is <code>{(a, b)}</code> not working anymore?</p>",
        "id": 205251577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595950512
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/415\">lean#415</a></p>",
        "id": 205251918,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595950680
    },
    {
        "content": "<p>Oops, I should have realized this.</p>",
        "id": 205291172,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595970594
    },
    {
        "content": "<p>A quick fix (the syntax of the code is correct but otherwise untested) is to change the lines changed in <a href=\"https://github.com/leanprover-community/mathlib/issues/415\">#415</a> into the following instead:</p>\n<div class=\"codehilite\"><pre><span></span><code>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">curr_is_token</span><span class=\"p\">(</span><span class=\"n\">get_bar_tk</span><span class=\"p\">()))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">parse_set_replacement</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">curr_is_token</span><span class=\"p\">(</span><span class=\"n\">get_comma_tk</span><span class=\"p\">())</span> <span class=\"o\">||</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">curr_is_token</span><span class=\"p\">(</span><span class=\"n\">get_rcurly_tk</span><span class=\"p\">()))</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">parse_fin_set</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">patexpr_to_expr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">parser_error_or_expr</span><span class=\"p\">({</span><span class=\"s\">&quot;invalid &#39;{&#39; expression, &#39;,&#39;, &#39;}&#39;, or `|` expected&quot;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">pos</span><span class=\"p\">()});</span>\n        <span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>We need to accept a <code>,</code> as well as a <code>}</code> to parse it as a singleton + insert (as in lines 247 onwards) fixing <a href=\"https://github.com/leanprover-community/lean/issues/418\">lean#418</a>. We also need to call <code>patexpr_to_expr</code> to ensure all variables are bound (because the syntax has binders after the expression, we cannot put anything in scope until we have reached the closing bracket).</p>",
        "id": 205294054,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595972448
    },
    {
        "content": "<p>I assume calling <code>patexpr_to_expr</code> will fix <a href=\"https://github.com/leanprover-community/lean/issues/419\">lean#419</a>, although I would have expected the error to look more like \"unbound variable <code>α</code>\".</p>",
        "id": 205294288,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595972613
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>! <a href=\"https://github.com/leanprover-community/lean/issues/419\">lean#419</a></p>",
        "id": 205329708,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1596011204
    }
]