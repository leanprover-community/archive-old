[
    {
        "content": "<p>One <a href=\"https://github.com/leanprover-community/mathlib/pull/5695#discussion_r554618980\">suggestion</a> on this PR is that we add a lemma saying a function defined by dite is injective if the two parts are injective and the images are disjoint. I have the lemma/proof, but I'm not sure where it would go or what it should be named:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">inj_of_dite_disjoint_inj</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">im_disj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">x'</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"n\">x'</span><span class=\"o\">},</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">≠</span> <span class=\"n\">f'</span> <span class=\"o\">⟨</span><span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">hx'</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">f'</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">x₁</span> <span class=\"n\">x₂</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">dite</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">dite</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">split_ifs</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">injection</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">im_disj</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">im_disj</span> <span class=\"n\">h.symm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">injection</span> <span class=\"o\">(</span><span class=\"n\">hf'</span> <span class=\"n\">h</span><span class=\"o\">),</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 223059246,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1610912292
    },
    {
        "content": "<p>I wonder if it would be better for <code>f</code> to take <code>a</code> and <code>p a</code> separately - I think the elaborator would be able to infer your subtype version from that</p>",
        "id": 223067097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610922500
    },
    {
        "content": "<p>Do you mean <code>f : \\Pi a, p a -&gt; β</code>? If so, I doubt the elaborator would infer this version from that</p>",
        "id": 223068204,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1610924298
    },
    {
        "content": "<p>Yes, that is what I mean</p>",
        "id": 223069052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610925537
    },
    {
        "content": "<p>Oh, you can't pass such a function to <code>injective</code> meaningfully</p>",
        "id": 223069117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610925610
    },
    {
        "content": "<p>That too</p>",
        "id": 223069118,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1610925614
    },
    {
        "content": "<p>Or rather, it becomes something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.inj_on\">docs#set.inj_on</a></p>",
        "id": 223069150,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610925706
    },
    {
        "content": "<p>I would like some feedback on the lemma name and where it should go, I'm currently sort of stuck on that</p>",
        "id": 223455238,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1611188078
    },
    {
        "content": "<p>and it's holding me back from doing other stuff</p>",
        "id": 223455255,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1611188100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> I think you can call this <code>dite_injective</code> and put it somewhere not to far from the definition of injectivity.</p>",
        "id": 223469712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611204278
    },
    {
        "content": "<p>Looking into it further, the definition of injectivity is part of the .elan/toolchains, would making a PR there involve the same process as regular PRs to mathlib?</p>",
        "id": 223797213,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1611466016
    },
    {
        "content": "<p>I think if anything we're trying to move stuff out of core Lean into mathlib. Maybe <code>logic.function.basic</code> would be a good place?</p>",
        "id": 223797352,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611466223
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/leanprover-community/mathlib/pull/5866\">#5866</a> for this</p>",
        "id": 223798238,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1611467748
    }
]