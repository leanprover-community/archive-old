[
    {
        "content": "<p>Would someone who knows about how Lean processes <code>{ ..X, ..Y }</code> constructions please take a quick look at <a href=\"https://github.com/leanprover-community/mathlib/issues/4684\">#4684</a>? There is a confusing case there where several fields should be picked up by <code>..(by apply_instance : comm_ring ℂ)</code>, but aren't. <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> has found a strange work-around. (And the PR itself works around it just by writing the fields again explicitly.)</p>\n<p>It is not particularly high priority --- and if the answer is just \"this is a quirk in Lean 3 that is not worth addressing\" that is just fine!</p>",
        "id": 225486839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612735904
    },
    {
        "content": "<p>This PR puts an <code>ordered_comm_ring</code> instance on the complex numbers. I just remembered that there was <a href=\"#narrow/stream/116395-maths/topic/Definition.20of.20ordered.20rings\">some discussion a while back</a> about whether we should change our definition of <code>ordered_ring</code> to exclude this sort of thing. (The recent <a href=\"#narrow/stream/113489-new-members/topic/canonically_ordered.20pathology\">\"canonically ordered pathology\"</a> thread finds a separate issue with <code>ordered_semiring</code>, I think.) I don't think the issues brought up in those threads need to be addressed before this PR gets merged, but I figured I'd point them out here, in case <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> had any opinions on these classes.</p>",
        "id": 225487333,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612736600
    },
    {
        "content": "<p>I didn't think that discussion would have ruled this out. Certainly ordered rings should be allowed to use only a partial order --- the fundamental example is the order structure on <code>B(H)</code> (bounded operators on a hilbert space), and in fact this example is a special case of that.</p>\n<p>That discussion was about a distinction between positivity and non-negativity. I agree that the change proposed there should be made, and don't think it should affect this PR.</p>",
        "id": 225487470,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612736791
    },
    {
        "content": "<p>Oh, right. Sorry about that, I misremembered.</p>",
        "id": 225487873,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612737300
    },
    {
        "content": "<p>Yes the thread with me and Damiano getting excited is all about what happens if you drop subtraction, so you can't deduce a+c&lt;=b+c -&gt; a&lt;=b from its converse</p>",
        "id": 225488974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612738898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.234684/near/225486839\">said</a>:</p>\n<blockquote>\n<p>Would someone who knows about how Lean processes <code>{ ..X, ..Y }</code> constructions please take a quick look at <a href=\"https://github.com/leanprover-community/mathlib/issues/4684\">#4684</a>? There is a confusing case there where several fields should be picked up by <code>..(by apply_instance : comm_ring ℂ)</code>, but aren't. <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> has found a strange work-around. (And the PR itself works around it just by writing the fields again explicitly.)</p>\n<p>It is not particularly high priority --- and if the answer is just \"this is a quirk in Lean 3 that is not worth addressing\" that is just fine!</p>\n</blockquote>\n<p>cc: <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 225947654,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613017605
    },
    {
        "content": "<p>wait, what? <code>complex</code> lacks a less equal operator on purpose</p>",
        "id": 225951556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613023011
    },
    {
        "content": "<p>Well, I'm willing to trust Scott that this one is useful. Do you think the instances should be in a locale?</p>",
        "id": 225951962,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613023546
    },
    {
        "content": "<p>You can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">add_cancel_monoid</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>to solve the issue in the PR. The reason is because <code>comm_ring</code> doesn't actually have <code>zero_add</code> et al as fields, they are derived as lemmas</p>",
        "id": 225951963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613023547
    },
    {
        "content": "<p>Is there a reason to prefer that over what I suggested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"c1\">-- comm_semiring and even mul_zero_class work too!</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">add_left_cancel_semigroup</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">:</span> <span class=\"n\">add_right_cancel_semigroup</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>or just filling in the fields as Scott did?</p>",
        "id": 225952064,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613023679
    },
    {
        "content": "<p>it's one fewer class</p>",
        "id": 225952115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613023714
    },
    {
        "content": "<p>Oh right, yeah, I forgot about the ones at the end.</p>",
        "id": 225952132,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1613023752
    },
    {
        "content": "<p>I assume you still have <code>partial_order</code> and <code>comm_ring</code> in addition to those three</p>",
        "id": 225952134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613023752
    },
    {
        "content": "<p>I think it's marginally preferable to use <code>..s</code> instead of rewriting the fields, although I recognize that there are a handful of edge cases where you have to write the fields</p>",
        "id": 225952207,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613023816
    },
    {
        "content": "<p>Regarding the locale question, I think it should go to a poll; I'm curious about how the mathematicians will react to an order on <code>complex</code>, without knowing in advance what its definition is</p>",
        "id": 225952296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613023931
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Poll.3A.20partial.20order.20on.20complex.20numbers.20in.20mathlib\">#general &gt; Poll: partial order on complex numbers in mathlib</a></p>",
        "id": 225952669,
        "sender_full_name": "Notification Bot",
        "timestamp": 1613024443
    }
]