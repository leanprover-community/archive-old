[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span>, what's your plan to state that a space is locally convex? Because here you put everything on a new type synonym.</p>",
        "id": 268965371,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1642868573
    },
    {
        "content": "<p>something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_locally_convex</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_ring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">locally_convex</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">‚àà</span> <span class=\"bp\">ùìù</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"n\">V</span> <span class=\"bp\">‚äÇ</span> <span class=\"n\">U</span> <span class=\"bp\">‚àß</span> <span class=\"n\">convex</span> <span class=\"bp\">ùïú</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 268982733,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1642891164
    },
    {
        "content": "<p>(it is not the correct thing, but suffices for <code>topological_add_group</code>)</p>",
        "id": 268982835,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1642891297
    },
    {
        "content": "<p>And do you think there's any point to <code>with_seminorms</code> vs dumping the new toppological space onto <code>E</code> itself?</p>",
        "id": 269005530,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1642926613
    },
    {
        "content": "<p>how would you then state that topologies induced by different families of seminorms are equal?</p>",
        "id": 269012750,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1642937385
    },
    {
        "content": "<p>(plus <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> suggested doing it this way)</p>",
        "id": 269012815,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1642937468
    },
    {
        "content": "<p>Depending on how you want to use it, a relation on families of seminorms that returns whether they generate the same thing could do it. You might also want to have a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_topology\">docs#order_topology</a> as an example of a Prop-valued mixin which states that a topology comes from a specific construction.</p>",
        "id": 269013982,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1642939206
    },
    {
        "content": "<p>If you're going to have different families of seminorms on the same space, then you should use <code>with_seminorms</code>. If every space will have a \"canonical\" family of seminorms, then you should use a typeclass.</p>",
        "id": 269020669,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642948221
    },
    {
        "content": "<p>If sometimes you'll want to equip the original space with the topological space structure induced by a family of seminorms, you always can use <code>instance : topological_space E := topological_space.coinduced with_seminorms.name_for_the_identity_map_to_E</code></p>",
        "id": 269020902,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642948508
    },
    {
        "content": "<p>I am not an expert in this area, but the examples of Frechet spaces which show up in the p-adic Langlands program are topological vector spaces whose topology can be defined by a countable family of seminorms, but the seminorms are not regarded as part of the structure.</p>",
        "id": 269021757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642949516
    },
    {
        "content": "<p>We use <code>[metric_space X]</code> in many theorems that work in a metrizable topological space.</p>",
        "id": 269022069,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642949894
    },
    {
        "content": "<p>Because usually we can choose the \"canonical\" metric space structure for a specific topological space.</p>",
        "id": 269022081,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642949947
    },
    {
        "content": "<p>If we'll need to deal with metrizable topological spaces without canonical <code>metric_space</code> structure, then we can add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">metrizable_topology</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_metric_space</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>with an instance <code>metric_space X ‚Üí metrizable_topology X</code>.</p>",
        "id": 269022336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642950171
    },
    {
        "content": "<p>OTOH, if we need different norms on the same space (e.g., Lp norms on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb R^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>), then we use type tags.</p>",
        "id": 269022374,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642950221
    },
    {
        "content": "<p>Anyway, if we have <code>with_seminorms.topological_space</code>, then we can add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">space_with_seminorms</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">seminorms</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">seminorms</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"c1\">-- or an indexed family</span>\n<span class=\"o\">(</span><span class=\"n\">topology_eq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">with_seminorms.topological_space</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 269023756,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642951765
    },
    {
        "content": "<p>the family of seminorms is definitively not canonical, but usually there is one family, which you mainly use, but occasionally you need a different one, but what Kevin said for p-adic Fr√©chet spaces is also true for normal locally convex spaces and Fr√©chet spaces</p>",
        "id": 269030193,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1642960404
    },
    {
        "content": "<p>My instinct would be to imitate what we currently do with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.induced\">docs#topological_space.induced</a> / <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inducing\">docs#inducing</a>, because usually all the choices of seminorms give the same topology, so we want to state that a topology is generated by a specific family much more often than we actually define a topology using seminorms. Then we can just have theorems to express continuity, etc... in terms of seminorms.</p>",
        "id": 269097863,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1643027357
    },
    {
        "content": "<p>I'm with Anatole on that one.</p>",
        "id": 269098202,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643027554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> so you would prefer that over your suggestion to use something similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_topology\">docs#order_topology</a> ?</p>",
        "id": 269151549,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643050105
    },
    {
        "content": "<p>They are basically the same solution, right?</p>",
        "id": 269151908,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643050227
    },
    {
        "content": "<p><code>topological_space.induced</code> and <code>inducing</code> don't directly apply because they talk about pullbacks of topologies. What you want is comparing an existing topology to a completely new one. That's what <code>order_topology</code> does.</p>",
        "id": 269152089,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643050321
    },
    {
        "content": "<p>But they are morally instances of the same \"define first, show coincidence afterwards\" approach.</p>",
        "id": 269152234,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643050362
    },
    {
        "content": "<p>I was thinking about the difference between defining a typeclass and passing the equality explicitly as argument</p>",
        "id": 269152312,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643050398
    },
    {
        "content": "<p>Ah. That I don't know. If the typeclass approach already works, then maybe keep on with that and we'll reconsider it if ever you hit a problem down the road?</p>",
        "id": 269152569,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643050482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> does this look good to you?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">with_seminorms2</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">topology_eq_with_seminorms</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">seminorm_module_filter_basis</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">norm_with_seminorms</span> <span class=\"o\">(</span><span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semi_normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">with_seminorms2</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">norm_seminorm</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 269631022,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643314334
    },
    {
        "content": "<p>Looks good! Just have to find a better name <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 269631123,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643314395
    },
    {
        "content": "<p>I run into some issues if I want to use any lemma with <code>uniform_space</code> or something similar: all these type classes cannot be inferred. It is of course possible to a-priori assume that one has <code>uniform_space</code>, <code>uniform_add_group</code> and so on, but it feels a bit unnecessary.</p>",
        "id": 269639221,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643318198
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">add_monoid_hom.uniform_continuous_of_continuous_at_zero</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">seminorm_add_group_filter_basis</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">seminorm_add_group_filter_basis</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uniform_add_group</span>\n    <span class=\"o\">(</span><span class=\"n\">seminorm_add_group_filter_basis</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">seminorm_add_group_filter_basis</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">uniform_add_group</span>\n    <span class=\"n\">f.to_add_monoid_hom</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>this just looks horrible (even if the names were better <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>  )</p>",
        "id": 269639355,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643318259
    },
    {
        "content": "<p>What is the relation mathematically? Is a locally convex space uniform?</p>",
        "id": 269639651,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643318405
    },
    {
        "content": "<p>a <code>topological_add_group</code> is a uniform space</p>",
        "id": 269639729,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643318471
    },
    {
        "content": "<p>I should mention that I haven't yet attended any course on functional analysis. I only know what mathlib knows! And mathlib is learning with me.</p>",
        "id": 269639774,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643318498
    },
    {
        "content": "<p>Ah, <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, is it what you were talking about?</p>",
        "id": 269639904,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1643318548
    },
    {
        "content": "<p>this is fine, I know the math stuff, but have no idea how mathlib/lean works</p>",
        "id": 269639909,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643318552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311604.20Topology.20induced.20by.20seminorms/near/269639729\">said</a>:</p>\n<blockquote>\n<p>a <code>topological_add_group</code> is a uniform space</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_add_group\">docs#uniform_add_group</a> for this job.</p>",
        "id": 269708477,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643362166
    },
    {
        "content": "<p>I know, the issue is that if I use <code>module_filter_basis</code> directly (without an alias as was suggested originally), then lean cannot infer the type-class instances.</p>",
        "id": 269710917,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643363462
    },
    {
        "content": "<p>Actually I think it might be ok to require that one has all the instances on <code>E</code>. in the end there are two major use-cases: a) we already have a topology on the space, which is locally convex, then we have the instances. b) we define the space using the seminorms, then we can first define all the type-class instances before using any lemmas for continuity.</p>",
        "id": 269711314,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643363681
    },
    {
        "content": "<p>there is a bit of boilerplate code in the later case, but not too much</p>",
        "id": 269711401,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1643363724
    }
]