[
    {
        "content": "<p>I came up with an alternate lowbrow proof of <code>int.pow_right_injective</code> : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_power.lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_right_injective</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x.nat_abs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">((</span><span class=\"bp\">^</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">hnm</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hnm'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x.nat_abs</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x.nat_abs</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- can we get rid of this?</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">int.nat_abs_sq</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hnm'</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">hnm'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">nat.pow_right_injective</span> <span class=\"n\">this</span> <span class=\"n\">hnm'</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">hnm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Any suggestions for improvement? In particular, is there any way of getting rid of the <code>linarith</code>?<br>\nThanks,</p>",
        "id": 246138218,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626374728
    },
    {
        "content": "<p>Basically, what would be a wait to prove <code>(2 \\le x) \\to (2 \\le x^2)</code> without using <code>linarith</code> as <code>algebra.group_power.lemmas</code> does not import it?</p>",
        "id": 246139019,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626375095
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group_power.lemmas</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">pow_right_injective</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x.nat_abs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">((</span><span class=\"bp\">^</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">hnm</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hnm'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x.nat_abs</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">x.nat_abs</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">nat.le_mul_of_pos_left</span> <span class=\"n\">zero_lt_two</span> <span class=\"o\">},</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.pow_le_pow_of_le_left</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">nat.pow_right_injective</span> <span class=\"n\">this</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">int.nat_abs_sq</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">hnm'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hnm'</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">hnm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 246139699,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626375417
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 246140045,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1626375573
    },
    {
        "content": "<p>Replacing the first suffices with a have might be nicer</p>",
        "id": 246148462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626379629
    },
    {
        "content": "<p>Would it be nicer to write <code>1 &lt; x.nat_abs</code> instead of <code>2 ≤ x.nat_abs</code>, to match the (hypothetical) same result for e.g. ℚ?</p>",
        "id": 246152840,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626381980
    },
    {
        "content": "<p>Isn't the requirement for the ℚ result simply that it's not -1, 0, or 1?</p>",
        "id": 246160564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626385473
    },
    {
        "content": "<p>Oh yeah, if the exponents are natural numbers then ]-1, 0[ and ]0, 1[ work too!</p>",
        "id": 246160778,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626385598
    },
    {
        "content": "<p>I was mostly worried about roots of negative numbers, but as long as we don't generalize the type of the exponents then we should be safe :)</p>",
        "id": 246160940,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1626385716
    }
]