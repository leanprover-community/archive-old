[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> would like to prove theorems in logic that I don't know much about. But it's clear to me that it's totally legitimate stuff.</p>",
        "id": 197799123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640723
    },
    {
        "content": "<p>To this end, this PR (re)introduces <code>decidable_eq</code> assumptions for lemmas about lattices, but in the past we've had a huge pain with these.</p>",
        "id": 197799157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640764
    },
    {
        "content": "<p>What is a good way forward? Should we try <code>decidable_eq</code> again? Or can we have an attribute <code>@[to_decidable]</code> that creates duplicate constructive versions?</p>",
        "id": 197799173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640809
    },
    {
        "content": "<p>Or maybe the other way round... I guess that's easier</p>",
        "id": 197799178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640821
    },
    {
        "content": "<p>So <code>@[classical]</code> creates a classical version of a constructive lemma.</p>",
        "id": 197799184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640839
    },
    {
        "content": "<p>That way we don't have much overhead in writing stuff, and we can support both approaches.</p>",
        "id": 197799230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589640858
    },
    {
        "content": "<p>The underlying problem here is that the definition of <code>fintype</code> is wrong</p>",
        "id": 197799254,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589640904
    },
    {
        "content": "<p>There is the question of the naming scheme though. I think the shorter version should be the classical one: in this way, people who don't know what they're doing would not carry around <code>decidable_eq</code> assumptions, but people who really want to remain constructive could do it.</p>",
        "id": 197799294,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589640941
    },
    {
        "content": "<p>When dealing with this sort of foundational stuff it feels weird to me to use choice when it's not needed. Taking an example from set theory (because I'm sharper on set theory and category theory than HoTT), constructing an inner model of ZFC (eg ZF + V=L) from a model of ZF doesn't feel like an achievement if your metatheory assumed choice</p>",
        "id": 197799300,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589640949
    },
    {
        "content": "<p>^copying my motivation for this from another thread</p>",
        "id": 197799351,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589640971
    },
    {
        "content": "<p>Isn't it what is done in most books?</p>",
        "id": 197799356,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589640982
    },
    {
        "content": "<p>I'm pretty sure it isn't, most foundational books take care to assume the least of the metatheory</p>",
        "id": 197799394,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589641044
    },
    {
        "content": "<p>I think the default position of mathlib is not to make concessions to those who care about foundations.</p>",
        "id": 197799448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641089
    },
    {
        "content": "<p>OK, thanks for the clarification (answering to Bhavik).</p>",
        "id": 197799449,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589641094
    },
    {
        "content": "<p>However, it's not that clear to me that we are conceding anything here--apparently no changes were required to the rest of mathlib, right?</p>",
        "id": 197799455,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641111
    },
    {
        "content": "<p>Unfortunately there are some required changes...</p>",
        "id": 197799463,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589641140
    },
    {
        "content": "<p>We have made a design decision to be classical, and my iimpression was that letting polynomials be constructive caused problems.</p>",
        "id": 197799465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589641142
    },
    {
        "content": "<p>Oh I see, the build fails</p>",
        "id": 197799480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641160
    },
    {
        "content": "<p>Is that only the linter complaining?</p>",
        "id": 197799492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589641171
    },
    {
        "content": "<p>Or really the build?</p>",
        "id": 197799494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589641175
    },
    {
        "content": "<p>It's the build, I thought it'd just be the linter too but there are some other complaints</p>",
        "id": 197799498,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589641188
    },
    {
        "content": "<p>There's a real error. Does the CI give up after the first error somehow?</p>",
        "id": 197799500,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641192
    },
    {
        "content": "<p>Oh no, I see there are at least two different errors</p>",
        "id": 197799548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641210
    },
    {
        "content": "<p>I guess the output is truncated somehow</p>",
        "id": 197799558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641229
    },
    {
        "content": "<p>It doesn't go through the whole build, though.</p>",
        "id": 197799564,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589641249
    },
    {
        "content": "<p>Build time on the PR is only 43 minutes.</p>",
        "id": 197799575,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589641264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Can you explain what's wrong with <code>fintype</code>? (Maybe in another topic?)</p>",
        "id": 197799586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589641296
    },
    {
        "content": "<p>I think Johan's point about <code>decidable_eq b</code> being data is tempered by the fact that all these functions already have <code>fintype b</code> too, right?</p>",
        "id": 197799675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641416
    },
    {
        "content": "<p>Oh, this is actually about <code>finset</code></p>",
        "id": 197799742,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641480
    },
    {
        "content": "<p>If this is ultimately about ZF vs ZFC, then this is not really the change you want anyways</p>",
        "id": 197799888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641652
    },
    {
        "content": "<p>because everything is decidable in ZF too</p>",
        "id": 197799896,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641671
    },
    {
        "content": "<p>What you want is for <code>classical</code> to enable <code>lem</code> without using <code>choice</code></p>",
        "id": 197799947,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641719
    },
    {
        "content": "<p>Yeah I kind of would like that</p>",
        "id": 197799953,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589641739
    },
    {
        "content": "<p>I think breaking up <code>choice</code> is useful even for non-foundational reasons, so I would rather do that</p>",
        "id": 197799974,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641784
    },
    {
        "content": "<p>I'd prefer that too. I would quite like lem, unique choice and finite choice to be distinct though I'd be happy with just the first two (or at a push, just the first)</p>",
        "id": 197800057,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589641886
    },
    {
        "content": "<p>Alternatively it should actually be possible to prove these things without <code>decidable_eq</code>, I think?</p>",
        "id": 197800069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641909
    },
    {
        "content": "<p>I think you can write a modified induction principle for <code>finset</code> which doesn't know <code>a âˆ‰ s</code> in the <code>insert a s</code> case, and use that</p>",
        "id": 197800146,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641971
    },
    {
        "content": "<p>does that seem right?</p>",
        "id": 197800149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589641974
    },
    {
        "content": "<p>oh, the problem is with <code>insert</code> itself</p>",
        "id": 197800172,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589642023
    },
    {
        "content": "<p>Still, these theorems are true without <code>classical</code> or decidability hypotheses, I'm pretty sure.</p>",
        "id": 197800232,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589642073
    },
    {
        "content": "<p>I'm not sure about <code>fold_insert_idem</code> but I can certainly believe the others</p>",
        "id": 197800245,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589642107
    },
    {
        "content": "<p>But that one you didn't even need to change the type of, right? For some reason the <code>decidable_eq</code> hypothesis was there already?</p>",
        "id": 197800326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589642170
    },
    {
        "content": "<p>True! It was there already for the insert</p>",
        "id": 197800350,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589642226
    },
    {
        "content": "<p>The proof of all these theorems is just to do them for multisets (in case it matters, the operation is idempotent)</p>",
        "id": 197800369,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589642273
    },
    {
        "content": "<p>Alright, giving that a try now</p>",
        "id": 197800623,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589642605
    },
    {
        "content": "<p>Or another way to say it is: <code>insert</code> doesn't really need to know that the whole type has decidable equality, it just has to be able to decide whether the element being inserted is in the list already; but in <code>finset.induction_on</code> we have that in the context</p>",
        "id": 197800698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589642700
    },
    {
        "content": "<p>(it's not in the list already)</p>",
        "id": 197800706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589642705
    },
    {
        "content": "<p>I'm not sure what the least disruptive way to prove these is, though</p>",
        "id": 197800734,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589642744
    },
    {
        "content": "<p>Yeah I think that would be pretty disruptive, since I'd have to change the definition of insert</p>",
        "id": 197800791,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589642785
    },
    {
        "content": "<p>Of course I very strongly vote against anything the makes mathlib harder to use for everybody while allowing arcane specialized logic stuff.</p>",
        "id": 197801122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589643322
    },
    {
        "content": "<p>There are plenty of alternative software for this. We simply need to keep this diversity by preserving Lean and mathlib from constructivism.</p>",
        "id": 197801192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589643368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232699.20decidable_eq.20lattices/near/197800369\">said</a>:</p>\n<blockquote>\n<p>The proof of all these theorems is just to do them for multisets (in case it matters, the operation is idempotent)</p>\n</blockquote>\n<p><del>This worked fine for <code>inf_le</code> but I'm struggling a bit with <code>le_inf</code></del> Never mind, got it</p>",
        "id": 197801418,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589643732
    },
    {
        "content": "<p>oh, I see that <code>multiset.inf</code> already exists! that's convenient.</p>",
        "id": 197804002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589647543
    },
    {
        "content": "<p>It does, but it's not got the map in there</p>",
        "id": 197804066,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589647601
    },
    {
        "content": "<p>Okay I think I've made all the changes I need - there shouldn't be any <em>new</em> decidable_eq any more, but I managed to remove some uses of classical</p>",
        "id": 197804102,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589647650
    },
    {
        "content": "<p>Hopefully this should be acceptable to everyone!</p>",
        "id": 197804170,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589647708
    },
    {
        "content": "<p>Great! It's shorter than the original, too.</p>",
        "id": 197804530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589648205
    },
    {
        "content": "<p>Thanks for this suggestion <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>!</p>",
        "id": 197804652,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589648362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232699.20decidable_eq.20lattices/near/197804170\">said</a>:</p>\n<blockquote>\n<p>Hopefully this should be acceptable to everyone!</p>\n</blockquote>\n<p>Certainly!</p>",
        "id": 197807087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589651778
    },
    {
        "content": "<p>One more idea: introduce <code>has_em (p : Prop) : Prop := (em : p âˆ¨ not p)</code> typeclass with instance from <code>decidable p</code> and use it instead of <code>classical</code>.</p>",
        "id": 197809054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589654857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232699.20decidable_eq.20lattices/near/197800698\">said</a>:</p>\n<blockquote>\n<p>Or another way to say it is: <code>insert</code> doesn't really need to know that the whole type has decidable equality, it just has to be able to decide whether the element being inserted is in the list already; but in <code>finset.induction_on</code> we have that in the context</p>\n</blockquote>\n<p>IIRC there is a <code>finset.cons</code> function for this: it takes an <code>a</code> and <code>s</code> and a hypothesis <code>a \\notin s</code> and produces a new finset. This is more efficient because it doesn't have to check for membership, but importantly it also doesn't require any decidable equality. It would be perfect for an induction theorem</p>",
        "id": 197811688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589658545
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232699.20decidable_eq.20lattices/near/197809054\">said</a>:</p>\n<blockquote>\n<p>One more idea: introduce <code>has_em (p : Prop) : Prop := (em : p âˆ¨ not p)</code> typeclass with instance from <code>decidable p</code> and use it instead of <code>classical</code>.</p>\n</blockquote>\n<p>I worry this would create the same typeclass issues people were worried about with my original suggestion though</p>",
        "id": 197813770,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1589661216
    },
    {
        "content": "<p>This is less bad because it's a Prop.</p>",
        "id": 197857827,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589734095
    },
    {
        "content": "<p>There are really two kinds of issues. The more serious one is making definitions depend on data (like <code>decidable_eq</code>). That wasn't an issue here because the extra argument was only added to lemmas. The less serious one is adding an argument you don't need.</p>",
        "id": 197863226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589741083
    }
]