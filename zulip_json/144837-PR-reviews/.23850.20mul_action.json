[
    {
        "content": "<p>I'm having some issues with this PR. In the file <code>algebra/pi_instances.lean</code> there seems to be an issue with the <code>pi.module</code> instance. Lean is no longer happy with <code>{..pi.semimodule _}</code> as proof term. I don't really understand how these issues arise from making <code>semimodule</code> extend <code>mul_action</code>.<br>\nIf someone with more Lean-fu than me wants to take a look, I would be very grateful.</p>",
        "id": 161794418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553628044
    },
    {
        "content": "<p>This is the error that I'm getting:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"err\">&#39;</span><span class=\"n\">to_mul_action_add&#39;</span>\n  <span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"n\">to_mul_action_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">)}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_3</span> <span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"err\">?</span><span class=\"n\">m_7</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">mul_action_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">)}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">),</span> <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span>\n        <span class=\"err\">?</span><span class=\"n\">l_1</span>\n        <span class=\"err\">?</span><span class=\"n\">l_2</span>\n        <span class=\"err\">?</span><span class=\"n\">l_3</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">mul_action_add</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>It looks like some kind of diamond to me. But I don't think it's an actual diamond. Also, there are a scary amount of universe variables that Lean isn't figuring out on its own. I don't know why...<br>\nThe relevant code in the context is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">mul_action</span>     <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">}</span>                                      <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>     <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">mul_action_add</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">}</span>         <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>      <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">mul_action_add</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_add</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">mul_action</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">semimodule</span>     <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">}</span>       <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>     <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">mul_action_add</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">instance</span> <span class=\"n\">module</span>         <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">}</span>           <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>         <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n<span class=\"kn\">instance</span> <span class=\"n\">vector_space</span>   <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">vector_space</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>   <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 161835623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553672070
    },
    {
        "content": "<p>As mentioned above: the error is for the <code>instance module</code> line.</p>",
        "id": 161835635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553672098
    },
    {
        "content": "<p>Try filling in some of the _'s?</p>",
        "id": 161836087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672669
    },
    {
        "content": "<p>This has helped in other situations like this</p>",
        "id": 161836091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672690
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">module</span>         <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">}</span>           <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>         <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>       <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_semimodule</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 161836163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553672790
    },
    {
        "content": "<p>But the fact that it didn't figure out those instances from the beginning is not a good sign.</p>",
        "id": 161836180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553672819
    },
    {
        "content": "<p>Because that is going to lead to problems in lots of places.</p>",
        "id": 161836191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553672838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you know what is the right way to guide type class search in the right direction here?</p>",
        "id": 161836257,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553672909
    },
    {
        "content": "<p>Why not post some working code if you're asking others for help?</p>",
        "id": 161836261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672932
    },
    {
        "content": "<p>I feel that is somewhat complicated here.</p>",
        "id": 161836282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553672959
    },
    {
        "content": "<p>asking for help often is</p>",
        "id": 161836291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553672982
    },
    {
        "content": "<p>I feared you'd say that</p>",
        "id": 161836292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672983
    },
    {
        "content": "<p>My advice doesn't differ significantly from Kevin's</p>",
        "id": 161836346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673006
    },
    {
        "content": "<p>I've seen <code>convert</code> used in that way too. I don't know how it works and I know that whenever someone writes a tactic other people want it to do just epsilon more</p>",
        "id": 161836392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553673071
    },
    {
        "content": "<p>The fact that I'm using <code>convert</code> here is already a bad omen.</p>",
        "id": 161836401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673100
    },
    {
        "content": "<p>The <code>convert</code> is a bad idea, because it will cause diamond problems down the line</p>",
        "id": 161836402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673100
    },
    {
        "content": "<p>it adds an <code>eq.rec</code> into the term, but instance fields need to be defeq to stuff</p>",
        "id": 161836454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673129
    },
    {
        "content": "<p>In this case it's actually <code>eq.rec ... refl</code> so it might be okay</p>",
        "id": 161836469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673160
    },
    {
        "content": "<p>I would recommend adding the typeclass arguments until it stops erroring, and find out which is the operative one</p>",
        "id": 161836495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673204
    },
    {
        "content": "<p>I was going to continue \"but if it (convert) is not filling in easy things, then you might wonder whether it needs more help filling in metavariables earlier on\"</p>",
        "id": 161836496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553673208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> But it isn't a problem to have <code>@pi.semimodule _ _ _</code> in the code?</p>",
        "id": 161836562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673292
    },
    {
        "content": "<p>not really</p>",
        "id": 161836573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673308
    },
    {
        "content": "<p>I mean: that avoids the diamond. But does it mean that users will have to write <code>@...</code> all the time?</p>",
        "id": 161836575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673313
    },
    {
        "content": "<p>if they have to write it all the time, sure it's a problem</p>",
        "id": 161836587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673331
    },
    {
        "content": "<p>but I wouldn't say it's never needed</p>",
        "id": 161836589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673344
    },
    {
        "content": "<p>By the way: <code>convert</code> created the following proof term:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)],</span>\n  <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)],</span>\n  <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))}</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">module</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u_1</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"n\">α</span> <span class=\"n\">r</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">add_comm_group</span><span class=\"bp\">.</span><span class=\"n\">to_add_comm_monoid</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"n\">i</span><span class=\"o\">))))</span>\n</pre></div>\n\n\n<p>which seems reasonably clean.</p>",
        "id": 161836593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673353
    },
    {
        "content": "<p><code>(@eq.mpr.{(max (u_1+1) ((max u v)+1))}...</code></p>",
        "id": 161836644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673374
    },
    {
        "content": "<p>But the <code>eq.mpr</code> is a problem, I guess.</p>",
        "id": 161836647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673376
    },
    {
        "content": "<p>where's the refl at the end?</p>",
        "id": 161836657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673400
    },
    {
        "content": "<p>oh, that's probably <code>pi.module._proof_1</code></p>",
        "id": 161836668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673424
    },
    {
        "content": "<p>The problem goes away if we make the family <code>f</code> explicit.</p>",
        "id": 161836735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673526
    },
    {
        "content": "<p>Huh, no... that's not enough</p>",
        "id": 161836804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673609
    },
    {
        "content": "<p>I don't understand Lean.</p>",
        "id": 161836806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673614
    },
    {
        "content": "<p>It needs both <code>I</code> and <code>f</code> explicitly!</p>",
        "id": 161836833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673689
    },
    {
        "content": "<p>But <code>I</code> can trivially be inferred from <code>f</code>.</p>",
        "id": 161836835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673702
    },
    {
        "content": "<p>did you try putting a type ascription on <code>pi.semimodule</code>? The <code>..foo</code> position of a term doesn't get any expected type assistance</p>",
        "id": 161836949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673815
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">semimodule</span>     <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">}</span>       <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_monoid</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>     <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">mul_action_add</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">module</span>         <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">}</span>           <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span>         <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span>       <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 161837030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673845
    },
    {
        "content": "<p>That's what I have now</p>",
        "id": 161837041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673851
    },
    {
        "content": "<p><code>..(pi.mul_action_add _ : bla bla)</code></p>",
        "id": 161837065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673873
    },
    {
        "content": "<p>But if I tell Lean <code>f</code>, it should be able to figure out <code>I</code>, shouldn't it?</p>",
        "id": 161837067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673886
    },
    {
        "content": "<p>Because <code>f : I → _</code></p>",
        "id": 161837071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673896
    },
    {
        "content": "<p>I have no idea what the issue is</p>",
        "id": 161837073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673901
    },
    {
        "content": "<p>it could be an order of operations thing</p>",
        "id": 161837085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673911
    },
    {
        "content": "<p>Is my current version okay? Or is it better to write <code>@pi.semimodule I f α _ _ _</code>?</p>",
        "id": 161837108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673941
    },
    {
        "content": "<p>And leave the variables implicit</p>",
        "id": 161837110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673949
    },
    {
        "content": "<p>Sebastian once showed us how to switch on debugging so you can see exactly what the unifier is doing, if anyone really cares.</p>",
        "id": 161837116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553673959
    },
    {
        "content": "<p>if it works, the current version is fine</p>",
        "id": 161837156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553673964
    },
    {
        "content": "<p>Let's see what Travis says</p>",
        "id": 161837170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553673993
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/unification/near/156841375\" title=\"#narrow/stream/113488-general/topic/unification/near/156841375\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/unification/near/156841375</a> is what happens if you ask Sebastian this sort of question -- he just inspects what the unifier is doing and then can tell you why your original type mismatch occurred. The set_options he used are a few posts later. I've seen Kenny using them at Xena.</p>",
        "id": 161838691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553675924
    },
    {
        "content": "<p>I find that I need to bump up the type class search depth in a lot of files... is that an issue. Or is that just inherent to the growth of our algebraic hierarchy?</p>",
        "id": 161894784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553716464
    },
    {
        "content": "<p>it is not related to the number of <code>instance</code>s we have, but with the constructed terms and that we have many instances which depend on many other searches. So especially when a <code>module</code> instance is looked after, it may require three different instances to be found: the ring, the group, and the module itself. Then the number of found instances in the previous type class arguments count to the \"depth\" itself.</p>",
        "id": 161895526,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1553716958
    },
    {
        "content": "<p>But if you have deeply nested structures, this increases the search depth, not?</p>",
        "id": 161895596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553717034
    },
    {
        "content": "<p>I always get a bit edgy when Lean wants me to bump up the type class search depth. I usually only do this as a last resort; I prefer to try and help Lean along the way with some intermediate instances, or guide it to the right instance. See for example, in our very own project, <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/6dc770a9e40a61e3e31362ea8cf9f83661283369/src/valuation/canonical.lean#L699\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/6dc770a9e40a61e3e31362ea8cf9f83661283369/src/valuation/canonical.lean#L699\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/6dc770a9e40a61e3e31362ea8cf9f83661283369/src/valuation/canonical.lean#L699</a> for me supplying the proof instead of letting type class inference do it, and <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/53905461e2069d1396578a3d034d6b5b49c54f60/src/valuation/basic.lean#L652\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/53905461e2069d1396578a3d034d6b5b49c54f60/src/valuation/basic.lean#L652\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/53905461e2069d1396578a3d034d6b5b49c54f60/src/valuation/basic.lean#L652</a> for me using <code>by apply_instance</code> judiciously to save me having to bump up the depth.</p>",
        "id": 161896892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553718027
    },
    {
        "content": "<p>Remember that adding shortcut instance is a double-edged sword, because this instance could be tried by type class search while solving an unrelated problem. But I guess it's fine in case this shortcut fails quickly (for instance it doesn't go hunting for a ring structure on an unknown type).</p>",
        "id": 161897401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553718394
    },
    {
        "content": "<p>Well this is interesting. I don't really understand typeclass search. I just didn't like changing the defaults. I was putting standard instances on elaborate structures which type class inference should feel free to try if it is convinced that it should be understanding those structures. I would be happy to be guided by principles but I don't really know any</p>",
        "id": 161899166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553719730
    },
    {
        "content": "<p>Travis seems to be hanging for a very long time on \"Booting virtual machine\" for the 2nd build stage. But the first build stage succesfully checked the entire build in 9 minutes... so I think this one is fine.</p>",
        "id": 161927959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553755378
    },
    {
        "content": "<p>If possible this should be merged quickly, because otherwise it risks breaking again.</p>",
        "id": 161927975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553755424
    }
]