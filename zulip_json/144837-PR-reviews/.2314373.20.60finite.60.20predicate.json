[
    {
        "content": "<p>Here's a potential definition for the <code>Prop</code>-valued complement to <code>infinite</code>, along with some subset of the <code>fintype</code> API to see how it works (and some amount to make it somewhat useful-ish): <a href=\"https://github.com/leanprover-community/mathlib/pull/14373\">#14373</a></p>\n<p>Not yet included is its relationship to <code>set</code> and <code>set.finite</code>, which should be in a followup PR.</p>\n<p>I made the decision to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card\">docs#nat.card</a> as the way to talk about cardinality of finite sets. One thing I like about it is that it does not need a <code>finite</code> instance, so you won't need to worry about dependent rewrites (unlike <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card\">docs#fintype.card</a>). It seems kind of nice that you don't have to prove to Lean that a type is finite before you use it.</p>\n<p>Any thoughts on how finiteness should look? This particular definition comes from <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 283829270,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653445099
    },
    {
        "content": "<p>I'm not convinced this is useful</p>",
        "id": 283909760,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653497316
    },
    {
        "content": "<p>What do we get out of this that we don't from either <code>fintype a</code> or <code>nonempty (fintype a)</code>?</p>",
        "id": 283909845,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653497353
    },
    {
        "content": "<p>Proof irrelevance, which lets us avoid different defeq problems (no more <code>congr</code> when trying to show two <code>fintype.card</code>s are equal for example). This predicate has been desired by a number of people for a while.</p>",
        "id": 283910801,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653497754
    },
    {
        "content": "<p>And this is essentially a name for <code>nonempty (fintype a)</code>, with a little bit of extra complexity since Yury wanted to make sure it worked for <code>Sort*</code> instead of just <code>Type*</code>.</p>",
        "id": 283910943,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653497807
    },
    {
        "content": "<p>I would like for all global <code>fintype</code> instances to be computable so that it can be relied upon to be able to generate real computations. This can be the place where those noncomputable instances go.</p>",
        "id": 283911169,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653497896
    },
    {
        "content": "<p>Also, typeclass inference is slower for <code>nonempty (fintype a)</code> vs <code>finite a</code> since it only uses the head for faster lookup.</p>",
        "id": 283911274,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653497941
    },
    {
        "content": "<p>I'm still worried about the potential redundancy, won't types have one instance iff they have the other?</p>",
        "id": 283911371,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653497981
    },
    {
        "content": "<p>I think <code>finite</code> is fine. After all, we have <code>inhabited</code> and <code>nonempty</code>. I don't like overusing <code>nat.card</code> however.</p>",
        "id": 283911771,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653498120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2314373.20.60finite.60.20predicate/near/283911371\">said</a>:</p>\n<blockquote>\n<p>I'm still worried about the potential redundancy, won't types have one instance iff they have the other?</p>\n</blockquote>\n<p>Every purely computable <code>fintype</code> instance gives a <code>finite</code> instance, but not necessarily vice versa. In the PR, the <code>finite</code> instances you see are from \"lowering\" <code>fintype</code> instances that themselves require <code>fintype</code> instances -- this ideally would be automated, but for now I'm just doing it by hand.</p>",
        "id": 283913092,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653498651
    },
    {
        "content": "<p>I feel this is very welcome and will stop us from having to deal with <code>fintype</code> diamonds, for one small thing that is great</p>",
        "id": 283913138,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653498669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Opinion noted about <code>nat.card</code>, but, to be constructive, what would you do instead? Why is this \"overuse\"?</p>",
        "id": 283913197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653498689
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.of_equiv\">docs#fintype.of_equiv</a> is often a footgun for these sorts of reasons and this sort of stuff causes a lot of breakage</p>",
        "id": 283913207,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653498694
    },
    {
        "content": "<p>I would prefer either <code>enat.card</code> or just even <code>finite.card</code>. I don't like the ambiguity between empty + infinite, as helpful as that can be sometimes</p>",
        "id": 283913321,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653498727
    },
    {
        "content": "<p>I assume <code>finite.card</code> would require a <code>[finite X]</code> assumption, <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>? I think I agree that's probably less confusing</p>",
        "id": 283913586,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653498838
    },
    {
        "content": "<p>I'm not convinced there's much advantage to using junk values in place of a Prop-valued typeclass; junk values seem most useful when either there's no typeclass in the first place, or when it carries data that would form diamonds</p>",
        "id": 283913759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653498916
    },
    {
        "content": "<p>My intention was that you only use <code>nat.card</code> when you know the set is finite. So long as you are theoretically able to produce a <code>finite</code> or <code>fintype</code> instance, then you know the <code>nat.card</code> result is valid. Any cleverness around <code>nat.card</code> being zero for infinite types I think should be used only to remove <code>finite</code> instances from theorems to make them more easily applicable -- why synthesize the instances if you don't have to?</p>\n<p>Here are the tradeoffs as I see it:</p>\n<ul>\n<li>If you have <code>finite.card (X : Type*) [finite X] : nat</code>, then when you want to rewrite <code>X</code> you'll likely get \"motive not type correct errors\" just like for <code>fintype.card</code>. You often do want to rewrite <code>X</code>, for example when <code>X</code> is from a <code>set</code>. The plus is that Lean only lets you use <code>finite.card</code> if it's able to prove the type is finite using typeclass inference. One other plus is that it could take <code>Sort*</code>, allowing you to write <code>finite.card p</code> rather than <code>nat.card (plift p)</code> when <code>p</code> is a proposition, but that seems rather niche.</li>\n<li>If you use <code>nat.card</code> you might forget to make sure you have a finite type because Lean won't complain. But you won't get \"motive not type correct errors\" ever. You can also state theorems with fewer <code>finite</code> assumptions when some are consequences of others.</li>\n</ul>",
        "id": 283929305,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653506535
    },
    {
        "content": "<p>I think avoiding \"motive not type correct\" errors is a strong reason to favor <code>nat.card</code>.</p>",
        "id": 283930169,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653507006
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finite.card</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">fintype.of_finite</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">finite.card</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- rewrite tactic failed, motive is not type correct</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 283930474,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653507175
    },
    {
        "content": "<p>This works of course:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat.card</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">nat.card</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>(I deleted the <code>finite</code> instances just because they're not necessary for the example.)</p>",
        "id": 283930563,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653507241
    },
    {
        "content": "<p>what if you define <code>finite.card</code> as <code>nat.card</code>?</p>",
        "id": 283931219,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653507613
    },
    {
        "content": "<p>Hmm, but then that's literally the same and leads to api duplication, and when we need finiteness we can add that as a hypothesis. /0 all over again. I changed my mind, I think this is fine.</p>",
        "id": 283931397,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653507747
    },
    {
        "content": "<p>The problem isn't in the definition of <code>finite.card</code> but in the fact that the second argument has a type that depends on the first -- that's the source of the error. (Try replacing the definition with <code>sorry</code> if you want to check.)</p>",
        "id": 283931485,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653507820
    },
    {
        "content": "<p>right, yes, I forgot it's <code>simp_rw</code> that deals with that</p>",
        "id": 283931864,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653508062
    },
    {
        "content": "<p>I've updated some documentation for this PR and also generalized things to <code>Sort*</code> wherever I could. For example, this is an instance that <code>finite</code> has but <code>fintype</code> cannot since that's only for <code>Type*</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pi.finite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So for example, there's no need for any special case instances (or <code>decidable_pred</code> instances) for this pi type to be finite:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 285041447,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654442937
    },
    {
        "content": "<p>It's also sort of interesting how other instances can be generalized. Since we don't need to compute anything, there's no need for this one to have a <code>finite α</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">function.embedding.finite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 285041543,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654443033
    },
    {
        "content": "<p>I will say, everything to do with embedding being a fintype was written by me when not very good at lean (first 2 months or so!) so maybe the design isn't correct. But to be fair, I don't think there's a good general instance</p>",
        "id": 285048943,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1654453434
    },
    {
        "content": "<p>Oh, the <code>fintype</code> instance for embeddings is perfectly fine, this is just a property of <code>finite</code> that lets it be written like this. I just wanted to give some examples of how <code>finite</code> won't just recapitulate <code>fintype</code>.</p>",
        "id": 285049861,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1654454726
    }
]