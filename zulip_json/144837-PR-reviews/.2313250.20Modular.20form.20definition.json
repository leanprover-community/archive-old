[
    {
        "content": "<p>Ok I have another stupid question. I'm getting the following error <code>modular_form.to_slash_invariant_form - def missing doc string</code>. How do I add a doc string to something I've not explicitly defined?</p>",
        "id": 310200456,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1668518980
    },
    {
        "content": "<p>Is this obtained using <code>simps</code>?</p>",
        "id": 310200815,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668519056
    },
    {
        "content": "<p>Ah, it comes from using <code>extends</code>. Does using <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#ancestor\">ancestor</a> fix it?</p>",
        "id": 310202864,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668519672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313250.20Modular.20form.20defiinition/near/310200456\">said</a>:</p>\n<blockquote>\n<p>Ok I have another stupid question. I'm getting the following error <code>modular_form.to_slash_invariant_form - def missing doc string</code>. How do I add a doc string to something I've not explicitly defined?</p>\n</blockquote>\n<p>Or you can add the doc using the <code>add_decl_doc</code> comman:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Your docstring here -/</span>\n<span class=\"n\">add_decl_doc</span> <span class=\"n\">modular_form.to_slash_invariant_form</span>\n</code></pre></div>",
        "id": 310202902,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1668519693
    },
    {
        "content": "<p>Ah thanks, I'll try that!</p>",
        "id": 310204242,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1668519975
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 311442677,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1669055470
    },
    {
        "content": "<p>Since this is still a huge PR, can you split it? For example all the analysis stuff can be in another PR.</p>",
        "id": 311449253,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669057752
    },
    {
        "content": "<p>If you do it, mention that it has already been reviewed. I think that now very few people are confident in all the material (I mean, in mathlib) to merge it without having to think to it twice...</p>",
        "id": 311449415,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669057807
    },
    {
        "content": "<p>And these few people are probably busy with the porting</p>",
        "id": 311449451,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1669057830
    },
    {
        "content": "<p>Sure, I split some of the content into <a href=\"https://github.com/leanprover-community/mathlib/pull/17675\">#17675</a> <a href=\"https://github.com/leanprover-community/mathlib/pull/17676\">#17676</a> <a href=\"https://github.com/leanprover-community/mathlib/pull/17677\">#17677</a></p>",
        "id": 311554222,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1669110334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313250.20Modular.20form.20definition/near/303533157\">said</a>:</p>\n<blockquote>\n<p>Per one of Moritz' comment on this PR, I think there is a different approach that might be considered for this PR. In particular, I don't think it is quite necessary to realize <code>weakly_modular_form</code> as a submodule of <code>‚Ñç ‚Üí ‚ÑÇ</code>, and similarly for the others. Personally, I think it would make more sense to define the following structures:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œì</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">weakly_modular_form</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñç</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">slash_action_eq'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"bp\">Œì</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"bp\">‚à£</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">modular_form</span> <span class=\"kd\">extends</span> <span class=\"n\">weakly_modular_form</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hol'</span> <span class=\"o\">:</span> <span class=\"n\">mdifferentiable</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñç'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">bdd_at_infty'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)),</span> <span class=\"n\">is_bounded_at_im_infty</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"bp\">‚à£</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cusp_form</span> <span class=\"kd\">extends</span> <span class=\"n\">weakly_modular_form</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hol'</span> <span class=\"o\">:</span> <span class=\"n\">mdifferentiable</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñç'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">zero_at_infty'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)),</span> <span class=\"n\">is_zero_at_im_infty</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"bp\">‚à£</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">weakly_modular_form_class</span> <span class=\"kd\">extends</span> <span class=\"n\">fun_like</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñç</span><span class=\"o\">,</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">slash_action_eq</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≥</span> <span class=\"o\">:</span> <span class=\"bp\">Œì</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"bp\">‚à£</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Œ≥</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">modular_form_class</span> <span class=\"kd\">extends</span> <span class=\"n\">weakly_modular_form_class</span> <span class=\"n\">F</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hol</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">mdifferentiable</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñç'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">bdd_at_infty</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)),</span> <span class=\"n\">is_bounded_at_im_infty</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚à£</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">cusp_form_class</span> <span class=\"kd\">extends</span> <span class=\"n\">weakly_modular_form_class</span> <span class=\"n\">F</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hol</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">mdifferentiable</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"bp\">ùìò</span><span class=\"o\">(</span><span class=\"n\">‚ÑÇ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñç'</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚ÑÇ</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">zero_at_infty</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)),</span> <span class=\"n\">is_zero_at_im_infty</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚à£</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"bp\">Œì</span> <span class=\"bp\">ùïú</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">cusp_form_class</span> <span class=\"n\">F</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">modular_form_class</span> <span class=\"n\">F</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">weakly_modular_form_class</span> <span class=\"o\">(</span><span class=\"n\">weakly_modular_form</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">modular_form_class</span> <span class=\"o\">(</span><span class=\"n\">modular_form</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">cusp_form_class</span> <span class=\"o\">(</span><span class=\"n\">cusp_form</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">Œì</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>After this (and some other boilerplate you should add that comes with the hom class setup) you can provide module instances for <code>weakly_modular_form</code>, <code>modular_form</code> and <code>cusp_form</code>, which is straightforward. You can also provide a graded multiplication operation on relevant types too. And finally, you can take the direct sum of <code>modular_form Œì</code> and put a graded ring structure on it. </p>\n<p>All this being said, I'm not a number theorist, and I don't know much about modular forms. I'm posting this on Zulip so there can be discussion around it.</p>\n</blockquote>\n<p>Here <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> suggested making <code>modular_form</code> and <code>cusp_form</code> separate types. But I feel like it would make more sense to define <code>cusp_form</code> explicitly as a submodule of <code>modular_form</code>, rather than as a separate type. Thoughts?</p>",
        "id": 312482583,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1669561989
    }
]