[
    {
        "content": "<p>This PR weakens <code>ordered_module</code> so that it applies to more general situations where there is no longer a module over a semiring, but just a <code>smul_with_zero</code>.</p>\n<p>Should <code>ordered_module</code> now be renamed to <code>ordered_smul</code> (with a comment that still mentions <code>ordered_module</code> for discoverability)?</p>",
        "id": 251671792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630564248
    },
    {
        "content": "<p><code>has_ordered_scalar</code> might be a better name considering <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_faithful_scalar\">docs#has_faithful_scalar</a></p>",
        "id": 251671899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630564340
    },
    {
        "content": "<p>Or maybe we should just rename <code>has_scalar</code> to <code>has_smul</code>...</p>",
        "id": 251671927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630564375
    },
    {
        "content": "<p><code>scalar</code> is just sooo much longer than <code>smul</code>. But jokes aside, I think that we should just use <code>smul</code> everywhere. It's more consistent.</p>",
        "id": 251672360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630564779
    },
    {
        "content": "<p>I would be in favour of renaming <code>has_faithful_scalar</code> to <code>faithful_smul</code>.</p>",
        "id": 251672422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630564816
    },
    {
        "content": "<p>I guess \"scalar\" is kind of a bad abbreviation anyway; it's not that the type has a scalar, but that it has multiplication by one</p>",
        "id": 251688151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630574581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238930.20loosen.20ordered_module.20to.20smul_with_zero/near/251672422\">said</a>:</p>\n<blockquote>\n<p>I would be in favour of renaming <code>has_faithful_scalar</code> to <code>faithful_smul</code>.</p>\n</blockquote>\n<p>Hence also dropping the <code>has_</code>?</p>",
        "id": 251692457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577127
    },
    {
        "content": "<p>Maybe <code>smul_is_faithful</code> would be better since it's less \"noun\"-y and the class carries no data</p>",
        "id": 251694059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630578176
    },
    {
        "content": "<p>I would even consider shortening it to just <code>[faithful G X]</code>. There are faithful functors, but besides that, I think <em>faithful</em> almost always refers to some action. The fact that it is a Prop can be revealed by a hover. We don't have <code>[is_topological_group]</code> or <code>[is_smul_comm_class]</code> either.</p>",
        "id": 251700142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630581975
    },
    {
        "content": "<p>But we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_continuous_mul\">docs#has_continuous_mul</a></p>",
        "id": 251700718,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630582371
    },
    {
        "content": "<p>Which I think is what inspired the current name we have</p>",
        "id": 251700765,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630582411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238930.20loosen.20ordered_module.20to.20smul_with_zero/near/251700142\">said</a>:</p>\n<blockquote>\n<p>I would even consider shortening it to just <code>[faithful G X]</code>.</p>\n</blockquote>\n<p>Erh... I don't like that. Somebody thought <code>locally_finite</code> would unambiguously refer to the topology, and I already want to introduce <code>locally_finite_order</code> (and also <code>simpicial_complex.locally_finite</code> but this one won't be an instance).</p>",
        "id": 251701172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630582678
    },
    {
        "content": "<p>I don't think making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_faithful_scalar\">docs#has_faithful_scalar</a> shorter is particularly useful since its used so rarely. The only change I'm in favor of is replacing <code>scalar</code> with <code>smul</code> to make it actually match the name of the operator.</p>",
        "id": 251701298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630582752
    },
    {
        "content": "<p>In fact, I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fixed_points.finrank_eq_card\">docs#fixed_points.finrank_eq_card</a> is pretty much the only \"real\" use, everything else is just \"well the action is injective so so is this composite action / bundled hom corresponding to the action\"</p>",
        "id": 251701535,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630582904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238930.20loosen.20ordered_module.20to.20smul_with_zero/near/251701298\">said</a>:</p>\n<blockquote>\n<p>I don't think making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_faithful_scalar\">docs#has_faithful_scalar</a> shorter is particularly useful since its used so rarely.</p>\n</blockquote>\n<p>Give it some time <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 251702192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630583302
    },
    {
        "content": "<p>Should the rename be part of the PR that loosens the typeclass constraint, or a separate one?</p>",
        "id": 251707998,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630586419
    },
    {
        "content": "<p>Probably separate if we're renaming <code>has_scalar</code></p>",
        "id": 251708312,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630586594
    },
    {
        "content": "<p>I've done the mass change of <code>ordered_module</code> to <code>ordered_smul</code> and edited the main docstrings accordingly.</p>",
        "id": 251823011,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630645173
    },
    {
        "content": "<p>Hmm. I will also move this file earlier in the hierarchy. There are only a few lemmas/instances that actually need <code>module</code>.</p>",
        "id": 251824479,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630646553
    },
    {
        "content": "<p>And what about <code>has_scalar</code>? Should we rename it to <code>has_smul</code>?</p>",
        "id": 252178179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630936097
    },
    {
        "content": "<p>You have my vote!</p>",
        "id": 252179343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630936673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238930.20loosen.20ordered_module.20to.20smul_with_zero/near/251823011\">said</a>:</p>\n<blockquote>\n<p>I've done the mass change of <code>ordered_module</code> to <code>ordered_smul</code> and edited the main docstrings accordingly.</p>\n</blockquote>\n<p>Given that we ha</p>",
        "id": 252303092,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631020657
    },
    {
        "content": "<p>That would also go the right way for the rule of thumb that Prop-valued classes are <code>has_</code> and <code>is_</code>.</p>",
        "id": 252303267,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631020733
    },
    {
        "content": "<p>Should we then also rename <code>topological_ring</code> to <code>is_topological_ring</code>? I guess there are at least 13 other classes that should be renamed <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 252303583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631020869
    },
    {
        "content": "<p>Aaargh, <code>topological_ring</code> is Prop-valued?!? <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span></p>",
        "id": 252303692,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631020911
    },
    {
        "content": "<p>To contrast, <code>ordered_ring</code> isn't.</p>",
        "id": 252303792,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631020935
    },
    {
        "content": "<p>If prop-valuedness is a concern, then <code>smul_is_ordered</code> would be better than <code>has_ordered_smul</code></p>",
        "id": 252304877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631021363
    },
    {
        "content": "<p>So <code>smul_is_continuous</code>?</p>",
        "id": 252304936,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631021389
    },
    {
        "content": "<p>Yes, that would make the data / prop distinction clearer</p>",
        "id": 252305043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631021422
    },
    {
        "content": "<p>I'd prefer <code>is_continuous_smul</code> to <code>smul_is_continuous</code>, if we are going down this path.</p>",
        "id": 252305201,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631021501
    },
    {
        "content": "<p>(to be clear, I'm not sure the change is worth the churn, just suggesting a possible stronger set of rules than what we have)</p>",
        "id": 252305474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631021625
    },
    {
        "content": "<p>That reads less clearly to me, Heather, as the subject is after the verb</p>",
        "id": 252305642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631021687
    },
    {
        "content": "<p>but it has the advantage of keeping <code>is_</code> at the front</p>",
        "id": 252305717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631021716
    },
    {
        "content": "<p>In general I think it's more important to use names that are natural and correct as (mathematical) English than names that mechanically reflect the definition. This is because otherwise the human mathematician has to \"decode\" the names, and can go wrong any time it appears. By contrast, we only have to get the definition of (say) <code>topological_ring</code> right once.</p>\n<p>The Prop/data distinction seems especially unnecessary to carry in the name, you can just use jump to definition to find out what it is.</p>",
        "id": 252305989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631021824
    },
    {
        "content": "<p>Regarding the order, we have lemmas going both ways in mathlib, but I think the preponderance is before. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_id\">docs#continuous_id</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_const\">docs#continuous_const</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.continuous_exp\">docs#complex.continuous_exp</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.continuous_log\">docs#real.continuous_log</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complex.continuous_sin\">docs#complex.continuous_sin</a></p>",
        "id": 252306067,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1631021865
    },
    {
        "content": "<p><code>ordered_module M</code> is exactly aligned with English usage, we say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an ordered module. But for example in <code>ordered_smul</code>, even if we ignore the fact that \"smul\" isn't a word, we also don't use the word \"ordered\" to describe the kind of multiplication we have in mind, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> itself is not an smul either.</p>",
        "id": 252306599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631022106
    },
    {
        "content": "<p>It seems like the real problem is we don't have a word that means something with an <code>smul</code> on it.</p>",
        "id": 252306684,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631022130
    },
    {
        "content": "<p>Yeah, that's why I'm suggesting to add a verb.</p>",
        "id": 252306693,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631022132
    },
    {
        "content": "<p>But anyways it still feels like the whole direction is wrong, e.g., <code>topological_module</code> is much better as a name than <code>smul_is_continuous</code> or whatever.</p>",
        "id": 252306762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631022165
    },
    {
        "content": "<p>Because with <code>smul_is_continuous</code> the reader has to re-synthesize the notion of topological module, and might wonder whether it is really equivalent to <code>smul</code> being continuous.</p>",
        "id": 252306864,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631022221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> So, would you be in favour of returning to the old name <code>ordered_module</code>, even though it doesn't imply that <code>M</code> is a module? Because in 95% of the use cases, <code>M</code> will in fact be a module.</p>",
        "id": 252307434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631022455
    },
    {
        "content": "<p>well now that I look at the actual definition of <code>ordered_smul</code>, I'm totally confused <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 252308850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631022968
    },
    {
        "content": "<p>after all this, it looks like some concept I don't have a name for, anyways.</p>",
        "id": 252309006,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631023033
    },
    {
        "content": "<p>I expected the definition to be just <code>smul_le_smul_of_nonneg</code>, probably.</p>",
        "id": 252309149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631023086
    },
    {
        "content": "<p>I'd argue the prop/data distinction is important, as it would make it clear why <code>[ring R] [comm_ring R]</code> is bad but <code>[module R M] [ordered_module R M]</code> is fine</p>",
        "id": 252312257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631024267
    },
    {
        "content": "<p>I think this distinction is not very important in the grand scheme of things because if you get it wrong then Lean will complain.</p>",
        "id": 252314269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631025008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238930.20loosen.20ordered_module.20to.20smul_with_zero/near/252307434\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> So, would you be in favour of returning to the old name <code>ordered_module</code>, even though it doesn't imply that <code>M</code> is a module? Because in 95% of the use cases, <code>M</code> will in fact be a module.</p>\n</blockquote>\n<p>I don't think I have enough context in the case of <code>ordered_module</code>. I would have a stronger opinion in the case of <code>topological_module</code>. But mostly what I wanted to point out is that this process of removing hypotheses comes with costs for comprehensibility. (I think the example of (semi)module/vector space is well-known.)</p>",
        "id": 252315446,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631025406
    },
    {
        "content": "<p>I agree, and I think comprehensibility is important. But atm I don't see a good solution. If Lean could print (for example) <code>vector_space K V</code> instead of <code>module K V</code> if it can find <code>field K</code> using TC, that would be nice (but also costly for the pretty-printer).</p>",
        "id": 252316786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631025940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238930.20loosen.20ordered_module.20to.20smul_with_zero/near/252314269\">said</a>:</p>\n<blockquote>\n<p>I think this distinction is not very important in the grand scheme of things because if you get it wrong then Lean will complain.</p>\n</blockquote>\n<p>Lean doesn't claim about <code>[ring R] [comm_ring R]</code> (and indeed we had a question about this yesterday for which this was the issue). I definitely like the idea <code>is_topological_ring</code> myself. It makes it much easier to explain to beginners what's going on.</p>",
        "id": 252326712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631029920
    },
    {
        "content": "<p>Well, Reid is right: it complains. But it complains in weird and hardly debuggable ways.</p>",
        "id": 252326851,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631029971
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- no complaints</span>\n</code></pre></div>\n<p>No complaints there, and I don't know whether this theorem is provable or not without trying to prove it.</p>",
        "id": 252327160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631030105
    },
    {
        "content": "<p>Let me add \"at some point\" <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 252327348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631030174
    },
    {
        "content": "<p>In fact I'm surprised, I was expecting to be able to prove either the above or <code>example (R : Type) [comm_ring R] [ring R] (x y : R) : x * y = y * x := sorry</code> but I can't seem to prove either.</p>",
        "id": 252327476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631030233
    },
    {
        "content": "<p>So do people agree with a general renaming of Prop-valued instances?</p>",
        "id": 252327945,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631030408
    },
    {
        "content": "<p>I do but not everyone does. IIRC <span class=\"user-mention\" data-user-id=\"121058\">@Jasmin Blanchette</span> was also in favour, he said it made things much easier in Isabelle/HOL.</p>",
        "id": 252328169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631030481
    },
    {
        "content": "<p>Yup, remember that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 252328437,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631030567
    },
    {
        "content": "<p>I think it might be worth restarting this discussion in #general with a more obvious topic title</p>",
        "id": 252369864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631047769
    },
    {
        "content": "<p>(or moving it)</p>",
        "id": 252369885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631047780
    }
]