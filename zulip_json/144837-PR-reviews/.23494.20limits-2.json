[
    {
        "content": "<p>Is there anything blocking this PR?</p>",
        "id": 148802831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543512789
    },
    {
        "content": "<p>Aah, I see there is still an open comment by Mario on the Github discussion.</p>",
        "id": 148802968,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543512912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you plan fixing that? Or shall I try it?</p>",
        "id": 148802984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543512930
    },
    {
        "content": "<p>I've fixed it.</p>",
        "id": 148821683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543527594
    },
    {
        "content": "<p>Thanks, Scott!</p>",
        "id": 148847373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543565145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> When you last looked at this PR, what was your impression? Anything serious besides your comment on the Github page?</p>",
        "id": 148863597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543587424
    },
    {
        "content": "<p>Hmm, Travis reports the following error</p>\n<div class=\"codehilite\"><pre><span></span>/home/travis/build/leanprover/mathlib/category_theory/equivalence.lean:247:4: error: tactic failed, there are no goals to be solved\nstate:\nno goals\nexternal command exited with status 1\nThe command &quot;leanpkg test&quot; exited with 1.\n</pre></div>",
        "id": 148864254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543588123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Shall I fix this? Or would you rather limit (pun fully intended) the number of people meddling with these PR branches?</p>",
        "id": 148864307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543588186
    },
    {
        "content": "<p><code>equivalence.lean</code> should not even exist on the <code>limits-2</code> branch though?</p>",
        "id": 148864368,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543588209
    },
    {
        "content": "<p>Or were equivalences merged and I forgot?</p>",
        "id": 148864458,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543588311
    },
    {
        "content": "<p>I think there was a separate PR on them</p>",
        "id": 148864512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543588325
    },
    {
        "content": "<p>Ah, maybe I didn't notice and then this got rebased?</p>",
        "id": 148864520,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543588337
    },
    {
        "content": "<p>I added some simp lemmas about isomorphisms, so the error isn't too surprising</p>",
        "id": 148864531,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543588354
    },
    {
        "content": "<p>These are my favourite kind of errors, where Lean proved something before a tactic block was finished...</p>",
        "id": 148864582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543588406
    },
    {
        "content": "<p>I'm actually surprised <code>simp</code> can't handle <code>equivalence.trans</code> on its own now</p>",
        "id": 148864661,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543588475
    },
    {
        "content": "<p>Does travis automatically rebase before building?</p>",
        "id": 148864784,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543588571
    },
    {
        "content": "<p>You should ask our local Travis expert. (I have no clue who this is.)</p>",
        "id": 148864816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543588606
    },
    {
        "content": "<p>I guess it must, since as far as I can tell the PR itself hasn't been rebased</p>",
        "id": 148864838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543588630
    },
    {
        "content": "<p>I will try to fix this</p>",
        "id": 148864841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543588634
    },
    {
        "content": "<p>I should take this opportunity to remind people that doing things after <code>simp</code> is a bad idea if you want your proof to be stable.</p>",
        "id": 148866379,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543590219
    },
    {
        "content": "<p>Sometimes it can be a least of evils, but starting your proofs with <code>dsimp, simp, ...</code> is not a good default.</p>",
        "id": 148866400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543590240
    },
    {
        "content": "<p>In this case luckily there was no compilcated breakage, only the one case where a goal was closed and so the rest of the proof could be deleted. But stuff like <a href=\"https://github.com/leanprover/mathlib/blob/master/category_theory/equivalence.lean#L215\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/category_theory/equivalence.lean#L215\">https://github.com/leanprover/mathlib/blob/master/category_theory/equivalence.lean#L215</a> is scary, a new simp lemma can affect the rest of that proof in ways that are hard to predict.</p>",
        "id": 148866521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543590325
    },
    {
        "content": "<p>In case of emergency, one can always use the workflow: type <code>simp</code>, see new goal G, replace <code>simp</code> by <code>suffices : G, by simp[this],</code> which should work most of the times</p>",
        "id": 148866525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543590330
    },
    {
        "content": "<p>I have proofs where I do things after <code>tidy</code>. I guess that is a capital sin?</p>",
        "id": 148866597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543590375
    },
    {
        "content": "<p>The original limits PR had a lot of these proofs, which I replaced with mostly one-liners</p>",
        "id": 148866630,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543590417
    },
    {
        "content": "<p>But I guess almost all those proofs ought to be killed by <code>tidy</code> + <code>rewrite_search</code>, right?</p>",
        "id": 148866672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543590472
    },
    {
        "content": "<p>Probably, but we don't have rewrite_search yet (and I would guess it's super slow?)</p>",
        "id": 148866727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543590498
    },
    {
        "content": "<p>Remember we still hope to be able to have <code>tidy</code> + <code>rewrite_search</code> output a proof script that Lean can check quickly. It won't be pretty in the source code, but won't be long to type</p>",
        "id": 148866777,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543590560
    },
    {
        "content": "<p>Right, which is sort of what we have right now. The problem is that script uses <code>simp</code></p>",
        "id": 148866794,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543590581
    },
    {
        "content": "<p>But that proof script might not be stable.</p>",
        "id": 148866797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543590583
    },
    {
        "content": "<p>Which is why we need (multi-layer) caching.</p>",
        "id": 148866845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543590604
    },
    {
        "content": "<p>Then we need to use <code>simp_squeeze</code> inside <code>tidy</code></p>",
        "id": 148866852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543590608
    },
    {
        "content": "<p>So I think this is fixable if we can avoid <code>simp</code>, or figure out what it did and do it manually (maybe using Patrick's method)</p>",
        "id": 148866864,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543590617
    },
    {
        "content": "<p><code>simp only</code> is much more stable than <code>simp</code></p>",
        "id": 148866883,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543590641
    },
    {
        "content": "<p>Yes,  I haven't looked at <code>simp_squeeze</code> yet, but it sounds like a good solution</p>",
        "id": 148866907,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543590680
    },
    {
        "content": "<p>(By the way, it is <code>squeeze_simp</code> from <code>tactic.squeeze</code>.)</p>",
        "id": 148866924,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543590718
    },
    {
        "content": "<p>indeed</p>",
        "id": 148866970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543590732
    },
    {
        "content": "<p>I don't remember if it also provides a <code>squeeze_dsimp</code></p>",
        "id": 148866997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543590773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> This is the current PR.</p>",
        "id": 150678673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543660527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> do they do all colimits? Filtered colimits? Products? Binary products? Eventually I think we'll want individual implementations of all of these, for an important category like CommRing.</p>",
        "id": 150710552,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543727490
    },
    {
        "content": "<p>All colimits</p>",
        "id": 150717516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543744047
    },
    {
        "content": "<p>I'm ready to merge this, but there are some trivial merge conflicts in this branch</p>",
        "id": 150720637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543751307
    },
    {
        "content": "<p>Just to flesh out what was going on here -- I knew that arbitrary colimits would follow from something like coproducts and pushouts, but it seemed to me that all three of these constructions (colimits, coproducts, pushouts) were \"the same\" -- they were all \"build a multivariate polynomial ring with coefficients the disjoint union of the rings you're starting with, and then quotient out by some ideal\". For the pushouts and coproducts the generators of the ideal were just a subset of the generators for the general case, so we just did the general case.</p>",
        "id": 150722194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543754958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I think Reid may have already fixed this (it looks like he rearranged the history some last night), but I've just doublechecked that it's rebased onto master, and I've squashed and re-messaged a few commits. (We might consider merging this one without squashing any further, as Reid did a nice job of arranging the PR into a sensible linear sequence of commits.)</p>",
        "id": 150739265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543790062
    },
    {
        "content": "<p>Hooray!</p>",
        "id": 150739398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543790384
    }
]