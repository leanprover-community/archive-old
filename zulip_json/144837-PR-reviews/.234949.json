[
    {
        "content": "<p>It would be nice if people who worked with linear algebra bases in mathlib could contribute to the discussion in <a href=\"https://github.com/leanprover-community/mathlib/issues/4949\">#4949</a>. Yury proposes something which feels suboptimal to me but I don't have a strong opinion here. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> maybe?</p>",
        "id": 216337309,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605096575
    },
    {
        "content": "<p>I'm not so enthousiastic about this change, because I don't have a bad experience with the described issue in <code>is_basis</code> or other data-implicit-proof-explicit definitions such as <code>minimal_polynomial</code>. At least, not bad enough to duplicate the naming system as in <a href=\"https://github.com/leanprover-community/mathlib/issues/4949\">#4949</a>. Yury's idea that hidden proofs in the goal window should have their types shown instead, sounds like a nicer solution.</p>",
        "id": 216337773,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605096883
    },
    {
        "content": "<p>I have been thinking that <code>minimal_polynomial</code> should be redefined as <code>if h : is_integral x then ... else 0</code>. But I don't have the time to do it.</p>",
        "id": 216338467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605097361
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/minimal_polynomial\">docs#minimal_polynomial</a></p>",
        "id": 216338653,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605097486
    },
    {
        "content": "<p>I understand why Yury wants this change. I've been frustrated by the <code>_</code> as well in the past.<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> how hard would it be to make the tactic state smarter, so that it doesn't show the <code>_</code> when it is \"confusing\"?</p>",
        "id": 216339040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605097729
    },
    {
        "content": "<p>I don't yet know how to define \"confusing\". But at least <code>_.foo</code> seems evil. So dot notation on underscores should be avoided. (Not by stating it without dot notation, but by printing whatever the <code>_</code> represents.)</p>",
        "id": 216339093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605097782
    },
    {
        "content": "<p>Maybe we should just remove the heuristic on the C++ side?  (This is a tiny change introduced in 2017.)</p>",
        "id": 216339104,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605097796
    },
    {
        "content": "<p>But I guess it was introduced for a reason?</p>",
        "id": 216339208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605097840
    },
    {
        "content": "<p>Whether or not this is fixed in C++. Can we define <code>repr</code> using the <code>if .. then .. else ..</code> method? Or would this be too much of a refactor?</p>",
        "id": 216339291,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605097889
    },
    {
        "content": "<p>The reason was that I found <code>cast (... huge proof ...) (.. term you actually care about ...)</code> to be hard to read.</p>",
        "id": 216339818,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605098173
    },
    {
        "content": "<p>This is the relevant commit: <a href=\"https://github.com/leanprover-community/lean/commit/9367e94900215281b2f9b8039400ee5866bee0ea\">https://github.com/leanprover-community/lean/commit/9367e94900215281b2f9b8039400ee5866bee0ea</a></p>",
        "id": 216339983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605098272
    },
    {
        "content": "<p>Can we find a (smart) compromise?</p>",
        "id": 216340045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605098290
    },
    {
        "content": "<p>Say, if <code>(... huge proof ...)</code> pretty prints to less than 10 chars, then we keep it?</p>",
        "id": 216340086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605098318
    },
    {
        "content": "<p>That is the dumb compromise. A smart compromise might determine whether the <code>_</code> is \"confusing\".<br>\nBut as I said before, I don't know how to define \"confusing\".</p>",
        "id": 216340168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605098362
    },
    {
        "content": "<p>What's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of a proof using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis.repr\">docs#is_basis.repr</a> that is unpleasant to navigate?</p>",
        "id": 216340338,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605098457
    },
    {
        "content": "<p>Yury gave a link in the PR, but that might not be mwe</p>",
        "id": 216340559,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605098582
    },
    {
        "content": "<p>I'm going to revert most of <a href=\"https://github.com/leanprover-community/mathlib/issues/4949\">#4949</a>, leaving only a couple of new lemmas.</p>",
        "id": 216343964,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1605100609
    },
    {
        "content": "<p>It would be nice to have some solution to the \"<code>_</code> in the goal view\" problem but it's not urgent.</p>",
        "id": 216344119,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1605100686
    },
    {
        "content": "<p>Does clicking the underscore to toggle its widget in vscode not help? That's how I've looked at what such proofs stand for</p>",
        "id": 216345333,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605101367
    },
    {
        "content": "<p>I'm pretty sure Yury uses Emacs, which doesn't have widgets (yet?)</p>",
        "id": 216345769,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605101599
    },
    {
        "content": "<p>Could we solve this with a special attribute that means \"never show terms of this type as _?</p>",
        "id": 216345930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605101694
    },
    {
        "content": "<p>It would save us having to come up with a heuristic</p>",
        "id": 216346010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605101751
    },
    {
        "content": "<p>I think the problem is that the change to display proofs as <code>_</code> also removed the useful old behavior with <code>set_option pp.proofs false</code> of showing the type of the proof rather than the proof itself</p>",
        "id": 216346422,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605101952
    },
    {
        "content": "<p>i.e. the generally useful behaviors are the current \"display as <code>_</code>\" and the old \"display as <code>⌞true⌟</code>\" and only rarely would you want to see the actual proof term</p>",
        "id": 216346689,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605102103
    },
    {
        "content": "<p>Seems to me that while more verbose, <code>(_ : true)</code> would makes more sense than <code>⌞true⌟</code></p>",
        "id": 216347715,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605102596
    },
    {
        "content": "<p>Or perhaps <code>‹true›</code> with the fancy angle brackets <del>I don't know how to type</del></p>",
        "id": 216347783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605102619
    },
    {
        "content": "<p><code>\\f&lt;</code></p>",
        "id": 216347815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605102635
    },
    {
        "content": "<p>I think that Yury's original approach was the right one. I've been using the following refinement on the implicitness heuristic for a while: for partial functions (functions returning <code>Type</code> with arguments of type <code>Prop</code>), a Type argument is only implicit if it is implied by later Type arguments; a Prop argument if it is implied by any later arguments.</p>\n<p>There are a number of reasons why the alternative can be frustrating. <code>choice h</code> is the worst one; you have to pass an existential proof but you can't even explain what the exists proof is for and the type inference gets messy. Same thing when you have to prove a hypothesis like <code>? \\in ?</code> and you want to pass <code>trivial</code> as a proof of <code>37 \\in set.univ</code>; type ascription doesn't work here.</p>",
        "id": 216351045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605104288
    },
    {
        "content": "<p>Plus, from the printing angle the hypothesis is never the \"explanation\" of what the function is supposed to be. If we had a partial division operator, we would still want to write <code>1 / x</code> and find some way to elide the proof, not <code>1 / hx</code> and elide the value</p>",
        "id": 216351338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605104457
    },
    {
        "content": "<p>What about totalizing <code>repr</code>?</p>",
        "id": 216352168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605104855
    },
    {
        "content": "<p>we can't because it's not a function, it is a <code>M →ₗ (ι →₀ R)</code></p>",
        "id": 216357834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605107562
    },
    {
        "content": "<p>oh well actually I guess we can return the zero map in the bad case</p>",
        "id": 216358060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605107660
    },
    {
        "content": "<p>I mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Given a basis, any vector can be written as a linear combination of the basis vectors. They are</span>\n<span class=\"sd\">given by this linear map. This is one direction of `module_equiv_finsupp`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">basis.repr</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₗ</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">v</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">hv.1.repr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">linear_map.id.cod_restrict</span> <span class=\"n\">_</span> <span class=\"n\">hv.mem_span</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 216358102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605107688
    },
    {
        "content": "<p>With the point being that it's up to the proof to resolve the <code>if</code>, rather than the theorem statement?</p>",
        "id": 216358302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605107767
    },
    {
        "content": "<p>This won't work with the <code>linear_equiv</code> version.</p>",
        "id": 216358373,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1605107800
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis.equiv_fun\">docs#is_basis.equiv_fun</a></p>",
        "id": 216358395,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1605107811
    },
    {
        "content": "<p>With <code>minimal_polynomial</code> I really don't like the way <code>minimal_polynomial hx</code> reads, compared to <code>minimal_polynomial x</code>.</p>",
        "id": 216358407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605107816
    },
    {
        "content": "<p>Hmm, you are right Yury. I hadn't thought of that downside</p>",
        "id": 216358572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605107891
    },
    {
        "content": "<p>yeah mathlib has some partial functions, even if we try to avoid them when possible, hence the rule I proposed above</p>",
        "id": 216358660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605107942
    },
    {
        "content": "<p>it might also make sense to bundle a basis, and think of it as a characteristic predicate for \"presents as the free module on\"</p>",
        "id": 216358754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605107992
    },
    {
        "content": "<p>maybe such a \"bundled basis\" should just be identified with <code> M ≃ₗ[R] (ι → R)</code>?</p>",
        "id": 216358958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605108070
    },
    {
        "content": "<p>and <code>is_basis.equiv_fun</code> is really to be understood as <code>bundled_basis.mk</code></p>",
        "id": 216359123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605108132
    },
    {
        "content": "<p>so we don't need a new type</p>",
        "id": 216359151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605108151
    },
    {
        "content": "<p>This way we can have alternative constructors with better definitional equalities.</p>",
        "id": 216359244,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1605108203
    },
    {
        "content": "<p>E.g., we can have <code>linear_equiv.id</code> as a basis on <code>ι → R</code>.</p>",
        "id": 216359283,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1605108231
    },
    {
        "content": "<p>Right, this is the better notion constructively too. The usual definition of a basis is saying that the leftward map is injective and surjective</p>",
        "id": 216359358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605108258
    },
    {
        "content": "<p>I think these formulas are missing a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">{}_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.45110799999999995em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> by the way</p>",
        "id": 216359377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605108271
    },
    {
        "content": "<p>I copied this from mathlib</p>",
        "id": 216359409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605108286
    },
    {
        "content": "<p>that must be for a finite index type then</p>",
        "id": 216359436,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605108300
    },
    {
        "content": "<p>oh but there is a fintype assumption</p>",
        "id": 216359439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605108300
    },
    {
        "content": "<p>do we even have the finsupp version? I don't see it in <code>linear_algebra.basis</code></p>",
        "id": 216359508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605108338
    }
]