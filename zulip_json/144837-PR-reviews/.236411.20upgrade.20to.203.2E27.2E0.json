[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> gave us a new Lean today! The upgrade was relatively painless, except for two category theory proofs that are no longer <code>dec_trivial</code>.</p>",
        "id": 227774793,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263233
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/538\">lean#538</a> looks like the most likely culprit, although I'm not sure. Anyone feel like investigating?</p>",
        "id": 227774885,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263266
    },
    {
        "content": "<p>What are the decidable instances in question?</p>",
        "id": 227775600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614263532
    },
    {
        "content": "<p><code>(ùü≠ (discrete Œ±)·µí·µñ).map f ‚â´ (_.mpr (iso.refl Y)).hom = (_.mpr (iso.refl X)).hom ‚â´ (F.left_op ‚ãô F).map f</code></p>",
        "id": 227775689,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263572
    },
    {
        "content": "<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">pairwise</span> <span class=\"n\">Œπ</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">cocone</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op.œÄ.app</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"n\">iso.refl</span> <span class=\"o\">(</span><span class=\"n\">cocone</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">‚â´</span>\n        <span class=\"o\">((</span><span class=\"n\">cones.postcompose_equivalence</span> <span class=\"o\">(</span><span class=\"n\">nat_iso.op</span> <span class=\"o\">(</span><span class=\"n\">pairwise_diagram_iso</span> <span class=\"n\">U</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">functor.obj</span>\n           <span class=\"o\">(</span><span class=\"n\">cone.whisker</span> <span class=\"o\">(</span><span class=\"n\">pairwise_to_opens_le_cover</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">opens_le_cover_cocone</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">œÄ.app</span>\n          <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 227775794,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263604
    },
    {
        "content": "<p>what's the type of that equality?</p>",
        "id": 227776172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614263740
    },
    {
        "content": "<p><code>(ùü≠ (discrete Œ±)·µí·µñ).obj X ‚ü∂ (F.left_op ‚ãô F).obj Y</code></p>",
        "id": 227776301,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263781
    },
    {
        "content": "<p>and <code>((functor.const (pairwise Œπ)·µí·µñ).obj (cocone U).op.X).obj j ‚ü∂ (diagram U).op.obj j</code></p>",
        "id": 227776363,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263809
    },
    {
        "content": "<p>hm, can you make a MWE so I can <code>#check</code> that expression?</p>",
        "id": 227776466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614263852
    },
    {
        "content": "<p>It's probably easiest just to look at <code>discrete_category.lean:142</code> on master</p>",
        "id": 227776601,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263891
    },
    {
        "content": "<p>The goal hasn't changed in the new branch</p>",
        "id": 227776638,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263907
    },
    {
        "content": "<p>the proof is by tidy, you claim it's by <code>apply_instance : decidable ...</code>?</p>",
        "id": 227776707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614263942
    },
    {
        "content": "<p>Try <code>tidy?</code></p>",
        "id": 227776745,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263952
    },
    {
        "content": "<p>it's <code>intros, exact dec_trivial</code></p>",
        "id": 227776778,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614263962
    },
    {
        "content": "<p>geez, the decidability proof is huge</p>",
        "id": 227777434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614264224
    },
    {
        "content": "<p>once again I wish lean had printing for dag-like terms</p>",
        "id": 227777539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614264252
    },
    {
        "content": "<p>As in, printed <code>g (f a) (f a)</code> as <code>let fa := f a in g fa fa</code>?</p>",
        "id": 227777644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614264299
    },
    {
        "content": "<p>Or actually renders to graphviz</p>",
        "id": 227777701,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614264317
    },
    {
        "content": "<p>the first</p>",
        "id": 227777745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614264339
    },
    {
        "content": "<p>ideally it would only do this when <code>f a</code> is large enough or multitudinous enough that there is a character count decrease by the replacement</p>",
        "id": 227777886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614264378
    },
    {
        "content": "<p>Even if it didn't, it would still be useful if a bit low level</p>",
        "id": 227777984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614264415
    },
    {
        "content": "<p>Can you resolve this for your case by introducing dummy instances?</p>",
        "id": 227778039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614264432
    },
    {
        "content": "<p>So that instead of finding <code>f a : decidable foo</code> it finds <code>fa : decidable foo</code></p>",
        "id": 227778090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614264453
    },
    {
        "content": "<p>I tried to get it into the goal view using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">apply</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>so I can use widgets to drill down, but it's really sluggish</p>",
        "id": 227778767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614264731
    },
    {
        "content": "<p>yeah it straight up refuses to open a popup</p>",
        "id": 227779105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614264854
    },
    {
        "content": "<p>Ah, I managed to get a mwe out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.discrete_category</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚•§</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_eq</span> <span class=\"o\">((</span><span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">F.left_op</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 227780385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614265337
    },
    {
        "content": "<p>found it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">discrete</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚•§</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_eq</span> <span class=\"o\">((</span><span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">F.left_op</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- by show_term {apply_instance} -- decidable_eq_of_subsingleton ...</span>\n<span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">ùü≠</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">functor.left_op</span> <span class=\"n\">F</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n<span class=\"bp\">@</span><span class=\"n\">decidable_eq_of_subsingleton</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- exact tactic failed, type mismatch, given expression has type</span>\n<span class=\"c1\">--   subsingleton</span>\n<span class=\"c1\">--     (ulift (plift (opposite.unop ((F.left_op ‚ãô F).obj Y) = opposite.unop ((ùü≠ (discrete Œ±)·µí·µñ).obj X))))</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   subsingleton ((ùü≠ (discrete Œ±)·µí·µñ).obj X ‚ü∂ (F.left_op ‚ãô F).obj Y)</span>\n</code></pre></div>",
        "id": 227781904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614265899
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.discrete_category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- unification fail</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">discrete</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">has_hom.hom</span><span class=\"o\">],</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span> <span class=\"c1\">-- ok</span>\n</code></pre></div>",
        "id": 227784364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614266712
    },
    {
        "content": "<p>The offending instance is <code>attribute [irreducible] has_hom.opposite</code></p>",
        "id": 227785355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614267078
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.has_hom.opposite\">docs#category_theory.has_hom.opposite</a>?</p>",
        "id": 227786009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614267307
    },
    {
        "content": "<p>Adding these to <code>category_theory.opposites</code> should fix the issue</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">B</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">unop</span> <span class=\"n\">A</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op_equiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subsingleton_iff.2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">B</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">unop</span> <span class=\"n\">A</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op_equiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span>\n</code></pre></div>\n<p>but it causes the proof just after to break</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">category.opposite</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g.unop</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"o\">(</span><span class=\"n\">f.unop</span> <span class=\"bp\">‚â´</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n<span class=\"n\">opposites.lean</span><span class=\"o\">:</span><span class=\"mi\">97</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">=</span> <span class=\"n\">f</span>\n<span class=\"n\">opposites.lean</span><span class=\"o\">:</span><span class=\"mi\">97</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"o\">(</span><span class=\"n\">h.unop</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.unop</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">h.unop</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.unop</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.unop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span>\n</code></pre></div>",
        "id": 227787553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614267908
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">B</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">unop</span> <span class=\"n\">A</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">op_equiv</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subsingleton_iff.2</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">unop</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">unop</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f.unop</span> <span class=\"bp\">‚â´</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f.unop</span> <span class=\"bp\">‚â´</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">unop</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 227790265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614268821
    },
    {
        "content": "<p>Actually I think this is probably just a side effect of the bug that 3.27 fixes, so I won't try to track this down more</p>",
        "id": 227790454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614268879
    },
    {
        "content": "<p>Thanks Mario! That's some impressive debugging work</p>",
        "id": 227795929,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614270727
    },
    {
        "content": "<p>I thought we got rid of all the <code>attribute [irreducible]</code>s, but there's one right after <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.has_hom.hom.unop/src\">src#category_theory.has_hom.hom.unop</a></p>",
        "id": 227796000,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614270760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236411.20upgrade.20to.203.2E27.2E0/near/227790454\">said</a>:</p>\n<blockquote>\n<p>Actually I think this is probably just a side effect of the bug that 3.27 fixes, so I won't try to track this down more</p>\n</blockquote>\n<p>As in, after adding the two instances, old lean breaks but you expect new lean to succeed?</p>",
        "id": 227799540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614272130
    }
]