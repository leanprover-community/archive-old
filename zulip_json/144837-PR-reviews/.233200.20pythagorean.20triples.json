[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255743\">@Paul van Wamelen</span> Hi! I went through the new file, and turned it sort of upside down. I pushed the result to a new branch: <a href=\"https://github.com/leanprover-community/mathlib/blob/0bf327c86d3ee64a899f9b0db9c7b9ebc47b07f3/src/number_theory/pythagorean_triples.lean\">https://github.com/leanprover-community/mathlib/blob/0bf327c86d3ee64a899f9b0db9c7b9ebc47b07f3/src/number_theory/pythagorean_triples.lean</a><br>\nI don't say that you should copy everything, but there are probably some things that you might find interesting.<br>\nAll in all, I think your file was already really good, but some of the proofs were quite long and slow.<br>\n(And even now, the file is not as fast as I had hoped.)</p>",
        "id": 202824457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593797317
    },
    {
        "content": "<p>Thank you very much Johan! I certainly learned a few things going through this. I was ready to push the changes, but realized I should probably do the responsible thing and also prove:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">coprime_classification</span> <span class=\"o\">:</span>\n  <span class=\"n\">pythagorean_triple</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">∨</span>\n            <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n          <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∨</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n          <span class=\"bp\">∧</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">gcd</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>because that is probably the version that is most applicable/useful (and prettier). I'll have to add <code>int.gcd m n = 1</code> to the definition of <code>classified</code>. Does this sound right?</p>",
        "id": 202889536,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1593893588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255743\">@Paul van Wamelen</span> Whatever you want (-; Just view my branch as a bunch of suggestions.</p>",
        "id": 202890090,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593894528
    },
    {
        "content": "<p>You might wnat to do the <code>gcd = 1</code> classification first, and then in the last 4 lemmas of the file do the general case.</p>",
        "id": 202890110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593894581
    },
    {
        "content": "<p>If you do that, it makes sense to add <code>gcd = 1</code> to classified.</p>",
        "id": 202890113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593894593
    },
    {
        "content": "<p>By then, maybe <code>classified</code> should become a <code>structure</code>.</p>",
        "id": 202890163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593894608
    },
    {
        "content": "<p>an <code>inductive</code> you mean?</p>",
        "id": 202890177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593894641
    }
]