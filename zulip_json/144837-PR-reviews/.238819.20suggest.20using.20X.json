[
    {
        "content": "<p>You can now write <code>suggest using X</code>, to only give suggestions which make use of the local hypothesis <code>X</code>.</p>\n<p>Similarly <code>suggest using X Y Z</code> for multiple hypotheses. <code>library_search using X</code> is also enabled.</p>\n<p>This makes <code>suggest</code> much more useful. Previously</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">suggest</span>\n</code></pre></div>\n<p>would have just said <code>exact P</code>.</p>\n<p>Now you can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">suggest</span> <span class=\"n\">using</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n</code></pre></div>\n<p>and get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.diff</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.union</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.inter</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.append</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.bag_inter</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.remove_all</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">list.reverse_core</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n</code></pre></div>",
        "id": 250321647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629705937
    },
    {
        "content": "<p>(I'm disappointed it took me this long to think of this feature.)</p>",
        "id": 250323173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629707139
    },
    {
        "content": "<p>Another one we could add is <code>suggest matching \"foo\"</code> which would only suggest lemmas with \"foo\" in their name.</p>",
        "id": 250323189,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629707150
    },
    {
        "content": "<p>Unfortunately this probably wouldn't result in any speed-up: munging strings in Lean3 is so slow that it's faster to call <code>apply</code> and only check the names afterwards... :-)</p>",
        "id": 250323287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629707209
    },
    {
        "content": "<p>But checking them by hand, or checking them using the tactic?</p>",
        "id": 250324585,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629708064
    },
    {
        "content": "<p>Oh, checking using the tactic. So it would just be a filter on the results, rather than a filter on the list of lemmas it has to try under the hood.</p>",
        "id": 250325188,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629708470
    },
    {
        "content": "<p>(Perhaps just as significantly as string munging being slow in Lean3, calling <code>apply</code> is <strong>fast</strong>.)</p>",
        "id": 250325257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629708499
    }
]