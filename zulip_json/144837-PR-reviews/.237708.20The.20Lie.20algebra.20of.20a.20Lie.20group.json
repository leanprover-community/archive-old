[
    {
        "content": "<p>After merging the branch master this PR triggers an error that was never triggered before, and that is triggered only some times (it triggered it on mathlib, but it didn't on my local machine, but after compiling the file enough times it triggered it also on my machine).</p>\n<p>Changing the corresponding function to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The differential of a function interpreted in the context of derivations. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">fdifferential_map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">^‚àû‚üÆ</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"n\">I'</span><span class=\"o\">,</span> <span class=\"n\">M'</span><span class=\"bp\">‚üØ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">point_derivation</span> <span class=\"n\">I</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">point_derivation</span> <span class=\"n\">I'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">^‚àû‚üÆ</span><span class=\"n\">I'</span><span class=\"o\">,</span> <span class=\"n\">M'</span><span class=\"bp\">;</span> <span class=\"bp\">ùïú‚üØ</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smooth_map.add_comp</span><span class=\"o\">,</span> <span class=\"n\">derivation.map_add</span><span class=\"o\">],</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">k</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smooth_map.smul_comp</span><span class=\"o\">,</span> <span class=\"n\">derivation.map_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">leibniz'</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">point_derivation.module</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">C</span><span class=\"bp\">^‚àû‚üÆ</span><span class=\"n\">I'</span><span class=\"o\">,</span> <span class=\"n\">M'</span><span class=\"bp\">;</span> <span class=\"bp\">ùïú‚üØ</span> <span class=\"bp\">ùïú</span><span class=\"o\">),</span> <span class=\"n\">simp</span> <span class=\"n\">only</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">derivation.leibniz</span><span class=\"o\">,</span> <span class=\"n\">smooth_map.mul_comp</span><span class=\"o\">],</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">point_derivation.scalar_def</span><span class=\"o\">,</span> <span class=\"n\">times_cont_mdiff_map.comp_apply</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"n\">point_derivation.scalar_def</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>shows that Lean is having troubles with recognizing the scalar multiplication as such. Can some mantainer / expert have a look?</p>",
        "id": 242883711,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623851741
    },
    {
        "content": "<p>I went back to the commit before the merge and indeed it typechecks, what is the quickest way to find out what commit broke it?</p>",
        "id": 243054622,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623951296
    },
    {
        "content": "<p>There is <code>git bisect</code>, but it might take a ton of time to do all the compiles. Maybe the binary caches can help?</p>",
        "id": 243054838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623951381
    },
    {
        "content": "<p>To be honest, I also have \"troubles with recognizing the scalar multiplication as such\"</p>",
        "id": 243054928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623951424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243054928\">said</a>:</p>\n<blockquote>\n<p>To be honest, I also have \"troubles with recognizing the scalar multiplication as such\"</p>\n</blockquote>\n<p>What do you mean?</p>",
        "id": 243057057,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623952359
    },
    {
        "content": "<p>I don't see a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚àô</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">‚àô</span></span></span></span> in the code you pasted</p>",
        "id": 243057132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623952388
    },
    {
        "content": "<p>That doesn't have to be a problem of course. I'm not really familiar with this part of the library.</p>",
        "id": 243057191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623952415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243057132\">said</a>:</p>\n<blockquote>\n<p>I don't see a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚àô</mo></mrow><annotation encoding=\"application/x-tex\">\\bullet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord\">‚àô</span></span></span></span> in the code you pasted</p>\n</blockquote>\n<p>Did you checkout in my branch? Or you mean by looking just at the code in my snippet? It is in the goal!</p>",
        "id": 243057363,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623952482
    },
    {
        "content": "<p>There is four instances of scalar multiplication in the goal, and lean only recognizes two of them as such after the merge</p>",
        "id": 243057493,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623952544
    },
    {
        "content": "<p>But it did recognize all four before: I checked out in that commit and it still does... there something in the merge that broke it</p>",
        "id": 243057641,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623952586
    },
    {
        "content": "<p>Isn't it possible to download the oleans for a specific commit? If yes I can do a bisecting research manually</p>",
        "id": 243087236,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623965177
    },
    {
        "content": "<p>Is <code>leanproject get-cache --rev=commit-hash</code> what you need?</p>",
        "id": 243088774,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1623966083
    },
    {
        "content": "<p>If I do that I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"c1\">--rev=ff44ed50037063894c3f1e3c523e30f969c8e91e</span>\n<span class=\"n\">Usage</span><span class=\"o\">:</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"o\">[</span><span class=\"n\">OPTIONS</span><span class=\"o\">]</span>\n<span class=\"n\">Try</span> <span class=\"bp\">'</span><span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"bp\">-</span><span class=\"n\">h'</span> <span class=\"n\">for</span> <span class=\"n\">help.</span>\n\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">option</span><span class=\"o\">:</span> <span class=\"c1\">--rev</span>\n</code></pre></div>",
        "id": 243091487,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623967696
    },
    {
        "content": "<p>The help says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"bp\">-</span><span class=\"n\">h</span>\n<span class=\"n\">Usage</span><span class=\"o\">:</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"o\">[</span><span class=\"n\">OPTIONS</span><span class=\"o\">]</span>\n\n  <span class=\"n\">Restore</span> <span class=\"n\">cached</span> <span class=\"n\">olean</span> <span class=\"n\">files.</span>\n\n<span class=\"n\">Options</span><span class=\"o\">:</span>\n  <span class=\"c1\">--force     Get cache even if the repository is dirty.</span>\n  <span class=\"bp\">-</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">--help  Show this message and exit.</span>\n</code></pre></div>",
        "id": 243091537,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623967730
    },
    {
        "content": "<p>What am I doing wrong?</p>",
        "id": 243091579,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623967752
    },
    {
        "content": "<p>Looks like you need to upgrade <code>leanproject</code>.</p>",
        "id": 243091722,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623967832
    },
    {
        "content": "<p>If you installed <code>leanproject</code> using <code>pip</code>, then <code>pip install -U mathlibtools</code> should do the trick.</p>",
        "id": 243091770,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623967868
    },
    {
        "content": "<p>What kind of commits can I run that command for? I am using it for commits of master branch, as in PRs that get merged as commits, but I always get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">get</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"c1\">--rev=2a93644a2df19713a56db7abf39410bc9eacb781</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"kn\">local</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Looking</span> <span class=\"n\">for</span> <span class=\"n\">remote</span> <span class=\"n\">mathlib</span> <span class=\"n\">oleans</span>\n<span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">oleanstorage.azureedge.net</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"n\">a93644a2df19713a56db7abf39410bc9eacb781.tar.xz</span>¬†<span class=\"n\">to</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">nicoc</span><span class=\"bp\">\\.</span><span class=\"n\">mathlib</span><span class=\"bp\">\\</span><span class=\"mi\">2</span><span class=\"n\">a93644a2df19713a56db7abf39410bc9eacb781.tar.xz</span>\n<span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">fetch</span> <span class=\"n\">cached</span> <span class=\"n\">oleans</span>\n</code></pre></div>\n<p>no matter what commit I try it for...</p>",
        "id": 243096896,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623971155
    },
    {
        "content": "<p>Also <code>leanproject up</code> works on the master branch so it is not a problem of my github account or anything similar</p>",
        "id": 243096968,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623971193
    },
    {
        "content": "<p>Ah, the issue is that not every single commit on the <code>master</code>  branch has an accompanying <code>.tar.xz</code> file, since bors merges commits in batches...</p>",
        "id": 243097738,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623971767
    },
    {
        "content": "<p>How do I find out which commits have a .tar.xz file? Even if only one in 10 had oleans that would be great</p>",
        "id": 243098076,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623972016
    },
    {
        "content": "<p>Hmm, there's probably a better way with some scripting, but the commits that have green checkmarks or red x's <a href=\"https://github.com/leanprover-community/mathlib/commits/master\">here</a> should have downloadable olean files.</p>",
        "id": 243098337,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623972238
    },
    {
        "content": "<p>Ok thanks this is working!</p>",
        "id": 243101088,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623974613
    },
    {
        "content": "<p>The code broke in between <a href=\"https://github.com/leanprover-community/mathlib/issues/7909\">#7909</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7914\">#7914</a>... There is 4 PRs</p>",
        "id": 243101555,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623974931
    },
    {
        "content": "<p>Thanks for digging into this! I know how frustrating these things can be...</p>",
        "id": 243102099,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1623975454
    },
    {
        "content": "<p>Thank you for your help! I need to compile these 4 PRs manually, which means compiling two because I can compile the middle one and then either the 1 or the 3 depending on the result of the 2</p>",
        "id": 243102733,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1623975917
    },
    {
        "content": "<p>I think your problem is that the smul induced by <code>point_derivation.algebra</code> is not defeq to the smul induced by <code>point_derivation.module</code></p>",
        "id": 243134784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624007346
    },
    {
        "content": "<p><code>ring_hom.to_algebra</code> in general generates inconvenient smul actions</p>",
        "id": 243134809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624007363
    },
    {
        "content": "<p>Things would be a lot less painful if you introduced a type alias like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">eval_at</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">C</span><span class=\"bp\">^‚àû‚üÆ</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">ùïú‚üØ</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"bp\">ùïú</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>so that you can attach instances to <code>eval_at</code> rather than having <code>@</code>s everywhere</p>",
        "id": 243135138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624007538
    },
    {
        "content": "<p>The PR that broke it is <a href=\"https://github.com/leanprover-community/mathlib/issues/7885\">#7885</a>. <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>  Maybe you want to have a look as well to what is happening?</p>",
        "id": 243137986,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624009288
    },
    {
        "content": "<p>Looking again at your PR on gitpod, it looks like there's a bug in <code>simp</code></p>",
        "id": 243138028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624009317
    },
    {
        "content": "<p>If you run <code>recover</code> before <code>refl</code> you'll see there's actually a second goal</p>",
        "id": 243138087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624009330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicol√≤ Cavalleri</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243137986\">said</a>:</p>\n<blockquote>\n<p>The PR that broke it is <a href=\"https://github.com/leanprover-community/mathlib/issues/7885\">#7885</a>. <span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span>  Maybe you want to have a look as well to what is happening?</p>\n</blockquote>\n<p>I will look this afternoon, especially as I've been meaning to check in on that PR again anyway.</p>",
        "id": 243138439,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624009506
    },
    {
        "content": "<p>I think I found a fix: <a href=\"https://github.com/leanprover-community/mathlib/pull/7708/files#r654304392\">https://github.com/leanprover-community/mathlib/pull/7708/files#r654304392</a></p>",
        "id": 243139830,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624010298
    },
    {
        "content": "<p>There's some very weird behavior happening there with typeclass inference when mixed with new-style structures extending old-style structures</p>",
        "id": 243139857,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624010325
    },
    {
        "content": "<p>Making <code>derivation</code> an old-style structure would probably have avoided the problem in the first place</p>",
        "id": 243139889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624010358
    },
    {
        "content": "<p>I see. Nice work!</p>",
        "id": 243144578,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624013816
    },
    {
        "content": "<p>Thank you very much! I am confused though: you proposed fix on github works without making derivation an old-style structure, so should I still do that?</p>",
        "id": 243149266,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624016903
    },
    {
        "content": "<p>Also should we not touch the code in <a href=\"https://github.com/leanprover-community/mathlib/issues/7885\">#7885</a>? My code should have worked as it was written before, I tried to make derivations an old-style structure but it breaks a lot of stuff... I love this workaround that Eric found but I would also like to fix the problem at its root once for all!</p>",
        "id": 243149835,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624017282
    },
    {
        "content": "<p>I don't think we need to explore using an old-style structure right now, but it might be worth trying it in a standalone PR</p>",
        "id": 243152844,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624019238
    },
    {
        "content": "<p>The root of the problem feels like a combination of your code using unusual non-instance typeclasses throughout, and a likely corner-case in the hacks needed to allow mixing old and new structure constructors</p>",
        "id": 243152995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624019313
    },
    {
        "content": "<p>I think the <code>eval_at</code> idea above is worth   pursuing, although I don't have any idea what a good name is</p>",
        "id": 243153256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624019471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243153256\">said</a>:</p>\n<blockquote>\n<p>I think the <code>eval_at</code> idea above is worth   pursuing, although I don't have any idea what a good name is</p>\n</blockquote>\n<p>I will give it a try</p>",
        "id": 243162064,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624023662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243153256\">said</a>:</p>\n<blockquote>\n<p>I think the <code>eval_at</code> idea above is worth   pursuing, although I don't have any idea what a good name is</p>\n</blockquote>\n<p>I did it but still it does not solve that problem...</p>",
        "id": 243257588,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624120549
    },
    {
        "content": "<p>I think it's still worth having to remove the <code>@</code>s</p>",
        "id": 243261920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624126142
    },
    {
        "content": "<p>This is very risky though because one might want to evaluate two point derivations at different points <code>x y</code> on the same function, which at this point has to be an element of <code>C^‚àû‚üÆI, G; ùïú‚üØ[x]</code> and <code>C^‚àû‚üÆI, G; ùïú‚üØ[y]</code>. Take for example the case of the equality defining left invariant derivations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">ùíÖ</span><span class=\"o\">(</span><span class=\"bp\">ùë≥</span> <span class=\"n\">I</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">derivation.eval_at</span> <span class=\"mi\">1</span> <span class=\"n\">to_derivation</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">derivation.eval_at</span> <span class=\"n\">g</span> <span class=\"n\">to_derivation</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>With this new method it breaks because f needs to be of two different types. I can fix it with an inclusion but it makes things slower... is it worth it? <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> ?</p>",
        "id": 243265389,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624131351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicol√≤ Cavalleri</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243257588\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243153256\">said</a>:</p>\n<blockquote>\n<p>I think the <code>eval_at</code> idea above is worth   pursuing, although I don't have any idea what a good name is</p>\n</blockquote>\n<p>I did it but still it does not solve that problem...</p>\n</blockquote>\n<p>What should we do regarding this? <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> did you have time to take a look at the code?</p>",
        "id": 243265444,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624131441
    },
    {
        "content": "<p>You'd add a helper to cast f to the appropriate type in each place</p>",
        "id": 243267348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624134286
    },
    {
        "content": "<p>Like we have additive.of_mul</p>",
        "id": 243267352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624134304
    },
    {
        "content": "<p>So you'd have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A smooth map evaluated at a particular point.</span>\n<span class=\"sd\">By not actually evaluating the map, we can move between the value of the map and the value of its differential -/</span>\n<span class=\"kd\">@[derive comm_ring]</span>\n<span class=\"kd\">def</span> <span class=\"n\">smooth_map.evaluation</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">smooth_map</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- whatever the arguments are</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">smooth_map.eval_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">smooth_map</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">smooth_map.evaluation</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 243267845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624134970
    },
    {
        "content": "<p>Actually specifying the type works, but the build on github waits very little before triggering time out, and figuring out all types are ok with this new formulation takes more than github can wait...</p>",
        "id": 243268579,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624136023
    },
    {
        "content": "<p>I am scared this will trigger a lot of timeouts</p>",
        "id": 243268589,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624136042
    },
    {
        "content": "<p>Well it triggers timeout after 40s and there is no way it will compile in less then 40s... Do you have other ideas? I have the feeling we are taking a wrong turn as there is so much room for timeouts with this formulation!</p>",
        "id": 243268757,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624136282
    },
    {
        "content": "<p>Oh, did you already push this to the branch? I didn't see it</p>",
        "id": 243269126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624136812
    },
    {
        "content": "<p>My guess is that lean isn't very happy about <code>point_derivation.pointed_smooth_map</code> (what I was calling <code>eval_at</code>) being reducible</p>",
        "id": 243269245,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624137003
    },
    {
        "content": "<p>Because if it's reducible, you get a weird mix of instances (module, mul_action, etc) from both the regular map and the pointed one</p>",
        "id": 243269295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624137100
    },
    {
        "content": "<p>So probably you need to remove <code>reducible</code> and copy across the instances you need manually</p>",
        "id": 243269340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624137136
    },
    {
        "content": "<p>The problem or removing that is that Lean for some reason does not rewrite <code>point_derivation.pointed_smooth_map</code> in some circumstances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"bp\">^‚àû‚üÆ</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">ùïú‚üØ</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">pointed_smooth_map</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span> <span class=\"c1\">--works</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"bp\">ùïú</span> <span class=\"n\">C</span><span class=\"bp\">^‚àû‚üÆ</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"bp\">ùïú‚üØ</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">pointed_smooth_map</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 243269536,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624137400
    },
    {
        "content": "<p>Also, will</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">‚àÄ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">^‚àû‚üÆ</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"bp\">;</span> <span class=\"bp\">ùïú‚üØ</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">ùíÖ</span><span class=\"o\">(</span><span class=\"bp\">ùë≥</span> <span class=\"n\">I</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">derivation.eval_at</span> <span class=\"mi\">1</span> <span class=\"n\">to_derivation</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>  <span class=\"n\">derivation.eval_at</span> <span class=\"n\">g</span> <span class=\"n\">to_derivation</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>still work if I take out the reducible? I can't verify myself because I am having a hard time putting the instances</p>",
        "id": 243269560,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624137471
    },
    {
        "content": "<p>I'll have to look at this again tomorrow or Monday. Unfortunately there's a lot of boilerplate that this approach needs, but it acts as careful book-keeping to use appropriate instances, rather than using ad-hoc fragile expressions that pass typeclasses with <code>@</code>.</p>",
        "id": 243269668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624137611
    },
    {
        "content": "<p>Instead of <code>rw</code> try <code>dunfold</code> or dsimp</p>",
        "id": 243269691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624137694
    },
    {
        "content": "<p>Ok it worked thanks!</p>",
        "id": 243299494,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624189683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicol√≤ Cavalleri</span> Sorry I had no time over the weekend but I'll review this again now.</p>",
        "id": 243354982,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624265838
    },
    {
        "content": "<p>Reviewing this PR inspired me to attempt some cleanup in <a href=\"https://github.com/leanprover-community/mathlib/issues/8013\">#8013</a>. I'd expect minimal conflicts, so the order they go in shouldn't matter much</p>",
        "id": 243357242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624267219
    },
    {
        "content": "<p>Just looked over <a href=\"https://github.com/leanprover-community/mathlib/issues/8013\">#8013</a>, LGTM. That file needed some love for a while.</p>",
        "id": 243358412,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624267956
    },
    {
        "content": "<p>My only question is the change to <code>old_structure</code>. In view of the porting efforts to Lean 4, my understanding is that we should rather try to move as much as possible to new structures. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> what do you think?</p>",
        "id": 243358620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624268091
    },
    {
        "content": "<p>My understanding is that the move to new structures comes combined with some kind of global analysis of the hierarchy and a choice of a maximal spanning tree (although I am still unclear about why it needs to span), so the switch sounds to me like it needs to be of a global nature and not something which we can just do bit by bit.</p>",
        "id": 243358805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624268198
    },
    {
        "content": "<p>I don't think we should worry about it on the lean 3 side. Things will change in lean 4 and backporting isn't likely to help that much</p>",
        "id": 243358898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624268258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicol√≤ Cavalleri</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243265444\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicol√≤ Cavalleri</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243257588\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243153256\">said</a>:</p>\n<blockquote>\n<p>I think the <code>eval_at</code> idea above is worth   pursuing, although I don't have any idea what a good name is</p>\n</blockquote>\n<p>I did it but still it does not solve that problem...</p>\n</blockquote>\n<p>What should we do regarding this? <span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> did you have time to take a look at the code?</p>\n</blockquote>\n<p>It looks like you two have solved the problem while I was away over the weekend but please let me know if you still want my input on this point.</p>",
        "id": 243362504,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624270701
    },
    {
        "content": "<p>It would be helpful if someone with a good understanding of the maths could come up with a helpful docstring for the <code>pointed_smooth_map</code> synonym. The lean reason it exists is because we want different typeclass instances - what's missing is the math reason that explains _why_ we want those instances.</p>",
        "id": 243362656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624270805
    },
    {
        "content": "<p>I've just looked over this PR except for the file <code>left_invariant_derivation.lean</code>. I wonder if there is a case for splitting this file out into a dependent PR.</p>",
        "id": 243362659,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624270808
    },
    {
        "content": "<p>I have a good understanding of this mathematics. Let me see if I can answer your question.</p>",
        "id": 243362698,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624270841
    },
    {
        "content": "<p>So IIRC this originally came up because I suggest to <span class=\"user-mention\" data-user-id=\"267205\">@Nicol√≤ Cavalleri</span> that we could factor one of his constructions through <code>derivation.comp_der</code> (which he has now done).</p>",
        "id": 243362746,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624270893
    },
    {
        "content": "<p>Mathematically the point is that the algebra of smooth functions has extra structure beyond that of just being an algebra.</p>",
        "id": 243362844,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624270951
    },
    {
        "content": "<p>The two obvious questions that come to mind looking at <code>pointed_smooth_map</code> are  \"why not just evaluate the map and use <code>ùïú</code>\" (which I think is easy, but would be good to explain in a docstring), and \"why not use <code>prod C^‚àû‚üÆI, G; ùïú‚üØ G</code> (which I think has the answer \"pointed maps at different points should not be the same type\")</p>",
        "id": 243362902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624270992
    },
    {
        "content": "<p>Since it's actually an algebra of functions, it has a family of evaluation maps, parameterised by <code>M</code> and it is really an object of this type (an algebra with this extra structure) to which the construction applies.</p>",
        "id": 243362931,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624271008
    },
    {
        "content": "<p>Could such an algebra exist for plain non-continuous functions?</p>",
        "id": 243363008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624271058
    },
    {
        "content": "<p>I've been wondering this, and I haven't sat down to think it through.</p>",
        "id": 243363051,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624271094
    },
    {
        "content": "<p>Step one would be to figure out exactly what properties of <code>C^‚àû‚üÆI, G; ùïú‚üØ</code> (beyond its <code>algebra</code> structure) we actually need here.</p>",
        "id": 243363126,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624271152
    },
    {
        "content": "<p>(very little I think)</p>",
        "id": 243363173,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624271164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243362659\">said</a>:</p>\n<blockquote>\n<p>I've just looked over this PR except for the file <code>left_invariant_derivation.lean</code>. I wonder if there is a case for splitting this file out into a dependent PR.</p>\n</blockquote>\n<p>I believe that file is very standard, as it just adds one property to derivations and it proves usual stuff: algebraic structure are preserved! Do you have any specific reason to split it?</p>",
        "id": 243366281,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624273409
    },
    {
        "content": "<p>Speaking only for myself, I would argue that while it is mathematically very standard, it is a non-trivial addition to an already-large PR and would probably result in things getting reviewed more quickly if it were split out.</p>",
        "id": 243366440,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624273510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237708.20The.20Lie.20algebra.20of.20a.20Lie.20group/near/243363126\">said</a>:</p>\n<blockquote>\n<p>Step one would be to figure out exactly what properties of <code>C^‚àû‚üÆI, G; ùïú‚üØ</code> (beyond its <code>algebra</code> structure) we actually need here.</p>\n</blockquote>\n<p>For the differential you also need that it is a composition ring</p>",
        "id": 243372256,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624277134
    },
    {
        "content": "<p>I am pretty sure things can be made more general, but I would do it in a future PR, I can take care of it myself in about a month from now</p>",
        "id": 243377065,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624279964
    },
    {
        "content": "<p>Hey this PR has been around for a while and I was wondering if some maintainer who knows the math will be able to merge it at some point: if I understand correctly, Eric does not feel entitle to merge it because it is not his math area, and Oliver is not yet a maintainer, so cannot merge it.</p>",
        "id": 243633714,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624445091
    },
    {
        "content": "<p>I think Oliver's point about splitting out the \"left invariant derivation\" into its own PR is likely still a good idea to get things reviewed more quickly</p>",
        "id": 243634726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624445846
    },
    {
        "content": "<p>Done</p>",
        "id": 243635896,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624446647
    },
    {
        "content": "<p>Scott will be away for a couple of weeks, so if there's another maintainer who would like to take on that would be great!</p>",
        "id": 244022503,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624724187
    },
    {
        "content": "<p>Now the second part of the PR is on github as <a href=\"https://github.com/leanprover-community/mathlib/issues/8108\">#8108</a></p>",
        "id": 244144770,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1624887272
    }
]