[
    {
        "content": "<p>I had to change the extension path for <code>complete_lattice_hom</code> because two instances were not defeq (but they were defeq after <code>ext</code>). This is likely because the defeq check for new structures stops too early. Maybe <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has an idea?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.hom.lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">class</span> <span class=\"n\">Sup_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_Sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_Sup</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inf_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_Inf</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_Inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">frame_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">inf_top_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">complete_lattice_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">Sup_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_Inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">Sup_hom_class</span> <span class=\"o\">(</span><span class=\"n\">map_Sup</span><span class=\"o\">)</span>\n<span class=\"kn\">export</span> <span class=\"n\">Inf_hom_class</span> <span class=\"o\">(</span><span class=\"n\">map_Inf</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- See note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Inf_hom_class.to_inf_top_hom_class</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Inf_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">inf_top_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Inf_pair</span><span class=\"o\">,</span> <span class=\"n\">map_Inf</span><span class=\"o\">,</span> <span class=\"n\">set.image_pair</span><span class=\"o\">,</span> <span class=\"n\">Inf_pair</span><span class=\"o\">],</span>\n  <span class=\"n\">map_top</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Inf_empty</span><span class=\"o\">,</span> <span class=\"n\">map_Inf</span><span class=\"o\">,</span> <span class=\"n\">set.image_empty</span><span class=\"o\">,</span> <span class=\"n\">Inf_empty</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- See note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">frame_hom_class.to_Sup_hom_class</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">frame_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">‹</span><span class=\"n\">frame_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">›</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- See note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">complete_lattice_hom_class.to_Inf_hom_class</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Inf_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">‹</span><span class=\"n\">complete_lattice_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">›</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[priority 100]</span> <span class=\"c1\">-- See note [lower instance priority]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">complete_lattice_hom_class.to_frame_hom_class</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">complete_lattice_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">frame_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">‹</span><span class=\"n\">complete_lattice_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">›,</span> <span class=\"bp\">..</span><span class=\"n\">Inf_hom_class.to_inf_top_hom_class</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">frame_hom_class.to_Sup_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">complete_lattice_hom_class.to_Sup_hom_class</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">frame_hom_class.to_Sup_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">complete_lattice_hom_class.to_Sup_hom_class</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 276032582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647859823
    },
    {
        "content": "<p>If we had <code>coframe</code> hom all this change does is push the problem from one to the other, right?</p>",
        "id": 276083524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647882241
    },
    {
        "content": "<p>Yes <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 276083592,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647882256
    },
    {
        "content": "<p>I am too well aware of this.</p>",
        "id": 276083630,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647882270
    },
    {
        "content": "<p>There's always the <code>old_structure_cmd</code> option but I think it would be a shame. Furthermore, this ought to be investigated.</p>",
        "id": 276083783,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647882334
    },
    {
        "content": "<p>I think <code>old_structure_cmd </code> would probably be fine, these classes only hold one data member anyway</p>",
        "id": 276084221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647882507
    },
    {
        "content": "<p>I would prefer not to because:</p>\n<ol>\n<li>We're moving towards new structures for all homs</li>\n<li>Old structures make hom declarations longer</li>\n<li>It's unlikely we'll ever need <code>coframe_hom</code></li>\n</ol>",
        "id": 276084426,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647882613
    },
    {
        "content": "<blockquote>\n<p>Old structures make hom declarations longer</p>\n</blockquote>\n<p>How so?</p>",
        "id": 276095059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647887441
    },
    {
        "content": "<p>because you can't fill in that <code>to_weaker_hom</code> field in a go. You can still use <code>..</code> to fill in the fields, but that means that this hom will behave differently to any other hom and one of my goal was API uniformity (which indeed allows me to write a new hom file in 40 minutes, I timed).</p>",
        "id": 276095419,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647887585
    },
    {
        "content": "<p>We use old structures for all the group homs though, don't we?</p>",
        "id": 276095517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647887621
    },
    {
        "content": "<p>So whatever you do we'll end up with two different types of hom designs</p>",
        "id": 276095566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647887639
    },
    {
        "content": "<p>My plan was to eventually change group homs to new structures</p>",
        "id": 276099214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647889308
    }
]