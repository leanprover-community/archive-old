[
    {
        "content": "<p>Oh, I ended up (understand, 6 hours ago) taking an entirely different turn to what you suggest. I've just pushed but here's the gist of it.</p>",
        "id": 247520284,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627507925
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span> <span class=\"kd\">class</span> <span class=\"n\">succ_order</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">maximal_of_succ_le</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄,</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">succ_le_of_lt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_of_lt_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">succ</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 247520376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627508010
    },
    {
        "content": "<p>It seems to work quite well! The amount of lemmas I proved will testify.</p>",
        "id": 247520461,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627508071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20succ_order/near/247501228\">said</a>:</p>\n<blockquote>\n<p>I believe it's worth the effort to ensure that <code>succ_order</code> is a subsingleton, so we should pick the value of <code>succ \\top</code>. <code>\\top</code> itself would work if you define <code>succ a</code> as the infimum of all <code>b &gt; a</code>, but <code>\\bot</code> would be better if you want to fit addition on <code>fin</code>, so I'm not quite sure what the best option is here.</p>\n</blockquote>\n<p>This is hopeless so long as we only have <code>preorder α</code>. Consider <code>(≤) := λ a b, true</code>. Then any function <code>α → α</code> will be a valid <code>succ</code>.<br>\nFor <code>partial_order α</code>, I'll try proving it tomorrow.</p>",
        "id": 247520696,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627508264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20succ_order/near/247520696\">said</a>:</p>\n<blockquote>\n<p>For <code>partial_order α</code>, I'll try proving it tomorrow.</p>\n</blockquote>\n<p>And it's done!</p>",
        "id": 247551072,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627542668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20succ_order/near/247551072\">said</a>:</p>\n<blockquote>\n<p>And it's done!</p>\n</blockquote>\n<p>Please push your results, I'm very curious :)</p>",
        "id": 247560560,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627550310
    },
    {
        "content": "<p>Oh yeah of course! Forgot to hit that little button <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 247561263,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627550803
    },
    {
        "content": "<p>I moved the stuff in a new file because it was getting big. I think I'll also create the instance <code>pred_order</code> as the current pattern seems to suggest that I should <code>is_atomic</code>/<code>is_coatomic</code>, <code>is_atomistic/is_coatomistic</code>, <code>order_bot/order_top</code>...</p>",
        "id": 247561485,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627550967
    },
    {
        "content": "<p>I defined <code>pred_order</code> just to see whether everything would be trivial enough to justify not introducing it, but I got stuck on the very first lemma!<br>\nAny idea for how to prove this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">gc_pred_succ</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">succ_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pred_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">galois_connection</span> <span class=\"o\">(</span><span class=\"n\">pred</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">succ</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I suspect we need to upgrade the instance to <code>partial_order α</code>, but I'm not quite sure yet.</p>",
        "id": 247599750,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627572565
    },
    {
        "content": "<p>Is there a succ-inct way to describe mathematically what <code>succ a</code> has to be? (I see it is already proven that it is uniquely determined)</p>",
        "id": 247601586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627573453
    },
    {
        "content": "<p>I claim <code>succ a</code> should be the infimum of all <code>b &gt; a</code>, if <code>a</code> is not <code>\\top</code>, and <code>\\top</code> otherwise.</p>",
        "id": 247609503,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627577290
    },
    {
        "content": "<p>(The latter case follows from the definition of <code>Inf ∅</code>, of course.)</p>",
        "id": 247609555,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627577324
    },
    {
        "content": "<p>Oooh, nice idea. Let me prove it!</p>",
        "id": 247609869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627577501
    },
    {
        "content": "<p>I renamed <code>succ_eq_add_one_order</code> to <code>add_succ_order</code>. What do you think?</p>",
        "id": 247609956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627577532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20succ_order/near/247609869\">said</a>:</p>\n<blockquote>\n<p>Oooh, nice idea. Let me prove it!</p>\n</blockquote>\n<p>Done!</p>",
        "id": 247614217,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627579403
    },
    {
        "content": "<p>It's of course not usable  to prove <code>subsingleton (succ_order α)</code> because we need <code>complete_lattice α</code> instead of just <code>preorder α</code>.</p>",
        "id": 247614535,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627579550
    },
    {
        "content": "<p>Is it always true if you change it to \"<code>a</code> otherwise\"?</p>",
        "id": 247628211,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627586150
    },
    {
        "content": "<p>In a preorder you surely can't expect to have a uniquely defined successor. So maybe it makes more sense to assume <code>partial_order</code> from the start</p>",
        "id": 247628292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627586179
    },
    {
        "content": "<p>Yeah, you don't have a unique successor in general, but I actually managed to prove many lemmas for preorders.</p>",
        "id": 247639476,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627591912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20succ_order/near/247628211\">said</a>:</p>\n<blockquote>\n<p>Is it always true if you change it to \"<code>a</code> otherwise\"?</p>\n</blockquote>\n<p>What do you mean? Here's what I proved following Anne's statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">succ_eq_infi</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">succ_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_infi</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">le_infi</span> <span class=\"n\">succ_le_of_lt</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">succ_top</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">le_top</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">binfi_le</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_iff_ne_top.2</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 247639699,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627592007
    },
    {
        "content": "<p>I mean if you don't necessarily have a complete lattice, but rather something with multiple maximal elements</p>",
        "id": 247645398,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627595036
    },
    {
        "content": "<p>e.g. I think the empty relation is a <code>succ_order</code> by the current definition</p>",
        "id": 247645461,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627595050
    },
    {
        "content": "<p>er not empty, the equality relation</p>",
        "id": 247645478,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627595064
    },
    {
        "content": "<p>Yeah sure, isn't that the point of having more general instance requirements?</p>",
        "id": 247647882,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627596575
    },
    {
        "content": "<p>Wilder stuff happens, but the key properties are still preserved. And if you really care about the stronger results, just assume some more instances on the lemmas.</p>",
        "id": 247647979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627596635
    },
    {
        "content": "<p>For example, originally, <code>succ_order</code> wasn't allowing maximal elements, but this wasn't actually needed for many of the results. So I've relaxed it and results that actually require it get a <code>no_top_order α</code> hypothesis.</p>",
        "id": 247648119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627596743
    },
    {
        "content": "<p>Yes, so the question is how do you mathematically explain what <code>succ</code> does in general</p>",
        "id": 247648589,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627597116
    },
    {
        "content": "<p>Does <code>succ_eq_infi</code> still hold without the complete lattice assumption if you only assert it is an infimum of that set?</p>",
        "id": 247648707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1627597210
    },
    {
        "content": "<p>You mean \"Can you characterize it as the infimum of that set, without talking about infimums?\"?</p>",
        "id": 247676836,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627629120
    },
    {
        "content": "<p>No, I mean what I said <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 247691496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627641376
    },
    {
        "content": "<p>Well... <code>succ a</code> is an element that covers <code>a</code>.</p>",
        "id": 247691902,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627641707
    },
    {
        "content": "<p>If <code>a</code> is maximal then we are talking about the inf of the empty set. If the poset doesn't have a largest element then this infimum doesn't make sense and, in any case, could not depend on the choice of <code>a</code>.</p>",
        "id": 247692406,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627642118
    },
    {
        "content": "<p>Ah yeah but I'm not talking about infimums here. I just require <code>a ≤ succ a</code> and <code>succ a</code> covers <code>a</code>.</p>",
        "id": 247692532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627642242
    },
    {
        "content": "<p>In that case, I would return to my original question</p>",
        "id": 247692703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1627642386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20succ_order/near/247601586\">said</a>:</p>\n<blockquote>\n<p>Is there a succ-inct way to describe mathematically what <code>succ a</code> has to be? (I see it is already proven that it is uniquely determined)</p>\n</blockquote>\n<p>That one, you mean?</p>",
        "id": 247692808,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627642445
    },
    {
        "content": "<p>If <code>a</code> is maximal, <code>succ a</code> just has to be (not strictly) greater than <code>a</code>. If <code>a</code> isn't maximal, then <code>succ a</code> must cover <code>a</code>.</p>",
        "id": 247692899,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627642533
    },
    {
        "content": "<p>I have a problem with my generalized lemmas. They have trouble matching <code>nat.succ</code>, although I've provided <code>succ_order ℕ</code>. Any suggestion?</p>",
        "id": 247856092,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627819368
    },
    {
        "content": "<p>For example, are you asking why you had to turn <code>max_succ_succ</code> into <code>nat.max_succ_succ</code> <a href=\"https://github.com/leanprover-community/mathlib/pull/8082/commits/14205c3fdedcb8395ad6fc49267ed9c895718261\">here</a>?</p>",
        "id": 247900665,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627893518
    },
    {
        "content": "<p>Yes, exactly!</p>",
        "id": 247900935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627893829
    },
    {
        "content": "<p>That's <code>simp</code>le, you just need to hint to Lean that it needs to do more unfolding:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- In term mode, unfolding is done up to semireducible, which is the default reducibility level:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">max_succ_succ</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat.max_succ_succ</span> <span class=\"c1\">-- works</span>\n\n<span class=\"c1\">-- `simp` only goes up to `reducible`, which `+` satisfies on `nat`:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.max_succ_succ</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n\n<span class=\"c1\">-- but `nat.add_succ_order` isn't reducible enough:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">max_succ_succ</span><span class=\"o\">]</span> <span class=\"c1\">-- failed to simplify</span>\n\n<span class=\"c1\">-- so let's ask Lean to unfold it more:</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">reducible</span><span class=\"o\">]</span> <span class=\"n\">nat.add_succ_order</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">max_succ_succ</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 247901102,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627894001
    },
    {
        "content": "<p>Ah, so you're saying <code>succ_order</code> should be <code>reducible</code>?</p>",
        "id": 247901158,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627894054
    },
    {
        "content": "<p>The <code>succ_order</code> instance on <code>nat</code>, which is <code>nat.add_succ_order</code>, should be reducible</p>",
        "id": 247901195,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627894083
    },
    {
        "content": "<p>Ah okay!</p>",
        "id": 247901214,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627894098
    },
    {
        "content": "<p>Does it even make sense to have reducible structures?</p>",
        "id": 247901239,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627894119
    },
    {
        "content": "<p>That was exactly my question :)</p>",
        "id": 247901250,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627894129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20succ_order/near/247901195\">said</a>:</p>\n<blockquote>\n<p>The <code>succ_order</code> instance on <code>nat</code>, which is <code>nat.add_succ_order</code>, should be reducible</p>\n</blockquote>\n<p>I don't think marking instances as reducible means anything, does it?</p>",
        "id": 248389004,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628101833
    },
    {
        "content": "<p>I am pretty sure that it does something, since just above I posted a code block proving the opposite :)</p>",
        "id": 248416478,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1628115648
    },
    {
        "content": "<p>If that's the case, this behavior feels like it might interfere with the library note on reducible non-instance, but I might be mistaken.</p>",
        "id": 248417238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628116115
    },
    {
        "content": "<p>Making instances reducible doesn't do anything for type-class inference, but it can definitely affect simp and rw (and other things).</p>\n<p>By default, instances have a reducibility setting that is between reducible and semireducible (default for defs). Type-class inference unfolds everything that is reducible or an instance, simp and rw only unfold reducible definitions.</p>",
        "id": 248487514,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1628174869
    },
    {
        "content": "<p>Uh, does that make them semisemireducible?</p>",
        "id": 248491635,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628176451
    },
    {
        "content": "<p>A musician might suggest demisemireducible</p>",
        "id": 248494719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628177797
    },
    {
        "content": "<p>I'm getting back to this. Should we keep the syntax-agreement typeclasses? Eg</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Class stating that `∀ a b, a &lt; b ↔ a + 1 ≤ b` and `∀ a b, a &lt; b + 1 ↔ a ≤ b`. `succ_order` with</span>\n<span class=\"sd\">additive notation. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_succ_order</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">succ_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">succ_eq_add_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 252756941,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631265957
    },
    {
        "content": "<p>I have now opened <a href=\"https://github.com/leanprover-community/mathlib/issues/9397\">#9397</a>. This is the same PR, except for the fact that no other file has been touched. I came to understand that adapting the existing API is by far the most annoying part of <a href=\"https://github.com/leanprover-community/mathlib/issues/8082\">#8082</a> and that's why it has never been ready. If we could already agree on the definitions, then we will be able to decide how the API should change.</p>",
        "id": 254954397,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1632683582
    },
    {
        "content": "<p>What should happen with this new API? <a href=\"https://github.com/leanprover-community/mathlib/issues/8082\">#8082</a> tries replacing all the ℕ- and ℤ-specific API around <code>succ</code> and <code>pred</code>.</p>",
        "id": 255884985,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633195228
    },
    {
        "content": "<p>This seems to be a bit hard. In particular, elaboration sometimes has a hard time unifying <code>succ_order.succ</code> with <code>nat.succ</code>.</p>",
        "id": 255885124,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633195378
    },
    {
        "content": "<p>Do you think it's doable to replace <code>succ_order α</code> by <code>is_succ f</code> where <code>f : α → α</code>? <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, that very much sounds like your idea of unbundling morphisms and instead giving them instances.</p>",
        "id": 255885231,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633195486
    },
    {
        "content": "<p>I'm going to say it's not a good idea unless nobody ever will try to replace any given <code>f</code> in <code>succ_order f</code> with any other <code>f'</code>, even if you consider what they're doing is making a mistake.</p>",
        "id": 255902218,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633212776
    },
    {
        "content": "<p>(I am very much not in favour of unbundling morphisms and instead giving them instances! Instead, I want to declare a typeclass instance on <em>types</em> of bundled morphisms.)</p>",
        "id": 255902250,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633212832
    },
    {
        "content": "<p>There's a reason we* dropped unbundled morphisms/subobjects in favour of bundled ones.</p>\n<p>*I joined the mathlib community a couple months after the initial push, and only tangentially took part in that refactor.</p>",
        "id": 255902548,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1633213133
    },
    {
        "content": "<p>I'm pretty dubious about trying to retrofit anything onto <code>nat.succ</code>.</p>",
        "id": 255909420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633220834
    }
]