[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/11931\">#11931</a>, I show that applying twice the karoubi construction of idempotent completion gives an equivalent category.</p>",
        "id": 271255123,
        "sender_full_name": "Joël Riou",
        "timestamp": 1644401785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> , does the karoubian envelope functor have an universal property that mathlib can check?</p>",
        "id": 271555286,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644574640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311931.20.20pseudoabelian.20categories/near/271555286\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> , does the karoubian envelope functor have an universal property that mathlib can check?</p>\n</blockquote>\n<p>In some sense, <code>karoubi</code> is more or less a left adjoint to the inclusion of idempotent complete categories in the category of categories.<br>\nMore precisely, if <code>C</code> is any category and <code>D</code> is idempotent complete, it seems -- I have to remove a few sorries -- that there is an equivalence of categories between the categories of functors <code>C ⥤ D</code> and <code>karoubi C ⥤ D</code>. (More practically, a functor <code>C ⥤ D</code> extends canonically to <code>karoubi C ⥤ karoubi D</code>, and if <code>D</code> is pseudoabelian, we get a functor <code>karoubi C ⥤ D</code>, and natural transformations between functors in <code>karoubi C ⥤ D</code> identifies to natural transformations in <code>C ⥤ D</code>.)</p>",
        "id": 271573218,
        "sender_full_name": "Joël Riou",
        "timestamp": 1644585007
    },
    {
        "content": "<p>Did you formalise these assertions yet?</p>",
        "id": 271616407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644603519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Almost! I have already:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">karoubi_universal'</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">],</span>\n    <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">karoubi</span> <span class=\"n\">D</span> <span class=\"bp\">≌</span> <span class=\"n\">karoubi</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">karoubi</span> <span class=\"n\">D</span>\n</code></pre></div>\n<p>I just need to \"replace\" <code>karoubi D</code> by the equivalent category <code>D</code> when <code>D</code> is idempotent complete.</p>",
        "id": 271617015,
        "sender_full_name": "Joël Riou",
        "timestamp": 1644603797
    },
    {
        "content": "<p>Nice!</p>",
        "id": 271617548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644604064
    }
]