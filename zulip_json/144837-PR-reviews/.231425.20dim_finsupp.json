[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I have been looking into using <code>std_basis</code>. I think it may be possible, although it is hard to say because as you said the statement is quite incomprehensible.<br>\nThe one problem I see is that the index type <code>η</code> for <code>std_basis</code> must be a <code>fintype</code> in <code>is_basis_std_basis</code>. I want my proof to work for an infinite index type and I'm not sure if that will be a problem with using <code>std_basis</code> (because I'm not sure yet how to use it here). It is not used extensively in the proof of <code>is_basis_std_basis</code> so maybe it even can be removed for this case.</p>",
        "id": 175284882,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568064534
    },
    {
        "content": "<p>Do you think we should proceed on your PR as is, or do you want to think some more about the relation with <code>std_basis</code>?</p>",
        "id": 175774643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568595036
    },
    {
        "content": "<p>(Also, your PR is broken at the moment, see <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/582737438#L248\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/582737438#L248\">https://travis-ci.org/leanprover-community/mathlib/jobs/582737438#L248</a>.)</p>",
        "id": 175774645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1568595046
    },
    {
        "content": "<p>I looked into it and I believe you cannot easily do it using <code>std_basis</code>. I think the way to do it is to define <code>std_basis₀</code>, which is the same as <code>std_basis</code> but with every <code>Π</code> replaced by <code>Π₀</code>. You can prove that <code>std_basis₀</code> is a basis for <code>dfinsupp</code> using the exact same proves as for <code>std_basis</code> (in most cases you can literally substitute the names in the proves by the <code>₀</code> variants).</p>",
        "id": 175789773,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568619213
    },
    {
        "content": "<p>There are some pros and cons to this:<br>\nThe proof of <code>is_basis_std_basis</code> follows directly from <code>is_basis_std_basis₀</code> since functions from a <code>fintype ι</code> to <code>α</code> can be identified with <code>dfinsupp ι (λ_, α)</code> in the obvious way.</p>",
        "id": 175790120,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568619660
    },
    {
        "content": "<p>However, it is quite some work and you would get quite some code duplication if we keep <code>std_basis</code>. I don't know enough about infinite dimensional linear algebra to know whether <code>std_basis</code> is useful when the domain is not a <code>fintype</code> but I would suspect there to be some uses for it</p>",
        "id": 175790301,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568619903
    },
    {
        "content": "<p>The build I can fix easily btw, so I will do that in a bit. It remains the question whether I should change the direct proof with a proof that goes via <code>std_basis₀</code>.</p>",
        "id": 175790493,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568620142
    },
    {
        "content": "<p>Doed anybody have any thoughts on that?</p>",
        "id": 175790500,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568620155
    },
    {
        "content": "<p>Thanks for looking into this. I don't want to push you into working on <code>std_basis₀</code>. However, for finite <code>\\iota</code> we could still provide glue with <code>std_basis</code>, right?</p>",
        "id": 175844081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568661979
    },
    {
        "content": "<p>If so, I would be in favour of gluing this to <code>std_basis</code> in the findim case.</p>",
        "id": 175844102,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568661996
    },
    {
        "content": "<p>Yes but I want the theorem for <code>\\iota</code> not necessarily finite. So for that case we need the original proof anyways. Do you propose having two proves?</p>",
        "id": 175844992,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568662757
    },
    {
        "content": "<p>I propose that you build some glue between the two constructions</p>",
        "id": 175845026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568662782
    },
    {
        "content": "<p>Because at some point people will prove a theorem in one setting, and you want to apply it in another...</p>",
        "id": 175845094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568662811
    },
    {
        "content": "<p>And if <code>\\iota</code> is finite, you should be able to move back and forth between the two</p>",
        "id": 175845121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568662831
    },
    {
        "content": "<p>Ah okay. Yes makes sense. I will do that</p>",
        "id": 175849672,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568665894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Something like that (see last change)?</p>",
        "id": 176079737,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568882901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198529\">@Casper Putz</span> That looks really nice. Yes.</p>",
        "id": 176080180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568883331
    },
    {
        "content": "<p>But can't you use this fact in the big <code>is_basis</code> proof above it?</p>",
        "id": 176080196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568883352
    },
    {
        "content": "<p>Because there are lemmas about <code>std_basis</code> being a basis, and I guess you could now apply those</p>",
        "id": 176080288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568883427
    },
    {
        "content": "<p>Only if I use that <code>\\eta</code> is a fintype</p>",
        "id": 176080403,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568883522
    },
    {
        "content": "<p>So yes in that case that would replace the proof, but not in the general case</p>",
        "id": 176080430,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568883553
    },
    {
        "content": "<p>I'm totally confused. How can you then prove that the two bases are the same?</p>",
        "id": 176080760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568883847
    },
    {
        "content": "<p>I guess whatever the explanation is, it deserves to be put in a comment above the code</p>",
        "id": 176080771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568883870
    },
    {
        "content": "<p>Well, the right-hand side is a finsupp, but is cast to a function. So as functions they are the same, but the RHS is a basis for finsupp, and the LHS is a basis for functions, but only if the domain is a fintype</p>",
        "id": 176080834,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568883951
    },
    {
        "content": "<p>However as functions they are equal no matter if the domain is a fintype</p>",
        "id": 176080885,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568883971
    },
    {
        "content": "<p>Aha, now I understand again</p>",
        "id": 176081166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568884310
    },
    {
        "content": "<p>Maybe wrap your basis in a definition <code>std_basis₀</code>. That conveys the intent a bit better than all the <code>single i.1 etc</code>.</p>",
        "id": 176081256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568884391
    },
    {
        "content": "<p>Other than that, this looks good to me.</p>",
        "id": 176081263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568884398
    },
    {
        "content": "<p>Of course <code>std_basis</code> is more general, because it would allow a family of <code>β</code>s.</p>",
        "id": 176081289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568884438
    },
    {
        "content": "<p>But I'm not sure how fast we will need such a general version</p>",
        "id": 176081337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568884454
    },
    {
        "content": "<p>Yes, and in the future <code>std_basis₀</code>could be made more general</p>",
        "id": 176081343,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568884469
    },
    {
        "content": "<p>Refactoring is always harder than we would like</p>",
        "id": 176081395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568884532
    },
    {
        "content": "<p>If you see how to do the general version, please do so now.</p>",
        "id": 176081403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568884542
    },
    {
        "content": "<p>I know how to do it but it would involve copying almost all code on <code>std_basis</code> and replacing it with <code>std_basis₀</code>. I unfortunately don't have the time to do that right now. I don't know if there would be a any way of transferring one version into the other.</p>",
        "id": 176081619,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568884732
    },
    {
        "content": "<p>I'm not sure if <code>std_basis</code> should exist anyway. The finsupp version is what we actually want.</p>",
        "id": 176081722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1568884831
    },
    {
        "content": "<p>I agree with that. I will think about it and maybe I will attempt on doing the <code>std_basis₀</code> stuff</p>",
        "id": 176082468,
        "sender_full_name": "Casper Putz",
        "timestamp": 1568885562
    }
]