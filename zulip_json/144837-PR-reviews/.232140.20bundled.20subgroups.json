[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> asks whether he should mirror API from <code>monoid_hom</code> namespace in <code>submonoid</code> to <code>subgroup</code>.</p>",
        "id": 193103554,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586208078
    },
    {
        "content": "<p>I also have a question regarding <code>gpow_mem</code><br>\nSince I think <code>gpow_mem</code> should be a lemma on integers, should I extend it from the natural numbers or should I just do it by itself?<br>\nThis is what I have right now</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">gpow_mem_nat</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">K</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"bp\">.</span><span class=\"n\">one_mem</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">gpow_mem_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">gpow_mem</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">K</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">gpow_mem_nat</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">hx</span>\n<span class=\"bp\">|</span> <span class=\"bp\">-</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">]</span>        <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">apply</span> <span class=\"n\">gpow_mem_nat</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">hx</span>\n</pre></div>",
        "id": 193103927,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586208251
    },
    {
        "content": "<p>My opinion:</p>\n<ul>\n<li><code>mrange</code> : yes, becomes <code>range</code>;</li>\n<li><code>restrict</code> : not sure; can we make <code>subgroup → submonoid</code> transparent enough for Lean to unify their coercions to Type?</li>\n<li><code>cod_restrict</code> : same;</li>\n<li><code>eq_mlocus</code> : yes, becomes <code>eq_locus</code>;</li>\n</ul>",
        "id": 193103993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586208289
    },
    {
        "content": "<p>You can reuse <code>pow_mem</code></p>",
        "id": 193104041,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586208326
    },
    {
        "content": "<p>Which is <code>defeq</code> to <code>submonoid.pow_mem</code></p>",
        "id": 193104079,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586208346
    },
    {
        "content": "<p>Something like (not tested) :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pow_mem</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">∈</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span><span class=\"bp\">.</span><span class=\"n\">pow_mem</span>\n</pre></div>\n\n\n<p>BTW, your <code>gpow_mem_nat</code> actually uses <code>pow</code>, not <code>gpow</code>.</p>",
        "id": 193104280,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586208449
    },
    {
        "content": "<p>I mean, it uses <code>has_pow G nat</code>, not <code>has_pow G int</code>.</p>",
        "id": 193104326,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586208476
    },
    {
        "content": "<p>I'm not sure what this means. I thought that's what I intended :P</p>",
        "id": 193104665,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586208657
    },
    {
        "content": "<p>In <code>mathlib</code> <code>gpow</code> is used for lemmas about <code>instance [group G] : has_pow G int</code></p>",
        "id": 193105100,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586208916
    },
    {
        "content": "<p><code>pow</code> is for <code>instance [monoid M] : has_pow M nat</code>, <code>fpow</code> is for <code>instance [division_ring F] : has_pow F int</code></p>",
        "id": 193105204,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586208966
    },
    {
        "content": "<p>We also have <code>rpow</code> and <code>cpow</code> for real and complex.</p>",
        "id": 193105254,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586208992
    },
    {
        "content": "<p>Right, so it should be just <code>pow_mem</code></p>",
        "id": 193105263,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586208997
    },
    {
        "content": "<p>Yes.</p>",
        "id": 193105276,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586209005
    },
    {
        "content": "<p>There are too many naming conventions...</p>",
        "id": 193105301,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586209023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232140.20bundled.20subgroups/near/193104280\" title=\"#narrow/stream/144837-PR-reviews/topic/.232140.20bundled.20subgroups/near/193104280\">said</a>:</p>\n<blockquote>\n<p>Something like (not tested) :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pow_mem</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"err\">∈</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K</span><span class=\"bp\">.</span><span class=\"n\">to_submonoid</span><span class=\"bp\">.</span><span class=\"n\">pow_mem</span>\n</pre></div>\n\n\n<p>BTW, your <code>gpow_mem_nat</code> actually uses <code>pow</code>, not <code>gpow</code>.</p>\n</blockquote>\n<p>Also, it seems <code>to_submonoid</code> isn't defined. I should probably add that?</p>",
        "id": 193105346,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586209067
    },
    {
        "content": "<p>You should define <code>subgroup</code> using <code>extends submonoid</code>, then only add <code>inv_mem</code>.</p>",
        "id": 193106730,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586209810
    },
    {
        "content": "<p>Then <code>to_submonoid</code> will be autogenerated.</p>",
        "id": 193106742,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586209819
    },
    {
        "content": "<p>Ah, I see!</p>",
        "id": 193108385,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586210779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232140.20bundled.20subgroups/near/193105204\" title=\"#narrow/stream/144837-PR-reviews/topic/.232140.20bundled.20subgroups/near/193105204\">said</a>:</p>\n<blockquote>\n<p><code>fpow</code> is for <code>instance [division_ring F] : has_pow F int</code></p>\n</blockquote>\n<p>Note that this is no longer true... since a couple of hours it assumes <code>[group_with_zero F]</code>. Division rings are the main source of examples, but <code>nnreal := {r : real // 0 ≤ r}</code> is another example.</p>",
        "id": 193130670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586233799
    },
    {
        "content": "<p>I'm have mirrored <code>closure_preimage_le</code> from <code>submonoid.lean</code> to a version with groups</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">closure_preimage_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">closure_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_coe</span><span class=\"o\">,</span> <span class=\"n\">mem_comap</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">subset_closure</span> <span class=\"n\">hx</span>\n</pre></div>\n\n\n<p>However, as the name <code>closure_preimage_le</code> is already taken in <code>monoid_hom</code>, what should I change the name of this lemma to?</p>",
        "id": 193878113,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586860676
    },
    {
        "content": "<p>This is a statement about both <code>comap</code> and <code>closure</code>. I guess <code>comap</code> lives in <code>monoid_hom</code> or <code>group_hom</code> depending on what you are comapping, <del>but <code>closure</code> probably lives in <code>monoid</code> or <code>group</code></del>(apparently this is not true), <del>so you could just put it in <code>group</code>, but you'd better have some independent voices saying that this is an acceptable idea (I am still not very good at namespaces), and also there will be the issue of having to then move monoid_hom.closure_preimage_le to monoid, which might break things</del>. Alternatively you could just call it gclosure_preimage_le, or closure_preimage_le'. Those are some suggestions anyway, but I don't really know what is best.</p>",
        "id": 193878584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586860921
    },
    {
        "content": "<p>Note that the lemma after <code>closure_preimage_le</code> in <code>submonoid.lean</code> is <code>map_mclosure</code>, so perhaps another alternative is to rename closure_preimage_le to mclosure_preimage_le.</p>",
        "id": 193878795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586861029
    },
    {
        "content": "<p>Okay, I'll keep it at<code>gclosure_preimage_le</code> for now then. But I do feel that changing <code>closure_preimage_le</code> to <code>mclosure_preimage_le</code> would be more natural.</p>",
        "id": 193880237,
        "sender_full_name": "Jason KY.",
        "timestamp": 1586862069
    },
    {
        "content": "<p>I tried to prepend <code>m</code> to names that will have <code>group</code> counterparts but missed this one.</p>",
        "id": 193933493,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586886479
    }
]