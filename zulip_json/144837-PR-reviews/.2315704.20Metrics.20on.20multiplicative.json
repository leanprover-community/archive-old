[
    {
        "content": "<p>This transfers metric instances across <code>additive</code>, <code>multiplicative</code> and <code>order_dual</code>. Any more thoughts?</p>",
        "id": 291881651,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659546592
    },
    {
        "content": "<p>This is stopping me from defining all the new kinds of normed groups (<a href=\"https://github.com/leanprover-community/mathlib/pull/15705\">#15705</a>).</p>",
        "id": 291884348,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659547836
    },
    {
        "content": "<p>I forgot about that one because it didn't previously pass CI</p>",
        "id": 291913340,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659557317
    },
    {
        "content": "<p>Stating lemmas like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nndist_to_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nndist</span> <span class=\"o\">(</span><span class=\"n\">to_mul</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_mul</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nndist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nndist_to_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nndist</span> <span class=\"o\">(</span><span class=\"n\">to_add</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_add</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nndist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>which force the reader to \"play elaborator\" to work out the types of <code>a</code> and <code>b</code> make me sort of uneasy.</p>",
        "id": 291913414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659557373
    },
    {
        "content": "<p>But the substance of the PR is great.</p>",
        "id": 291913444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659557392
    },
    {
        "content": "<p>Yeah it's to avoid writing down the way too long <code>multiplicative X</code>.</p>",
        "id": 291914359,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659557865
    },
    {
        "content": "<p>Last time this happened, the fix was to introduce notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a>.</p>",
        "id": 291914385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659557881
    },
    {
        "content": "<p><del><code>mulify</code> and <code>addify</code> would be much shorter names</del></p>",
        "id": 291917482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659559423
    },
    {
        "content": "<p><code>mulify</code> and <code>addify</code> would be much shoter names!</p>",
        "id": 291917688,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659559523
    }
]