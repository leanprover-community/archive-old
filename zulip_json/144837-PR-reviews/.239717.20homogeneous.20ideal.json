[
    {
        "content": "<p>I am trying to write some stuff about homogenous ideal of a graded commutative ring. But I couldn’t figure out what would be the most painless way of proving that homogeneous component of an element of homogeneous ideal is in the said homogeneous ideal?</p>",
        "id": 257768203,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1634333627
    },
    {
        "content": "<p>P.S. collaboration wanted.</p>",
        "id": 257768541,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1634333800
    },
    {
        "content": "<p>One definition of a homogeneous ideal of a graded ring is that it's closed under the projection maps.</p>",
        "id": 257775224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1634337141
    },
    {
        "content": "<p>Sometimes it is more useful to have a generating set in the definition to prove things. So if homogeneous ideal is defined to have closure property then one still needs to prove the equivalence between definitions. I suspect proof of homogeneous component being in ideal is still needed.</p>",
        "id": 257776704,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1634338014
    },
    {
        "content": "<p>You're referring to <code>homogeneous_ideal.mem_iff</code> from that PR, right?</p>",
        "id": 257784566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634343498
    },
    {
        "content": "<p>Yes</p>",
        "id": 257802038,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1634360488
    },
    {
        "content": "<p>For x in a homogeneous ideal, classically, one writes x as sum of its homogenous component and write each component in terms of generators of the ideal and investigate the double summation. Is there a way to avoid this?</p>",
        "id": 257805066,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1634363702
    },
    {
        "content": "<p>Now this PR has some equivalent definitions of homogeneous ideal and that union, intersection, and radical of homogeneous ideals are homogeneous and some other lemmas</p>",
        "id": 258567602,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1634830511
    },
    {
        "content": "<p>I plan to come back to this; looking at the lengths of the proofs, I feel like we're missing some intermediate lemmas about direct_sum.</p>",
        "id": 258610574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634847513
    },
    {
        "content": "<p>I am not very good at writing succinct code. Maybe it is just me writing very bad code</p>",
        "id": 258667616,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1634882978
    },
    {
        "content": "<p>I worked out a golf in that PR using this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- In a galois connection between sets and some other type, if there exists a set such that</span>\n<span class=\"sd\">`I = l (f '' S)`, then `S = (f ⁻¹' u I)` is one such set. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.galois_connection.exists_l_image_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">u</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">gc.l_le</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">gc.le_u_l</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">image_subset</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">image_subset_iff.mp</span> <span class=\"bp\">$</span> <span class=\"n\">gc.le_u_l</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">gc.l_le</span> <span class=\"o\">(</span><span class=\"n\">image_preimage_subset</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">HI</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">preimage_image_preimage</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">HI</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">HI</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does anyone more familiar with galois connections know if we have some existing lemmas that would golf this, or have an idea for a better name?</p>",
        "id": 258821357,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634993049
    },
    {
        "content": "<p>Ah, found it (<a href=\"https://github.com/leanprover-community/mathlib/issues/9904\">#9904</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- In a galois insertion exists an `a` such that `b = l a`, then `a = u b` is one such element. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">_root_.galois_connection.exists_eq_l</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">hS</span><span class=\"o\">⟩,</span> <span class=\"n\">hS.symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">gc.l_u_l_eq_l</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">HI</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">HI</span><span class=\"o\">⟩</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">l</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">):</span>\n    <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">γ</span><span class=\"o\">,</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">u</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">set.image_preimage.compose</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">gc</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_eq_l</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 258823234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634995586
    },
    {
        "content": "<p>This seems much more elegant, I will wait till <a href=\"https://github.com/leanprover-community/mathlib/issues/9904\">#9904</a> get merged</p>",
        "id": 258864713,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1635060396
    }
]