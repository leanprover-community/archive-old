[
    {
        "content": "<p>Here's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"c1\">-- if this instance exists, then the below fails</span>\n<span class=\"kd\">instance</span> <span class=\"n\">pi.normed_algebra'</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_ring</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_algebra</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">normed_algebra</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi.normed_algebra</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">pi.normed_algebra</span><span class=\"o\">,</span>\n  <span class=\"n\">some</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">fails_quickly</span> <span class=\"mi\">50000</span> <span class=\"n\">d</span> <span class=\"bp\">|</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n  <span class=\"n\">fail</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 279707424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650559748
    },
    {
        "content": "<p>No amount of argument order permutation seems to help, nor does removing <code>nonempty</code> which we'll be able to do soon</p>",
        "id": 279708620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650560278
    },
    {
        "content": "<p>Fortunately I ended up not actually needing this instance globally any more thanks to the weaker definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/exp\">docs#exp</a>, so I guess I don't need a solution.</p>",
        "id": 279811688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650627734
    }
]