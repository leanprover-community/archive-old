[
    {
        "content": "<p>This PR is a possible improvement to the Lean pretty printer. I'm not sure if it will be merged, but it seems like it's worth thinking about. The PR came from some experimentation after a question by <span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span> <a href=\"#narrow/stream/270676-lean4/topic/Forall.20vs.2E.20if-then/near/299317772\">in this topic</a> about Lean 4's pretty printing rules for foralls.</p>\n<p>The basic motivation is that it is occasionally (and pedagogically) surprising when a non-dependent forall switches from being pretty printed with the forall notation to using the function arrow. Foralls are fairly special as far as pi types go. Recall that if <code>A : Sort u</code> and <code>B : A → Sort v</code> then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">B</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">imax</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If <code>v</code> is <code>0</code> then this is <code>∀ (a : A), B a : Prop</code>, but if <code>v</code> is nonzero then this is <code>Π (a : A), B a : Sort (max u v)</code> (definitely not a <code>Prop</code>).</p>\n<p>The current pretty printing rules are that if <code>B</code> is non-dependent (say <code>B : Sort v</code>), then <code>Π (a : A), B</code> pretty prints as <code>A → B</code> in both cases. An observation is that the \"surprising\" case is when <code>v</code> is zero and <code>u</code> is nonzero, since <code>A → B : Prop</code> but <code>A</code> is not a proposition.</p>\n<p>What this PR does is cause the pretty printer to show <code>∀ (_ : A), B</code> in this case, to let the user know that this is a pi type in Prop with a non-Prop binder. The <code>_</code> indicates that this is a non-dependent forall, so pretty printing this way provides strictly more information to the user than before.  Prop-to-prop implications still pretty print as <code>A → B</code>.</p>\n<p>Furthermore, since it was simpler to implement this way, the PR has the pretty printer replace non-dependent binders in pi types with <code>_</code> in general, for instance <code>Π {_ : ℕ}, ℤ</code> rather than <code>Π {n : ℕ}, ℤ</code> (but still <code>ℕ → ℤ</code> rather than <code>Π (n : ℕ), ℤ</code> for non-dependent explicit binders). It seems to be more useful to know that a pi is non-dependent than to know the name of the binder.</p>",
        "id": 300819312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664200450
    },
    {
        "content": "<p>Sounds great to me</p>",
        "id": 300930258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1664247477
    },
    {
        "content": "<p>Are there any Lean 3 -&gt; Lean 4 concerns with this change?</p>",
        "id": 301015625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664288279
    },
    {
        "content": "<p>It's a bit different from the lean 4 heuristic, which was most recently changed in <a href=\"https://github.com/ydewit/lean4/commit/85925535b0e22e430b8f72c8cdf456a8575e4103\">https://github.com/ydewit/lean4/commit/85925535b0e22e430b8f72c8cdf456a8575e4103</a></p>",
        "id": 301080978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664301874
    },
    {
        "content": "<p>I think this needs to go through an issue or RFC on the lean 4 side</p>",
        "id": 301081064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664301903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could you clarify what you mean? That this should not be merged unless something similar is accepted in Lean 4?</p>",
        "id": 301083780,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664302838
    },
    {
        "content": "<p>no, I think it's independent, but we should try to make them align</p>",
        "id": 301083927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664302891
    },
    {
        "content": "<p>I don't see any issues with merging this PR now at least on the design side</p>",
        "id": 301084144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664302946
    },
    {
        "content": "<p>Thanks, yeah I'll submit a Lean 4 RFC</p>",
        "id": 301084388,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664303013
    },
    {
        "content": "<p>What's the status of this? Are we waiting on an RFC, or is this good to merge (once CI is happy with my conflict resolution)?</p>",
        "id": 310159440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1668504258
    },
    {
        "content": "<p>I've created an RFC: <a href=\"https://github.com/leanprover/lean4/pull/1834\">lean4#1834</a></p>",
        "id": 310173201,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1668509145
    }
]