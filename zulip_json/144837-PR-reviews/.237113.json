[
    {
        "content": "<p>I've reopened <a href=\"https://github.com/leanprover-community/mathlib/issues/7113\">#7113</a>, which now compares the category notion of <code>projective</code> with the module-theoretic <code>is_projective</code> that <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  defined. It also shows <code>[enough_projectives (Module R)]</code>, so once <a href=\"https://github.com/leanprover-community/mathlib/issues/7486\">#7486</a> lands we'll have projective resolutions in <code>Module R</code>.</p>",
        "id": 237637848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620297684
    },
    {
        "content": "<p>However, there are some problems!</p>",
        "id": 237637853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620297688
    },
    {
        "content": "<p>I can only prove that the definitions agree in the special case that the ring and the module live in the same universe.</p>",
        "id": 237637870,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620297702
    },
    {
        "content": "<p>(This is lame and annoying, because <em>of course</em> they live in the same universe. :-)</p>",
        "id": 237637909,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620297724
    },
    {
        "content": "<p>I'm wondering actually if the definitions just don't agree otherwise! I'm thoroughly confused, in any case.</p>",
        "id": 237637967,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620297753
    },
    {
        "content": "<p>The formulation Kevin gave of <code>is_projective</code> in terms of <code>finsupp.total</code> is perhaps a bit weird: if we don't have <code>v = u</code>, it intrinsically involves linear maps between modules in different universes!</p>",
        "id": 237638009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620297799
    },
    {
        "content": "<p>Note that the categorical definition of <code>projective</code> doesn't (can't) do this: the ring and the module can be in different universes, but all the modules are in the same universe!</p>",
        "id": 237638048,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620297832
    },
    {
        "content": "<p>(Flagging <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>  on this as well.)</p>",
        "id": 237638078,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620297844
    },
    {
        "content": "<p>At this stage I'm feeling pretty bamboozled, and would love if someone could rescue this!</p>",
        "id": 237638109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620297859
    },
    {
        "content": "<p>Oh you have <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> to blame for this :-) My definition of <code>of_lifting_property</code> originally stuck to everything in the same universe. I should never have flagged this in the docstring :-/</p>",
        "id": 237638359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298052
    },
    {
        "content": "<p>In all applications, the rings and all the modules will be in the same universe!</p>",
        "id": 237638435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298094
    },
    {
        "content": "<p>(Namely, <code>Type 0</code> :-)</p>",
        "id": 237638466,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298114
    },
    {
        "content": "<p>Scott, what exactly do you mean by \"rescue\"? I was expecting to see a <code>sorry</code> somewhere.</p>",
        "id": 237638626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298217
    },
    {
        "content": "<p>I guess the problem is if you have a ring <code>R : Type u</code> with <code>v  &lt; u</code>, then the category of R-modules in <code>Type v</code> is not well-behaved? For example there's no free R-module on one element!</p>",
        "id": 237638847,
        "sender_full_name": "David WÃ¤rn",
        "timestamp": 1620298343
    },
    {
        "content": "<p>At the moment we allow the ring and the modules to live in different universes \"on both sides\" (categorical / explicit), and we give a definition of projective on both sides.</p>",
        "id": 237638971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298431
    },
    {
        "content": "<p>If you imagine \"Type -1\" as finite types (just as a mental model) then indeed Z-modules in Type -1 would be finite abelian groups. I guess they're pretty well-behaved...</p>",
        "id": 237638980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298439
    },
    {
        "content": "<p>However I suspect they actually disagree except when <code>v = u</code>.</p>",
        "id": 237639028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298446
    },
    {
        "content": "<p>and I'm really not happy with that.</p>",
        "id": 237639034,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298452
    },
    {
        "content": "<p>If you stick to v = u are there no problems?</p>",
        "id": 237639067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298471
    },
    {
        "content": "<p>Yes, no problems, and that is what is in the PR.</p>",
        "id": 237639085,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298484
    },
    {
        "content": "<p>So one solution is to just enforce <code>v = u</code> on one or both sides of the setup.</p>",
        "id": 237639122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298513
    },
    {
        "content": "<p>Another solution is to not care that they only agree at <code>v = u</code>, and write some careful doc-strings explaining this.</p>",
        "id": 237639159,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298531
    },
    {
        "content": "<p>I would have to dig to work out who added the freedom to have <code>v != u</code> in <code>Module R</code>, and why. But I do remember them convincing me it was worth doing. :-)</p>",
        "id": 237639244,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298570
    },
    {
        "content": "<p>I think Markus did that at some point</p>",
        "id": 237639275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620298588
    },
    {
        "content": "<p>Hah! Then you should ask them to sort this out :-)</p>",
        "id": 237639282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298592
    },
    {
        "content": "<p>I think Markus has some pretty serious exams in the next few weeks (Cambridge Part III)</p>",
        "id": 237639305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298610
    },
    {
        "content": "<p>I would be happy just on the <code>is_projective</code> side to force <code>v = u</code>.</p>",
        "id": 237639328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298629
    },
    {
        "content": "<p>That would solve my queasy feeling. :-)</p>",
        "id": 237639350,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298643
    },
    {
        "content": "<p>So if <code>v &lt; u</code>, there are no non-trivial free modules... but what are the projective objects in this case? Do they still exist?</p>",
        "id": 237639360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620298652
    },
    {
        "content": "<p>It seems like a very awkward category.</p>",
        "id": 237639383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620298671
    },
    {
        "content": "<p>For finite groups there aren't any non-zero ones which satisfy the axiom for lifting along surjections of finite groups</p>",
        "id": 237639391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298681
    },
    {
        "content": "<p>How about R has type u and M has type max v u?</p>",
        "id": 237639462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298705
    },
    {
        "content": "<p>Yes, notice that in this PR I only prove <code>instance Module_enough_projectives : enough_projectives (Module.{u} R) :=</code> that is, there are enough projectives in the <code>v = u</code> case.</p>",
        "id": 237639482,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298725
    },
    {
        "content": "<p>Maybe this is the solution: we should change the definition of <code>Module R</code>, so the modules live in <code>max u v</code>.</p>",
        "id": 237639530,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298768
    },
    {
        "content": "<p>Then <code>of_lifting_property'</code> is talking about all modules in the same universe as P</p>",
        "id": 237639546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298781
    },
    {
        "content": "<p>Presumably that would satisfy Markus' request?</p>",
        "id": 237639550,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298784
    },
    {
        "content": "<p>On the other hand, my experience is that as soon as you start putting in <code>max</code> by hand in universe levels you very quickly get confused and sad. :-)</p>",
        "id": 237639675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298816
    },
    {
        "content": "<p>So in that sense it's better to just leave them independent, and perhaps warn people that if <code>v &lt; u</code>, the category is sick.</p>",
        "id": 237639728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298852
    },
    {
        "content": "<p>If R is a product of two rings S and T in universes v and u, with v&lt;u, then perhaps S is a projective R-module in universe v</p>",
        "id": 237639746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620298857
    },
    {
        "content": "<p>Fortunately it is not the case that <code>0 &lt; 0</code>. :-)</p>",
        "id": 237639763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298869
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">Module_enough_projectives</span> <span class=\"o\">:</span> <span class=\"n\">enough_projectives</span> <span class=\"o\">(</span><span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>works with no change to the proof.</p>",
        "id": 237639916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298955
    },
    {
        "content": "<p>Also this <code>max</code> trick still lets you do vector spaces over the reals which live in an arbitrary universe.</p>",
        "id": 237640047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620299018
    },
    {
        "content": "<p>How do people feel about requiring <code>v = u</code> in the definition of <code>is_projective</code> on the \"explicit\" side? Then the definitions really do match up everywhere they are defined.</p>",
        "id": 237640052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620299023
    },
    {
        "content": "<p>Or maybe I can try using a <code>max</code> there.</p>",
        "id": 237640115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620299046
    },
    {
        "content": "<p>I think what I want is to shrink the universe-polymorphism on at least one side, so that the definitions match on the nose where they are allowed.</p>",
        "id": 237640163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620299084
    },
    {
        "content": "<p>My principle with these things is that the moment there's universe trouble, just put everything in the same universe. As I say, the original projective module PR did this, and it was only because Eric observed that this max trick enabled something slightly more general to be stated and proved that we ended up with more than one universe at all.</p>",
        "id": 237640226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620299130
    },
    {
        "content": "<p>Okay, everything works great if on the module side I put the module in <code>max u v</code>.</p>",
        "id": 237640566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620299333
    },
    {
        "content": "<p>I will do that.</p>",
        "id": 237640571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620299339
    },
    {
        "content": "<p>Follow-up question: drop support for <code>semiring</code> in <code>is_projective</code>?</p>",
        "id": 237640599,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620299361
    },
    {
        "content": "<p>The only payoff is that if I don't drop it, I will need to add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A variant of `of_lifting_property` when we're working over a `[ring R]`,</span>\n<span class=\"sd\">which only requires quantifying over modules with an `add_comm_group` instance. -/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">of_lifting_property'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- If for all surjections of `R`-modules `M ââ N`, all maps `P ââ N` lift to `P ââ M`,</span>\n  <span class=\"o\">(</span><span class=\"n\">huniv</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exactI</span>\n    <span class=\"bp\">â</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">],</span>\n    <span class=\"kd\">by</span> <span class=\"n\">exactI</span>\n    <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">ââ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">ââ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n  <span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"bp\">â</span> <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">ââ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">f.comp</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"c1\">-- then `P` is projective.</span>\n  <span class=\"n\">is_projective</span> <span class=\"n\">R</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- We could try and prove this *using* `of_lifting_property`,</span>\n<span class=\"c1\">-- but this quickly leads to typeclass hell,</span>\n<span class=\"c1\">-- so we just prove it over again.</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- let `s` be the universal map `(P ââ R) ââ P` coming from the identity map `P ââ P`.</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">â¨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">â©</span> <span class=\"o\">:</span> <span class=\"bp\">â</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">ââ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span> <span class=\"bp\">ââ</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">finsupp.total</span> <span class=\"n\">P</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"n\">id</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.id</span> <span class=\"o\">:=</span>\n    <span class=\"n\">huniv</span> <span class=\"o\">(</span><span class=\"n\">finsupp.total</span> <span class=\"n\">P</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">â</span> <span class=\"n\">P</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">linear_map.id</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">ââ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- This `s` works.</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">linear_map.ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">finsupp.single</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237640625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620299391
    },
    {
        "content": "<p>whereas if we drop <code>semiring</code> support the existing <code>of_lifting_property</code> is already enough.</p>",
        "id": 237640683,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620299413
    },
    {
        "content": "<p>I'm happy to nuke the semirings. My original PR only dealt with rings. <span class=\"user-mention\" data-user-id=\"317890\">@Julian KÃ¼lshammer</span> you remarked that it generalised to semirings -- do people do projective semimodules over semirings? Did I ask this already?</p>",
        "id": 237641744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620300062
    },
    {
        "content": "<p><a href=\"https://www.google.com/search?q=%22projective+semimodule%22\">https://www.google.com/search?q=%22projective+semimodule%22</a> does exist, although google does ask \"did you mean projective submodule?\". :-)</p>",
        "id": 237641943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620300182
    },
    {
        "content": "<p>My instinct is to make the primed one the semimodule one if you're going to leave it in.</p>",
        "id": 237642094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620300265
    },
    {
        "content": "<p>Although the entire arxiv only finds 9 articles with the phrase. I think they might count as an obscurity. :-)</p>",
        "id": 237642150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620300315
    },
    {
        "content": "<p>Although there is one by Connes...</p>",
        "id": 237642198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620300339
    },
    {
        "content": "<p>I'd be inclined to keep both the semiring and ring versions, but you could reserve the primed name for the semiring version</p>",
        "id": 237643131,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620300840
    },
    {
        "content": "<p>Done.</p>",
        "id": 237650355,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620304619
    },
    {
        "content": "<p>Is it better to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/small\">docs#small</a> here as <code>(M : Type v) [small.{max (u v)} M]</code> instead of <code>M : Type (max u v)</code>?</p>",
        "id": 237650856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620304846
    },
    {
        "content": "<p>I don't think that gives any additional flexibility. Do that just allows <code>M</code> to be even bigger, but we already have completely flexibility to allow large <code>M</code> through the <code>v</code> parameter.</p>",
        "id": 237651216,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620305028
    },
    {
        "content": "<p>That might save users from cryptic universe unification error messages though</p>",
        "id": 237651287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620305047
    },
    {
        "content": "<p>Are you proposing that <code>M</code> is in some third universe? I don't understand what you're proposing yet.</p>",
        "id": 237651355,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620305091
    },
    {
        "content": "<p>Leave <code>M : Type v</code> as it currently is, but require it is larger than <code>u</code> using <code>small</code></p>",
        "id": 237651405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620305126
    },
    {
        "content": "<p>Mathematically, we need an inequality that says <code>M</code> lives in at least a large a universe as <code>R</code>, so that free modules can exist.</p>",
        "id": 237651407,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620305127
    },
    {
        "content": "<p>I agree; I'm just suggesting that be enforced propositionally</p>",
        "id": 237651449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620305148
    },
    {
        "content": "<p>Rather than through unification</p>",
        "id": 237651462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620305155
    },
    {
        "content": "<p>Wouldn't you do that they other way around --- ie with the typeclass <code>[small.{v} R]</code>?</p>",
        "id": 237651570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620305197
    },
    {
        "content": "<p>Maybe, I didn't think of that.</p>",
        "id": 237651636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620305235
    },
    {
        "content": "<p>and even if you do that, you get pretty weird free modules, that aren't actually copies of <code>R</code>, but copies of the small model of <code>R</code>.</p>",
        "id": 237651702,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620305256
    },
    {
        "content": "<p>I think it's going to be even more confusing than the <code>max</code>.</p>",
        "id": 237651743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620305275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I actually don't care about semirings. Mathlib is the first place I encountered them. I just suggested it because it seemed that your PR could be generalised to semirings without changing too much and that seemed to be 'in the style of mathlib'.</p>",
        "id": 237728343,
        "sender_full_name": "Julian KÃ¼lshammer",
        "timestamp": 1620334961
    },
    {
        "content": "<p>Indeed it is the style! My impression is that we've decided to keep it, it's just a shame that we now have to duplicate code (well, I don't think it's a shame really, I don't see any problems with duplicating code, but the computer scientists seem to think that it's a bad thing)</p>",
        "id": 237734083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620336714
    },
    {
        "content": "<p>Duplication in one place quickly multiplies into duplication in lots of places</p>",
        "id": 237734634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620336998
    },
    {
        "content": "<p>I think that semirings get little representation in maths, but they are used more frequently than it appears.</p>\n<p>For instance, I often think about sums of squares, where it is convenient to use results for \"rings without using minus\"!  I find it great when in Lean these \"just work\".</p>",
        "id": 237734994,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620337205
    },
    {
        "content": "<p>I have used representation theory of subsemirings of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">M_n(\\mathbb{N})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">â</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">N</span><span class=\"mclose\">)</span></span></span></span> in many papers, so I am sympathetic to developing the basics of representation theory in this generality too.</p>",
        "id": 237745358,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620343283
    }
]