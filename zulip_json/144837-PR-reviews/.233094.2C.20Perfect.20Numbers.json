[
    {
        "content": "<p>I've changed my perfect numbers file to use pnats, and a finsupp version of prime factorization <a href=\"https://github.com/leanprover-community/mathlib/compare/freek-70?expand=1\">https://github.com/leanprover-community/mathlib/compare/freek-70?expand=1</a></p>",
        "id": 202528815,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593576064
    },
    {
        "content": "<p>There are now some sorries in the file multiplicity_vectors.lean (which I should maybe have renamed...) that will mostly be fixed with the fact that multiset.to_finsupp is a lattice isomorphism (which I believe is not defined anywhere).</p>",
        "id": 202528898,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593576207
    },
    {
        "content": "<p>Also no proof for the final theorem, but I've proved both directions with slightly different statements, and it's (pretty much) a matter of deciding which formulation of the statement is better, and altering one of them.</p>",
        "id": 202528954,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593576273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Do you have a preference for one of the two approaches? You know them best.</p>",
        "id": 202533668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593583142
    },
    {
        "content": "<p>I think it's easier to prove the one that involves <code>mersenne_succ</code> but I worry it's not a natural-enough statement</p>",
        "id": 202534024,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593583650
    },
    {
        "content": "<p>Otherwise there's kind of a lot of p+1-1 and p-1+1 floating around</p>",
        "id": 202534079,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593583696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Is there an easy way for me to compare the two approaches?</p>",
        "id": 202534536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593584338
    },
    {
        "content": "<p>Do you have them on different branches?</p>",
        "id": 202534541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593584345
    },
    {
        "content": "<p>Or should I compare two different commits on the same branch?</p>",
        "id": 202534548,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593584358
    },
    {
        "content": "<p>On the same branch, at <a href=\"https://github.com/leanprover-community/mathlib/pull/3094\">https://github.com/leanprover-community/mathlib/pull/3094</a></p>",
        "id": 202535091,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593585104
    },
    {
        "content": "<p>i may have misinterpreted what you meant by the two approaches</p>",
        "id": 202535137,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593585137
    },
    {
        "content": "<p>If you meant nat vs pnat, the nat version still stands unchanged at 70_perfect_numbers.lean</p>",
        "id": 202535162,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593585191
    },
    {
        "content": "<p>The pnat version is at pnat_perfect.lean and multiplicity_vectors.lean in the same directory</p>",
        "id": 202535183,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593585225
    },
    {
        "content": "<p>If you meant the two statements of the two implications of the theorem in the pnat version, then check the big theorems at the bottom of pnat_perfect.lean</p>",
        "id": 202535266,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593585320
    },
    {
        "content": "<p>Ok, thanks for the pointers</p>",
        "id": 202536320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593586631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> also had some <code>p-1+1</code> issues with the Lucas Lehmer stuff. You could follow his \"hack\"</p>",
        "id": 202536394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593586699
    },
    {
        "content": "<p>It seems that his main hack was passing to the integers, which I could probably apply somewhere.</p>",
        "id": 202588289,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593619650
    },
    {
        "content": "<p>No, I was thinking of something else. I think he is using <code>p'</code> to denote <code>p-1</code> to avoid nat-subtraction headaches.</p>",
        "id": 202592052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593621458
    },
    {
        "content": "<p>Ah, I think I’m doing something like that. I should have cleared the sorry in pnat_perfect.lean within a few hours, should I keep it in that separate file, or replace 70_perfect_numbers.lean?</p>",
        "id": 202599225,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593624951
    },
    {
        "content": "<p>I’m probably going to have to break this all into several PRs to existing mathlib files anyway...</p>",
        "id": 202599352,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593624996
    },
    {
        "content": "<p><code>pnat_perfect.lean</code> now sorry-free.</p>",
        "id": 202614354,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593632218
    },
    {
        "content": "<p>I'm going to try to fix the sorries in <code>multiplicity_vectors.lean</code>, and then I'll need advice in sorting through where to put everything.</p>",
        "id": 202614444,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593632260
    },
    {
        "content": "<p>Ok, the  pnat version and its prereqs are all sorry-free (although there's one extra file with sorries)</p>",
        "id": 202642809,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593654473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Nice work. Does that mean you would like some reviews now?</p>",
        "id": 202652683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593669334
    },
    {
        "content": "<p>I feel like it would help me if you say exactly what you would like to have reviewed. Because you had several different approaches, and it's not clear where I should direct my attention/energy.</p>",
        "id": 202652749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593669379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yes, some reviews would be great. I'd want <code>pnat_perfect.lean</code> checked mostly for whether the final statements look like what we want them to be, and <code>multiplicity_vectors.lean</code> checked for which parts should be put in <code>src/</code></p>",
        "id": 202652958,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593669717
    },
    {
        "content": "<p>I'm guessing that most of <code>multiplicity_vectors</code> wants to go in <code>data.pnat.factors</code> except for some which wants to go into <code>order.order_iso</code> or something about lattices</p>",
        "id": 202653055,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593669832
    },
    {
        "content": "<p>and <code>pnat_perfect</code> will be renamed if its approach looks reasonable, and either left where it is, with any remaining basic pnat lemmas moved somewhere else, or put in <code>number_theory</code> I guess</p>",
        "id": 202653136,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593669928
    },
    {
        "content": "<p>There are like 1000 lines, and you said that a PR should be about 250, so I should probably break those contributions up into multiple PRs also</p>",
        "id": 202653184,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593669972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233094.2C.20Perfect.20Numbers/near/202653184\">said</a>:</p>\n<blockquote>\n<p>There are like 1000 lines, and you said that a PR should be about 250, so I should probably break those contributions up into multiple PRs also</p>\n</blockquote>\n<p>Well, I'll take a look first (-; No worries</p>",
        "id": 202653459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593670336
    },
    {
        "content": "<p>Two new files of ~500 lines is really a lot easier to review than 500 lines scattered over 20 files</p>",
        "id": 202653572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593670523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> I've left a first set of comments.</p>",
        "id": 202655188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593672560
    },
    {
        "content": "<p>I think that the first PR that I would split of is the stuff on <code>gcd</code> for pnats. That code looked quite stable already.</p>",
        "id": 202655209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593672589
    },
    {
        "content": "<p>I spun that off into <a href=\"https://github.com/leanprover-community/mathlib/issues/3274\">#3274</a>.</p>",
        "id": 202759432,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593736898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Thanks! I left come comments.</p>",
        "id": 202768307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593751314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> How and when do I actually get this to merge?</p>",
        "id": 202815638,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593790481
    },
    {
        "content": "<p>The label is currently \"changes requested\". If you think you made all the changes requested, change the label to \"request review\"</p>",
        "id": 202816029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593790754
    },
    {
        "content": "<p>And patience if definitely part of the process. Nobody here is being paid to review and merge PRs, although many of us more or less unilaterally decided it somehow counts as \"work\".</p>",
        "id": 202817050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593791473
    },
    {
        "content": "<p>Thanks! I think it’s probably ready to go, I just don’t want it stalled on a step I’ve neglected.</p>",
        "id": 202818065,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593792167
    },
    {
        "content": "<p>Maybe I'm missing something, but I see a lot of comments marked as resolved that don't seem to have been addressed. e.g. <a href=\"https://github.com/leanprover-community/mathlib/pull/3094/files#r441406414\">https://github.com/leanprover-community/mathlib/pull/3094/files#r441406414</a> still looks like a non-terminal <code>simp</code> to me.</p>",
        "id": 202818072,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593792173
    },
    {
        "content": "<p>That one's from <a href=\"https://github.com/leanprover-community/mathlib/issues/3094\">#3094</a> but I see the same in <a href=\"https://github.com/leanprover-community/mathlib/issues/3274\">#3274</a>.</p>",
        "id": 202818082,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593792185
    },
    {
        "content": "<p>I'll check what you mean. I created some weirdness for myself on <a href=\"https://github.com/leanprover-community/mathlib/issues/3094\">#3094</a> by creating copying to a new file when I was making big changes, instead of embracing version control and editing the existing file with the knowledge I could revert.</p>",
        "id": 202818770,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593792637
    },
    {
        "content": "<p>I mean like here: <a href=\"https://github.com/leanprover-community/mathlib/pull/3274#discussion_r449367640\">https://github.com/leanprover-community/mathlib/pull/3274#discussion_r449367640</a> Johan requested a change, and the conversation is marked as resolved, but the change was never pushed to that GitHub branch. You can see in the \"files changed\" tab that the file is still as before.</p>",
        "id": 202819092,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593792848
    },
    {
        "content": "<p>On <a href=\"https://github.com/leanprover-community/mathlib/issues/3274\">#3274</a>, there's only one conversation where I'm not sure I should have marked it resolved, I reverted it to unresolved.</p>",
        "id": 202819097,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593792850
    },
    {
        "content": "<p>At a quick glance none of them look resolved to me. I see Johan left 11 comments, and the only change that's reached GitHub since is <a href=\"https://github.com/leanprover-community/mathlib/pull/3274/commits/ee6af484b5a4832ca012f4fcdbadd4fb33d89580\">this one</a></p>",
        "id": 202819206,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593792944
    },
    {
        "content": "<p>Oh damn, I see.... I think I must have accidentally overwritten them on my end when I thought I had successfully pushed them...</p>",
        "id": 202819341,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593793036
    },
    {
        "content": "<p>Sorry, still totally new to git</p>",
        "id": 202819346,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593793040
    },
    {
        "content": "<p>Ok, I think I've successfully restored and pushed all those changes that were missing.</p>",
        "id": 202819950,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593793417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233094.2C.20Perfect.20Numbers/near/202819097\">said</a>:</p>\n<blockquote>\n<p>On <a href=\"https://github.com/leanprover-community/mathlib/issues/3274\">#3274</a>, there's only one conversation where I'm not sure I should have marked it resolved, I reverted it to unresolved.</p>\n</blockquote>\n<p>As far as that remaining one, I'm not sure if it makes more sense to try and recreate the entire API for gcd and coprime for nats in this PR, or to expand it now, get the Perfect Number theorem online, and then work on a generalizing framework to be able to prove those basic facts for all <code>comm_monoid</code>s with a reasonable definition of gcd.</p>",
        "id": 202821258,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593794373
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> I've never thought about what the correct generality is for writing an API for <code>gcd</code>. If you have ideas about this, that would be great.</p>",
        "id": 202821876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593794977
    },
    {
        "content": "<p>I agree that if that is the case, it doesn't make a lot of sense to duplicate the entire API</p>",
        "id": 202821892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593794995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> I left some new comments.</p>",
        "id": 202825927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593798640
    },
    {
        "content": "<p>This is looking good now. But CI reports some weird build failures. If you have trouble fixing them, I can help.</p>",
        "id": 202826096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593798816
    },
    {
        "content": "<p>I think it was just the fact that I ended a section wrong. We'll see in a few minutes if it's fixed, I suppose.</p>",
        "id": 202846016,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593818892
    },
    {
        "content": "<p>Oof no there are still mysterious errors</p>",
        "id": 202846525,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593819806
    },
    {
        "content": "<p>I think they're errors with declaring @[refl] for pnat.dvd_refl, because somehow it's failing to resolve states x | x where x is a nat?</p>",
        "id": 202846841,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593820284
    },
    {
        "content": "<p>I made another sub-PR, <a href=\"https://github.com/leanprover-community/mathlib/issues/3291\">#3291</a>, on the factor_finsupp function. Right now it's all in one file, but I've made notes on where I think things should probably move.</p>",
        "id": 202940282,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1593986762
    },
    {
        "content": "<p>I have a busy two days ahead of me, so if someone else can review this one: please go ahead.</p>",
        "id": 202953230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594010669
    }
]