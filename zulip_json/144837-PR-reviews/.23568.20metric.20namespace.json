[
    {
        "content": "<p>After Mario's alternative proposition for the metric namespace, I fixed the build. The following line in <code>normed_space.lean</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">tendsto_mul</span> <span class=\"n\">limf&#39;</span> <span class=\"n\">limg&#39;</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>became a timeout. I can fix the build by replacing this line with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto_mul</span> <span class=\"n\">limf&#39;</span> <span class=\"n\">limg&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n</pre></div>\n\n\n<p>(which should be essentially equivalent if I understand what <code>simpa</code> does) but this is not really satisfactory.</p>\n<p>If I understand what is going on, the problem is that I have a fact <code>limg' : tendsto (λ (x : γ), ∥g x∥) e (nhds ∥b∥)</code> in the context. The <code>simpa</code> call tries to close the goal using <code>by assumption</code>, which tries all the things in the context to close the goal. In particular, it tries <code>limg'</code>, but the unifier is not able to realize that it does not match the goal, and times out while trying. Indeed, if I replace the last line <code>exact this</code> with <code>exact limg'</code>, I get a timeout.</p>\n<p>My guess is that the namespace change has changed the order in which things are tried by <code>by assumption</code> (alphabetical order or something?): before the change, <code>limg'</code> was tried after <code>this</code> and everything went smoothly, and now this is not the case any more, but only by accident. It seems to me that the change only reveals a problem that was already there before.</p>\n<p>Mario has already written on this chat that <code>by assumption</code>is not always safe, and this is another instance. Is there anything to be done here (marking something as irreducible somewhere?), or should we just accept this as a fact of life?</p>",
        "id": 155045224,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1547411313
    },
    {
        "content": "<p><code>clear limg'</code> first. A long term solution is to stop assumption unfolding things quite as aggressively, I think it even unfold irreducibles at the moment.</p>",
        "id": 155045311,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547411480
    },
    {
        "content": "<p>Why does the <code>using</code> form of <code>simpa</code> need to use assumption though? Shouldn't it just use <code>exact</code>?</p>",
        "id": 155045370,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547411562
    },
    {
        "content": "<p>I see it is documented that it uses <code>assumption</code>, but I don't understand the purpose--surely we always want to use the thing specified with <code>using</code> when it is present</p>",
        "id": 155045432,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547411695
    },
    {
        "content": "<p>I can not clear <code>limg'</code>, I need it below. Replacing one line by three lines is not too bad, as a workaround, but fixing <code>simpa</code> or <code>assumption</code> would definitely be better.</p>",
        "id": 155045449,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1547411715
    },
    {
        "content": "<blockquote>\n<p>I see it is documented that it uses <code>assumption</code>, but I don't understand the purpose--surely we always want to use the thing specified with <code>using</code> when it is present</p>\n</blockquote>\n<p>My guess is that it is for implementation purposes: it makes it possible to use the same code for the versions with and without <code>using</code>.</p>",
        "id": 155045580,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1547411945
    },
    {
        "content": "<p>I'll try to make it use the provided term to close the goal and see whether it breaks everything.</p>",
        "id": 155045703,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547412160
    },
    {
        "content": "<p>I guess you could probably use <code>have lim1 : tendsto (λ x, ∥f x - s∥ * ∥g x∥) e (nhds 0) := (zero_mul ∥b∥) ▸ tendsto_mul limf' limg', </code> but this is very annoying. I think that every single time I used <code>tendsto_add</code> or <code>tendsto_mul</code> I was frustrated by having to care about such trivial computation, either explicitly or using <code>simp</code>. It probably means we need a limit computation tactic.</p>",
        "id": 155045718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547412223
    },
    {
        "content": "<p>A one-liner, yeah!</p>",
        "id": 155045954,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1547412624
    },
    {
        "content": "<p>Normally, <code>back</code> (together with marking most limit lemmas with, say, <code>limit_rules</code>) should make limits much less painful, but it will not work before Lean 4 as <code>apply</code> unfolds too much...</p>",
        "id": 155046024,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1547412746
    },
    {
        "content": "<p>It should still be possible to write some tactic, even in Lean 3, but I have too much to do. For instance I need to prepare a lecture for tomorrow  morning...</p>",
        "id": 155046081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547412868
    },
    {
        "content": "<p>I think <code>clear</code> only clears for the current goal, so it should be possible to use it.</p>",
        "id": 155046281,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547413297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> , try with <a href=\"https://github.com/leanprover-community/mathlib/tree/rwbarton-simpa\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/rwbarton-simpa\">https://github.com/leanprover-community/mathlib/tree/rwbarton-simpa</a>?</p>",
        "id": 155046969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1547414627
    },
    {
        "content": "<p>Works like a charm! And it should be a definitive improvement on all points on view, including clarity (the proof in padics you had to fix was probably a mistake) and speed (no need to check everything in the context).</p>",
        "id": 155048122,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1547416755
    }
]