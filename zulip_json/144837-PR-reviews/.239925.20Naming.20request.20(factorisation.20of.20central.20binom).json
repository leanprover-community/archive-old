[
    {
        "content": "<p>I have a few lemmas of type signature e.g. the following (used in the proof of Bertrand's postulate):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">multiplicity_central_binom_of_large_eq_zero</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">n_big</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">small</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">big</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">central_binom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"o\">:=</span>\n</code></pre></div>\n<p>These lemmas are all conditioned on <code>p &lt;= n</code> (which is kind of a crucial point of the proof!). So it's not a nice neat fact like \"sufficiently large primes don't appear in the prime factorisation of <code>(2 * n).choose n</code>\". Can anyone come up with a remotely reasonable name for this lemma?</p>",
        "id": 259157399,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1635280603
    },
    {
        "content": "<p><code>padic_val_nat_central_binom_of_something</code>?</p>",
        "id": 259157720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635280800
    },
    {
        "content": "<p>Then it depends on exactly how many such lemmas you have.</p>",
        "id": 259157790,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635280819
    },
    {
        "content": "<p>The lemmas are facts about <code>p</code> more than they're facts about <code>n</code>. My other two lemmas are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">multiplicity_central_binom_of_large_le_one</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">n_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p_large</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">central_binom</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span>\n  <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">multiplicity_central_binom_le</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">n_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">padic_val_nat</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">central_binom</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">log</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 259157873,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1635280873
    },
    {
        "content": "<p>This is unrealted, but you can group <code>p</code> and  <code>n</code> and not use that many lines for the hypotheses.</p>",
        "id": 259158013,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635280948
    },
    {
        "content": "<p>(I haven't done any linting of the PR in question yet, but I'll do that)</p>",
        "id": 259158084,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1635280995
    },
    {
        "content": "<p>Resubmitting this for review please - I am really unhappy about the naming but just can't think of anything better :(</p>",
        "id": 263774536,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1638719452
    },
    {
        "content": "<p>I might change <code>multiplicity_central_binom_of_large_le_one</code> to <code>multiplicity_central_binom_le_one_of_large</code> and similar for below.<br>\nIt strikes me that you are using <code>multiplicity</code> instead of <code>padic_val_nat</code>, and it is even the case that the docstring of <code>padic_val_rat_of_int</code> uses the word <code>multiplicity</code>. It seems <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicity\">docs#multiplicity</a> has been defined - might it be better to use this definition, or rename the <code>padic_val_</code> functions to something that uses the word multiplicity?</p>",
        "id": 263791402,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638741569
    },
    {
        "content": "<p>Back when doing the original mammoth Bertrand PR, <code>multiplicity</code> turned out to be really hard to use compared to <code>padic_val_nat</code>, because of the <code>enat</code>s involved :(</p>",
        "id": 263826197,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1638783513
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/mathlib/pull/9925\">#9925</a> is ready again!</p>",
        "id": 279306128,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1650300553
    }
]