[
    {
        "content": "<p>Resuscitated this old PR by <span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span></p>\n<p>There's an oddness in typeclass inference that I don't understand here. (Edit: this example was silly, there's a better one below.)</p>",
        "id": 265649872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640065638
    },
    {
        "content": "<p>oh no typeclass hell, my favorite</p>",
        "id": 265649961,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640065744
    },
    {
        "content": "<p>yeah that's weird, degree is defined on fintypes of vertex neighbors</p>",
        "id": 265649976,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640065771
    },
    {
        "content": "<p>Oh, I see the problem with the code I pasted -- the example I had earlier made more sense.</p>",
        "id": 265649977,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640065772
    },
    {
        "content": "<p>ah yeah, card of V</p>",
        "id": 265649989,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640065797
    },
    {
        "content": "<p>wait</p>",
        "id": 265650037,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640065810
    },
    {
        "content": "<p>is it that the decidability is what lets us work with cardinalities</p>",
        "id": 265650081,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640065871
    },
    {
        "content": "<p>it's been a while, sorry</p>",
        "id": 265650082,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640065877
    },
    {
        "content": "<p>Oops, I didn't notice the two <code>v : V</code>'s in that example.  Here's the main one I didn't know what was going on with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_neighbor_set_union_compl_neighbor_set</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">V</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is the workaround for now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_neighbor_set_union_compl_neighbor_set</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">G.adj</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">V</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 265650183,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640065975
    },
    {
        "content": "<p>There must be something somewhere inside these two <code>fintype</code> terms that are subtly different. I checked that they're defeq at least, but that's as far as I've gone.</p>",
        "id": 265650299,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640066135
    },
    {
        "content": "<p>More details:</p>\n<p>This fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_neighbor_set_union_compl_neighbor_set</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset.card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">V</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The output of <code>set_option trace.class_instances true</code> has as its first few lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span>  <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>However, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_neighbor_set_union_compl_neighbor_set</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set.to_finset</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">G.neighbor_set</span> <span class=\"n\">v</span> <span class=\"bp\">∪</span> <span class=\"n\">G</span><span class=\"bp\">ᶜ.</span><span class=\"n\">neighbor_set</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">fintype.card</span> <span class=\"n\">V</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 265651470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640067559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> Here's the TC issue in the message above. For some reason it's not able to find the <code>fintype</code> instance itself, but if you pass it explicitly it's ok. I'm guessing some reducibility thing is causing it to fail the <code>is_def_eq</code> check.</p>",
        "id": 265941929,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640284889
    }
]