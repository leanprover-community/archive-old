[
    {
        "content": "<p>This PR is a genuine \"request for comment\".  I delete the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cubic\">docs#cubic</a> structure introduced in <a href=\"https://github.com/leanprover-community/mathlib/pull/11483\">#11483</a> and replace it with a new constructor for polynomials of degree <code>&lt; N</code> given the <code>N</code>-vector of their coefficients.</p>",
        "id": 288228726,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656713139
    },
    {
        "content": "<p>I think this is a great idea! I had the same concern about <code>cubic</code> and came up with the same fix, but didn't have time to implement it.</p>",
        "id": 288229403,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656713646
    },
    {
        "content": "<p>I have something similar on a local repo, where I construct a poly directly from a list. One could do that, or use your API and list.of_fn.</p>",
        "id": 288230237,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656714298
    },
    {
        "content": "<p>What one loses by using the list API is that the constructor is an add_hom</p>",
        "id": 288230275,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656714336
    },
    {
        "content": "<p>Yakov, indeed as I was writing this I was thinking to myself that you had probably considered the idea before :)</p>",
        "id": 288230354,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656714394
    },
    {
        "content": "<p>I ended up going down the path of upgrading a list to an add_monoid_algebra</p>",
        "id": 288230408,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656714469
    },
    {
        "content": "<p>So one does get the add_hom when operating on those.</p>",
        "id": 288230457,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656714487
    },
    {
        "content": "<p>For your to_poly, what's the rationale to not have the codomain be the subtype?</p>",
        "id": 288230605,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656714634
    },
    {
        "content": "<p>And bundle the degree ceiling proof?</p>",
        "id": 288230619,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656714650
    },
    {
        "content": "<p>Or have it as a linear hom?</p>",
        "id": 288230645,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656714682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2315088.20rewrite.20cubics/near/288230605\">said</a>:</p>\n<blockquote>\n<p>For your to_poly, what's the rationale to not have the codomain be the subtype?</p>\n</blockquote>\n<p>I have a lot of <code>(to_poly P).degree</code>, <code>(to_poly P).nat_degree </code>, <code>(to_poly P).leading_coeff</code>,<code>(to_poly P).roots</code>, where it would be more cumbersome to write <code>(to_poly P : R[X]).degree</code> etc.</p>",
        "id": 288230740,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656714770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2315088.20rewrite.20cubics/near/288230645\">said</a>:</p>\n<blockquote>\n<p>Or have it as a linear hom?</p>\n</blockquote>\n<p>You're right, it should be an <code>R</code>-linear map rather than an additive homomorphism.  Thanks!</p>",
        "id": 288230822,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656714848
    },
    {
        "content": "<p>You could have two constructors, one that is to the subtype, and one that is to the base type.</p>",
        "id": 288231204,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656715189
    },
    {
        "content": "<p>The subtype constructor already exists, as the symm of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree_lt_equiv\">docs#polynomial.degree_lt_equiv</a></p>",
        "id": 288231291,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656715265
    },
    {
        "content": "<p>Ah, right.</p>",
        "id": 288231300,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656715281
    },
    {
        "content": "<p>And that's what you're using</p>",
        "id": 288231301,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656715285
    },
    {
        "content": "<p>It'd be interesting to know how <code>to_poly</code> works with our induction/recursion principles that induct over the degree of a polynomial.</p>",
        "id": 288231314,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656715298
    },
    {
        "content": "<p>By the way, I think it would also be quite reasonable to have a constructor from <code>list R</code>, as you're describing.  But that would not be a drop-in replacement for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cubic\">docs#cubic</a> the way that this constructor from <code>fin N → R</code> is: if you try to do say <code>P 2</code> on the coefficients list (as happens often in the cubics file), you'll get an <code>option</code>.</p>",
        "id": 288231409,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656715400
    },
    {
        "content": "<p>...except that you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.inth\">docs#list.inth</a> which I bet has the correct behavior in most cases (although unprovably) because it defaults to <code>default</code> (whcih is most liekly <code>0</code>) when the index is out of bound.</p>",
        "id": 288233818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656717689
    },
    {
        "content": "<p>Or just <code>l.get_or_else 0 n</code>.</p>",
        "id": 288233822,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656717709
    },
    {
        "content": "<p>Uncleaned WIP:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.factorization.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.taylor</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.digits</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">option.get_or_else_eq_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">option.get_or_else</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">fin.coe_embedding_apply</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fin.coe_embedding</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">list</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_nth_le_ne_of_decidable_mem_and_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">l.length</span><span class=\"o\">,</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.is_lt</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.is_lt</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.is_lt</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">$</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nth_le_mem</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">l.length</span><span class=\"o\">,</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.is_lt</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_finsupp</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"n\">finset.map</span> <span class=\"o\">(</span><span class=\"n\">fin.coe_embedding</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.is_lt</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.fin_range</span> <span class=\"n\">l.length</span><span class=\"o\">)),</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">l.nth</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">mem_support_to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_or_distrib</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_map</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span>\n               <span class=\"n\">finset.mem_fin_range</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span> <span class=\"n\">rel_embedding.coe_fn_to_embedding</span><span class=\"o\">,</span>\n               <span class=\"n\">exists_prop</span><span class=\"o\">,</span> <span class=\"n\">option.get_or_else_eq_iff</span><span class=\"o\">,</span> <span class=\"n\">nth_eq_none_iff</span><span class=\"o\">,</span> <span class=\"n\">not_le</span><span class=\"o\">,</span>\n               <span class=\"n\">fin.coe_embedding_apply</span><span class=\"o\">,</span> <span class=\"n\">nth_eq_some</span><span class=\"o\">,</span> <span class=\"n\">not_exists</span><span class=\"o\">],</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩,</span> <span class=\"n\">hne</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_mk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"n\">hne</span><span class=\"o\">,</span>\n      <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hne</span><span class=\"o\">,</span> <span class=\"n\">hj</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">hne</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩,</span> <span class=\"n\">hne</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_finsupp_support</span> <span class=\"o\">:</span>\n  <span class=\"n\">l.to_finsupp.support</span> <span class=\"bp\">=</span> <span class=\"n\">finset.map</span> <span class=\"o\">(</span><span class=\"n\">fin.coe_embedding</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_embedding</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.is_lt</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">finset.fin_range</span> <span class=\"n\">l.length</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_finsupp_apply</span> <span class=\"o\">:</span> <span class=\"n\">l.to_finsupp</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.nth</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_finsupp_apply_lt</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l.to_finsupp</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l.nth_le</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l.to_finsupp_apply</span><span class=\"o\">,</span> <span class=\"n\">nth_eq_some.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">option.get_or_else_some</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">to_finsupp_apply_le</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">l.to_finsupp</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finsupp.not_mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">l.to_finsupp_support</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_map</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_fin_range</span><span class=\"o\">,</span> <span class=\"n\">true_and</span><span class=\"o\">,</span>\n             <span class=\"n\">rel_embedding.coe_fn_to_embedding</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_embedding_apply</span><span class=\"o\">,</span> <span class=\"n\">exists_prop</span><span class=\"o\">,</span>\n             <span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">],</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"bp\">-</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">hi.trans_le</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">decidable_nth_le_nil_ne</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">),</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth_le</span> <span class=\"n\">i</span> <span class=\"n\">i.elim0</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin.elim0</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">to_finsupp_nil</span> <span class=\"o\">:</span> <span class=\"n\">to_finsupp</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">finsupp.not_mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">to_finsupp_support</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">finsupp.mem_support_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">using</span> <span class=\"n\">fin.elim0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 288233873,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656717736
    },
    {
        "content": "<p>this is on the way to getting a <code>padic.digits</code> a la <code>nat.digits</code>. I don't want to derail this PR review discussion, so feel free to move this to another topic.</p>",
        "id": 288233893,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656717772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2315088.20rewrite.20cubics/near/288233818\">said</a>:</p>\n<blockquote>\n<p>...except that you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.inth\">docs#list.inth</a> which I bet has the correct behavior in most cases (although unprovably) because it defaults to <code>default</code> (whcih is most liekly <code>0</code>) when the index is out of bound.</p>\n</blockquote>\n<blockquote>\n<p>Or just <code>l.get_or_else 0 n</code>.</p>\n</blockquote>\n<p>Do you really want to change every <code>P 2</code>in <a href=\"https://github.com/leanprover-community/mathlib/blob/61eae7fc8d76f4376049af9422c57c12214f4ffc/src/algebra/cubic_discriminant.lean#L240\">this line</a> to <code>P.inth 2</code>?</p>",
        "id": 288233994,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656717879
    },
    {
        "content": "<p>I didn't review the cubics PR when it joined mathlib, but as I understand it, the point of this ad hoc <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cubic\">docs#cubic</a> structure is to give <em>very fast</em>  and robust access to the coefficients of the associated polynomial.  Let's try to preserve that property in whatever change is made.</p>",
        "id": 288234089,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656717992
    },
    {
        "content": "<p>That looks quite ugly, but to be fair it's a matter of getting a shorthand notation and the right API.</p>",
        "id": 288234093,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1656717997
    },
    {
        "content": "<p>Don't do this at home:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.cubic_discriminant</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">p</span><span class=\"bp\">`</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">p.coeff</span> <span class=\"n\">x</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">p</span> <span class=\"mi\">2</span> <span class=\"c1\">-- R</span>\n</code></pre></div>",
        "id": 288234471,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656718462
    },
    {
        "content": "<p>That's not a regular space</p>",
        "id": 288234475,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656718470
    },
    {
        "content": "<p>And that way it works on any poly!</p>",
        "id": 288234484,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1656718491
    },
    {
        "content": "<p>Yeah, I wrote it in such an ad-hoc way to get the coefficients easily, but mainly to be able to write down the discriminant as a product of differences of roots. I haven’t had time to look into this but hopefully the change doesn’t delete the discriminant API.</p>",
        "id": 288238572,
        "sender_full_name": "David Ang",
        "timestamp": 1656723221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"464700\">David Ang</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2315088.20rewrite.20cubics/near/288238572\">said</a>:</p>\n<blockquote>\n<p>hopefully the change doesn’t delete the discriminant API.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"464700\">@David Ang</span> If I understand you correctly, it hasn't deleted it.  But you'd better look at the PR.</p>",
        "id": 288239806,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656724902
    },
    {
        "content": "<p>I tried another experiment locally, and got a reasonably ergonomic outcome by replacing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cubic\">docs#cubic</a> with <code>degree_lt R 4</code> everywhere (cf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree_lt\">docs#polynomial.degree_lt</a>) and replacing lemmas about <code>cubic</code> by additions to the <code>degree_lt</code> API, after introducing notation <code>Pᗮ 2</code> for <code>(P : R[X]).coeff 2</code> via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">postfix</span> <span class=\"bp\">`ᗮ`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.coeff</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">degree_lt</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">subtype</span>\n</code></pre></div>\n<p>(the actual symbol should be changed, of course).</p>",
        "id": 288239945,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656725089
    },
    {
        "content": "<p>I can share this version if people would consider it an improvement (cc <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> )</p>",
        "id": 288239968,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656725141
    },
    {
        "content": "<p>The disadvantage here is that it's awkward to construct an element of <code>degree_lt R 4</code>, you have to say something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">degree_lt_equiv</span> <span class=\"n\">R</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and this loses the fact (previously transparent) that <code>Pᗮ 2 = 2</code>.</p>",
        "id": 288240149,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656725403
    },
    {
        "content": "<p>So I prefer the version with <code>fin 4</code> rather than <code>degree_lt R 4</code>.</p>",
        "id": 288240225,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656725506
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15477\">#15477</a> should give that <code>of_list_lt [1, 0, 2, 0]</code> gives you the <code>degree_lt R 4</code> that you expect, I hope.</p>",
        "id": 289908074,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658097337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Nice!</p>",
        "id": 290018596,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1658176043
    },
    {
        "content": "<p>And <code>(of_list [1, 0, 2, 0]).coeff 2 = 2</code> by <code>rfl</code>.</p>",
        "id": 290018725,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1658176111
    },
    {
        "content": "<p>I was inventing something relatively similar to this recently (that is to say, constructing polynomials by their tuples and vice versa, using the degree_lt_equiv correspondance). I'm not sure I have detailed comments on this PR in particular other than to say I think this is the right sort of approach.</p>",
        "id": 290497119,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1658491679
    }
]