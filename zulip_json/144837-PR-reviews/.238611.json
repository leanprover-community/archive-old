[
    {
        "content": "<p>Can anyone help fix a deterministic timeout in this PR?  It's only since I merged master this morning.  By bisection the offending line is <code>number_theory/modular</code>, line 135.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span></p>",
        "id": 256760066,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1633708089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> what is the (expected) type of that have on l135?</p>",
        "id": 256769228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633711759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> It's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does that help?</p>",
        "id": 256773772,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1633713540
    },
    {
        "content": "<p>I'm hacking on that proof.</p>",
        "id": 256775822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633714363
    },
    {
        "content": "<p>I think it's actually the <code>field_simp</code>s that are eating up a bunch of time.</p>",
        "id": 256775877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633714382
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">f₀</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.proj</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map.proj</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">f₀.smul_right</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">f₁.smul_right</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">f_def</span> <span class=\"o\">:</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f₀</span><span class=\"o\">,</span> <span class=\"n\">f₁</span><span class=\"o\">,</span> <span class=\"n\">linear_map.coe_proj</span><span class=\"o\">,</span> <span class=\"n\">real_smul</span><span class=\"o\">,</span>\n      <span class=\"n\">linear_map.coe_smul_right</span><span class=\"o\">,</span> <span class=\"n\">linear_map.add_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">norm_sq</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">norm_sq</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">f_def</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">function.comp</span><span class=\"o\">],</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_real_int_cast</span><span class=\"o\">,</span> <span class=\"n\">of_real_int_cast</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.ker</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">linear_equiv.closed_embedding_of_injective</span> <span class=\"n\">hf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">tendsto_cocompact</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">tendsto.pi_map_Coprod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">int.tendsto_coe_cofinite</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">Coprod_cofinite</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">Coprod_cocompact</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_norm_sq_cocompact_at_top.comp</span> <span class=\"o\">(</span><span class=\"n\">h₁.comp</span> <span class=\"n\">h₂</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">linear_map.pi</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">im_lm</span><span class=\"o\">,</span> <span class=\"n\">im_lm.comp</span> <span class=\"o\">((</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">conj_ae</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ℂ</span><span class=\"o\">))],</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map.id</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">linear_map.ker_eq_bot_of_inverse</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">z.2.ne'</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">linear_map.ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.id_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">pi.smul_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.pi_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_def</span><span class=\"o\">,</span> <span class=\"n\">add_im</span><span class=\"o\">,</span> <span class=\"n\">of_real_mul_im</span><span class=\"o\">,</span> <span class=\"n\">of_real_im</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span>\n      <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">im</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">conj</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">im</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f_def</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_add</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_left_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_conj</span><span class=\"o\">,</span>\n      <span class=\"n\">conj_of_real</span><span class=\"o\">,</span> <span class=\"n\">conj_of_real</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">of_real_mul</span><span class=\"o\">,</span> <span class=\"n\">add_im</span><span class=\"o\">,</span> <span class=\"n\">of_real_im</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- { field_simp },</span>\n  <span class=\"c1\">-- dsimp [g],</span>\n  <span class=\"c1\">-- field_simp,</span>\n  <span class=\"c1\">-- ring,</span>\n</code></pre></div>",
        "id": 256782944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633717209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I need to go. That final sorry should be easy.</p>",
        "id": 256782972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633717223
    },
    {
        "content": "<p>This is \"reasonably\" fast now.</p>",
        "id": 256782989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633717232
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thank you!!</p>",
        "id": 256783167,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1633717318
    },
    {
        "content": "<p>Any suggestions for a better name for this matrix [[a,b],[-b,a]] instead of <code>abnba</code>? (It's the group of homotheties, that is, the compact group, [[cos, sin],[-sin, cos]] times a diagonal.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The matrix [a, b; -b, a] (inspired by multiplication by a complex number); it is an element of</span>\n<span class=\"sd\">`GL_2` if `a ^ 2 + b ^ 2` is nonzero. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">abnba</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">matrix.general_linear_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">general_linear_group.mk'''</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">],</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]]</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">det_fin_two</span><span class=\"o\">,</span> <span class=\"n\">sq</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hab</span><span class=\"o\">)</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 260454988,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1636141347
    },
    {
        "content": "<p><code>general_orthogonal_two</code>?</p>",
        "id": 260455039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636141383
    },
    {
        "content": "<p>Doesn't general \"orthogonal\" usually have determinant that's of modulus one?</p>",
        "id": 260455644,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1636141683
    },
    {
        "content": "<p>this might be subject specific -- I've just been googling for precisely this</p>",
        "id": 260455673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636141705
    },
    {
        "content": "<p>What about <code>plane_homothety</code>?</p>",
        "id": 260455756,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636141744
    },
    {
        "content": "<p>in the theory of reductive groups as taught to number theorists there are things like orthogonal and symplectic groups (which fix a nondegenerate symmetic/antisymmetric bilinear form) and then general orthogonal and general symplectic groups (which allow the elements to multiply the form by a scalar)</p>",
        "id": 260455801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636141785
    },
    {
        "content": "<p>but on Wikipedia it says that \"the\" orthogonal group (we don't have just one in number theory, we work over a general field where you can't classify them) is sometimes called the general orthogonal group, so my idea is probably bad</p>",
        "id": 260455952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636141848
    },
    {
        "content": "<p>(presumably <code>matrix.plane_homothety</code>?)</p>",
        "id": 260455992,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636141874
    },
    {
        "content": "<p>Or <code>plane_homothety_matrix</code></p>",
        "id": 260456029,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636141901
    },
    {
        "content": "<p>I feel like <code>homothety</code>is a word that's not known by the generic mathematician.</p>",
        "id": 260456127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636141946
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 260456147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636141963
    },
    {
        "content": "<p>Oops!</p>",
        "id": 260456167,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636141977
    },
    {
        "content": "<p>fixed</p>",
        "id": 260456242,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636142030
    },
    {
        "content": "<p>I guess I'm a generic mathematician</p>",
        "id": 260456310,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636142051
    },
    {
        "content": "<p>well I guess I know it, but then again I guess we work in related areas</p>",
        "id": 260456324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636142063
    },
    {
        "content": "<p>FWIW, we use<code> homothety</code> in a name in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine_map.homothety\">docs#affine_map.homothety</a></p>",
        "id": 260457331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636142513
    },
    {
        "content": "<p>So what's the verdict, leaning towards <code>plane_homothety_matrix</code>?...</p>",
        "id": 260468307,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1636148580
    },
    {
        "content": "<p>The word homothétie is completely standard in French.</p>",
        "id": 260469876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636149629
    },
    {
        "content": "<p>I would have said homothety was standard in English until Adam shook my confidence</p>",
        "id": 260469928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636149664
    },
    {
        "content": "<p>I would have said homothety is a standard word but also that a rotation is not a homothety... unless we are talking about the complex line I guess</p>",
        "id": 260476450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636154668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238611/near/260476450\">said</a>:</p>\n<blockquote>\n<p>but also that a rotation is not a homothety</p>\n</blockquote>\n<p>Oh, very true!</p>",
        "id": 260478391,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636156503
    },
    {
        "content": "<p>Maybe <code>conformal_map</code>?</p>",
        "id": 260478401,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636156513
    },
    {
        "content": "<p>We already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_conformal_map\">docs#is_conformal_map</a>, but what's tricky is that <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span>'s definition is not defining a conformal map but rather parametrizing the family of conformal maps for <code>n = 2</code>.</p>",
        "id": 260478470,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636156564
    },
    {
        "content": "<p>I'll remark once more that in my world this group is called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>O</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GO_2(R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 260478527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636156663
    },
    {
        "content": "<p>in my world, <br>\n<a href=\"https://en.wikipedia.org/wiki/Conformal_group\">https://en.wikipedia.org/wiki/Conformal_group</a><br>\nor specifically wikipedia appears to call it the \"conformal orthogonal group\"</p>",
        "id": 260478607,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636156740
    },
    {
        "content": "<p>yeah I'm really surprised I can't point to references other than \"this technical paper\" which use GO_2(R). I had assumed until today that the notation I've always used was standard throughout mathematics.</p>",
        "id": 260478758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636156818
    },
    {
        "content": "<p>In any case, as I said before, the tricky point is that we are naming not just the \"general orthogonal group\"/\"conformal orthogonal group\"/..., but a specific parametrization of that group.</p>",
        "id": 260478865,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636156921
    },
    {
        "content": "<p>Right, so we'd maybe use GO(R^2,standard bilinear form) for that</p>",
        "id": 260478944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636156987
    },
    {
        "content": "<p>and GO(V,B) or GO(V,Q) for the general case</p>",
        "id": 260478957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636157007
    },
    {
        "content": "<p>I think I would be more likely to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo separator=\"true\">,</mo><mtext>standard bilinear form</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GO(\\mathbb{R}^n, \\text{standard bilinear form})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">GO</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord text\"><span class=\"mord\">standard bilinear form</span></span><span class=\"mclose\">)</span></span></span></span> to be the set of matrices whose columns are mutually orthogonal (no orthonormality hypothesis).</p>",
        "id": 260479057,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636157095
    },
    {
        "content": "<p>That is, a <code>Prop</code> definition, not a \"here's a parametrization of all of them in terms of two entries <code>a</code>, <code>b</code>\" definition.</p>",
        "id": 260479118,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636157157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238611/near/260478401\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>conformal_map</code>?</p>\n</blockquote>\n<p><code>plane_conformal_matrix</code>?</p>",
        "id": 260479201,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636157227
    },
    {
        "content": "<p>I like that.  And for bonus points, someone can prove <code>is_conformal_map plane_conformal_matrix</code>.</p>",
        "id": 260479319,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636157357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238611/near/260478865\">said</a>:</p>\n<blockquote>\n<p>In any case, as I said before, the tricky point is that we are naming not just the \"general orthogonal group\"/\"conformal orthogonal group\"/..., but a specific parametrization of that group.</p>\n</blockquote>\n<p>Should we have a type <code>matrix.plane_conformal_group</code> to match <code>matrix.special_linear_group</code> etc?</p>",
        "id": 260480061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636158238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238611/near/260479057\">said</a>:</p>\n<blockquote>\n<p>I think I would be more likely to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo separator=\"true\">,</mo><mtext>standard bilinear form</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GO(\\mathbb{R}^n, \\text{standard bilinear form})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">GO</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord text\"><span class=\"mord\">standard bilinear form</span></span><span class=\"mclose\">)</span></span></span></span> to be the set of matrices whose columns are mutually orthogonal (no orthonormality hypothesis).</p>\n</blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.has_orthogonal_cols\">docs#matrix.has_orthogonal_cols</a>, but that doesn't let us pick the bilinear form</p>",
        "id": 260480291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636158479
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.special_linear_group\">docs#matrix.special_linear_group</a> is <strong>the</strong> special linear group, this function constructs a particular matrix</p>",
        "id": 260480537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1636158740
    },
    {
        "content": "<p>Sure, but if had the type then we could just call the function <code>matrix.plane_conformal_group.mk</code></p>",
        "id": 260480575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636158826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238611/near/260479057\">said</a>:</p>\n<blockquote>\n<p>I think I would be more likely to define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"double-struck\">R</mi><mi>n</mi></msup><mo separator=\"true\">,</mo><mtext>standard bilinear form</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GO(\\mathbb{R}^n, \\text{standard bilinear form})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">GO</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord text\"><span class=\"mord\">standard bilinear form</span></span><span class=\"mclose\">)</span></span></span></span> to be the set of matrices whose columns are mutually orthogonal (no orthonormality hypothesis).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  It shouldn't be <code>plane_conformal_group</code>, it should be this <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 260482702,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636161099
    },
    {
        "content": "<p>I guess you could still have a <code>matrix.conformal_group.mk2 a b h</code> def for when <code>n = fin 2</code> that recovers the matrix we're asking about here?</p>",
        "id": 260482778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636161158
    },
    {
        "content": "<p>(I don't think we should allow for arbitrary bilinear form for matrix groups, only for endomorphism groups)</p>",
        "id": 260482779,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1636161161
    },
    {
        "content": "<p>BTW, I think in Euclidean geometry this would traditionally be called a \"spiral similarity\"</p>",
        "id": 260487491,
        "sender_full_name": "Reid Barton",
        "timestamp": 1636167181
    }
]