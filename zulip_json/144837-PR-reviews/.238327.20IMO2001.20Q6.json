[
    {
        "content": "<p>The diff is... humongous. Sara, maybe you could merge master to your branch?</p>",
        "id": 248823170,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628501441
    },
    {
        "content": "<p>I merged master into Sara's branch</p>",
        "id": 248823838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628501910
    },
    {
        "content": "<p>I don't understand why github is still showing a monster diff</p>",
        "id": 248825830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628503328
    },
    {
        "content": "<p>This is the diff that it ought to show: <a href=\"https://github.com/leanprover-community/mathlib/compare/imo2001_q6...imo2001_q6-jmc\">https://github.com/leanprover-community/mathlib/compare/imo2001_q6...imo2001_q6-jmc</a></p>",
        "id": 248826493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628503889
    },
    {
        "content": "<p>Wow that's really weird.</p>",
        "id": 248826512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1628503916
    },
    {
        "content": "<p>Which of the two is better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>or is there an even better alternative?</p>",
        "id": 248826812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628504171
    },
    {
        "content": "<p>I would prefer the latter since it yields a simpler proof term. You don't need <code>by</code> either, you can use <code>{linarith}</code></p>",
        "id": 248826857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628504230
    },
    {
        "content": "<p>Ok, my final proposal looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2021 Sara Díaz Real. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Sara Díaz Real</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.associated</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">!</span>\n<span class=\"cm\"># IMO 2001 Q6</span>\n<span class=\"cm\">Let $a$, $b$, $c$, $d$ be integers with $a &gt; b &gt; c &gt; d &gt; 0$. Suppose that</span>\n\n<span class=\"cm\">$$ a*c + b*d = (b*d + a*c) * (b*d + a*c). $$</span>\n\n<span class=\"cm\">Prove that $a*b + c*d$ is not prime.</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">imo2001_q6</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hdc</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcb</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- the key step is to show that `a*c + b*d` divides the product `(a*b + c*d) * (a*d + b*c)`</span>\n  <span class=\"k\">have</span> <span class=\"n\">dvd_mul</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">equivalent_sums</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nlinarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"k\">calc</span>  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n        <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">equivalent_sums</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>         <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- since `a*b + c*d` is prime (by assumption), it must divide `a*c + b*d` or `a*d + b*c`</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">left_dvd_or_dvd_right_of_dvd_prime_mul</span> <span class=\"n\">h0</span> <span class=\"n\">dvd_mul</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- in both cases, we derive a contradiction</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">,</span>         <span class=\"o\">{</span> <span class=\"n\">nlinarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">,</span>     <span class=\"o\">{</span> <span class=\"k\">from</span> <span class=\"n\">int.le_of_dvd</span> <span class=\"n\">aux</span> <span class=\"n\">h1</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">nlinarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hba</span><span class=\"o\">,</span> <span class=\"n\">hcb</span><span class=\"o\">,</span> <span class=\"n\">hdc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">,</span>         <span class=\"o\">{</span> <span class=\"n\">nlinarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">,</span>     <span class=\"o\">{</span> <span class=\"k\">from</span> <span class=\"n\">int.le_of_dvd</span> <span class=\"n\">aux</span> <span class=\"n\">h2</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">nlinarith</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hba</span><span class=\"o\">,</span> <span class=\"n\">hdc</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 248827113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628504448
    },
    {
        "content": "<p>I had no idea you could do <code>obtain (name1 : p) | (name2 : q)</code></p>",
        "id": 248827552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628504786
    },
    {
        "content": "<p>Hmm, I realise only now that the condition in the module docstring is not syntactically the same as the one in the theorem.</p>",
        "id": 248827598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628504826
    },
    {
        "content": "<p>The commit history looks like a merge that was done via a rebase style instead of a merge style. That could be due to the user's git defaults</p>",
        "id": 248835851,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628510778
    },
    {
        "content": "<p>Hi!! At first, Johan thank you very much, I like your changes and talking about the options you comment in order to obtain that 0&lt;a, 0&lt;b and 0&lt;c I prefer the second one (the one you have finally proposed).<br>\nI don't really know what you are talking about the problem in the commit history. Can I do something?</p>",
        "id": 248873657,
        "sender_full_name": "Sara Díaz Real",
        "timestamp": 1628527210
    },
    {
        "content": "<p>The commit history \"issue\" has been fixed, no worries!</p>",
        "id": 248874563,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628527636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"371650\">@Sara Díaz Real</span> I think you can just copy paste the file that I posted above, and put it into your PR.</p>",
        "id": 248875029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628527880
    },
    {
        "content": "<p>I think I have done it. Can you confirm?</p>",
        "id": 248876921,
        "sender_full_name": "Sara Díaz Real",
        "timestamp": 1628528715
    },
    {
        "content": "<p>Looks good to me</p>",
        "id": 248877254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628528854
    },
    {
        "content": "<p>Okey, thanks!</p>",
        "id": 248877478,
        "sender_full_name": "Sara Díaz Real",
        "timestamp": 1628528953
    },
    {
        "content": "<p>I left one comment about the module docstring</p>",
        "id": 248877820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628529101
    },
    {
        "content": "<p>And then another maintainer should review, because I changed a bit too much to be unbiased <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 248877950,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1628529137
    },
    {
        "content": "<p>I have accepted your comment it was wrong, thank you again!</p>",
        "id": 248878398,
        "sender_full_name": "Sara Díaz Real",
        "timestamp": 1628529322
    },
    {
        "content": "<p>Ok, I will change the label again :)</p>",
        "id": 248878458,
        "sender_full_name": "Sara Díaz Real",
        "timestamp": 1628529349
    },
    {
        "content": "<p>(you changed it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 248878580,
        "sender_full_name": "Sara Díaz Real",
        "timestamp": 1628529398
    }
]