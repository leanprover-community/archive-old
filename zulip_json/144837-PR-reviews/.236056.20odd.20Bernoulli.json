[
    {
        "content": "<p>This PR looks good. I just have one question about a name. See <a href=\"https://github.com/leanprover-community/mathlib/pull/6056/files#diff-7f9e34845e60fe46c4b7e2a2a6236152ced40ad6542b6a38976b36314f7d1726R1016\">here</a> for the code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The ring homomorphism taking a power series `f(X)` to `f(aX)`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">eval_mul_hom</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">power_series</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">power_series</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">power_series.mk</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">power_series.coeff</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n</code></pre></div>\n<p>To me <code>eval_mul_hom</code> sounds like the <code>mul_hom</code> version of something called <code>eval</code>. On second thought, I understand the name. But I wonder if we can give it a better name.</p>\n<p>Suggestions?</p>",
        "id": 226232039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613201225
    },
    {
        "content": "<p>Would <code>eval_at_mul_hom</code> be acceptable?</p>\n<p>I often feel that the naming convention sticks very close to the actual definition, which makes it easy to find lemmas, but starts diverging from \"standard mathematical naming\".  I would call this <code>rescale_hom</code> or something similar...</p>",
        "id": 226233066,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613202991
    },
    {
        "content": "<p>Or even just <code>rescale</code>?</p>",
        "id": 226233395,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613203523
    },
    {
        "content": "<p>I like <code>rescale</code>!  If you want to be more specific, <code>rescale_var</code>?  But it might simply add clutter...</p>",
        "id": 226233631,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613203895
    },
    {
        "content": "<p>Thanks, I suggested it on github</p>",
        "id": 226233897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613204389
    },
    {
        "content": "<p>This definition is a special case of a general evaluation map from a power series ring over R to a complete nonarchimedean topological ring sending the generator to a topologically nilpotent element and R to a bounded subset. At some point we should have this and it should probably be called power_series.eval. There are more general evals where the image of R is not bounded but the map is defined on the power series which are, or more generally on the power series for which the formal evaluation is summable</p>",
        "id": 226236591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613209179
    },
    {
        "content": "<p>But Ashvni didn't want to deal with all that because she just wants to get on with Bernoulli numbers, which I thought was reasonable</p>",
        "id": 226236643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613209217
    },
    {
        "content": "<p>(there's a follow-up PR on Bernoulli polynomials but I suggested that she held off until this one was done)</p>",
        "id": 226236661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613209270
    },
    {
        "content": "<p>We could call it <code>aeval'</code> or something...</p>",
        "id": 226236756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613209438
    },
    {
        "content": "<p>I think we should at least include a comment explaining this generalisation as a TODO</p>",
        "id": 226236957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613209714
    },
    {
        "content": "<p>The generalizations being described here are the ones that already exist on <code>polynomial</code>, right?</p>",
        "id": 226238061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613211636
    },
    {
        "content": "<p>Yes but it's much more subtle to evaluate a power series, it's like the difference between a finite sum and an infinite sum</p>",
        "id": 226242835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613219376
    },
    {
        "content": "<p>Ashvni only needed a special case where there were no convergence issues</p>",
        "id": 226242886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613219405
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map\">docs#polynomial.map</a> essentially that special case?</p>",
        "id": 226243386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613220289
    },
    {
        "content": "<p>No, I guess it's not</p>",
        "id": 226243451,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613220379
    },
    {
        "content": "<p>But maybe we should work out how this operation is spelt on polynomials, and choose a name similar to whatever that spelling is</p>",
        "id": 226243549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613220566
    },
    {
        "content": "<p>On polynomials it's just the evaluation map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mo>→</mo><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X]\\to R[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">aX</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>. I doubt we have this for polynomials because it's an obvious special case of something else.</p>",
        "id": 226244096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613221409
    },
    {
        "content": "<p>However the analogue of this something else for power series is much more technical because it involves infinite sums and issues where things don't always converge; this is a situation where everything converges for trivial reasons.</p>",
        "id": 226244152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613221474
    },
    {
        "content": "<p>Even defining the map on power series sending X to X+X^2 is something we don't have and which will take some work, not least because we don't even have the X-adic topology on a power series ring plus a proof it's complete, and this because we don't even have the J-adic topology on a ring for J an ideal. We have the latter in the perfectoid repo but we never PRed it</p>",
        "id": 226244300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613221738
    },
    {
        "content": "<p>Out of curiosity, are formal power series in mathlib?</p>",
        "id": 226244656,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613222296
    },
    {
        "content": "<p>Yes, <code>power_series</code> is formal power series</p>",
        "id": 226244816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613222634
    },
    {
        "content": "<p>Ok, so there goes my idea of defining the evaluation via power series!  <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 226244940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613222790
    },
    {
        "content": "<p>Damiano, the question is about a map between power series rings</p>",
        "id": 226244950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613222824
    },
    {
        "content": "<p>But right now they have no topology</p>",
        "id": 226244963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613222859
    },
    {
        "content": "<p>I'm voting for <code>power_series.rescale</code></p>",
        "id": 226245037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613222948
    },
    {
        "content": "<blockquote>\n<p>it's an obvious special case of something else</p>\n</blockquote>\n<p>I'm asking what the precise lean spelling to apply that obvious special case is on polynomials.</p>",
        "id": 226245106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613223035
    },
    {
        "content": "<p>For instance, if it were <code>polynomial.eval (*) X</code> or something then <code>power_series.eval_mul_X</code> would be a consistent name</p>",
        "id": 226245181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613223141
    },
    {
        "content": "<p>Eric, I do not think that this exists: the closest would probably be <code>aeval</code>, but restricted to only allow certain terms of the target algebra.  You can evaluate a polynomial with coefficients in a ring <code>R</code> on <em>any</em> element of an <code>R</code>-algebra.  But for power series, this is not true: the series <code>sum n! x^n</code> cannot be evaluated at 1, for instance.</p>",
        "id": 226245309,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613223346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> As Damiano says, for polynomials this is <code>aeval (a * X)</code></p>",
        "id": 226245415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613223503
    },
    {
        "content": "<p>Kevin, you are right: I was somehow convinced that this <code>rescale</code> business was something specialized to Bernoulli, not that it was actually developing the API for formal power series as well!</p>",
        "id": 226245445,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613223597
    },
    {
        "content": "<p>Ah I thanks, I missed <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>'s comment about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.aeval\">docs#polynomial.aeval</a></p>",
        "id": 226245579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613223761
    },
    {
        "content": "<p>The issue is that you can evaluate a polynomial anywhere, but it's far more subtle to say where you can evaluate a power series because topology and convergence come in.</p>",
        "id": 226252355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613232484
    },
    {
        "content": "<p>This is just a weird simple special case where it's guaranteed to work and furthermore you can get away without considering convergence of anything</p>",
        "id": 226252386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613232516
    },
    {
        "content": "<p>E.g., you can evaluate a <code>power_series</code> on a <code>power_series</code> with <code>coeff 0 f = 0</code>. I guess, there is some algebraic generalization of this construction.</p>",
        "id": 226290893,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1613288269
    },
    {
        "content": "<p>As a follow-up for after this PR, it would be nice to also allow things like sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mi>n</mi></msub><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">c_n X^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> to <code>(a^n \\smul c_n)X^n</code> or <code>(c_n \\smul a^n)X^n</code></p>",
        "id": 226291223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613288848
    },
    {
        "content": "<p>For which I think the generalization is a slightly stricter <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.lift_nc\">docs#add_monoid_algebra.lift_nc</a></p>",
        "id": 226291418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613289212
    },
    {
        "content": "<p>The difference there is that a homomorphism from a monoid algebra is determined by its values on the <code>single a b</code> because they span. This is not the case for a power series ring, because the monomials only span a topologically dense subset so without topology on source and target you can't extend, and with a topology you sometimes can't extend if completeness fails</p>",
        "id": 226293297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613291830
    }
]