[
    {
        "content": "<p>I would like to get <a href=\"https://github.com/leanprover-community/mathlib4/pull/856\">mathlib4#856</a> merged (both because it keeps rotting, and because I think we can build several other useful tactics on top of it).</p>\n<p>However I'm encountering a weird problem, explained <a href=\"https://github.com/leanprover-community/mathlib4/pull/856#discussion_r1059815646\">here</a>.</p>\n<p>In particular, the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">solve_by_elim</span> <span class=\"o\">[</span><span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">hy'</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is showing the error <code>unknown identifier 'hy''</code>. However <code>solve_by_elim</code> is working perfectly, successfully closing the goal using <code>hy'</code>. (See the #print statement below.)</p>\n<p>I can't work out who is generating this error, and why? Perhaps I'm just doing something dumb, or perhaps something relating to the user interface (showing tooltips, etc) is having trouble?</p>\n<p>Note that <code>solve_by_elim</code> has to do some fancy delayed elaboration of its arguments (because it may need to apply them multiple times, so has to have fresh metavariables each time). I'm guessing that this is something to do with the problem, but given that <code>solve_by_elim</code> is correctly closing the goal, I'm not really sure what this could be about.</p>",
        "id": 319689893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672960183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, if you had a chance to look at this that would be wonderful. :-)</p>",
        "id": 319690008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672960215
    },
    {
        "content": "<p>I just debugged a very similar error in linarith reported by <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , and the issue was a missing <code>withMainContext</code> /  <code>g.withContext</code></p>",
        "id": 319691879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672961119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I took a look, and there seems to be a call to <code>elabTerm</code> inside <code>partitionLocalHyps</code> which is not wrapped in any <code>withContext</code> even though the documentation says it expects to be called in the context of one</p>",
        "id": 319695114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672962871
    },
    {
        "content": "<p>The tactic seems to be working on multiple goals though so I'm not sure what the intended behavior is</p>",
        "id": 319695176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672962912
    },
    {
        "content": "<p>Thanks, I'll investigate that, and document behavior for <code>solve_by_elim*</code>, that operates on multiple user facing goals.</p>",
        "id": 319699014,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672965184
    },
    {
        "content": "<p>Okay, I've simply removed <code>partitionLocalHyps</code>. It was an over-optimisation that wasn't necessary in the first place.</p>\n<p>Now we only run <code>elabTerm</code> when we need to, rather than trying once at the beginning to partition arguments into expressions and local hypotheses. If you specify many <code>-h</code> arguments to <code>solve_by_elim</code>, these will now be elaborated more times as <code>solve_by_elim</code> runs, but it seems rather unlikely this could ever be a performance problem.</p>",
        "id": 319707678,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1672970862
    },
    {
        "content": "<p>Does this mean that solve_by_elim will now not elaborate some terms at all?</p>",
        "id": 319898517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673061382
    },
    {
        "content": "<p>I.e, does this introduce the <code>norm_num [this is nonsense]</code> bug that we have in lean 3, for solve_by_elim?</p>",
        "id": 319898564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673061441
    },
    {
        "content": "<p>No, <code>solve_by_elim</code> will always elaborate the terms you pass it (in fact, it will re-elaborate them every time they could be used, to avoid stuck metavariables on seperate applications).</p>\n<p>The fix described in this thread means that we don't elaborate terms one <em>extra</em> time, to see if we can avoid re-elaborating them repeatedly later (on the basis that if they are local hyps we can just store the FVarId)</p>",
        "id": 320159874,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673248193
    },
    {
        "content": "<p>I've just merged master again on this PR.</p>",
        "id": 320159929,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1673248206
    }
]