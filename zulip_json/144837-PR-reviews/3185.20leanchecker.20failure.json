[
    {
        "content": "<p>Leanchecker times out in <a href=\"https://github.com/leanprover-community/mathlib/issues/3185\">#3185</a>, and I have no idea how to fix this.</p>",
        "id": 202155322,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593214307
    },
    {
        "content": "<p>I tried to run export&amp;leanchecker for <code>master</code> + changes to <code>complete_lattice</code>, and it worked. So, the problem is in <code>complete_lattice_of_Sup/Inf</code>-based instances. Any ideas how to fix this?</p>",
        "id": 202155416,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593214388
    },
    {
        "content": "<p>Bisection says that the offender is <a href=\"https://github.com/leanprover-community/mathlib/pull/3185/files#diff-f741d98d7d24ed2ccdae58f7795e25e1R659\">this instance</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">to_outer_measure</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">m</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_measure</span> <span class=\"err\">$</span> <span class=\"n\">Inf_caratheodory</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Inf_apply</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Inf</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">to_outer_measure</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_measure_apply</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span>\n\n<span class=\"kn\">private</span> <span class=\"kn\">lemma</span> <span class=\"n\">Inf_le</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"err\">∈</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inf</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">to_outer_measure</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">μ</span><span class=\"bp\">.</span><span class=\"n\">to_outer_measure</span> <span class=\"o\">:=</span> <span class=\"n\">Inf_le</span> <span class=\"o\">(</span><span class=\"n\">mem_image_of_mem</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"k\">assume</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Inf_apply</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">to_outer_measure_apply</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">private</span> <span class=\"kn\">lemma</span> <span class=\"n\">le_Inf</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">μ&#39;</span> <span class=\"err\">∈</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"bp\">≤</span> <span class=\"n\">μ&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">≤</span> <span class=\"n\">Inf</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">μ</span><span class=\"bp\">.</span><span class=\"n\">to_outer_measure</span> <span class=\"bp\">≤</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">to_outer_measure</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">le_Inf</span> <span class=\"err\">$</span> <span class=\"n\">ball_image_of_ball</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">μ</span> <span class=\"n\">hμ</span><span class=\"o\">,</span> <span class=\"n\">to_outer_measure_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"n\">hμ</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Inf_apply</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">to_outer_measure_apply</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">order_bot</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">bot_le</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">order_top</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">outer_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_measure</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">outer_measure</span><span class=\"bp\">.</span><span class=\"n\">top_caratheodory</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">le_top</span><span class=\"o\">),</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_or_nonempty</span> <span class=\"k\">with</span> <span class=\"n\">h</span>  <span class=\"n\">h</span><span class=\"bp\">;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">to_measure_apply</span> <span class=\"err\">⊤</span> <span class=\"bp\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">outer_measure</span><span class=\"bp\">.</span><span class=\"n\">top_apply</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_top</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_bot</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">Inf_le</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le_Inf</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 202159987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593219876
    },
    {
        "content": "<p>ping here. Need an expert on the internals of lean/leanchecker. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?</p>",
        "id": 202218227,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593316304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Have you seen this thread?</p>",
        "id": 202220885,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593322133
    },
    {
        "content": "<p>One thing that strikes me about that instance is that <code>complete_lattice_of_Inf</code> is going to prescribe one kind of inf and <code>measure.order_top</code> is going to give a different one</p>",
        "id": 202220960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593322317
    },
    {
        "content": "<p>the clash will appear several times in showing that all the mixed-in fields are coherent</p>",
        "id": 202221001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593322358
    },
    {
        "content": "<p>and that involves proving stuff like <code>Inf empty = 0</code> by refl</p>",
        "id": 202221009,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593322405
    },
    {
        "content": "<p>I'm kind of surprised this is even true, but it must be a lot of unfolding to prove</p>",
        "id": 202221049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593322463
    },
    {
        "content": "<p>I was also thinking that, but I don't think that is true. In a <code>complete_lattice</code>, all operations are only proven correct relative to the ordering, and that there are no axioms relating two different operations. So as long as the order is (easily seen to be) definitionally equal, then you can mix and match the other operations however you want.</p>",
        "id": 202221179,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1593322781
    },
    {
        "content": "<p>I'm puzzled as to how there can be an issue like this that only shows up using <code>leanchecker</code>.</p>",
        "id": 202221252,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593322915
    },
    {
        "content": "<p>the external checkers generally have lower quality heuristics for defeq than lean</p>",
        "id": 202221403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593323199
    },
    {
        "content": "<p><code>leanchecker</code> actually uses the same kernel as <code>lean</code>, but it is still possible that some information in the environment is not being stored in the export format that is helpful as a defeq hint</p>",
        "id": 202221486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593323266
    },
    {
        "content": "<p>I tried with <code>.. partial_order</code> and explicit <code>bot</code>/<code>bot_le</code>, and got the same result.</p>",
        "id": 202222181,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593324678
    },
    {
        "content": "<p>which theorem exactly does it get stuck on? Is it the instance itself or one of the <code>_proof_n</code> auxiliaries?</p>",
        "id": 202222240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593324763
    },
    {
        "content": "<p>For what it's worth, <a href=\"https://github.com/ammkrn/nanoda\"><code>nanoda</code></a> was happy with the <code>mathlib.txt</code> export.</p>\n<div class=\"codehilite\"><pre><span></span><code>### Finished checking 86172 items in 185.075931s; to the best of our knowledge, all terms were well-typed! ###\n</code></pre></div>",
        "id": 202222343,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593324990
    },
    {
        "content": "<p>Whoa, this isn't a good sign:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_top</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_bot</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>times out in lean</p>",
        "id": 202222344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593325014
    },
    {
        "content": "<p>PS: I like the hedging in nanoda's output <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 202222349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593325038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/3185.20leanchecker.20failure/near/202222240\">said</a>:</p>\n<blockquote>\n<p>which theorem exactly does it get stuck on? Is it the instance itself or one of the <code>_proof_n</code> auxiliaries?</p>\n</blockquote>\n<p>How would one find out what leanchecker gets stuck on?</p>",
        "id": 202222463,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593325247
    },
    {
        "content": "<p>You could try trimming the export until it doesn't hang</p>",
        "id": 202222477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593325305
    },
    {
        "content": "<p>IIUC every prefix of a valid export is also valid</p>",
        "id": 202222520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593325327
    },
    {
        "content": "<p>I have managed to confirm, using</p>\n<div class=\"codehilite\"><pre><span></span><code>lean -E mathlib.txt --only-export<span class=\"o\">=</span>measure_theory.measure.complete_lattice src/measure_theory/measure_space.lean\n</code></pre></div>\n\n\n<p>that the line that causes it to hang is the very last one, the <code>#DEF</code> that defines <code>measure_theory.measure.complete_lattice</code></p>",
        "id": 202222933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593326213
    },
    {
        "content": "<p>I did something similar by searching for mentions of <code>7890</code> (which corresponds to <code>measure_theory.measure.complete_lattice</code>) and then manually deleting parts of the txt file. This attachment blows up <code>leanchecker</code>. <a href=\"/user_uploads/3121/uh5XJlZvYh-q9DQbFsEE8F8a/mathlib_def_7890.txt.zip\">mathlib_def_7890.txt.zip</a></p>\n<p><strong>edit</strong>: since I'm already attaching a bunch of files to this thread, here's the result of Mario's command above: <a href=\"user_uploads/3121/AD8MByh4JGovGNSQWvKlyUMr/mathlib_only_export.txt.zip\">mathlib_only_export.txt.zip</a></p>",
        "id": 202223050,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593326470
    },
    {
        "content": "<p><code>leanchecker</code> is happy with everything up to and including <code>measure_theory.measure.complete_lattice._proof_17</code>: <a href=\"/user_uploads/3121/jc_d2ffxRh6KmZcLdEvjrU_z/mathlib_proof_17b.txt.zip\">mathlib_proof_17b.txt.zip</a></p>",
        "id": 202223150,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593326666
    },
    {
        "content": "<p>I'm not sure if lean does typechecking on expr construction lines; maybe it can't because of de bruijn variables</p>",
        "id": 202223165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593326723
    },
    {
        "content": "<p>In case the diff is meaningful:</p>\n<div class=\"codehilite\"><pre><span></span><code>764535,764629d764534\n&lt; 744689 #EA 524211 699822\n&lt; 744690 #EP #BC 186 697985 744689\n&lt; 744691 #EP #BI 3 24295 744690\n&lt; 744692 #EA 524214 699822\n&lt; 744693 #EA 733404 699822\n&lt; 744694 #EC 10886 20\n&lt; 744695 #EA 744694 2\n&lt; 744696 #EA 744695 1\n&lt; 744697 #EA 738880 744696\n&lt; 744698 #EA 744693 744697\n&lt; 744699 #EA 744692 744698\n&lt; 744700 #EA 744699 744144\n&lt; 744701 #EA 744700 744147\n&lt; 744702 #EC 10896 20\n&lt; 744703 #EA 744702 2\n&lt; 744704 #EA 744703 1\n&lt; 744705 #EA 744701 744704\n&lt; 744706 #EC 10897 20\n&lt; 744707 #EA 744706 2\n&lt; 744708 #EA 744707 1\n&lt; 744709 #EA 744705 744708\n&lt; 744710 #EC 10898 20\n&lt; 744711 #EA 744710 2\n&lt; 744712 #EA 744711 1\n&lt; 744713 #EA 744709 744712\n&lt; 744714 #EC 10899 20\n&lt; 744715 #EA 744714 2\n&lt; 744716 #EA 744715 1\n&lt; 744717 #EA 744713 744716\n&lt; 744718 #EC 10900 20\n&lt; 744719 #EA 744718 2\n&lt; 744720 #EA 744719 1\n&lt; 744721 #EA 744717 744720\n&lt; 744722 #EC 10901 20\n&lt; 744723 #EA 744722 2\n&lt; 744724 #EA 744723 1\n&lt; 744725 #EA 744721 744724\n&lt; 744726 #EC 10902 20\n&lt; 744727 #EA 744726 2\n&lt; 744728 #EA 744727 1\n&lt; 744729 #EA 744725 744728\n&lt; 744730 #EA 733722 699822\n&lt; 744731 #EA 744730 744697\n&lt; 744732 #EA 744729 744731\n&lt; 744733 #EC 10903 20\n&lt; 744734 #EA 744733 2\n&lt; 744735 #EA 744734 1\n&lt; 744736 #EA 744732 744735\n&lt; 744737 #EC 10904 20\n&lt; 744738 #EA 744737 2\n&lt; 744739 #EA 744738 1\n&lt; 744740 #EA 744736 744739\n&lt; 744741 #EC 10905 20\n&lt; 744742 #EA 744741 2\n&lt; 744743 #EA 744742 1\n&lt; 744744 #EA 744740 744743\n&lt; 744745 #EA 744206 699822\n&lt; 744746 #EA 744745 744218\n&lt; 744747 #EA 744744 744746\n&lt; 744748 #EC 10970 20\n&lt; 744749 #EA 744748 2\n&lt; 744750 #EA 744749 1\n&lt; 744751 #EA 744747 744750\n&lt; 744752 #EA 733875 699822\n&lt; 744753 #EA 744752 744528\n&lt; 744754 #EA 744751 744753\n&lt; 744755 #EC 10982 20\n&lt; 744756 #EA 744755 2\n&lt; 744757 #EA 744756 1\n&lt; 744758 #EA 744754 744757\n&lt; 744759 #EA 733940 699822\n&lt; 744760 #EA 744759 744697\n&lt; 744761 #EA 744758 744760\n&lt; 744762 #EA 734016 699822\n&lt; 744763 #EA 744762 744697\n&lt; 744764 #EA 744761 744763\n&lt; 744765 #EC 10983 20\n&lt; 744766 #EA 744765 2\n&lt; 744767 #EA 744766 1\n&lt; 744768 #EA 744764 744767\n&lt; 744769 #EC 10984 20\n&lt; 744770 #EA 744769 2\n&lt; 744771 #EA 744770 1\n&lt; 744772 #EA 744768 744771\n&lt; 744773 #EC 10985 20\n&lt; 744774 #EA 744773 2\n&lt; 744775 #EA 744774 1\n&lt; 744776 #EA 744772 744775\n&lt; 744777 #EC 10986 20\n&lt; 744778 #EA 744777 2\n&lt; 744779 #EA 744778 1\n&lt; 744780 #EA 744776 744779\n&lt; 744781 #EL #BC 186 697985 744780\n&lt; 744782 #EL #BI 3 24295 744781\n&lt; #DEF 7890 744691 744782 663\n</code></pre></div>",
        "id": 202223218,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593326824
    },
    {
        "content": "<p>My next tactic has been to rewrite the definition like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">axiom</span> <span class=\"n\">not_sorry</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">complete_lattice&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_2</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_3</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_4</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_5</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_6</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_7</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@complete_lattice.inf.{u_1} (@measure_theory.measure.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--   (@complete_lattice_of_Inf.{u_1} (@measure_theory.measure.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--     (@measure_theory.measure.partial_order.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--     (@measure_theory.measure.has_Inf.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--     (@measure_theory.measure.complete_lattice._aux_1.{u_1} α _inst_1)))</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@measure_theory.measure.complete_lattice._proof_8.{u_1} α _inst_1)</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@measure_theory.measure.complete_lattice._proof_9.{u_1} α _inst_1)</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@measure_theory.measure.complete_lattice._proof_10.{u_1} α _inst_1)</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@order_top.top.{u_1} (@measure_theory.measure.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--   (@measure_theory.measure.order_top.{u_1} α _inst_1))</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@measure_theory.measure.complete_lattice._proof_11.{u_1} α _inst_1)</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@order_bot.bot.{u_1} (@measure_theory.measure.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--   (@measure_theory.measure.order_bot.{u_1} α _inst_1))</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@measure_theory.measure.complete_lattice._proof_12.{u_1} α _inst_1)</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@complete_lattice.Sup.{u_1} (@measure_theory.measure.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--   (@complete_lattice_of_Inf.{u_1} (@measure_theory.measure.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--     (@measure_theory.measure.partial_order.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--     (@measure_theory.measure.has_Inf.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--     (@measure_theory.measure.complete_lattice._aux_1.{u_1} α _inst_1)))</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@complete_lattice.Inf.{u_1} (@measure_theory.measure.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--   (@complete_lattice_of_Inf.{u_1} (@measure_theory.measure.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--     (@measure_theory.measure.partial_order.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--     (@measure_theory.measure.has_Inf.{u_1} α _inst_1)</span>\n        <span class=\"c1\">--     (@measure_theory.measure.complete_lattice._aux_1.{u_1} α _inst_1)))</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@measure_theory.measure.complete_lattice._proof_13.{u_1} α _inst_1)</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@measure_theory.measure.complete_lattice._proof_14.{u_1} α _inst_1)</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@measure_theory.measure.complete_lattice._proof_15.{u_1} α _inst_1)</span>\n  <span class=\"n\">not_sorry</span> <span class=\"c1\">-- (@measure_theory.measure.complete_lattice._proof_16.{u_1} α _inst_1)</span>\n</code></pre></div>\n\n\n<p>and see how much of the definition I can unsorry before leanchecker chokes</p>",
        "id": 202223578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593327591
    },
    {
        "content": "<p><code>proof_13</code> causes the hang</p>",
        "id": 202223916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593328219
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_13</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"n\">has_bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 202223935,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593328316
    },
    {
        "content": "<p>all the action is in the implicit args, of course</p>",
        "id": 202223976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593328347
    },
    {
        "content": "<p>the theorem is massive</p>",
        "id": 202223977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593328358
    },
    {
        "content": "<p>actually that doesn't match my proof_13, although I modified the original instance to make pp.all output a bit more bearable</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"n\">is_glb</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">abstract</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">Inf_le</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le_Inf</span><span class=\"bp\">⟩</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span>\n  <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_top</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_bot</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span> <span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202224030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593328461
    },
    {
        "content": "<p>For me proof_13 is the one that says <code>∀ (s : set (measure α)) (a : measure α), a ∈ s → a ≤ complete_lattice.Sup s</code></p>",
        "id": 202224034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593328487
    },
    {
        "content": "<p>Ah, OK, so it's:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_14</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 202224094,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593328615
    },
    {
        "content": "<p>Yes, that one</p>",
        "id": 202224098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593328634
    },
    {
        "content": "<p>Here's a self contained hang script:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"n\">is_glb</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n  <span class=\"n\">abstract</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">Inf_le</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">le_Inf</span><span class=\"bp\">⟩</span><span class=\"o\">},</span>\n  <span class=\"n\">exact</span>\n  <span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_top</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_bot</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span> <span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">this</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">),</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n      <span class=\"n\">a</span>\n      <span class=\"n\">s</span> <span class=\"bp\">→</span>\n    <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice</span><span class=\"bp\">.</span><span class=\"n\">to_order_bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">sup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">lt</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_2</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_3</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_4</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_5</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_6</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_7</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">inf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_8</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_9</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_10</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top</span><span class=\"bp\">.</span><span class=\"n\">top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_top</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_11</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_bot</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_12</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))))</span>\n      <span class=\"n\">a</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">Sup</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n         <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_13</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>lean -E mathlib.txt --only-export<span class=\"o\">=</span>measure_theory.measure.foo src/measure_theory/measure_space.lean\nleanchecker mathlib.txt\n</code></pre></div>",
        "id": 202224141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593328701
    },
    {
        "content": "<p>Given that <code>nanoda</code> was happy with this, is the bug in Lean or in nanoda?</p>",
        "id": 202224316,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593329097
    },
    {
        "content": "<p>given the lean was also happy, it is probably a bug in leanchecker</p>",
        "id": 202224327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593329130
    },
    {
        "content": "<p>Okay, I think I'm homing in on the issue:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice</span><span class=\"bp\">.</span><span class=\"n\">to_order_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_2</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_3</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_4</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_5</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_6</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_7</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_8</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_9</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_10</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_top</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_11</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot</span><span class=\"bp\">.</span><span class=\"n\">bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_bot</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">proof_12</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))))</span>\n    <span class=\"bp\">=</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_le</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">preorder</span><span class=\"bp\">.</span><span class=\"n\">to_has_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">partial_order</span><span class=\"bp\">.</span><span class=\"n\">to_preorder</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_bot</span><span class=\"bp\">.</span><span class=\"n\">to_partial_order</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice</span><span class=\"bp\">.</span><span class=\"n\">to_order_bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">bounded_lattice</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_sup_left</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_sup_right</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">sup_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">inf_le_left</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">inf_le_right</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">bot</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">bot_le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))))))</span>\n  <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n  <span class=\"bp\">_</span> <span class=\"n\">rfl</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 202224711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593329952
    },
    {
        "content": "<p>This proof, by <code>eq.trans rfl rfl</code>, goes through in <code>leanchecker</code>, but the proof using <code>rfl</code> does not</p>",
        "id": 202224772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593330099
    },
    {
        "content": "<p>Furthermore, if you attempt to prove the <code>has_le</code> instances equal (by commenting out the <code> @has_le.le (@measure α _inst_1)</code> line on each side) then lean times out</p>",
        "id": 202224818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593330162
    },
    {
        "content": "<p>In other words, <code>leanchecker</code> used the heuristic that says <code>f x = f y &lt;- x = y</code> and timed out while proving <code>x = y</code></p>",
        "id": 202224830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593330218
    },
    {
        "content": "<p>Yep, after applying this heuristic 4 times you get to prove <code>bounded_lattice.mk ... = bounded_lattice.mk ...</code> here, which produces exactly the bad subgoal that I was afraid of:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">order_top</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">order_top</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">top</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span><span class=\"bp\">._</span><span class=\"n\">aux_1</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n  <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 202225074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593330644
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/364\">lean#364</a>, though I suspect <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> may already be on it.</p>",
        "id": 202229206,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593338099
    },
    {
        "content": "<p>I wonder why we hit this with <a href=\"https://github.com/leanprover-community/mathlib/issues/3185\">#3185</a> but not with other <code>complete_lattice_of_Inf</code> instances.</p>",
        "id": 202236443,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593350437
    },
    {
        "content": "<p>as long as the defeq problem is obviously true or obviously false there is no problem</p>",
        "id": 202236507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593350536
    },
    {
        "content": "<p>it's only when it triggers a lot of unfolding without a conclusive result that it has the bad behavior</p>",
        "id": 202236520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593350576
    },
    {
        "content": "<p>I'm not entirely sure what specifically there is about the definition that causes the problem, probably it ended up unfolding <code>real</code></p>",
        "id": 202236540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593350622
    },
    {
        "content": "<p><del><code>attribute [irreducible] real</code>?</del>  Oh wait, the external typechecker doesn't get this info.</p>",
        "id": 202237171,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593351647
    },
    {
        "content": "<p>A potential solution is to change <code>real</code> to a 1-field structure.</p>",
        "id": 202237419,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593352035
    },
    {
        "content": "<p>Does the Lean kernel use <code>irreducible</code> as a hint?</p>",
        "id": 202237430,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593352060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Could it be that this is the key difference, why <code>lean</code> works but <code>leanchecker</code> doesn't?</p>",
        "id": 202237536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352236
    },
    {
        "content": "<p>Should we add irreducible markings to the export format?</p>",
        "id": 202237546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352256
    },
    {
        "content": "<p>The Lean type checker doesn't care about irreducible.</p>",
        "id": 202237690,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593352454
    },
    {
        "content": "<p>I don't think it makes sense to add irreducible to the export format.  We often need to <code>local attribute [semireducible]</code>, and we do not store which declarations require this local reducibility change.</p>",
        "id": 202237701,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593352495
    },
    {
        "content": "<p>Doesn't the kernel have its own version of reducibility hints?</p>",
        "id": 202237926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352843
    },
    {
        "content": "<p><code>abbreviation</code> hooks into this IIRC</p>",
        "id": 202237930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352859
    },
    {
        "content": "<p>What I want to understand is what makes <code>lean</code> act differently from <code>leanchecker</code> in this instance, even though they use the same kernel code</p>",
        "id": 202237953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593352914
    },
    {
        "content": "<p>Could it be that the decision to unfold the projection in <a href=\"https://github.com/leanprover-community/lean/issues/364\">lean#364</a> is due to some magic in the projection macro?</p>",
        "id": 202238018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593353005
    },
    {
        "content": "<p>Yes, I think the only difference here is the reducibility hints.  For example most (all?) of the constructions (<code>brec_on</code>, <code>rec_on</code>, <code>cases_on</code>, etc.) are marked as abbreviation.</p>",
        "id": 202239338,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593355153
    },
    {
        "content": "<p>I'm not sure if the projection macros make it into the type checker.  If they do, then that's another difference.</p>",
        "id": 202239361,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1593355192
    },
    {
        "content": "<p>The problem is in the <code>top</code> field.</p>",
        "id": 202245329,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1593364310
    },
    {
        "content": "<p>Sorry for reviving an ancient thread, but is this fixed? I removed the comment and got the <code>top</code> field working with no issue</p>",
        "id": 286984610,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655852405
    }
]