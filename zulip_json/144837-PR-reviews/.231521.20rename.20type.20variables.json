[
    {
        "content": "<p>I'd like to work a bit on that PR. How to we coordinate?</p>",
        "id": 177649293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> are you currently working on it?</p>",
        "id": 177649316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562337
    },
    {
        "content": "<p>Claim a file. I'm done with it for the evening at least.</p>",
        "id": 177649324,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570562342
    },
    {
        "content": "<p>Is there an ordering?</p>",
        "id": 177649357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562362
    },
    {
        "content": "<p>Uh, I don't think so.</p>",
        "id": 177649479,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570562430
    },
    {
        "content": "<p>Let's say I'm doing <code>bilinear_form.lean</code></p>",
        "id": 177649501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562452
    },
    {
        "content": "<p>I'll create a task list.</p>",
        "id": 177649507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562458
    },
    {
        "content": "<p>What are the odds we accidentally change something non-cosmetic in this PR?</p>",
        "id": 177649662,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570562556
    },
    {
        "content": "<p>We should probably write something to check that we don't accidentally mess things up.</p>",
        "id": 177649739,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570562610
    },
    {
        "content": "<p>But I'm not sure how.</p>",
        "id": 177649752,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570562623
    },
    {
        "content": "<p>Well, we will check it will build</p>",
        "id": 177649840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562672
    },
    {
        "content": "<p>I assumed the three files that were edited were done.</p>",
        "id": 177649857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562692
    },
    {
        "content": "<p>See the list on the PR page</p>",
        "id": 177649871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562703
    },
    {
        "content": "<p>Yeah, they're done.</p>",
        "id": 177650045,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570562818
    },
    {
        "content": "<p>But I'm worried we'll accidentally specialize a universe level or something that doesn't break the build.</p>",
        "id": 177650094,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570562844
    },
    {
        "content": "<p>We probably want to update <code>algebra.module</code> too.</p>",
        "id": 177650197,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570562906
    },
    {
        "content": "<p>Can't you use meta-programming to assert that two statements are the same modulo naming?</p>",
        "id": 177650236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562949
    },
    {
        "content": "<p>We could have a folder  <code>renamed_linear_algebra</code> to access both versions at the same time</p>",
        "id": 177650270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570562976
    },
    {
        "content": "<p>Yes, but you need to fix the nameclashes somehow. I'm not sure if putting the whole file in a namespace will work.</p>",
        "id": 177650436,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570563070
    },
    {
        "content": "<p>True.</p>",
        "id": 177650470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570563091
    },
    {
        "content": "<p>What should be the name of another ring? <code>S</code>?</p>",
        "id": 177650615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570563215
    },
    {
        "content": "<p>I used <code>M M₂ V V₂ ...</code>. Didn't have more than one ring, but there's an obvious pattern.</p>",
        "id": 177650746,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570563304
    },
    {
        "content": "<p>Actually it's not really a second ring. The first one is a <code>ring</code> and the second one is <code>comm_ring</code>, but the first variable is still there.</p>",
        "id": 177650847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570563362
    },
    {
        "content": "<p>Up to you then.</p>",
        "id": 177650949,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570563422
    },
    {
        "content": "<p><code>bilinear_form.lean</code> is done</p>",
        "id": 177651345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570563707
    },
    {
        "content": "<p>I'll work on determinant</p>",
        "id": 177651406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570563727
    },
    {
        "content": "<p>It's also done</p>",
        "id": 177651438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570563760
    },
    {
        "content": "<p>That was actually a rebellious file.</p>",
        "id": 177651450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570563773
    },
    {
        "content": "<p>I'll move to <code>direct_sum_module</code></p>",
        "id": 177651513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570563818
    },
    {
        "content": "<p>I'll start working on <code>dual.lean</code></p>",
        "id": 177652385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564384
    },
    {
        "content": "<p>Lol... it was already written by a mathematician. Next.</p>",
        "id": 177652432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564432
    },
    {
        "content": "<p>I'll start on <code>finite_dimensional.lean</code></p>",
        "id": 177652493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564449
    },
    {
        "content": "<p>Is it ok if fields are called <code>K</code>? Or do we insist on blackboard bold <code>k</code>?</p>",
        "id": 177652576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564508
    },
    {
        "content": "<p>In the algebra directory we are using <code>K</code> a lot</p>",
        "id": 177652596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564525
    },
    {
        "content": "<p>If there are no compact subgroups in sight, I wouldn't mind <code>K</code></p>",
        "id": 177652617,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564542
    },
    {
        "content": "<p>Oh, wait, I just noticed I used a different <code>k</code> from Alex.</p>",
        "id": 177652699,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570564588
    },
    {
        "content": "<p>We should probably pick one and standardize on it if we're going through all this trouble.</p>",
        "id": 177652772,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570564638
    },
    {
        "content": "<p>But a field extension is called <code>L</code></p>",
        "id": 177652933,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564743
    },
    {
        "content": "<p>And <code>L</code> over blackboard bold <code>k</code> looks weird</p>",
        "id": 177652953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564756
    },
    {
        "content": "<p>So I think we should allow different things for fields in different parts of the library</p>",
        "id": 177652970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564774
    },
    {
        "content": "<p>I'm currently looking at <code>finsupp_vector_space.lean</code>.</p>",
        "id": 177653087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564810
    },
    {
        "content": "<p>It needs index sets for families of vectors. Do we call those <code>alpha</code>? or <code>iota</code>?</p>",
        "id": 177653147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570564834
    },
    {
        "content": "<p><code>iota</code> for index sets.</p>",
        "id": 177653159,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570564845
    },
    {
        "content": "<p>I don't care what K we use as long as we use the same K.</p>",
        "id": 177653171,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570564855
    },
    {
        "content": "<p><code>direct_sum_module</code> is done</p>",
        "id": 177653182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570564863
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span></span></span></span></span> is used in the calculus library</p>",
        "id": 177653238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570564899
    },
    {
        "content": "<p>Yes, and for good reasons</p>",
        "id": 177653447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570565022
    },
    {
        "content": "<p>But it doesn't scale</p>",
        "id": 177653451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570565025
    },
    {
        "content": "<p>I meant: I don't think it matters too much to be consistent from <code>linear_algebra</code> to <code>calculus</code></p>",
        "id": 177654684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570565813
    },
    {
        "content": "<p>And I guess it's not too late to switch in the PR, especially since <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span></span></span></span></span> is easy to search and replace (after checking there aren't too many <code>k</code> or <code>K</code> lying around)</p>",
        "id": 177654764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570565877
    },
    {
        "content": "<p>I've done matrix.lean</p>",
        "id": 177655520,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570566370
    },
    {
        "content": "<p>I'll do sesquilinear</p>",
        "id": 177655630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570566476
    },
    {
        "content": "<p>I'm going to stop for tonight</p>",
        "id": 177655710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570566513
    },
    {
        "content": "<p>Good luck with the last 3 files</p>",
        "id": 177655718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570566519
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 177655761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570566552
    },
    {
        "content": "<p>I've done sesquilinear, moving to tensor product</p>",
        "id": 177656503,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570567053
    },
    {
        "content": "<p>Done, moving to finsupp</p>",
        "id": 177657215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570567499
    },
    {
        "content": "<p>I changed my kappas to bb k's.</p>",
        "id": 177657395,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570567640
    },
    {
        "content": "<p>In finsupp, do you want to replace alpha with iota?</p>",
        "id": 177657977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570567953
    },
    {
        "content": "<p>I think it's a different usage, but one could disagree</p>",
        "id": 177657995,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570567972
    },
    {
        "content": "<p>The field extension could be <code>𝕃</code> or <code>𝕝</code> (the latter is not very readable I think).</p>",
        "id": 177658016,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1570567988
    },
    {
        "content": "<p>All files in <code>linear_algebra</code> have been edited.</p>",
        "id": 177660015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570569361
    },
    {
        "content": "<p>How risk-tolerant are we feeling about merging this? I'm still not sure how to (easily) write a metaprogram that checks all declarations are alpha-equivalent to what they were before.</p>",
        "id": 177730360,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570637961
    },
    {
        "content": "<p>Chris' PRs are getting dangerously close to here. <a href=\"https://github.com/leanprover-community/mathlib/issues/1523\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1523\">#1523</a> will conflict if we do this renaming in <code>algebra.module</code>, which we eventually should.</p>",
        "id": 177730496,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570638031
    },
    {
        "content": "<p>Did you try using that branch with the capset repo?</p>",
        "id": 177730569,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570638084
    },
    {
        "content": "<p>and sensitivity conjecture? As far as I know, this are the only uses of this linear algebra lib</p>",
        "id": 177730596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570638111
    },
    {
        "content": "<p>Hmm, no, that's a reasonable test. I'll try that in a bit.</p>",
        "id": 177730689,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570638157
    },
    {
        "content": "<p>Definitely not comprehensive, but it's a start.</p>",
        "id": 177730704,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570638170
    },
    {
        "content": "<p>If you have two version which you really think only differ by alpha renaming then probably their <code>lean --export</code>s should be the same if you ignore the name part of a <code>#NS</code></p>",
        "id": 177731325,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570638665
    },
    {
        "content": "<p>Though I don't know how stable the numbering of items is, maybe it depends on variable names somehow</p>",
        "id": 177736191,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570641807
    },
    {
        "content": "<blockquote>\n<p>Chris' PRs are getting dangerously close to here. <a href=\"https://github.com/leanprover-community/mathlib/issues/1523\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1523\">#1523</a> will conflict if we do this renaming in <code>algebra.module</code>, which we eventually should.</p>\n</blockquote>\n<p>There's no need for it to all be done in one go. Why not merge what's done already, and finish the rest off in some other PR?</p>",
        "id": 177736901,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570642242
    },
    {
        "content": "<blockquote>\n<p>How risk-tolerant are we feeling about merging this? I'm still not sure how to (easily) write a metaprogram that checks all declarations are alpha-equivalent to what they were before.</p>\n</blockquote>\n<p>I'm going to attempt to do this. We think <code>lin_alg_rename</code> is the same as commit 7c560512b849832824493949a29fbf6b6b7ac223 right?</p>",
        "id": 177742834,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570646045
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>How risk-tolerant are we feeling about merging this? I'm still not sure how to (easily) write a metaprogram that checks all declarations are alpha-equivalent to what they were before.</p>\n</blockquote>\n<p>I'm going to attempt to do this. We think <code>lin_alg_rename</code> is the same as commit 7c560512b849832824493949a29fbf6b6b7ac223 right?</p>\n</blockquote>\n<p>Yeah, that should be right. I'm building the exports right now, but it's slow on my laptop.</p>",
        "id": 177745049,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570647576
    },
    {
        "content": "<p>Heh, one of the exports somehow has 4000 more lines than the other...</p>",
        "id": 177745561,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570647928
    },
    {
        "content": "<p>Either something changed, or it's not an accurate way to compare.</p>",
        "id": 177745680,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570648005
    },
    {
        "content": "<p>Unfortunately if the exports are not the same then it's going to be very hard to tell how they differ</p>",
        "id": 177745976,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570648248
    },
    {
        "content": "<p>Here is my attempt to alpha normalize everything. Does it look reasonable? It's quite slow to run on all of the core library already...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">gen_name</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">state_t</span> <span class=\"n\">nat</span> <span class=\"n\">tactic</span> <span class=\"n\">name</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">i</span> <span class=\"err\">←</span> <span class=\"n\">get</span><span class=\"o\">,</span>\n   <span class=\"n\">put</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n   <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mk_simple_name</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">state_t</span> <span class=\"n\">nat</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">sort</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"n\">e</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mvar</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;Unexpected mvar in type&quot;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">local_const</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">fail</span> <span class=\"s2\">&quot;Unexpected local_const in type&quot;</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">lam</span> <span class=\"bp\">_</span> <span class=\"n\">bi</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lam</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">gen_name</span> <span class=\"s2\">&quot;x&quot;</span> <span class=\"bp\">&lt;*&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">bi</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"bp\">_</span> <span class=\"n\">bi</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pi</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">gen_name</span> <span class=\"s2\">&quot;a&quot;</span> <span class=\"bp\">&lt;*&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">bi</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">e₂</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">elet</span> <span class=\"bp\">_</span> <span class=\"n\">bi</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">elet</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">gen_name</span> <span class=\"s2\">&quot;v&quot;</span> <span class=\"bp\">&lt;*&gt;</span>\n    <span class=\"n\">pure</span> <span class=\"n\">bi</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">e₂</span>\n<span class=\"c1\">-- I have no idea whether this macro case is reasonable</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">macro</span> <span class=\"n\">m</span> <span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">macro</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"n\">mmap</span> <span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">es</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">alpha_normalize</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">&lt;</span><span class=\"err\">$</span><span class=\"bp\">&gt;</span> <span class=\"o\">((</span><span class=\"n\">alpha_normalize_aux</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">emit_declaration</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"k\">let</span> <span class=\"n\">ls</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">univ_params</span><span class=\"bp\">.</span><span class=\"n\">length</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">level</span><span class=\"bp\">.</span><span class=\"n\">param</span> <span class=\"o\">(</span><span class=\"n\">mk_simple_name</span> <span class=\"err\">$</span> <span class=\"s2\">&quot;u&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">to_string</span> <span class=\"n\">i</span><span class=\"o\">)),</span>\n   <span class=\"n\">t</span> <span class=\"err\">←</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">instantiate_type_univ_params</span> <span class=\"n\">ls</span><span class=\"o\">,</span>\n   <span class=\"n\">t&#39;</span> <span class=\"err\">←</span> <span class=\"n\">alpha_normalize</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"s2\">&quot;failed on declaration &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"o\">),</span>\n   <span class=\"n\">vs</span> <span class=\"err\">←</span> <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">declaration</span><span class=\"bp\">.</span><span class=\"n\">defn</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">do</span>\n       <span class=\"n\">v</span> <span class=\"err\">←</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">instantiate_value_univ_params</span> <span class=\"n\">ls</span><span class=\"o\">,</span>\n       <span class=\"n\">v&#39;</span> <span class=\"err\">←</span> <span class=\"n\">alpha_normalize</span> <span class=\"n\">v</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">fail</span> <span class=\"o\">(</span><span class=\"s2\">&quot;failed on declaration &quot;</span> <span class=\"bp\">++</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"bp\">.</span><span class=\"n\">to_string</span><span class=\"o\">),</span>\n       <span class=\"n\">return</span> <span class=\"n\">v&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_string</span>\n   <span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"s2\">&quot;_&quot;</span>\n   <span class=\"kn\">end</span><span class=\"o\">,</span>\n   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">to_name</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;</span><span class=\"err\">\\</span><span class=\"s2\">t&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">t&#39;</span><span class=\"bp\">.</span><span class=\"n\">to_string</span> <span class=\"bp\">++</span> <span class=\"s2\">&quot;</span><span class=\"err\">\\</span><span class=\"s2\">t&quot;</span> <span class=\"bp\">++</span> <span class=\"n\">vs</span><span class=\"o\">),</span>\n   <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">emit_all</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">e</span> <span class=\"err\">←</span> <span class=\"n\">get_env</span><span class=\"o\">,</span>\n   <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"n\">return</span> <span class=\"o\">())</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">d</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">emit_declaration</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">emit_all</span><span class=\"o\">,</span>\n  <span class=\"n\">constructor</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177746588,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570648663
    },
    {
        "content": "<p>oh, actually it only took 43 seconds to run on core</p>",
        "id": 177746651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570648684
    },
    {
        "content": "<p>The idea is to run this on both mathlibs, then sort and compare the outputs. I guess this only checks the types currently, not the values (for definitions).</p>",
        "id": 177746856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570648862
    },
    {
        "content": "<p>The sensitivity proof is very slightly broken but not caused by our changes.</p>",
        "id": 177747735,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570649494
    },
    {
        "content": "<p>Incidentally, I just noticed something. Tooltips in VSCode specialize universe levels when you hover over declarations to see the type, but only sometimes. Hover over <code>vector_space.dim</code> in the following and compare.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">10</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"k\">have</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">trivial</span>\n<span class=\"n\">def</span> <span class=\"n\">g</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">10</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">vector_space</span><span class=\"bp\">.</span><span class=\"n\">dim</span> <span class=\"n\">ℝ</span> <span class=\"n\">α</span>\n</pre></div>",
        "id": 177747904,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570649617
    },
    {
        "content": "<p>I think that script looks reasonable? The output will be enormous.</p>",
        "id": 177748058,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570649735
    },
    {
        "content": "<p>I modified my tactic to emit the values of definitions as well.</p>",
        "id": 177748122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570649766
    },
    {
        "content": "<p>We really need to PR that sensitivity thing to mathlib's example folder</p>",
        "id": 177748145,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570649797
    },
    {
        "content": "<p>Yeah, it's been on my todo list for ages but hasn't reached the top.</p>",
        "id": 177748207,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570649837
    },
    {
        "content": "<p>some of the individual types it outputs are around a megabyte</p>",
        "id": 177748209,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570649841
    },
    {
        "content": "<blockquote>\n<p>some of the individual types it outputs are around a megabyte</p>\n</blockquote>\n<p>Sounds about right!</p>",
        "id": 177748250,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570649872
    },
    {
        "content": "<blockquote>\n<p>Yeah, it's been on my todo list for ages but hasn't reached the top.</p>\n</blockquote>\n<p>Same here...</p>",
        "id": 177748305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570649891
    },
    {
        "content": "<p>It still takes less than a minute on core, so hopefully it will take less than a day on mathlib?</p>",
        "id": 177748318,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570649905
    },
    {
        "content": "<p>The breakage in the sensitivity proof was really minor, but one of the breaks I don't understand.</p>",
        "id": 177748342,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570649934
    },
    {
        "content": "<p>It's easy to fix but I don't know why it happened.</p>",
        "id": 177748359,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570649944
    },
    {
        "content": "<blockquote>\n<p>It still takes less than a minute on core, so hopefully it will take less than a day on mathlib?</p>\n</blockquote>\n<p>And you have to run it twice to compare!</p>",
        "id": 177748636,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570650137
    },
    {
        "content": "<p>Luckily I didn't try to make it process anything in parallel so my laptop can do both runs at once</p>",
        "id": 177750313,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570651211
    },
    {
        "content": "<p>So the script noticed that in <code>sesq_form.to_module</code> the order of the two universe parameters changed</p>",
        "id": 177751085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570651756
    },
    {
        "content": "<p>which is not that surprising, and almost certainly harmless?</p>",
        "id": 177751126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570651796
    },
    {
        "content": "<p>Oh, it's not the universe arguments order that changed</p>",
        "id": 177751286,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570651894
    },
    {
        "content": "<p>it's the order of various implicit/type class arguments. It used to be</p>\n<div class=\"codehilite\"><pre><span></span>sesq_form.to_module    Pi {a0 : Type.{u0}} [a1 : add_comm_group.{u0} a0] {a2 : Type.{u1}} [a3 : comm_ring.{u1} a2] [a4 : module.{u1 u0} a2 a0 (comm_ring.to_ring.{u1} a2 a3) a1] ...\n</pre></div>\n\n\n<p>and now it's a more logical</p>\n<div class=\"codehilite\"><pre><span></span>sesq_form.to_module    Pi {a0 : Type.{u1}} [a1 : comm_ring.{u1} a0] {a2 : Type.{u0}} [a3 : add_comm_group.{u0} a2] [a4 : module.{u1 u0} a0 a2 (comm_ring.to_ring.{u1} a0 a1) a3] ...\n</pre></div>",
        "id": 177751394,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570651971
    },
    {
        "content": "<p>Was that the only change that it found?</p>",
        "id": 177751773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570652199
    },
    {
        "content": "<p>It's currently trying to emit what must be a rather large type</p>",
        "id": 177752061,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570652272
    },
    {
        "content": "<p>Hmm. It is a semantic change, but an improvement. We can take that one.</p>",
        "id": 177752075,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570652278
    },
    {
        "content": "<p>Reid, you're not checking all of mathlib, are you? It's easy enough to only run that on files in the linear_algebra directory.</p>",
        "id": 177752319,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570652450
    },
    {
        "content": "<p>I just noticed that wasn't in the script you posted.</p>",
        "id": 177752322,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570652456
    },
    {
        "content": "<p>Indeed that optimization seems to be worth implementing</p>",
        "id": 177753865,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570653491
    },
    {
        "content": "<p>How can I check whether a string contains another string?</p>",
        "id": 177753895,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570653521
    },
    {
        "content": "<p><code>sanity_check</code> is probably the easiest example of this to follow.</p>",
        "id": 177754050,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570653648
    },
    {
        "content": "<p>oh, I have to use mathlib apparently</p>",
        "id": 177754227,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570653768
    },
    {
        "content": "<p>Update: It's still slow</p>",
        "id": 177755536,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570654646
    },
    {
        "content": "<p>But slow on the 768 declarations in linear algebra instead of the 32098 in mathlib plus whatever's in core.</p>",
        "id": 177755683,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570654767
    },
    {
        "content": "<p>It's apparently been stuck trying to print the type of a single declaration for more than an hour</p>",
        "id": 177760391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570658818
    },
    {
        "content": "<p>I fear my day estimate was optimistic</p>",
        "id": 177760403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570658833
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>rwbarton@operad:~/math/lean/mathlib$ head -131 after-rename/la.out | tail -1 | wc\n      1 57995424 546484410\n</pre></div>",
        "id": 177761576,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570659906
    },
    {
        "content": "<p>Okay I ignored autogenerated and internal things and now it takes 12 seconds.</p>",
        "id": 177761799,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570660170
    },
    {
        "content": "<p>I need to meet someone for dinner now, but I can say that there are only 7 changes and the total sizes of the files are equal, which makes me think they are all of the same form where arguments got permuted. Though universe variables accidentally becoming unified would also be consistent with the file size not changing</p>",
        "id": 177762034,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570660420
    },
    {
        "content": "<p>I'll look at these more closely after dinner</p>",
        "id": 177762041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570660429
    },
    {
        "content": "<p>Or here are the changes if other people want to look <a href=\"/user_uploads/3121/kEM2dyjQkWBdwFV6FdqHBxBD/out.diff\" target=\"_blank\" title=\"out.diff\">out.diff</a></p>",
        "id": 177762110,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570660481
    },
    {
        "content": "<p>Seems like there are actually quite a few changes: <a href=\"/user_uploads/3121/607wd_t2m-Ul9c0VMxNRlktX/out.word_diff\" target=\"_blank\" title=\"out.word_diff\">out.word_diff</a></p>",
        "id": 177776512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570678877
    },
    {
        "content": "<p>But as far as I can see it is mostly reordering universe variables...</p>",
        "id": 177776523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570678905
    },
    {
        "content": "<p>But this time its hard to read again, because the names don't have any semantics...</p>",
        "id": 177776569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570678929
    },
    {
        "content": "<p>Ooh, read that file with <code>less -R out.word_diff</code> to see the colors</p>",
        "id": 177776575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570678953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Your tool should probably be preserved in the <code>scripts/</code> directory...</p>",
        "id": 177776658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570679122
    },
    {
        "content": "<p>Well, there are definitely permuted arguments, which makes it really really hard to see if anything else changed.</p>",
        "id": 177790955,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570697681
    },
    {
        "content": "<p>After squinting at the diff, I'm more confident that this is safe. But still not 100%.</p>",
        "id": 177791434,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570698104
    },
    {
        "content": "<p>Same feeling over here</p>",
        "id": 177791491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570698133
    },
    {
        "content": "<p>I think I'm confident enough to merge and patch if/when universe issues show up.</p>",
        "id": 177791525,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570698182
    },
    {
        "content": "<p>Not thrilled about the permuted arguments, I wish this had been a purely syntactic change. But I'm not gonna try to fix this.</p>",
        "id": 177791558,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1570698235
    },
    {
        "content": "<p>I'm sorry, I might have been responsible for this.</p>",
        "id": 177791745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570698385
    }
]