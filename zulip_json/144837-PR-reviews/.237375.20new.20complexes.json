[
    {
        "content": "<p>I'm looking at <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's new RFC PR on chain complexes. In the docs for double complexes it's mentioned that we don't have double complexes directly. I wonder whether it's possible to do it using some slight generalization of <code>complex_shape</code>. I'm not sure what the precise conditions on the relation should be, but say we're given two complex_shape's as currently defined, and we take the product of the associated relations in the following form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span><span class=\"n\">b'</span><span class=\"o\">⟩,</span> <span class=\"n\">c.rel</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">∨</span> <span class=\"n\">d.rel</span> <span class=\"n\">b</span> <span class=\"n\">b'</span>\n</code></pre></div>\n<p>If <code>c</code> and <code>d</code> are both complex shapes on nat, say, and they define the usual notion of nat-indexed complexes, then this product will define the correct relation needed for a double complex. (edit: this is wrong!) What do people think? Can we generalize <code>complex_shape</code> a bit to allow for double complexes as well?</p>",
        "id": 236778375,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619751316
    },
    {
        "content": "<p>errr... actually this relation is not quite right for double complexes...</p>",
        "id": 236778443,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619751378
    },
    {
        "content": "<p>I haven't thought about this! We would certainly need to relax <code>d_comp_d</code> somehow.</p>",
        "id": 236778460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619751392
    },
    {
        "content": "<p>Actually now I don't see how to get the right relation for a double complex.</p>",
        "id": 236778484,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619751430
    },
    {
        "content": "<p>I guess the following is better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">complex_shape</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span><span class=\"n\">b'</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">c.rel</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b'</span> <span class=\"bp\">∨</span>\n    <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span> <span class=\"bp\">∧</span> <span class=\"n\">d.rel</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"bp\">∨</span>\n    <span class=\"n\">c.rel</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">∧</span> <span class=\"n\">d.rel</span> <span class=\"n\">b</span> <span class=\"n\">b'</span>\n</code></pre></div>",
        "id": 236778888,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619751820
    },
    {
        "content": "<p>but it's a bit cumbersome...</p>",
        "id": 236778891,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619751826
    },
    {
        "content": "<p>Even beyond that, we would need to relax <code>d_comp_d</code>, so the diagonal maps aren't forced to be zero.</p>",
        "id": 236779101,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619752057
    },
    {
        "content": "<p>yeah of course.</p>",
        "id": 236779159,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619752111
    },
    {
        "content": "<p>Maybe we can just replace <code>d_comp_d : d i j &gt;&gt; d j k = 0</code> with <code>d i j &gt;&gt; d j k = d i k</code>?</p>",
        "id": 236779238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619752196
    },
    {
        "content": "<p>it's almost like we would need more than one relation. For example, one saying that going twice to the right gives zero, one saying going twice up is zero, and one saying that going diagonally the diagrams commute</p>",
        "id": 236779243,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619752202
    },
    {
        "content": "<p>then <code>shape</code> is doing all the work</p>",
        "id": 236779304,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619752233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237375.20new.20complexes/near/236779238\">said</a>:</p>\n<blockquote>\n<p>Maybe we can just replace <code>d_comp_d : d i j &gt;&gt; d j k = 0</code> with <code>d i j &gt;&gt; d j k = d i k</code>?</p>\n</blockquote>\n<p>Oh this is clever!</p>",
        "id": 236779346,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619752317
    },
    {
        "content": "<p>It feels weird, but it seems correct...? Maybe I should try it out.</p>",
        "id": 236779416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619752379
    },
    {
        "content": "<p>It does feel weird. To get that the map from (0,0) to, say, (2,1) is zero, you have to use the fact that the path from (0,0) to (2,1) agrees with (0,0) -&gt; (2,0) -&gt; (2,1), and the first map is zero ;)</p>",
        "id": 236779489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619752447
    },
    {
        "content": "<p>Well, isn't that exactly the normal argument?</p>",
        "id": 236779520,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619752491
    },
    {
        "content": "<p>yeah, I guess so :)</p>",
        "id": 236779548,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619752518
    },
    {
        "content": "<p>but wouldn't this imply that (0,0) -&gt; (1,0) is the same as (0,0) -&gt; (2,0) -&gt; (1,0) hence would also be zero?</p>",
        "id": 236779651,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619752599
    },
    {
        "content": "<p>ah :-)</p>",
        "id": 236779659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619752620
    },
    {
        "content": "<p>There's no direction enforced in the condition  <code> d i j &gt;&gt; d j k = d i k</code></p>",
        "id": 236779662,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619752624
    },
    {
        "content": "<p>of course. (I remember now having exactly this bad idea before...)</p>",
        "id": 236779677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619752646
    },
    {
        "content": "<p>I wonder if there is some good inspiration to be had here from thinking about double complexes as modules over <code>Z[d1, d2]/&lt;d1^2 = d2^2 =0&gt;</code>,</p>",
        "id": 236780009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619752955
    },
    {
        "content": "<p>I guess one could just add an indexing type for the various \"directions\", and have several different <code>d</code>s. I'm not really sure this is buying you much in the end. You could uniformly define the morphisms, but it's only the first few files of the development that generalise to cover both complexes and double complexes...?</p>",
        "id": 236780241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619753184
    },
    {
        "content": "<p>(I'm interpreting those <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>s as \"yes, lets not attempt this generalisation for now\".)</p>",
        "id": 236793028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619765510
    },
    {
        "content": "<p>Right -- when I thought about this a month or two ago I became convinced that a double complex has \"two kinds of differentials\" in some fundamental way -- this is often what we use for notation anyway. But this is not the only problem if we're going with this \"all the d's but most are zero\" approach</p>",
        "id": 236793101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619765540
    },
    {
        "content": "<p>Note there is a \"demo\" in this PR that you can work with a complex of complexes: I implemented the <code>flip</code> functor which exchanges vertical and horizontal.</p>",
        "id": 236793150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619765599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237375.20new.20complexes/near/236793028\">said</a>:</p>\n<blockquote>\n<p>(I'm interpreting those <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>s as \"yes, lets not attempt this generalisation for now\".)</p>\n</blockquote>\n<p>Sorry -- I added the <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> as a \"yes I agree\" then went to bed :)</p>",
        "id": 236831249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1619788189
    }
]