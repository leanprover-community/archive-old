[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, I've started a WIP branch to construct products and equalizers in CommRing.</p>",
        "id": 135796679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539557875
    },
    {
        "content": "<p>Products work just fine. Equalizers still has lots of sorries, mostly because I'm not willing to get my hands dirty and do things by brute force. All the remaining goals are just about manipulating <code>is_ring_hom</code>. I wish most of them were solved by <code>simp</code>.</p>",
        "id": 135796726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539557922
    },
    {
        "content": "<p>There's also an instance where <code>by subtype_instance</code> doesn't do what I hoped it would do. Perhaps <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> would like to look at this?</p>",
        "id": 135796732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539557948
    },
    {
        "content": "<p>Typical examples of the remaining goals are:</p>\n<div class=\"codehilite\"><pre><span></span>R S : examples.CommRing,\nf g : R ⟶ S\n⊢ set.mem (add_monoid.zero ↥R) {r : ↥R | ⇑f r = ⇑g r}\n</pre></div>",
        "id": 135796738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539557989
    },
    {
        "content": "<p>(A subproblem here is to explain to me why this has <code>set.mem</code> instead of <code>\\in</code>, and <code>add_monoid.zero ↥R</code> instead of <code>0</code>! I'm really confused by both.)</p>",
        "id": 135796787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539558022
    },
    {
        "content": "<p>If anyone wants to hack on this branch, please feel free.</p>",
        "id": 135796790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539558046
    },
    {
        "content": "<p>I've just arrived at a conference I'm organising, and probably should stop working on lean for a while. :-)</p>",
        "id": 135796796,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539558059
    },
    {
        "content": "<p>I was going to say \"you should post more precise coordinates about where this branch is\" and then I remembered that you can click on the link in the title of the thread :D</p>",
        "id": 135796810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539558112
    },
    {
        "content": "<p>the weird unfolding is probably because you have a universe metavariable</p>",
        "id": 135796847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539558125
    },
    {
        "content": "<p>The equalizers file is at <a href=\"https://github.com/leanprover/mathlib/pull/422/files#diff-cc1aad82649d34fb81afe5403e9bd67f\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/422/files#diff-cc1aad82649d34fb81afe5403e9bd67f\">https://github.com/leanprover/mathlib/pull/422/files#diff-cc1aad82649d34fb81afe5403e9bd67f</a>.</p>",
        "id": 135796858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539558221
    },
    {
        "content": "<p>I've just pushed an attempt at products in <code>Top</code>, that reduces it to two <code>sorry</code> statements, which don't mention any category theory.</p>",
        "id": 135805078,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575059
    },
    {
        "content": "<p>If you pull the <code>limits-examples</code> branch of <code>https://github.com/leanprover-community/mathlib/</code>, you'll find <code>https://github.com/leanprover-community/mathlib/blob/limits-examples/category_theory/examples/topological_spaces/products.lean</code></p>",
        "id": 135805099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575141
    },
    {
        "content": "<p>The two remaining goals are just</p>\n<div class=\"codehilite\"><pre><span></span>β : Type u,\nf : β → Top,\nb : β\n⊢ continuous (λ (g : Π (b : β), ↥(f b)), g b)\n</pre></div>\n\n\n<p>(here <code>↥(f b)</code> just means the underlying type of the <code>Top</code>)</p>",
        "id": 135805150,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575179
    },
    {
        "content": "<p>and</p>\n<div class=\"codehilite\"><pre><span></span>α : Type u,\nβ : α → Type v,\nR : Π (a : α), topological_space (β a),\nγ : Type w,\n_inst_1 : topological_space γ,\nf : Π (a : α), γ → β a,\nRh : ∀ (a : α), continuous (f a)\n⊢ continuous (λ (x : γ) (b : α), f b x)\n</pre></div>",
        "id": 135805155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575206
    },
    {
        "content": "<p>which I think needs no explaination, and is presumably meant to be proved by switching the arguments in <code>continuous_pi</code> (which I discovered only because I tried to name this lemma <code>continuous_pi</code>).</p>",
        "id": 135805170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575245
    },
    {
        "content": "<p>Duh, the second one is exactly <code>continuous_pi</code>.</p>",
        "id": 135805232,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575336
    },
    {
        "content": "<p>I am not sure what we are looking for, but I think that statement looks much nicer than the one with the fans</p>",
        "id": 135805241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539575372
    },
    {
        "content": "<p>it's much more obvious what we need to prove</p>",
        "id": 135805244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539575386
    },
    {
        "content": "<p>duh, and the first one is just continuous_apply</p>",
        "id": 135805327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575465
    },
    {
        "content": "<p>I agree, Mario. The problem was really <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> typing <code>tidy</code> a bit too soon. :-)</p>",
        "id": 135805338,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575516
    },
    {
        "content": "<p>I just pushed <a href=\"https://github.com/leanprover-community/mathlib/blob/limits-examples/category_theory/examples/topological_spaces/products.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/limits-examples/category_theory/examples/topological_spaces/products.lean\">this</a>.</p>",
        "id": 135805378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575563
    },
    {
        "content": "<p>I'm surprised case on the fans is not done by the auto_cases stuff</p>",
        "id": 135805379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539575565
    },
    {
        "content": "<p>No, it's not. auto_cases is pretty timid</p>",
        "id": 135805387,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575592
    },
    {
        "content": "<p>if you're trying to construct a fan, tidy will use split and intro to get you most of the way there</p>",
        "id": 135805393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575637
    },
    {
        "content": "<p>(just in case anyone followed that link, I was a moment too fast, and you might want to reload it :-)</p>",
        "id": 135805435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575664
    },
    {
        "content": "<p>what does it mean that <code>Top.pi_π</code> is <code>@[simp]</code>? (Also that name is a bit confusing...)</p>",
        "id": 135805455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539575744
    },
    {
        "content": "<p>Tagging it with @[simp] like that somehow(?!) encourages Lean to unfold its definition more freely later.</p>",
        "id": 135805498,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575783
    },
    {
        "content": "<p>I don't understand that mechanism at all.</p>",
        "id": 135805499,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575791
    },
    {
        "content": "<p>But I've found that you can often avoid stating lots of <code>rfl</code> lemmas just by putting <code>@[simp]</code> on the construction itself.</p>",
        "id": 135805501,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575811
    },
    {
        "content": "<p>oh, that means it marks the equation lemmas as <code>@[simp]</code></p>",
        "id": 135805502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539575813
    },
    {
        "content": "<p>Sorry, voodoo-programming. :-)</p>",
        "id": 135805505,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575819
    },
    {
        "content": "<p>because it's a <code>def</code></p>",
        "id": 135805506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539575821
    },
    {
        "content": "<p>Cool, okay, I'll say that's why, if asked in future. :-)</p>",
        "id": 135805514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575841
    },
    {
        "content": "<p>The first @[simp] was unnecessary, so I removed it.</p>",
        "id": 135805517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575875
    },
    {
        "content": "<p>I agree the name is bad. But I uniformly use <code>π</code> and <code>iota</code> for the maps in cones and cocones</p>",
        "id": 135805558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575924
    },
    {
        "content": "<p>and I think <code>pi</code> is the correct name when talking about product types</p>",
        "id": 135805559,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575933
    },
    {
        "content": "<p>so you end up with the name collision <code>pi_π</code> for the maps out of product types ... :-(</p>",
        "id": 135805566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575953
    },
    {
        "content": "<p>why the <code>dsimp</code> in the first construction and <code>convert</code> in the second instead of directly applying the theorem?</p>",
        "id": 135805642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539576080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, if you have a chance, could you explain that \"universe metavariable\" comment from above?</p>",
        "id": 135805644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539576080
    },
    {
        "content": "<p>I've fixed those; reload.</p>",
        "id": 135805646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539576102
    },
    {
        "content": "<p>It's now the <a href=\"https://github.com/leanprover-community/mathlib/blob/limits-examples/category_theory/examples/rings/equalizers.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/limits-examples/category_theory/examples/rings/equalizers.lean\"><code>rings/equalizers.lean</code></a> file that I'm really unhappy about...</p>",
        "id": 135805691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539576156
    },
    {
        "content": "<p>It's a weird bug that Kenny discovered. Here's a MWE:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">sg</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">instance</span> <span class=\"n\">mm</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- ∀ (a : α), semigroup.mul a sorry = a</span>\n  <span class=\"bp\">..</span><span class=\"n\">sg</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">sg</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">instance</span> <span class=\"n\">mm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- ∀ (a : α), a * 1 = a</span>\n  <span class=\"bp\">..</span><span class=\"n\">sg</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 135805814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539576371
    },
    {
        "content": "<p>If I could understand why <code>set.mem</code> and <code>add_monoid</code> have mysteriously appeared, I could ask Simon why <code>subtype_instance</code> doesn't work. :-)</p>",
        "id": 135805815,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539576377
    },
    {
        "content": "<p>That is weird!</p>",
        "id": 135805835,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539576416
    },
    {
        "content": "<p>the presence of universe metavariables in the type of the theorem causes lean to unfold all sorts of stuff</p>",
        "id": 135805838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539576424
    },
    {
        "content": "<p>indeed, changing <code>CommRing</code> to <code>CommRing.{v}</code> solves that problem</p>",
        "id": 135805894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539576510
    },
    {
        "content": "<blockquote>\n<p>I agree, Mario. The problem was really Patrick Massot typing <code>tidy</code> a bit too soon. :-)</p>\n</blockquote>\n<p>What happened is I copied the proof from Type and started to edit where things went wrong...</p>",
        "id": 135817239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539594231
    },
    {
        "content": "<p>Thanks for your explanations Scott. I think it's unavoidable that  notations needs to be learned in order to use the category theory goodies. But hopefully it will be much easier with more examples</p>",
        "id": 135817319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539594330
    },
    {
        "content": "<blockquote>\n<p>There's also an instance where <code>by subtype_instance</code> doesn't do what I hoped it would do. Perhaps Simon Hudon would like to look at this?</p>\n</blockquote>\n<p>This tactic is really specialized, it's meant to prove substuff is stuff, starting from the definition of substuff, assuming that definition obeys standard naming conventions. It never claimed to be able to prove any random subtype of some stuff is stuff.</p>",
        "id": 135817428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539594473
    }
]