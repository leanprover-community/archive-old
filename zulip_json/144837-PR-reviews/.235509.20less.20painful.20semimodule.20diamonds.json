[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5509\">#5509</a> changes some <code>is_scalar_tower</code> and <code>smul_comm_class</code> instances over N and Z to be more general, rather than only applying to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid.nat_semimodule\">docs#add_comm_monoid.nat_semimodule</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group.int_module\">docs#add_comm_group.int_module</a>.</p>\n<p>This is a slightly unusual thing to do, but is because it is unusual to have diamond isntances in mathlib. The changes in this PR make more lemmas not care about these diamonds.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> since you both seem to have strong opinions about typeclasses</p>",
        "id": 221283217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609412414
    },
    {
        "content": "<p>This is just going to make higher order diamonds, I don't see how it solves the problem</p>",
        "id": 221283252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609412513
    },
    {
        "content": "<p>Also, it seems like this is going \"under\" all modules? That sounds like a pretty performance sensitive area to mess with - most of the issues with <code>mv_polynomial</code> and <code>algebra</code> slowness have to do with this part of the hierarchy</p>",
        "id": 221283342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609412619
    },
    {
        "content": "<p>The higher-order diamonds don't matter, because they're in <code>Prop</code></p>",
        "id": 221283441,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609412734
    },
    {
        "content": "<p>I don't know what you mean by \"all\" modules -  this only affects Z- and N- modules, and only when applying lemmas that require <code>is_scalar_tower</code> / <code>smul_comm_class</code> on those types</p>",
        "id": 221283496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609412795
    },
    {
        "content": "<blockquote>\n<p>I don't see how it solves the problem</p>\n</blockquote>\n<p>The problem is that diamonds in <code>semimodule ℕ M</code> appear, and they resist application of lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_smul_of_tower\">docs#linear_map.map_smul_of_tower</a> because the only <code>is_scalar_tower ℕ R M</code> instance available applies to only one half of the diamond.<br>\nWith the chances in this PR, there is always an <code>is_scalar_tower ℕ R M</code> instance available for any <code>semimodule ℕ M</code> instance.<br>\nWithout it, I'm forced to either:</p>\n<ul>\n<li>Solve the diamond problem via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid.semimodule.subsingleton\">docs#add_comm_monoid.semimodule.subsingleton</a></li>\n<li>Solve <code>map_smul_of_tower</code> from first principles</li>\n</ul>\n<p>The first option is ugly and uninsightful, and the second results in me repeating the proof in this PR over and over again</p>",
        "id": 221283600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609412979
    },
    {
        "content": "<p>is it true that <code>semimodule ℕ M</code> is a subsingleton?</p>",
        "id": 221283815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413274
    },
    {
        "content": "<p>Yes, that's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid.semimodule.subsingleton\">docs#add_comm_monoid.semimodule.subsingleton</a></p>",
        "id": 221283820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413301
    },
    {
        "content": "<p>do we have this theorem?</p>",
        "id": 221283834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413316
    },
    {
        "content": "<p>Yes, my comment links it</p>",
        "id": 221283841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413330
    },
    {
        "content": "<p>I think this instance may need to take its (subsingleton) arguments by <code>{}</code></p>",
        "id": 221283898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413393
    },
    {
        "content": "<p>I don't know which instance or arguments you are referring to</p>",
        "id": 221283903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413418
    },
    {
        "content": "<p>the new ones</p>",
        "id": 221283906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413429
    },
    {
        "content": "<p>Those new instance don't use subsingleton at all</p>",
        "id": 221283912,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413444
    },
    {
        "content": "<p>in nat_is_scalar_tower</p>",
        "id": 221283913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413445
    },
    {
        "content": "<p>The new definitions of <code>nat_is_scalar_tower</code> and <code>int_is_scalar_tower</code> bypass the need for <code>[subsingleton (semimodule ℕ M)]</code> by proving from first principles</p>",
        "id": 221283926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413477
    },
    {
        "content": "<p>This sort of thing has come up before in things like the <code>fintype</code> instance in <code>fintype.card</code>, and you sometimes need to take the typeclass instance as {} instead of [] so that lean doesn't get upset when the inferred instance doesn't match the one from unification</p>",
        "id": 221283991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413557
    },
    {
        "content": "<p>I think that's a different problem to this one</p>",
        "id": 221284001,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413578
    },
    {
        "content": "<p>But I think it's probably one I will run into soon</p>",
        "id": 221284007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413585
    },
    {
        "content": "<p>Right, it occurs when you start using this instance and a diamond occurs in practice</p>",
        "id": 221284051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413604
    },
    {
        "content": "<p>I'm pretty sure I was able to use the instance as is</p>",
        "id": 221284062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413629
    },
    {
        "content": "<p>Are you suggesting that instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">nat_is_scalar_tower</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>it should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">nat_is_scalar_tower</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>?</p>",
        "id": 221284073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413660
    },
    {
        "content": "<p>because this instance still mandates that the thing that goes in the <code>semimodule nat</code> slot is the canonical instance</p>",
        "id": 221284074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413660
    },
    {
        "content": "<p>right</p>",
        "id": 221284081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413666
    },
    {
        "content": "<p>you have to write <code>{_:semimodule ...}</code> fyi</p>",
        "id": 221284090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413703
    },
    {
        "content": "<p>I'll check out my branch that uses these new instances and see if it cares about me making that change</p>",
        "id": 221284092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413719
    },
    {
        "content": "<p>it might not work, I haven't seen it done in this kind of situation before</p>",
        "id": 221284130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413739
    },
    {
        "content": "<p>If it works with <code>[]</code> and not with <code>{}</code>, are you happy to put this in as is?</p>",
        "id": 221284141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609413780
    },
    {
        "content": "<p>I think you are right that this doesn't affect stuff on the main path, so I'm fine with it if it works</p>",
        "id": 221284278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609413965
    },
    {
        "content": "<p>Waiting for my orange bar now...</p>",
        "id": 221284316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609414011
    },
    {
        "content": "<p>It doesn't appear to make any difference here</p>",
        "id": 221284516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609414270
    },
    {
        "content": "<p>I suspect that lemmas like <code>map_smul_of_tower</code> would also need to be changed to take type-class arguments via <code>{}</code></p>",
        "id": 221284529,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609414289
    },
    {
        "content": "<p>Re <code>fintype.card</code> -- does <code>fincard</code> help with this? Jason has been using it very successfully with his development of finite group theory. It's a nat-valued function on all types sending all infinite types to 0. It's particularly nice to use in group theory because then the size of a group is 0 iff it's infinite.</p>",
        "id": 221285087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609415118
    },
    {
        "content": "<p>Here's the example that fails without these new instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">M₃</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M₁</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M₃</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M₃</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 221285094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609415136
    },
    {
        "content": "<p>It succeeds whether the new instances use <code>[]</code> or <code>{}</code></p>",
        "id": 221285147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609415167
    },
    {
        "content": "<p>I'm sure there's a similar example for tensor_product, but I can't be bothered to construct it given that one is simpler</p>",
        "id": 221285279,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609415385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235509.20less.20painful.20semimodule.20diamonds/near/221284278\">said</a>:</p>\n<blockquote>\n<p>I think you are right that this doesn't affect stuff on the main path, so I'm fine with it if it works</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235509.20less.20painful.20semimodule.20diamonds/near/221285147\">said</a>:</p>\n<blockquote>\n<p>It succeeds whether the new instances use <code>[]</code> or <code>{}</code></p>\n</blockquote>\n<p>Based on these two comments, are you ok with kicking it onto the queue?</p>",
        "id": 221285749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609415971
    }
]