[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"314430\">@Benjamin Davidson</span> and <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> this PR is related to the discussion in <a href=\"https://github.com/leanprover-community/mathlib/issues/7273\">#7273</a></p>",
        "id": 242136342,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623275769
    },
    {
        "content": "<p>That's great<br>\nThen we can remove the <code>continuous</code> assumption from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval_integral.continuous_on_integral_of_continuous\">docs#interval_integral.continuous_on_integral_of_continuous</a>, and <code>hgm</code> from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval_integral.integral_comp_mul_deriv'\">docs#interval_integral.integral_comp_mul_deriv'</a>.</p>",
        "id": 242151597,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1623289811
    },
    {
        "content": "<p>Brilliant! I'll get working on removing those assumptions of continuity.</p>",
        "id": 242156262,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1623296202
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Below is a capital iota</span>\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation `Ι` := interval_oc\"</span> <span class=\"k\">in</span> <span class=\"n\">interval</span>\n</code></pre></div>\n<p><span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 242166799,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623308767
    },
    {
        "content": "<p>I don't mind changing this notation, or even not using any notation. This code comes from the sphere eversion project where I use <code>I</code> for the unit interval.</p>",
        "id": 242167752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623309578
    },
    {
        "content": "<p>I don't mind the notation, in fact!</p>",
        "id": 242167931,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623309699
    },
    {
        "content": "<p>I see you complained the statements are not general enough. Don't hesitate to suggest statements if you have them in mind.</p>",
        "id": 242168997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623310408
    },
    {
        "content": "<p>It seems we already have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">unit_interval.lean</span>\n<span class=\"mi\">28</span><span class=\"o\">:</span><span class=\"n\">localized</span> <span class=\"s2\">\"notation `I` := unit_interval\"</span> <span class=\"k\">in</span> <span class=\"n\">unit_interval</span>\n</code></pre></div>",
        "id": 242169145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623310489
    },
    {
        "content": "<p>Yep, this is compatible. The one you found is a capital i.</p>",
        "id": 242169755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623310891
    },
    {
        "content": "<p>I'm really not excited by the naming here.  We already have <code>Icc</code> and <code>Ioc</code>.  Now we have <code>interval</code> and <code>interval_oc</code> (where <code>interval</code> is, as you can tell from the name, closed...).  But this isn't even the best part: there's also two random notations <code>[a,b]</code> and <code>I a b</code> for them.  (Ok, the first one looks nice, but it conflicts with list notation and there's no corresponding notation for other intervals.)</p>",
        "id": 242169976,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623311038
    },
    {
        "content": "<p>IMHO the unordered intervals should follow the same naming scheme as the ordered ones.  Maybe <code>Iccu</code> and <code>Iocu</code> (with u for unordered), or <code>Icc'</code> and <code>Ioc'</code>.  And no notation.</p>",
        "id": 242170058,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623311087
    },
    {
        "content": "<p>I have no strong opinion here (and I didn't introduce <code>interval</code>). On paper we don't even have notation for unordered interval, we simply keep things ambiguous. I'd be fine with <code>Iccu</code> or <code>Icc'</code></p>",
        "id": 242170494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623311376
    },
    {
        "content": "<p>Could we have <code>I[a, b)</code>, <code>I'[a, b)</code> etc as notation? Or are we not allowed to use a paren like that?</p>",
        "id": 242185931,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623320892
    },
    {
        "content": "<p>This messes with auto-closing parens (i.e. that you get <code>[]</code> automatically when you type <code>[</code>), as well as with paren-matching (hover over one <code>[</code>, and the matching <code>]</code> will be highlighted).  So I'd rather not have mismatched delimiters.</p>",
        "id": 242187201,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623321781
    },
    {
        "content": "<p>It probably also breaks the new syntax highlighter</p>",
        "id": 242187379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623321915
    },
    {
        "content": "<p><code>I(a,b|)</code> for <code>Ioc a b</code>, since <code>|)</code> sort of resembles <code>]</code>?</p>",
        "id": 242187581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623322048
    },
    {
        "content": "<p>Maybe the original is already best</p>",
        "id": 242187751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623322166
    },
    {
        "content": "<p>I don't see any immediate issues with this notation.  We could then use <code>I{a,b|}</code> for the unordered intervals.  (Only commenting on the technical feasibility here.)</p>",
        "id": 242187849,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623322228
    },
    {
        "content": "<p>Or swap the <code>,</code> for a <code>;</code> for unordered</p>",
        "id": 242187941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623322302
    },
    {
        "content": "<p>The Isabelle notations: <code>{a .. b}</code> or <code>{a &lt;.. b}</code> or <code>{a .. }</code> and so on. You can easily guess which is which. (Only for ordered intervals, though).</p>",
        "id": 242190699,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623324127
    },
    {
        "content": "<p>If we wait a year, then these should be straightforward to add.</p>",
        "id": 242190851,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623324220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237864.20continuous.20primitives/near/242168997\">said</a>:</p>\n<blockquote>\n<p>I see you complained the statements are not general enough. Don't hesitate to suggest statements if you have them in mind.</p>\n</blockquote>\n<p>I imagine something like: assume <code>f</code> is integrable on <code>Ico a b</code>, and fix some point <code>c</code>. Then <code>x -&gt; \\int_{Ico a x} f</code> is continuous at <code>c</code> within <code>Icc a b</code>. Moreover, if <code>\\mu {c}=0</code>, then <code>x -&gt; \\int_{Icc a x} f</code> is also continuous at <code>c</code> within <code>Icc a b</code>.</p>",
        "id": 242191016,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623324309
    },
    {
        "content": "<p>I proved</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">continuous_within_at_primitive</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b₀</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb₀</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">{</span><span class=\"n\">b₀</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_int</span> <span class=\"o\">:</span> <span class=\"n\">interval_integrable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">min</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b₂</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_within_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"bp\">..</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">∂</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"n\">b₀</span>\n</code></pre></div>",
        "id": 242193346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623325786
    },
    {
        "content": "<p>Then I deduce</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">continuous_on_primitive</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_no_atoms</span> <span class=\"n\">μ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h_int</span> <span class=\"o\">:</span> <span class=\"n\">integrable_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">∂</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">continuous_on_primitive'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_no_atoms</span> <span class=\"n\">μ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h_int</span> <span class=\"o\">:</span> <span class=\"n\">integrable_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">a..x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">∂</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>in addition to the version I already have.</p>",
        "id": 242194488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623326406
    },
    {
        "content": "<p>If this makes you happy then I'll stop torturing intervals.</p>",
        "id": 242194530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623326424
    },
    {
        "content": "<p>I'm 99,9% happy, thanks! Maybe I'd just replace <code>Ioc a x</code> with <code>Icc a x</code> in <code>continuous_on_primitive</code> just because closed intervals are nicer (and since you don't have any atoms it doesn't make a difference).</p>",
        "id": 242194861,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623326614
    },
    {
        "content": "<p>The whole interval_integral is about Ioc, that's why I use them</p>",
        "id": 242194997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623326687
    },
    {
        "content": "<p>Do you think we should have both statements? Or do you want only the one with Icc?</p>",
        "id": 242195065,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623326738
    },
    {
        "content": "<p>As long as we have a lemma saying that the integral on <code>Ioc</code> is the same as the integral on <code>Icc</code> for <code>has_no_atoms \\mu</code>, I don't really mind and you can go for the one you prefer. Probably staying with <code>Ioc</code> is the simplest. </p>\n<p>I'm just slightly perturbed with the discrepancy between finite sums (where we mostly have statements on sums over <code>[0, n)</code>), and interval integrals where we deal with <code>(0, n]</code>. That's not for this PR to fix, in any case!</p>",
        "id": 242195773,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623327125
    },
    {
        "content": "<p>This choice is explained in the docstring of <code>interval_integral</code>, as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">this</span> <span class=\"kd\">definition</span> <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">probability</span> <span class=\"n\">measure</span> <span class=\"bp\">`</span><span class=\"n\">μ</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">integral</span> <span class=\"bp\">`∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">a..b</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span><span class=\"bp\">`</span> <span class=\"n\">equals</span>\n  <span class=\"n\">the</span> <span class=\"n\">difference</span> <span class=\"bp\">$</span><span class=\"n\">F_μ</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"n\">F_μ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">$</span><span class=\"o\">,</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"n\">F_μ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">=</span><span class=\"n\">μ</span><span class=\"o\">(</span><span class=\"bp\">-∞</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span><span class=\"bp\">$</span> <span class=\"n\">is</span> <span class=\"n\">the</span>\n  <span class=\"o\">[</span><span class=\"n\">cumulative</span> <span class=\"n\">distribution</span> <span class=\"n\">function</span><span class=\"o\">](</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">en.wikipedia.org</span><span class=\"bp\">/</span><span class=\"n\">wiki</span><span class=\"bp\">/</span><span class=\"n\">Cumulative_distribution_function</span><span class=\"o\">)</span>\n  <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">μ</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>This makes perfect sense.</p>",
        "id": 242196696,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623327629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> this is ready for review again. The main proof became more complicated by I'm running out of energy for this. I hope what we have now covers all we need, and I stated many variations. Also note I didn't touch the <code>interval_oc</code> bikshed. I agree with Gabriel but I think this should be refactored in a later PR since it should also touch <code>interval</code> and has nothing to do with integration.</p>",
        "id": 242230989,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623341308
    }
]