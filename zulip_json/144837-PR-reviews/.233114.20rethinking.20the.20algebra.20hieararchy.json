[
    {
        "content": "<p>This is a very small PR but in some sense it represents a change of opinion as to how to set up the algebra hierarchy. I have explained my thoughts in my initial PR comment at <a href=\"https://github.com/leanprover-community/mathlib/issues/3114\">#3114</a> and I'll just cut and paste them below. I have a student <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> and the plan was to get her working on DVRs but from the <a href=\"#narrow/stream/116395-maths/topic/DVRs\">DVR thread on #maths</a> it became clear that setting up the definition was not as easy as it should be because of issues with old/new structures. Mario's proposed solution was \"fix the C++ so that old structures can extend new ones painlessly\" but the approach below is different: the idea is to use predicates on <code>comm_ring</code> / <code>integral_domain</code> analogous to how the topology hierarchy is set up.</p>\n<hr>\n<h2>Rethinking the algebra heirarchy</h2>\n<p>There are literally 30+ predicates that one can put on a commutative ring in graduate level algebra (I went through a textbook and counted). Note that currently classes like <code>principal_ideal_domain</code> are not implemented as predicates -- they extend rings and contain data.</p>\n<p>A very important predicate (a current target for me, and something which we need for the theory of local fields (the correct generalisation of of the p-adic numbers)) is that of a discrete valuation ring (DVR). Johan initially suggested that it should extend <code>principal_ideal_domain</code> and <code>local_ring</code> (<a href=\"#narrow/stream/116395-maths/topic/DVRs/near/188143031\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/DVRs/near/188143031</a>), but these classes have overlapping instances, and neither class was made with the old_structure_cmd; old structures struggle to extend new structures (<a href=\"#narrow/stream/116395-maths/topic/DVRs/near/200764626\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/DVRs/near/200764626</a>). Furthermore, trying to get local_ring to be an old structure is not as easy as one would expect (<a href=\"#narrow/stream/116395-maths/topic/DVRs/near/200765476\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/DVRs/near/200765476</a>). </p>\n<p>Both Scott and Johan suggested (in the DVR thread above) that perhaps we should move to predicates. We already have an <code>is_local_ring</code> predicate (although it's not a class); this PR creates an <code>is_principal_ideal_ring</code> predicate. My understanding of Johan's thoughts is that setting things up with predicates will remove a lot of potential diamond headaches. Note that the topology hierarchy (stuff like <code>t2_space</code>) all uses predicates.</p>\n<p>One thing that could be done is to make a predicate <code>is_integral_domain</code>, built on top of <code>comm_ring</code>. One could even have <code>is_comm_ring</code> built on top of <code>ring</code>. Indeed, one could even have <code>is_comm_group</code> built on top of <code>group</code>. It seems to me that one has to decide what the \"basic objects\" are. A computer scientist might argue that one should take the minimal structure with data and then predicatise on top of this, but for me the theory of commutative rings is completely different to the theory of non-commutative rings; they are both big areas, and they study different kinds of question. The question of whether <code>is_integral_domain</code> would be better than <code>integral_domain</code> is less clear to me: I am not sure that <code>integral_domain</code> is causing any problems for us right now so I am minded to leave it for now.</p>\n<p>If this PR gets accepted in some form then I'll go on to do DVR's.</p>\n<h2>Comments about this PR</h2>\n<p>Making <code>is_PIR</code> a predicate enabled the linter to spot that the lemma <code>factors_decreasing</code> does not use the fact that R is a PID! I moved it out of the file and into somewhere more appropriate.</p>\n<h2>Questions I was not sure about:</h2>\n<p>1) if we call the predicate <code>is_principal_ideal_ring</code> then we get <code>is_principal_ideal_ring.principal</code> (the field for the structure). But do we want the namespace to be called <code>principal_ideal_ring</code>?</p>\n<p>2) Do we want <code>is_principal_ideal_domain</code>? Computer scientists might just say \"it's just [integral_domain R] [is_principal_ideal_ring R]\". Someone like Patrick might then counter that our system looks stupid to a mathematician because PIDs are much more common objects than PIRs so why are we focussing on PIRs and not even mentioning PIDs? Should we not even have a <code>principal_ideal_domain</code> namespace?</p>\n<p>3) Thinking further ahead, if these ideas are deemed worth a try: <code>is_local_ring</code> is a Prop, but it's not a class (it's just</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_local_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Should it be made into a class, so we can write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">is_discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_principal_ideal_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_local_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">non_field</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">maximal_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 201373674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592562736
    },
    {
        "content": "<p>I like the idea of moving to mixins like what is done in the topological hierarchy. A comment is that there is still more flexibility than what you present, and that can help having less verbose stuff. For instance, if <code>is_discrete_valuation_ring</code> shows up often, you might want to define it as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">is_discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">is_principal_ideal_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">is_local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">non_field</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">maximal_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Then when you want to invoke a discrete valuation ring, you just need to say <code>[integral_domain R] [is_discrete_valuation_ring R]</code>.</p>",
        "id": 201374202,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592563143
    },
    {
        "content": "<p>What is a mixin? I am highly motivated to work on this because I want to see some serious progress in algebra over the next few months (in 1 week's time I am essentially free of admin until September) but I need to understand the language properly.</p>",
        "id": 201374351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592563246
    },
    {
        "content": "<p>This will involve making <code>is_local_ring</code> into a class. Presumably there is no reason why this shouldn't happen? (it will involve a refactor but I'm certainly prepared to do it)</p>",
        "id": 201374398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592563295
    },
    {
        "content": "<p>mixin is just the name of what you're describing, i.e., a main structure (often on-Prop), and then the Prop classes describing additional properties of the main structure are called mixins.</p>",
        "id": 201375178,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592563915
    },
    {
        "content": "<p>So Johan and Scott are basically suggesting that DVRs, complete intersection rings, Gorenstein rings, Cohen-Macauley rings, regular rings, Nagata rings, Jacobson rings, ..., all become mixins. I went through the index of Matsumura's book on commutative ring theory and counted 30+.</p>",
        "id": 201375302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592564013
    },
    {
        "content": "<p>Yes,exactly.</p>",
        "id": 201375400,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592564079
    },
    {
        "content": "<p>Maybe I can try to sum up what are the pros and cons of the different approaches, as I understand them.</p>\n<p>Fully bundled approach (one class for each kind of rings), i.e., <code>[discrete_valuation_ring R]</code> contains everything.</p>\n<ul>\n<li>not verbose to use</li>\n<li>Efficient when doings constructions (products or like)</li>\n<li>Bad for typeclass search (when searching for <code>has_add \\alpha</code>, Lean would check if, by chance, <code>\\alpha</code> were not a Gorenstein ring, or a Matsumura ring, or whatever)</li>\n<li>Does not work when mixing old and new classes, should definitely use old type classes since there are many fields in common that one would like to extend.</li>\n</ul>\n<p>Fully unbundled approach (i.e., <code>[comm_ring R] [is_principal_ideal_ring R] [is_local_ring R] [is_discrete_valuation_ring R]</code>)</p>\n<ul>\n<li>Very verbose</li>\n<li>Exponential blowup when doing product constructions</li>\n<li>Efficient type class search (<code>has_add R</code> would only go up to <code>comm_ring R</code>), but more searches to be done each time.</li>\n</ul>\n<p>Half-bundled approach (i.e., <code>[comm_ring R] [is_discrete_valuation_ring R]</code>). Mixes the pros and cons of both approaches. Pretty good at everything, I would say, so I'd go for that, with a reasonable central spine, and then mixins extending each other adding more properties of the rings (or fields, or monoids) one is looking at.</p>",
        "id": 201381264,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592568778
    },
    {
        "content": "<p>Many thanks for this. I'm only in it for the theorems, really, but I should probably try and understand this stuff better. The \"reasonable central spine\" comment presumably refers to whether we should have <code>is_integral_domain</code> or <code>integral_domain</code>. From what you're saying, the idea would be that the reasonable central spine needs to take the \"hit\" of bad typeclass search and I think we saw some pretty terrifying examples of this in the perfectoid project with our Tate rings and Huber rings extending topological rings etc.</p>\n<p>I feel like the verbosity can be solved in other ways -- one could imagine someone hacking <code>variables</code> so <code>[is_discrete_valuation_ring R]</code> automatically added the other classes. But maybe I don't care about products? Sure you take products of topological spaces all the time, but with rings in some sense I feel this is more rare. OK I know where the products are -- there are also predicates on modules, and so I will want to know that if M and N are locally of finite type then so is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M\\otimes_RN</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span></span></span></span> and so on.  </p>\n<p>Why can't the CS people just fix all this? I guess it is a genuinely difficult problem. Why are humans so good at it then?</p>",
        "id": 201382584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592569801
    },
    {
        "content": "<p>I like this discussion and Sebastien's helpful summary. It is an empirical question as to how it will effect performance, but at least on ideological grounds I think it is cleaner to separate the fundamental structures from the incidental properties they may or may not have. And I like the partially bundled approach, because it feels like the geometric mean of the two extremes. It seems to make sense to define individual properties and then start putting them together when they come in clusters. </p>\n<p>One thing to keep in mind is that once you start bundling, type class inference only goes from bundled to unbundled. For example, if you have a theorem that assumes <code>[is_foo]</code> and <code>[is_bar]</code> and then you define a class <code>[is_baz]</code> that extends both, you can use the <code>[is_foo] [is_bar]</code> lemma with <code>[is_baz]</code> in the context, since type class inference can find them. On the other hand, you can't apply an <code>[is_baz]</code> lemma with <code>[is_foo]</code> and <code>[is_bar]</code> in the context  and expect type class inference to get it, though maybe in Lean 4 we'll have more clever automation that can manage that.</p>",
        "id": 201392235,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1592574599
    },
    {
        "content": "<p>To expand on Jeremy's point, you can't add the following instance in Lean 3, because it would loop:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">[</span><span class=\"n\">is_foo</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_bar</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_baz</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refine</span>  <span class=\"bp\">⟨_</span><span class=\"o\">,</span><span class=\"bp\">_⟩;</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n\n\n<p>In Lean 4 it should indeed be possible to add this instance.</p>",
        "id": 201394798,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592575717
    },
    {
        "content": "<p>It wouldn't be too hard to backport this kind of loop detection to Lean 3, but I'm less and less inclined to put much work into <span aria-label=\"three\" class=\"emoji emoji-0033-20e3\" role=\"img\" title=\"three\">:three:</span> given the impending release of <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 201394912,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592575780
    },
    {
        "content": "<p>This is not really an issue in practice, though. Most often, you want to apply results on <code>foo</code> or <code>baz</code> to <code>bar</code>, and typeclass inference works fine. The other direction is still possible with <code>letI</code>.</p>",
        "id": 201395050,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592575828
    },
    {
        "content": "<p>Did Leo really say in his talk that he's planning to release it this summer?</p>",
        "id": 201395102,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592575855
    },
    {
        "content": "<p>There have been tremendous improvements in Lean 3 over the last few months -- the community has in some sense been spoiled. I think of these improvements as basically raising the bar for Lean 4 -- if we end up downgrading on some things then there will be pressure on the devs to catch up!</p>",
        "id": 201395123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592575863
    },
    {
        "content": "<p>I am not too bothered about those instance loops right now -- I say there are 30 predicates which should be in Lean, but it's quite another thing actually getting them into Lean and by the time they're there, things will have moved on a great deal.</p>",
        "id": 201395286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592575929
    },
    {
        "content": "<p>The phrase \"end of the summer\" made an appearance</p>",
        "id": 201395552,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592576044
    },
    {
        "content": "<p>I wouldn't get your hopes up that a \"release by end of summer\" includes a usable <code>simp</code> tactic.</p>",
        "id": 201400305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592578310
    },
    {
        "content": "<p>I did rather get the impression from the talk that we should be writing a <code>simp3</code> tactic in Lean 4 as soon as possible.</p>",
        "id": 201400403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592578340
    },
    {
        "content": "<p>(By which I mean, hoping that Gabriel wants to write it... :-)</p>",
        "id": 201400479,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592578366
    },
    {
        "content": "<p>Don't you just knock up some confluent rewriting system? Don't CS people eat those for breakfast?</p>",
        "id": 201400964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592578573
    },
    {
        "content": "<p>/me is clearly not a CS person ;-)</p>",
        "id": 201400994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592578593
    },
    {
        "content": "<p>As Leo said yesterday, the Lean 3 simplifier is small and should be very easy to rewrite from scratch.  I expect it to be more work to rewrite the congruence lemma code.</p>",
        "id": 201402052,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592579033
    },
    {
        "content": "<p>What does that mean? The <code>cc</code> tactic?</p>",
        "id": 201404693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592580237
    },
    {
        "content": "<p>Both simp and cc use the congruence lemmas.  These are automatically generated lemmas like <code>x=y -&gt; z=w -&gt; f x z = f y w</code></p>",
        "id": 201406276,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592580977
    },
    {
        "content": "<p>These are not entirely trivial because of dependent types, implicit arguments, and type class arguments.</p>",
        "id": 201406318,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592581007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233114.20rethinking.20the.20algebra.20hieararchy/near/201402052\">said</a>:</p>\n<blockquote>\n<p>As Leo said yesterday, the Lean 3 simplifier is small and should be very easy to rewrite from scratch.  I expect it to be more work to rewrite the congruence lemma code.</p>\n</blockquote>\n<p>I was thinking this as well, but I didn't say it in the talk. Doesn't <code>simp</code> use some part of <code>cc</code> for doing AC rewriting?</p>",
        "id": 201418657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592587354
    },
    {
        "content": "<p>like when you add <code>add_comm, add_assoc, add_left_comm</code> to the simp set, the naive algorithm would loop, but <code>simp</code> is fine with it</p>",
        "id": 201418749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592587415
    },
    {
        "content": "<p>Oh, this is nothing fancy.  It is just the standard ordered rewriting trick where you only use <code>add_comm</code> if the resulting term is smaller (as measured by some term order, which in Lean's case is a bit ad-hoc).</p>",
        "id": 201418902,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592587495
    },
    {
        "content": "<p>The part of <code>cc</code> that simp uses is the congruence lemmas (like in <code>mk_specialized_congr_lemma_simp</code>).</p>",
        "id": 201418977,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592587549
    }
]