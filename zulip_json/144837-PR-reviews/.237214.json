[
    {
        "content": "<p>Not to be outdone by my friend <span class=\"user-mention\" data-user-id=\"401024\">@Matt Kempster</span>, I have started working on proving Bertrand's postulate so that we can increase our coverage of Wiedijk's 100 theorems. To that end I am starting by adding this lemma<br>\n<code>lemma choose_middle_upper_bound (n : ℕ) : 4 ^ n ≤ (2 * n + 1) * choose (2 * n) n</code><br>\nThis is a little different from the <code>n &gt; 0  -&gt;  4 ^ n ≤ (2 * n) * choose (2 * n) n</code> that you would get from <a href=\"https://en.wikipedia.org/wiki/Proof_of_Bertrand%27s_postulate\">the standard proof</a>. However, I think this version is a little cleaner, since we do not introduce an additional constraint on <code>n</code>, and the proof is a bit shorter. This slightly weaker version will still be sufficient to prove the postulate. What do you all think?</p>",
        "id": 234778406,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1618534567
    },
    {
        "content": "<p>So you're aware, <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> has also been working on this, in <a href=\"https://github.com/leanprover-community/mathlib/issues/2784\">#2784</a></p>",
        "id": 234781334,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1618537158
    },
    {
        "content": "<p>(whoops, Bhavik said the same thing)</p>",
        "id": 234782102,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618537905
    },
    {
        "content": "<p>Ok wonderful. Fortuitously, it seems I proved a lemma that he hadn't gotten to yet. I personally like the idea of keeping this particular lemma in the <code>nat/choose</code> directory since there is a similar lower bound nearby.</p>",
        "id": 234784410,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1618539849
    },
    {
        "content": "<p>In fact, it would seem that with this, we are getting close to a proof - but it also seems like the last push to the <code>bertrand-postulate</code> branch was a few months ago. If Patrick is still interested in this, he's more than welcome to use this lemma in his proof.</p>",
        "id": 234784848,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1618540266
    },
    {
        "content": "<p>I'm guessing that <a href=\"https://github.com/leanprover-community/mathlib/issues/2784\">#2784</a> will need quite a mathlib bump, given how old it is.</p>",
        "id": 234789260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618544554
    },
    {
        "content": "<p>Any guidance on the name for this theorem? <code>four_pow_le_two_mul_add_one_mul_central_binom</code> is a bit too wordy, but <code>upper_bound</code> potentially conflicts with future upper bounds on the central binomial coefficient.</p>",
        "id": 234792222,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1618546948
    },
    {
        "content": "<p>Hmm, maybe just go with the wordy name for now</p>",
        "id": 234792435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618547145
    },
    {
        "content": "<p>I guess you don't apply it that often, right?</p>",
        "id": 234792447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618547158
    },
    {
        "content": "<p>If you do, you can make a local notation for it in the file that you are working on.</p>",
        "id": 234792496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618547177
    },
    {
        "content": "<p>Yes, currently only adding this in preparation to use it in the one place, so I guess that makes sense.</p>",
        "id": 234792555,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1618547251
    },
    {
        "content": "<p>Should the preceding lemma, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.choose_middle_le_pow\">docs#nat.choose_middle_le_pow</a>, be renamed to <code>choose_middle_le_four_pow</code> to match?</p>",
        "id": 234799807,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618553658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237214/near/234789260\">said</a>:</p>\n<blockquote>\n<p>I'm guessing that <a href=\"https://github.com/leanprover-community/mathlib/issues/2784\">#2784</a> will need quite a mathlib bump, given how old it is.</p>\n</blockquote>\n<p>Can you explain this statement? Does the mathlib version depend on the branch somehow? Since <a href=\"https://github.com/leanprover-community/mathlib/issues/2784\">#2784</a> only touches one file, can't I simply merge master into it then fix any broken references to bring it up to date?</p>",
        "id": 236924417,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1619832359
    },
    {
        "content": "<p>Yes, you can do exactly that.</p>",
        "id": 236924578,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619832504
    },
    {
        "content": "<p>I am making progress on this. Seeing as <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span>  completed much of the work in this file, how should I handle the copyright header?</p>",
        "id": 238952385,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1621144368
    },
    {
        "content": "<p>The first line in the copyright header is the \"initial author\" of that chunk of text. The <code>Authors:</code> line is for whoever should be on the hook if we have trouble with the file later, and need an expert to explain what's going on / fix things. It does not need to capture every contributor. Use the <code>Coauthored-by: </code> tag in the PR top comment to acknowledge others: in the past to come up with lists of mathlib contributors we've machine processed all these tags.</p>",
        "id": 238952612,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621144709
    },
    {
        "content": "<p>Hi - sorry for the radio silence, I kind of burned out while I was in the middle of the ancient PR</p>",
        "id": 238964041,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621158078
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> , good to see you're still around.</p>\n<p>I have made some updates to the branch, some of which have commented out or deleted some lemmas you made. Hopefully I didn't remove anything important. If you want to jump back in, that's great - currently the branch only has 5 or so sorry lemmas left to finish. Otherwise, I have just been chugging along on them whenever I'm free.</p>",
        "id": 239000704,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1621193454
    },
    {
        "content": "<p>Also, sorry about the lemmas named by keyboard mashing, that's my bad habit when I'm trying to work quickly</p>",
        "id": 239000726,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1621193487
    },
    {
        "content": "<p>I did a bit of linting on <a href=\"https://github.com/leanprover-community/mathlib/issues/2784\">#2784</a> - removed a couple of <code>omega</code> for speed, grouped lines together in <code>{}</code> to demarcate goals more cleanly, that sort of thing</p>",
        "id": 239938466,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621762915
    },
    {
        "content": "<p>Also had a stab at showing the <code>false_inequality</code> to be false, but annoyingly all of my really crude approximations fail according to Mathematica</p>",
        "id": 239938533,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621762970
    },
    {
        "content": "<p>And yet the inequality is false by a factor of 10^24 at the point <code>n = 750</code></p>",
        "id": 239938549,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621763007
    },
    {
        "content": "<p>Are you asking a question or giving an update? If you're asking a question (e.g. \"how do I prove this inequality in Lean\") then can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? I'm a bit confused when you say you're trying to prove a false thing.</p>",
        "id": 239941882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621766603
    },
    {
        "content": "<p>Sorry, that was just an update</p>",
        "id": 239968876,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621793988
    },
    {
        "content": "<p>To be clear: we're in a proof by contradiction, and modulo four rather easy <code>sorry</code>s, we've finally achieved a proof of a certain inequality that I know to be false for <code>n</code> greater than about 750 (the actual bound where it becomes false is around 700): <a href=\"https://github.com/leanprover-community/mathlib/pull/2784/files#diff-779714ecbcf3ae1ddff8a35448792a63daacd8e7c2b942aa723c2c19b65ec2ddR597\">https://github.com/leanprover-community/mathlib/pull/2784/files#diff-779714ecbcf3ae1ddff8a35448792a63daacd8e7c2b942aa723c2c19b65ec2ddR597</a></p>\n<p>However, showing that the inequality is in fact false at <code>n = 750</code> is currently eluding me (though I haven't put serious brainpower into it yet). Mathematica assures me the inequality is false by many orders of magnitude; I just haven't yet found a way to tell Lean this.</p>",
        "id": 239969106,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621794195
    },
    {
        "content": "<p>No fundamental problems encountered so far, it's just that I haven't yet spotted whatever clever bound makes it obvious that the term <code>false_inequality</code> leads to a contradiction. I might try taking logs and then seeing if <code>norm_num</code> can do it.</p>",
        "id": 239969192,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621794294
    },
    {
        "content": "<p>I had a go at this for an hour or so and the only thing that was learnt was that numerical stuff is a pain.</p>",
        "id": 239973680,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621799119
    },
    {
        "content": "<p>Just checked properly with Mathematica; it's actually n=460, the first integer where the inequality becomes false</p>",
        "id": 239974590,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621800170
    },
    {
        "content": "<p>The logs of both sides are 637.695, 637.149 respectively at n=460 - should be well within the realms of <code>norm_num</code> if <code>norm_num</code> works as I hope it does</p>",
        "id": 239974659,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621800228
    },
    {
        "content": "<p>(I'm assuming an induction is easy from that point)</p>",
        "id": 239974698,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621800249
    },
    {
        "content": "<p>i may try with something like 464, as <code>nat.log</code> seems a little easier to use than the normal log... I can't even find a monotonicity lemma for log that doesn't involve using <code>real.exp_order_iso.symm</code></p>",
        "id": 239976314,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621802031
    },
    {
        "content": "<p>Can you make a MWE?</p>",
        "id": 239979322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621805384
    },
    {
        "content": "<p>A MWE of what?</p>",
        "id": 239979785,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621805824
    },
    {
        "content": "<p>You mean like \"the structurally smallest inequality of naturals that it's non-obvious how to evaluate\"?</p>",
        "id": 239979815,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621805870
    },
    {
        "content": "<p>If you want some help filling in a sorry, e.g. proving that some number is less than some other number, then why not just produce a small code block with a sorry in which other people can try for themselves.</p>",
        "id": 239979859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621805890
    },
    {
        "content": "<p>But one which compiles by itself in a small scratch file with mathlib master</p>",
        "id": 239979884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621805921
    },
    {
        "content": "<p>But if you don't need help on a sorry then forget it. I'm trying to work out if you need help and if you do I'm suggesting a way of maximising the chance that you'll get help</p>",
        "id": 239980029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621806107
    },
    {
        "content": "<p>PS if you think that norm_num can take the log of a number and get the answer to 6 significant figures then I think you're being extremely optimistic</p>",
        "id": 239980122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621806215
    },
    {
        "content": "<p>If you're interested, the problem is precisely the following, where I just want to show it for any choice of <code>500</code> that makes the theorem easy to prove; but I haven't really given it a serious go yet</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"c1\">-- This theorem is true iff n &gt;= 460</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">but_why</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">big</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">500</span><span class=\"o\">):</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">nat.sqrt</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 239980230,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621806363
    },
    {
        "content": "<p>So no help required, at least at the moment</p>",
        "id": 239980291,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621806403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> Is the theorem true for <code>n &gt;= 460</code> in <em>Lean</em>? I'm asking because <code>nat.sqrt (2 * n)</code> and <code>n / 3</code> are both truncating. This might be something you need to take into account.</p>",
        "id": 240001410,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621828962
    },
    {
        "content": "<p>This looks like the inequality in bertrand's postulate. There is a really neat optimization of the argument by Toshiori that makes it true for n &gt;= 64 and the numbers work out nicely without any big norm_num or the need to estimate things to 6 digits. That's the version I implemented in metamath</p>",
        "id": 240010106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621836476
    },
    {
        "content": "<p>Do you know a maths proof for this <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> ? Lean isn't going to solve this goal by magic, and an argument of the form \"I worked out some values for n=500,501,502 and it was pretty clear that one side was growing faster than the other\" can't be formalised because it's not rigorous</p>",
        "id": 240013812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621839810
    },
    {
        "content": "<p>It's not hard to prove that one side grows faster than the other, but that's a purely asymptotic statement so it's not very useful for the non-asymptotic version of bertrand's postulate</p>",
        "id": 240014251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621840154
    },
    {
        "content": "<p>If you put a gun to my head and asked me to prove this in lean I would first rewrite it as 4^n &gt;= ... (I don't know why you're making it more complicated with the <code>false</code> thing) and then prove that 4^(n/12) &gt;= 2n+1 for sufficiently large n, reduce to proving 4^(sqrt(2n)/24)&gt;2n and then try to reduce more</p>",
        "id": 240014326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621840212
    },
    {
        "content": "<p>You might get some much uglier constants though. How important is it that 500&lt;1000000?</p>",
        "id": 240014368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621840240
    },
    {
        "content": "<p>If you raise the constant too much you have to check more explicit primes, but the prime sequence grows exponentially so it's not too bad (except that proving that a single prime in the range of 1000000 is prime is a lot of work)</p>",
        "id": 240014441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621840313
    },
    {
        "content": "<p>but the constant 64 is quite magic, it has just the right square root and can be taken to the power 2/3 and stuff</p>",
        "id": 240014534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621840379
    },
    {
        "content": "<p>Johann, the square root truncation was dealt with (I checked with Sage myself); not sure about the division truncation, but that should be ±3 at most</p>",
        "id": 240016522,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621841920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237214/near/240001410\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117987\">Patrick Stevens</span> Is the theorem true for <code>n &gt;= 460</code> in <em>Lean</em>? I'm asking because <code>nat.sqrt (2 * n)</code> and <code>n / 3</code> are both truncating. This might be something you need to take into account.</p>\n</blockquote>\n<p>Yeah, it's true as stated - the least n becomes 476 if you use real-sqrt and rational-quotient</p>",
        "id": 240016541,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1621841935
    },
    {
        "content": "<p>also, whilst messing around with this I realised that <code>norm_num</code> can't deal with <code>nat.sqrt</code>, but it's pretty easy to do it; does anyone have a tutorial on writing tactic code or such like? it seems like a fun side project</p>",
        "id": 240016995,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621842261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  There are tactic writing docs on the community website</p>",
        "id": 240017210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621842443
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/extras/tactic_writing.html\">https://leanprover-community.github.io/extras/tactic_writing.html</a></p>",
        "id": 240017227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621842457
    },
    {
        "content": "<p>I've reduced the problem now to <code>8 * x + 8 ≤ (x * log 4 / sqrt (8 * x + 8) / 3) ^ (3 : ℝ)</code> using the inequality <code>x^3 &lt; exp(3 * x)</code>. This will require us to increase the condition <code>249 \\le x</code> to something higher, but I think this will ultimately be less effort than the calculus way.</p>\n<p>The calculus approach of treating the inequality as a function and proving it has positive derivative above a certain value would require yet another version of Rolle's theorem. It might be worth defining a proposition such as <code>increasing_on</code> for real to real functions, along with lemmas relating this to the derivative if it exists.</p>",
        "id": 243224225,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624070870
    },
    {
        "content": "<p>The current state of the PR requires x to be bounded below by about 3x10^6</p>",
        "id": 243243641,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624099881
    },
    {
        "content": "<p>Which I think is rather optimistic</p>",
        "id": 243243642,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1624099905
    },
    {
        "content": "<p>When norm_num proves something is prime, how does it work? Does it check all factors up to p? Up to sqrt p?</p>",
        "id": 243270138,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624138394
    },
    {
        "content": "<p>it checks odd numbers up to sqrt p</p>",
        "id": 243270190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624138450
    },
    {
        "content": "<p>There are more efficient algorithms of course but this performs well in the range that people normally need for formal proofs</p>",
        "id": 243270192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624138463
    },
    {
        "content": "<p>smh, GNFS implementation in Lean when? ;b</p>",
        "id": 243270201,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1624138485
    },
    {
        "content": "<p>GNFS not optimal, primes in P is what I would want</p>",
        "id": 243270433,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624138811
    },
    {
        "content": "<p>What would really be useful would be a definition of computable reals and computable real functions, along with a tactic that proves goals of the form <code>x &lt; y</code> where <code>x</code> and <code>y</code> are composed of computable reals and computable real functions. This would circumvent all the switching between exponents and logs and moving of sqrts I need to do to prove a lemma like <code>log 584 + 2 ≤ sqrt (2 * 73) * log 2</code> or <code>sqrt 2008 * log 2008 ≤ 250 * log 4</code>.</p>",
        "id": 243326068,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1624230178
    }
]