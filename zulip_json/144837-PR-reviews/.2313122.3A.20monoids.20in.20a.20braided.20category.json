[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"487500\">@Oleksandr Manzyuk</span>, I'm excited to see this arriving in mathlib! Thanks for working on this. I've reviewed the first PR a bit more now. Please don't hesitate to ping me here to remind me that PRs in this set need further review.</p>",
        "id": 277494209,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648859547
    },
    {
        "content": "<p>Is it intentional that <a href=\"https://github.com/leanprover-community/mathlib/pull/13034\">#13034</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/13121\">#13121</a>, and <a href=\"https://github.com/leanprover-community/mathlib/pull/13122\">#13122</a> are not PRs into master?</p>",
        "id": 277498212,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1648864137
    },
    {
        "content": "<p>Ah, probably not. <span class=\"user-mention\" data-user-id=\"487500\">@Oleksandr Manzyuk</span>, when making a sequence of dependent PRs, it is best to just make them PRs to master, rather than PRs to the previous one in the sequence. We will merge them one at a time from the bottom. Ask for help here if you need help explaining to git what you want. :-)</p>",
        "id": 277498290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648864260
    },
    {
        "content": "<p>Ah, ok.  Different organisations, different workflows.  I thought basing every PR in the sequence on the previous one would produce better diffs and would allow the incremental changes contained in each PR to be reviewed independently and in parallel, but I guess this practice is not common in mathlib?  Is this why we include checkboxes for \"depends on\" PRs in the description?  So that the review on a given PR can be started only when all its dependencies have been ticked off?</p>\n<p>(The way I stacked PRs is an approximation of the <a href=\"https://jg.gg/2018/09/29/stacked-diffs-versus-pull-requests/\">\"stacked diffs\" workflow</a>, which I've become a huge fan of when I worked at Facebook.)</p>",
        "id": 277516056,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648888836
    },
    {
        "content": "<p>PRs to mathlib master are squash merged so some of the issues raised in that link aren't relevant here. The idea is that each PR is an atomic thing which is scrutinised extremely carefully by the maintainers and others, and once they're happy it becomes one commit onto master.</p>",
        "id": 277516529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648889456
    },
    {
        "content": "<p>This makes sense, thank you.</p>",
        "id": 277516918,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648889900
    },
    {
        "content": "<p>In particular,</p>\n<blockquote>\n<p>In this model, every commit must pass lint. It must pass unit tests. It must build. Every commit should have a test plan. A description. A meaningful title. Every. Single. Commit. This level of discipline means the code quality bar is fundamentally higher than the Pull Request world (especially if you rely on Squash Merge to save you). Because every commit builds, you can bisect. You can expect that reading pure git log is actually meaningful. In fact, in this model every single commit is like the top commit from a Pull Request. Every commit has a link to the code review that allowed the commit to land. You can see who wrote it and who reviewed it at a glance.</p>\n</blockquote>\n<p>...this is exactly what we have with our system.</p>",
        "id": 277516952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648889991
    },
    {
        "content": "<p>It's true that it makes reviewing the later PRs slightly awkward, as you need to understand the diffs \"by hand\". However as you saw here it doesn't  necessarily stop us!</p>",
        "id": 277517523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648890713
    },
    {
        "content": "<p>Cool!  I'll change the base branch of each PR to master.</p>",
        "id": 277517738,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648891074
    },
    {
        "content": "<p>Should I pull the branch of <a href=\"https://github.com/leanprover-community/mathlib/pull/13125\">#13125</a> and rebase my work on top of it, or should I just wait for it to be merged?</p>",
        "id": 277517897,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648891248
    },
    {
        "content": "<p>Most of the criticism Gabbard draws vanishes when you squash commits of a PR (and I don't understand why you would ever not do this).</p>",
        "id": 277518320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648891786
    },
    {
        "content": "<p>mathlib branches are also longer lived, so the hazy iterative rebase process doesn't really happen.</p>",
        "id": 277518401,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648891899
    },
    {
        "content": "<p>Further, the need for cache and the high interdependence of mathlib modules means that local changes often do conflict (cache-wise).</p>",
        "id": 277518493,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648892032
    },
    {
        "content": "<p>The longest I have to wait when working on mathlib is for cache to download, and we already have an idea of how to fix this (if I'm right), namely more local chunks of cache.</p>",
        "id": 277518555,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648892106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"487500\">@Oleksandr Manzyuk</span>, I'll still make a few tweaks, but I think it should be safe to merge <a href=\"https://github.com/leanprover-community/mathlib/pull/13125\">#13125</a> into your branch and make use of it.</p>",
        "id": 277519853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648893660
    },
    {
        "content": "<p>(Note that since we squash PRs, there's little harm in just merging: you end up with a gross history on your PR, but all is forgiven when we hit merge. :-)</p>",
        "id": 277519869,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648893689
    },
    {
        "content": "<p>It will mess up coauthors however.</p>",
        "id": 277520244,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648894180
    },
    {
        "content": "<p>I'm not sure what happened to <a href=\"https://github.com/leanprover-community/mathlib/pull/13034\">#13034</a>?  It was closed by bors?</p>",
        "id": 277598166,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648975598
    },
    {
        "content": "<p>This is because the target branch was merged by bors. That's because you stacked branches.</p>",
        "id": 277598258,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648975656
    },
    {
        "content": "<p>Gah.  Should I open a new PR?</p>",
        "id": 277598348,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648975692
    },
    {
        "content": "<p>Nah, just reopen it and change the target branch. That's okay.</p>",
        "id": 277598416,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648975748
    },
    {
        "content": "<p>Hmm.  I don't seem to be able to do that.  \"Reopen pull request\" button is greyed out and the tooltip says \"The cartesian-product-monoidal branch has been deleted.\"  I can edit the title of the PR but don't seem to be able to change the base branch, unless I'm overlooking something.</p>",
        "id": 277598819,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648975955
    },
    {
        "content": "<p>Weird. You should be able to restore branches. What happens if you push your local branch?</p>",
        "id": 277599219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648976162
    },
    {
        "content": "<p>I actually did that.  Nothing changes on the PR, but when I follow the link to the <code>tensor-monoidal</code> branch, I see</p>\n<p><a href=\"/user_uploads/3121/2FVXYKfkeXjl3uhiE0EzV-Ey/Screenshot-2022-04-03-at-09.57.47.png\">Screenshot-2022-04-03-at-09.57.47.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2FVXYKfkeXjl3uhiE0EzV-Ey/Screenshot-2022-04-03-at-09.57.47.png\" title=\"Screenshot-2022-04-03-at-09.57.47.png\"><img src=\"/user_uploads/3121/2FVXYKfkeXjl3uhiE0EzV-Ey/Screenshot-2022-04-03-at-09.57.47.png\"></a></div>",
        "id": 277599485,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648976298
    },
    {
        "content": "<p>No, I meant pushing <code>tensor_monoidal</code></p>",
        "id": 277599687,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648976408
    },
    {
        "content": "<p>I'm not sure I understand.  I merged <code>master</code> (with changes from <code>cartesian-product-monoidal</code> merged in) as well as <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's <code>semorrison/coherence</code> branch into <code>tensor-monoidal</code>and pushed it to origin.</p>",
        "id": 277600125,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648976665
    },
    {
        "content": "<p><del>branch#tensor-monoidal doesn't return anything.</del> Now it does</p>",
        "id": 277600200,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648976712
    },
    {
        "content": "<p>Can you just create a new PR from <code>tensor-monoidal</code>?</p>",
        "id": 277600227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648976732
    },
    {
        "content": "<p>This is what I was going to do.</p>",
        "id": 277600246,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648976744
    },
    {
        "content": "<p>I'll mention the old PR in the new one.  Sorry for this mess-up.</p>",
        "id": 277600323,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648976775
    },
    {
        "content": "<p>It's okay. Our approach to stacked PRs is non-standard.</p>",
        "id": 277600354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1648976797
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13150\">#13150</a></p>",
        "id": 277600841,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648977046
    },
    {
        "content": "<p>I've updated two other PR to be based off of master.  I'll address your comments on <a href=\"https://github.com/leanprover-community/mathlib/pull/13122\">#13122</a> later today, Scott.</p>",
        "id": 277602998,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1648978285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313122.3A.20monoids.20in.20a.20braided.20category/near/277599219\">said</a>:</p>\n<blockquote>\n<p>Weird. You should be able to restore branches. What happens if you push your local branch?</p>\n</blockquote>\n<p>You have to undelete the branch through the github UI, I think, to make it possible to reopen downstream issues</p>",
        "id": 277745011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649084921
    },
    {
        "content": "<p>What's the status of <a href=\"https://github.com/leanprover-community/mathlib/pull/13125\">#13125</a>?  I'd be happy to see it merged and my PRs that depend on it reviewed.</p>",
        "id": 278312617,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1649428305
    },
    {
        "content": "<p>The intersection of people who know meta code and monoidal categories is very small...</p>",
        "id": 278313176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649428540
    },
    {
        "content": "<p>I'll try to review it</p>",
        "id": 278313190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649428545
    },
    {
        "content": "<p>The meta code involved is very small. I think the biggest review consideration is whether it's okay to delegate part of the tactic out to the <code>lift_hom</code> typeclass. This is somewhat contrary to the usual advice to avoid using typeclass inference as a prover, but I think okay. It is just about annotating certain morphisms, and the typeclass search problems are highly constrained.</p>",
        "id": 278375433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649462052
    },
    {
        "content": "<p>I have some ideas for further monoidal categories tactics which also use this typeclass framework (particularly, a <code>suppress_associators</code> tactic that rewrites everything in terms of the new <code>monoidal_comp</code>).</p>",
        "id": 278375476,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649462125
    },
    {
        "content": "<p>For that matter, even implementing <code>monoidal_comp</code> without the <code>lift_hom</code> typeclass would be annoying. Possible, I think, but it would require auto_param and some future meta code.</p>",
        "id": 278375557,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649462205
    },
    {
        "content": "<p>A gentle ping and a reminder that <a href=\"https://github.com/leanprover-community/mathlib/pull/13150\">#13150</a>, <a href=\"https://github.com/leanprover-community/mathlib/pull/13121\">#13121</a>, and <a href=\"https://github.com/leanprover-community/mathlib/pull/13122\">#13122</a> are still pending reviews.</p>",
        "id": 278675093,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1649760228
    },
    {
        "content": "<p>Some comments and a <code>bors d+</code> on the first.</p>",
        "id": 278681950,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649764720
    },
    {
        "content": "<p>and the second.</p>",
        "id": 278682245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649764828
    },
    {
        "content": "<p>Thank you, Scott!</p>",
        "id": 278683286,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1649765447
    }
]