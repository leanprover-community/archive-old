[
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/pull/12459\">#12459</a> - Add two functions that relate setoid.is_partition and finpartition:</p>\n<ul>\n<li><code>finpartition.of_partition</code></li>\n<li><code> is_partition.of_finpartition</code></li>\n</ul>\n<p>Meanwhile, I had to write a variant  <code>finset.mem_sup'</code>  of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.mem_sup\">docs#finset.mem_sup</a> that does not assume that it works on <code>finset</code>. Probably the two should be merged. I need advice about how.</p>",
        "id": 274248277,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646493024
    },
    {
        "content": "<p>I don't think merging is particularly easy right now, so probably just renaming it to <code>finset.mem_sup_set</code> or similar will do. We should definitely try to solve this, but I don't think it should block your PR.</p>",
        "id": 274278877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646533289
    },
    {
        "content": "<p>I rename it. <br>\nAnother question : I felt I needed to write a third function: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">finpartition.of_finite_partition</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">c.finite</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">setoid.is_partition</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"n\">finpartition</span> <span class=\"o\">(</span><span class=\"n\">finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"bp\">…</span>\n</code></pre></div>\n<p>which converts the partition into a finpartition of finsets. But maybe this should be done otherly, I don't know.</p>",
        "id": 274297514,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646561572
    },
    {
        "content": "<p>What does <code>noncomputable theorem</code> mean to you?</p>",
        "id": 274308622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646576876
    },
    {
        "content": "<p>Is it a rhetorical question?</p>",
        "id": 274317582,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646587116
    },
    {
        "content": "<p>Short answer : I just added the <code>noncomputable</code> adjective to halt VSCode complaining.<br>\nLonger answer : I suspect that I should have introduced the finiteness hypothesis differently. In any case, I had planned to apply this function to some <code>c : set (set α)</code> with <code>hc : setoid.is_partition c</code>, so the question really is how to introduce them. (And, of course, <code>fintype α</code> should imply that one has <code>c.finite</code>, but I did not care proving it here since it would be obvious in the context that I had in mind.)</p>",
        "id": 274317805,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646587405
    },
    {
        "content": "<p>It complained about a theorem?</p>",
        "id": 274318534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646588336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312459.20-.20Relate.20setoid.2Eis_partition.20and.20finpartition/near/274317582\">said</a>:</p>\n<blockquote>\n<p>Is it a rhetorical question?</p>\n</blockquote>\n<p>Yes, the answer is \"that should be a <code>def</code>\", which is an answer the linter will tell (either in CI on github, or after you run `#lint.</p>",
        "id": 274318949,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646588948
    },
    {
        "content": "<p>OK, I see. <br>\nCan you point out somewhere in the doc that explains the difference between <code>def</code> and  <code>lemma</code>?<br>\n(I expected that these words wore synonymous. I had an answer in  a related question I asked yesterday night.)</p>",
        "id": 274319742,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646589921
    },
    {
        "content": "<p>Do you know about Lean's two universes? There is <code>Type</code>, whose types are \"sets\" like the reals and whose terms are \"elements\" like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span>, and there is <code>Prop</code>, whose types are true-false statements and whose terms are their proofs. The terms in Prop don't carry any data and you define those with <code>lemma</code> or <code>theorem</code> (they're the same). All the other things (the statements, sets and elements) carry data and are defined with <code>def</code>.</p>",
        "id": 274320054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646590340
    },
    {
        "content": "<p>This is related to why every provable statement has one proof; my mental model is that Lean forgets the proof so it is indistinguishable from any other proof of the same statement. But you don't want to forget that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>37</mn></mrow><annotation encoding=\"application/x-tex\">x=37</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">37</span></span></span></span>; it's not enough to remember that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> is a real number.</p>",
        "id": 274320161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646590515
    },
    {
        "content": "<p>See also Mario's messages starting at <a href=\"#narrow/stream/113489-new-members/topic/How.20to.20use.20structures.3F/near/274310517\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/How.20to.20use.20structures.3F/near/274310517</a> for the <code>lemma</code>/<code>def</code> distinction (but, of course, the \"<code>lemma</code>/<code>theorem</code> is for proofs\" mental model is perfect in practice).</p>",
        "id": 274320608,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1646591131
    },
    {
        "content": "<p>I had first learnt Type Theory in HOTT, and I tend to forget about proof irrelevance.</p>",
        "id": 274321270,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646591978
    },
    {
        "content": "<p>(Of course, put as many quotes as you wish around “learnt”.)</p>",
        "id": 274321391,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646592140
    }
]