[
    {
        "content": "<p>Eric mentioned that the definition of  <code>finpartition</code> might not have the expected behavior in non atomic lattices. Problem is, I don't know what the expected behavior is, or whether there's even one. Do you expect anything from this definition in the context of non atomic lattices? If so, what? If not, what about we merge this without changing the definition but with verbose TODO about the situation?</p>",
        "id": 258399905,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634747808
    },
    {
        "content": "<p>At any rate I think the meaning would be surprising in your proposed <code>lattice_bot</code> generalization</p>",
        "id": 258405599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634749779
    },
    {
        "content": "<p>I'm now defining <code>def finset.sup_indep (s : finset α) : Prop := ∀ ⦃a⦄, a ∈ s → disjoint a ((s.erase a).sup id)</code></p>",
        "id": 258546982,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634823692
    },
    {
        "content": "<p>I'll PR that first, then see whether it makes <code>finpartition</code> any worse.</p>",
        "id": 258547024,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634823714
    },
    {
        "content": "<p>Note it at least makes it require <code>decidable_eq α</code></p>",
        "id": 258547641,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634823930
    },
    {
        "content": "<p>Is that different to the primed version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.independent\">docs#complete_lattice.independent</a>?</p>",
        "id": 258557295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634827135
    },
    {
        "content": "<p>Oh, maybe we got rid of that</p>",
        "id": 258557345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634827150
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/complete_lattice.set_independent\">docs#complete_lattice.set_independent</a></p>",
        "id": 258557475,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634827194
    },
    {
        "content": "<p>It is, because it uses <code>finset</code> and avoids <code>Sup</code></p>",
        "id": 258570736,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634831664
    },
    {
        "content": "<p>But in spirit that's the same</p>",
        "id": 258570753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634831670
    },
    {
        "content": "<p>I just spent an hour proving the bind operation for my new <code>sup_indep</code>. Very satisfying. I'll probably refactor <a href=\"https://leanprover-community.github.io/mathlib_docs/find/completelattice.set_independent\">docs#completelattice.set_independent</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/completelattice.independent\">docs#completelattice.independent</a> into one thing that takes in indexed sets.</p>",
        "id": 258570938,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634831754
    },
    {
        "content": "<p>I think I am now understanding the correct architecture.</p>",
        "id": 258571028,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634831781
    },
    {
        "content": "<p>Actually, your suggestion really does only make a difference in nondistributive non atomic lattices.</p>",
        "id": 258622146,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634852656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, long story short: your proposed change to the generalization doesn't change anything so long as we don't have <code>lattice_bot</code> (Yakov is working on that)</p>",
        "id": 258622692,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634852928
    },
    {
        "content": "<p>Under the current <code>distrib_lattice_bot</code> assumption, <code>set.pairwise_disjoint</code> and your proposed <code>finset.sup_indep</code> are strictly equivalent. And the counterexample you brought up on Github is nondistributive.</p>",
        "id": 258622999,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1634853088
    },
    {
        "content": "<p>Kind ping</p>",
        "id": 258872682,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635073119
    },
    {
        "content": "<p>I haven't thought about any potential subtleties involved with this. Do we care about computability?</p>",
        "id": 258947271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635162349
    },
    {
        "content": "<p>The PR looks fine to me.</p>",
        "id": 258947282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635162362
    },
    {
        "content": "<p>What's the downside in building finite partitions using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/indexed_partition\">docs#indexed_partition</a> and a fintype instance on the index?</p>",
        "id": 258947668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635162615
    },
    {
        "content": "<p>We're interested into partitons into finsets but <code>indexed_partition</code> is a partition into sets, although it's perfectly possible to generalize.</p>",
        "id": 258953925,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635166334
    },
    {
        "content": "<p>But <code>finite_partition</code> is not a partition <em>into</em> <code>finset</code>s, its a partition into a finite set of not-necessarily-sets</p>",
        "id": 258954705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635166732
    },
    {
        "content": "<p>Yes, precisely. It allows you to do finite partitions into finsets.</p>",
        "id": 258954807,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635166796
    },
    {
        "content": "<p>If you want me to generalize the \"finite partition\" part, I can have a think.</p>",
        "id": 258954926,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635166821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, the problem with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/indexed_partition\">docs#indexed_partition</a> is that it tries to be constructive. If I were to generalize it from <code>set α</code> to an arbitrary <code>distrib_lattice_bot</code>, then I would have to drop <code>some</code> and <code>index</code>.</p>",
        "id": 258959869,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635169114
    },
    {
        "content": "<p>The problem is more that it's atomic, right, and we don't have any typeclasses relating <code>\\mem</code> and <code>\\sup</code></p>",
        "id": 258960351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635169313
    },
    {
        "content": "<p>Yup</p>",
        "id": 258960425,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635169330
    },
    {
        "content": "<p>I think my hesitation here is that <code>fin_partition</code> seems to have quite a different design to all the partition stuff so far, and it's not clear which bits are \"we designed the other API wrong\" and \"we need this special case just because we care about finiteness\"</p>",
        "id": 258960579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635169405
    },
    {
        "content": "<p>I can probably generalize <code>finpartition</code> so that you can talk about infinite partitions reusing some of the design of <code>indexed_partition</code>. The latter should probably be called <code>indexed_set_partition</code> because that's what it is.</p>",
        "id": 258960886,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635169534
    },
    {
        "content": "<p>Another thing that comes to mind, is that if we had <a href=\"https://github.com/leanprover-community/mathlib/issues/7123\">#7123</a> you could likely replace <code>finset.sup</code> with <code>Sup</code></p>",
        "id": 258961384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635169729
    },
    {
        "content": "<p>Maybe yeah</p>",
        "id": 258962267,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635170122
    },
    {
        "content": "<p>Actually, to generalize to an indexed partition, I need <a href=\"https://github.com/leanprover-community/mathlib/issues/9898\">#9898</a>. How handy is it that the PR is already open and reviewed! <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 258962405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635170174
    },
    {
        "content": "<p>Uh, I just noticed that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sup_indep\">docs#finset.sup_indep</a> requires <code>decidable_eq ι</code> while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Supremum independence of finite sets. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">sup_indep'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">t</span><span class=\"o\">⦄,</span> <span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">disjoint</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t.sup</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>doesn't</p>",
        "id": 261526964,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1636995906
    },
    {
        "content": "<p>(I just noticed some of the earlier discussion about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/indexed_partition\">docs#indexed_partition</a>.  One problem with it is that it has the wrong extensionality properties due to the <code>some</code> field.  If it were like <code>some : Π (i : ι) → trunc (s i)</code> instead things would be different.)</p>",
        "id": 261531140,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636997608
    },
    {
        "content": "<p>(But not completely different, because indexed partitions and partitions are different concepts.)</p>",
        "id": 261531470,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1636997726
    },
    {
        "content": "<p>Could this finally be merged? Here's what changed since the last review:</p>\n<ul>\n<li><code>finset.sup_indep</code> replaced <code>set.pairwise_disjoint</code></li>\n<li>Bhavik and I decided to stick to non indexed partitions, because it turns out that we can put a lattice structure on <code>finpartition</code> and that this is relevant to <code>atomise</code>: <code>atomise</code> is the infimum of a bunch of simple partitions. Further, <code>finpartition</code> is a cograded order with grade function <code>P.parts.card - 1</code>. To showcase this, we provided the <code>semilattice_inf</code> instance. The <code>semilattice_sup</code> one is a pain, but can be done.</li>\n</ul>",
        "id": 270963296,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644232607
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 270963310,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644232614
    },
    {
        "content": "<p>If you want to have a look at the indexed version for some reason, it's over at <a href=\"https://github.com/leanprover-community/mathlib/tree/finpartition_index\">branch#finpartition_index</a></p>",
        "id": 270964356,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644233283
    },
    {
        "content": "<p>Did <code>sup_indep.sigma</code> and <code>sup_indep.product</code> from the indexed branch end up merged elsewhere?</p>",
        "id": 270969554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644236427
    },
    {
        "content": "<p>I think not. Do you want me to add them to that PR?</p>",
        "id": 270970150,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644236771
    },
    {
        "content": "<p>A separate PR would probably make more sense if you're not using them right now. But it would be a shame to lose them</p>",
        "id": 270971051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644237321
    },
    {
        "content": "<p>A separate PR it is!</p>",
        "id": 270971168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644237369
    },
    {
        "content": "<p>A question about the definition - what would happen if instead of requiring <code>(not_bot_mem : ⊥ ∉ parts)</code> you required <code>(bot_mem : ⊥ ∈ parts)</code>? That would remove the need for <code>of_erase</code>, and things like <code>inf</code> would have definitionally simpler parts.</p>",
        "id": 270971745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644237692
    },
    {
        "content": "<p>We had this at some point, but it turns out that it messes stuff later. Do you remember what, <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>? At least, it means that<br>\n<code>(P.bind Q).parts.card = 1 + ∑ A in P.parts.attach, (Q _ A.2).parts.card - 1</code> instead of <code>(P.bind Q).parts.card = ∑ A in P.parts.attach, (Q _ A.2).parts.card</code>.</p>",
        "id": 270972120,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644237852
    },
    {
        "content": "<p>We had this at some point, but it turns out that it messes stuff later. Do you remember what, <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>? At least, it means that<br>\n<code>(P.bind Q).parts.card = 1 + ∑ A in P.parts.attach, (Q _ A.2).parts.card - 1</code> instead of <code>(P.bind Q).parts.card = ∑ A in P.parts.attach, (Q _ A.2).parts.card</code>.</p>",
        "id": 270972136,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644237862
    },
    {
        "content": "<p>I don't entirely remember the specifics but I do remember that we tried this and in combinatorial applications it turned out worse to work with, even though the immediate API like <code>of_erase</code> becomes slightly nicer (though it would need to be replaced by something which inserts empty).</p>",
        "id": 270972416,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1644237989
    },
    {
        "content": "<p>A comment in the module summarizing whatever you still remember about that design decision would be great!</p>",
        "id": 270973137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644238331
    },
    {
        "content": "<p>Will do! We're both working on a paper for ITP which (fundamentally) uses this new structure already so it might take a couple of days, but it should be fresh enough :)</p>",
        "id": 270976209,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1644239922
    },
    {
        "content": "<p>Just added a little batch of new lemmas.</p>",
        "id": 271264554,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644407042
    },
    {
        "content": "<p>Ping! I swear this will be a merge by exhaustion.</p>",
        "id": 271589830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644592244
    },
    {
        "content": "<p>Could <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> or <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> have a look, maybe?</p>",
        "id": 271693867,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644679733
    }
]