[
    {
        "content": "<p>I would be very grateful if someone could point in some direction as to how <a href=\"https://github.com/leanprover-community/mathlib/pull/3733/files\">my edits</a> caused <a href=\"https://github.com/leanprover-community/mathlib/runs/968237151\">this error</a> in a completely unrelated file</p>",
        "id": 206507513,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597090224
    },
    {
        "content": "<p>I don't have an explanation, but I fixed the lemma, by providing the argument that was left implicit.</p>",
        "id": 206509696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597091540
    },
    {
        "content": "<p>Looking at the PR without looking at the error, the only one of your changes that could affect already working code is</p>\n<div class=\"codehilite\"><pre><span></span><code> <span class=\"kn\">instance</span> <span class=\"n\">linear_order</span><span class=\"bp\">.</span><span class=\"n\">to_directed_order</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">directed_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 206515884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597094954
    },
    {
        "content": "<p>and the error has something to do with le so that seems consistent</p>",
        "id": 206515940,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597094995
    },
    {
        "content": "<p>I'm guessing that it is now finding the path <code>decidable_linear_order -&gt; directed_order -&gt; preorder</code> instead of whatever it was doing before, and now you won't find a subterm of the proof that proves e.g. <code>linear_order -&gt; preorder</code></p>",
        "id": 206516095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597095081
    },
    {
        "content": "<p>Is this explanation consistent with the fact that providing the explicit argument of <code>zero_le</code> (that were initially <code>_</code>) is enough to fix the proof?</p>",
        "id": 206516314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597095226
    },
    {
        "content": "<p>(see my commit on this branch)</p>",
        "id": 206516331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1597095240
    },
    {
        "content": "<p>My guess is that it is using unification to infer the argument from the typeclass that was provided, which is a bit weird as it involves looking at subterms of the provided typeclass proof, which might differ even for defeq proofs</p>",
        "id": 206518232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597096474
    },
    {
        "content": "<p>In short, in the error</p>\n<div class=\"codehilite\"><pre><span></span><code>  <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I think the first le is something like <code>D.of_B ?</code> and the second one is <code>D.of_C (C.of_A ...)</code></p>",
        "id": 206518371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597096567
    },
    {
        "content": "<p>if the goal was presented as <code>0 ≤ 0 + a</code> then lean could probably figure it out, but with definition unfolding in the mix it's probably not sure when to stop, especially when we don't even know what type we are matching</p>",
        "id": 206518461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597096652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thanks for your insights; how should I approach this?</p>",
        "id": 206520371,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597098088
    },
    {
        "content": "<p>In this case, I don't see a problem with patrick's fix</p>",
        "id": 206520384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597098105
    },
    {
        "content": "<p>I don't know if there are issues with the instance but it seems fine</p>",
        "id": 206520441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597098134
    },
    {
        "content": "<p>in a sense, the original code was more brittle than intended, it was relying on a property of the typeclass system it had no business doing</p>",
        "id": 206520511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597098213
    },
    {
        "content": "<p>there's a new issue: before this PR, there's only one way out of <code>linear_order</code>, which is <code>DLO &lt;-&gt; LO -&gt; PO -&gt; preorder</code>, so it did not matter that <code>DLO &lt;-&gt; LO</code> is a loop, because if you get there, you are guaranteed to find the instance; but now we have a new pathway <code>LO -&gt; DO -&gt; preorder</code>, so if <code>X</code> is a partial order but not a directed order, then we might end up in the new pathway and get stuck in <code>DLO &lt;-&gt; LO</code></p>",
        "id": 206551185,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597134481
    },
    {
        "content": "<p>TLDR: <code>linear order -&gt; partial order -&gt; preorder</code> and <code>linear order -&gt; directed order -&gt; preorder</code> forms a diamond</p>",
        "id": 206551252,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597134516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you point me in some direction?</p>",
        "id": 206551295,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597134565
    },
    {
        "content": "<p>maybe remove the pathway <code>linear order -&gt; directed order</code>?</p>",
        "id": 206551310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597134588
    },
    {
        "content": "<p>loops are bad</p>",
        "id": 206551391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597134623
    },
    {
        "content": "<p>right, but it didn't matter in the past because we didn't have diamonds</p>",
        "id": 206551415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597134655
    },
    {
        "content": "<p>so what should I do?</p>",
        "id": 206551429,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597134666
    },
    {
        "content": "<p>loops are bad, kill the loop</p>",
        "id": 206551441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597134679
    },
    {
        "content": "<p>ok thanks</p>",
        "id": 206551634,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597134833
    },
    {
        "content": "<p>(I didn't realize that the loop was caused by a local instance, I thought it was global)</p>",
        "id": 206551705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597134873
    }
]