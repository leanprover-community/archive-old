[
    {
        "content": "<p>Dear All,</p>\n<p>can I interest anyone in reviewing  <a href=\"https://github.com/leanprover-community/mathlib/pull/16127\">#16127</a>?  It defines the lexicographic ordering on finsupps.  The actual order has been rewritten by Eric to work decidably.  My remaining contribution are the 4 covariant instances at the bottom.</p>\n<p>This PR is a step in proving that (some) <code>add_monoid_algebra</code>s have no non-trivial zero-divisors.  In particular, this will work for <code>mv_polynomial</code>s (see <a href=\"https://github.com/leanprover-community/mathlib/pull/15983\">#15983</a> for the zero-divisor stuff and <a href=\"https://github.com/leanprover-community/mathlib/pull/16157\">#16157</a> to bring everything together).</p>\n<p>Thanks!</p>",
        "id": 294845826,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661253789
    },
    {
        "content": "<p>Don't we already have no zero divisors for mv_polynomial?</p>",
        "id": 294890089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661267991
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.is_domain\">docs#mv_polynomial.is_domain</a>?</p>",
        "id": 294890170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661268006
    },
    {
        "content": "<p>I guess that has commutativity and nontriviality preconditions that you don't need, but it might generalize trivially</p>",
        "id": 294890330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661268065
    },
    {
        "content": "<p>Yes, for polynomials it already is there in the guise of <code>is_domain</code>.  However, for more general <code>add_monoid_algebra</code>s it is not there.</p>\n<p>Moreover, even though it is not my main concern, commutativity of the semiring is also not necessary (but may be required for <code>mv_polynomial</code>s?).</p>\n<p>The version in this PR also applies to <code>laurent_polynomial</code>s, as <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> reminded me.</p>",
        "id": 294895590,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661269612
    },
    {
        "content": "<p>In fact, one of the PRs linked above should remove the then unnecessary instances.</p>",
        "id": 294897299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661270066
    },
    {
        "content": "<p>I just checked: currently, the <code>is_domain</code> instance on <code>mv_polynomial</code>s assumes <code>comm_ring</code>, whereas the one in the PR applies to <code>semiring</code>s.  Note that <code>mv_polynomial</code> assumes the ground semiring to be commutative, so the gain here is simply <code>comm_ring</code> to <code>comm_semiring</code>.  I have not tracked down where the <code>ring</code> vs <code>semiring</code> assumption sneaks in: it is possible that it could be avoided in the proof that mathlib currently has.</p>\n<p>Still, I view the fact that the new proof is independent of the one for <code>mv_polynomial</code>s, it is strictly more general and also applies to <code>laurent_polynomial</code>s like all positive facts!  We also get to remove the older instance and some of the auxiliary lemmas leading up to it, which is what the last PR in the sequence does.</p>",
        "id": 294938849,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661285256
    },
    {
        "content": "<p>I went ahead and golfed the <code>no_zero_divisors</code> instance on polynomials as well!</p>",
        "id": 294990782,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661324847
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib/pull/16226\">#16226</a> to rewrite <code>mv_polynomial.is_domain</code> to <code>mv_polynomial.no_zero_divisors</code></p>",
        "id": 295004192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661331173
    },
    {
        "content": "<p>Do you then thing that if the <code>no_zero_divisors</code> instance on <code>add_monoid_algebra</code> gets merged, then it should not be used to golf the analogous instance on <code>mv_polynomial</code>s?</p>\n<p>Also, this conversation has shifted from <code>finsupp.lex</code> to <code>no_zero_divisors</code>.  Should I create a new thread?</p>",
        "id": 295004544,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661331343
    },
    {
        "content": "<p>No, it definitely should be used to golf the instance on <code>mv_polynomial</code>!</p>",
        "id": 295004692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661331395
    },
    {
        "content": "<p>I'm just curious why you need this lex stuff for the generalization when we didn't need it for the original</p>",
        "id": 295004721,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661331413
    },
    {
        "content": "<p>(which isn't to say we shouldn't have the lex stuff)</p>",
        "id": 295004770,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661331442
    },
    {
        "content": "<p>Ah, <code>add_monoid_algebra</code>s do not satisfy <code>no_zero_divisors</code> in general, but they do when the grading type is linearly ordered.</p>",
        "id": 295004811,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661331460
    },
    {
        "content": "<p>And, <code>(mv_/laurent)polynomial</code>s fit this.  The <code>mv_polynomial</code>s using the <code>finsupp.lex</code> stuff.</p>",
        "id": 295004915,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661331499
    },
    {
        "content": "<p>So, to latch onto the <code>no_zero_divisors</code> instance on <code>mv_polynomial</code> I want to get a linear order on the grading type, hence the <code>finsupp.lex</code>.</p>",
        "id": 295005024,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661331554
    },
    {
        "content": "<p>(I have a meeting now: will be back once it is over!)</p>",
        "id": 295005051,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661331570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2316127.20finsupp.2Elex/near/295004811\">said</a>:</p>\n<blockquote>\n<p>Ah, <code>add_monoid_algebra</code>s do not satisfy <code>no_zero_divisors</code> in general, but they do when the grading type is linearly ordered.</p>\n</blockquote>\n<p>What's the full set of conditions you were able to prove the result under? Presumably the order needs to interact with the algebra in some way?</p>",
        "id": 295005587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661331813
    },
    {
        "content": "<p>Eric, here is an answer: on the branch <code>adomani_ama_nzd</code> this works and has explicit typeclasses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.monoid_algebra.no_zero_divisors</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">no_zero_divisors</span> <span class=\"n\">R</span><span class=\"o\">]</span>  <span class=\"c1\">-- no further assumptions on `R`</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">no_zero_divisors</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_algebra.no_zero_divisors</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Î±</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">N</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">N</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">&lt;</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">no_zero_divisors</span> <span class=\"o\">(</span><span class=\"n\">add_monoid_algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">Î±</span> <span class=\"bp\">ââ</span> <span class=\"n\">N</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_algebra.finsupp_no_zero_divisors</span>\n</code></pre></div>",
        "id": 295019825,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661337948
    },
    {
        "content": "<p>If the question was about whether I know a \"closed form iff\" for deciding which <code>add_monoid_algebra</code>s satisfy <code>no_zero_divisors</code>, then the answer is that I do not know of a non-tautological characterisation.</p>\n<p>I suspect that the typeclasses above cut out a portion of the available cases, but I also suspect that there will be <code>add_monoid_algebra</code>s that do not satisfy those requirements, but that happen to only have zero as a zero-divisor.</p>",
        "id": 295022980,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661339253
    },
    {
        "content": "<p>Dear All,</p>\n<p>can I interest anyone in reviewing <a href=\"https://github.com/leanprover-community/mathlib/pull/16127\">#16127</a>? It defines the lexicographic ordering on finsupps. The actual order has been rewritten by Eric to work decidably. My remaining contribution are the 4 covariant instances at the bottom.</p>\n<p>Thanks!</p>\n<p>PS  If you are interested in discussing the application of this PR to <code>add_monoid_algebra</code>s, I am very happy about this and it is my motivation behind this PR!  The discussion is <a href=\"#narrow/stream/144837-PR-reviews/topic/.2316157.20no-zero-divisors.20in.20add_monoid_algebras\">here</a>.</p>",
        "id": 295025398,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661340440
    },
    {
        "content": "<p>Dear All,</p>\n<p>are there any further comments on this PR?  I personally find that it is ready!  <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 296335624,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1661955849
    }
]