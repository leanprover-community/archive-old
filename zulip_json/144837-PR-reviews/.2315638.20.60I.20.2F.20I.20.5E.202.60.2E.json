[
    {
        "content": "<p>I'm not sure how to solve the lint error \"try_for tactic failed, timeout\". Following the tips in the error message, i tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">I.cotangent</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">â†‘</span><span class=\"o\">(</span><span class=\"n\">I.cotangent_equiv_ideal</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">I.cotangent_to_quotient_square</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">try_for</span> <span class=\"mi\">1</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">ideal.cotangent_equiv_ideal_apply</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">single_pass</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In the same file, but it does not give any errors, and in <code>all.sh</code>, it gives \"try_for timeout, using sorry\" with no trace outputs.<br>\nRemoving <code>try_for</code> in the latter case gives \"excessive memory consumption detected at 'expression traversal' (potential solution: increase memory consumption threshold)\". I don't know if this is indicating a problem in my PR or a problem in my crappy laptop though.</p>",
        "id": 291465272,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659236782
    },
    {
        "content": "<p>Two solutions found by searching <code>simp_nf</code> in the repo:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/806bbb0132ba63b93d5edbe4789ea226f8329979/src/algebra/monoid_algebra/basic.lean#L1163\">https://github.com/leanprover-community/mathlib/blob/806bbb0132ba63b93d5edbe4789ea226f8329979/src/algebra/monoid_algebra/basic.lean#L1163</a></p>\n<blockquote>\n<p>-- This should be a <code>@[simp]</code> lemma, but the simp_nf linter times out if we add this.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/13ff898b0eee75d3cc75d1c06a491720eaaf911d/src/category_theory/functor/left_derived.lean#L139\">https://github.com/leanprover-community/mathlib/blob/13ff898b0eee75d3cc75d1c06a491720eaaf911d/src/category_theory/functor/left_derived.lean#L139</a></p>\n<blockquote>\n<p>-- The <code>simp_nf</code> linter times out here, so we disable it.</p>\n</blockquote>",
        "id": 291468222,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659240975
    },
    {
        "content": "<p>This error suggests you have uncovered a loop making <code>simp</code> run forever (I think in particular, causing <code>simp</code> to try to generate an infinite term). I can't tell where the loop comes from, but I haven't really kept up with this part of the library either...</p>",
        "id": 291569509,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1659358109
    }
]