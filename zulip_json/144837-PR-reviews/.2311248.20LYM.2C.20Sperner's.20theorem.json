[
    {
        "content": "<p>Combinatorics again! Some machinery can be generalized to grade orders (which we don't yet have), but Bhavik thinks that we should have this already, as generalizing might take some time and won't change the gist of it.<br>\nWhat do combinatorialists out there think?</p>",
        "id": 266991813,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641417167
    },
    {
        "content": "<p>To be clear, my view is that we should try and merge this PR, since it proves valuable theorems which don't generalise (for example, <a href=\"https://en.wikipedia.org/wiki/Sperner%27s_theorem\">https://en.wikipedia.org/wiki/Sperner%27s_theorem</a>), and the proposed generalisation should be a TODO.</p>",
        "id": 266993184,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641417924
    },
    {
        "content": "<p>Yes, I should really insist that the machinery generalizes, but not the theorems. And many beginners try to prove those theorems because we don't have them in mathlib.</p>",
        "id": 266993344,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641418015
    },
    {
        "content": "<p>I should probably add that I wrote the first (and second) versions of most of these files as one of my earliest Lean projects, so I'd prefer if another maintainer and/or combinatorialist could add their thoughts</p>",
        "id": 266993783,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641418290
    },
    {
        "content": "<p>And I haven't done a huge amount of relooking (as opposed to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_antichain\">docs#is_antichain</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uv.compress\">docs#uv.compress</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.slice\">docs#finset.slice</a>), precisely because the relooking I want is the generalization to graded orders (but I don't care much when it happens).</p>",
        "id": 266994059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641418458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> please add the TODO's from the PR page to the files, so that they are easier to find.</p>",
        "id": 267032370,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641453807
    },
    {
        "content": "<p>It's done already <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 267041066,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641461841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311248.20LYM.2C.20Sperner's.20theorem/near/266993184\">said</a>:</p>\n<blockquote>\n<p>To be clear, my view is that we should try and merge this PR, since it proves valuable theorems which don't generalise (for example, <a href=\"https://en.wikipedia.org/wiki/Sperner%27s_theorem\">https://en.wikipedia.org/wiki/Sperner%27s_theorem</a>), and the proposed generalisation should be a TODO.</p>\n</blockquote>\n<p>I think the content in this PR generalises to graded orders satisfying a certain regularity property. Namely for <code>x</code> in layer <code>i</code>, the number of elements 'covered' by <code>x</code> (and the number of elements which cover <code>x</code>) should depend only on <code>i</code> and not on <code>x</code>. But we don't need to work in this generality.</p>",
        "id": 267069439,
        "sender_full_name": "David Wärn",
        "timestamp": 1641480919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311248.20LYM.2C.20Sperner's.20theorem/near/267069439\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311248.20LYM.2C.20Sperner's.20theorem/near/266993184\">said</a>:</p>\n<blockquote>\n<p>To be clear, my view is that we should try and merge this PR, since it proves valuable theorems which don't generalise (for example, <a href=\"https://en.wikipedia.org/wiki/Sperner%27s_theorem\">https://en.wikipedia.org/wiki/Sperner%27s_theorem</a>), and the proposed generalisation should be a TODO.</p>\n</blockquote>\n<p>I think the content in this PR generalises to graded orders satisfying a certain regularity property. Namely for <code>x</code> in layer <code>i</code>, the number of elements 'covered' by <code>x</code> (and the number of elements which cover <code>x</code>) should depend only on <code>i</code> and not on <code>x</code>. But we don't need to work in this generality.</p>\n</blockquote>\n<p>Agreed on both counts! But I don't know of a version of Sperner's theorem which can be proved in this generality?</p>",
        "id": 267086121,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641488784
    },
    {
        "content": "<p>The equality case is tricky, but \"largest layer is a largest antichain\" holds with the same proof, right?</p>",
        "id": 267088725,
        "sender_full_name": "David Wärn",
        "timestamp": 1641489995
    },
    {
        "content": "<p>I'm not sure the proof via LYM still goes through? I could be wrong. I certainly believe the 'usual' proof via Hall works</p>",
        "id": 267096844,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1641494026
    },
    {
        "content": "<p>Here are graded orders: <a href=\"https://github.com/leanprover-community/mathlib/pull/11308\">#11308</a></p>",
        "id": 267291155,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641641287
    },
    {
        "content": "<p>I'm defining Whitney numbers and Sperner orders now, but that requires refactoring <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.slice\">docs#finset.slice</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sized\">docs#set.sized</a></p>",
        "id": 267291179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641641374
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/polytopes/src/order/polytope/sperner.lean\">branch#polytopes/src/order/polytope/sperner.lean</a> now contains a draft of Sperner orders and Whitney numbers. In the same branch, I generalized <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sized\">docs#set.sized</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.slice\">docs#finset.slice</a> (this was rather straightforward). However, I don't have such a nice generalization of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.shadow\">docs#finset.shadow</a> (but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.up_shadow\">docs#finset.up_shadow</a> should be fine. Nat subtraction kicking in...).<br>\nAs Bhavik said, it's gonna take a while if we want to state LYM and Sperner in that generality, but it can be done if you really want me to.</p>",
        "id": 267352224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641726029
    },
    {
        "content": "<p>Could anyone review <a href=\"https://github.com/leanprover-community/mathlib/pull/11397\">#11397</a> (+87, -9)? It's the PR currently blocking <a href=\"https://github.com/leanprover-community/mathlib/pull/11248\">#11248</a>.</p>",
        "id": 268531690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642595609
    },
    {
        "content": "<p>I think you mean review <a href=\"https://github.com/leanprover-community/mathlib/pull/11397\">#11397</a>, right?</p>",
        "id": 268532087,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1642595808
    },
    {
        "content": "<p>I'll take a look now but it's possible I'll decide I need to let someone else make a call.</p>",
        "id": 268532163,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1642595859
    },
    {
        "content": "<p>Oh yeah of course! Buffer leak.</p>",
        "id": 268532164,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642595859
    },
    {
        "content": "<p>Update: Ready for review now!</p>",
        "id": 272232586,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645089548
    },
    {
        "content": "<p>A few proofs could save one line with a better Ixx big operators API, and I'm working on it, but it's not worth the wait IMO.</p>",
        "id": 272232708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645089615
    },
    {
        "content": "<p>Bump on this too, combinatorialists.</p>",
        "id": 272692472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645452394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Would you mind taking a look at this when you have a chance?</p>",
        "id": 272975241,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1645634736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, what's the reasoning behind putting them in the <code>finset</code> namespace? There are only three LYM inequalities, local upward, local downward, the plain one, and all are about <code>finset</code>. Same goes for Sperner's Theorem.</p>",
        "id": 273010596,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645649952
    },
    {
        "content": "<p>They're already in the <code>finset</code> namespace, right? The documentation should reflect this so the docgen links work correctly.</p>",
        "id": 273011022,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645650123
    },
    {
        "content": "<p>Oh <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 273011316,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645650275
    },
    {
        "content": "<p>What would be the mathlibified name? Those are named theorems which are rather hard to abbreviate.</p>",
        "id": 273011518,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645650384
    },
    {
        "content": "<p>If anyone has any ideas, here are some lemmas whose names might stand to be mathlibified:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">local_lym</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">𝒜</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝒜</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sized</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">𝒜.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"bp\">∂𝒜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lubell_yamamoto_meshalkin</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">𝒜</span> <span class=\"o\">:</span> <span class=\"n\">is_antichain</span> <span class=\"o\">(</span><span class=\"bp\">⊆</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝒜</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">r</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"bp\">𝒜</span> <span class=\"bp\">#</span> <span class=\"n\">r</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">r</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 273011976,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645650641
    },
    {
        "content": "<p>The little <code>∂</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.shadow\">docs#finset.shadow</a></p>",
        "id": 273012005,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645650666
    },
    {
        "content": "<p>do those chooses not cancel out in any relevant way in local_lym?</p>",
        "id": 273012098,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645650718
    },
    {
        "content": "<p>They do. That's why we have <code>local_lym'</code> as well.</p>",
        "id": 273012184,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645650754
    },
    {
        "content": "<p>Oh, forgot to add that one. Just included it.</p>",
        "id": 273012236,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645650793
    },
    {
        "content": "<p>Mindlessly coming up with some names for the three of them:</p>\n<p><code>card_mul_le_card_shadow_mul</code></p>\n<p><code>card_div_choose_le_card_shadow_div_choose</code></p>\n<p><code>sum_card_slice_div_choose_le_one</code></p>",
        "id": 273012368,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1645650852
    },
    {
        "content": "<p>Yeah, those are fine</p>",
        "id": 273012571,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645650995
    },
    {
        "content": "<p>maybe <code>finset_family.card_sized_mul_le_card_shadow_mul</code> for the first one, which is a bit of a mouthful... second one presumably can be stay this way, maybe private? as I assume it's not useful except in the final lym proof... and then the last one could be <code>finset_family.sum_card_sized_div_choose_le_one</code>??? maybe you could make the namespace be instead for dot notation?</p>",
        "id": 273012577,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645650999
    },
    {
        "content": "<p>I took Kyle's names.</p>",
        "id": 273014768,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645652263
    },
    {
        "content": "<p>Local LYM and LYM are the 'standard' maths names for these things, so it should be in a docstring at least, but I'm totally okay with Kyle's names otherwise</p>",
        "id": 273014854,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1645652291
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 273674131,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646154312
    },
    {
        "content": "<p>I don't think anyone else is going to review this, <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span></p>",
        "id": 273674166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646154328
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 273676305,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646155069
    }
]