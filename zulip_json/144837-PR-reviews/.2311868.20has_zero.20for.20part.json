[
    {
        "content": "<p>FIlling out <a href=\"https://github.com/leanprover-community/mathlib/pull/11868\">#11868</a> I wrote an instance of <code>has_zero</code> for <code>part</code>:</p>\n<p><code>instance [has_zero α] : has_zero (part α) := { zero := pure 0 }</code></p>\n<p>But this caused an error in a later file, <a href=\"https://github.com/leanprover-community/mathlib/runs/5081600261?check_suite_focus=true\">see here</a>. The first broken lemma is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.partrec'.vec.prim\">docs#nat.partrec'.vec.prim</a>, and when I try to transcribe the original proof into proof mode I get the error below</p>\n<p>I'm not familiar with all the class instances around coercions, but I assume this is some kind of diamond. How should I handle this? Should this instance be removed altogether? Should I just get rid of it locally?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">nat.partrec'</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pfun</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pfun</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe_base</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pfun</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pfun.has_coe</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">nat</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">nat.partrec'</span> <span class=\"n\">n</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">coe</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">part</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lift_base</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">part</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lift_pi_range</span> <span class=\"o\">(</span><span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">part</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n                <span class=\"bp\">@</span><span class=\"n\">coe_to_lift</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">part</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nat.cast_coe</span> <span class=\"o\">(</span><span class=\"n\">part</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">part.has_zero</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">part.has_one</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_one</span><span class=\"o\">)</span>\n                     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">part.has_add</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_add</span><span class=\"o\">)))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vector</span> <span class=\"n\">nat</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nth</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 270871101,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1644125608
    },
    {
        "content": "<p>You apparently added more than just 0, the error messages reference has_one and has_add as well</p>",
        "id": 270872998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644128235
    },
    {
        "content": "<p>Adding <code>0, 1, +</code> to <code>part</code> means that the <code>nat.cast</code> coe will trigger from <code>nat -&gt; part nat</code>, which causes a diamond with the coe from <code>A -&gt; B</code> to <code>A -&gt;. B</code></p>",
        "id": 270873064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644128314
    },
    {
        "content": "<p>If you continue working on <code>part</code>, I should make you aware of <a href=\"https://github.com/leanprover-community/mathlib/pull/11865\">#11865</a></p>",
        "id": 270894834,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644160646
    },
    {
        "content": "<p>Ok cool. Right now I've resolved the diamond I had by <code>local attribute [-instance] part.has_zero</code> in halting.lean. I'll merge <code>pfun_comp</code> into my branch and check there are no conflicts.</p>",
        "id": 270918266,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1644190624
    }
]