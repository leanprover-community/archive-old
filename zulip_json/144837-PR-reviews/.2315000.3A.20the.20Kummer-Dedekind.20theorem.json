[
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15000\">#15000</a> is now (almost, modulo moving some results from one file to another) ready for review, if someone is willing to have a look at it. </p>\n<p>The proof of the last lemma in <code>ring_theory.kummer_dedekind</code> is broken because of a <code>motive is not type correct</code> error on the last line, and I haven't found any fix, so any fixes/advice  would be more than welcome!</p>",
        "id": 297962823,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1662726977
    },
    {
        "content": "<p>There is a long line error <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 297962977,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662727038
    },
    {
        "content": "<p>Just notice that, I'll fix it now <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 297963069,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1662727073
    },
    {
        "content": "<p>done</p>",
        "id": 297963257,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1662727132
    },
    {
        "content": "<p>i suggested a fix for the motive issue</p>",
        "id": 297965855,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1662728042
    },
    {
        "content": "<p>I've left a couple of comments, but I think you can open another preliminary PR.</p>",
        "id": 297966571,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1662728260
    },
    {
        "content": "<p>Thanks for the review and for catching all the style errors I had missed <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 297982491,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1662732655
    },
    {
        "content": "<p>I've split some of the stuff in <a href=\"https://github.com/leanprover-community/mathlib/pull/15000\">#15000</a> into two other preliminary PRs : </p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/16450\">#16450</a> which contains the stuff about <code>adjoin_root</code></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/pull/16455\">#16455</a> which constructs part of the map for the Dedekind-Kummer theorem</li>\n</ul>",
        "id": 298238906,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1662895950
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15000\">#15000</a> should be ready for another review - I'm just waiting to see if it builds, since I modified some files up the hierarchy</p>",
        "id": 299146064,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663329906
    },
    {
        "content": "<p>I've made a couple of changes on the statements on the main theorems, since some of  assumptions weren't needed, but nothing substantial</p>",
        "id": 299146212,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663329956
    },
    {
        "content": "<p>It looks essentially ready to go for me, but I think it's better to wait for a quick look by someones else (just because we reserved the PR number 15000...). Thanks for this nice result!</p>",
        "id": 299147535,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663330441
    },
    {
        "content": "<p>Thanks for the review! <br>\nAnd my pleasure :D</p>",
        "id": 299153806,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663332730
    },
    {
        "content": "<p>Next step will be extending this to the general statement with conductors, which shouldn't be too bad</p>",
        "id": 299153968,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663332810
    },
    {
        "content": "<p>I'm having a small issue with the linter, which is telling me that the following instance is problematic </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.dedekind_domain.ideal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ideal</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">is_maximal</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">((</span><span class=\"n\">ideal.quotient.maximal_ideal_iff_is_field_quotient</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hI</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_field</span>\n</code></pre></div>",
        "id": 299190175,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663343595
    },
    {
        "content": "<p>The error message is <code>These instances contain one or more declarations that are not instances and are also not marked\n</code>@[reducible]<code>. This means that type-class inference cannot unfold these declarations, which might mean that type-class inference cannot infer that two instances are definitionally equal. This can cause unexpected errors when this class occurs as an *argument* to a type-class problem. See note [reducible non-instances]. -/\n#check @kummer_dedekind.has_quotient.quotient.field /- This instance contains the declarations [is_field.to_field], which are semireducible non-instances.</code></p>",
        "id": 299190398,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663343643
    },
    {
        "content": "<p>Does anyone have advice on how to fix this?</p>",
        "id": 299190506,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663343672
    },
    {
        "content": "<p>I tried adding <code>@[reducible]</code> in front of the instance, but that didn't work</p>",
        "id": 299190691,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663343716
    },
    {
        "content": "<p>It is possible that <code>@[reducible] on </code>is_field.to_field` would fix this, but I do not know if it would create problems elsewhere...</p>",
        "id": 299191506,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1663343896
    },
    {
        "content": "<p>I'll try and see if that works</p>",
        "id": 299191914,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663344012
    },
    {
        "content": "<p>I guess you're meant to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal.quotient.field\">docs#ideal.quotient.field</a>, but why isn't that triggering automatically in this case?</p>",
        "id": 299192738,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663344229
    },
    {
        "content": "<p>Oh I wasn't aware of that instance, but I'm not sure why it wasn't triggering automatically</p>",
        "id": 299193853,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663344505
    },
    {
        "content": "<p>It seems that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">hI</span> <span class=\"o\">:</span> <span class=\"n\">is_maximal</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>was a bad instance in the first place</p>",
        "id": 299195638,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663344988
    },
    {
        "content": "<p>i'm mildly confused how that's different that the instance that I linked, which seems to be fine.  apart from the extra <code>is_domain R</code>, of course</p>",
        "id": 299196092,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663345141
    },
    {
        "content": "<p>I think the difference is that the one already on mathlib doesn't use <code>is_field.to_field</code>, which was causing my linter problems</p>",
        "id": 299196451,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663345252
    },
    {
        "content": "<p>Is there an idiomatic way of defining a temporary instance in a file? I need <code>field (R ⧸ I)</code> to define <br>\n<code>normalized_factors_map_equiv_normalized_factors_min_poly_mk</code></p>",
        "id": 299196501,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663345265
    },
    {
        "content": "<p>So something a bit like <code>letI</code> for outside of tactic mode?</p>",
        "id": 299196595,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663345301
    },
    {
        "content": "<p><code>def foo</code> and then <code>local attribute [instance] foo</code></p>",
        "id": 299196788,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663345355
    },
    {
        "content": "<p>Ah great, thanks a lot!</p>",
        "id": 299196892,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1663345387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2315000.3A.20the.20Kummer-Dedekind.20theorem/near/299196788\">said</a>:</p>\n<blockquote>\n<p><code>def foo</code> and then <code>local attribute [instance] foo</code></p>\n</blockquote>\n<p>It will only be an instance in the same section, IIRC.</p>",
        "id": 299197783,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663345684
    }
]