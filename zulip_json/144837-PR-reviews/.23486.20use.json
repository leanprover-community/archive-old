[
    {
        "content": "<p>Okay, I had a few moments to think about this. Here's a short solution using <code>fconstructor</code> that will handle multi-argument constructors and nested single-arg constructors together, like <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wanted. I'm not quite sure about the failure conditions though. This will fail if you give it too many arguments, which I think is correct. It will succeed if you give it too few arguments, potentially leaving you in the middle of a partially applied multi-arg constructor. Reasonable?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span> <span class=\"bp\">→</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">skip</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">::</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">done</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">fconstructor</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">done</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">fail</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">&quot;failed to instantiate goal with {h}&quot;</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"n\">t</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">use&#39;</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">parse</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span><span class=\"bp\">.</span><span class=\"n\">pexpr_list_or_texpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"n\">l</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">try</span> <span class=\"n\">reflexivity</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span> <span class=\"bp\">×</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">use&#39;</span> <span class=\"o\">[</span><span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">use&#39;</span> <span class=\"o\">[</span><span class=\"mi\">100</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"n\">tt</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">failed to instantiate goal with tt</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">2 goals</span>\n<span class=\"cm\">⊢ ℕ</span>\n\n<span class=\"cm\">⊢ ℕ</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 148369750,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543242207
    },
    {
        "content": "<p>I like this behavior</p>",
        "id": 148369834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242269
    },
    {
        "content": "<p>Hmm, the interactive wrapper should probably start with a <code>focus1</code>, otherwise it will try to touch later goals if you give it too many arguments.</p>",
        "id": 148369891,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543242327
    },
    {
        "content": "<p>why does it end with <code>try reflexivity</code>?</p>",
        "id": 148370027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242460
    },
    {
        "content": "<p>Trying reflexivity is always good</p>",
        "id": 148370039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543242481
    },
    {
        "content": "<p>Because Patrick requested it in the original discussion and it doesn't really hurt.</p>",
        "id": 148370097,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543242499
    },
    {
        "content": "<p>if it's just exploratory it should be <code>reflexivity reducible</code></p>",
        "id": 148370104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242502
    },
    {
        "content": "<p>like in <code>rw</code></p>",
        "id": 148370112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242514
    },
    {
        "content": "<p>What does this mean?</p>",
        "id": 148370123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543242528
    },
    {
        "content": "<p>Yeah, good point.</p>",
        "id": 148370129,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543242535
    },
    {
        "content": "<p>that it won't try super hard when it's not appropriate</p>",
        "id": 148370146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242546
    },
    {
        "content": "<p>Ok, let's see how proofs will break then</p>",
        "id": 148370185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543242585
    },
    {
        "content": "<p>(hopefully none)</p>",
        "id": 148370189,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543242591
    },
    {
        "content": "<p>worst case you have to <code>use x; refl</code></p>",
        "id": 148370241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242604
    },
    {
        "content": "<p>this is what I hoped to avoid, but it may be too costly</p>",
        "id": 148370276,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543242629
    },
    {
        "content": "<p>plus <code>eq</code> is itself a single arg constructor, so can't you add more things to the <code>use</code> to trigger it?</p>",
        "id": 148370307,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242665
    },
    {
        "content": "<p>it's not clear to me that we always follow a <code>use</code> by a <code>refl</code> though</p>",
        "id": 148370346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242720
    },
    {
        "content": "<p>The only example from the old discussion that breaks is this one, and it works if you add <code>rfl</code> to the use.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">use&#39;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 148370348,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543242721
    },
    {
        "content": "<p>it seems like only somewhat contrived examples... like that one... have this characteristic</p>",
        "id": 148370408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242753
    },
    {
        "content": "<p>I'd be happy to try without the strong reflexivity try</p>",
        "id": 148370447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543242794
    },
    {
        "content": "<p>usually it's like <code>\\ex a b c, x = f a b c /\\ properties of a, b,c</code></p>",
        "id": 148370463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242809
    },
    {
        "content": "<p>I guess if the equality is the last thing it could still work, provided you don't want the properties as subgoals</p>",
        "id": 148370658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543242952
    },
    {
        "content": "<p>I don't think trying <code>reflexivity reducible</code> at the end hurts, and (maybe only very) occasionally it leads to some nice short proofs. But I'm not committed to keeping it.</p>",
        "id": 148370743,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543243008
    },
    {
        "content": "<p>I think it's fine to keep, I just doubt it will help</p>",
        "id": 148371039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543243258
    },
    {
        "content": "<p>is there a low attempting version of <code>trivial</code>? I think finishing with some zero arg constructors, including <code>eq.refl</code> and <code>trivial</code>, could be very helpful in this context</p>",
        "id": 148371145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543243346
    },
    {
        "content": "<p>I think mathematicians find ending a proof with <code>refl</code> ugly. It would be nice if we could just write <code>.</code> instead of <code>rfl</code>/<code>refl</code>, that would be nice. But of course I'm whining about icing on the cake right now.</p>",
        "id": 148371172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543243388
    },
    {
        "content": "<p>And maybe <code>end</code> should always attempt to close all remaining goals by <code>refl</code> or some similar cheap automation.</p>",
        "id": 148371193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543243417
    },
    {
        "content": "<p>Then you can just stop proving after giving the essential ideas.</p>",
        "id": 148371205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543243433
    },
    {
        "content": "<p>Maybe we should define <code>triv'</code> that uses <code>exact reducible</code> instead of just <code>exact</code>?</p>",
        "id": 148371247,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543243443
    },
    {
        "content": "<p>does <code>exact</code> have a reducibility setting?</p>",
        "id": 148371279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543243478
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 148371295,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543243503
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 148371332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543243534
    },
    {
        "content": "<p>does <code>triv</code> exist? It should be an alias for <code>trivial</code></p>",
        "id": 148371347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543243551
    },
    {
        "content": "<p>if not we can nab it for ourselves</p>",
        "id": 148371402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543243577
    },
    {
        "content": "<p><code>tactic.triv</code> is in core.</p>",
        "id": 148371403,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543243579
    },
    {
        "content": "<p><code>meta def triv : tactic unit := mk_const `trivial &gt;&gt;= exact</code></p>",
        "id": 148371417,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543243589
    },
    {
        "content": "<p>no interactive though?</p>",
        "id": 148371424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543243595
    },
    {
        "content": "<p>Oh, no.</p>",
        "id": 148371450,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543243626
    },
    {
        "content": "<p>boom</p>",
        "id": 148371455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543243630
    },
    {
        "content": "<p>Okay, so should we make <code>tactic.interactive.triv</code> a version of <code>tactic.interactive.trivial</code> that takes a reducibility parameter? Or make it explicitly the low cost one?</p>",
        "id": 148371578,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543243774
    },
    {
        "content": "<p>That kind of makes sense, shorter name = don't try as hard.</p>",
        "id": 148371587,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543243787
    },
    {
        "content": "<p>/me wonders what <code>trivia</code> will do <span class=\"emoji emoji-1f914\" title=\"thinking\">:thinking:</span></p>",
        "id": 148371710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543243901
    },
    {
        "content": "<p>BTW, a better version of <code>tactic.use</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">pexpr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">focus1</span> <span class=\"err\">$</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">mmap&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">done</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">fconstructor</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">focus1</span> <span class=\"o\">(</span><span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">done</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">fail</span> <span class=\"n\">format</span><span class=\"bp\">!</span><span class=\"s2\">&quot;failed to instantiate goal with {h}&quot;</span>\n</pre></div>",
        "id": 148371816,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543243995
    },
    {
        "content": "<blockquote>\n<p>And maybe <code>end</code> should always attempt to close all remaining goals by <code>refl</code> or some similar cheap automation.</p>\n</blockquote>\n<p>You meant <code>obviously</code> there, didn't you?  :-)</p>",
        "id": 148388302,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543258034
    },
    {
        "content": "<p>Well, <code>obviously</code> obviously isn't always cheap.</p>",
        "id": 148389884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543259301
    },
    {
        "content": "<p>I got distracted yesterday afternoon and just came back to this. The logic of that last version wasn't quite right when things were nested. This is better. <a href=\"https://github.com/leanprover/mathlib/pull/497\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/497\">https://github.com/leanprover/mathlib/pull/497</a></p>",
        "id": 148625379,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1543309189
    }
]