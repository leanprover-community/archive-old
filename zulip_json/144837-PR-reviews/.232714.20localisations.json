[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> has done an amazing job, refactoring the entire localisation API, thoroughly increasing its power.</p>",
        "id": 198197424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589981135
    },
    {
        "content": "<p>She introduced a type <code>localization_map</code>. After an idea by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, we now have a <code>has_coe_to_sort</code> for this type.<br>\nI find this somewhat counterintuitive, but clearly it streamlines the code.</p>",
        "id": 198197596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589981208
    },
    {
        "content": "<p>Is there some way to keep the streamlining, but make things more intuitive?</p>",
        "id": 198197651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589981232
    },
    {
        "content": "<p>Should <code>localization_map</code> be renamed to <code>localization</code>? And the map towards the localization get some other name?</p>",
        "id": 198197804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589981289
    },
    {
        "content": "<p>Thank you!! I would be for that change. I was going to call the localization as a quotient type (i.e the original definition) <code>localization</code> but since that's a secondary definition now, giving it a more verbose name doesn't matter  too much. Maybe I could make it a protected def in the <code>localization</code> namespace and just have it be called <code>localization.quotient</code>.</p>",
        "id": 198200980,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1589982718
    },
    {
        "content": "<p>Hmm... <code>quotient</code> is also confusing... because it isn't a quotient ring.</p>",
        "id": 198203677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589983775
    },
    {
        "content": "<p>Fair point! It doesn't matter for the current PR anyway. I'll change <code>localization_map</code> -&gt; <code>localization</code> in the rings file for now and use another PR to do the according change in <code>monoid_localization</code> &amp; deal with the naming issue</p>",
        "id": 198212582,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1589987543
    },
    {
        "content": "<p>One option would be to write <code>x : f.codomain</code> instead of <code>x : f</code> (by replacing the <code>has_coe_to_sort</code> instance with <code>@[reducible] def codomain (f : localization_map T S) := S</code>. Unfortunately, in my test this confuses the elaborator enough that <code>algebra.of_id R f.codomain</code> doesn't coerce to a function where <code>algebra.of_id R f</code> did.</p>",
        "id": 198214832,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589988361
    },
    {
        "content": "<p>I haven't looked closely at the PR (it's somewhat to understand in diff form) but is the current setup that<code>localization_map</code> has coercions to both sort (for the ring) and function (for the map)?</p>",
        "id": 198215465,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589988600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> the coercion to sort is implicit, to coerce to a function you write <code>f.to_map</code>.</p>",
        "id": 198215698,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589988681
    },
    {
        "content": "<p>Okay, in that case I might suggest something like this:</p>\n<ul>\n<li><code>localization_map</code> -&gt; <code>localization</code> as suggested by Johan</li>\n<li>a typical <code>f : localization_map</code> -&gt; <code>S : localization</code> (or some other letter that looks like a ring, not a function)</li>\n<li><code>f.to_map</code> -&gt; <code>S.of</code></li>\n</ul>",
        "id": 198215886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589988750
    },
    {
        "content": "<p>Note that lean 3.14 is much better in handling coercions</p>",
        "id": 198215983,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589988802
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>s suggestion, except I would like to start bikeshedding the variable names :) Since we already have <code>M</code>, <code>R</code> and <code>S</code> in use, how about <code>L : localization M S</code>?</p>",
        "id": 198216769,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589989122
    },
    {
        "content": "<p>Maybe I should check I understand exactly what is happening</p>",
        "id": 198216853,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589989166
    },
    {
        "content": "<p>My understanding is: a <code>localization M S</code> for <code>M</code> a submonoid of the ring <code>R</code> and a ring <code>S</code> witnesses that the localization of <code>R</code> at <code>M</code> is (isomorphic to) <code>S</code></p>",
        "id": 198217117,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589989303
    },
    {
        "content": "<p>In that case, is the <code>has_coe_to_sort</code> of <code>L : localization M S</code> just <code>S</code>?</p>",
        "id": 198217217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589989332
    },
    {
        "content": "<p>Correct</p>",
        "id": 198217240,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589989346
    },
    {
        "content": "<p>But if you already have <code>S</code>, then why not just use <code>S</code> directly? I thought maybe it was a bundled ring+ring hom.</p>",
        "id": 198217323,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589989393
    },
    {
        "content": "<p>In my case, fractional ideals, I need an <code>[algebra R S]</code> instance, but <code>R</code> and <code>S</code> are a priori unrelated. Applying <code>coe_to_sort L</code> basically gives an identical copy of <code>S</code> which has the algebra structure derived from the localization.</p>",
        "id": 198218046,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589989733
    },
    {
        "content": "<p>Is this just a case of the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem? :P</p>",
        "id": 198218398,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589989904
    },
    {
        "content": "<p>Oh, the coerced <code>L</code> has a different <code>ring</code> instance or something?</p>",
        "id": 198219926,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589990537
    },
    {
        "content": "<p>But in the end it must be equal to the one on <code>S</code>, right?</p>",
        "id": 198219944,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589990547
    },
    {
        "content": "<p>No, Lean needs <code>localization M S</code> to  automatically construct <code>algebra</code> instance.</p>",
        "id": 198219989,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589990573
    },
    {
        "content": "<p>Oh, <em>need</em> not have.</p>",
        "id": 198220020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589990590
    },
    {
        "content": "<p>So the setup is: you have rings <code>R</code> and <code>S</code> and a ring hom from <code>R</code> to <code>S</code> (which is actually a localization, but that doesn't matter) and then if you refer to <code>S</code> through the <code>has_coe_to_sort</code> of the ring hom, then it turns into an <code>R</code>-algebra.</p>",
        "id": 198220355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589990728
    },
    {
        "content": "<p>Do I have it right now?</p>",
        "id": 198220396,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589990746
    },
    {
        "content": "<p>Yes.</p>",
        "id": 198223336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589992082
    },
    {
        "content": "<p>thank you all for thinking about this - I've got an exam tomorrow afternoon but after that I'll work on the PR. It's sad that <code>f.codomain</code> doesn't work :/</p>",
        "id": 198256921,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1590008528
    },
    {
        "content": "<p>You can try <code>f.codomain</code> again after merging <code>master</code></p>",
        "id": 198261263,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590011240
    },
    {
        "content": "<p>Lean is now more clever with coercions</p>",
        "id": 198261310,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590011273
    },
    {
        "content": "<p><code>f.codomain</code> does indeed work now :D thank you!! I've moved <code>localization_map -&gt; localization</code> but haven't done more than those two changes for now.<br>\nI've used <code>f</code> for the map to emphasise that <code>localization M S</code> is a hom with some properties rather than a ring, but I can see reasons for switching to <code>L</code>. Does anyone have strong opinions?<br>\n&amp; also, <code>fraction_map</code> is a bit of a weird name but so is <code>fraction_ring</code> as a name for a map. I think <code>fractions_map</code> would be an improvement but would appreciate better ideas :/</p>",
        "id": 198383551,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1590098978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> I'm kicking this on the merge queue now. Thank you so much for all your work on this!<br>\n(Concerning your last questions, I think it's fine as is.)</p>",
        "id": 198407202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590125059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I can't check to see if this is the right solution right this moment, but I think the PR still needs a nolints: <a href=\"https://github.com/leanprover-community/mathlib/runs/697926627#step:5:16\">https://github.com/leanprover-community/mathlib/runs/697926627#step:5:16</a></p>",
        "id": 198407763,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590126029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> fixed it so I've put the PR back on the merge queue.</p>",
        "id": 198411832,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590131639
    },
    {
        "content": "<p>Thanks, both of you!</p>",
        "id": 198413226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590132991
    },
    {
        "content": "<p>thanks so much to you all for the help and the <code>nolint</code> :)</p>",
        "id": 198414601,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1590134234
    },
    {
        "content": "<p>Thank you for refactoring localizations!</p>",
        "id": 198415204,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590134643
    },
    {
        "content": "<p>I've just noticed that the commit message did not reflect the changes made to PR during review.</p>",
        "id": 198415929,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590135287
    },
    {
        "content": "<p>gah, true... is there any way I can edit it?</p>",
        "id": 198416203,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1590135512
    },
    {
        "content": "<p>Oops, my bad <span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span> <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> nope... once it's merged into master... nothing we can do anymore</p>",
        "id": 198416347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590135605
    },
    {
        "content": "<p>I'm sorry :( I considered editing it during the review and then decided I wanted it to make sense if people read the message and then the review comments. I've learnt something for future I guess.</p>",
        "id": 198416479,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1590135693
    }
]