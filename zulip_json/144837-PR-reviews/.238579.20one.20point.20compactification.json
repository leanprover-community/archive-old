[
    {
        "content": "<p>Hi, I'm going over <a href=\"https://github.com/leanprover-community/mathlib/issues/8579\">#8579</a> by <span class=\"user-mention\" data-user-id=\"384549\">@Yourong Zang</span>, and I have a few questions, see polls below.</p>",
        "id": 249291581,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628801630
    },
    {
        "content": "<p>/poll Name for the one-point compactification<br>\n<code>alexandroff</code><br>\n<code>one_pt_compactification</code><br>\n<code>with_infty</code></p>",
        "id": 249291726,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628801688
    },
    {
        "content": "<p>The original PR had both <code>has_coe_t</code> and <code>alexandroff.of</code> (possibly, it was named <code>_root_.of</code> due to a bug). Since only one of them can be the <code>simp</code>-normal form, I think that we should have only one of these two definitions. On the one hand, sometimes <code>has_coe_t</code> allows us to have <code>x : X</code> automatically upgraded to <code>x : alexandroff X</code>. On the other hand, quite often Lean needs explicit type annotations in expressions like <code>coe '' s</code> (see the current state of the PR). I can quickly drop <code>has_coe_t</code> and restore <code>alexandroff.of</code>. Should I do it?</p>",
        "id": 249292379,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628802010
    },
    {
        "content": "<p>/poll Coercion or <code>of</code><br>\nleave has_coe_t<br>\ndrop has_coe_t, restore of</p>",
        "id": 249292407,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628802022
    },
    {
        "content": "<p>Unwanted side effect of <code>has_coe_t</code> and semireducible definitions <code>alexandroff</code> and <code>ennreal</code>: <code>alexandroff.coe_eq_coe</code> applies to <code>ennreal</code>, and makes <code>ennreal.coe_eq_coe</code> issue a linter error.</p>",
        "id": 249303628,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628808966
    },
    {
        "content": "<p>We have similar issues with <code>with_bot</code>/<code>with_top</code>/<code>option</code> (yes, we have a rarely used coercion from <code>α</code> to <code>option α</code>).</p>",
        "id": 249303678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628809013
    },
    {
        "content": "<p>Last time I tried to make <code>with_bot</code> irreducible, I failed.</p>",
        "id": 249303699,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628809035
    },
    {
        "content": "<p>that sounds like a bug in simp. What do you think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ?</p>",
        "id": 249304985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628810068
    },
    {
        "content": "<p>This simp issue has been there for a long time for with_bot and with_top, particularly painful in <a href=\"http://polynomial.degree\">polynomial.degree</a> and list.maximum</p>",
        "id": 249305365,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628810405
    },
    {
        "content": "<p>This isn't a serious proposal, but sometimes it seems like there ought to be a way to define a new inductive type and carry over a bunch of basic theorems from a pre-existing type without relying on the transparency of a <code>def</code> (and without needing to metaprogram, like with derive).  For example, what if there were an <code>option_like</code> typeclass that gives a type an interpretation as <code>option</code>, and then in the main library, instead of proving things about <code>option</code> directly, they're proved for <code>option_like</code>?</p>\n<p>(I don't like how this would add clutter everywhere.  It would be better if there were parameterized namespaces, including a way to instantiate an inductive type with your own implementation.)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">class</span> <span class=\"n\">option_like</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">eqv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">option_like.some</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">option_like</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">option_like.eqv.symm</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">option_like.none</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">option_like</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">option_like.eqv.symm</span> <span class=\"n\">none</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">option_like</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">option_like</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">rec'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">option_like.none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">option_like.some</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">equiv.symm_apply_apply</span> <span class=\"n\">option_like.eqv</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">C'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">option_like.eqv.symm</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">option.rec</span> <span class=\"n\">_</span> <span class=\"n\">C'</span> <span class=\"n\">hp</span> <span class=\"n\">hreg</span> <span class=\"o\">(</span><span class=\"n\">option_like.eqv</span> <span class=\"n\">z</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">injective</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">option_like.some</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">option_like.eqv</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some</span><span class=\"o\">,</span> <span class=\"n\">equiv.apply_symm_apply</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">option_like</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">alexandroff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">infty</span> <span class=\"o\">:</span> <span class=\"n\">alexandroff</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">alexandroff</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">alexandroff</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">\"notation `∞` := alexandroff.infty\"</span> <span class=\"k\">in</span> <span class=\"n\">alexandroff</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_t</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">of</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option_like</span> <span class=\"o\">(</span><span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">infty</span> <span class=\"o\">:=</span> <span class=\"n\">none</span> <span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n   <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">infty</span> <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">of</span> <span class=\"n\">y</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n   <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n   <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">;</span><span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">}}⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">inhabited</span> <span class=\"o\">(</span><span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">∞</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_injective</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">option_like.injective</span>\n\n<span class=\"kd\">@[simp, norm_cast]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_eq_coe</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">coe_injective.eq_iff</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">coe_ne_infty</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span>  <span class=\"bp\">.</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">infty_ne_coe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∞</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">.</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">of_eq_coe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">of</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">none_eq_infty</span> <span class=\"o\">:</span> <span class=\"n\">option_like.eqv.symm</span> <span class=\"n\">none</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∞</span> <span class=\"o\">:</span> <span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">some_eq_coe'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">option_like.eqv.symm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">alexandroff</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">alexandroff</span>\n</code></pre></div>\n</div></div>",
        "id": 249308484,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1628813433
    },
    {
        "content": "<p>I think Mario would say here something about W types and transporting lemmas in general using a high powered tactic that recognizes the iso across W types</p>",
        "id": 249315193,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1628821474
    },
    {
        "content": "<p>something something W something <a href=\"http://www.contrib.andrew.cmu.edu/~avigad/Papers/qpf.pdf\">qpf paper</a></p>",
        "id": 249315291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628821638
    },
    {
        "content": "<p>also something something <a href=\"#narrow/stream/263328-triage/topic/issue.20.23408.3A.20transporting.20definitions.20and.20theorems.20along.20i.2E.2E.2E\"><code>transport</code> tactic</a></p>",
        "id": 249315360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628821732
    },
    {
        "content": "<p>this issue has a long history...</p>",
        "id": 249315374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628821765
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/408\">#408</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/1868\">#1868</a></p>",
        "id": 249315456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628821860
    },
    {
        "content": "<p>Actually, we don't use too many lemmas about <code>option</code>. It's easy to copy their proofs.</p>",
        "id": 249347211,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628852899
    },
    {
        "content": "<p>With <code>inductive alexandroff</code> we won't have to choose between <code>of</code> and <code>coe</code>.</p>",
        "id": 249347538,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1628853144
    },
    {
        "content": "<p>I think if we made this work for with_top and with_bot we should just do the same thing here</p>",
        "id": 249348786,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628854160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238579.20one.20point.20compactification/near/249348786\">said</a>:</p>\n<blockquote>\n<p>I think if we made this work for with_top and with_bot we should just do the same thing here</p>\n</blockquote>\n<p>I think <code>with_top.coe_eq_coe</code> is not made into a <code>simp</code> lemma.</p>",
        "id": 249365312,
        "sender_full_name": "Yourong Zang",
        "timestamp": 1628864055
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_top.coe_eq_coe\">docs#with_top.coe_eq_coe</a>)</p>",
        "id": 249367598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628865171
    },
    {
        "content": "<p>Right, my suggestion would just be to copy what <code>with_top</code> does; if what with_top does is wrong, we can fix<code>with_top</code>, <code>with_bot</code>, and <code>alexandroff</code> all at once at some later date.</p>",
        "id": 249367963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628865344
    },
    {
        "content": "<p>I think that this PR is ready for the next round of code review.</p>",
        "id": 252919388,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631376986
    },
    {
        "content": "<p>/poll Name for the one-point compactification<br>\n<code>alexandroff</code><br>\n<code>one_pt_compactification</code><br>\n<code>with_infty</code></p>",
        "id": 252924416,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631382193
    },
    {
        "content": "<p>I'm sorry for reposting a poll. I'm on a phone, an I clicked in a wrong area of the screen. Ignore it, please.</p>",
        "id": 252924495,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1631382266
    }
]