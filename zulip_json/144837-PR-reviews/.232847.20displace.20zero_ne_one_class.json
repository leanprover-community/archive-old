[
    {
        "content": "<p>what is this test error?</p>",
        "id": 199142356,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752432
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">/</span><span class=\"n\">lint</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">96</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">failed</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"err\">⊢</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 199142364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752443
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">foo_has_mul</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">foo_has_mul</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">do</span>\n  <span class=\"n\">d</span> <span class=\"err\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">has_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">some</span> <span class=\"n\">s</span> <span class=\"err\">←</span> <span class=\"n\">fails_quickly</span> <span class=\"mi\">300</span> <span class=\"n\">d</span><span class=\"o\">,</span>\n  <span class=\"n\">guard</span> <span class=\"err\">$</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;type-class inference timed out&quot;</span>\n</code></pre></div>",
        "id": 199142379,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752459
    },
    {
        "content": "<p>and what does it have to do with my PR?</p>",
        "id": 199142383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752465
    },
    {
        "content": "<p>and can I just ignore this error?</p>",
        "id": 199142387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752468
    },
    {
        "content": "<p>permalink: <a href=\"https://github.com/leanprover-community/mathlib/runs/720072871\">https://github.com/leanprover-community/mathlib/runs/720072871</a></p>",
        "id": 199142528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752540
    },
    {
        "content": "<p>because I'm gonna push more commits</p>",
        "id": 199142547,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752558
    },
    {
        "content": "<p>maybe this time it won't complain</p>",
        "id": 199142564,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752572
    },
    {
        "content": "<p>This is strange.  <code>lean test/lint.lean</code> works for me locally.</p>",
        "id": 199142645,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590752639
    },
    {
        "content": "<p>so what should I do if I see this again?</p>",
        "id": 199142753,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752713
    },
    {
        "content": "<p>The next time please make sure that <code>leanproject get mathlib:nonzero</code> shows the error.  I have found the correct revision now.</p>",
        "id": 199142786,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590752739
    },
    {
        "content": "<p>no I pushed a commit just now</p>",
        "id": 199142890,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752790
    },
    {
        "content": "<p>to merge into master</p>",
        "id": 199142900,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752796
    },
    {
        "content": "<p>the error showed up before that</p>",
        "id": 199142911,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752801
    },
    {
        "content": "<p>in commit 5f693c0</p>",
        "id": 199142943,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752824
    },
    {
        "content": "<blockquote>\n<p>I have found the correct revision now.</p>\n</blockquote>",
        "id": 199142952,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590752833
    },
    {
        "content": "<p>I apologize for any confusion</p>",
        "id": 199142953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590752834
    },
    {
        "content": "<p>The test complains that the linter produces the wrong error message.  If nothing else works, just remove the <code>guard</code> in that test.  The <code>some s ← ..</code> already makes sure the linter complains.  <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Why is the error message important here?  I can't really tell the difference between the error messages.</p>",
        "id": 199143340,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590753100
    },
    {
        "content": "<p>wait but why doesn't it complain in the current revision then?</p>",
        "id": 199143572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590753266
    },
    {
        "content": "<p>Other potential fix: replace <code>300</code> by <code>100</code>.</p>",
        "id": 199143599,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590753300
    },
    {
        "content": "<p>The test in question checks that type-class inference takes longer than 300, and returns an error message within 3000.</p>",
        "id": 199143623,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590753326
    },
    {
        "content": "<p>Now it only takes 227.  It's gotten faster!</p>",
        "id": 199143649,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590753356
    },
    {
        "content": "<p>300 <span aria-label=\"clock\" class=\"emoji emoji-1f557\" role=\"img\" title=\"clock\">:clock:</span></p>",
        "id": 199144800,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590754071
    },
    {
        "content": "<p>The idea of this test was that the linter can spot the difference between a type class problem that obviously loops (2nd test), and a type class problem that just takes a long time to resolve before exhausting the search space (first test). <br>\nIt's nice that the type-class inference sped up. I think the best fix of the test is to replace the <code>300</code> by <code>100</code> (or lower).</p>",
        "id": 199213854,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1590787314
    },
    {
        "content": "<p>I did that</p>",
        "id": 199214226,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1590787490
    }
]