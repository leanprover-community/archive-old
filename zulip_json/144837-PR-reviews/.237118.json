[
    {
        "content": "<p>I'd like to generalize <code>perm.support</code> to <code>set</code> instead of <code>finset</code>. In my opinion, this leads to cleaner definitions regarding <code>disjoint</code>. Additionally, it allows one to talk about any support, not just over finite permutations. Understandably, some statements about cardinality of supports get more clunky. But one is always free to either provide the support explicitly (as finset) or to conjure a <code>set.finite</code> proof. Happy to hear thoughts. Related to this refactor I have PRs about concrete constructions of <code>perm</code> from a list that is precisely the support, with planned follow-up of a <code>cycle</code> defined as a list quotient. My hope is to provide a notation for <code>perm</code> similar to how <code>data.matrix.notation</code> works</p>",
        "id": 236179440,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619445943
    },
    {
        "content": "<p>Would it make sense to define the subgroup of permutations with finite support? You could have API translating between the two types of permutations, but then the lemmas about cardinality of support would be nicer (because if you are working with permutations with finite support, then the support would be a finset)</p>",
        "id": 236208034,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619456342
    },
    {
        "content": "<p>Do we have <code>fincard</code> yet? One could rely on those too.</p>",
        "id": 236208418,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619456480
    },
    {
        "content": "<p>It just seems to me that a lot of lemmas (in cycles, sign, cycletype, etc...) are really about permutations with finite support, and to me it makes sense to at least bundle permutations with finite support as a subgroup, so that you can easily say things like \"the sign is a group homomorphism\"</p>",
        "id": 236209083,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619456741
    },
    {
        "content": "<p>Right -- so <code>{p // p.support.finite}</code> as a subgroup?</p>",
        "id": 236209782,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619457013
    },
    {
        "content": "<p>Yes. And once you've done that, it might make sense to define a finset version of support for those permutations (it's possible <code>fincard</code> is good enough, but I haven't used it so I don't know)</p>",
        "id": 236209942,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619457081
    },
    {
        "content": "<p>OK. <code>fincard</code> is a perennial suggestion, doesn't exist yet unfortunately</p>",
        "id": 236210135,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619457146
    },
    {
        "content": "<p>How would you then structure proving the Schreier Ulam theorem referenced here? <a href=\"https://mathoverflow.net/questions/12291/find-a-natural-group-that-contains-the-quotient-of-the-infinite-symmetric-grou\">https://mathoverflow.net/questions/12291/find-a-natural-group-that-contains-the-quotient-of-the-infinite-symmetric-grou</a></p>",
        "id": 236210790,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619457389
    },
    {
        "content": "<p>There's overloading of <code>equiv.perm</code> -- does it mean solely <code>automorphism</code> or restricted to <code>finite permutation</code>?</p>",
        "id": 236211214,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619457581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237118/near/236210790\">said</a>:</p>\n<blockquote>\n<p>How would you then structure proving the Schreier Ulam theorem referenced here? <a href=\"https://mathoverflow.net/questions/12291/find-a-natural-group-that-contains-the-quotient-of-the-infinite-symmetric-grou\">https://mathoverflow.net/questions/12291/find-a-natural-group-that-contains-the-quotient-of-the-infinite-symmetric-grou</a></p>\n</blockquote>\n<p>Looks like a good theorem, and I sort of see how to prove it, but why do you ask how to structure the proof?</p>",
        "id": 236211735,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619457774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237118/near/236211214\">said</a>:</p>\n<blockquote>\n<p>There's overloading of <code>equiv.perm</code> -- does it mean solely <code>automorphism</code> or restricted to <code>finite permutation</code>?</p>\n</blockquote>\n<p>What do you mean by this? As far as I understand, <code>equiv.perm</code> means arbitrary bijective function, and there would be another name for finite permutations.</p>",
        "id": 236211965,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619457846
    },
    {
        "content": "<p>Sorry, I wasn't clear. I was thinking of an API that allows one to make statements like \"support = countable union of swaps\" or \"support = countable union of disjoint cycles\".</p>",
        "id": 236212913,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619458223
    },
    {
        "content": "<p>(Also, just noticed that one of the top answers is by Kevin)</p>",
        "id": 236212987,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619458253
    },
    {
        "content": "<p>So, alright, I'll build in the additional <code>equiv.perm.finite</code> subgroup.</p>",
        "id": 236213055,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619458272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> , I implemented the proverbial <code>fincard</code> as <code>nat.card</code></p>",
        "id": 236258799,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1619478655
    },
    {
        "content": "<p>Ah, wonderful</p>",
        "id": 236258857,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619478703
    },
    {
        "content": "<p>Doesn't interop with sets though, right?</p>",
        "id": 236258969,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619478758
    },
    {
        "content": "<p>Or, at least, not yet?</p>",
        "id": 236258975,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619478763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>  for the subgroup of finite permutations, initially, this would all be <code>noncomputable</code>, correct? Because <code>set.finite</code> doesn't lend itself to a computable fintype easily.</p>",
        "id": 236560771,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619636549
    },
    {
        "content": "<p>I guess so, although I am not super familiar with computability.</p>",
        "id": 236561257,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619636755
    },
    {
        "content": "<p>Feel free to take a look at <a href=\"https://github.com/leanprover-community/mathlib/tree/pechersky/finite-perm-subgroup\">branch#pechersky/finite-perm-subgroup</a> for an extension of <code>perm.sign</code> to any finite perm, even if the underlying type isn't finite. And there is a proof the two are the same if the underlying type _is_ finite.</p>",
        "id": 236582575,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619644878
    },
    {
        "content": "<p>Great. Is there any reason to keep the old <code>perm.sign</code> then?</p>",
        "id": 236601117,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1619656219
    },
    {
        "content": "<p>Yes, I think there is. I think the refactor has to be done piecemeal</p>",
        "id": 237103645,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620008106
    },
    {
        "content": "<p>Because most of <code>sign</code> has been used for things over fintype anyway</p>",
        "id": 237103662,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620008120
    }
]