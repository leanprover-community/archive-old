[
    {
        "content": "<p>With permission from <span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> I've made progress on this PR so it now passes CI.  This PR changes the definition of <code>n.factorization : ℕ →₀ ℕ</code> to <code>λ p, if p.prime then padic_val_nat p n else 0</code> which is computable, thereby avoiding the noncomputability issues of my original definition.</p>",
        "id": 287699524,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1656413754
    },
    {
        "content": "<p>This should make <code>factorization</code> more useful in situations where it previously wasn't, such as in <a href=\"https://github.com/leanprover-community/mathlib/pull/12254\">#12254</a> (which is what <a href=\"https://github.com/leanprover-community/mathlib/pull/12254#discussion_r814220807\">originally prompted</a> this redefinition).</p>",
        "id": 287699814,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1656413969
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic_val_nat\">docs#padic_val_nat</a></p>",
        "id": 287701928,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656415446
    },
    {
        "content": "<p><del>the imports for this are outstandingly heavy and essentially makes <code>factorization</code> not usable anywhere</del> I accidentally opened the \"imported by\" column instead of the \"imports\" column</p>",
        "id": 287701962,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656415476
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 287701997,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656415503
    },
    {
        "content": "<p>I'm going to have a quick go at making <code>multiset.to_finsupp</code> computable</p>",
        "id": 287702386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656415760
    },
    {
        "content": "<p>I'm confused by the conversation on <a href=\"https://github.com/leanprover-community/mathlib/pull/12254\">#12254</a></p>",
        "id": 287703015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656416148
    },
    {
        "content": "<p>If you just want the power of 2 dividing n, you definitely don't want to compute the whole prime factorization of n!</p>",
        "id": 287703143,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656416208
    },
    {
        "content": "<p>Yes, this was the point that Bolton raised <a href=\"https://github.com/leanprover-community/mathlib/pull/12301#issuecomment-1052654030\">in the comments</a> on <a href=\"https://github.com/leanprover-community/mathlib/pull/12301\">#12301</a>.</p>",
        "id": 287703289,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1656416305
    },
    {
        "content": "<p>This is one reason I don't like this collective obsession with <code>noncomputable</code>--it encourages a binary viewpoint of computable vs. noncomputable, but if you are actually computing things then algorithms matter</p>",
        "id": 287703302,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656416322
    },
    {
        "content": "<p>for me, it's to make my <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.rec_on_prime_pow\">docs#nat.rec_on_prime_pow</a> + co computable; <code>factorisation</code> is only really used in the proofs, so it doesn't even compute anything, but it poisons a completely computable and easy procedure into one that is not</p>",
        "id": 287705831,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656417911
    },
    {
        "content": "<p>I am certainly guilty of not caring about computability.</p>\n<p>However I've always imagined that we could have the best of both worlds. E.g., suppose I have some function <code>ℕ → ℕ</code> which has a mathematically-convenient non-computable definition. Suppose further that we might also want this function compute sometimes. Then we would do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">non_computable_def</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">computable_def</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">computable_eq_non_computable_def</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">computable_def</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">non_computable_def</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 287706786,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1656418520
    },
    {
        "content": "<p>I assume by \"mathematically convenient\" you mean \"definitionally convenient\"?</p>",
        "id": 287706927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656418591
    },
    {
        "content": "<p>I'd rather not be pinned down on that.</p>",
        "id": 287706945,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1656418605
    },
    {
        "content": "<p>Since i'd argue that \"mathematical convenience\" is \"I didn't have to write the longer / more complicated / less clear computable implementation\", which ceases to be convenient once you've done it anyway!</p>",
        "id": 287706973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656418624
    },
    {
        "content": "<p>I think that's what Lean 4 does with the <code>@[csimp]</code> attribute. You write an easy-to-reason implementation and a fast implementation, and tag <code>easy_eq_fast</code> with the <code>@[csimp]</code> attribute. Then Lean uses the fast version for code generation and you can keep proving things using the other version. See, for example, <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Data/List/Basic.lean#L58\">https://github.com/leanprover/lean4/blob/master/src/Init/Data/List/Basic.lean#L58</a></p>",
        "id": 287707180,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1656418741
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 287707371,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1656418865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312301.20Change.20definition.20of.20factorization.20to.20be.20computable/near/287705831\">said</a>:</p>\n<blockquote>\n<p>for me, it's to make my <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.rec_on_prime_pow\">docs#nat.rec_on_prime_pow</a> + co computable; <code>factorisation</code> is only really used in the proofs, so it doesn't even compute anything, but it poisons a completely computable and easy procedure into one that is not</p>\n</blockquote>\n<p>It looks like <code>nat.rec_on_prime_pow</code> should also be using <code>padic_val_nat</code>, and not touch any kind of <code>factorization</code>, for the same reason</p>",
        "id": 287707512,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656418942
    },
    {
        "content": "<p>that's actually the original proof, c.f. <a href=\"https://github.com/leanprover-community/mathlib/pull/8514\">#8514</a></p>",
        "id": 287707595,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1656419001
    },
    {
        "content": "<p>I mean <code>nat.rec_on_prime_pow</code> is basically computing the prime factorization anyways, but when you find the smallest prime factor, you don't need to compute the rest of the prime factorization and then throw it away before doing the recursive call</p>",
        "id": 287707598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1656419002
    },
    {
        "content": "<p>Linking for convenience: <a href=\"https://github.com/leanprover-community/mathlib/pull/12301\">#12301</a></p>",
        "id": 287754536,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1656439785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> My motivation for messing around with the noncomputability checker earlier this year was to be able to use the typeclass system to store those computable definitions and equality lemmas in a way that the definitions are allowed to depend on additional assumptions. Like Reid said, algorithms matter, so you want to take advantage of additional properties your types might have (for example, if you have a computable total order then your finite sets could be stored as binary trees, which have logarithmic membership testing).</p>\n<p>Here's a simple example for computing the infimum of a set in <code>nat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.lattice</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">computable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">compute</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">compute_eq</span> <span class=\"o\">[]</span> <span class=\"o\">:</span> <span class=\"n\">compute</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">computable</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">nat.Inf.computable</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">s.nonempty</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">computable</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">compute</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.nonempty</span> <span class=\"k\">then</span> <span class=\"n\">nat.find</span> <span class=\"n\">h</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">compute_eq</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat.Inf_def</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">congr'</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">nat.Inf_empty.symm</span> <span class=\"n\">using</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">set.ne_empty_iff_nonempty</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">b</span> <span class=\"k\">then</span>\n  <span class=\"n\">is_true</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">])</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">∈</span> <span class=\"n\">set.Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"k\">then</span>\n  <span class=\"n\">is_true</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"k\">else</span>\n  <span class=\"n\">is_false</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">compute</span> <span class=\"bp\">$</span> <span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">set.Icc</span> <span class=\"mi\">2</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n<span class=\"c1\">-- 2</span>\n</code></pre></div>",
        "id": 287758986,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656441938
    },
    {
        "content": "<p>A problem with Lean 4's <code>csimp</code> attribute is that it's a definition that completely replaces the original one -- you can't use different algorithms that depend on the existence of other algorithms for the given types and values. In other words, this <code>computable</code> class lets you define a patchwork of partially defined algorithms, much like how <code>decidable</code> partially defines a function from expressions in <code>Prop</code> to <code>Bool</code>.</p>",
        "id": 287759126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656442001
    },
    {
        "content": "<p>With this, you get to define things in a \"mathematical convenient\" way (meaning, for example, that you don't need artificial decidability assumptions in your definitions), but then you can still compute things for whichever situations you provide algorithms through the typeclass system.</p>",
        "id": 287759458,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656442175
    },
    {
        "content": "<p>I've been wanting to introduce this into mathlib, but I haven't found the time to develop it.</p>",
        "id": 287759542,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656442207
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span> The last substantive change to this was almost three weeks ago but it keeps dropping to the bottom of the queue when I resolve merge conflicts.</p>",
        "id": 289884501,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1658064039
    }
]