[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> Thanks for this PR! I think it is looking pretty good. I have a few simple questions for people like <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and/or <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>. Should lemmas like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">is_add_group_hom</span><span class=\"bp\">.</span><span class=\"n\">trivial_ker_iff_eq_zero</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">trivial_ker_iff_eq_one</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_group_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">ker</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">trivial</span> <span class=\"n\">α</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>be in the <code>is_group_hom</code> namespace, or should we put them in the root namespace? Currently we have a similar lemma for ring homs in the <code>is_ring_hom</code> namespace. Should the latter just be removed?</p>",
        "id": 163880925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555904228
    },
    {
        "content": "<p>It should be in the <code>is_group_hom</code> namespace, because there are several theorems like that</p>",
        "id": 163880974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555904339
    },
    {
        "content": "<p>isn't there one for linear maps too?</p>",
        "id": 163880984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1555904349
    },
    {
        "content": "<p>Hmm... this wasn't a good example. Because actually <code>ker f</code> is defined differently for <code>is_group_hom</code> and <code>is_ring_hom</code>. Anyway, my question did apply to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">inj_iff_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 163881921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555906025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> Would you mind making these update? (When you have time...)</p>",
        "id": 163930362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555961186
    },
    {
        "content": "<p><code>is_ring_hom.ker</code> sounds like it should should be <code>is_add_group_hom.ker</code>. I think we need some better names than having to remember the weakest conditions for everything all the time.</p>",
        "id": 163930584,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555961328
    },
    {
        "content": "<p>I must confess I sometimes setup aliases when I'm tired of this problem</p>",
        "id": 163930627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555961365
    },
    {
        "content": "<p>how about <code>add_ker</code> and <code>mul_ker</code>?</p>",
        "id": 163930823,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555961496
    },
    {
        "content": "<blockquote>\n<p><code>is_ring_hom.ker</code> sounds like it should should be <code>is_add_group_hom.ker</code>. I think we need some better names than having to remember the weakest conditions for everything all the time.</p>\n</blockquote>\n<p>No, there is a real difference between the two. One is an <code>ideal</code> (which is bundled) and the other is an <code>is_add_subgroup</code> (which is unbundled).</p>",
        "id": 163931104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555961705
    },
    {
        "content": "<p>So, (as long as we use bundled stuff) there is a legitimate reason to have both.</p>",
        "id": 163931130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555961734
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132858\">Ramon Fernandez Mir</span> Would you mind making these update? (When you have time...)</p>\n</blockquote>\n<p>So I just need to move this lemma out of the <code>is_group_hom</code> namespace and remove it from <code>is_ring_hom</code>?</p>",
        "id": 163932610,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1555962931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> Yes, please make <code>inj_iff_eq_one</code> a lemma in the root namespace (in an appropriate file in the hierarchy). And include the additive version.</p>",
        "id": 163961937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1555995556
    },
    {
        "content": "<p>For some reason AppVeyor is failing for this PR. I don't understand the error.</p>",
        "id": 164642603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556733343
    },
    {
        "content": "<p>It's because the branch is located in another repo. We can't test the scripts well when that happens.</p>",
        "id": 164642899,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556733581
    },
    {
        "content": "<p>Since he doesn't change the scripts, you can ignore the failure and merge by hand if nothing is building</p>",
        "id": 164642962,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556733604
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/931\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/931\">#931</a> has the same problem, and it's on a branch of the community repo</p>",
        "id": 164643255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556733839
    },
    {
        "content": "<p>I'll see what I can do</p>",
        "id": 164643597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556734096
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 164643616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556734114
    },
    {
        "content": "<p>Restarting the build was sufficient. It looks pretty fishy too me. I'll have to look at that script again</p>",
        "id": 164643792,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1556734256
    }
]