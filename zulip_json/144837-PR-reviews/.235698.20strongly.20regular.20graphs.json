[
    {
        "content": "<p>This is another old graph theory PR. It probably needs some more refinement, but it's at least now updated to master.</p>\n<p>(Pinging <span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span>)</p>",
        "id": 266118610,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640539671
    },
    {
        "content": "<p>I changed it from draft to ready for review</p>",
        "id": 266118809,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640540005
    },
    {
        "content": "<p>Ah whoops I meant to revive it myself <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 266119081,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640540414
    },
    {
        "content": "<p>Putting it here, it should turn out better by using <code>finset</code> more.</p>",
        "id": 266119098,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640540459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235698.20strongly.20regular.20graphs/near/266118809\">said</a>:</p>\n<blockquote>\n<p>I changed it from draft to ready for review</p>\n</blockquote>\n<p>It isn't, but fine.</p>",
        "id": 266119166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640540564
    },
    {
        "content": "<p>Oops, I saw that Kyle removed the WIP label and added the <code>awating-review</code> one</p>",
        "id": 266119322,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640540826
    },
    {
        "content": "<p>BTW I just noticed <a href=\"https://github.com/leanprover-community/mathlib/projects/8#card-54683319\">this</a></p>",
        "id": 266120306,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640542207
    },
    {
        "content": "<p>Ahah! Yeah, I've been dumping my work in this project for quite a while now.</p>",
        "id": 266120656,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640542756
    },
    {
        "content": "<p>There's a lot of WIP material there <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 266120719,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640542824
    },
    {
        "content": "<p>There were some things about a <code>common_neighbor_finset</code>, but I removed them because needing to maintain both that and <code>common_neighbors</code> seemed worse than manipulating <code>set.to_finset</code> expressions.</p>\n<p>Anyway, should I understand that you're taking ownership <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>? Regarding marking it as ready for review, I figured that it checks off another TODO item and the code quality is good enough. I assume it's forward progress for strongly regular graphs, but I don't know anything about their theory.</p>",
        "id": 266120755,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640542898
    },
    {
        "content": "<p>I mean, it can go into review already. Lemma names are not mathlib-compliant yet, but that's easily fixable.</p>",
        "id": 266121913,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640544419
    },
    {
        "content": "<p>I was planning on taking over this branch the week after the New Year and I don't have time before that. So feel free to take this PR if you think you can make it hit mathlib in under a week.</p>",
        "id": 266121983,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640544539
    },
    {
        "content": "<p>I think I was able to clear out most of the lint errors</p>",
        "id": 266143750,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640576885
    },
    {
        "content": "<p>Should we break <a href=\"https://github.com/leanprover-community/mathlib/blob/c63a61bcc170abde4c9188ee0be0401b0e00bdf2/src/combinatorics/simple_graph/strongly_regular.lean#L126\">this lemma</a> into smaller pieces (<code>regular</code>, <code>adj_common</code> and <code>nadj_common</code>)?</p>",
        "id": 266181361,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640619673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> please see if you approve this: <a href=\"https://github.com/leanprover-community/mathlib/pull/11078\">https://github.com/leanprover-community/mathlib/pull/11078</a><br>\nI ended up improving some docs too. If you like it, feel free to hit merge right away <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 266184398,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640622123
    },
    {
        "content": "<p>I'm having a look</p>",
        "id": 266185670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640623050
    },
    {
        "content": "<p>Also, I quite liked <code>is_SRG_of</code>. It was concise and rather unambiguous.</p>",
        "id": 266185949,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640623224
    },
    {
        "content": "<p>Kyle are you okay with <code>is_SRG_of</code>? I changed it because i hadn't seen abbreviations like these in mathlib before</p>",
        "id": 266186038,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640623310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> feel free to push commits directly to <code>srg1-split</code> before merging, if you want to</p>",
        "id": 266186144,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640623383
    },
    {
        "content": "<p>There will soon be <code>SES</code> for Short Exact Sequence, and we can find a few more. They aren't very popular, I concede.</p>",
        "id": 266186195,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640623435
    },
    {
        "content": "<p>Another way we shorten names is by removing suffixes and conjugation marks. For example, in retrospect I could have named <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite_order\">docs#locally_finite_order</a> <code>local_finite_order</code>.</p>",
        "id": 266186301,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640623516
    },
    {
        "content": "<p>And I will call ranked/graded orders <code>rank_order</code> or <code>grade_order</code>.</p>",
        "id": 266186330,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640623544
    },
    {
        "content": "<p>I'm going to implement this suggestion from Kyle before we dig deeper into names:</p>\n<blockquote>\n<p>Make sure to move arguments to before the colon and remove the intros first line.</p>\n</blockquote>",
        "id": 266186395,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640623593
    },
    {
        "content": "<p>Just a sec</p>",
        "id": 266186400,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640623603
    },
    {
        "content": "<p>/poll What should this be called?<br>\n/option <code>is_SRG_of</code><br>\n/option <code>is_strongly_regular_of</code></p>\n<p><span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> I want to make sure you get a vote in this</p>",
        "id": 266186406,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640623610
    },
    {
        "content": "<p>Well that didn't work right</p>",
        "id": 266186419,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640623629
    },
    {
        "content": "<p>(Ping <span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span>)</p>",
        "id": 266186452,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640623659
    },
    {
        "content": "<p>The acronym <code>srg</code> seems to be somewhat prevalent for these, so I'm leaning toward using it. But I really don't know anything about these, and I'm mostly going by <a href=\"https://en.wikipedia.org/wiki/Strongly_regular_graph\">Wikipedia</a> and Alena's previous decision here.</p>",
        "id": 266186605,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640623780
    },
    {
        "content": "<p>got a vote in, i am okay with is_SRG_of</p>",
        "id": 266186681,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640623829
    },
    {
        "content": "<p>we can always rename it later anyway, if we change our minds</p>",
        "id": 266186837,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640623966
    },
    {
        "content": "<p>The <code>_of</code> seems quite redundant to me, because we aren't using the hypothetical existentially quantified version \"<code>G</code> is a strongly regular iff there exist parameters such that <code>G</code> is strongly regular graph of these parameters\".</p>",
        "id": 266186908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640624018
    },
    {
        "content": "<p>cf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O_with\">docs#asymptotics.is_O_with</a></p>",
        "id": 266186977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640624046
    },
    {
        "content": "<p>I was thinking exactly in replacing <code>of</code> by <code>with</code></p>",
        "id": 266187018,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640624089
    },
    {
        "content": "<p>i think the reason i went with <code>_of</code> initially is cause i know there's a search for which parameters have associated SRGs and which don't</p>",
        "id": 266187158,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640624168
    },
    {
        "content": "<p>but i guess if we are talking about a specific graph, in the way it's currently defined, <code>_with</code> could also work</p>",
        "id": 266187245,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640624256
    },
    {
        "content": "<p>Ah, I didn't mean to replace it with <code>_with</code>. I meant to drop it altogether.</p>",
        "id": 266187492,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640624412
    },
    {
        "content": "<p>i think my rationale was i wanted the SRG stuff to be more oriented towards talking about the parameters since talking about specific graphs would be quite difficult</p>",
        "id": 266187650,
        "sender_full_name": "Alena Gusakov",
        "timestamp": 1640624506
    },
    {
        "content": "<p>If we keep the <code>with</code> or <code>of</code>, we can later create a <code>is_SRG</code> with a condition that there exist <code>m</code>, <code>n</code> etc and then we are able to talk about strongly regular graphs in general</p>",
        "id": 266187776,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640624594
    },
    {
        "content": "<p>(however idk how deep we can dig in that direction)</p>",
        "id": 266187821,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640624638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235698.20strongly.20regular.20graphs/near/266186977\">said</a>:</p>\n<blockquote>\n<p>cf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O_with\">docs#asymptotics.is_O_with</a></p>\n</blockquote>\n<p>This idea is inspired by this approach <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 266187920,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640624708
    },
    {
        "content": "<p>How can <a href=\"https://github.com/leanprover-community/mathlib/pull/11078#discussion_r775567990\">this</a> be done? The parameters to instantiate the strongly regular structure require proofs of types <code>∀ (v w : V), ...</code></p>",
        "id": 266188641,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640625315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235698.20strongly.20regular.20graphs/near/266187776\">said</a>:</p>\n<blockquote>\n<p>If we keep the <code>with</code> or <code>of</code>, we can later create a <code>is_SRG</code> with a condition that there exist <code>m</code>, <code>n</code> etc and then we are able to talk about strongly regular graphs in general</p>\n</blockquote>\n<p>Yeah, and my point is that we won't ever want to do that.</p>",
        "id": 266189362,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640625879
    },
    {
        "content": "<p>The <code>is_O</code> stuff is different because you often don't care about the constant. However, you very much do care about the parameters of strong regularity. The nail in the coffin is then that there are four parameters to strong regularity, which is <em>a lot</em> to fetch from an existential (<code>classical.some (classical.some_spec (classical_some_spec (classical.some_spec h)</code>...), although of course we could write an API for that.</p>",
        "id": 266189554,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640626032
    },
    {
        "content": "<blockquote>\n<p>i think my rationale was i wanted the SRG stuff to be more oriented towards talking about the parameters</p>\n</blockquote>\n<p>Keeping a suffix (<code>of</code> or <code>with</code>) is a good way to explicit what Alena had in mind tho</p>",
        "id": 266189660,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640626124
    },
    {
        "content": "<p>Meh, this is quite a weak argument. <code>_of</code>, <code>_with</code> and <code>_on</code> names are mostly only there to disambiguate. There's no ambiguity here.</p>",
        "id": 266189883,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640626273
    },
    {
        "content": "<p>Huh</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/runs/4643936983?check_suite_focus=true\">Error: API rate limit exceeded for installation ID 5948897.</a></p>\n</blockquote>",
        "id": 266191186,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640627290
    },
    {
        "content": "<p>Hard to reach consensus. I changed <code>_of</code> to <code>_with</code> because it's more inline with the docstring definition. We can change it again if we want (e.g. remove <code>_with</code>). But I'm merging <a href=\"https://github.com/leanprover-community/mathlib/pull/11078\">#11078</a> because it's become a reasonable mini-refactor.</p>",
        "id": 266191550,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640627591
    },
    {
        "content": "<p>We can get back to reviewing <a href=\"https://github.com/leanprover-community/mathlib/pull/5698\">#5698</a> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 266191698,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640627704
    },
    {
        "content": "<p>I think this one is looking ready</p>",
        "id": 266231064,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640667146
    },
    {
        "content": "<p>I added some review comments, mostly about naming. I'm not sure exactly who's responsible for the PR at this point -- <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>, you seem to have been editing it more recently than me, want to take care of it? (Pinging <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and <span class=\"user-mention\" data-user-id=\"303889\">@Alena Gusakov</span> in case you want to work on it.)</p>",
        "id": 266444087,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640885491
    },
    {
        "content": "<p>Sure I can take care of it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <br>\n(aaaaa <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> ) (easter egg: funny edit history)</p>",
        "id": 266445020,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640886415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> adjustments done. I ended up leaving <code>ne_of_adj_nadj</code> there. Let me know if you want it dead</p>",
        "id": 266456660,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640896744
    },
    {
        "content": "<p>I could make almost everything work, except for the change you proposed on <a href=\"https://github.com/leanprover-community/mathlib/blob/52d0c533c057b88aed1a887cb817a19738d6603d/src/combinatorics/simple_graph/strongly_regular.lean#L151\">line 151</a> because it didn't plug properly as a parameter on line 168.</p>",
        "id": 266456777,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640896880
    },
    {
        "content": "<p>Btw, what does this funny black triangle do? <code>h ▸ hwx</code></p>",
        "id": 266458026,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640898153
    },
    {
        "content": "<p>equality substitution <code>eq.subst</code></p>",
        "id": 266458146,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1640898266
    },
    {
        "content": "<p>just a general comment from someone who actually published papers on SRGs - feel free to ignore. Parameters <code>l</code> and <code>m</code> are normally called $\\lambda$ and $\\mu$ - is there a reason to keep <code>l</code> and <code>m</code>, other than ease of typing?</p>",
        "id": 266495138,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1640946386
    },
    {
        "content": "<p>At least one reason is that <code>λ</code> is hardcoded in Lean for lambda expressions.</p>",
        "id": 266495170,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640946435
    },
    {
        "content": "<p>hmm, reserving letters of alphabet as a language keywords  - so I presume the parser is not clever enough to distinguish \\lambda as a operator from \\lambda as a variable?</p>",
        "id": 266495797,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1640947278
    },
    {
        "content": "<p>there are many small \\lambdas in UTF-8: <a href=\"https://www.compart.com/en/unicode/U+03BB\">https://www.compart.com/en/unicode/U+03BB</a> - which one is reserved?</p>",
        "id": 266496102,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1640947683
    },
    {
        "content": "<p>The one you linked to, apparently.</p>",
        "id": 266496213,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640947815
    },
    {
        "content": "<p>so one can still use the italic version, for instance - <a href=\"https://www.compart.com/en/unicode/U+1D706\">https://www.compart.com/en/unicode/U+1D706</a> ?</p>",
        "id": 266496905,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1640948551
    },
    {
        "content": "<p>need not be handled in this PR, certainly.</p>",
        "id": 266496927,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1640948587
    },
    {
        "content": "<p>As typing it in VSCode is no fun... But what about \\mu ?</p>",
        "id": 266496961,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1640948634
    },
    {
        "content": "<p>What about just using capital lambda <code>\\L</code> and mu (<code>\\m</code>)? <br>\nI'm not sure its a question of the parser being clever enough, there could be a heuristic but one can create genuinely ambiguous expressions if <code>\\lambda</code> is used as a variable, seeing as lambda expressions are such  a basic concept in the type theory.<br>\nPossibly lean 4 will be more flexible in this respect</p>",
        "id": 266498150,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640950093
    },
    {
        "content": "<p>It could be a nice visual disambiguation. Bhavik and I did the same for eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uv.compression\">docs#uv.compression</a>.</p>",
        "id": 266501416,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640954344
    },
    {
        "content": "<p>One can also use french quotes to quote reserved keywords to escape them into usable tokens</p>",
        "id": 266504157,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640958103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235698.20strongly.20regular.20graphs/near/266456660\">said</a>:</p>\n<blockquote>\n<p>I ended up leaving <code>ne_of_adj_nadj</code> there. Let me know if you want it dead</p>\n</blockquote>\n<p>It's the graph analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ne_of_mem_of_not_mem\">docs#ne_of_mem_of_not_mem</a>, so it gets to live.</p>",
        "id": 266515882,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640973039
    },
    {
        "content": "<p>Hmm... but then you should also make the right version, and the version for all bundled Prop-valued functions...</p>",
        "id": 266517199,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640974934
    },
    {
        "content": "<p>Oh, by \"right version\" you mean \"version for arguments on the right\".</p>\n<p>Anyway, I've at least changed it to this to be closer to <code>ne_of_mem_of_not_mem</code> in spirit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ne_of_adj_of_not_adj</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">G.adj</span> <span class=\"n\">w</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">w</span>\n</code></pre></div>",
        "id": 266517534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640975521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I finished switching things over to dot notation</p>",
        "id": 266517579,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640975545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316505\">@Dima Pasechnik</span> As a typographical compromise, what do you think about <code>G.is_SRG_with n k ℓ μ</code>?</p>",
        "id": 266517586,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640975585
    },
    {
        "content": "<p>(I've switched the definition of <code>is_SRG_with</code> to these letters.)</p>",
        "id": 266517598,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640975624
    },
    {
        "content": "<p>that's certainly an improvement. I'll see if I can still improve it to a properly typeset lambda, once it is in.</p>",
        "id": 266518045,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1640976257
    },
    {
        "content": "<p>An example (don't do this!):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">«λ»</span> <span class=\"bp\">«</span><span class=\"k\">fun</span><span class=\"bp\">»</span> <span class=\"bp\">«</span><span class=\"kd\">theorem</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">constant</span> <span class=\"bp\">«Π»</span> <span class=\"o\">:</span> <span class=\"bp\">«</span><span class=\"kd\">theorem</span><span class=\"bp\">»</span>\n\n<span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">example</span><span class=\"bp\">»</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"bp\">«λ»</span> <span class=\"bp\">→</span> <span class=\"bp\">«</span><span class=\"k\">fun</span><span class=\"bp\">»</span> <span class=\"bp\">→</span> <span class=\"bp\">«</span><span class=\"kd\">theorem</span><span class=\"bp\">»</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"kd\">instance</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"bp\">«</span><span class=\"kd\">example</span><span class=\"bp\">»</span> <span class=\"bp\">«λ»</span> <span class=\"bp\">«</span><span class=\"k\">fun</span><span class=\"bp\">»</span> <span class=\"bp\">«</span><span class=\"kd\">theorem</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">«λ»</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">«</span><span class=\"k\">fun</span><span class=\"bp\">»</span><span class=\"o\">,</span> <span class=\"bp\">«Π»</span> <span class=\"n\">_</span>\n\n<span class=\"k\">#print</span> <span class=\"bp\">«</span><span class=\"kd\">instance</span><span class=\"bp\">»</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">noncomputable def instance : Π («λ» «fun» «theorem» : Type), «example» «λ» «fun» «theorem» :=</span>\n<span class=\"cm\">λ («λ» «fun» «theorem» : Type) («λ» : «λ») («fun» : «fun»), «Π» «theorem»</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 266519557,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640978454
    },
    {
        "content": "<p>In the spirit of <a href=\"/user_uploads/3121/jrhdPn5jPvHPEQLVY-vUDQDb/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/jrhdPn5jPvHPEQLVY-vUDQDb/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/jrhdPn5jPvHPEQLVY-vUDQDb/image.png\"></a></div>",
        "id": 266519573,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640978504
    },
    {
        "content": "<p>well, people should learn from classics (e.g. Common Lisp) :P</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&gt;</span> <span class=\"o\">((</span><span class=\"n\">lambda</span> <span class=\"o\">(</span><span class=\"n\">lambda</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"n\">lambda</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 266523450,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1640984077
    },
    {
        "content": "<p>Greenspun's tenth rule says that people will learn the classics (Common Lisp) even if you don't teach them.</p>",
        "id": 266523542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640984232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235698.20strongly.20regular.20graphs/near/266517579\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> I finished switching things over to dot notation</p>\n</blockquote>\n<p>I think I don't fully grasp what \"dot notation\" means yet. I will learn with time <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 266524342,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640985464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> \"dot notation\" is the mechanism that lets <code>h.card_neighbor_finset_union_of_adj</code> stand for <code>is_SRG_with.card_neighbor_finset_union_of_adj h</code>. The algorithm is roughly that Lean determines <code>h</code> has type <code>is_SRG_with</code>, so it will look for something in the <code>is_SRG_with</code> namespace. This gives some motivation to design namespaces and implicit/explicit arguments to enable uses of the notation.</p>",
        "id": 266524673,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640986047
    },
    {
        "content": "<p>aaand it's merged <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 266562900,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641052089
    },
    {
        "content": "<p>This PR was open in 10 Jan 2021. The oldest PR that I've seen being merged in mathlib so far</p>",
        "id": 266562995,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1641052309
    }
]