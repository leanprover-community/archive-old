[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6125\">#6125</a> refactors <code>fin.pred_above</code>, in preparation for work on <code>simplex_category</code> and <code>simplicial_object</code>. As there's a stack of PRs waiting on it, and more coming, I'd be very pleased if someone could take a look at it.</p>",
        "id": 226481308,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613461354
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6170\">#6170</a>, which comes immediately afterwards, should be quite easy to review.</p>",
        "id": 226481309,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613461355
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6125\">#6125</a> is at least half <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>'s work by now.</p>",
        "id": 226481322,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613461370
    },
    {
        "content": "<p>There is one non-terminal simp that I spotted.</p>",
        "id": 226487470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613466043
    },
    {
        "content": "<p>In general, a bunch of proofs seem to have gotten 5x longer. But in general I'm in favour of this refactor. So I think we should merge it.</p>",
        "id": 226487526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613466079
    },
    {
        "content": "<p>Some reasons the proofs have gotten longer are that for <code>pred_above</code>, one now has to case on <code>n</code> first, and because we don't have nice parallels for <code>prev_above</code> of lemmas like <code>succ_above_below</code>, <code>succ_above_above</code> etc. Also, the \"inverse\" lemmas like <code>succ_above_pred_above</code> are no longer in simple \"inverse\" statements.</p>",
        "id": 226515114,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613483748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236125/near/226487470\">said</a>:</p>\n<blockquote>\n<p>There is one non-terminal simp that I spotted.</p>\n</blockquote>\n<p>Dealt with now.</p>",
        "id": 226517208,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613484822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236125/near/226515114\">said</a>:</p>\n<blockquote>\n<p>and because we don't have nice parallels for <code>prev_above</code> of lemmas like <code>succ_above_below</code>, <code>succ_above_above</code> etc. </p>\n</blockquote>\n<p>Should we just add these lemmas? I have to admit I haven't read closely your new proofs. :-) So I'm not immediately sure what the factoring-out goals would be.</p>",
        "id": 226590807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613515939
    },
    {
        "content": "<p>I think in general the proofs aren't that much worse. We've also had some expansion because now <code>succ_above</code> is defined and API-expanded completely prior to any mention of <code>pred_above</code>. So I think, modulo any further golfing I might do, this might be good to merge, and add other API later as it comes up.</p>",
        "id": 226591968,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613516612
    },
    {
        "content": "<p>Kicked onto the queue</p>",
        "id": 226617661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613542338
    }
]