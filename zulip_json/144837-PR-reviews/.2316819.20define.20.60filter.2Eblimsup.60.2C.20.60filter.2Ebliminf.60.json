[
    {
        "content": "<p>This PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16819\">#16819</a> just failed to build because of an <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/3190979362/jobs/5206756703\">unrelated timeout</a> in the proof of Hensel's lemma.</p>",
        "id": 302515641,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1664993392
    },
    {
        "content": "<p>A quick glance at the <a href=\"https://github.com/leanprover-community/mathlib/blob/b97d09488e44039ab0532bd44c2e3cfa83b572d3/src/number_theory/padics/hensel.lean#L154\">offending def</a> does not suggest any trivial fixes.</p>",
        "id": 302516017,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1664993519
    },
    {
        "content": "<p>I'm finished for the day so I'll debug this in the morning but I decided to mention it here in case someone more familiar with this corner of the library might have a good guess as to what is slow. Maybe <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> ?</p>",
        "id": 302516235,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1664993581
    },
    {
        "content": "<p>I investigated and it seems simply replacing it with a tactic proof fixes the timeout.</p>",
        "id": 302516393,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664993637
    },
    {
        "content": "<p>It's mysterious because I couldn't reproduce on master but could on a failed bors staging commit.</p>",
        "id": 302516551,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664993675
    },
    {
        "content": "<p>Oh great. Does this mean you also hit this independently?</p>",
        "id": 302516704,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1664993719
    },
    {
        "content": "<p>Yes this was a <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/3190968687/jobs/5206733219\">failed bors batch</a> and <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/3185673633/jobs/5195498301\">one of my branch</a></p>",
        "id": 302517059,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664993829
    },
    {
        "content": "<p>Oh darn. Have you got your fix in PR form yet?</p>",
        "id": 302517169,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1664993871
    },
    {
        "content": "<p>I hope to soon!</p>",
        "id": 302517293,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664993906
    },
    {
        "content": "<p>I hit it in <a href=\"https://github.com/leanprover-community/mathlib/pull/16775\">#16775</a> and decided just to let it sit for a few days until someone fixed it :). Thanks!</p>",
        "id": 302519054,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1664994517
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16823\">#16823</a></p>",
        "id": 302519248,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664994600
    },
    {
        "content": "<p>I've delegated. <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> is this something we should send to bors with a high priority?</p>",
        "id": 302519838,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1664994797
    },
    {
        "content": "<p>If anyone has time, I'd be grateful for any feedback on this PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/16819\">#16819</a></p>",
        "id": 303579599,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1665562631
    },
    {
        "content": "<p>It looks very nice except for the dot notation abuse. I know many people do such things with filters but I really can't figure out how writing <code>F.map f</code> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>f</mi><mo>∗</mo></msub><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">f_*F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1757em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is better than <code>map f F</code> which has the same number of characters and the correct reading order. </p>\n<p>Given <code>(f : α → β)</code> and <code>(A : set α)</code>, would you prefer to write <code>A.image f</code> instead of <code>f '' A</code>? Maybe this isn't very convincing because of the weird<code>''</code> notation, but still.</p>\n<p>For the new functions, compare the docstring</p>\n<blockquote>\n<p>The <code>blimsup</code> of a function <code>u</code> along a filter <code>f</code>, bounded by a predicate <code>p</code>, is...</p>\n</blockquote>\n<p>and then what you write later <code>f.bliminf p u</code> which randomly shuffle objects. I'm ready to believe that swapping <code>f</code> and <code>p</code> can help in some cases, but I don't see how <code>f.bliminf p u</code>is better than <code>bliminf u f p</code> (or <code>bliminf u p f</code>). I'm writing this here instead of GitHub because this is a very general issue.</p>",
        "id": 303581308,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665563430
    },
    {
        "content": "<p>I agree completely with Patrick, here and elsewhere in mathlib. For instance, when <code>x</code> is a real number, I <em>really</em> prefer <code>exp x</code> or <code>log x</code> over <code>x.exp</code> or <code>x.log</code>. (I know that sometimes there is an ambiguity between <code>real.exp</code> and <code>complex.exp</code> that is lifted by dot notation, but I still prefer <code>real.exp x</code> over <code>x.exp</code>).</p>",
        "id": 303584028,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1665564543
    },
    {
        "content": "<p>Thank you both for the feedback. I'll excise all instances of  dot notation of the form <code>f.blimsup </code>.</p>",
        "id": 303585279,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1665565026
    },
    {
        "content": "<p>I have two follow-up questions:</p>\n<ol>\n<li>The file already contains many instances of <code>f.limsup</code>. Should I also excise these?</li>\n<li>Regarding argument ordering: I think <code>blimsup</code> should be consistent with <code>limsup</code>. This means either the filter must come first or I must change <code>limsup</code>. Should I attempt this as part of this work or defer for now?</li>\n</ol>\n<p>(Obviously all the above applies to <code>liminf</code> also.)</p>",
        "id": 303586038,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1665565306
    },
    {
        "content": "<p>I would change all this.</p>",
        "id": 303587918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665566051
    },
    {
        "content": "<p>OK thanks again, I'll do this later today.</p>",
        "id": 303589377,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1665566666
    },
    {
        "content": "<p>When making live natural numbers during e.g. school talks, <code>succ n</code> is bad enough, but with more recent Leans it comes out as <code>n.succ</code> which I have to disable with <code>pp.nodot</code>, another line of incomprehensible code (which is bad because you don't want people to switch off). Dot notation is 95% brilliant but it's funny that there are occasional times when it's not (The <code>x.log</code> example being another one).</p>",
        "id": 303611812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665576100
    },
    {
        "content": "<p>You could add a <code>pp_nodot</code> attribute to <code>nat.succ</code> and that would fix the problem forever.</p>",
        "id": 303619675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665578764
    },
    {
        "content": "<p>nonono, this is <code>mynat.succ</code> which is born in front of the students' eyes, and the less lines of incomprehensible code I need to write the better.</p>",
        "id": 303620062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665578911
    },
    {
        "content": "<p>Ah right. Can't you cheat by inserting a file in the middle that you never show?</p>",
        "id": 303620275,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665578986
    },
    {
        "content": "<p>yeah I've cheated in the past with an import</p>",
        "id": 303620791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665579173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2316819.20define.20.60filter.2Eblimsup.60.2C.20.60filter.2Ebliminf.60/near/303587918\">said</a>:</p>\n<blockquote>\n<p>I would change all this.</p>\n</blockquote>\n<p>I have now made all the changes discussed and succeeded in getting CI to pass. Thus, this PR now:</p>\n<ul>\n<li>removes all uses of dot notation for <code>filter.limsup</code>, <code>filter.liminf</code> in the file where these are defined</li>\n<li>reorders the arguments for <code>filter.limsup</code>, <code>filter.liminf</code>(moving the filter from first to second place) and makes all downstream fixes elsewhere in Mathlib</li>\n<li>defines <code>filter.blimsup</code>, <code>filter.bliminf</code> and provides some basic API</li>\n</ul>",
        "id": 303787748,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1665652724
    }
]