[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/2332\" title=\"https://github.com/leanprover-community/mathlib/issues/2332\">#2332</a> Yury removes some <code>decidable_eq</code>assumptions that were used in proofs but not in the statements. Could we have a linter for this, that says : your statement does not use <code>decidable_eq</code> but your proof does, could you instead turn classical?</p>",
        "id": 193021096,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586168471
    },
    {
        "content": "<p>Writing a linter is really easy.  If anybody wants to attempt this, you just need to copy&amp;paste <code>linter.inhabited_nonempty</code>.</p>",
        "id": 193022899,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586169536
    },
    {
        "content": "<p>It's more work to fix the new linting errors than writing the linter, I promise.</p>",
        "id": 193022935,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586169569
    },
    {
        "content": "<p>Documenting it seems harder. Yesterday I had a linter complaining about missing inhabited instance. I put nolint without understanding what this linter is about.</p>",
        "id": 193022965,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586169589
    },
    {
        "content": "<p>Floris made a start at implementing this linter a long time ago. I also tried, there should be a half-finished attempt on a branch somewhere. I don't remember if there was a theoretical problem or if it was just lots of effort to fix the errors.</p>",
        "id": 193023333,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586169786
    },
    {
        "content": "<p>Yeah, I'm not sure anymore if this linter was such a great idea.  Most of the linters were written carefully to produce very few false positives, so that you should never have to use <code>nolint</code>.  The motivation behind the <code>has_inhabited_instance</code> linter was that people should provide <code>inhabited</code> instances for <code>finset α</code>.  But it's ok not to have <code>inhabited</code> instances for types that are essentially Type-valued propositions, like the predicate for filters with countable bases in your last PR.</p>",
        "id": 193023451,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586169854
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232332/near/193022965\" title=\"#narrow/stream/144837-PR-reviews/topic/.232332/near/193022965\">said</a>:</p>\n<blockquote>\n<p>Documenting it seems harder. Yesterday I had a linter complaining about missing inhabited instance. I put nolint without understanding what this linter is about.</p>\n</blockquote>\n<p>You couldn't prove your instance was inhabited? Did you try 37?</p>",
        "id": 193023542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586169935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> I think Sébastien is asking for something different.  The linter you were working on was looking for <code>classical.decidable_eq</code> instances in the statement.  This linter here should complain about decidability assumptions on theorems that do <em>not</em> appear in the statement.</p>",
        "id": 193023562,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586169948
    },
    {
        "content": "<p>Oh, sorry, I should have read more carefully.</p>",
        "id": 193023666,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586169992
    },
    {
        "content": "<p>You're right, this one should be very easy to implement.</p>",
        "id": 193023680,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586170003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, for a long time I disliked the <code>has_inhabited_instance</code> linter, but when I realised it was a chance to write mini-examples I decided it was okay. Think of it as a documentation linter.</p>",
        "id": 193038081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586178326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232332/near/193021096\" title=\"#narrow/stream/144837-PR-reviews/topic/.232332/near/193021096\">said</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/2332\" title=\"https://github.com/leanprover-community/mathlib/issues/2332\">#2332</a> Yury removes some <code>decidable_eq</code>assumptions that were used in proofs but not in the statements. Could we have a linter for this, that says : your statement does not use <code>decidable_eq</code> but your proof does, could you instead turn classical?</p>\n</blockquote>\n<p>I am working on it. As Gabriel says, writing the linter is easy (I just copied the one for <code>inhabited_nonempty</code> -- by the way, it is only active for props, do you know why?), but fixing the issues it detects is much longer...</p>",
        "id": 193161652,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586252450
    },
    {
        "content": "<p>It is only active for <code>Prop</code>s because if the result is not a <code>Prop</code>, then might use <code>inhabited</code> in the definition, not the type.</p>",
        "id": 193162278,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586252829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> BTW, would it be hard to lint for \"asks for <code>inhabited</code>, uses only <code>inhabited.to_nonempty</code>\"?</p>",
        "id": 193162396,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586252886
    },
    {
        "content": "<p>That generalizes to \"asks for instance A, but all uses filter through A_of_B\"</p>",
        "id": 193162527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586252975
    },
    {
        "content": "<p>which sounds like a really useful lint; it would really quickly clean up all that \"all rings are commutative\" nonsense</p>",
        "id": 193162649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586253029
    },
    {
        "content": "<p>The linter is done in <a href=\"https://github.com/leanprover-community/mathlib/issues/2352\" title=\"https://github.com/leanprover-community/mathlib/issues/2352\">#2352</a>. The linter was easy to do, the cleanup of mathlib much more tedious (but definitely useful, I think). There are a few edge cases where I didn't know what to do, so I would like to hear your opinions. The following is copied from the PR message.</p>\n<p>There is the question of basic files such as <code>logic/basic.lean</code>, where the point is to prove weak theorems without excluded middle, so it wouldn't make sense to add classical in the proofs (although I don't really understand the point of these theorems). Also in <code>algebra/order.lean</code> you have a section <code>decidable</code> with lemmas such as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">decidable_rel</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>I understand the desire to have a decidability predicate to be able to compute and to program, but I really don't get why it matters when it comes to proving Props. So, I would happily remove the decidability assumption from this lemma and its friends, but I thought I would ask here first.</p>\n<p>Also, there is the lemma <code>imp_of_not_imp_not</code> in <code>tactic/push_neg</code>. If I drop the decidability assumption and make it classical, then the tactic does not work any more, so I didn't touch it.</p>",
        "id": 193211152,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586275693
    },
    {
        "content": "<p>I am on the classical side.  I don't see a point in having decidability assumptions on lemmas.</p>",
        "id": 193211470,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586275825
    },
    {
        "content": "<p>I vote for \"go classical outside of <code>logic/basic</code>\"</p>",
        "id": 193218566,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586279103
    },
    {
        "content": "<p>Yeah, leaving <code>logic.basic</code> as home for intuitionists seems like a fair deal.</p>",
        "id": 193218662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586279154
    },
    {
        "content": "<p>Not in the sense \"open_locale classical\" but in the sense of this PR: don't assume <code>decidable</code> if you just want the excluded middle.</p>",
        "id": 193218729,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586279171
    },
    {
        "content": "<p>Honestly, I don't think that mathlib is the right place to play with intuitionism.  Most results depend on classical logic, and definitely on the law of excluded middle.  On the other hand, keeping central files like <code>logic/basic</code> intuitionistic has downsides: e.g. <code>simp</code> will give bad results if you don't <code>open_locale classical</code>.</p>",
        "id": 193220426,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586280017
    },
    {
        "content": "<p>A middle way is to remove the simp attribute from all the lemmas that have too strong assumptions in <code>logic/basic</code>, and put it on the corresponding lemmas without the decidability assumption. If I had it my way, I would remove all decidability assumptions from the lemmas in this file also. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , any thoughts on this?</p>",
        "id": 193222380,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586280908
    },
    {
        "content": "<p>I like the solution I used in <code>algebra.order</code> regarding linear order theorems. There, there are several theorems that prove the same things as in linear orders but without choice, and they live in the <code>decidable</code> namespace and take an additional <code>decidable</code> argument. No one references these theorems, which is fine, no one is harmed by the presence of the side condition.</p>\n<p>My proposal for <code>logic.basic</code> would be to rename all the theorems with <code>decidable</code> assumptions to have <code>decidable</code> prefix, and remove the <code>classical</code> prefix from those which have it, essentially switching the default choice. Many theorems only have a decidable version right now; let's make all of them classical. We can also remove any <code>decidable.*</code> theorems that don't look useful or applicable (I mean, how often are you going to have <code>decidable (\\exists x, p x)</code> available?), or even remove them all and re-add them on an as-needed basis.</p>\n<p>The intent is to use <code>decidable.*</code> theorems when we are in a context that is known to be decidable, and when we also care about avoiding choice. If you don't fulfill both of those conditions feel free to never touch these lemmas, but also don't block any PRs that use them in order to make a particular target theorem choice free. Does this sound reasonable?</p>",
        "id": 193252722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586296153
    },
    {
        "content": "<p>Also, sometimes a theorem can be proven choice free without the decidability assumption. For example <code>lt_of_le_of_ne'</code> is a replacement for <code>lt_of_le_of_ne</code> that uses a proof that avoids choice. In this case, I think we should just replace the original theorem and skip the <code>decidable</code> prefix. Again, the rule for PRs would be, don't feel obligated to avoid choice but allow people to make refactors of your code later to fix up choice usage, as long as it doesn't affect theorem statements.</p>",
        "id": 193253204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586296423
    },
    {
        "content": "<p>I like this plan a lot.</p>",
        "id": 193274454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586319484
    },
    {
        "content": "<p>May I suggest that we postpone this to a later PR, and merge <a href=\"https://github.com/leanprover-community/mathlib/issues/2332\" title=\"https://github.com/leanprover-community/mathlib/issues/2332\">#2332</a> rather quickly? Since the PR touches 40 files, I am afraid that merge conflicts will show up all the time.</p>",
        "id": 193282111,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586330035
    },
    {
        "content": "<p>Do you mean <a href=\"https://github.com/leanprover-community/mathlib/issues/2352\" title=\"https://github.com/leanprover-community/mathlib/issues/2352\">#2352</a>?</p>",
        "id": 193282367,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586330231
    },
    {
        "content": "<p>Yes, sorry.</p>",
        "id": 193284162,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586331588
    }
]