[
    {
        "content": "<p>Responding in more depth to <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's comment about the theorem actually being true for <code>p=1</code>. This sort of thing came up earlier in <a href=\"#narrow/stream/113488-general/topic/Units.20of.20zmod.201\">this thread</a>. </p>\n<p>Another thing is the lemma <code>prime_iff_card_units</code>, which is actually true <em>even if <code>p = 0</code></em>, since <code>p-1 = 0</code> and <code>fintype.card (units (zmod p)) = 2</code>. But that gets back to the thread on <code>fintype (units (zmod n))</code> and how easy it is to make a computable instance of that fintype. </p>\n<p>To me it just feels more natural to put in the condition that <code>p</code> is big enough that we have a nondegenerate ring, even if it's not strictly needed.</p>",
        "id": 252789051,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631281552
    },
    {
        "content": "<p>It might be more natural, but the question is which version is easier to use down the road.</p>",
        "id": 252789168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631281602
    },
    {
        "content": "<p>To add to that: If its too difficult to prove the degenerate ring case, then that probably means some api is missing and there is a gap to be filled there, ideally dealing with the degenerate case should just take a couple of lines.</p>",
        "id": 252789521,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1631281774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238820.20Lucas.20Primality/near/252789168\">said</a>:</p>\n<blockquote>\n<p>It might be more natural, but the question is which version is easier to use down the road.</p>\n</blockquote>\n<p>I agree.</p>\n<p>In my mind, it's more likely that someone would be trying to encounter problems thinking \"Wait was it 0 &lt; p or 1 &lt; p, I guess its probably 1 &lt; p because it doesn't make sense to compare something to 1 in zmod 1\", than for someone to want to apply this theorem when p = 1, since the theorem is vacuous in that case anyway.</p>",
        "id": 252789772,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631281890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> Sure, I don't think it will be applied to <code>p = 1</code>. But proving that a number is positive is usually a lot easier than proving that it is <code>&gt; 1</code>. Simply because there are many more lemmas of the form <code>pos_of_foobar</code></p>",
        "id": 252790403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631282126
    },
    {
        "content": "<p>You only need to prove <code>p \\ne 0</code>. And there are many lemmas with such a conclusion as well.</p>",
        "id": 252790451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631282146
    },
    {
        "content": "<p>So even if you apply the lemma to <code>n^2 + n + k</code>, it will be easier if you only need to check that this expression is nonzero.</p>",
        "id": 252790579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631282182
    },
    {
        "content": "<p>Motto: \"Make your life harder so that we don't\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 252790607,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1631282196
    },
    {
        "content": "<p>For me, superfluous hypotheses which don't need to be there make things more confusing not less, because I am confused about why they're there (whereas the fact that 0=1 in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>1</mn><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/1\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/1</span><span class=\"mord mathbb\">Z</span></span></span></span> is not at all confusing to me)</p>",
        "id": 252792166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631282757
    },
    {
        "content": "<p>Ok, well, I guess I'm outnumbered.</p>",
        "id": 252792906,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631283033
    },
    {
        "content": "<p>What's happening is that we all know from weary experience that what we're suggesting is better in the long run.</p>",
        "id": 252792975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631283065
    },
    {
        "content": "<p>We all learnt this in our own ways. Mine was back in 2017 when we didn't have <code>real.sqrt</code> and I wrote one under the hypothesis that the input was &gt;=0, and was told that I should remove this hypothesis and just return junk for negative reals. I thought this was crazy so I ignored people and stuck to my own ideas, but then once I'd got sick of filling in many many proofs that 2&gt;0, 3&gt;0, 6&gt;0,... when trying to prove some simple question about square roots I began to see the point of view of the others.</p>",
        "id": 252793228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631283175
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> has commented on the PR, you don't even need any assumption on <code>p</code> at all. This makes the decision much clearer.</p>",
        "id": 252802596,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631287046
    },
    {
        "content": "<p>But from that comment, it seems like he thought <code>zmod 0</code> was an empty type. This  makes me feel like people will continue to be confused by <code>zmod 0</code> if something isn't done to make it clear that <code>[fact (0 &lt; n)]</code> is often needed when using it.</p>",
        "id": 252803530,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631287444
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>0</mn><mi mathvariant=\"double-struck\">Z</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/0\\Z=\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/0</span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> right?</p>",
        "id": 252803592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631287481
    },
    {
        "content": "<p>That doesn't look confusing to me (although of course it will confuse the computer scientists because I'm using mathematical equality ;-) )</p>",
        "id": 252803641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631287508
    },
    {
        "content": "<p>Yes, it's very natural if you are used to thinking about modding out rings by ideals, but when you happily assume that <code>zmod n</code> is finite, you hit a brick wall if you're a computer scientist.</p>",
        "id": 252803829,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1631287599
    },
    {
        "content": "<p>yeah but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>0</mn><mi mathvariant=\"double-struck\">Z</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/0\\Z=\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/0</span><span class=\"mord mathbb\">Z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> right?</p>",
        "id": 252805846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631288388
    },
    {
        "content": "<p>I have found a bit more time to try to finish this, but there's one suggestion from <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  which is tripping me up. See the PR for details, but when I do the version of <code>card_units_zmod_lt_sub_one</code> which has the <code>[fintype (units (zmod p))]</code> argument, I get a \"did not find instance of pattern\" in a situation where it seems like the pattern is right there. Is a diamond causing this?</p>",
        "id": 259427363,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635443663
    },
    {
        "content": "<p>Have you merged master recently?</p>",
        "id": 259428655,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635444117
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.fintype\">docs#units.fintype</a> was changed recently</p>",
        "id": 259428739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635444136
    },
    {
        "content": "<p>I merged master two days ago, after which this issue started occurring.</p>",
        "id": 259429589,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635444511
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 259430119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635444809
    },
    {
        "content": "<p>I can take a look tomorrow</p>",
        "id": 259430292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635444917
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 259430649,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635445107
    },
    {
        "content": "<p>Usually a <code>convert</code> will solve the type of problem you're seeing</p>",
        "id": 259432692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635446033
    },
    {
        "content": "<p>What was the rewrite by that didn't match?</p>",
        "id": 259433269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635446300
    },
    {
        "content": "<p>I found some time tonight; github wouldn't let me comment on the relevant lines, so I just pushed the change I was suggesting; feel free to revert if you don't like it (although maybe make a comment why first!)</p>",
        "id": 259448638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635453497
    },
    {
        "content": "<p>The upshot is that <code>prime_iff_card_units</code> now applies when <code>p = 0</code> too.</p>",
        "id": 259448673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635453524
    },
    {
        "content": "<p>I'm talking about the proof of <code>card_units_zmod_lt_sub_one</code>, this is what I have, which gives me the error I mentioned.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">card_units_zmod_lt_sub_one</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">â</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">))]:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">â¤</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">hp'</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">@</span><span class=\"n\">zmod.card_units_eq_totient</span> <span class=\"n\">p</span> <span class=\"n\">hp'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat.le_pred_of_lt</span> <span class=\"o\">(</span><span class=\"n\">nat.totient_lt</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 259459398,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635459326
    },
    {
        "content": "<p>Sorry to keep questioning the maintainers' suggestions for this PR, but isn't this version a little harder to use than the one which just has the default typeclass argument? Is there a way to change this version so that there is a default argument like there is in the current version?</p>",
        "id": 259459519,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635459404
    },
    {
        "content": "<p>Perhaps the idea is that the fintype type class is more likely to be present when using this theorem?</p>",
        "id": 259460412,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635460018
    },
    {
        "content": "<p>Ah I see you pushed a change that fixes it, thanks!</p>",
        "id": 259461061,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1635460561
    },
    {
        "content": "<p>The typeclass is needed to even state the theorem so must always be present</p>",
        "id": 259463747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635462313
    },
    {
        "content": "<p>Yes, I pushed a fix, sorry if that wasn't clear</p>",
        "id": 259463748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635462313
    }
]