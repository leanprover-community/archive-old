[
    {
        "content": "<p>This PR contains just the changes to <code>data/sym/basic</code> extracted from Huỳnh Trần Khanh's proof of \"stars and bars\" (originally in <a href=\"https://github.com/leanprover-community/mathlib/pull/11162\">#11162</a>), which I'm gradually trying to get merged.  For some reason I don't understand, the <code>simp_nf</code> linter is complaining about something that hasn't changed.</p>\n<p>The offending code is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">map_id</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sym.map</span> <span class=\"n\">id</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">sym.map</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which produces the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">sym.map_id</span> <span class=\"bp\">-</span> <span class=\"n\">Left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span> <span class=\"n\">simplifies</span> <span class=\"k\">from</span>\n    <span class=\"n\">sym.map</span> <span class=\"n\">id</span> <span class=\"n\">s</span>\n<span class=\"n\">to</span>\n    <span class=\"n\">sym.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n<span class=\"n\">using</span>\n    <span class=\"o\">[</span><span class=\"n\">id.def</span><span class=\"o\">]</span>\n\n<span class=\"n\">Try</span> <span class=\"n\">to</span> <span class=\"n\">change</span> <span class=\"n\">the</span> <span class=\"n\">left</span><span class=\"bp\">-</span><span class=\"n\">hand</span> <span class=\"n\">side</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">simplified</span> <span class=\"n\">term</span><span class=\"bp\">!</span>\n</code></pre></div>\n<p>But the relevant two lines are identical to the version in <code>master</code>, so I don't understand why they're failing CI in this PR.</p>",
        "id": 276746663,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648329975
    },
    {
        "content": "<p>Note that Khahn's original code dealt with this by following the linter's advice and changing this line to <code>sym.map (λ (x : α), x) s = s</code>.  (At least, that's the only reason I can see for having introduced that change).  But after <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s <a href=\"https://github.com/leanprover-community/mathlib/pull/12479#discussion_r820278450\">comment</a> I've reverted this to <code>sym.map id s = s</code> as it originally was.</p>",
        "id": 276746857,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648330236
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/id.def\">docs#id.def</a> is an <em>applied</em> lemma, and your statement doesn't have <code>id</code> applied, so this might be a change in behavior from <code>simp</code>?</p>",
        "id": 276746973,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648330366
    },
    {
        "content": "<p>What do you mean by an \"applied lemma\"?</p>",
        "id": 276747045,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648330445
    },
    {
        "content": "<p><code>id a = a</code> vs <code>id = λ a, a</code></p>",
        "id": 276747068,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648330495
    },
    {
        "content": "<p>If this is caused by a change in <code>simp</code> then why hasn't this file failed CI before now? (i.e. whenever that change to <code>simp</code> was first introduced)</p>",
        "id": 276747091,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648330555
    },
    {
        "content": "<p>This is really weird...</p>",
        "id": 276748064,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648331890
    },
    {
        "content": "<p>I guessed it would either be something trivial or something weird <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 276748329,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648332191
    },
    {
        "content": "<p>Does the <code>open function</code> line make simp behave differently?</p>",
        "id": 276748349,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1648332239
    },
    {
        "content": "<p>I've just tried commenting out that line (and inserting <code>function.</code> where needed) and the linter still fails with the same error.</p>",
        "id": 276748835,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648332918
    },
    {
        "content": "<p>I don't know if this helps, but it occurs to me that if Khanh made the edit described above in response to this linter error then that means that this linter problem dates back at least to 31/12/2021 when <a href=\"https://github.com/leanprover-community/mathlib/pull/11162\">#11162</a> was posted.</p>",
        "id": 276750497,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648335380
    },
    {
        "content": "<p>The declaration which causes the trouble is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span> <span class=\"kd\">lemma</span> <span class=\"n\">map_congr</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.ext</span> <span class=\"bp\">$</span> <span class=\"n\">multiset.map_congr</span> <span class=\"n\">rfl</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 276750503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648335388
    },
    {
        "content": "<p>Ahah! Gabriel probably knows about this then</p>",
        "id": 276750529,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648335449
    },
    {
        "content": "<p>The code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">map_id'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sym.map</span> <span class=\"n\">id</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">id.def</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails before that congr lemma is added (<code>simp</code> made no progress, which is good), but succeeds after the congr lemma, because the weird <code>id.def</code> rewrite now happens and the goal changes to <code>map (λ (x : α), x) s = s</code></p>",
        "id": 276750539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648335470
    },
    {
        "content": "<p>Probably it makes sense to have <code>map_id</code> as a normal lemma, and <code>map_id'</code> as a simp lemma</p>",
        "id": 276751118,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648336109
    },
    {
        "content": "<p>Aren't they the same lemma?</p>",
        "id": 276751305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648336397
    },
    {
        "content": "<p>Not synctatically, at least</p>",
        "id": 276751367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648336457
    },
    {
        "content": "<p>I think we must be talking at cross purposes.</p>",
        "id": 276751396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648336525
    },
    {
        "content": "<p>I think Eric is suggesting that we have </p>\n<ul>\n<li><code>map_id'</code> written using <code>sym.map (λ (x : α), x) s</code> and marked as a <code>simp</code> lemma, and </li>\n<li><code>map_id</code> written using <code>sym.map id s</code> and not marked as a <code>simp</code> lemma (and therefore not running into the linter problem)</li>\n</ul>",
        "id": 276751703,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648336976
    },
    {
        "content": "<p>So we would rather have the <code>congr</code> lemma? What does it do? Does it cause other problems? What problems does the tag solve? (I don't have a clue, I should say)</p>",
        "id": 276751776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648337066
    },
    {
        "content": "<p>I suppose it means that when <code>simp</code> encounters <code>sym.map f s</code> it will try to simplify not <code>f</code> but <code>f x</code> with <code>h : x \\in s</code> in the context</p>",
        "id": 276752062,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648337455
    },
    {
        "content": "<p>That seems undesirable if a side effect is to simplify <code>map id s</code> to <code>map (λ (x : α), x) s</code></p>",
        "id": 276752093,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648337519
    },
    {
        "content": "<p>this isdefinitely to do with the new congr lemma support</p>",
        "id": 276752396,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648337972
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 276752398,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648337978
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_congr\">docs#set.image_congr</a> already has this behavior</p>",
        "id": 276863232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648469496
    },
    {
        "content": "<p>Which means <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_id\">docs#set.image_id</a> is not a simp lemma but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image_id'\">docs#set.image_id'</a> is</p>",
        "id": 276863314,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648469525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422543\">Stuart Presnell</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312479.20simp_nf.20linter.20error.20in.20data.2Fsym.2Fbasic/near/276751703\">said</a>:</p>\n<blockquote>\n<p>I think Eric is suggesting that we have </p>\n<ul>\n<li><code>map_id'</code> written using <code>sym.map (λ (x : α), x) s</code> and marked as a <code>simp</code> lemma, and </li>\n<li><code>map_id</code> written using <code>sym.map id s</code> and not marked as a <code>simp</code> lemma (and therefore not running into the linter problem)</li>\n</ul>\n</blockquote>\n<p>So I think we should go ahead with this, as it matches the design of the <code>set.image</code> API</p>",
        "id": 276863388,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648469561
    },
    {
        "content": "<p>Note that we removed <code>@[simp]</code> from <code>set.image_id</code> two years ago due to the first iteration of the simp_nf linter flagging it - so I don't think this is a new problem</p>",
        "id": 276863591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648469649
    },
    {
        "content": "<p>The question of whether we want simp to be eta expanding functions in the presence of congr lemmas and then applying simp lemmas to the eta expanded forms is a separate one. Is the idea that this is okay because non-terminal simps are bad anyways?</p>",
        "id": 276865828,
        "sender_full_name": "Reid Barton",
        "timestamp": 1648470752
    },
    {
        "content": "<p>That separate question might be best asked in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a> using <code>set.image</code> to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 276867318,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648471599
    },
    {
        "content": "<p>Same goes for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.map_id'\">docs#filter.map_id'</a></p>",
        "id": 276870325,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648472906
    },
    {
        "content": "<p>I've added both versions to the PR as described above.  I've also added the following comment so we can find this and remove the duplication if and when the underlying issue is resolved.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The duplication in the following two lemmas is to avoid a complaint from the simp_nf linter -/</span>\n</code></pre></div>",
        "id": 277260549,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648722725
    },
    {
        "content": "<p>Is there a particular reason why <code>α</code> should be <code>Type u</code> rather than <code>Type*</code>? Or can <code>universes u</code> be deleted?</p>",
        "id": 277269021,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1648727823
    },
    {
        "content": "<p>The main argument is just to make it print more nicely</p>",
        "id": 277271695,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648729245
    },
    {
        "content": "<p><code>u</code> is more readable than the <code>u_1</code> that gets generated</p>",
        "id": 277271707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648729253
    },
    {
        "content": "<p>Otherwise in a <code>variables</code> statement it makes essentially no difference.</p>",
        "id": 277271735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648729269
    },
    {
        "content": "<p>You should probably either add a <code>v</code> universe for beta, or remove the u universe from alpha, to make them consistent</p>",
        "id": 277271796,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648729297
    }
]