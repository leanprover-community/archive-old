[
    {
        "content": "<p>This is a very nice PR which deals with integer-valued valuations, but in multiplicative language. This means there's quite a lot of <code>with_zero (multiplicative ℤ)</code>s which is quite a mouthful. Any opinions on something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℤₘ₀</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or maybe even a localized notation?</p>",
        "id": 281550245,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1651943284
    },
    {
        "content": "<p>I am very behind the idea of having notation for both this and the nat version</p>",
        "id": 281552932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651946593
    },
    {
        "content": "<p>This arises also in the context of polynomials/Laurent polynomials, where the valuation is <code>degree</code> (although the <code>multiplicative</code> is quite unusual as a convention!).  I am also in favour of making this type simpler to type!</p>",
        "id": 281553083,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651946787
    },
    {
        "content": "<p>I just realised that since we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_valuation\">docs#add_valuation</a> defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_valuation</span> <span class=\"o\">:=</span> <span class=\"n\">valuation</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"bp\">Γ₀ᵒᵈ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>we should probably prefer <code>multiplicative (with_top ℤᵒᵈ)</code> over <code>with_zero (multiplicative ℤ)</code>.</p>",
        "id": 281666714,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652093893
    },
    {
        "content": "<p>In any case, this PR is on its way to master but once it has landed I'll look more closely at this notation idea.</p>",
        "id": 281666716,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652093896
    },
    {
        "content": "<p>Probably <code>multiplicative (with_top ℤᵒᵈ)</code> instead, right?</p>",
        "id": 281666809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652093974
    },
    {
        "content": "<p>Yes, thanks. Corrected!</p>",
        "id": 281666894,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652094006
    },
    {
        "content": "<p>That's still not what I wrote <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I want to take <code>order_dual</code> before <code>with_bot</code> or <code>with_top</code>.</p>",
        "id": 281667172,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652094076
    },
    {
        "content": "<p>I've literally just realised this :-) Give me a second to keep up with you!</p>",
        "id": 281667200,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652094099
    },
    {
        "content": "<p>In any case, I'll return to think about this more carefully this afternoon once <a href=\"https://github.com/leanprover-community/mathlib/pull/13462\">#13462</a> is in master.</p>",
        "id": 281667333,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652094188
    },
    {
        "content": "<p>Looking more carefully now, I think the above is still not right.</p>\n<p>It seems to me that to get the compatibility with <code>add_valuation</code> we would have to prefer <code>multiplicative (with_top ℤᵒᵈ)ᵒᵈ</code> over <code>with_zero (multiplicative ℤ)</code>, which, frankly, I don't!</p>\n<p>In other words I don't see that <code>add_valuation R (with_top Γᵒᵈ)</code> is any more attractive than <code>valuation R (with_zero (multiplicative Γ))</code> (where <code>Γ = ℤ</code> above).</p>",
        "id": 281709151,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652113303
    },
    {
        "content": "<p>So that brings me back to my original idea that perhaps we should introduce something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℤₘ₀</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">with_zero</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 281709491,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652113418
    },
    {
        "content": "<p>I finally got round to making a concrete proposal: <a href=\"https://github.com/leanprover-community/mathlib/pull/14064\">#14064</a></p>",
        "id": 281862210,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652205394
    }
]