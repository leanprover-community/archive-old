[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I saw you fixed some stuff, but Travis is still complaining... If you don't have time for this, just let me know, and I'll try to take a look.</p>",
        "id": 152239436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545291560
    },
    {
        "content": "<p>Think I've got it now. That intermediate commit was just getting work from my office computer to my laptop.</p>",
        "id": 152241278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545294260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I get that you don't like the idea of making <code>op</code> irreducible. So what is the best way forward? Just now I had to compose two arrows <code>f</code> and <code>g</code>, but <code>f</code> lived in the opposite category... so Lean complained. I would love to just write <code>f.unop</code> and move on. What do you think is the best solution?</p>",
        "id": 152389993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545486582
    },
    {
        "content": "<p>you can have <code>unop</code> without making <code>op</code> irreducible</p>",
        "id": 152390040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545486612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Would you welcome a PR that puts <code>op</code> and <code>unop</code> throughout the library without making <code>op</code> irreducible?</p>",
        "id": 155339244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547735686
    },
    {
        "content": "<p>sure</p>",
        "id": 155345431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547740072
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/leanprover/mathlib/issues/510\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/510\">#510</a> no longer actually makes <code>opposite</code> irreducible. This PR has some useful cleanup in other category_theory files, as well.</p>",
        "id": 156433638,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1547897222
    },
    {
        "content": "<p>It's hard to understand what is going on when reviewing a commit which contains a combination of substantial changes (like to <code>op</code>), general cleanup, and new features.</p>",
        "id": 156597595,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548157003
    },
    {
        "content": "<p>Miscellaneous cleanup PRs are fine, but they shouldn't be mixed in with actual changes.</p>",
        "id": 156597623,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548157059
    },
    {
        "content": "<p>Did we come to the conclusion that <code>opposite</code> should not be irreducible? Or are we just not changing it for now?</p>",
        "id": 156597697,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548157132
    },
    {
        "content": "<p>Mario does not want it to be irreducible. I have no clue what's good. And others seemed to not care very much (-;</p>",
        "id": 156597713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548157170
    },
    {
        "content": "<p>So for now it won't be irreducible.</p>",
        "id": 156597718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548157180
    },
    {
        "content": "<p>Hmm, but I see <code>hom.op</code> and <code>hom.unop</code> are irreducible?</p>",
        "id": 156598117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548157691
    },
    {
        "content": "<p>Is that intentional?</p>",
        "id": 156598120,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548157695
    },
    {
        "content": "<p>and then sometimes they get made not irreducible</p>",
        "id": 156598126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548157706
    },
    {
        "content": "<p>I guess I don't really understand what the plan is that involves introducing <code>op</code> and <code>unop</code> but not making <code>opposite</code> irreducible (or even a structure). I feel like we don't have a good chance of putting <code>op</code>/<code>unop</code> in all the right spots if not forced to do so by irreducibility of <code>opposite</code>, and then whatever problem we solve with <code>op</code>/<code>unop</code> will continue to show up later.</p>",
        "id": 156598378,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548158100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What do you think about <span class=\"emoji emoji-2b06\" title=\"up\">:up:</span> ?</p>",
        "id": 156598402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548158157
    },
    {
        "content": "<p>I think what we really want is a one-member structure with definitional eta, and this <code>irreducible</code> thing is the closest approximation we can make</p>",
        "id": 156598476,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548158272
    },
    {
        "content": "<p>I wonder whether we need <code>category.hom.op</code> at all</p>",
        "id": 156599932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548159882
    },
    {
        "content": "<p>I've had breakage because Lean thought <code>f</code> was in the opposite category and I wanted something in <code>C</code>.</p>",
        "id": 156600126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548160163
    },
    {
        "content": "<p>Or are you saying we only need <code>unop</code>?</p>",
        "id": 156600132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548160178
    },
    {
        "content": "<p>Okay, after some experimentation, removing <code>category.hom.op</code> seems like a bad idea</p>",
        "id": 156600316,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548160354
    },
    {
        "content": "<p>But I'm not very happy about marking them as irreducible but then undoing that in various places.</p>",
        "id": 156600338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548160396
    },
    {
        "content": "<p>I think all this <code>hom.op</code> stuff doesn't address the real issue though</p>",
        "id": 156600750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548160859
    },
    {
        "content": "<p>it's still easy to end up with goals like <code>F.map g ≫ F.map f = F.map f ≫ F.map g</code></p>",
        "id": 156600821,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548160919
    },
    {
        "content": "<p>I think the right way to do this would be to give the hom sets the same treatment as the objects, but it seems to be impossible without splitting out the <code>hom</code> field into its own class</p>",
        "id": 156601769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548161932
    },
    {
        "content": "<p>which I think we may want to do anyways</p>",
        "id": 156601780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548161953
    },
    {
        "content": "<p>For example, the definition of composition in the opposite category should not be <code>λ _ _ _ f g, g ≫ f</code> but <code>λ _ _ _ f g, (g.unop ≫ f.unop).op</code></p>",
        "id": 156603158,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548163426
    },
    {
        "content": "<p>I would also be willing to try just using a structure</p>",
        "id": 156604715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548165045
    },
    {
        "content": "<p>In fact, maybe we can even reuse <a href=\"https://github.com/leanprover/mathlib/pull/538\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/538\">https://github.com/leanprover/mathlib/pull/538</a>?</p>",
        "id": 156606540,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548166494
    }
]