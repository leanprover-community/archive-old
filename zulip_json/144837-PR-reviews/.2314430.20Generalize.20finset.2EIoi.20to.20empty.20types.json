[
    {
        "content": "<p>This introduces two new classes to deal with <code>finset.Ixi</code> and <code>finset.Iix</code>. They are barely more general than <code>locally_finite_order</code> + <code>order_bot</code>, but in a way which makes many uses smoother (see <a href=\"https://github.com/leanprover-community/mathlib/pull/14448\">#14448</a>). The motivation is mostly <code>fin</code>. Any more thoughts?</p>",
        "id": 285852743,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655054635
    },
    {
        "content": "<p>My stance was that I was generally in favor, but wanted to be sure the design worked for things othen than fin that might come up. Can anyone think of a parameterized family of types that is sometimes empty other than <code>fin n</code> with <code>n = 0</code> and types built upon it?</p>",
        "id": 285856781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655060640
    },
    {
        "content": "<p><code>subtype p</code> with <code>p x = false</code> is all I can come up with, but that's not particularly interesting and <code>subtype.locally_finite_order_bot</code> in the PR is the case we actually need anyway.</p>",
        "id": 285856865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655060762
    },
    {
        "content": "<p>All I can think of is <code>α × β</code> where <code>α</code> is empty and <code>β</code> is not a <code>locally_finite_order_bot</code>. I don't think any of my instances cover this case.</p>",
        "id": 285857102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655061091
    },
    {
        "content": "<p>Ah, but that's not a family that satisfies <code>locally_finite_order_bot</code> everywhere</p>",
        "id": 285858593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655063003
    },
    {
        "content": "<p>Yeah, right. So I actually come up with an example <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 285858725,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655063195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2314430.20Generalize.20finset.2EIoi.20to.20empty.20types/near/285856781\">said</a>:</p>\n<blockquote>\n<p>Can anyone think of a parameterized family of types that is sometimes empty other than <code>fin n</code> with <code>n = 0</code> and types built upon it?</p>\n</blockquote>\n<p>The set unit-length eigenvectors of some operator on a real inner product space, parameterized by eigenvalues?</p>",
        "id": 285892031,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655106453
    },
    {
        "content": "<p>(disclaimer: I haven't looked at the PR so maybe that's not really an example)</p>",
        "id": 285892056,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655106474
    },
    {
        "content": "<p>Is this a locally finite order?</p>",
        "id": 286006361,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655165964
    },
    {
        "content": "<p>Mostly, do we need to treat it as such?</p>",
        "id": 286006379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655165986
    },
    {
        "content": "<p>If we really can't find any other example, what about we merge this now?</p>",
        "id": 286029405,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655190174
    },
    {
        "content": "<p>Surely a lack of examples is evidence against merging?</p>",
        "id": 286036391,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655194626
    },
    {
        "content": "<p>except that we do have an example, namely <code>fin n</code>, and <a href=\"https://github.com/leanprover-community/mathlib/pull/14448\">#14448</a> shows how much these new classes simplify various parts of the library (mostly matrix stuff).</p>",
        "id": 286036642,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655194770
    },
    {
        "content": "<p>Perhaps I misunderstood your message (to me it read as \"fewer examples =&gt; let's merge\"). Speaking for myself I'm at absolute capacity in terms of what I can look at today so I can't help here for now.</p>",
        "id": 286036886,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655194909
    },
    {
        "content": "<p>For the record, my null hypothesis is that you're correct but I always want to judge a PR based on understanding its contents, rather than its author.</p>",
        "id": 286036972,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655194950
    },
    {
        "content": "<p>Ah no. The question wasn't merging vs not but rather merging in this form vs another. This form accommodates <code>fin n</code> and Eric's argument was that we should try to accommodate other examples. But as it turns out we can't think of any other.</p>",
        "id": 286037661,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655195306
    },
    {
        "content": "<p>My argument was that we should either accommodate other examples, or convince ourselves there aren't any interesting ones</p>",
        "id": 286041546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655197393
    },
    {
        "content": "<p>The eigenvalue situation described above feels like it probably ends up falling out of the <code>subtype</code> case</p>",
        "id": 286043260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655198456
    },
    {
        "content": "<p>Do we have that <code>coe_sort s</code> where <code>s : finset X</code> (but not <code>locally_finite X</code>)  is a locally finite order?</p>",
        "id": 286043346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655198521
    },
    {
        "content": "<p>Ah, we don't becuase it would form a diamond with the case where <code>X</code> <em>is</em> locally-finite</p>",
        "id": 286049238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655201704
    },
    {
        "content": "<p>So I guess the type of diamond I was worried about already exists so there's not much point worryinb about <code>Ioi</code> making it worse</p>",
        "id": 286049275,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655201729
    }
]