[
    {
        "content": "<p>Hi, I made quite a few changes to <a href=\"https://github.com/leanprover-community/mathlib/issues/6355\">#6355</a>:</p>\n<ul>\n<li>moved <code>finsupp.of_finite_support</code> to <a href=\"https://github.com/leanprover-community/mathlib/issues/6777\">#6777</a>, add <code>can_lift</code> instance;</li>\n<li>simplify many proofs by using <code>lift s to finset α</code>;</li>\n<li>drop <code>set.to_finset'</code> - not required for <code>finsum</code>; IMHO should be PRd separately;</li>\n<li>add <code>function.mul_support</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/6791\">#6791</a> so that we can have <code>finprod</code>;</li>\n<li>drop connection to <code>finsupp</code>; I have a (not yet coded) idea to redo <code>finsupp</code> without <code>finset</code>s using <code>finsum</code> instead of <code>finset.sum</code>;</li>\n<li>drop some lemmas about intersection, possibly they should be restored (IMHO they are superseded by <code>finsum_in_eq_sum_of_inter_support_eq</code> and <code>finsum_in_eq_sum_of_subset</code> but I may be wrong).</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Please let me know if you don't like the changes.</p>",
        "id": 231180734,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616285585
    },
    {
        "content": "<p>One more reason for removing <code>inter</code> lemmas was that they abused <code>set α = α → Prop</code> (i.e., they used <code>s ∩ p</code> and <code>p x</code> instead of <code>s ∩ {x | p x}</code> or <code>s ∩ t</code> and <code>x ∈ t</code>).</p>",
        "id": 231182306,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616287682
    },
    {
        "content": "<p>This is great! I really like this refactor. I guess we can simply change the sums to prods after <a href=\"https://github.com/leanprover-community/mathlib/pull/6791/files\">#6791</a> gets merged</p>",
        "id": 231183820,
        "sender_full_name": "Jason KY.",
        "timestamp": 1616289693
    },
    {
        "content": "<p>I'm going to merge the <code>mul_support</code> branch and migrate to <code>to_additive</code></p>",
        "id": 231186732,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616293703
    },
    {
        "content": "<ul>\n<li>[x] multiplicative support <a href=\"https://github.com/leanprover-community/mathlib/issues/6791\">#6791</a></li>\n<li>[x] multiplicative indicator <a href=\"https://github.com/leanprover-community/mathlib/issues/6794\">#6794</a> (waiting for CI to fix build)</li>\n<li>[ ] finprod</li>\n</ul>",
        "id": 231191609,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616300081
    },
    {
        "content": "<p>Wow, many thanks for all this Yury. I agree that these are good ideas. Thanks for working on this!</p>",
        "id": 231201522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616314252
    },
    {
        "content": "<p>It doesn't compile. I'm fixing it now.</p>",
        "id": 231222377,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616340037
    },
    {
        "content": "<p>(I need both <code>finsum</code> and <code>finprod</code> for partition of unity; it's possible to define it without <code>finsum</code>/<code>finprod</code> but it's much less convenient)</p>",
        "id": 231222948,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616340721
    },
    {
        "content": "<p>Can I help in any way?</p>",
        "id": 231223601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616341382
    },
    {
        "content": "<p>I'm waiting for CI; should compile now.</p>",
        "id": 231229952,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616348428
    },
    {
        "content": "<p>Now I have another idea: what if we use some <code>plift</code> magic to make <code>∑ᶠ i &lt; 5, f i</code> work?</p>",
        "id": 231229985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616348494
    },
    {
        "content": "<p>With <code>∑ᶠ i ∈ s, f i</code> as a special case.</p>",
        "id": 231230006,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616348523
    },
    {
        "content": "<p>I mean this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[irreducible]</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">finsum</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">plift.down</span><span class=\"o\">))</span> <span class=\"k\">then</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">h.to_finset</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i.down</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 231230311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616348874
    },
    {
        "content": "<p><code>plift</code> is needed because <code>finite</code> is defined on <code>Type*</code> not <code>Sort*</code>?</p>",
        "id": 231231207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616349673
    },
    {
        "content": "<p>I tried to fix that in <a href=\"https://github.com/leanprover-community/lean/issues/533\">leanprover-community/lean#533</a>, but the failures are nasty</p>",
        "id": 231231304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616349771
    },
    {
        "content": "<p>All I want is for sums over finite sets to be easier for mathematicians who don't understand when we say \"finset is data, and decidable equality is important, but don't just open_locale classical if you're sometimes using naturals because then you might get diamonds; by the way <code>convert</code> is important\", and when all they want to do is to sum over a set which is obviously (to them) finite.</p>",
        "id": 231232547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616351148
    },
    {
        "content": "<p>Yurt's suggestion nicely solves the question \"why do I sometimes write <code>in</code> and sometimes write <code>\\in</code>\", by making only the latter necessary</p>",
        "id": 231233183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616351872
    },
    {
        "content": "<p>Oh -- the reason we went for <code>in</code> instead of <code>\\in</code> was that we couldn't get <code>\\in</code> to parse properly.</p>",
        "id": 231233245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616351924
    },
    {
        "content": "<p>Yury's approach solves that</p>",
        "id": 231233385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616352121
    },
    {
        "content": "<p>And I believe allows for stranger constructs like <code>\\sum x y (h : x + y \\in s), sorry</code></p>",
        "id": 231233453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616352171
    },
    {
        "content": "<p>If we are talking about notation in sums, one thing I noticed in the liquid tensor experiment is we really need to define <code>\\sum k &lt; n, ...</code> to mean <code>\\sum f in range n, ...</code> and<code>\\sum k \\le n, ...</code> to mean <code>\\sum f in range (n + 1), ...</code>. These are very common cases and the range version is really painfully long.</p>",
        "id": 231241374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1616361012
    },
    {
        "content": "<p>We'll get this with <code>finsum</code>.</p>",
        "id": 231243676,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616363721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What kind of <code>@[congr]</code> lemma I have to add to make <code>@[simp]</code> simplify inside <code>(h : x ∈ s)</code> in <code>∑ᶠ x ∈ s, f x</code>?</p>",
        "id": 231243776,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616363833
    },
    {
        "content": "<p>I guess it would be like <code>p = q -&gt; f = g -&gt; ∑ᶠ (_ : p), f = ∑ᶠ (_ : q), g</code>, although I am not sure if that actually works</p>",
        "id": 231243860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616363921
    },
    {
        "content": "<p>Is it worth putting <code>plift</code> inside the definition of <code>finite</code>?</p>",
        "id": 231243891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616363981
    },
    {
        "content": "<p>We don't have <code>set</code>s for <code>Sort*</code></p>",
        "id": 231243987,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616364031
    },
    {
        "content": "<p>Huh, I thought that was only lists. Is there a reason for that?</p>",
        "id": 231244027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616364072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>@[congr]</code> expects <code>finprod f = finprod g</code>, not <code>finrpod (λ _, a) = finprod (λ _, g)</code>.</p>",
        "id": 231244037,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616364084
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">finprod_congr_Prop</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hpq.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finprod</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">finprod</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">finprod_congr</span> <span class=\"n\">hfg</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">congr</span><span class=\"o\">]</span> <span class=\"n\">finprod_congr_Prop</span> <span class=\"n\">finsum_congr_Prop</span>\n</code></pre></div>\n<p>and it doesn't work.</p>",
        "id": 231244118,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616364177
    },
    {
        "content": "<p>I'll try to post an MWE in a few minutes</p>",
        "id": 231244153,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616364200
    },
    {
        "content": "<p>Yeah, if that doesn't work then I don't think it's possible</p>",
        "id": 231244155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364202
    },
    {
        "content": "<p>maybe if it was another constant? But I guess the whole point here is to reuse <code>finprod</code></p>",
        "id": 231244203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364248
    },
    {
        "content": "<p>I don't think you can rewrite in the binder of a forall either, with <code>simp</code></p>",
        "id": 231244223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364303
    },
    {
        "content": "<p>Actually, now that I come to think about it, how does rewriting the lhs of an implication work?</p>",
        "id": 231244312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364381
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">finprod</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finprod_congr_Prop</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hpq.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finprod</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">finprod</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hfg</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 231244325,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616364415
    },
    {
        "content": "<p>OTOH,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.complete_lattice</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>works</p>",
        "id": 231244453,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616364532
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[congr]</span> <span class=\"kd\">theorem</span> <span class=\"n\">supr_congr_Prop</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_Sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">pq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f₁</span> <span class=\"o\">(</span><span class=\"n\">pq.mpr</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">supr</span> <span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">supr</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 231244550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364629
    },
    {
        "content": "<p>What's the difference between 2 lemmas?</p>",
        "id": 231244585,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616364672
    },
    {
        "content": "<p>other than the <code>p &lt;-&gt; q</code> (which doesn't seem to matter), I don't see anything different</p>",
        "id": 231244648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364727
    },
    {
        "content": "<p>maybe the argument order?</p>",
        "id": 231244651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364736
    },
    {
        "content": "<p>oh oops it's not marked <code>@[congr]</code></p>",
        "id": 231244671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364773
    },
    {
        "content": "<p>It is in the main file. In the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> <code>@[congr]</code> says that it's a bad congr lemma. Trying to understand.</p>",
        "id": 231244694,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616364811
    },
    {
        "content": "<p><code>finprod</code> has two <code>_inst_1</code>'s in it</p>",
        "id": 231244807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364943
    },
    {
        "content": "<p>yep that fixes it</p>",
        "id": 231244868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364983
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[irreducible]</span> <span class=\"kd\">def</span> <span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[congr]</span> <span class=\"kd\">lemma</span> <span class=\"n\">finprod_congr_Prop</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">hpq.mpr</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finprod</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">finprod</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">propext</span> <span class=\"n\">hpq</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hfg</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finprod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 231244869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1616364995
    },
    {
        "content": "<p>Now I have to understand what's wrong in the main file.</p>",
        "id": 231244886,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616365043
    },
    {
        "content": "<p>UPD: <code>simp</code> works, <code>simp only</code> doesn't.</p>",
        "id": 231245024,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616365223
    },
    {
        "content": "<p>Throw in a <code>dsimp</code> before the <code>simp only</code>?</p>",
        "id": 231247511,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616368183
    },
    {
        "content": "<p>I wanted to simplify <code>← finset.coe_union</code> inside the binder. I found a workaround but I wonder <strong>why</strong> <code>simp only</code> fails.</p>",
        "id": 231254014,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616376637
    },
    {
        "content": "<p>I tried using <code>finprod</code>/<code>finsum</code> for partition of unity, and it works very well.</p>",
        "id": 231254300,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616376998
    },
    {
        "content": "<p>A nasty side effect of the new definition and working <code>@[congr]</code> lemmas: now Lean simplifies <code>∑ᶠ x ∈ f '' s, g x</code> to <code>∑ᶠ x (h : ∃ y, y ∈ s ∧ f y = x), g x</code>, so we need to redesign simp lemmas.</p>",
        "id": 231465374,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616504447
    },
    {
        "content": "<p>Yes, I noticed that one too, and wasn't particularly happy about it. :-)</p>",
        "id": 231548116,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616535524
    },
    {
        "content": "<p>What's the preferred form for that then?</p>",
        "id": 231549073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616535998
    },
    {
        "content": "<p>I feel like a bare <code>x ∈ f '' s</code> should already be considered <code>simp</code> normal form. Perhaps various things wrapped around that should simplify.</p>",
        "id": 231557727,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616540814
    },
    {
        "content": "<p>But this is a pretty big refactor: we have simp lemmas for <code>y ∈ f '' s</code>, <code>y ∈ s ∩ t</code>, <code>y ∈ s ∪ t</code>, <code>y ∈ range f</code>. Should we remove (or move to a simp set) all of them? Some of them? I guess this will feel like a regression in some cases.</p>",
        "id": 231683414,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616609801
    },
    {
        "content": "<p>I removed some <code>@[simp]</code> attributes to make linter happy.</p>",
        "id": 232009555,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616782166
    },
    {
        "content": "<p>Now it passes CI and is ready for review.</p>",
        "id": 232009597,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616782186
    },
    {
        "content": "<p>Can you update the PR description to mention the various things I've assumed you've added since you took oven from Kevin and Jason?</p>",
        "id": 232011284,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616783019
    },
    {
        "content": "<p>I should also update the module docstring. I'll do it in 1-h hrs.</p>",
        "id": 232011708,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616783245
    },
    {
        "content": "<p>Should all the <code>finsum_in</code> lemmas be renamed to <code>finsum_mem</code>, now that there is no <code>finsum_in</code> definition any more?</p>",
        "id": 232012283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616783478
    },
    {
        "content": "<p>I was more busy than I expected. Renamed, fixed compile&amp;lint, applied review suggestions.</p>",
        "id": 232140418,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616905231
    },
    {
        "content": "<p>Ping here.</p>",
        "id": 232317475,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617044083
    },
    {
        "content": "<p>This PR is ready for review again.</p>",
        "id": 232796236,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617298970
    },
    {
        "content": "<p>I guess I have a meta-worry here. How much is this API meant to mirror the existing API for <code>finset.prod</code>? Do we intend to require any sort of synchronisation between them, or is it okay if they drift apart?</p>",
        "id": 233156576,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617617947
    },
    {
        "content": "<p>And I just PRed a (new?) lemma about <code>finset.prod</code>...</p>",
        "id": 233157854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1617619172
    },
    {
        "content": "<p>How viable is eventually eliminating almost all uses of <code>finset.prod</code> in lemma statements?</p>",
        "id": 233165553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617625714
    },
    {
        "content": "<p>With the end goal of any definition using <code>finset.prod</code> coming with a lemma saying \"it's equal to finprod\"?</p>",
        "id": 233165621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617625763
    },
    {
        "content": "<p><code>finset.prod</code> and <code>finprod</code> take different approaches. In one case the product is finite \"by construction\" and does not require proofs of something like <code>set.finite (mul_support f)</code> to apply a lemma; in the other case it's easy to construct a <code>finprod</code> term but one has to prove <code>set.finite (mul_support f)</code> here and there. I think that both approaches have their use cases, and we shouldn't try to eliminate one of them.</p>",
        "id": 233667287,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617893957
    },
    {
        "content": "<p>I mean, we can migrate some parts of the library to <code>finprod</code> (e.g., I think whether it makes sense to use it instead of <code>finsupp.sum</code>) but I see no reason to deprecate <code>finset.prod</code>.</p>",
        "id": 233668098,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617894105
    },
    {
        "content": "<p>I guess my point is that the notation for <code>finsum</code> is much more powerful than that for <code>finset.sum</code>, suggesting it might be acceptable to remove the notation for the latter entirely in order to enable repurposing <code>\\sum</code> for the former</p>",
        "id": 233670450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617894595
    },
    {
        "content": "<p>I would prefer to have notation for both cases but we can reserve <code>∑</code> for <code>finsum</code> and use some modifier for <code>finset.sum</code>.</p>",
        "id": 233671536,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1617894846
    }
]