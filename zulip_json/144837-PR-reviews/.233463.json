[
    {
        "content": "<p>Just wanted to ping <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, to see if he can help me get <code>@[to_additive]</code> working in this PR.</p>",
        "id": 204987207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595650463
    },
    {
        "content": "<p>Also, I invited reviews from <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> --- it would be great to get you more involved in the PR review processes!</p>",
        "id": 204987225,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595650516
    },
    {
        "content": "<p>How <code>to_additive</code> fails?</p>",
        "id": 204987589,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595651265
    },
    {
        "content": "<p>It succeeds, it just takes it to a different name than I hoped for.</p>",
        "id": 204988046,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595652122
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3463#discussion_r460360748\">https://github.com/leanprover-community/mathlib/pull/3463#discussion_r460360748</a></p>",
        "id": 204988067,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595652139
    },
    {
        "content": "<p>The problem with translating <code>monoid</code> to <code>add_monoid</code> is that <code>comm_monoid</code> should be translated to <code>add_comm_monoid</code>, not <code>comm_add_monoid</code>.</p>",
        "id": 205003866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595683477
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/to_additive.guess_name/src\">src#to_additive.guess_name</a></p>",
        "id": 205003870,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595683499
    },
    {
        "content": "<p>And <code>tr</code> just above this definition.</p>",
        "id": 205003876,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595683517
    },
    {
        "content": "<p>I'm here. What's the status?</p>",
        "id": 205005186,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595685877
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3463#discussion_r460360748\">https://github.com/leanprover-community/mathlib/pull/3463#discussion_r460360748</a></p>",
        "id": 205005312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595686102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, I don't think <code>guess_name</code> does that kind of translation. Try <code>#eval guess_name \"monoid\"</code> right underneath and you'll get <code>\"monoid\"</code></p>",
        "id": 205005313,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595686104
    },
    {
        "content": "<p>(Sorry to be terse, but I have to head to bed!)</p>",
        "id": 205005315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595686114
    },
    {
        "content": "<p>That's fine. I need some time to look through <code>to_additive</code>. I haven't touched it in a while</p>",
        "id": 205005394,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595686243
    },
    {
        "content": "<p>Sleep well <span aria-label=\"zzz\" class=\"emoji emoji-1f4a4\" role=\"img\" title=\"zzz\">:zzz:</span></p>",
        "id": 205005401,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595686255
    },
    {
        "content": "<p>Anybody who's still up, if I experiment with the name generation, will recompiling mathlib tell me if I changed something I shouldn't have changed?</p>",
        "id": 205006741,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595688387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> I think you were right. Changing <code>tr</code> seems to do the trick</p>",
        "id": 205006967,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595688767
    },
    {
        "content": "<p>The best way to ensure that no names changed would be generating the list of all available names in <code>all.lean</code> before and after.</p>",
        "id": 205010494,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595694239
    },
    {
        "content": "<p>If you just add <code>monoid → add_monoid</code> to <code>tr</code>, then it will transfer <code>comm_monoid</code> to <code>comm_add_monoid</code>, not <code>add_comm_monoid</code>.</p>",
        "id": 205010554,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595694318
    },
    {
        "content": "<p>A possible solution is to match all top-level names already mapped by <code>to_additive</code>, starting with longer names.</p>",
        "id": 205010601,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595694376
    },
    {
        "content": "<p>If you find a better heuristic, then you'll get quite a few <a href=\"https://github.com/leanprover-community/mathlib/blob/3484194/src/algebra/group/to_additive.lean#L111\">warnings</a> while recompiling <code>mathlib</code>.</p>",
        "id": 205010680,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595694500
    },
    {
        "content": "<p>I just pushed something. It handles <code>comm_group</code> (et cie) nicely. You can have a look</p>",
        "id": 205015428,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595701336
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 205027213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595720935
    },
    {
        "content": "<p>Would you be able to take your commit and make it a separate PR? I think we should keep these changes separate in the history. I can mark my PR as blocked on this PR to <code>to_additive</code>.</p>",
        "id": 205027223,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595720975
    },
    {
        "content": "<p>(I'm also happy to make the separate PR, if you prefer.)</p>",
        "id": 205027688,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595721896
    },
    {
        "content": "<p>If you're ok with taking it up, I'll let you take care of that part</p>",
        "id": 205028824,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595723975
    },
    {
        "content": "<p>Thanks! I’m spending the evening with my partner. This way, you don’t have to wait</p>",
        "id": 205030958,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1595728373
    }
]