[
    {
        "content": "<p>I've started defining some model theory concepts. These are interesting enough from the perspective of, say, Flypitch-type logic results, but I hope that these can be used to fix some big API repetition problems.</p>",
        "id": 240784069,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622426185
    },
    {
        "content": "<p>In particular, <a href=\"https://github.com/leanprover-community/mathlib/issues/7762\">#7762</a> defines a notion of substructure that could potentially be used to unify <code>submonoid</code>, <code>subgroup</code>, <code>submodule</code>, <code>subring</code>, <code>sublattice</code>, and nearly <code>sub</code>-anything.</p>",
        "id": 240784089,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622426250
    },
    {
        "content": "<p>Now, I know that we won't JUST be able to use that API to define all these other notions, because for instance, the basic closure properties (things like <code>one_mem</code> and <code>mul_mem</code>) will be in an impenetrable form until they're translated from general model theory.</p>",
        "id": 240784165,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622426341
    },
    {
        "content": "<p>I'm starting this thread because I'd like to hear any thoughts on the feasibility of (eventually) defining these other notions of substructure using this general concept.</p>",
        "id": 240784171,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622426375
    },
    {
        "content": "<p>I have a more concrete issue:<br>\nWhat should the notation be for first-order homs, embeddings, and equivs?</p>",
        "id": 241425619,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622741801
    },
    {
        "content": "<p>Right now I just have <code>M →[L] N</code>, but as <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has pointed out, this is taken by <code>mul_action_hom</code>. How should I adorn this to make it different?</p>",
        "id": 241425884,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622741916
    },
    {
        "content": "<p>Later, I'll want to talk about elementary embeddings and such, and that could be <code>M ↪e[L] N</code> if that's not taken, but for now, should I just go with <code>M →fo[L] N</code> or something?</p>",
        "id": 241426062,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622742001
    },
    {
        "content": "<p>Is subscript <code>s</code> taken? (<code>s</code> for structure)</p>",
        "id": 241427310,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622742410
    },
    {
        "content": "<p>Or maybe a locale?</p>",
        "id": 241429088,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622743144
    },
    {
        "content": "<p>I think a locale would be committing to never wanting to use this notation when importing files on <code>mul_action</code>s, which is probably not going to work</p>",
        "id": 241431275,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622744231
    },
    {
        "content": "<p>(Once we have different notation, it might still be wise to put it in a locale to avoid future conflicts)</p>",
        "id": 241431770,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622744450
    },
    {
        "content": "<p>I think mul_action_hom is used very rarely</p>",
        "id": 241443699,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622750036
    },
    {
        "content": "<p>So would you put <code>mul_action_hom</code> in a locale as well? I think it will be used more if representation theory gets going, but at that point it will probably be under different notation anyway.</p>",
        "id": 241450042,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622753125
    },
    {
        "content": "<p>I guess that would be one option, yes</p>",
        "id": 241450435,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622753268
    },
    {
        "content": "<p>Another option would be a <code>has_indexed_arrow</code> typeclass to let the notation be shared.</p>",
        "id": 241450560,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622753303
    },
    {
        "content": "<p>With <code>has_indexed_arrow A B (Type u)</code> providing <code>mul_action_hom</code> and <code>has_indexed_arrow A B language</code> providing your hom</p>",
        "id": 241451763,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622753721
    },
    {
        "content": "<p>If this could be made to work it would be pretty nice. Notice that I also use this (although with the \"category theory arrow\") for enriched categories as well.</p>",
        "id": 241471648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622764832
    },
    {
        "content": "<p>For now I've localized it but not yet changed the notation itself - I'm not sure that fixes the issue yet, but localization is good.</p>",
        "id": 241489587,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1622780256
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7752\">#7752</a> is on the merge queue, but while looking at one of <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> 's PRs, I got an idea for another approach, involving a general definition of <code>n</code>-ary functions, which I have started working on at <a href=\"https://github.com/leanprover-community/mathlib/tree/fo_arity\">branch#fo_arity</a></p>",
        "id": 242007727,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623201615
    },
    {
        "content": "<p>Basically, when I talk about an <code>n</code>-ary function or relation, I can talk about it in a curried or uncurried way. In <a href=\"https://github.com/leanprover-community/mathlib/issues/7752\">#7752</a>, everything is fully uncurried, a function on tuples, interpreted as <code>fin n -&gt; M</code>. However, most of mathlib uses fully curried functions, so I've created a type <code>ary_fun A B n</code> of <code>n + 1</code>-ary functions from <code>A</code> to <code>B</code>.</p>",
        "id": 242008000,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623201894
    },
    {
        "content": "<p>The <code>n + 1</code> is kind of unfortunate and requires me to work with constants separately, but it's inevitable if one wants to generalize the <code>arity</code> type in <code>set_theory/zfc.lean</code> to have a codomain that could live in a different universe than the domain, which is particularly useful if we want it to be <code>Prop</code>.</p>",
        "id": 242008153,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202033
    },
    {
        "content": "<p>The other complication is that highly general <code>simp</code> lemmas seem to work less well for these curried versions, as for the uncurried version, there is just one input, so we can just say <code>ext</code> once and then use regular <code>simp</code> lemmas for functions. In particular, for the curried versions, I have to actually give a proof that the composition of two embeddings is an embedding, instead of relying heavily on <code>. obviously</code>.</p>",
        "id": 242008326,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202187
    },
    {
        "content": "<p>There is one issue with this approach using your <code>ary_fun</code> in that you can't define inductive types built using this.</p>",
        "id": 242008332,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623202194
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 242008382,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202210
    },
    {
        "content": "<p>1 sec i'll sketch an example</p>",
        "id": 242008401,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623202230
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ary_fun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ary_fun</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- This works</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">foo0</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo0</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">foo0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">foo0</span>\n\n<span class=\"c1\">-- This doesn't work</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">of</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">foo1</span>\n<span class=\"bp\">|</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">ary_fun</span> <span class=\"n\">foo1</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 242008581,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623202413
    },
    {
        "content": "<p>If you want to define the free monoid, say, inductively, this approach would pose an issue</p>",
        "id": 242008604,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623202434
    },
    {
        "content": "<p>err wait sorry let me fix this example</p>",
        "id": 242008667,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623202473
    },
    {
        "content": "<p>If there's a really foundational problem with using <code>ary_fun</code> to define first-order structures, it's probably still useful as a way to translate to the various curried functions in the library.</p>",
        "id": 242008717,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202540
    },
    {
        "content": "<p>Ok, now the example is what I had in mind.</p>",
        "id": 242008840,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623202660
    },
    {
        "content": "<p>There is no way to freely (i.e.. inductively) create an n-ary function using this approach</p>",
        "id": 242008893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623202691
    },
    {
        "content": "<p>But looking at your example, I doubt this will be a foundational problem,as I think I can still use <code>foo0</code> to define a free monoid and then put the correct <code>L.Structure</code> on it.</p>",
        "id": 242008912,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202724
    },
    {
        "content": "<p>Oh sure, but you will need to go back-and-forth using the equivalence between the curried and uncurried approaches</p>",
        "id": 242008926,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623202754
    },
    {
        "content": "<p>(Also, your <code>ary_fun</code> matches <code>arity</code> from <code>set_theory/zfc.lean</code>, and doesn't have my annoying off-by-one</p>",
        "id": 242008933,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202760
    },
    {
        "content": "<p>So all this is background material, my real question is: do people have strong opinions on when I use the curried vs. uncurried approach?</p>",
        "id": 242008955,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202793
    },
    {
        "content": "<p>I'm thinking that a structure should be defined as a widget with constants, curried <code>ary_fun</code>s and curried <code>ary_rel</code>s, so that when I say how, say, the symbol <code>add</code> should be interpreted, I can just say <code>(+)</code></p>",
        "id": 242009027,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202859
    },
    {
        "content": "<p>But perhaps I should uncurry for the definition of <code>embedding</code>s</p>",
        "id": 242009038,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202878
    },
    {
        "content": "<p>And for abstract free objects down the line</p>",
        "id": 242009059,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623202910
    },
    {
        "content": "<p>I guess the question is what is the intended applications of this work? If it's for model theory, then I'm inclined to stick with <code>fin n \\to X</code> since it seems to me this would make it easier to work with (and even define) definable sets.</p>",
        "id": 242009120,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623202951
    },
    {
        "content": "<p>For definable sets, I’ve got ideas that could work either way.</p>",
        "id": 242010143,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623204090
    },
    {
        "content": "<p>I have ambitions that this could work outside model theory per se, and for instance unify the <code>substructure</code> libraries.</p>",
        "id": 242010214,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1623204161
    },
    {
        "content": "<p>I would be inclined not to steer too far away from the direction of infinitary logic. <code>ary_fun</code> seems problematic from that perspective.</p>",
        "id": 242392885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1623440034
    }
]