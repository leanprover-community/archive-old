[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, could you explain the logic in <code>auth_github</code> in <code>cache-olean.sh</code>? It seems the <code>github.oauthtoken</code> will only ever be looked at if we've failed to find a user and password?</p>",
        "id": 161719001,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553560565
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/766/files#diff-dbd7f4184984f905b3e1ed514ca280ccR20\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/766/files#diff-dbd7f4184984f905b3e1ed514ca280ccR20\">https://github.com/leanprover-community/mathlib/pull/766/files#diff-dbd7f4184984f905b3e1ed514ca280ccR20</a></p>",
        "id": 161719005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553560575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> --- also, what access is needed by the OAuth token, if <code>cache-olean.sh</code> is using that to talk to github?</p>",
        "id": 161719354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561028
    },
    {
        "content": "<p>Ah, regarding the logic, I see what's going on, and will tweak it so an error is only printed if _neither_ a password _nor_ an OAuth token are found</p>",
        "id": 161719412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561068
    },
    {
        "content": "<p>That sounds good.</p>",
        "id": 161719418,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553561085
    },
    {
        "content": "<p>I don't think you actually need any permission with the token</p>",
        "id": 161719437,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553561105
    },
    {
        "content": "<p>ok!</p>",
        "id": 161719655,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561397
    },
    {
        "content": "<p>I just pushed a commit to this PR that improved the error handling.</p>",
        "id": 161719713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561413
    },
    {
        "content": "<p>I will test the permisson on the token an update.</p>",
        "id": 161719720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561421
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  thanks</p>",
        "id": 161719813,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553561555
    },
    {
        "content": "<p>looks good with no scopes</p>",
        "id": 161719818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561564
    },
    {
        "content": "<p>So -- now whenever I <code>git checkout master</code>, I get the following:</p>",
        "id": 161719821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561576
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>idaeus:mathlib scott$ git checkout master\nSwitched to branch &#39;master&#39;\nYour branch is up to date with &#39;origin/master&#39;.\nTrying to fetch cached olean\nQuerying GitHub...\nError: no nightly archive found\nno cache found\n</pre></div>",
        "id": 161719833,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561592
    },
    {
        "content": "<p>how do I convince it to just use the <code>olean</code> files on hand?</p>",
        "id": 161719845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561628
    },
    {
        "content": "<p>What do you mean by \"on hand\"?</p>",
        "id": 161719959,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553561762
    },
    {
        "content": "<p>I've run <code>leanpkg build</code>, so they are all sitting around</p>",
        "id": 161720105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561920
    },
    {
        "content": "<p>or is this not the intended use?</p>",
        "id": 161720116,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561932
    },
    {
        "content": "<p>They're not discarded. If no cache is found, they will still be lying around and you default to using them.</p>",
        "id": 161720141,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553561964
    },
    {
        "content": "<p>On the other hand, when I <code>git checkout olean-cache</code>, I see:</p>\n<div class=\"codehilite\"><pre><span></span>idaeus:mathlib scott$ git checkout olean-cache\nSwitched to branch &#39;olean-cache&#39;\nYour branch is up to date with &#39;origin/olean-cache&#39;.\nTrying to fetch cached olean\n</pre></div>\n\n\n<p>but then nothing more.</p>",
        "id": 161720148,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561981
    },
    {
        "content": "<p>What does that indicate?</p>",
        "id": 161720151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561985
    },
    {
        "content": "<p>Presumably there should be a \"success!\" message somewhere?</p>",
        "id": 161720160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553561998
    },
    {
        "content": "<p>So, while I'm on the master branch, how do I tell <code>cache-olean</code> that is should \"make use of\" the currently existing <code>olean</code> files?</p>",
        "id": 161720228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562039
    },
    {
        "content": "<p>i.e., so I can switch to some other branch, and then back to <code>master</code>, and not get error messages?</p>",
        "id": 161720230,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562057
    },
    {
        "content": "<p>Hmm... strangely, when I checkout master, I get the error messages above, but if I run <code>cache-olean --fetch</code> while on the master branch it says nothing.</p>",
        "id": 161720313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562149
    },
    {
        "content": "<p>I guess you have to fiddle with timestamps.</p>",
        "id": 161720314,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553562153
    },
    {
        "content": "<p>hmm... I thought that the point was that <code>cache-olean</code> was dealing with timestamps for us?</p>",
        "id": 161720331,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562205
    },
    {
        "content": "<p>It should</p>",
        "id": 161720336,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553562215
    },
    {
        "content": "<p>It zips <code>.lean</code> files and <code>.olean</code> files together so their time stamps have the proper relation to each other</p>",
        "id": 161720397,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553562252
    },
    {
        "content": "<p>try <code>git rev-parse HEAD</code>, take the hash and see if you find a corresponding file in <code>_cache</code></p>",
        "id": 161720530,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553562425
    },
    {
        "content": "<p>oh dear, now a <code>NameError: name 'urllib3' is not defined</code></p>",
        "id": 161720544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562449
    },
    {
        "content": "<p>What did you do?</p>",
        "id": 161720603,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553562493
    },
    {
        "content": "<p>That error just came from <code>git checkout master</code></p>",
        "id": 161720613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562520
    },
    {
        "content": "<p>No more outputs?</p>",
        "id": 161720618,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553562540
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>idaeus:scripts scott$ git checkout master\nSwitched to branch &#39;master&#39;\nYour branch is up to date with &#39;origin/master&#39;.\nTrying to fetch cached olean\nQuerying GitHub...\nDownloading nightly...\nTraceback (most recent call last):\n  File &quot;/Users/scott/.mathlib/bin/cache-olean&quot;, line 117, in &lt;module&gt;\n    fetch_mathlib(asset)\n  File &quot;/Users/scott/.mathlib/bin/cache-olean&quot;, line 74, in fetch_mathlib\n    http = urllib3.PoolManager(\nNameError: name &#39;urllib3&#39; is not defined\n</pre></div>",
        "id": 161720634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562560
    },
    {
        "content": "<p>Sorry, have to run, I will investigate again later.</p>",
        "id": 161720646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562586
    },
    {
        "content": "<p>Oh ok, add <code>import urllib3</code> at the beginning</p>",
        "id": 161720651,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553562602
    },
    {
        "content": "<p>(I've run <code>setup-dev-scripts</code> or whatever, and it reported urllib3 was already there.)</p>",
        "id": 161720699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562607
    },
    {
        "content": "<p>(dynamic languages are the worse)</p>",
        "id": 161720700,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553562611
    },
    {
        "content": "<p>Yeah but <code>cache-olean.py</code> has to import it</p>",
        "id": 161720717,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553562634
    },
    {
        "content": "<p>woot!</p>",
        "id": 161720832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562757
    },
    {
        "content": "<p>another missing import, but things may be working now</p>",
        "id": 161720836,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562764
    },
    {
        "content": "<p>later!</p>",
        "id": 161720838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553562765
    },
    {
        "content": "<p>See you later!</p>",
        "id": 161720846,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553562777
    },
    {
        "content": "<p>Ooof... <code>cache-olean</code> is having a bad interaction with the GUI I use to rebase.</p>",
        "id": 161723460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553566244
    },
    {
        "content": "<p>Sample error message:</p>\n<div class=\"codehilite\"><pre><span></span>Note: checking out &#39;d5e5a3adf687e8d19d93e57d317ad8c5bc307fc7&#39;.\n\nYou are in &#39;detached HEAD&#39; state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n  git checkout -b &lt;new-branch-name&gt;\n\nHEAD is now at d5e5a3ad adding some more user feedback\nTrying to fetch cached olean\nenv: python3: No such file or directory\nerror: could not detach HEAD\n</pre></div>",
        "id": 161723462,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553566253
    },
    {
        "content": "<p>I guess we should make sure the hooks fail gracefully.</p>",
        "id": 161723485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553566308
    },
    {
        "content": "<p>ok, fixed</p>",
        "id": 161724208,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553567158
    },
    {
        "content": "<p>Good! Thanks so much for doing this!</p>",
        "id": 161759055,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553605422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, what is the reasoning for not storing the cache in <code>cache-olean --build</code> when the build fails? Surely many people often spend a long time working on a branch that is failing, before everything comes good.</p>",
        "id": 161835113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553671384
    },
    {
        "content": "<p>Why is it Simon's job to store stuff that the community in general is not interested in?</p>",
        "id": 161836179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553672819
    },
    {
        "content": "<p>I think <code>cache-olean</code> stores stuff locally</p>",
        "id": 161836200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553672879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think you're right. We could change that. I'm wondering if we could also store the cache when the user interrupts the build (e.g. with <code>ctrl+C</code>) but I'm not sure if there's a way to do that.</p>",
        "id": 161851231,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553687287
    },
    {
        "content": "<p>Why would you need that second feature?</p>",
        "id": 161851396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553687443
    },
    {
        "content": "<p>Lean will pick up from where you stopped, right?</p>",
        "id": 161851404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553687459
    },
    {
        "content": "<p>That's right</p>",
        "id": 161852041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553688024
    },
    {
        "content": "<p>at least on OS X this happens already; the first ctrl-C stops the build, but python continues.</p>",
        "id": 161892737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553714929
    },
    {
        "content": "<p>Okay, we now store the cache even when the build fails (or is cancelled by ctrl-c).</p>",
        "id": 161899616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553720080
    },
    {
        "content": "<p>I'm pretty happy with this now. I need to write some docs.</p>",
        "id": 161899623,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553720091
    },
    {
        "content": "<p>I would also like --fetch to work more often. :-) If travis has seen that commit, there could be a cached copy of the oleans!</p>",
        "id": 161899667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553720137
    },
    {
        "content": "<p>I might also try writing <code>--list</code>, which shows the status of the cache for each local branch. But I won't hold up the PR to do that.</p>",
        "id": 161899732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553720171
    },
    {
        "content": "<p>Of course we would like cached olean for everything that Travis once compiled. It would help PR reviewing a lot (at least for me). For instance I compiled the convexity PR (but haven't found time to carefully look at it). But there are storage issues. GitHub won't let us store infinitely many releases</p>",
        "id": 161900277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553720589
    },
    {
        "content": "<p>If storage is the only requirement, I have a server that we could use. I'm not concerned about storage or bandwidth, and I'd be happy to allow uploads in some moderately controlled fashion.</p>",
        "id": 161901566,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553721701
    },
    {
        "content": "<p>For cached oleans, high reliability is not necessary.</p>",
        "id": 161901575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553721712
    },
    {
        "content": "<p>That would be nice. We can get Travis to upload the cache then and decide to delete caches older than 1 or 2 months</p>",
        "id": 161905664,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1553725386
    },
    {
        "content": "<p>maybe the right approach is to not directly upload to my server, which sounds hard to manage, security wise</p>",
        "id": 161925977,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553752112
    },
    {
        "content": "<p>Instead perhaps we could have travis post everything it builds somewhere (along with the olean artifacts from master?) but deleting them after a few days. I can then have my machine poll that supply of caches, and copy them to a publicly accessible location, where it can store them for much longer.</p>",
        "id": 161926005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553752201
    },
    {
        "content": "<p>I can certainly set up the \"scrape the following webpage for artifacts, post them online\" step, if someone else, presumably <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> could handle the travis part.</p>",
        "id": 161926060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553752247
    },
    {
        "content": "<p>Another issue we need to fix with this PR eventually: hitting Ctrl-C can break the cache, and result in ... crap all over your repository :-) I'm not a python ninja, but <a href=\"https://stackoverflow.com/questions/842557/how-to-prevent-a-block-of-code-from-being-interrupted-by-keyboardinterrupt-in-py\" target=\"_blank\" title=\"https://stackoverflow.com/questions/842557/how-to-prevent-a-block-of-code-from-being-interrupted-by-keyboardinterrupt-in-py\">https://stackoverflow.com/questions/842557/how-to-prevent-a-block-of-code-from-being-interrupted-by-keyboardinterrupt-in-py</a> seems to have some solutions.</p>",
        "id": 161926279,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553752676
    },
    {
        "content": "<p>cf <a href=\"https://github.com/leanprover-community/mathlib/issues/857\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/857\">#857</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/858\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/858\">#858</a> for some improvements</p>",
        "id": 161937168,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553766788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, we still have some problems... The post-checkout hooks is working great when I work solely on the commandline, but I often also change branches from VS Code, or from Sourcetree.</p>\n<p>Changing branches from VS Code seems to work fine (although if you don't restart the server VS Code gets unhappy --- can we add a hook to prompt restarting the server anytime the olean cache is restored??)</p>",
        "id": 162155722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554007181
    },
    {
        "content": "<p>However changing branches from sourcetree, the post-checkout hook is not being called.</p>",
        "id": 162155727,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554007199
    },
    {
        "content": "<p>The problem is just one I'd seen before --- the environment git is run in from sourcetree doesn't know how to find python3, so our scripts can't run.</p>",
        "id": 162156035,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554007690
    },
    {
        "content": "<p>Okay... it seems that Sourcetree <a href=\"https://community.atlassian.com/t5/Bitbucket-questions/SourceTree-Hook-failing-because-paths-don-t-seem-to-be-set/qaq-p/274792\" target=\"_blank\" title=\"https://community.atlassian.com/t5/Bitbucket-questions/SourceTree-Hook-failing-because-paths-don-t-seem-to-be-set/qaq-p/274792\">doesn't</a> like to put /usr/local/bin/ on the path, and that's where <code>python3</code> lives. I'm going to put</p>\n<div class=\"codehilite\"><pre><span></span>export PATH=/usr/local/bin:$PATH\n</pre></div>\n\n\n<p>in our git hooks.</p>",
        "id": 162156433,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554008391
    },
    {
        "content": "<p>Can we use <code>source ~/.profile</code> instead? Or maybe use <code>env</code>?</p>",
        "id": 162175649,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554040322
    },
    {
        "content": "<p>So <code>env</code> isn't working (precisely because <code>/usr/local/bin/</code> is not on the PATH), and <code>source ~/.profile</code> doesn't work, because it seems that on mac OS a shell usually starts with <code>/usr/local/bin</code> on the PATH already. (I checked <code>env -i bash --norc --noprofile</code>, and it's already there.)</p>",
        "id": 162192030,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554066473
    },
    {
        "content": "<p>what if we only add <code>/usr/local/bin</code> to the path and then invoke <code>env</code>?</p>",
        "id": 162192157,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554066665
    },
    {
        "content": "<p>Somehow sourcetree is doing something dumb, and managing to provide a shell without a OS default path.</p>",
        "id": 162192212,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554066778
    },
    {
        "content": "<p>I can try raising a bug with them, but I want this to work in the meantime.</p>",
        "id": 162192213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554066779
    },
    {
        "content": "<blockquote>\n<p>what if we only add /usr/local/bin to the path and then invoke env?</p>\n</blockquote>\n<p>Isn't this what we're doing?</p>",
        "id": 162192222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554066795
    },
    {
        "content": "<p>Sorry, I think I saw something else on github. That sounds more reasonable. I was hesitant to put <code>~/.mathlib/bin</code> in the path.</p>",
        "id": 162192364,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554067030
    },
    {
        "content": "<p>err... I think <code>~/.mathlib/bin</code> has been put on the path at the beginning of the hook all along, so we can call <code>cache-olean</code>?</p>",
        "id": 162197400,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554075255
    },
    {
        "content": "<p>oh</p>",
        "id": 162197495,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554075434
    },
    {
        "content": "<p>Alright, anything goes then</p>",
        "id": 162197498,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1554075442
    }
]