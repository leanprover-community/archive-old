[
    {
        "content": "<p>There are probably about ten ways to do this, and I've picked the easiest but most-obviously-wrong way (i.e. just noting explicitly that <code>0</code> is not <code>1</code>). What's the Right Way? I imagine there's a way to make it completely automatic, since nnreal is a <code>semiring</code>, but I'm new to Lean's type classes and mathlib's hierarchy. <a href=\"https://github.com/leanprover-community/mathlib/pull/7948\">https://github.com/leanprover-community/mathlib/pull/7948</a></p>",
        "id": 242717116,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1623754900
    },
    {
        "content": "<p>I think the right way is to note that <code>nnreal</code> is a <code>semiring</code> that is <code>char_zero</code>.</p>",
        "id": 242717278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623755013
    },
    {
        "content": "<p>Because those satisfy <code>0 \\ne 1</code></p>",
        "id": 242717295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623755028
    },
    {
        "content": "<p>Showing my unfamiliarity with type classes: do you think it's likely there will have to be a line in <code>nnreal.lean</code>, or is it possible that some general fact further up the hierarchy will allow a type class to be generated automatically without any change to <code>nnreal.lean</code>?</p>",
        "id": 242717362,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1623755082
    },
    {
        "content": "<p>There should be enough in <code>nnreal.lean</code> already.</p>",
        "id": 242717526,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623755204
    },
    {
        "content": "<p>I think <code>nontrivial</code> also follows from <code>archimedean</code> or from <code>canonically_ordered_semiring</code></p>",
        "id": 242717549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623755222
    },
    {
        "content": "<p>It also follows from <code>infinite</code>.</p>",
        "id": 242717611,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623755262
    },
    {
        "content": "<p><code>example : nontrivial nnreal := by suggest</code> finds three different existing ways</p>",
        "id": 242717617,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1623755266
    },
    {
        "content": "<p>one of which is from infinite</p>",
        "id": 242717653,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1623755282
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">infinite.nontrivial</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">group_with_zero.to_nontrivial</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">linear_ordered_semiring.to_nontrivial</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 242717698,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1623755303
    },
    {
        "content": "<p>On the other hand, <code>nontrivial</code> is a <code>Prop</code> so in a certain sense it does not matter too much how you do it.</p>",
        "id": 242717706,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623755311
    },
    {
        "content": "<p><code>by apply_instance</code> produces <code>exact infinite.nontrivial ℝ≥0</code>.</p>",
        "id": 242717709,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623755312
    },
    {
        "content": "<p>I guess I knew already that there are dozens of maths-reasons why nnreal is <code>nontrivial</code>; my question is more about what the Right Way is for Lean, e.g. is there a change that can be made upstream somewhere so that literally no textual change needs to be made to <code>nnreal.lean</code></p>",
        "id": 242717764,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1623755355
    },
    {
        "content": "<p>So, the <em>correct</em> answer is that ℝ≥0 is infinite!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 242717773,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623755364
    },
    {
        "content": "<p>I think that the instance is already there.  If Lean is asking for a proof of <code>nontrivial ℝ≥0</code>, you may have gotten to this stage using, e.g., <code>apply</code> instead of <code>refine</code>.  This is where I see these spurious instance requests appearing.</p>",
        "id": 242717955,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623755488
    },
    {
        "content": "<p>Ah, I think that is probably why I ended up wanting this - so it's very likely this PR is actually completely unnecessary, and I should go back and use <code>refine</code> instead of <code>apply</code> at the point where I found myself needing this</p>",
        "id": 242718046,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1623755539
    },
    {
        "content": "<p>Thanks, that sounds like the Right Answer to me!</p>",
        "id": 242718057,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1623755547
    },
    {
        "content": "<p>In fact, <code>infinite nnreal</code> is derived by the typeclass system from <code>char_zero nnreal</code>, which is derived from <code>linear_ordered_semiring nnreal</code>.</p>",
        "id": 242718060,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623755551
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> is also correct!</p>",
        "id": 242718104,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1623755603
    },
    {
        "content": "<p>Patrick, as far as I understand, <code>refine</code> uses more of the given types, while <code>apply</code> \"starts from scratch\".  Thus, <code>refine</code> will often find instances that are automatic, while <code>apply</code> sometimes misses them.  However, sometimes <code>apply</code> works, while <code>refine</code> does not... it is a bit of an art and a bit of black magic!</p>",
        "id": 242718184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623755650
    }
]