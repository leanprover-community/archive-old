[
    {
        "content": "<p>So I'm trying to figure out where to put the following lemma </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">→</span> <span class=\"n\">α'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subsingleton_quot_iff_forall</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">quot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">subsingleton_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">surjective_quot_mk</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"k\">forall</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">forall_congr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">surjective_quot_mk</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"k\">forall</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">forall_congr</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">quot.eq</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The original idea was to put in in <code>data.quot</code> but it doesn't like the proof since one needs to first mover <code>subsingleton_iff</code> somewhere else, and then the question is where to put this (and even after moving this around the proof now complains about the <code>.forall</code> so maybe its better to not try and put it in <code>data.quot</code>)</p>",
        "id": 253065862,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631528261
    },
    {
        "content": "<p>Maybe <code>data/setoid</code> is best since that can be right next to the <code>subsingleton_quotient_iff_...</code> that is also in that PR</p>",
        "id": 253066207,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631528456
    },
    {
        "content": "<p>It seems to work having it there, so unless there are good reasons not to keep it in <code>data/setoid</code> I'll leave it there.</p>",
        "id": 253088978,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1631539711
    },
    {
        "content": "<p>This is one of those results whose proofs no one should really care about, so you can make it as unreadable as you like. E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.nontrivial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">→</span> <span class=\"n\">α'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subsingleton_quot_iff_forall</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">quot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">eqv_gen</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">quot.exact</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">subsingleton.elim</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩,</span> <span class=\"n\">exact</span> <span class=\"n\">quot.eq.mpr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)}⟩⟩</span>\n</code></pre></div>",
        "id": 253095213,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631542027
    }
]