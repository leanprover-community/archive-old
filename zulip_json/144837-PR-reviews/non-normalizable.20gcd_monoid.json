[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17984\">#17984</a></p>\n<p>The idea is stated in the <a href=\"https://github.com/leanprover-community/mathlib/blob/a1ec8086280da9e4031f377eb6b5f33ca5b41588/counterexamples/not_normalization_monoid.lean#L14-L20\">module docstring</a>; I guess there also exist examples from commutative rings, but my construction doesn't produce one. If such examples do exist, we'd need to generalize <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.normalized_gcd_monoid\">docs#polynomial.normalized_gcd_monoid</a> to account for them; any other examples?</p>\n<p>Many lemmas/instances need to moved; I think I know where they should go, but if they are not interesting enough they can stay, and that's the main reason why I ask for review.</p>\n<p>I'd like to tag <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, since you removed normalization from <code>gcd_domain</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/9443\">#9443</a>.</p>",
        "id": 316888504,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671521068
    },
    {
        "content": "<p>I don't know if it's really impossible to find a normalization, but for rings of integers of number fields it seems quite unnatural if the group of units is big.</p>",
        "id": 316890862,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671522343
    },
    {
        "content": "<p>It's been a while since I touched that :)</p>\n<p>It does seem like some of the results from the start of your file could move into mathlib proper, though I'm not quite sure where</p>",
        "id": 316891468,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1671522654
    },
    {
        "content": "<p>For noetherian rings like rings of integers, being a gcd_monoid is equivalent to being UFD, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique_factorization_monoid.normalization_monoid\">docs#unique_factorization_monoid.normalization_monoid</a> shows there aren't counterexamples when class number is 1, but I don't see immediately whether there can be class number &gt;1 examples that don't admit <code>normalization_monoid</code> structures.</p>",
        "id": 316892372,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671523077
    },
    {
        "content": "<p>Being UFD is equivalent to being a PID in this case</p>",
        "id": 316892836,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671523291
    },
    {
        "content": "<p>I am a little confused and with the phone is difficult to read the source, but how we define the normalization on a UFD?</p>",
        "id": 316893783,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671523699
    },
    {
        "content": "<p>Ah, we just choose a random one</p>",
        "id": 316893859,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671523739
    },
    {
        "content": "<p>Still using that def for ring of integers can be quite a pain, since for the integers it creates a diamond</p>",
        "id": 316894163,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671523866
    },
    {
        "content": "<p>Yeah I proposed using <code>nonempty gcd_monoid</code> etc. in <a href=\"#narrow/stream/116395-maths/topic/.E2.9C.94.20gcd_monoid/near/303539302\">this thread</a>. Maybe we should use <code>nonempty gcd_monoid</code> unless the statement requires <code>gcd_monoid</code>, like how we use <code>finite</code> instead of <code>fintype</code>. Maybe <code>nonempty normalized_gcd_monoid</code> is required sometimes, but I guess most thoerems about <code>normalized_gcd_monoid</code> can simply be generalized to <code>gcd_monoid</code>. I don't know about any interesting theorems that requires <code>nonempty normalization_monoid</code> because it seems to be some mathlib artifact that doesn't appear in math textbooks.</p>",
        "id": 316895209,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671524332
    },
    {
        "content": "<p>And I think I can now prove that any ring of integers can be normalized: the group completion of the monoid of associates (minus zero) embeds into the group of fractional ideals, which is freely generated by the prime ideals, and any subgroup of a free abelian group is itself free, hence projective. Then you should be able to apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/normalization_monoid_of_monoid_hom_right_inverse\">docs#normalization_monoid_of_monoid_hom_right_inverse</a>.</p>",
        "id": 316895929,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671524622
    },
    {
        "content": "<p>Actually I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hahn_series.comm_ring\">docs#hahn_series.comm_ring</a> over the <code>M</code> in my PR probably serves as a comm_ring counterexample ...</p>",
        "id": 316897021,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1671525004
    },
    {
        "content": "<p>I agree it's very weird that we normalization gcd contains data. I would be very surprised if something depends on the actual choice and not only on the existence of a normalization</p>",
        "id": 316898421,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1671525444
    },
    {
        "content": "<p>If so, we should have a <code>normalization_monoid.ext</code> in the style of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group.ext\">docs#group.ext</a></p>",
        "id": 318664691,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672440718
    },
    {
        "content": "<p>How could we do that? The normalization data isn't determined by the multiplication (it's basically the choice of a splitting of the nonzero elements as a product of the associates with the unit group), while all the data fields of a group (inv, npow, zpow, etc.) are determined by the multiplication. If the result doesn't depend on the choice, I proposed that we should use <code>nonempty (normalized_gcd_monoid α)</code> instead, and I think <code>nonempty (gcd_monoid α)</code> already suffices for all interesting results. When the unit group is trivial, we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subsingleton_normalized_gcd_monoid_of_unique_units\">docs#subsingleton_normalized_gcd_monoid_of_unique_units</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unique_normalization_monoid_of_unique_units\">docs#unique_normalization_monoid_of_unique_units</a>.</p>",
        "id": 318691240,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1672465281
    }
]