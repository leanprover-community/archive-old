[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>, do you need help with this?</p>",
        "id": 282496261,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652708467
    },
    {
        "content": "<p>Okay, I've merged master now.</p>",
        "id": 282498137,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652709253
    },
    {
        "content": "<p>Since <a href=\"https://github.com/leanprover-community/mathlib/pull/12126\">#12126</a> has been merged now it might be good to revisit <code>function.injective.ring</code> &amp; co.  These currently take <code>add_group_with_one</code> arguments instead of <code>has_zero</code>/<code>has_one</code>/<code>has_add</code>/<code>has_inv</code>/..., which is really inconsistent.  There is also a type class diamond issue now in <code>ring_theory/integral_closure</code> that could be related.  We should probably add <code>has_nat_cast</code>/<code>has_int_cast</code> type classes and handle the casts like any other operation in <code>function.injective.ring</code>.</p>",
        "id": 282498583,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652709453
    },
    {
        "content": "<p>I'm swamped with stuff do.  So if you want to take the lead and split up the PR (like you've suggested in the comment) then please go ahead.</p>",
        "id": 282498744,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652709514
    },
    {
        "content": "<p>Fancy! I will have a go soon then.</p>",
        "id": 282504562,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652711838
    },
    {
        "content": "<p>Why can't <code>has_coe</code> be used in place of your <code>has_nat_cast</code>/<code>has_int_cast</code>?</p>",
        "id": 282506104,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652712376
    },
    {
        "content": "<p>That might end badly for <code>T = nat</code></p>",
        "id": 282506768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652712655
    },
    {
        "content": "<p>Also, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_coe\">docs#nat.cast_coe</a> is <code>has_coe_t ℕ α</code> not <code>has_coe ℕ α</code>, so likely the <code>_t</code> version is more appropriate</p>",
        "id": 282506829,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652712684
    },
    {
        "content": "<p>(see <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#coercion%20into%20rings\">https://leanprover-community.github.io/mathlib_docs/notes.html#coercion%20into%20rings</a> for context)</p>",
        "id": 282507005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652712748
    },
    {
        "content": "<p>But we won't ever apply it for <code>T = nat</code>, right? I'm talking about the arguments to <code>function.injective.ring</code> and I claim that we can take in <code>has_coe nat R</code> or <code>has_coe_t nat R</code>.</p>",
        "id": 282508588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652713393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312182.20add_monoid_with_one/near/282506104\">said</a>:</p>\n<blockquote>\n<p>Why can't <code>has_coe</code> be used in place of your <code>has_nat_cast</code>/<code>has_int_cast</code>?</p>\n</blockquote>\n<p>Mainly for future-proofing with regard to Lean 4.  Coercions are changing, and a <code>HasNatCast R</code> type class is guaranteed to continue working, while a <code>[Coe ℕ R]</code> argument in a definition might behave differently.</p>\n<p>One such difference is already there, \"regular\" coercions are unfolded.  That is, when you type <code>(n : R)</code> it elaborates to <code>Nat.cast n</code> and there remains no trace of any coercion type class.  But this unfolding doesn't happen with <code>[Coe ℕ R]</code>.  Of course the difference doesn't really matter unless you <code>unfold Function.Injective.Semiring</code>, but I'd rather stay on the safe side.</p>",
        "id": 282509083,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1652713605
    }
]