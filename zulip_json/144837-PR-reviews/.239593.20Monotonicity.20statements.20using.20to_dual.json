[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, is this really just to make statements look better in the documentation? because it's really a technical lemma and isn't meant to be used besides proving dual statements. A docstring would disambiguate just as well. Apart from that, I do not mind this change so long as it doesn't degrade performance.</p>",
        "id": 256561219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633605932
    },
    {
        "content": "<p>It also prevents you getting nonsense goal states that look like <code>a &lt; b</code> but are actually <code>has_lt.lt (order_dual T) _ _ a b = b &lt; a</code> under the hood</p>",
        "id": 256561353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633605996
    },
    {
        "content": "<p>Anything that looks wonky in the documentation also ends  up wonky in goal states</p>",
        "id": 256561374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633606015
    },
    {
        "content": "<p>But does it make the unifier work harder?</p>",
        "id": 256561560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633606115
    },
    {
        "content": "<p>Probably, but all it has to do is unfold <code>to_dual</code> and <code>of_dual</code> to see they're defined as <code>id</code>. I guess we'll have to wait and see what CI thinks.</p>",
        "id": 256562108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633606437
    },
    {
        "content": "<p>Most of the impacts on the proofs (rather than statements) has been the substitution of <code>@foo (order_dual _) _ _ _ x</code> for <code>foo (to_dual x)</code>, which I'd argue is a readability win.</p>",
        "id": 256562413,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633606576
    },
    {
        "content": "<p>Wait, couldn't that work already before?</p>",
        "id": 256562763,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633606752
    },
    {
        "content": "<p>I don't think the simp lemmas would match correctly</p>",
        "id": 256562817,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633606785
    },
    {
        "content": "<p>(also note that one reason nothing was done this way before was that <code>to_dual</code> wasn't importable when it would be needed)</p>",
        "id": 256562895,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633606812
    },
    {
        "content": "<p>Ah okay, I didn't know that.</p>",
        "id": 256562932,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633606834
    },
    {
        "content": "<p>CI seems happy on <a href=\"https://github.com/leanprover-community/mathlib/issues/9593\">#9593</a> now. Adding <code>has_le.le.dual</code> made the changes less painful.</p>",
        "id": 256663278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633647727
    }
]