[
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/pull/11665\">#11665</a> seems to be running into a diamond. The diamond doesn't seem to involve the <code>continuous_map.topological_group</code> instance introduced in the PR, so maybe it's the extra imports that are to blame?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"o\">(</span><span class=\"n\">isometric_bounded_of_compact</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">complete_space</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pseudo_emetric_space.to_uniform_space'</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">pseudo_metric_space.to_pseudo_emetric_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_pseudo_metric_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">continuous_map.metric_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_inst_1</span> <span class=\"n\">_inst_2</span> <span class=\"n\">_inst_3</span><span class=\"o\">))))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">complete_space</span> <span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">continuous_map.compact_convergence_uniform_space</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">_inst_1</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_uniform_space'</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space.to_pseudo_metric_space</span> <span class=\"n\">β</span> <span class=\"n\">_inst_3</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 269460918,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1643222632
    },
    {
        "content": "<p>This error occurs in <code>topology/continuous_function/compact.lean</code> at the instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">isometric_bounded_of_compact</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">complete_space</span>\n</code></pre></div>",
        "id": 269463531,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1643223664
    },
    {
        "content": "<p>I'm currently watching a talk so I'm only half-looking at this but <a href=\"https://github.com/leanprover-community/mathlib/pull/11229\">#11229</a> is possible relevant.</p>",
        "id": 269465900,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643224554
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269500748,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643241014
    }
]