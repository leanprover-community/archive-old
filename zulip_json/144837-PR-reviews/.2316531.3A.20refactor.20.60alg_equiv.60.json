[
    {
        "content": "<p>I'm running into another weird issue in my refactor of <code>alg_equiv</code>.  The build hits a time out on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_field.equiv_zmod_p\">docs#galois_field.equiv_zmod_p</a>, and when I run <code>lean --make</code>, it gives me this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">field_theory</span><span class=\"bp\">/</span><span class=\"n\">finite</span><span class=\"bp\">/</span><span class=\"n\">galois_field.lean</span><span class=\"o\">:</span><span class=\"mi\">142</span><span class=\"o\">:</span><span class=\"mi\">81</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">has_mul.to_has_smul</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">smul_with_zero.to_has_smul</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">field_theory</span><span class=\"bp\">/</span><span class=\"n\">finite</span><span class=\"bp\">/</span><span class=\"n\">galois_field.lean</span><span class=\"o\">:</span><span class=\"mi\">142</span><span class=\"o\">:</span><span class=\"mi\">81</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"o\">(</span><span class=\"n\">is_splitting_field.alg_equiv</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">X</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">is_splitting_field</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>which made me think I introduced some kind of diamond (I have no idea how I would have managed to do that in this PR), but this compiles just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_mul.to_has_smul</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">smul_with_zero.to_has_smul</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>If I turn the <code>def</code> into a <code>lemma</code>, the timeout goes away, and it immediately comes back with this, with <code>set_option pp.implicit true</code>:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_mul.to_has_smul</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))</span>\n<span class=\"n\">inferred</span>\n  <span class=\"bp\">@</span><span class=\"n\">smul_with_zero.to_has_smul</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_one_class.to_mul_zero_class</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_one_class</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semifield.to_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_semifield</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))))))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action_with_zero.to_smul_with_zero</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semifield.to_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_semifield</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_zero_class.to_has_zero</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_add_zero_class</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))))))))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">module.to_mul_action_with_zero</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semifield.to_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_semifield</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_unital_non_assoc_semiring.to_add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">non_assoc_semiring.to_non_unital_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_non_assoc_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.to_module</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semifield.to_comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_semifield</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n             <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)))</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jireh</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">field_theory</span><span class=\"bp\">/</span><span class=\"n\">finite</span><span class=\"bp\">/</span><span class=\"n\">galois_field.lean</span><span class=\"o\">:</span><span class=\"mi\">146</span><span class=\"o\">:</span><span class=\"mi\">81</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_splitting_field.alg_equiv</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_5</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span> <span class=\"bp\">^</span>\n            <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span>\n          <span class=\"bp\">@</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))</span>\n       <span class=\"bp\">?</span><span class=\"n\">m_6</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span> <span class=\"bp\">^</span>\n           <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span>\n         <span class=\"bp\">@</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n      <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"bp\">@</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span> <span class=\"mi\">1</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span> <span class=\"bp\">^</span>\n      <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span> <span class=\"bp\">^</span>\n      <span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.fintype</span> <span class=\"n\">p</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n<span class=\"n\">inst</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_splitting_field</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.algebra</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n       <span class=\"n\">p</span>\n       <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span> <span class=\"bp\">^</span>\n         <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span>\n       <span class=\"bp\">@</span><span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zmod.field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))))</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">galois_field</span> <span class=\"n\">p</span> <span class=\"n\">_inst_1</span> <span class=\"mi\">1</span> <span class=\"bp\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"n\">zmod</span> <span class=\"n\">p</span>\n</code></pre></div>\n</div></div>\n<p>Ideas? What did i screw up?</p>",
        "id": 299240148,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663361734
    },
    {
        "content": "<p>Seems to be <a href=\"#narrow/stream/113488-general/topic/diamond.3A.20galois_field.20algebras\">this diamond</a> which <a href=\"#narrow/stream/304774-FLT-regular/topic/Project.20status/near/292628667\">has been fixed</a> (if I understand correctly) but not yet PR'd.</p>",
        "id": 299244221,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1663363900
    },
    {
        "content": "<p>Sorry, yeah, I'm just not sure of what the best way is to fix this, honestly</p>",
        "id": 299247929,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663365928
    },
    {
        "content": "<p>I'm tempted to disable the instance from charp to algebra and then leave it as a Def with 'use at your own risk'</p>",
        "id": 299247977,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663365959
    },
    {
        "content": "<p>Turning char_p into a <code>Type*</code> is not really a great option... It also causes a bunch of other issues</p>",
        "id": 299248061,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663365989
    },
    {
        "content": "<p>You could try putting <code>by exact</code> after the <code>:=</code>, sometimes that works.</p>",
        "id": 299251804,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1663368292
    },
    {
        "content": "<p>they're genuinely different Frédéric</p>",
        "id": 299252420,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663368656
    },
    {
        "content": "<p>I'm a bit confused about what I did to make this fail when it's fine on master, but maybe tc inference just got bumped slightly.</p>",
        "id": 299254697,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663370191
    },
    {
        "content": "<p>Any tips for how I should proceed here <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>? Even if there's just an acceptable temporary solution until the diamond gets resolved in mathlib, it would be nice to be able to proceed with this refactor.</p>",
        "id": 299572888,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663596933
    },
    {
        "content": "<p>I think the best solution would be to change any <code>char_p</code>s into <code>algebra (zmod p) _</code>, and then use <code>by convert</code> (I think the subsingleton instances are there already)</p>",
        "id": 299593773,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663602721
    },
    {
        "content": "<p>If you can point me to a branch I can have a look</p>",
        "id": 299593899,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663602755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2316531.3A.20refactor.20.60alg_equiv.60/near/299244221\">said</a>:</p>\n<blockquote>\n<p>Seems to be <a href=\"#narrow/stream/113488-general/topic/diamond.3A.20galois_field.20algebras\">this diamond</a> which <a href=\"#narrow/stream/304774-FLT-regular/topic/Project.20status/near/292628667\">has been fixed</a> (if I understand correctly) but not yet PR'd.</p>\n</blockquote>\n<p>also I don't think it's that diamond Junyan, although I do think that resolving it may have the side effect of fixing it</p>",
        "id": 299594103,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663602827
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/j-loreaux/refactor-alg-equiv\">branch#j-loreaux/refactor-alg-equiv</a></p>",
        "id": 299594134,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1663602842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2316531.3A.20refactor.20.60alg_equiv.60/near/299594134\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/tree/j-loreaux/refactor-alg-equiv\">branch#j-loreaux/refactor-alg-equiv</a></p>\n</blockquote>\n<p>that seems to have the check issue elsewhere</p>",
        "id": 299594241,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663602870
    },
    {
        "content": "<p><code>src/field_theory/finite/galois_field.lean</code> from that branch has the error described in the original post, although there's also a timeout in <code>src/field_theory/galois.lean</code> if you compile with <code>-T100000</code>.</p>",
        "id": 299595100,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1663603115
    }
]