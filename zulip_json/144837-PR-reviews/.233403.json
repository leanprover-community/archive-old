[
    {
        "content": "<p>Pretty simple PR, generalizing the <code>update_*</code> definitions to work with rectangular matrices. Scott Morrison asked if the lemmas should be moved to the <code>data/matrix/basic</code> file. Should both the definitions and lemmas be moved? The <code>update</code> functions aren't used anywhere other than <code>nonsingular_inverse</code>. I am hoping to use them for the Laplace expansion of the determinant, to provide a computation-friendly <code>det</code> definition.</p>",
        "id": 204454196,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595267858
    },
    {
        "content": "<p>I don't really have an opinion on where they go.</p>",
        "id": 204454549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268020
    },
    {
        "content": "<p>What I find interesting is the <code>decidable_eq</code> hypotheses... with the current state of things in Lean, it is very clear that you want those, in order to make computation work.</p>",
        "id": 204454641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268073
    },
    {
        "content": "<p>However, for proving things, <code>decidable_*</code> is 98% of the time a royal pain. (And sometimes it is really awesome, because <code>dec_trivial</code> will deal with some annoying verification of some proposition in <code>zmod 4</code>...)</p>",
        "id": 204454804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268140
    },
    {
        "content": "<p>I really wonder if we can make these things work better side-by-side. But I might be hijacking this thread too much.</p>",
        "id": 204454863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268175
    },
    {
        "content": "<p>Anyway, as it stands... I fear that we will need polynomials for proving things, and different polynomials if we want to compute. And matrices that have good computational behaviour. But different matrices if we want to compute.</p>",
        "id": 204454945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268225
    },
    {
        "content": "<p>That seems a waste of time/space/energy</p>",
        "id": 204455025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268246
    },
    {
        "content": "<p>It's completely normal in computer algebra systems to have more than one implementation of matrices</p>",
        "id": 204455106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595268293
    },
    {
        "content": "<p>e.g. one for if you know that the matrix is huge but sparse</p>",
        "id": 204455136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595268313
    },
    {
        "content": "<p>Totally, and then the <code>update</code> functions (and all other matrix functions) will change depending on the matrix implementation. In the meantime, should <code>update_*</code> be moved to <code>data/matrix/basic</code>? Currently, it's only used in <code>nonsingluar_inverse</code> but maybe will get more use if it is in the general file.</p>",
        "id": 204455630,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595268537
    },
    {
        "content": "<p>But what I'm not so sure about, is whether we should want them to get more use, if they have this <code>decidable_eq</code> instance. We've had the experience with <code>polynomial</code> where everything was slow and unusable and broken, and we couldn't prove a thing. Until we ripped out the <code>decidable_eq</code>s, and made the whole thing <code>noncomputable</code>.</p>",
        "id": 204455989,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268710
    },
    {
        "content": "<p>So, do we want <code>matrix</code> to be for computations, or for proofs?</p>",
        "id": 204456052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> (Just to be clear... I've nothing against computations. They are useful and interesting! But I also care about making it easy to prove things down the road. I wish the two were easier to combine. I see this as a flaw in Lean.)</p>",
        "id": 204456500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595268962
    },
    {
        "content": "<p>Can it be for both in the meantime? I'm a distant future, it might be a good interface for proving things about algorithms like Astar or alignments like Smith Waterman. If someone wants to prove general statements, they can use linear_map?</p>",
        "id": 204456616,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1595269021
    },
    {
        "content": "<p>The idea that proving and computing have different ideal data structures is nothing new. The \"standard\" approach goes by the name refinement: roughly speaking, prove your theorems in the abstract computational setting and prove transfer properties between that and an execution friendly type. Here's one reference: <a href=\"http://www-sop.inria.fr/members/Anders.Mortberg/papers/coqeal.pdf\">http://www-sop.inria.fr/members/Anders.Mortberg/papers/coqeal.pdf</a></p>",
        "id": 204457198,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595269329
    },
    {
        "content": "<p><a href=\"https://www.complang.tuwien.ac.at/kps2015/proceedings/KPS_2015_submission_13.pdf\">https://www.complang.tuwien.ac.at/kps2015/proceedings/KPS_2015_submission_13.pdf</a></p>",
        "id": 204457312,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595269397
    },
    {
        "content": "<p>so what should the set-up be here? What should <code>polynomial</code> be -- the provy one or the computy one? I guess <code>nat</code> is the provy one...</p>",
        "id": 204458029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595269732
    },
    {
        "content": "<p>I'm rambling on over here: <a href=\"#narrow/stream/113488-general/topic/computation.20vs.20proving/near/204457511\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/computation.20vs.20proving/near/204457511</a></p>",
        "id": 204458512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595269978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233403/near/204455630\">said</a>:</p>\n<blockquote>\n<p>Totally, and then the <code>update</code> functions (and all other matrix functions) will change depending on the matrix implementation. In the meantime, should <code>update_*</code> be moved to <code>data/matrix/basic</code>? Currently, it's only used in <code>nonsingluar_inverse</code> but maybe will get more use if it is in the general file.</p>\n</blockquote>\n<p>I'm sorry, but I don't feel qualified to answer this... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 204458549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595270006
    },
    {
        "content": "<p>I don't see any argument for keeping them in <code>nonsingular_inverse</code>. Definitions/lemmas should go in the first place they can. (Sometimes this rule requires adding a new intermediate file, to avoid making a file too big, or adding otherwise unnecessary imports.)</p>",
        "id": 204504456,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595295179
    }
]