[
    {
        "content": "<p>This PR refactors <code>minimal_polynomial</code> (renamed in <a href=\"https://github.com/leanprover-community/mathlib/issues/5771\">#5771</a> to <code>minpoly</code>) to use the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">minpoly</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span>\n<span class=\"n\">A</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">well_founded.min</span> <span class=\"n\">degree_lt_wf</span> <span class=\"n\">_</span> <span class=\"n\">hx</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 222980463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610802550
    },
    {
        "content": "<p>The benefit is that we can write <code>minpoly A x</code> instead of <code>minpoly hx</code> for <code>hx : is_integral A x</code>. The resulting code is more<br>\nreadable, and some lemmas are true without the <code>hx</code> assumption.</p>",
        "id": 222980472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610802588
    },
    {
        "content": "<p>You sure you don't want <code>else 1</code>? Then stuff like \"min poly monic\" is always true</p>",
        "id": 222980604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610802805
    },
    {
        "content": "<p>But then <code>x</code> won't always be a root..</p>",
        "id": 222980609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610802827
    },
    {
        "content": "<p>Touch\\'e</p>",
        "id": 222980613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610802840
    },
    {
        "content": "<p>If you phrase monic as <code>n ∈ max f.support → f.coeff n = 1</code>, the zero polynomial <em>is</em> monic <em>and</em> evaluates to zero on <code>x</code>...</p>",
        "id": 222980833,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803145
    },
    {
        "content": "<p>so you're suggesting refactoring <code>monic</code>?</p>",
        "id": 222980840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803170
    },
    {
        "content": "<p>Ahaha, not really...  I think that the case split might be annoying, no?</p>",
        "id": 222980849,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803199
    },
    {
        "content": "<p>Besides, <code>max</code> also takes a <code>nonempty</code> input, so it may be needed to refactor <code>max</code> first.</p>",
        "id": 222980902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803238
    },
    {
        "content": "<p>It never occurred to me that it might be a reasonable idea to let the zero polynomial be monic. I'm still not sure it is.</p>",
        "id": 222980906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803242
    },
    {
        "content": "<p>polynomials are a monoid with zero. Should the monic ones be a submonoid-with-zero?</p>",
        "id": 222980919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803272
    },
    {
        "content": "<p>This reminds me of the conundrum of whether the determinant of the <code>0 \\times 0</code> matrix is <code>1</code> or <code>0</code>.</p>",
        "id": 222980925,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803295
    },
    {
        "content": "<p>Oh that's <em>definitely</em> 1</p>",
        "id": 222980930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803306
    },
    {
        "content": "<p>That's a theorem</p>",
        "id": 222980937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803317
    },
    {
        "content": "<p>well, we are talking about the zero matrix, though...</p>",
        "id": 222980940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803322
    },
    {
        "content": "<p>I'm talking about changing a definition</p>",
        "id": 222980950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803323
    },
    {
        "content": "<p>Ah, you mean in mathlib!  I meant in math(no lib)</p>",
        "id": 222980986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803343
    },
    {
        "content": "<p>The determinant of the 0 by 0 matrix is unquestionably 1. Do you want the determinant of the block diagonal matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊕</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\oplus B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> to be det(A)det(B)? Yes!</p>",
        "id": 222980990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803355
    },
    {
        "content": "<p>Its trace is zero and its det is 1. Its char poly is 1.</p>",
        "id": 222981010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803389
    },
    {
        "content": "<p><del>I agree with you, though I also like the identity <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>det</mi><mo>⁡</mo><mi>λ</mi><mo>⋅</mo><mi>M</mi><mo>=</mo><mi>λ</mi><mo>⋅</mo><mi>det</mi><mo>⁡</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">\\det \\lambda \\cdot M = \\lambda \\cdot \\det M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\">det</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\">det</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>.</del></p>",
        "id": 222981084,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803505
    },
    {
        "content": "<p>That's not true ;-)</p>",
        "id": 222981094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803527
    },
    {
        "content": "<p>and the corrected statement is true for my convention</p>",
        "id": 222981100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803535
    },
    {
        "content": "<p>Ah, sorry, you are right!</p>",
        "id": 222981101,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803541
    },
    {
        "content": "<p>So, the discussion is resolved!</p>",
        "id": 222981105,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803551
    },
    {
        "content": "<p>because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>λ</mi><mn>0</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda^0=1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (even if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\lambda=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>)</p>",
        "id": 222981107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803558
    },
    {
        "content": "<p>Does this mean that we should refactor <code>monic</code>?  Ahaha</p>",
        "id": 222981166,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803600
    },
    {
        "content": "<p>(I simply suggested it as a joke, the definition of <code>monic</code>, I had not given it any previous thought.)</p>",
        "id": 222981254,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803738
    },
    {
        "content": "<p><code>nat_degree</code> is a junky function, it returns junk if you give it the 0 polynomial. This means that <code>leading_coeff</code> is a junky function, because it uses <code>nat_degree</code>. This means that <code>monic</code> is a junky predicate. This means that computer scientists have the right to decide whether the zero polynomial is monic and their decision will be based on the choice which maximises the number of theorems which are true on junk inputs</p>",
        "id": 222981329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610803808
    },
    {
        "content": "<p>Correct, although I do like that the <code>0</code> polynomial has degree 0, I find it \"natural\".</p>",
        "id": 222981348,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803866
    },
    {
        "content": "<p>Still, I remember having lots of problems using <code>nat_degree</code> at the beginning and I am still frightened by <code>degree</code>.</p>",
        "id": 222981373,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610803921
    },
    {
        "content": "<p>I've never thought about whether <code>0</code> should be <code>monic</code>... maybe it should.<br>\nBut I would prefer to save that for another PR <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 222981512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610804076
    },
    {
        "content": "<p>of course, if <code>0</code> is monic, then the monic polynomial <code>f</code> of minimal degree such that <code>f(x) = 0</code> will always be...</p>",
        "id": 222981605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610804229
    },
    {
        "content": "<p>I'm wondering if this is like asking if 1 should be prime.</p>",
        "id": 222981614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610804275
    },
    {
        "content": "<p>there are 36 files touch <code>monic</code>... that will be quite a headache</p>",
        "id": 222981683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610804372
    },
    {
        "content": "<p>The canonical example I give of why HoTT is useful in DTT is that a ring isomorphic to a local ring is local, something which cannot be deduced from a surjectivity statement because a homomorphic image of a local ring could be 0, which is not local. However if one defines <em>prelocal</em> to mean \"a local ring, or the zero ring\" then a homomorphic image of a prelocal ring is prelocal.</p>",
        "id": 222981688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610804393
    },
    {
        "content": "<p>and theorems like \"the leading coeff of <code>f * g</code> = leading coeff of <code>g</code>, if <code>f</code> is monic\" will break down</p>",
        "id": 222981737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610804415
    },
    {
        "content": "<p>But leading coeff is a junky function so it's not surprising that sometimes you have to put in extra hypotheses.</p>",
        "id": 222981750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610804454
    },
    {
        "content": "<p>The question is whether the crazy convention that 0 is monic means you can remove more \"this is not junk\" hypotheses than you're adding</p>",
        "id": 222981758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610804481
    },
    {
        "content": "<p>The above example is an indication that \"prelocal\" can be a useful idea -- but it doesn't mean that one should drop local completely. Similarly preprime is useful but you can't drop prime. It's like singleton and subsingleton both being useful.</p>",
        "id": 222981806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610804534
    },
    {
        "content": "<p>So maybe monic is fine and there could be <code>premonic</code> which 0 satisfies too <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 222981823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610804587
    },
    {
        "content": "<p>I like the idea of <code>premonic</code>.  I will let this concept linger a bit in my mind and see how it interacts with other concepts!</p>",
        "id": 222987223,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610810519
    },
    {
        "content": "<p>It is quite striking how easy it is in math to say \"oh, assume [...] is nonzero\" and how much effort this can convert into in Lean</p>",
        "id": 222987292,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1610810592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.235774.20minpoly.20refactor/near/222980925\">said</a>:</p>\n<blockquote>\n<p>This reminds me of the conundrum of whether the determinant of the <code>0 \\times 0</code> matrix is <code>1</code> or <code>0</code>.</p>\n</blockquote>\n<p>A few years ago this question led to me refactoring large parts of <code>numpy.linalg</code> to produce sensible (in this case, 1) results for matrices with a zero dimension</p>",
        "id": 222987939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610811389
    },
    {
        "content": "<p>Maybe we can have, for some time, two minimal polynomials, something  <code>minpoly</code> and <code>minpoly_of_algebraic</code>where the latter is the current version (taking <code>hx</code> as argument) and people can gradually try to remove this deprecated version.</p>",
        "id": 223055198,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1610906626
    },
    {
        "content": "<p>Speaking about minimal polynomials I had the impression that some results are stated for fields, when they are true in much bigger generality. I included some of them (like irreducibility) but there are others for sure</p>",
        "id": 223055329,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1610906787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> yes, I noticed that, but I didn't want to do too many things in one refactor. We could certainly have another pass over the file to generalise results where possible.</p>",
        "id": 223082512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610947941
    },
    {
        "content": "<p>Sure.. and I didn't want to put any pressure on you, or on someone else!</p>",
        "id": 223104758,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1610966762
    },
    {
        "content": "<p>no worries (-;</p>",
        "id": 223104819,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1610966778
    }
]