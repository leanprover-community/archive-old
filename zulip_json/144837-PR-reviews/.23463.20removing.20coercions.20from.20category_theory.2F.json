[
    {
        "content": "<p>For your consideration, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, <span class=\"user-mention\" data-user-id=\"128547\">@Michael Jendrusch</span>.</p>\n<p>I propose removing all the coercions. It only took about 20 minutes to take them out, and I think overall it already simplifies the mathlib code, and will simplify lots of other things going forward.</p>",
        "id": 146929906,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541584523
    },
    {
        "content": "<p>The cost is having to write <code>F.obj X</code> instead of <code>F X</code>, and having to write <code>t.app X</code> instead of <code>t X</code>.</p>",
        "id": 146929916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541584549
    },
    {
        "content": "<p>The benefit is not having to work out why <code>F X</code> doesn't work some fraction of the time.</p>",
        "id": 146929959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541584565
    },
    {
        "content": "<p>and not having to jump through hoops with extra variations of structure fields, to introduce coercions.</p>",
        "id": 146929965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541584586
    },
    {
        "content": "<p>and ... various other things as discussed in recent threads.</p>",
        "id": 146929970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541584598
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/463/files\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/463/files\">https://github.com/leanprover/mathlib/pull/463/files</a></p>",
        "id": 146929985,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541584638
    },
    {
        "content": "<p>Notice that overall it reduces the codebase: +247 −317</p>",
        "id": 146929990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541584659
    },
    {
        "content": "<p>I don't really see this as a cost. It's sort-of how I think of functors anyway :-)</p>",
        "id": 146930066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541584746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do you think this will also benefit modules?</p>",
        "id": 146930864,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541585946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think this is totally fine. In the sheaf stuff I've already avoided coercions; it wasn't too painful.</p>",
        "id": 146931051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541586191
    },
    {
        "content": "<p>you know, I'm not sure how to take the lines reduction when you are reformatting at the same time :P</p>",
        "id": 146931064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541586217
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/463/files#diff-d821da3f10c3bc4b40e7718069576210R81\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/463/files#diff-d821da3f10c3bc4b40e7718069576210R81\">https://github.com/leanprover/mathlib/pull/463/files#diff-d821da3f10c3bc4b40e7718069576210R81</a></p>",
        "id": 146931112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541586244
    },
    {
        "content": "<p>there are also almost no actual proofs involved. Is it all just definitions?</p>",
        "id": 146931252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541586459
    },
    {
        "content": "<p>This night be a silly question because I don't know the previous setup -- could you just have the coercion on objects and only explicitly have to write F.app for the morphisms?</p>",
        "id": 146931583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541586891
    },
    {
        "content": "<p>Oh I see, this is exactly what was causing problems</p>",
        "id": 146931654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541587003
    },
    {
        "content": "<p>I now realise t is not a functor but probably a natural transformation</p>",
        "id": 146931665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541587073
    },
    {
        "content": "<blockquote>\n<p>there are also almost no actual proofs involved. Is it all just definitions?</p>\n</blockquote>\n<p>Yeah, nothing in <code>category_theory/</code> so far counts as a \"theorem\" except perhaps yoneda.</p>",
        "id": 146932793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541588773
    },
    {
        "content": "<p>I am reminded of <a href=\"https://mathoverflow.net/a/10899/1384\" target=\"_blank\" title=\"https://mathoverflow.net/a/10899/1384\">https://mathoverflow.net/a/10899/1384</a></p>",
        "id": 146933605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541589934
    },
    {
        "content": "<p>Hmm... Does sounds like Lang. :-)</p>",
        "id": 146933680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541590021
    },
    {
        "content": "<p>Hi @Mario, I'd be interested to hear your thoughts on this. I'm hesitant to continue working on later parts of the category theory development, because in several spots my current issues are connected to coercions. If I know whether or not it's likely this will be merged, I can decide whether or not to continue fighting those issues. :-)</p>",
        "id": 147273670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541645732
    },
    {
        "content": "<p>I want to hear what <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> has to say. You've been fighting these demons more than me, so I'll go with it if you think it helps, but I think it is a stylistic loss</p>",
        "id": 147273876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541646008
    },
    {
        "content": "<p>I would be happy with merging this. I think <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> expressed a similar opinion.</p>",
        "id": 147276465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541650646
    },
    {
        "content": "<p>I agree that it is a stylisitic loss, but its not too bad. Also we get rid of a lot of boilerplate code.<br>\nSo I'm okay with removing the coercions</p>",
        "id": 147285804,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541666931
    },
    {
        "content": "<p>Whee... :-) After <span class=\"emoji emoji-1f340\" title=\"four leaf clover\">:four_leaf_clover:</span>, I will see if we can do better.</p>",
        "id": 147285900,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541667069
    },
    {
        "content": "<p>Would it be better with a symbol in between, instead of just field notation?</p>",
        "id": 147285913,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541667108
    },
    {
        "content": "<p>Naahh, I would find it less readable with a symbol</p>",
        "id": 147285958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541667127
    },
    {
        "content": "<p>I'm a bit worried that you can't do the same thing with notations</p>",
        "id": 147285959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541667129
    },
    {
        "content": "<p>in particular that example with monoidal functor application</p>",
        "id": 147285967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541667150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, could you clarify that? I'm not sure what you mean yet.</p>",
        "id": 147285994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541667215
    },
    {
        "content": "<p>if <code>F</code> is a monoidal functor, then <code>F.app X</code> is magically parsed to <code>F.to_functor.app X</code></p>",
        "id": 147286041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541667253
    },
    {
        "content": "<p>You don't get the same magic if you write <code>F +&gt; X</code> or whatever</p>",
        "id": 147286048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541667274
    },
    {
        "content": "<p>is it ready to be merged?</p>",
        "id": 147286639,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541668075
    },
    {
        "content": "<p>go for launch</p>",
        "id": 147286899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541668427
    },
    {
        "content": "<p>merged</p>",
        "id": 147287069,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541668572
    }
]