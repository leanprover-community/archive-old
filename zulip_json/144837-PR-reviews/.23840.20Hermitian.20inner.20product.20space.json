[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120943\">@Andreas Swerdlow</span>  I've had a look at the monster proof  <a href=\"https://github.com/leanprover-community/mathlib/pull/840/files#diff-e6ff10e7bca7fd8be5b2ccd5c176a6c7R178\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/840/files#diff-e6ff10e7bca7fd8be5b2ccd5c176a6c7R178\">https://github.com/leanprover-community/mathlib/pull/840/files#diff-e6ff10e7bca7fd8be5b2ccd5c176a6c7R178</a>. I think it's partly due to ordering issues (there are not enough stupid lemmas coming first, like <code>herm_norm_eq_zero_iff</code>, <code>herm_norm_smul</code> etc.). There are also useless things, like the very first line which does nothing, or non-efficient, like the case disjunction on <code>y</code> which should read <code>classical, by_cases hy : y = 0</code>. Then you probably want to avoid all division, since they will get in the way of <code>ring</code> or <code>abel</code>. It means the fundamental fact should be <code>0 ≤ | |y|^2 • x - (x ₀ y) • y|^2</code>. You'll get a <code>|y|^2</code> in front of what you want, but there is ample support in <code>ordered_ring.lean</code>(both in core lib and mathlib) to get rid of this and the square at the very end.</p>",
        "id": 161582649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553439284
    },
    {
        "content": "<p>But I think the main issue is coercion hell. As usual, it means Lean doesn't accept that real numbers are complex numbers. But, even worse, we want to manipulate as real numbers some complex numbers that happen to be real. So I have questions for everybody. Easy one: shouldn't we have <code>instance : has_scalar ℝ α := ⟨λ s x, (s : ℂ)•x⟩</code>? Harder one: what about <code>instance : has_le ℂ := ⟨λ x y, x.re ≤ y.re⟩</code>. This is clearly heretic, but the idea is that it would allow to write inequalities between complex numbers that are provably real, but not syntactically so, like what you get when you expand <code>| |y|^2 • x - (x ₀ y) • y|^2</code> (the weird <code>₀</code> is Andreas notation for a Hermitian inner product). At the end we would get to <code>|x ₀ y| ≤ |x|*|y|</code> as complex numbers, and notice everything is real to get to the inequality among real numbers. Is it too crazy?</p>",
        "id": 161582650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553439288
    },
    {
        "content": "<blockquote>\n<p>complex numbers that are provably real</p>\n</blockquote>\n<p>Do you have an example? In most cases I would suggest defining a function that makes this a syntactic real</p>",
        "id": 161583249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553440296
    },
    {
        "content": "<p>In real life one might prove that a complex number was real by checking that it was equal to its own complex conjugate, for example <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>z</mi><mo>−</mo><mover accent=\"true\"><mrow><mi>z</mi></mrow><mo stretchy=\"true\">‾</mo></mover><msup><mo>)</mo><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">(z-\\overline{z})^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mbin\">−</span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.63056em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span><span style=\"top:-3.55056em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 161583316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553440407
    },
    {
        "content": "<p>That's just <code>(2*z.im)^2</code></p>",
        "id": 161583322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553440437
    },
    {
        "content": "<p>up to signs, yes.</p>",
        "id": 161583368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553440453
    },
    {
        "content": "<p>But it's not is it, it's the complex number version of that</p>",
        "id": 161583371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553440467
    },
    {
        "content": "<p>I contend that for any \"provably real\" complex there is a \"syntactically real\" analogue that you can use instead</p>",
        "id": 161583376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553440495
    },
    {
        "content": "<p>Sure.</p>",
        "id": 161583385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553440505
    },
    {
        "content": "<p>And it might be vastly more inconvenient to do so :-)</p>",
        "id": 161583389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553440515
    },
    {
        "content": "<p>worst case you just stick a <code>.re</code> on the end</p>",
        "id": 161583394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553440535
    },
    {
        "content": "<p>Fair comment.</p>",
        "id": 161583396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553440548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes I have an example, and I discussed it above.</p>",
        "id": 161584315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553442051
    },
    {
        "content": "<p>I'm not sure about the types of the things you wrote</p>",
        "id": 161584324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553442075
    },
    {
        "content": "<p>I think x and y are both elements of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"double-struck\">C</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 161584487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553442332
    },
    {
        "content": "<p>Andreas was proving Cauchy-Schwarz in a Hermitian context. So <code>x</code> and <code>y</code> have a type endowed with a Hermitian product. This product is complex valued, but the product of a vector with itself is actually real, and defined to be the its normed squared. Then the main computation is to expand <code>| |y|^2 • x - (x ₀ y) • y|^2</code>. where <code>₀</code> is the Hermitian product (don't ask my why) and <code>| .|</code> is the associated norm. It expands to  <code>|y|^2 * (a^2 -b^2)</code> where <code>b le a</code> is what we want (and <code>a</code> and <code>b</code> are nonneg)</p>",
        "id": 161584490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553442339
    },
    {
        "content": "<p>I'm not saying the complex <code>has_le</code> idea is brillant, it's ony the crazy stuff that came to my mind because this sounds to me like the crazy things computer scientists would do to avoid issues comping solely from DTT</p>",
        "id": 161584540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553442419
    },
    {
        "content": "<p>Mario, it's been a while since you last took a beginner's proof and divide its length by 50. I think this is a good opportunity to reassert your reputation: <a href=\"https://github.com/leanprover-community/mathlib/pull/840/files#diff-e6ff10e7bca7fd8be5b2ccd5c176a6c7R178\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/840/files#diff-e6ff10e7bca7fd8be5b2ccd5c176a6c7R178\">https://github.com/leanprover-community/mathlib/pull/840/files#diff-e6ff10e7bca7fd8be5b2ccd5c176a6c7R178</a>.</p>",
        "id": 161584602,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553442510
    },
    {
        "content": "<p>Thanks for the help Patrick. I am definitely open to suggestions for notation. I thought <code>&lt;x,y&gt;</code> would look too much like the anonymous constructor notation. Could also use Bra-ket notation <code>⟨x|y⟩</code></p>",
        "id": 161586952,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1553446503
    },
    {
        "content": "<p>bra-ket would clearly be better (assuming the parser agrees)</p>",
        "id": 161586974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553446542
    },
    {
        "content": "<p>(I'm sure you noticed the parser doesn't really approve of our use of <code>|</code> for absolute value)</p>",
        "id": 161587018,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553446577
    },
    {
        "content": "<p>Unfortunately <code>⟨x|y⟩</code> interferes with anonymous constructor notation, although <code>ₕ⟨x|y⟩</code> fixes this issue - 'h' for Hermitian. <code>&lt;x,y&gt;</code> simply doesn't work.</p>",
        "id": 161588888,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1553449395
    },
    {
        "content": "<p>That's what I feared</p>",
        "id": 161588895,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553449426
    },
    {
        "content": "<p><span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span> ...</p>",
        "id": 161588947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553449456
    },
    {
        "content": "<p>I've reworked the <code>Hermitian_inner_product</code> file. The main changes are: put results about orthogonality higher up, so I could use the Pythagorean theorem in the proof of Cauchy-Schwarz; rewrote the proofs of Cauchy-Schwarz and the metric space instance (and a number of other lemmas) to shorten the proofs;  ditched the buggy notation for <code>herm_norm</code> and thereby integrated more with <code>normed_space.basic</code>.  Still to do: rework proof of the equality case of Cauchy-Schwarz. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Does the proof of Cauchy-Schwarz require more condensing?</p>",
        "id": 167670024,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1560031456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120943\">@Andreas Swerdlow</span> Currently there seems to be a whole bunch of merge conflicts. Git thinks you are changing the following amount of lines of code: +32,256 −7,371</p>",
        "id": 167734007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1560143989
    },
    {
        "content": "<p>I believe the reason is that the branch is missing the last 321 commits on master.</p>",
        "id": 167737937,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1560150020
    },
    {
        "content": "<p>Yes sorry, I made a bad attempt to update the branch, but I've reverted that, which seems to have fixed the merge conflicts.</p>",
        "id": 167750668,
        "sender_full_name": "Andreas Swerdlow",
        "timestamp": 1560165476
    }
]