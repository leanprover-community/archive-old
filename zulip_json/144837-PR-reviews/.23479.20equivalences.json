[
    {
        "content": "<p>This one was overdue, and lurking in my other repository.</p>",
        "id": 147792343,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542338243
    },
    {
        "content": "<ul>\n<li>Define <code>equivalence C D</code> for an equivalence of categories,</li>\n<li><code>[refl]</code>, <code>[symm]</code>, and <code>[trans]</code> for equivalences,</li>\n<li>a typeclass <code>is_equivalence</code> to decorate functors,</li>\n<li>and the proofs that a functor is an equivalence if and only if it is fully faithful and essentially surjective.</li>\n</ul>",
        "id": 147792347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542338270
    },
    {
        "content": "<p>One thing to note: <code>ess_surj</code> here is the constructive version, that picks a particular up-to-isomorphism-preimage for every object, not merely asserting that one exists.</p>",
        "id": 147792389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542338306
    },
    {
        "content": "<p>If this is upsetting, I can add an extra constructor that uses choice and just takes the existence statement.</p>",
        "id": 147792396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542338335
    },
    {
        "content": "<p>I think it might be best to just make <code>ess_surj</code> a Prop</p>",
        "id": 147793562,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542340003
    },
    {
        "content": "<p>I'm actually not sure... when does one really use the fact that ess. surj. + fully faithful implies an equivalence?</p>",
        "id": 147793709,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542340206
    },
    {
        "content": "<p>I thought that was the only purpose of ess surj</p>",
        "id": 147793744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542340322
    },
    {
        "content": "<p>I see... I guess the point is that you don't have to construct the functoriality of the inverse functor</p>",
        "id": 147793912,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542340523
    },
    {
        "content": "<p>or the naturality of one of the isomorphisms</p>",
        "id": 147793968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542340617
    },
    {
        "content": "<p>or both isomorphisms actually</p>",
        "id": 147793980,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542340660
    },
    {
        "content": "<p>Maybe it would be simplest to just discard <code>ess_surj</code> and inline its fields into arguments of <code>equivalence_of_fully_faithfully_ess_surj</code></p>",
        "id": 147794043,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542340760
    },
    {
        "content": "<p>The same thing happens for adjunctions (<a href=\"https://github.com/leanprover-community/mathlib/blob/adjunctions/category_theory/adjunction.lean#L280\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/adjunctions/category_theory/adjunction.lean#L280\">https://github.com/leanprover-community/mathlib/blob/adjunctions/category_theory/adjunction.lean#L280</a>)</p>",
        "id": 147794205,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542340968
    },
    {
        "content": "<p>But in actual math, providing that structure would always be trivial, anyways</p>",
        "id": 147794676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542341697
    },
    {
        "content": "<p>I guess another way of putting it is: when would you need choice to prove that a functor (which you're proving is an equivalence) is essentially surjective, rather than just writing down a formula for an inverse image of an object</p>",
        "id": 147795637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542343219
    },
    {
        "content": "<p>I’d be happy with the inlining solution.</p>",
        "id": 147801654,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542354197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, what do you think here? Inlining <code>ess_surj</code> feels to me like to makes the code more cluttered, and I don't really understand the argument against having it.</p>",
        "id": 148697250,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543394253
    },
    {
        "content": "<p>I wouldn't mind keeping it. I think it might turn out to be useful... although I don't have a concrete example. But I think essential images show up, and probably we want to know that functors are essentially surjective onto their essential image, etc...</p>",
        "id": 148697336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543394392
    },
    {
        "content": "<p>Besides this question about <code>ess_surj</code>, the equivalences branch is now ready to go. It's mostly the basic facts about equivalences.</p>",
        "id": 148698817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543396461
    },
    {
        "content": "<p>It also contains a new category theory-specific  tactic <code>slice</code>.</p>",
        "id": 148698824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543396484
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/--\n`slice` is a conv tactic; if the current focus is a composition of several morphisms,\n`slice a b` reassociates as needed, and zooms in on the `a`-th through `b`-th morphisms.\n\nThus if the current focus is `(a ≫ b) ≫ ((c ≫ d) ≫ e)`, then `slice 2 3` zooms to `b ≫ c`.\n -/\n</pre></div>",
        "id": 148698840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543396513
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>/--\n`slice_lhs a b { tac }` zooms to the left hand side, uses associativity for categorical\ncomposition as needed, zooms in on the `a`-th through `b`-th morphisms, and invokes `tac`.\n-/\n</pre></div>",
        "id": 148698845,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543396523
    },
    {
        "content": "<p>There's also a note in the PR:</p>\n<div class=\"codehilite\"><pre><span></span>-- TODO someone might like to generalise this tactic to work with other associative structures.\n</pre></div>\n\n\n<p>but that someone is not me at the moment, and hopefully won't hold up this PR.</p>",
        "id": 148698864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543396562
    },
    {
        "content": "<p>(It's possible <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> will be interested, however, as he's done similar stuff already.)</p>",
        "id": 148698918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543396585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> oh dear, something went wrong in the merge. Did I miss a dependent PR?</p>",
        "id": 148700202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543398236
    },
    {
        "content": "<p>I don't think so?</p>",
        "id": 148700271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398295
    },
    {
        "content": "<p>Shall I rebase onto current master?</p>",
        "id": 148700278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398304
    },
    {
        "content": "<p>Or is it too late for that? :-)</p>",
        "id": 148700281,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398309
    },
    {
        "content": "<p>It looks okay to me? I see it sitting on top of master now.</p>",
        "id": 148700305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398354
    },
    {
        "content": "<p>Oh, I see there are problems.</p>",
        "id": 148700446,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398480
    },
    {
        "content": "<p>ok, fix coming</p>",
        "id": 148700487,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398486
    },
    {
        "content": "<p>I think it's minor, some imports, but I'm not sure how they got messed up.</p>",
        "id": 148700495,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398500
    },
    {
        "content": "<p>It looks like changing the line <code>import category_theory.embedding</code> to <code>import category_theory.fully_faithful</code> at the top of <code>category_theory/equivalences.lean</code> solves the problem.</p>",
        "id": 148700541,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398588
    },
    {
        "content": "<p>I've no idea how it was passing locally and on travis with that wrong, but okay. :-)</p>",
        "id": 148700584,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398604
    },
    {
        "content": "<p>I guess just that <code>.olean</code> files never get deleted!?</p>",
        "id": 148700595,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398617
    },
    {
        "content": "<p>right</p>",
        "id": 148700599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543398622
    },
    {
        "content": "<p>Is it best if you make that change?</p>",
        "id": 148700602,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398628
    },
    {
        "content": "<p>Or should I make a commit on community?</p>",
        "id": 148700609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398639
    },
    {
        "content": "<p>eh, it's not checked out here, just send a PR</p>",
        "id": 148700618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543398647
    },
    {
        "content": "<p>ok, I will fix some documentation failures I'm noticing at the same time :-)</p>",
        "id": 148700659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543398716
    },
    {
        "content": "<p>ok</p>",
        "id": 148700709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1543398733
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/issues/500\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/500\">#500</a></p>",
        "id": 148701010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543399099
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, what do you think here? Inlining <code>ess_surj</code> feels to me like to makes the code more cluttered, and I don't really understand the argument against having it.</p>\n</blockquote>\n<p>My only objection is that the name <code>ess_surj</code> is wrong, because \"essentially surjective\" is a property but <code>ess_surj F</code> values are not unique in any sense at all (except when <code>F</code> is actually an equivalence).</p>",
        "id": 148711889,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543412747
    },
    {
        "content": "<p>It should be named <code>ess_left_inverse_on_objects</code> (or maybe right--I've lost any grasp I may have once had on the difference between left and right), or <code>ess_surj_data</code> or <code>ess_surj_choices</code> or something.</p>",
        "id": 148711978,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543412814
    },
    {
        "content": "<p>Okay! I will rename it to something sufficiently unpleasant looking to warn people off. :-)</p>",
        "id": 148741371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543437588
    }
]