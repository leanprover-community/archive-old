[
    {
        "content": "<p>Johan asked me to golf some of the longer proofs, like <code>nat_degree_taylor</code> and <code>nat_degree_hasse_deriv</code>. I tried to factor out into lemmas about <code>finset.sup</code> over the sums, but juggling proofs about them also takes a lot of lines. Does anyone have any inspiration on how to make this PR more neat?</p>",
        "id": 266900620,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641361674
    },
    {
        "content": "<p>I looked a little into this and here is a suggestion.</p>\n<p>Strengthen <code>induction_with_nat_degree_le</code> and prove a further lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">induction_with_nat_degree_le</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P_0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P_C_mul_pow</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">P_C_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">→</span>\n    <span class=\"n\">f.nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">g.nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">df</span><span class=\"o\">,</span>\n  <span class=\"n\">generalize'</span> <span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">card</span> <span class=\"n\">f.support</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">df</span> <span class=\"n\">f0</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">P_0</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">support_eq_empty</span><span class=\"o\">,</span> <span class=\"n\">card_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">f0</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">df</span> <span class=\"n\">f0</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">erase_lead_add_C_mul_X_pow</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n    <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">P_C_mul_pow</span> <span class=\"n\">f.nat_degree</span> <span class=\"n\">f.leading_coeff</span> <span class=\"n\">_</span> <span class=\"n\">df</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">zero_add</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">card_support_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">erase_lead_card_support</span> <span class=\"n\">f0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leading_coeff_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">card_support_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">f0</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">zero_ne_one.symm</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">P_C_add</span> <span class=\"n\">f.erase_lead</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">erase_lead_nat_degree_le.trans</span> <span class=\"n\">df</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">erase_lead_nat_degree_lt</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">nat.succ_le_succ</span> <span class=\"o\">(</span><span class=\"n\">nat.zero_le</span> <span class=\"n\">_</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">f0.ge</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_C_mul_X_pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">leading_coeff_ne_zero.mpr</span> <span class=\"n\">_</span><span class=\"o\">)],</span>\n        <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">f0</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_C_mul_X_pow_le</span> <span class=\"n\">f.leading_coeff</span> <span class=\"n\">f.nat_degree</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">df</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">hc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">erase_lead_nat_degree_le.trans</span> <span class=\"n\">df</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">erase_lead_card_support</span> <span class=\"n\">f0</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">P_C_mul_pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">df</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">leading_coeff_eq_zero</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">card_support_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">f0</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat.succ_ne_zero</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_eq_of_zero_add_monomial</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F0</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F_mon_nat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">induction_with_nat_degree_le</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p.nat_degree</span><span class=\"o\">)</span> <span class=\"n\">p.nat_degree</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">F0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">r0</span> <span class=\"n\">np</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_C_mul_X_pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">monomial_eq_C_mul_X</span><span class=\"o\">,</span> <span class=\"n\">F_mon_nat</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">fg</span> <span class=\"n\">fp</span> <span class=\"n\">gp</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">F_add</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_add_eq_right_of_nat_degree_lt</span><span class=\"o\">,</span> <span class=\"n\">nat_degree_add_eq_right_of_nat_degree_lt</span> <span class=\"n\">fg</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">],</span>\n    <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">rfl.le</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>introduce also the following two lemmas about <code>monic</code>and <code>nat_degree</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">monic.nat_degree_pow</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mp</span> <span class=\"o\">:</span> <span class=\"n\">monic</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p.nat_degree</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">monic.nat_degree_mul</span> <span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">monic_pow</span> <span class=\"n\">mp</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">hn</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_pow_X_add_C</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">monic.nat_degree_pow</span> <span class=\"o\">(</span><span class=\"n\">monic_X_add_C</span> <span class=\"n\">r</span><span class=\"o\">),</span> <span class=\"n\">nat_degree_X_add_C</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Finally, you can prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_taylor</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">taylor</span> <span class=\"n\">r</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nat_degree_eq_of_zero_add_monomial</span> <span class=\"o\">(</span><span class=\"n\">taylor</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">nontriviality</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">c</span> <span class=\"n\">c0</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">taylor_monomial</span><span class=\"o\">,</span> <span class=\"n\">nat_degree_C_mul_eq_of_mul_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">nat_degree_pow_X_add_C</span><span class=\"o\">,</span> <span class=\"n\">c0</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If this makes sense, then I can open a couple of PRs.</p>",
        "id": 266926287,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641383807
    },
    {
        "content": "<p>I went ahead and started with the PRs:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/11257\">#11257</a>  -- strengthens the induction principle and introduces a new lemma;<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/11259\">#11259</a>  -- proves how degrees of monic polynomials behave under powers.</p>",
        "id": 266927884,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641384994
    },
    {
        "content": "<p>Also, unless I am mistaken with all these open PRs, the lemma <code>nat_degree_taylor_le</code> is no longer needed, since the proof of <code>nat_degree_taylor</code> no longer uses it.</p>",
        "id": 266929842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641386349
    },
    {
        "content": "<p>Thanks Damiano! This looks great. I'll incorporate your suggestions. In fact, your induction principle will shorten a lot of related proofs I did elsewhere.</p>",
        "id": 266945842,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641395050
    },
    {
        "content": "<p>In a similar vein, you can prove a \"helper lemma\" to then simplify the proof of <code>nat_degree_hasse_deriv</code>, again avoiding going via <code>nat_degree_hasse_deriv_le</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_nat_degree_eq_sub</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">pk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">p.nat_degree</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F0</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Fk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">F</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F_mon_nat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">n</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">pk</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">induction_with_nat_degree_le</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">p.nat_degree</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl.le</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">F0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"n\">r0</span> <span class=\"n\">np</span> <span class=\"n\">kd</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_C_mul_X_pow</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">monomial_eq_C_mul_X</span><span class=\"o\">,</span> <span class=\"n\">F_mon_nat</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">fg</span> <span class=\"n\">fp</span> <span class=\"n\">gp</span> <span class=\"n\">kf</span> <span class=\"n\">kg</span> <span class=\"n\">kfg</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_add_eq_right_of_nat_degree_lt</span> <span class=\"n\">fg</span><span class=\"o\">,</span> <span class=\"n\">F_add</span><span class=\"o\">],</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">FG</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">f.nat_degree</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_add_eq_right_of_nat_degree_lt</span><span class=\"o\">,</span> <span class=\"n\">kg</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">kfg.trans</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_add_eq_right_of_nat_degree_lt</span> <span class=\"n\">fg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">kf</span> <span class=\"n\">FG</span><span class=\"o\">,</span> <span class=\"n\">kg</span><span class=\"o\">],</span><span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">tsub_lt_tsub_iff_right</span> <span class=\"n\">FG</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">fg</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">FG.trans</span> <span class=\"n\">fg.le</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Fk</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">FG</span><span class=\"o\">),</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">KG</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">g.nat_degree</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">kg</span> <span class=\"n\">KG</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">Fk</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">KG</span><span class=\"o\">)]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">nat.sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">KG</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_degree_hasse_deriv</span> <span class=\"o\">[</span><span class=\"n\">no_zero_smul_divisors</span> <span class=\"n\">ℕ</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">hasse_deriv</span> <span class=\"n\">n</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nat_degree</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">pn</span> <span class=\"o\">:</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">hasse_deriv_eq_zero_of_lt_nat_degree</span><span class=\"o\">,</span> <span class=\"n\">pn</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">nat.sub_eq_zero_of_le</span> <span class=\"n\">pn.le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">map_nat_degree_eq_sub</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">pn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">(</span><span class=\"n\">hasse_deriv</span> <span class=\"n\">n</span><span class=\"o\">)),</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hasse_deriv_eq_zero_of_lt_nat_degree</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">map_add</span> <span class=\"o\">(</span><span class=\"n\">hasse_deriv</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">classical</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ite_eq_right_iff</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">nat_degree_monomial</span><span class=\"o\">,</span> <span class=\"n\">hasse_deriv_monomial</span><span class=\"o\">],</span>\n      <span class=\"n\">intros</span> <span class=\"n\">k</span> <span class=\"n\">c</span> <span class=\"n\">c0</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nsmul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">nat.choose_eq_zero_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">nat.sub_eq_zero_of_le</span> <span class=\"o\">(</span><span class=\"n\">or.resolve_right</span> <span class=\"n\">hh</span> <span class=\"n\">c0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266955806,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641399697
    },
    {
        "content": "<p>Yup, that's what I was planning on doing! And also likely the proof about the nat_degree of a pairwise disjoint sum.</p>",
        "id": 266955918,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641399741
    },
    {
        "content": "<p>Ok, since I have it, I will PR <code>map_nat_degree_eq_sub</code> as a dependent of <a href=\"https://github.com/leanprover-community/mathlib/pull/11257\">#11257</a>.  Once the three PRs are merged, then you can simplify the proof of the <code>hasse_deriv</code> lemmas.  Sounds good?</p>",
        "id": 266956153,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641399897
    },
    {
        "content": "<p>Sounds wonderful, thank you</p>",
        "id": 266956173,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641399909
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11265\">#11265</a> contain lemma <code>map_nat_degree_eq_sub</code>.</p>\n<p><del>I am not sure if CI is having some issues or if I did something wrong...</del><br>\nSeems that CI is now cooperating!</p>",
        "id": 266958408,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1641400918
    }
]