[
    {
        "content": "<p>I would like to move </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">log_div_self_rpow_antitone_on</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hex</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">log</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>out of the bertrand file, and alongside <a href=\"https://leanprover-community.github.io/mathlib_docs/find/log_div_self_antitone_on\">docs#log_div_self_antitone_on</a>, but unfortunately that file doesn't have rpow. Should I make a new file to put these two lemmas in?</p>",
        "id": 280588819,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1651210902
    },
    {
        "content": "<p>There are other files in that <code>special_functions</code> directory that do have rpow. Is one of them a good match?</p>",
        "id": 280590430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651212800
    },
    {
        "content": "<p>Otherwise, we could also consider adding an import. Intuitively, rpow feels like a pretty basic notion.</p>",
        "id": 280590452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651212841
    },
    {
        "content": "<p>Problem is, rpow is defined in terms of exp, I believe</p>",
        "id": 280591336,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1651213784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> If there's not an obvious file to put this in, I think that starting a new file is totally fine.</p>",
        "id": 280593618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651215866
    },
    {
        "content": "<p>Currently getting an error I've never seen before  - on \"Export as low level text file\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Run</span> <span class=\"n\">lean</span> <span class=\"c1\">--recursive --export=mathlib.txt src/</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">ghrunner</span><span class=\"bp\">/</span><span class=\"n\">actions</span><span class=\"bp\">-</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">_work</span><span class=\"bp\">/</span><span class=\"n\">_temp</span><span class=\"bp\">/</span><span class=\"mi\">651819</span><span class=\"n\">f2</span><span class=\"bp\">-</span><span class=\"mi\">048</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"mi\">47</span><span class=\"n\">b7</span><span class=\"bp\">-</span><span class=\"mi\">9585</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"n\">a5486178973.sh</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mi\">3326011</span> <span class=\"n\">Killed</span>                  <span class=\"n\">lean</span> <span class=\"c1\">--recursive --export=mathlib.txt src/</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Process</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">137</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>What is going on here?</p>",
        "id": 285714529,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1654885389
    },
    {
        "content": "<p>Is this on github continuous integration? I think exit code 137 is just \"out of memory\" (maybe caused by other jobs on the runner) so you can restart CI on github and hopefully it will work this time.</p>",
        "id": 285718750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654887457
    },
    {
        "content": "<p>I've re-run it twice, and I'm getting the same problem. Any other ideas?</p>",
        "id": 285791659,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1654971865
    },
    {
        "content": "<p>Can you reproduce it locally?</p>",
        "id": 285791897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654972295
    },
    {
        "content": "<p>The error now isn't the same as the one above</p>",
        "id": 285798290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654982279
    },
    {
        "content": "<p>But either way, that export shouldn't take anywhere near an hour</p>",
        "id": 285798336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654982305
    },
    {
        "content": "<p>It usually takes 5 minutes</p>",
        "id": 285798350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654982343
    },
    {
        "content": "<p>So probably it's stuck in an infinite loop that is also chewing through the heap and using up memory as it goes</p>",
        "id": 285798359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654982379
    },
    {
        "content": "<p>What is this \"Export as low level text file\" test and what is it for? I'm not sure how to reproduce a CI test locally.</p>",
        "id": 286288322,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1655335729
    },
    {
        "content": "<p>You can find the command in the CI log: <code>lean --recursive --export=mathlib.txt src/</code></p>",
        "id": 286320977,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655367769
    },
    {
        "content": "<p>I believe you can just run this command and see how long it takes (according to recent successful builds, should be less than 5 minutes).</p>",
        "id": 286321047,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655367834
    },
    {
        "content": "<p>If you only care because the job failed on CI, you can just rerun the failed job: occasionally CI has a hiccup unrelated to the code it's processing.</p>",
        "id": 286322003,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655368380
    },
    {
        "content": "<p>I've just hit the rerun button so we'll know in c.15 mins.</p>",
        "id": 286322027,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655368397
    },
    {
        "content": "<p>You can reproduce it with <code>lean --export=mathlib.txt src/number_theory/bertrand.lean</code>. My guess is that exporting <code>inequality3</code> is taking a long time for some reason (it eventually stops producing output but keeps eating memory). Let me check.</p>",
        "id": 286328263,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1655372062
    },
    {
        "content": "<p>Actually, I think my new suspect is <code>exp_two_le_722</code>. The <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> below makes <code>lean --export=mathlib.txt src/mwe.lean</code> take a long time and consume a lot of memory. Can you replace the intermediate steps with a simpler bound to see if it helps?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential_bounds</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exp_two_le_722</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">722</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">calc</span> <span class=\"n\">exp</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">exp_nat_mul</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">7182818286</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n      <span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">exp_pos</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">exp_one_lt_d9</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">38905609969695977796</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">722</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 286332303,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1655374997
    },
    {
        "content": "<p>What happens if you try instead with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.exponential_bounds</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exp_two_le_722</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">722</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"k\">calc</span> <span class=\"n\">exp</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">exp_nat_mul</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">7182818286</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n      <span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">exp_pos</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">exp_one_lt_d9</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">722</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>?</p>",
        "id": 286344172,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1655382007
    },
    {
        "content": "<p>why not use 3 instead of such a precise estimate for <code>e</code>?</p>",
        "id": 286344434,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655382146
    },
    {
        "content": "<p>Is there a lemma stating <code>e &lt; 3</code>? I could see <code>exp_one_lt_d9</code> being the weakest pre-existing upper bound on <code>e</code>.</p>",
        "id": 286344944,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1655382397
    },
    {
        "content": "<p>no, but if this is causing such a slowdown, it's worth making I guess</p>",
        "id": 286345170,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655382513
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exp_two_le_722'</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">722</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">exp</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">exp_nat_mul</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">7182818286</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n      <span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">exp_pos</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">exp_one_lt_d9</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n      <span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">722</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>\n<p>seems to be a way shorter term (btw, <code>calc</code> is essentially term mode, <code>by calc</code> is redundant)</p>",
        "id": 286345424,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655382671
    },
    {
        "content": "<p>funnily enough, I think using <code>4</code> instead of <code>3</code> minimises it even a little more, I guess because of <code>bit0</code> etc</p>",
        "id": 286345739,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655382844
    },
    {
        "content": "<p>do we have some command that measures proof length? copy-pasting it into a new file to see the line-length is not very scientific</p>",
        "id": 286345774,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655382867
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Proof.20size/near/182395471\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Proof.20size/near/182395471</a></p>",
        "id": 286364077,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655391164
    },
    {
        "content": "<p>original proof: 897643/12651<br>\nsebastien's: 771205/11256<br>\nmine (3|4): 54368/2208 | 43634/1845</p>\n<p>I think it's worth switching to my proof (with 4 in)</p>",
        "id": 286365421,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655391647
    },
    {
        "content": "<p>for reference, the longest proof I know in mathlib (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.nat_eq_done\">docs#parser.nat_eq_done</a>) is 257748/13369</p>",
        "id": 286365917,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655391824
    },
    {
        "content": "<p>Just replaced the proof with <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> 's and I can run this export flag in a minute or two. Thanks for all your help!</p>",
        "id": 286367402,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1655392351
    },
    {
        "content": "<p>With this, I think I'm feeling very close to marking this PR awaiting-review! <br>\nOne question: What do people think should be done about these short numerical lemmas at the beginning of the file? Should they all be made private? Should they be moved to another file?</p>",
        "id": 286394183,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1655404248
    },
    {
        "content": "<p>/poll What should happen to the many little numerical facts about the reals, e.g. <code>log 722 = log 2 + 2 * log 19</code> or <code>log 521284 / log 2 ≤ 19</code>?<br>\nMove them into a new file<br>\nMake them private<br>\nKeep them public and where they are<br>\nSomething else</p>",
        "id": 286398151,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1655405923
    },
    {
        "content": "<p>I wonder whether we should have the more general fact that <code>real.log (n : ℕ) = n.factorization.sum (λ p t, t * p)</code></p>",
        "id": 286401620,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655407715
    },
    {
        "content": "<p><code>e &lt; 3</code> is simple enough that it should be its own lemma</p>",
        "id": 286404207,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1655409087
    },
    {
        "content": "<p><code>log_722</code> does not appear to be used at all (unless there is some deep magic happening), and <code>sqrt_361</code> could be proved in one line at the single use site</p>",
        "id": 286405350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655409574
    },
    {
        "content": "<p><code>inequality</code> also does not appear to be used</p>",
        "id": 286405859,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655409785
    },
    {
        "content": "<p>In general, random one-off short calculations like these should be done inline</p>",
        "id": 286405939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655409818
    },
    {
        "content": "<p>Maybe if the computation is too difficult it could timeout if done online together with other expensive tactics. I have no idea whether this is the explanation here.</p>",
        "id": 286406143,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655409900
    },
    {
        "content": "<p>Yeah that's a potential issue, but at least the ones I mentioned look pretty small.</p>",
        "id": 286406723,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655410159
    },
    {
        "content": "<p>The risk in making them top-level lemmas far away from their use sites is that later you refactor the proof and you actually have no need for them any more.</p>",
        "id": 286406772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655410187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238002.3A.20Bertrand's.20Postulate/near/286401620\">said</a>:</p>\n<blockquote>\n<p>I wonder whether we should have the more general fact that <code>real.log (n : ℕ) = n.factorization.sum (λ p t, t * p)</code></p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14782\">#14782</a></p>",
        "id": 286407030,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655410310
    },
    {
        "content": "<p>In practice you would probably write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"k\">show</span> <span class=\"mi\">722</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">19</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span> <span class=\"n\">log_mul</span><span class=\"o\">,</span> <span class=\"n\">log_pow</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>instead though</p>",
        "id": 286407289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655410435
    },
    {
        "content": "<p>Ok, I've made them private.</p>",
        "id": 286444273,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1655439013
    },
    {
        "content": "<p>Mostly the reason I separated these lemmas is that they were occurring  so often I got tired of reproving them inline.</p>",
        "id": 286444315,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1655439106
    },
    {
        "content": "<p>Numerical lemmas are heavy enough that if you have to use the theorem more than once then that should be reason enough to extract them into a lemma rather than taking the kernel through the proof twice, but if you only use the theorem in one place then the only reason I would outline them is if it is so slow that it makes working on the rest of the proof annoying</p>",
        "id": 286446504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1655442088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Would you mind please taking a look at the most recent replies to <a href=\"https://github.com/leanprover-community/mathlib/pull/8002\">https://github.com/leanprover-community/mathlib/pull/8002</a> ? I think your comments are currently the only blockers for the PR.</p>",
        "id": 291481905,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1659261813
    },
    {
        "content": "<p>I have been working on a pr for the lemma 5 of the tochiori Wikipedia article, so if you would really like that part of the Tochiori argument, we can make the pr depend on that</p>",
        "id": 291487207,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1659269367
    },
    {
        "content": "<p>It's on the merge queue already, but you are welcome to add a follow up PR</p>",
        "id": 291487360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659269595
    }
]