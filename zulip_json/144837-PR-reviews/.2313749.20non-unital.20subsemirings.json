[
    {
        "content": "<p>I'd love to see any progress on this PR. It looks ready to me but I note that <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> has self-assigned. Obviously I realise we're all very busy so no pressure: just a vote in favour.</p>",
        "id": 294433496,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660997729
    },
    {
        "content": "<p>I could be mistaken, but I think Eric may be concerned about this for the same reason as this thread: <a href=\"#narrow/stream/113488-general/topic/has_coe_t.20for.20semilinear_map_class\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/has_coe_t.20for.20semilinear_map_class</a></p>",
        "id": 294456445,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661010311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> is my assumption correct? Either way, what should I do to move this PR forward?</p>",
        "id": 294672770,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661173905
    },
    {
        "content": "<p>I think I was concerned about putting in a possibly performance-impacting generalization (the switch to use <code>ring_hom_class</code> in the new <code>non_unital_sub_semiring.map</code>) at the same time as adding a pile of boilerplate</p>",
        "id": 294760841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661199482
    },
    {
        "content": "<p>If we're going to change things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.map\">docs#subring.map</a> to use <code>ring_hom_class</code>, we should change all the subobjects at the same time</p>",
        "id": 294760918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661199507
    },
    {
        "content": "<p>That way we learn whether the design scales to all of them or not</p>",
        "id": 294760944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661199523
    },
    {
        "content": "<p>Changing the design of just the new boilerplate is a recipe for unresolvable inconsistency if we find the design doesn't scale after all.</p>",
        "id": 294761121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661199608
    },
    {
        "content": "<p>Aha, this:<br>\n<span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313749.20non-unital.20subsemirings/near/294760918\">said</a>:</p>\n<blockquote>\n<p>If we're going to change things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.map\">docs#subring.map</a> to use <code>ring_hom_class</code>, we should change all the subobjects at the same time</p>\n</blockquote>\n<p>was not my perception of our approach. I thought our approach was more along the lines of: \"this is a big job to do all at once, so instead let's tackle things as we come across them,\" but perhaps I misunderstood.</p>\n<p>I think we need to have a wider discussion about the long-term plans for the hom classes. I get the feeling that there have only been a very small number of people involved in thinking about them; my estimate is Anne, Eric, Yaël, Frédéric and me, but perhaps I've missed other people who have been heavily invested, or at least others who have been carefully following the conversation.</p>",
        "id": 294770396,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661204049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313749.20non-unital.20subsemirings/near/294760918\">said</a>:</p>\n<blockquote>\n<p>If we're going to change things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.map\">docs#subring.map</a> to use <code>ring_hom_class</code>, we should change all the subobjects at the same time</p>\n</blockquote>\n<p>Actually, I've already started doing this (see e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.map\">docs#submodule.map</a>) and I really think it's the way to go. Especially for defs like <code>linear_map.ker</code>, <code>linear_map.range</code>, eigenvalues and so on -- these things apply to all types of linear maps and we want to have a unified definition instead of having to constantly convert down to a plain linear map. Also, one thing I think we should really avoid is to start having separate definitions for each hom, like we started doing with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.ker\">docs#continuous_linear_map.ker</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.range\">docs#continuous_linear_map.range</a> -- it risks becoming a real mess when we also feel the need to have them for <code>linear_isometry</code>, <code>linear_equiv</code>, <code>continuous_linear_equiv</code>, <code>alg_hom</code>, and so on.</p>",
        "id": 294774406,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1661206281
    },
    {
        "content": "<p>Oh that's great news; if the performance is ok for submodules, which have more typeclasses to deal with than most other subobjects,  then I'm happy to believe it's fine everywhere!</p>",
        "id": 294789182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661216292
    },
    {
        "content": "<p>Perhaps we should open a github issue to record that we intend to change all such <code>map</code> methods</p>",
        "id": 294789212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1661216339
    },
    {
        "content": "<p>In that vein: <a href=\"https://github.com/leanprover-community/mathlib/pull/16208\">#16208</a>.</p>",
        "id": 294797152,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1661224738
    },
    {
        "content": "<p>Do we have a lemma somewhere that says the <code>linear_map.ker</code> of some member of a <code>continuous_linear_map_class</code> is closed? (EDIT: nevermind, I'll just comment on the PR)</p>",
        "id": 294798317,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1661226087
    }
]