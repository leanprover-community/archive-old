[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, any thoughts on the presheaf PR? If you don't like the direction it's going, it would be good to hear, as I'm hoping to add a more stuff building on it (in other PRs), hoping the convince the perfectoid-ists to use some category theory. :-)</p>",
        "id": 162779596,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554682577
    },
    {
        "content": "<p>Also, perhaps independently on how we eventually do presheaves on spaces and bundled presheaves on spaces, there's the question of where these files go. In the current PR they are in <code>category_theory</code>, which is clearly wrong. Shall we finally open the <code>algebraic_geometry</code> directory? :-)</p>",
        "id": 162779616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554682652
    },
    {
        "content": "<p>It's looking pretty good to me.</p>",
        "id": 162780790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554684537
    },
    {
        "content": "<p>I still wonder whether it might make things easier to axiomatize the structure of the assignment <code>opens</code></p>",
        "id": 162780809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554684589
    },
    {
        "content": "<p>Great, good to hear. I think I'd like to slice it into some smaller files --- a first file for unbundled presheaves on spaces, and then a second file for the bundled version. Shall I do this on this PR still?</p>",
        "id": 162780864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554684620
    },
    {
        "content": "<p>You mean do sites already?</p>",
        "id": 162780880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554684686
    },
    {
        "content": "<p>Pseudofunctor from <code>Top</code> to \"categories\" (unboxed)</p>",
        "id": 162780883,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554684703
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 162780884,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554684710
    },
    {
        "content": "<p>I've been terrified of opening the pseudofunctor can of worms.</p>",
        "id": 162780935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554684732
    },
    {
        "content": "<p>I predict it will either make things easier or harder :)</p>",
        "id": 162780937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554684735
    },
    {
        "content": "<p>:-)</p>",
        "id": 162780938,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554684738
    },
    {
        "content": "<p>I agree that it is unlikely to make things stay the same.</p>",
        "id": 162780943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554684755
    },
    {
        "content": "<p>It would be lovely if it got easier. :-)</p>",
        "id": 162780945,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554684764
    },
    {
        "content": "<p>You basically defined most of the structure in the PR already, I think</p>",
        "id": 162780946,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554684774
    },
    {
        "content": "<p>but I don't know whether you're relying on the coherence conditions being satisfied definitionally</p>",
        "id": 162780965,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554684822
    },
    {
        "content": "<p>Yes, this is exactly where all my <code>simp, dsimp, simp, dsimp, simp, dammit, erw ...</code> pains come from.</p>",
        "id": 162782481,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554687299
    },
    {
        "content": "<p>I would really like <code>@[simp] lemma map_id_obj {X : Top.{u}} (U : opens X) : (map (ùüô X)).obj U = U := rfl</code></p>",
        "id": 162782493,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554687308
    },
    {
        "content": "<p>but that is just not true. If you <code>case</code> bash on <code>U</code>, it becomes true.</p>",
        "id": 162782496,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554687326
    },
    {
        "content": "<p>In a slightly different direction, I can define </p>\n<div class=\"codehilite\"><pre><span></span>def presheaf_of_functions_to (T : Top.{v}) : presheaf_on_space (Type v) X :=\n(opens.as_Top X).op ‚ãô (yoneda.obj T)\n</pre></div>\n\n\n<p>which strikes me as very pleasant. (Here <code>def as_Top (X : Top.{u}): opens X ‚•§ Top := ...</code>.)</p>",
        "id": 162782541,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554687370
    },
    {
        "content": "<p>When I want to do presheaves of maps into a <code>TopCommRing</code>, however, I will need <br>\n<code>def not_yoneda : TopCommRing ‚•§ (Top·µí·µñ ‚•§ TopCommRing)</code><br>\n What is the right level of abstraction for doing this?</p>",
        "id": 162782601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554687500
    },
    {
        "content": "<p>or is that just nonsense?</p>",
        "id": 162782662,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554687605
    },
    {
        "content": "<p>...</p>",
        "id": 162782665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554687606
    },
    {
        "content": "<p>I don't understand what the math is supposed to be there</p>",
        "id": 162783099,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554688386
    },
    {
        "content": "<p>you have a target topological commutative ring, let's say R</p>",
        "id": 162783109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554688429
    },
    {
        "content": "<p>(the reals)</p>",
        "id": 162783111,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554688432
    },
    {
        "content": "<p>then continuous maps from a topological space to R form a ring, but what topology do you want to give it?</p>",
        "id": 162783161,
        "sender_full_name": "Reid Barton",
        "timestamp": 1554688485
    },
    {
        "content": "<p>I guess I had in mind the compact-open, but probably it is unnecessary to even think about the topology.</p>",
        "id": 162785320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554692109
    },
    {
        "content": "<p>I just want <code>def not_yoneda : TopCommRing ‚•§ (Top·µí·µñ ‚•§ CommRing)</code>.</p>",
        "id": 162785326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1554692132
    }
]