[
    {
        "content": "<p>I've been tidying up <a href=\"https://github.com/leanprover-community/mathlib/pull/2701\">https://github.com/leanprover-community/mathlib/pull/2701</a> for a while now, making it a bit more consistent with the rest of mathlib, and I've got stuck again with a question of style. There's a couple of lemmas I've marked private because they're so very trivial and I can't think where to put them, but others have said definitely that lemmas shouldn't be marked private except for a good reason. Can anyone suggest where the three lemmas belong, or what I should do with them if they don't belong? </p>\n<p>For convenience, these are the lemmas. <code>range_contains_upper_bound</code> would go in data.finset, I guess, and <code>select_From_sum</code> would go in algebra.big_operators, and <code>bound_binomial_coefficient</code> would go in data.nat.choose - but they really are very trivial.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kn\">lemma</span> <span class=\"n\">range_contains_upper_bound</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">succ_pos&#39;</span><span class=\"o\">,</span> <span class=\"n\">lt_add_iff_pos_right</span><span class=\"o\">,</span> <span class=\"n\">mem_range</span><span class=\"o\">]</span>\n\n <span class=\"kn\">private</span> <span class=\"kn\">lemma</span> <span class=\"n\">select_from_sum</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">insert_erase</span> <span class=\"n\">t</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n\n <span class=\"kn\">private</span> <span class=\"kn\">lemma</span> <span class=\"n\">bound_binomial_coefficient</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n   <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n     <span class=\"n\">exact</span> <span class=\"n\">select_from_sum</span> <span class=\"o\">(</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">range_contains_upper_bound</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n   <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">sum_range_choose_halfway</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">t</span>\n <span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198544294,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590254797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span> I just found time for a review (-;</p>",
        "id": 198544324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590254845
    },
    {
        "content": "<p>Thanks for all your work on this PR <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 198544471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590255119
    },
    {
        "content": "<p>My brain is being dragged kicking and screaming into knowing a bit about how mathlib works</p>",
        "id": 198546032,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1590257867
    },
    {
        "content": "<p>I'm amazed your <code>select_from_sum</code> doesn't exist already. Maybe rename it <code>le_sum_of_mem</code>? It should definitely not be private, as it's very useful.</p>",
        "id": 198564725,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590292701
    },
    {
        "content": "<p>We already have <code>single_le_sum</code>. If you want a version without an additional assumption, please add it to section <code>canonically_ordered_add_monoid</code>.</p>",
        "id": 198564890,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590293075
    }
]