[
    {
        "content": "<p>I have looked at this, but I am not sure whether the definitions <code>nnreal_sub</code> and <code>nnreal_mul</code> are good. Is there really not a sensible type-class that one can use?</p>",
        "id": 306826919,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667044209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513978\">@Jesse Reimann</span></p>",
        "id": 306827024,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667044256
    },
    {
        "content": "<p>Jesse and I thought about that in the summer, but we could not find an existing sensible type class then.</p>\n<p>We of course completely agree that the ideal approach would be to create some sensible type class which would cover <code>nnreal</code>, but choosing a suitable one for mathlib did not look trivial. The current solution is a workaround of the ideal one, but could the implementation improvement be left to when a better type class solution is found? Or does anyone else have ideas on the right solution?</p>",
        "id": 306842630,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1667051722
    },
    {
        "content": "<p>Can you explain what you want from this typeclass?</p>",
        "id": 306842755,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667051789
    },
    {
        "content": "<p>We'd want <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.has_sub\">docs#bounded_continuous_function.has_sub</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.has_mul\">docs#bounded_continuous_function.has_mul</a> to apply to <code>nnreal</code>-valued bounded continuous functions.</p>\n<p>The current type class assumption is <code>[seminormed_add_comm_group _]</code> in the former, and <code>nnreal</code> is not a group. The current type class assumption in  the latter is <code> [non_unital_semi_normed_ring _]</code> and <code>nnreal</code> is not a ring. So one needs a more general typeclass which covers <code>nnreal</code> and can be used instead of the current ones. They should probably be <code>somethingtopologicalsomething_monoid</code> and <code>somethingtopologicalsomething_semiring</code>.</p>",
        "id": 306843441,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1667052105
    },
    {
        "content": "<p><code>non_unital_semi_normed_semiring</code>? That's easy to add.</p>",
        "id": 306843576,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667052143
    },
    {
        "content": "<p>Is it? <span aria-label=\"astonished\" class=\"emoji emoji-1f632\" role=\"img\" title=\"astonished\">:astonished:</span> (I have <del>not much</del> <em>zero</em> experience refactoring the type class hierarchy...)</p>",
        "id": 306843663,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1667052177
    },
    {
        "content": "<p>My mathlib experience can mostly be summarized as \"refactoring the typeclass hierarchy\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 306843797,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667052235
    },
    {
        "content": "<p>Just to clarify, for the subtraction, one would also then add <code>seminormed_add_comm_semigroup</code> or <code>seminormed_add_comm_monoid</code> or something, in addition to your proposed <code>non_unital_semi_normed_semiring</code>, right? (You were too quick to respond with the type class suggestion, so I had not edited my originally oversimplified description grouping the subtraction and multiplication together.)</p>",
        "id": 306844528,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1667052555
    },
    {
        "content": "<p>Probably <code>has_sub</code> + <code>has_ordered_sub</code>?</p>",
        "id": 306844573,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667052582
    },
    {
        "content": "<p>And maybe add <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_exists_add_of_le\">docs#has_exists_add_of_le</a> to the mix.</p>",
        "id": 306844633,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667052603
    },
    {
        "content": "<p>Ah to be fair we would need to go quite far back, as <code>seminormed_monoid</code> isn't yet a thing.</p>",
        "id": 306844927,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667052742
    },
    {
        "content": "<p>for the substraction isn't it maybe better to do some coercion-nonsense plue taking the max of zero and the difference in the reals?</p>",
        "id": 306844991,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1667052769
    },
    {
        "content": "<p>Yes, but that doesn't work for <code>ℝ</code> itself!</p>",
        "id": 306845040,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667052792
    },
    {
        "content": "<p>If the solution were to build on order relations, then it is not strictly a generalization of the existing ones... Wouldn't this lead to something diamond-like (two potentiall non-equivalent subtrations of real-valued bounded continuous functions, for example)?</p>",
        "id": 306845081,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1667052814
    },
    {
        "content": "<p>I'm honestly not sure where you need subtraction in the first place...</p>",
        "id": 306845249,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667052884
    },
    {
        "content": "<p>(speaking of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.has_mul\">docs#bounded_continuous_function.has_mul</a>)</p>",
        "id": 306845300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667052920
    },
    {
        "content": "<p>It seems like you could use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_continuous_sub\">docs#has_continuous_sub</a> for continuity. I don't know yet about boundedness but it shouldn't be so hard.</p>",
        "id": 306845415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667052972
    },
    {
        "content": "<p>Indeed it is not hard, and this is how it is done now, a bit ad hoc. But that way doesn't use the <em>existing</em> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_continuous_function.has_sub\">docs#bounded_continuous_function.has_sub</a> because its type classes don't apply to <code>nnreal</code>. I believe this was Moritz' original concern with the PR.</p>",
        "id": 306845580,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1667053054
    },
    {
        "content": "<p>I mean that you could add an ad-hoc <code>has_bounded_sub</code> typeclass and suddenly you can generalize.</p>",
        "id": 306944048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667128520
    }
]