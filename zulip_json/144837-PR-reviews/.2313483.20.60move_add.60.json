[
    {
        "content": "<p>Sorry, this got posted before I was finished typing!</p>",
        "id": 280108215,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650910411
    },
    {
        "content": "<p>The tactic should have functioning \"unused arguments, target\" detection and functionality!  Feel free to comment or test!</p>\n<p>Thanks!</p>",
        "id": 280109312,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650910977
    },
    {
        "content": "<p>To show-case the <code>move_add</code>-niche, let me give an example from Sébastien's recent PR <a href=\"https://github.com/leanprover-community/mathlib/pull/13696\">#13696</a>.</p>\n<p>He proves</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_sq'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_sq</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and <code>move_add</code> is designed to make the <code>add_assoc/add_comm</code> stuff more automatic.  Indeed, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">add_sq'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">add_sq</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Goal: `a ^ 2 + 2 * a * b + b ^ 2 = a ^ 2 + b ^ 2 + 2 * a * b`</span>\n  <span class=\"c1\">-- so we move the terms that involve a `mul` to the right</span>\n <span class=\"n\">move_add</span> <span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span>  <span class=\"c1\">-- and we are done! }</span>\n</code></pre></div>\n<p>(Of course, in this case, also <code>abel</code> or <code>ring</code> would have solved the goal instead of <code>move_add</code>.  The scope of <code>move_add</code> is that you tell Lean which terms you want to go to the beginning and which ones you want to the end.)</p>\n<p>We could have also decided to move the terms involving a power of <code>b</code> to the left and used <code>move_add ← b ^ _</code>.</p>",
        "id": 280170797,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650958341
    },
    {
        "content": "<p>I'm curious about the speed of each solution <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> (although it's probably impossible to beat the sequence of rewrites)</p>\n<p>Btw, I recall the initial motivation being that laborious proof involving degrees of monomials. Does <code>move_add</code> make it easier?</p>",
        "id": 280186499,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1650967136
    },
    {
        "content": "<p>Let me just say that in this early file, neither <code>abel</code> nor <code>ring</code> is available yet, hence the tedious chain of rewrites.</p>",
        "id": 280186754,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1650967242
    },
    {
        "content": "<p>I am not sure about speed and it would probably make sense to measure it on a longer chain: this one looks instantaneous regardless of whether I use <code>abel, ring, move_add</code> (and of course the chain of rewrites).</p>\n<p>Regarding imports, <code>move_add</code> wants <code>algebra.group.basic</code> to work: its \"mathlib-input\" is <code>add_comm, add_assoc, add_left_comm</code>.  (Almost) everything else happens directly on expressions.</p>",
        "id": 280188181,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650968126
    },
    {
        "content": "<p>Regarding computing degrees, the use of <code>move_add</code> is that it allows you easily to \"isolate\"  a summand in an expression.  Thus, to get a computation of the degree of a polynomial, you would <code>move_add</code> to the right the highest degree term, use <code>nat_degree_add_eq_right_of_nat_degree_lt</code> to break the proof into</p>\n<ol>\n<li>proving that the degree of the highest degree term is what it is,</li>\n<li>proving that everything else has degree smaller than that.</li>\n</ol>\n<p>All of this can be automated for a polynomials that is written as a sum of monomials with exponents that are closed natural numbers.  You can push the computation further for different representations, of course, but with more work.</p>",
        "id": 280188430,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650968316
    },
    {
        "content": "<p>As you can imagine, it gets somewhat tricky when the polynomial has individual summands of the form <code>X ^ 5 * C r * X ^ 4 * X * C 5 * 7</code>, but, with more effort, many of these common expressions can be converted to standard form.</p>",
        "id": 280188579,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650968423
    },
    {
        "content": "<p>Also, Sébastien, I was not really suggesting that <code>add_sq'</code> is a \"good\" application for <code>move_add</code>, just that it is a place where the sequence of <code>rw</code> does what a human would describe as \"move terms around\" and <code>move_add</code> \"sounds\" closer to what a human would say and think!</p>",
        "id": 280188693,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650968514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313483.20.60move_add.60/near/280186754\">said</a>:</p>\n<blockquote>\n<p>Let me just say that in this early file, neither <code>abel</code> nor <code>ring</code> is available yet, hence the tedious chain of rewrites.</p>\n</blockquote>\n<p>Is <code>ac_refl</code> available?</p>",
        "id": 280189543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650969110
    },
    {
        "content": "<p>Still, you could <code>import tactic.move_add</code> in <code>algebra.group_power.basic</code> and the proof above would work.</p>",
        "id": 280189657,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650969186
    },
    {
        "content": "<p>Let me check <code>ac_refl</code>, likely yes.</p>",
        "id": 280189673,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650969197
    },
    {
        "content": "<p><code>ac_refl</code> does work, though I could actually notice that it was elaborating, unlike any of the other tactics.</p>",
        "id": 280189778,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650969255
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">add_sq</span><span class=\"o\">,</span>  <span class=\"n\">ac_refl</span><span class=\"o\">,</span>  <span class=\"c1\">-- elaboration of add_sq' took 1.03s</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_sq</span><span class=\"o\">,</span> <span class=\"n\">move_add</span> <span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"c1\">-- elaboration of add_sq' took 48.2ms</span>\n</code></pre></div>",
        "id": 280189956,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650969375
    },
    {
        "content": "<p>Yeah, the two main arguments for <code>move_add</code> over <code>ac_change</code> seem to be:</p>\n<ul>\n<li><code>ac_change</code> and <code>ac_refl</code> seem to be really slow. Hopefully we can improve this in Lean4.</li>\n<li>It looks like <code>move_add</code> has much better support for wildcards</li>\n</ul>\n<p>Of course, <code>ac_change</code> is happy to reorder plenty of other operators too, so has its own advantages.</p>",
        "id": 280189964,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650969381
    },
    {
        "content": "<p>I would also like to point out that <code>move_add</code> is intended not only to close a goal (for which <code>abel</code> may work better), but especially to massage a sum to a form that is convenient to continue: for instance exposing a summand that has a special shape, grouping together important terms, preparing for a <code>congr</code> or <code>congr_arg</code> to remove unwanted fluff...</p>",
        "id": 280190199,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650969571
    },
    {
        "content": "<p>Indeed; so <code>ac_change</code> is a more apt comparison than <code>ac_refl</code> or <code>abel</code></p>",
        "id": 280190316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650969632
    },
    {
        "content": "<p>I have actually never used <code>ac_change</code> until it was brought up while thinking about this tactic.  You should produce a target type for <code>ac_change</code>, right?  For <code>move_add</code> you just select the terms you want to move around, you do not need to specify the target sum.</p>",
        "id": 280190473,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650969768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , you asked about a <code>mul</code> version of this tactic <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313483.20.60sort_summands.60/near/279592486\">here</a>, before the tactic changed name from <code>sort_summands</code> to <code>move_add</code>.</p>\n<p>Here is now a more informed answer.  To literally port the tactic so that it \"works\" with multiplication is completely trivial: it is basically the result of <code>s/add/mul/g</code> and then removing the definitions that can be recycled as they are.</p>\n<p>However, if you want to work with a structure that has <em>simultaneously</em> a commutative multiplication and a commutative addition (I will let you pick your favourite such typeclass), then there is likely the need for some further special support.</p>\n<p>The main reason is that most expressions in a ring end up being written as sum of products, not products of sums.  Thus, it is easy enough to access the summands and they tend to be \"more different\".  However, suppose that you have an expression such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>and you want to <code>move_mul b</code> to move all <code>b</code>s to the right, so that you would obtain</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>(maybe to collect the <code>b</code>s into <code>(a + a * c) * b</code>).</p>\n<p>Now, you run into the (slight) issue that, currently, the tactic will zoom into the first summand <code>a * b</code>, will match the given <code>b</code>, decide that this was the substitution that you wanted to perform, observe that there is nothing to do... and report that you did not need to call it!</p>\n<p>A possible fix would be to make the behaviour of <code>move_mul</code> more granular than <code>move_add</code> and make it try \"itself\" on all instances separately, possibly using also <code>congr</code> to focus on each individual factor.  This of course may run into further problems, since the tactic will be more complex, but it might work well.</p>\n<p>To conclude, making <code>move_add</code> the \"<code>meta</code>-to_additive\" of <code>move_mul</code> is literally something that could be done by <code>sed</code>.  This will work well in a <code>comm_semigroup</code> <em>that is not a ring</em>.</p>\n<p>To be able to work with <code>move_mul</code> in a <code>comm_semiring</code> would require some thinking about how to produce results that would match with what a human might want.</p>",
        "id": 280209744,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650979747
    },
    {
        "content": "<p>Can you take in an expression which corresponds to the summand you want to rewrite?</p>",
        "id": 280210265,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650980025
    },
    {
        "content": "<p>Can you take in an expression which corresponds to the summand you want to rewrite?</p>",
        "id": 280210344,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650980054
    },
    {
        "content": "<p>It <em>can</em> be done (and would not be hard to do), but currently <code>move_add</code> does not do it.</p>",
        "id": 280210348,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650980058
    },
    {
        "content": "<p>I have a feeling that this is highlighting a difference between <code>add</code> and <code>mul</code>, at least in terms of the expectations that humans expect on them.</p>",
        "id": 280210440,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650980113
    },
    {
        "content": "<p>Can you take in an expression which corresponds to the summand you want to rewrite?</p>",
        "id": 280210469,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650980130
    },
    {
        "content": "<p>If you are working in a <code>comm_monoid</code> or in an <code>add_comm_monoid</code>, the two would work just as well.  When you combine the two, I think that <code>move_mul</code> will require more work to be actually equally useful as <code>move_add</code>.</p>",
        "id": 280210574,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650980180
    },
    {
        "content": "<p>I can certainly imagine an (easy) modification of <code>move_add</code> that also takes in a specification as <code>move_mul [vars] in (expr)</code>.</p>",
        "id": 280210840,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650980293
    },
    {
        "content": "<p>Though in this case, it may be closer to <code>conv in (...) { use move_mul here }</code>.</p>",
        "id": 280210916,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650980326
    },
    {
        "content": "<p>It would probably make more sense to develop a more interactive <code>conv</code> and use the \"current, non-existing\" <code>move_mul</code> there (and possibly also <code>move_add</code> in some edge cases).</p>",
        "id": 280211026,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650980385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313483.20.60move_add.60/near/280210265\">said</a>:<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313483.20.60move_add.60/near/280210344\">said</a>:<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313483.20.60move_add.60/near/280210469\">said</a>:</p>\n<blockquote>\n<p>Can you take in an expression which corresponds to the summand you want to rewrite?</p>\n</blockquote>\n<p>Looks like the Zulip API has some idempotence problems...</p>",
        "id": 280211130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650980415
    },
    {
        "content": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 280211260,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650980498
    },
    {
        "content": "<p>Argh... I will blame that on the train's crappy wifi. on the train's crappy wifi. on the train's crappy wifi.</p>",
        "id": 280211367,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650980541
    },
    {
        "content": "<p>I am thinking now that <code>move_add</code> would probably run into similar issues as the ones described above, if we had a product of sums and we wanted to rearrange the sums in each factor.</p>\n<p>If there is some need for this, then it would not be hard to implement, either as the <code>move_add/mul [...] in [...]</code>, or by trying to get <code>move_add/mul</code> to act in a more granular way, focusing on individual subexpressions that are sums/products and performing the rearrangements separately.</p>",
        "id": 280213077,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650981302
    },
    {
        "content": "<p>(Yaël, if you do not mind, I will not post my messages 3 times.)</p>",
        "id": 280213170,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650981349
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 280213740,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650981606
    },
    {
        "content": "<p>Yaël, you had expressed interest in a <code>move_mul</code> tactic, analogous to <code>move_add</code>.  In <a href=\"https://github.com/leanprover-community/mathlib/tree/adomani_move_op\">branch#adomani_move_op</a>, there is a file <code>tactic.move_op</code>, defining a tactic unsurprisingly called <code>move_op</code>!  If you call</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">move_op</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"n\">of</span> <span class=\"n\">your</span> <span class=\"n\">operation</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"n\">list</span> <span class=\"n\">of</span> <span class=\"n\">symbols</span> <span class=\"n\">to</span> <span class=\"n\">move</span> <span class=\"n\">around</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">optional</span> <span class=\"n\">at</span> <span class=\"n\">locations</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>it will try to do what you can probably imagine.</p>\n<p>Right now, this only supports <code>has_add.add</code> or <code>has_mul.mul</code>, since, in order to do the rearranging, the tactic calls <code>add/mul_comm, add/mul_assoc, </code>add/mul_left_comm`.  Adding support for further operations is straightforward.  (You can already use any named operation; however, the tactic will invariably fail to prove that the rewrite works, since it does not know to use the right lemmas.)</p>\n<p>The tactic works well (if I may say so myself!) with <code>has_add.add</code>.</p>\n<p>Using it with <code>has_mul.mul</code> requires more love: it works well for terms that only involve multiplication (i.e. no sums of terms), since then it is harder for previously reordered terms to affect terms that you are changing later.  If your expressions involve sums of products and are reasonably \"repetitions-free\", it should also work well.  Note that, due to the pattern-matching, \"repetitions\" are quite common, if you do not steer them strongly.</p>\n<p>If you want to try it out, feel free to do so!  If you do, please, give me lots of comments!</p>",
        "id": 280738162,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651327638
    },
    {
        "content": "<p>Dear All,</p>\n<p>I thought of trying to get this PR moving again.  Right now, CI is unhappy for some <a href=\"#narrow/stream/113488-general/topic/unhappy.20user.20ID.20104802998/near/281642954\">transient issue</a>.</p>\n<p>In the meantime, I've based <a href=\"https://github.com/leanprover-community/mathlib/pull/14040\">#14040</a> on top of this one to compute <code>nat_degree</code>s of polynomials with some success.</p>\n<p>If anyone has any further comment on <code>move_add</code>, I'd be happy to address them!</p>\n<p>Thank you very much!</p>",
        "id": 281644933,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652078656
    },
    {
        "content": "<p>Meanwhile, if you want oleans to go with this PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/13483\">#13483</a>), you can get the oleans of <a href=\"https://github.com/leanprover-community/mathlib/pull/14040\">#14040</a>, which are available.  The reason <a href=\"https://github.com/leanprover-community/mathlib/pull/13483\">#13483</a> needs lots of new oleans is that I modified the doc-string for <code>ac_change</code> in <code>tactic.congr</code>, a file that is imported a lot!</p>",
        "id": 281645417,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652079153
    },
    {
        "content": "<p>Dear All,</p>\n<p>are there any further comments or suggestions for this tactic?  If people feel that it would help, I can look for place in mathlib where using this tactic would shorten/simplify some proofs.</p>",
        "id": 282746714,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652857099
    },
    {
        "content": "<p>Yeah I think that's the common motivation to merge tactics: you can write less and do more. And if it accomplishes the goal of being <em>faster</em> that's even better. I don't recall a tactic being merged as a standalone patch</p>",
        "id": 282773198,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652873173
    },
    {
        "content": "<p>I have created a sample PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14228\">#14228</a> on top of <a href=\"https://github.com/leanprover-community/mathlib/pull/13483\">#13483</a>.  I am not especially attached to any of these golfing suggestions, they are mostly there to see what can be done.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/compare/aa_sort...adomani_move_add_random_golf\">Here</a> is a direct link to the diff between the PR where <code>move_add</code> is introduced and its sample usage.</p>\n<p>I hope that this helps!</p>",
        "id": 282824704,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652896538
    },
    {
        "content": "<p>I revamped the <code>move_add</code> tactic, after a little bit of prodding!  Now, there is a <code>tactic.move_op</code> that moves \"operands\" around for a generic, user-supplied (binary, associative, commutative) operation.  This does not work out of the box.</p>\n<p>What does work out of the box are two interactive tactics <code>move_add</code> and <code>move_mul</code>.</p>",
        "id": 285569816,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654796013
    },
    {
        "content": "<p>Even though the PR adds almost 500 lines, this includes a file with tests and <em>a lot</em> of documentation for the various definitions and tactics.</p>",
        "id": 285569966,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1654796079
    },
    {
        "content": "<p>Does anyone feel like giving some comments on <a href=\"https://github.com/leanprover-community/mathlib/pull/13483\">#13483</a>?</p>\n<p>The current version is quite stable.</p>\n<p>I'd be more than happy to hear any feedback on the tactic!</p>\n<p>Thanks!</p>",
        "id": 287125838,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1655939786
    },
    {
        "content": "<p>I'll try to take a look today</p>",
        "id": 287154190,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655969645
    },
    {
        "content": "<p>Dear All,</p>\n<p>is there any further comment that anyone has on <a href=\"https://github.com/leanprover-community/mathlib/pull/13483\">#13483</a>?</p>",
        "id": 288150928,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656671702
    },
    {
        "content": "<p>Looking now!</p>",
        "id": 288151937,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656672378
    },
    {
        "content": "<p>Dear All,</p>\n<p>Eric found a puzzle with <code>move_add</code>.  With the current implementation, this example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.list.of_fn</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.move_add</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list.of_fn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">list.of_fn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">move_add</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">n</span><span class=\"o\">],</span>   <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>fails, even though <code>rw add_comm</code> works and closes the goal.  Eric also proposed an approach to solve this issue, using <code>ext_simplify_core</code>.  However, there are some un-instantiated metavariables that are resisting instantiation.</p>\n<p>Could someone take a look, please?</p>\n<p>I am going to ping <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , since I know that whatever problem there is with Lean, they are able to solve it!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>Thank you very much!</p>",
        "id": 288186902,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656690507
    },
    {
        "content": "<p>Does <code>rw</code> work, or does it need <code>simp_rw</code>? I only tested with the latter.</p>",
        "id": 288194846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656693112
    },
    {
        "content": "<p>I tried <code>rw</code>, after seeing that you had <code>simp_rw</code> and it did work.  Since I know that you can sometimes rewrite under binders, I wanted to push the limits!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 288204307,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656697762
    },
    {
        "content": "<p>I'll make a spin-off PR with the broken ext_simplify_core version to make it easier for an expert to diagnose what's going wrong</p>",
        "id": 288326943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656853793
    },
    {
        "content": "<p>I had some luck in <a href=\"https://github.com/leanprover-community/mathlib/tree/aa_sort-ext_simplify\">branch#aa_sort-ext_simplify</a>, but there's some weirdness going on which is duplicating all of the hypotheses in the goal view.</p>",
        "id": 288389871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656928897
    },
    {
        "content": "<p>Could it be that replacehyp is acting on the local constants and is not able to clear them?</p>",
        "id": 288390624,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656929363
    },
    {
        "content": "<p>(sorry if this is a really basic suggestion: I had been stumped by something similar earlier...)</p>",
        "id": 288390761,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656929428
    },
    {
        "content": "<p>It looks exactly like what was happening to me at some point.  Let me see if I can fix it the same way I did it earlier.</p>",
        "id": 288391140,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656929724
    },
    {
        "content": "<p>does what is below fix it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- in `reorder_hyp`</span>\n<span class=\"o\">(</span><span class=\"n\">unchanged</span><span class=\"o\">,</span> <span class=\"n\">unused</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.unwrap</span> <span class=\"n\">result</span><span class=\"o\">,</span>  <span class=\"c1\">-- this is line 211, unchanged until here</span>\n<span class=\"k\">if</span> <span class=\"n\">unchanged</span> <span class=\"k\">then</span> <span class=\"n\">skip</span> <span class=\"k\">else</span>  <span class=\"c1\">-- add this as the next line</span>\n</code></pre></div>",
        "id": 288391437,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656929939
    },
    {
        "content": "<p>Ah yes, that does help</p>",
        "id": 288393401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656931254
    },
    {
        "content": "<p>Now the next failure is that we seem to be instiating the universe metavariables twice in different ways</p>",
        "id": 288394433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656932035
    },
    {
        "content": "<p>Because <code>example {R : Type*} : ... := prf</code> means \"I'm not going to decide what universe <code>R</code> is until I see the proof\".</p>",
        "id": 288394508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656932067
    },
    {
        "content": "<p>Ok, I think that I have run into a similar problem using <code>move_add</code> in conjunction with <code>compute_degree</code>, but have not been able to understand what the issue was.  I can see that it gets fixed by <code>universe u, {R : Type u}</code>, but this was the extent of my understanding...</p>",
        "id": 288394724,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656932254
    },
    {
        "content": "<p>It's specifically caused by <code>example</code> due to it behaving like <code>def</code></p>",
        "id": 288395041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656932438
    },
    {
        "content": "<p>Ok, I had not realized that using <code>example</code> in tests was stronger than using <code>lemmas</code>.  Still, I had tried investigating the matter, but I made no progress.  I had tried supplying explicitly instances somewhere, but with no luck.</p>",
        "id": 288395221,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656932552
    },
    {
        "content": "<p>Maybe, since I had run into this issue earlier, it means that it is not caused by <code>ext_simplify_core</code>, but that it was already present in the initial version of <code>move_add</code>?</p>",
        "id": 288395463,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656932715
    },
    {
        "content": "<p>I suspect you ran into it in your original recursive version</p>",
        "id": 288399971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656935798
    },
    {
        "content": "<p>Should I look into how to make sure that the universe parameters are \"preserved\"?  I found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.instantiate_univ_params\">docs#expr.instantiate_univ_params</a>, but have so far been unsuccessful at the instantiation.</p>",
        "id": 288415628,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1656944791
    },
    {
        "content": "<p>I have not been able to make progress with <code>ext_simplify_core</code>.  Would it make sense to merge <code>move_add</code> as is and leave the possible tightening as an on-going attempt?</p>",
        "id": 289096340,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1657450610
    }
]