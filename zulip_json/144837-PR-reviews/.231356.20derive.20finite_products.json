[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'd love some feedback on this PR</p>",
        "id": 174565393,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567186122
    },
    {
        "content": "<p>Which PR do you mean <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> ? Nr <a href=\"https://github.com/leanprover-community/mathlib/issues/1365\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1365\">#1365</a> or the one about derive finite_products?</p>",
        "id": 174566050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567186546
    },
    {
        "content": "<p>They are not the same...</p>",
        "id": 174566055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567186552
    },
    {
        "content": "<p>Aah, you mean <a href=\"https://github.com/leanprover-community/mathlib/issues/1356\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1356\">#1356</a></p>",
        "id": 174566122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567186586
    },
    {
        "content": "<p>It seems that Scott developed a competing approach... right?</p>",
        "id": 174566188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567186637
    },
    {
        "content": "<p>Or is it complementary?</p>",
        "id": 174566287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567186695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can you give me a 3-line introduction to <code>enumerable</code>? How does it relate to <code>fintype</code> (which you are substituting it for, in this PR).</p>",
        "id": 174566479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567186841
    },
    {
        "content": "<p>Is every <code>enumerable</code> type finite? Or is <code>nat</code> also <code>enumerable</code>?</p>",
        "id": 174566499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567186861
    },
    {
        "content": "<p>It is complementary. Here is what I saw happen. I tried to define cartesian categories, Scott came up with a better idea, his idea got merged, now I'm trying to come up with helper functions to facilitate going from specific limits (i.e. binary products) to the general formulation</p>",
        "id": 174566525,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567186891
    },
    {
        "content": "<p>Aha, I see.</p>",
        "id": 174566538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567186906
    },
    {
        "content": "<p>I didn't read the <code>enumerable</code> PR. Maybe I should.</p>",
        "id": 174566588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567186924
    },
    {
        "content": "<p>Huh, there was a recent PR on enumerable, right? Or am I hallucinating?</p>",
        "id": 174566965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567187191
    },
    {
        "content": "<p>Anyway, <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can you confirm that an <code>enumerable</code> type is finite?</p>",
        "id": 174566983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567187205
    },
    {
        "content": "<p>There was one: <a href=\"https://github.com/leanprover-community/mathlib/pull/1368\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1368\">https://github.com/leanprover-community/mathlib/pull/1368</a></p>",
        "id": 174566999,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567187217
    },
    {
        "content": "<p>Now that I look at it, the documentation is ... lacking</p>",
        "id": 174567029,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567187238
    },
    {
        "content": "<p>It is meant as a (more) constructive substitute for <code>fintype</code>. This we can have access to a bijection between fin (card a) and a without using the axiom of choice</p>",
        "id": 174567150,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567187327
    },
    {
        "content": "<p>Aha, I see.</p>",
        "id": 174567796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567187824
    },
    {
        "content": "<p>As a mathematician I would expect that <code>nat</code> is also enumerable. But then... what's in a name...</p>",
        "id": 174567824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567187855
    },
    {
        "content": "<p>Yeah, me too. I debated it with <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> . It kind of sounds like something from computability theory. We just need a name that says a bit more than that a type is finite. <code>has_equiv_to_fin</code> is not exactly catchy. I feel like there are a lot of bad options here.</p>",
        "id": 174568273,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567188107
    },
    {
        "content": "<p>Hmm... so does <a href=\"https://github.com/leanprover-community/mathlib/issues/1356\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1356\">#1356</a> (finite products) depend on <a href=\"https://github.com/leanprover-community/mathlib/issues/1368\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1368\">#1368</a> (enum)?</p>",
        "id": 174568368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567188141
    },
    {
        "content": "<p>If so, it would be good to point that out on the PR page (and preferably in the title).</p>",
        "id": 174568400,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567188159
    },
    {
        "content": "<p><code>finumerable</code>?</p>",
        "id": 174568437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567188185
    },
    {
        "content": "<p>kidding</p>",
        "id": 174568443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567188191
    },
    {
        "content": "<p>Good point. Done :)</p>",
        "id": 174568602,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567188304
    },
    {
        "content": "<p>So <code>fintype</code> is a property, and <code>enumerable</code> has data. I see. I'm now reading <a href=\"https://github.com/leanprover-community/mathlib/issues/1368\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1368\">#1368</a>...</p>",
        "id": 174568608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567188307
    },
    {
        "content": "<p><code>finumerable</code></p>",
        "id": 174568617,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567188311
    },
    {
        "content": "<p>Well, <code>fintype</code> also has data</p>",
        "id": 174568637,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567188326
    },
    {
        "content": "<p>Huh, does it?</p>",
        "id": 174568723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567188364
    },
    {
        "content": "<p>Oh, you're right</p>",
        "id": 174568742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567188384
    },
    {
        "content": "<p>So should I just stop using <code>fintype</code> alltogether?</p>",
        "id": 174568760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567188403
    },
    {
        "content": "<p>I would characterize it more as <code>fintype_with_order</code></p>",
        "id": 174568849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567188482
    },
    {
        "content": "<p>Thanks, that makes sense.</p>",
        "id": 174568936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567188530
    },
    {
        "content": "<p>I probably won't have time to look at PRs until Tuesday, but for a mathematician \"finite products\" means products indexed by a finite type and not products indexed by a finite-type-with-order, and I think it's pretty important.</p>",
        "id": 174569092,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567188615
    },
    {
        "content": "<p>Using <code>choice</code> to choose an order to reduce finite products to binary ones should be fine, as that order should not be visible in the API anyways</p>",
        "id": 174569164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567188674
    },
    {
        "content": "<p>It was pointed out to me that taking different permutations of the same type might not produce limits that are equal, rather, it would produce limits that are equivalent. I wonder if that wouldn't justify making the order more explicit rather than less explicit</p>",
        "id": 174569836,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567189172
    },
    {
        "content": "<p>I mean \"... limits that are isomorphic\"</p>",
        "id": 174569928,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567189215
    },
    {
        "content": "<p>Hmm... I'm not so sure.</p>",
        "id": 174570363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567189538
    },
    {
        "content": "<p>If you want a different permutation, you should change the diagram (i.e. functor) not the enumeration of the type.</p>",
        "id": 174570436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567189568
    },
    {
        "content": "<p>That makes sense. Alright! I'll go back to making things non-constructive.</p>",
        "id": 174571041,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567189986
    },
    {
        "content": "<p>I still think <code>enumerable</code> is a nice type. But maybe not so much for this application )-;</p>",
        "id": 174571207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567190101
    },
    {
        "content": "<p>This actually makes me doubt the usefulness of <code>enumerable</code>. <code>fintype</code> has this function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equiv_fin</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">card</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>which means that you can use a bijection as long as you can prove that any bijection will do. The reason I couldn't use it for finite products is that the result are the same only up to isomorphism, not equality. I'm wondering if it's a signal that destroying the symmetry between the elements of an empty type is not such a good idea.</p>",
        "id": 174571745,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567190513
    },
    {
        "content": "<p>Huh, which empty type are you talking about?</p>",
        "id": 174571927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567190623
    },
    {
        "content": "<p>\"finite type\" is what I meant</p>",
        "id": 174572005,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567190658
    },
    {
        "content": "<p>Aha...</p>",
        "id": 174572027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567190671
    },
    {
        "content": "<p>Maybe <code>def enum [fintype X] [linear_order X] : fin (card X) → X</code>is sufficient for all purposes?</p>",
        "id": 174572089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567190716
    },
    {
        "content": "<p>Especially if you also have decidable equality... than you might even be able to make that definition constructive(?)</p>",
        "id": 174572181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567190768
    },
    {
        "content": "<p>You would need a decidable linear order. Then the problem is the same as sorting</p>",
        "id": 174572215,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567190806
    },
    {
        "content": "<p>Maybe you need the idea of an \"approximate object\", or an isomorphism equivalence class of objects</p>",
        "id": 174573698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567191868
    },
    {
        "content": "<p>If I may make a last ditch effort to save my <code>enumerable</code>-based solution:</p>\n<blockquote>\n<p>for a mathematician \"finite products\" means products indexed by a finite type and not products indexed by a finite-type-with-order, and I think it's pretty important.</p>\n</blockquote>\n<p>The difference might be less significant than one thinks. If I formulate finite products in terms of <code>enumerable</code> and you want to use it with a type for which you only have <code>fintype</code>, there's a non-computable way to go from <code>fintype</code> to enumerable. By keeping the definition in terms of <code>enumerable</code> that gives you the freedom to use it in a context where you need computability. If you're willing to sacrifice computability, the definition becomes as general as the one using <code>fintype</code> instead of <code>enumerable</code></p>",
        "id": 174573915,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567192048
    },
    {
        "content": "<p>Is there a name for a category where every pair of objects has a designated morphism? Like the category version of the total relation</p>",
        "id": 174574105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567192197
    },
    {
        "content": "<p>I don't know. Why?</p>",
        "id": 174574230,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567192288
    },
    {
        "content": "<p>Is it for a version of trunc transported onto isomorphisms?</p>",
        "id": 174574294,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1567192323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> A category enriched over pointed sets (types).</p>",
        "id": 174574603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567192591
    },
    {
        "content": "<p>I assume you want the distinguished morphisms to be stable under composition</p>",
        "id": 174574648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567192655
    },
    {
        "content": "<p>An approximate object should be a diagram over such a category</p>",
        "id": 174583718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567200295
    },
    {
        "content": "<p>and a finite product over a fintype yields an approximate object where the index category is the set of <code>enumerable A</code> witnesses to <code>fintype A</code>, and the functor builds the ordered  product from the witness. The morphisms of the index category are bijections on fin n agreeing with the enumerable orders</p>",
        "id": 174584197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567200720
    },
    {
        "content": "<p>It's not clear to me whether the distinguished morphisms need to be stable under composition, but it does seem natural. In this case it's a poset category so that is automatic</p>",
        "id": 174584424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567200898
    },
    {
        "content": "<p>I guess an approximate object should also be nonempty, and the sense of nonempty that agrees with the given application is <code>trunc J</code> where <code>J</code> is the index category</p>",
        "id": 174584582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567201060
    },
    {
        "content": "<p>I think we actually want a nonempty category enriched in singletons; why would you want to pay attention to the \"non-designated\" morphisms?</p>",
        "id": 174587257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567203707
    },
    {
        "content": "<p>I like the following picture:</p>\n<p>Suppose you are making some construction say of some Widget, that depends on choices. Let J be the set of choices, and think of your construction as a bundle, whose base space is J, and each fibre has the structure of a Widget. Now for each \"path\" between choices j and j', we want a \"parallel transport\" identifying the fibre over j with the fibre over j' (as Widgets). At this point we can make the candidate definition that our \"real construction\" is the set of flat sections of this fibre bundle --- no choices involved! (In some sense, they were 'deferred'.) We need one more fact before this is a satisfactory definition, that is, that our parallel transport is _flat_, i.e. that transporting from j to j' and then to j'' is the same as transporting directly from j to j''. Then an easy consequence is that the \"evaluation map\" taking a flat section and looking at its value at a point j is an isomorphism for every j.</p>\n<p>This description was very geometrical, but it's actually just the purely categorical discussion we've been having. We model J as a category so that <code>\\forall X Y, unique (X \\hom Y)</code>, and ask that our construction is a functor <code>J \\func Widget</code>. This captures nicely the notion of a bundle with a flat connection. Of course \"flat sections\" can now be interpreted just as the limit of this functor. (If we can take limits in the underlying types, this says that a point in the limit is a point in the product of all the fibres, such that the chosen value in each fibre is carried by the morphisms to the chosen value in the other fibres.)</p>\n<p>Of course, non-constructively, any category has limits of shape J when J is nonempty and enriched in singletons --- just pick arbitrarily a point j in J, and declare that <code>limit F = F.obj j</code>.</p>",
        "id": 174587979,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567204422
    },
    {
        "content": "<p>I'm not entirely certain what a \"good API\" for this idea would look like. Suggestions welcome.</p>",
        "id": 174588032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567204455
    },
    {
        "content": "<p>I think every mathematician has \"used this construction\" many times, even if they haven't phrased it this way. It's a lovely way to hide away arbitrary choices in a construction.</p>",
        "id": 174588062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567204493
    },
    {
        "content": "<blockquote>\n<p>If I may make a last ditch effort to save my <code>enumerable</code>-based solution:</p>\n<blockquote>\n<p>for a mathematician \"finite products\" means products indexed by a finite type and not products indexed by a finite-type-with-order, and I think it's pretty important.</p>\n</blockquote>\n<p>The difference might be less significant than one thinks. If I formulate finite products in terms of <code>enumerable</code> and you want to use it with a type for which you only have <code>fintype</code>, there's a non-computable way to go from <code>fintype</code> to enumerable. By keeping the definition in terms of <code>enumerable</code> that gives you the freedom to use it in a context where you need computability. If you're willing to sacrifice computability, the definition becomes as general as the one using <code>fintype</code> instead of <code>enumerable</code></p>\n</blockquote>\n<p>We could have the <code>enumerable</code> definition and the <code>fintype</code> one built on top of it (using choice), just as long as the <code>fintype</code> one exists.</p>",
        "id": 174592592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567210762
    },
    {
        "content": "<p>Kind of like <code>list</code> and <code>multiset</code></p>",
        "id": 174592695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567210876
    },
    {
        "content": "<p>Binary products are already only defined up to unique isomorphism, so the extra ambiguity of an ordering usually won't matter</p>",
        "id": 174592764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567210982
    }
]