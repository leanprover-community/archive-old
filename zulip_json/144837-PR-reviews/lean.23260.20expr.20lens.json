[
    {
        "content": "<p>Do we already have something like this?  Other opinions?</p>",
        "id": 198357769,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1590085568
    },
    {
        "content": "<p>Didn't <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> write some sort of <code>expr</code> lens recently for the <code>nth_rewrite</code> tactic?</p>",
        "id": 198359245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590086369
    },
    {
        "content": "<p>It's at <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/meta/expr_lens.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/meta/expr_lens.lean</a></p>",
        "id": 198398944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590112004
    },
    {
        "content": "<p>(I think this is actually a survivor from my work on <code>rewrite_search</code>, even pre-Keeley!)</p>",
        "id": 198398961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590112051
    },
    {
        "content": "<p>I've only looked enough to see that they are not exactly the same, and I sort of doubt it's going to be easy to make something usable in both situations, but I didn't really try to understand <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>' version.</p>",
        "id": 198399019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590112119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Oops, sorry for misattributing</p>",
        "id": 198405525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590122177
    },
    {
        "content": "<p>Hi gang, thanks for the interest! <br>\nI added a better set of comments to the PR which I will paste here:</p>\n<p>One of the features of the widgets PR is that the lean pretty printer has been modified so that it also tags certain positions in the formatted expression with information about which subexpression of the original expression generated a pariticular part of the pretty printed string. This allows all of the highlighting and lookup of implicit arguments etc in the widget view.</p>\n<p>The main thing it introduces is expr.coord which is an enum of labels for each recursive constructor argument in expr. Then an expr.address is simply a list of these coordinates. In this way you can reference subexpressions.</p>\n<p>It could also be used to implement lenses (or maybe prisms?) on expressions, that is one could implement</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">lens</span> <span class=\"o\">{</span><span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">alternative</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">address</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>which runs the given function on the subexpression and then repackages it.<br>\nI didn't include it because I wanted to include in this PR only the minimum amount of stuff that was needed to get to the stage where I had the datatypes and some helper functions for the modified pretty printer.<br>\nIf people think it doesn't bloat core too much I am happy to include an implementation for the other lensy things.</p>\n<p>I also have an implementation of expression zippers in a different project if anyone is interested in that.</p>",
        "id": 198420184,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590138342
    },
    {
        "content": "<p>Afaict it's different to Scott's lenses because it includes support for the various binders and also it doesn't include the <code>path</code> construct (I have written a binder-ful version of <code>path</code> elsewhere) for implementing expr zippers. expr.address is just a list of enums that can be used to find a subexpression.</p>",
        "id": 198420466,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590138564
    },
    {
        "content": "<p>The other issue is that this file <code>expr_address.lean</code> has to be in <code>init</code> before <code>tactic.show_info</code> is  declared.</p>",
        "id": 198420936,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590138958
    },
    {
        "content": "<p>So you can't use interactive tactics to derive things</p>",
        "id": 198420986,
        "sender_full_name": "Edward Ayers",
        "timestamp": 1590138984
    },
    {
        "content": "<p>All sounds good to me. I don't think there's much code-duplication-worry to be concerned about here at this stage, and we are all excited to get widgets asap. :-)</p>",
        "id": 198421922,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590139799
    },
    {
        "content": "<p>I vote for widgets asap because I have a propaganda talk scheduled for June 3rd.</p>",
        "id": 198422739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590140402
    },
    {
        "content": "<p>Indeed, that code is Scott's and I have merely performed an obfuscation pass or two (hence might have seized control of the git blame). Anyway, how is \"lens\" a name you both came up with!? (or is this common nomenclature? =O)</p>",
        "id": 198455532,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1590161688
    },
    {
        "content": "<p><a href=\"https://hackage.haskell.org/package/lens\">https://hackage.haskell.org/package/lens</a> :)</p>",
        "id": 198455883,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590161875
    },
    {
        "content": "<p>Standard answer when some programming stuff doesn't seem to make any sense at first...</p>",
        "id": 198458516,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590163089
    },
    {
        "content": "<p>So what I learn from the link is that you can make pong with lenses</p>",
        "id": 198459786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590163608
    },
    {
        "content": "<p><a href=\"https://twitter.com/tangled_zans/status/1208167165104443392\">https://twitter.com/tangled_zans/status/1208167165104443392</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/tangled_zans/status/1208167165104443392\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1193233003981524995/YssBEUWH_normal.jpg\"></a><p>Did you know that trains in the UK run on Lenses? I've been working for <a href=\"https://twitter.com/Tracsis\">@Tracsis</a> for the last five weeks and we're hiring Haskell developers! Please spread the word :)</p><span>- Zanzi (@tangled_zans)</span></div></div>",
        "id": 198469471,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590168126
    },
    {
        "content": "<p>If you do want to learn about lenses I recommend: <a href=\"https://skillsmatter.com/skillscasts/4251-lenses-compositional-data-access-and-manipulation\">https://skillsmatter.com/skillscasts/4251-lenses-compositional-data-access-and-manipulation</a></p>",
        "id": 198469658,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1590168253
    },
    {
        "content": "<p>I've used trains in the UK, and I can totally believe they're ready to try <em>anything</em> to fix them.</p>",
        "id": 198474281,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1590170494
    }
]