[
    {
        "content": "<p>I think this PR is almost ready for merging. I have one more question about this part of the diff: <a href=\"https://github.com/leanprover-community/mathlib/pull/1049/files#diff-df9eb192d84dc1f7ccf4281245940229\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1049/files#diff-df9eb192d84dc1f7ccf4281245940229\">https://github.com/leanprover-community/mathlib/pull/1049/files#diff-df9eb192d84dc1f7ccf4281245940229</a>.<br>\nShould the mention of <code>int.cast</code> be explicit, or should we use coercions?<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 166254425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558520230
    },
    {
        "content": "<p>E.g. in the type of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">hom_C</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">eq_cast&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">C</span><span class=\"o\">))</span> <span class=\"n\">n</span>\n</pre></div>",
        "id": 166254438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558520258
    },
    {
        "content": "<p>use coe</p>",
        "id": 166256078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558521864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Could you make this change? After that, I think it's ready to merge.</p>",
        "id": 166287608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558544507
    },
    {
        "content": "<p>Unfortunately this change causes a deterministic timeout in the next proof, that I haven't been able to fix. See the latest commit, or:</p>\n<div class=\"codehilite\"><pre><span></span>lemma hom_C (f : mv_polynomial σ ℤ → β) [is_ring_hom f] (n : ℤ) : f (C n) = (n : β) :=\ncongr_fun (int.eq_cast&#39; (f ∘ C)) n\n\n/-- A ring homomorphism f : Z[X_1, X_2, ...] -&gt; R is determined by the evaluations f(X_1), f(X_2), ... -/\n@[simp] lemma eval₂_hom_X {α : Type u} [decidable_eq α] (f : mv_polynomial α ℤ → β) [is_ring_hom f]\n  (x : mv_polynomial α ℤ) : eval₂ (λ n : ℤ, (n : β)) (f ∘ X) x = f x :=\nmv_polynomial.induction_on x\n(λ n, by { rw [hom_C f], /- deterministic timeout: -/ rw [eval₂_C], })\n(λ p q hp hq, by { sorry /- rw [eval₂_add, hp, hq], exact (is_ring_hom.map_add f).symm }) -/})\n(λ p n hp, by { sorry /-rw [eval₂_mul, eval₂_X, hp], exact (is_ring_hom.map_mul f).symm }) -/})\n</pre></div>",
        "id": 166319047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558568192
    },
    {
        "content": "<p>Hmmm... that's disappointing.</p>",
        "id": 166332809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558587758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Aaah, I see you already found a fix.</p>",
        "id": 166332990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558588035
    },
    {
        "content": "<p>There is one more statement with <code>int.cast</code>s. Once those are gone I'll merge this.</p>",
        "id": 166332994,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558588052
    },
    {
        "content": "<p>A hard task-master! :-)</p>",
        "id": 166335316,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558591694
    },
    {
        "content": "<p>Done.</p>",
        "id": 166335318,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558591695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Did you find a different \"one more statement\" then I had in mind?</p>",
        "id": 166335728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558592315
    },
    {
        "content": "<p>I commented on a line on the PR page... that one still has <code>int.cast</code> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 166335729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558592315
    },
    {
        "content": "<p>Oh, I found the one in the actual adjunction file.</p>",
        "id": 166335748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1558592353
    },
    {
        "content": "<p>Lol, I hope you don't mind pushing one more fix <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 166335766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558592385
    }
]