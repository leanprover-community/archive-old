[
    {
        "content": "<p>We have two <code>linarith</code> PRs now: <a href=\"https://github.com/leanprover-community/mathlib/issues/2637\">#2637</a> from <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> adds some nonlinear preprocessing and <a href=\"https://github.com/leanprover-community/mathlib/issues/2995\">#2995</a> improves parsing into a linear structure. These are independent but the latter makes the former much more useful. A third change is on a branch (<a href=\"https://github.com/leanprover-community/mathlib/tree/linarith-speedup\">https://github.com/leanprover-community/mathlib/tree/linarith-speedup</a>), it changes the representation of linear combinations to speed things up.</p>\n<p>I also want to refactor the frontend because it's turned into a mess.</p>\n<p>I propose that (when they're ready) we merge, in order, <a href=\"https://github.com/leanprover-community/mathlib/issues/2995\">#2995</a>, the branch, and <a href=\"https://github.com/leanprover-community/mathlib/issues/2637\">#2637</a>. Once the first two are in, there are interesting tests to add for the third. Further <code>nlinarith</code> improvements will be possible after refactoring the frontend. Does this sound okay? Trying to do the refactor while three semi-dependent PRs are floating around sounds like merge conflict hell.</p>",
        "id": 200221607,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591706855
    },
    {
        "content": "<p>I implemented a redundancy filter for the variable elimination step. Should have done this a long time ago. It has some extra overhead, so there's no effective change in speed on the old test file. But the <code>nlinarith</code> example goes from 8 seconds to 1.5.</p>",
        "id": 200553276,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591886483
    },
    {
        "content": "<p>Consider this a polite request for a review for the outstanding <code>linarith</code> PRs :) this will be yet another \"independent\" change that will be hard to merge.</p>",
        "id": 200553394,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1591886525
    },
    {
        "content": "<p>Two of these are now merged. <a href=\"https://github.com/leanprover-community/mathlib/issues/2637\">#2637</a> (nlinarith) is now updated to show that it can solve some tests. I'd love more tests here, but please confirm that <code>nra</code> solves them in Coq first!</p>",
        "id": 200825653,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592155838
    },
    {
        "content": "<p>Some of the changes I made to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> 's code in <a href=\"https://github.com/leanprover-community/mathlib/issues/2637\">#2637</a> are temporary. It'll change a lot in the <code>linarith</code> frontend refactor.</p>",
        "id": 200825676,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592155902
    },
    {
        "content": "<p>The redundancy filter should be mostly independent of the frontend changes, so I can do those at once.</p>",
        "id": 200825721,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592155943
    },
    {
        "content": "<p>There are now 3 open linarith-related PRs (thanks, Rob!): <a href=\"https://github.com/leanprover-community/mathlib/issues/3079\">#3079</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/3108\">#3108</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/3109\">#3109</a></p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3079\">#3079</a> looks good to me, but I'm not really fluent in tactic-speak or the details of Fourier-Motzkin. Since it promises a nice speedup and also improves the generated proofs along the way, I think it'd be great to get it merged.</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3108\">#3108</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/3109\">#3109</a> introduce some mini-tactics, and they also look ready to me too.</p>",
        "id": 201286556,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592495184
    },
    {
        "content": "<p>I wouldn't be surprised if there were bugs in <a href=\"https://github.com/leanprover-community/mathlib/issues/3079\">#3079</a>. But it builds the library and passes the tests; I'm not sure reviews will catch them and I'm not sure what more to check for. I think it's ready for testing in production.</p>",
        "id": 201289581,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592496458
    },
    {
        "content": "<p>The next linarith PR will be a massive refactor. Sorry in advance to whoever reviews that! The new tactics in <a href=\"https://github.com/leanprover-community/mathlib/issues/3108\">#3108</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/3109\">#3109</a> are the most user-facing parts of it though, a lot of it is moving around internals.</p>",
        "id": 201289767,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592496540
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3113\">#3113</a> is up (obviously blocked by <a href=\"https://github.com/leanprover-community/mathlib/issues/3108\">#3108</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/3109\">#3109</a>)! Sorry again for the big diff.</p>",
        "id": 201370872,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1592560420
    }
]