[
    {
        "content": "<p>Looking at the code for polynomial.eval2_smul</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eval₂_smul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">eval₂</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">eval₂</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval₂</span><span class=\"o\">,</span> <span class=\"n\">sum_smul_index</span><span class=\"o\">,</span> <span class=\"n\">forall_const</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">g.map_zero</span><span class=\"o\">,</span> <span class=\"n\">g.map_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- Why doesn't `rw [←finsupp.mul_sum]` work?</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.mul_sum</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Shouldn't the lemma be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eval₂_smul</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">eval₂</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">eval₂</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>As both <code>g s</code> and <code>eval₂ g x p</code> are in S</p>",
        "id": 224685175,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612154437
    },
    {
        "content": "<p>Similar thing with polynomial.eval_smul</p>",
        "id": 224685614,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612155064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> (Aside: is this part of an existing PR? If so, you can write <code>#1234</code> in the title of the thread, and it will create a link to PR 1234.)</p>\n<p>I think the reason for using <code>\\bu</code> in both places is for some sort of \"regularity\" in the operations on both sides. But maybe in practice using <code>*</code> on the RHS would be better. I don't have a strong opinion.</p>",
        "id": 224688002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612158588
    },
    {
        "content": "<p>It's not part of an existing PR, I was going to test the air here before writing one.<br>\nAfter wondering for a few days why the Infoview in my project was showing a coercion operation when I didn't think there should be one it seems like this is the reason. With that in mind, I think that the <code>*</code> is more natural, but I'll try to figure out  if changing it fixes the issue.</p>",
        "id": 224688305,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612159029
    },
    {
        "content": "<p>Aha, but then you should probably use a different stream. (Not too big of an issue.) We try to use this stream only for discussion about explicit PRs. (See the other thread titles, they all have the format <code>#1234 pr name</code>.</p>",
        "id": 224688598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612159388
    },
    {
        "content": "<p>But where is the coercion? Because there shouldn't be a coercion either.</p>",
        "id": 224688620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612159436
    },
    {
        "content": "<p>Thanks, in the future I'll open a PR before posting, and I'll make a PR for this as soon as I have time.</p>\n<p>Here's a MWE of my case, where I am trying to reason about a polynomial that has been converted to a mv_polynomial using eval_2.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.basic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.eval₂</span> <span class=\"n\">mv_polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.X</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">polynomial.eval₂</span> <span class=\"n\">mv_polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.X</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">polynomial.eval₂_smul</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⇑mv_polynomial.C i • polynomial.eval₂ mv_polynomial.C (mv_polynomial.X s) p =</span>\n  <span class=\"c1\">-- i • polynomial.eval₂ mv_polynomial.C (mv_polynomial.X s) p</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 224698092,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612168954
    },
    {
        "content": "<p>Where's the coercion?</p>",
        "id": 224698248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612169049
    },
    {
        "content": "<p>Well, we enjoy discussions before PRs as well (-; But we put them in <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a> or <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> . (But no worries... it's not a big deal. I was just confused about whether I missed a PR that you were talking about.)</p>",
        "id": 224698274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612169075
    },
    {
        "content": "<p>Are you talking about the function coercion right at the start? That's just how bundled functions work, and nothing to do with this lemma</p>",
        "id": 224698299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612169101
    },
    {
        "content": "<p>Presumably a zulip admin can move this thread</p>",
        "id": 224698342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1612169155
    },
    {
        "content": "<p>If that's how bundled functions look that's fine, but it's a bit surprising since nowhere in the code I write myself do I have to put <code>⇑</code> before <code>mv_polynomial.C</code> when calling it as a function.</p>\n<p>It still seems to me that it should be <code>*</code> in the lemma - the <code>\\smul</code> is on the left hand side because it has to be, but an smul on the right hand side is not what I expected. You can see the original author was confused as to why they couldn't use <code>rw [←finsupp.mul_sum]</code> - this indeed closes the lemma in the <code>*</code> version.</p>",
        "id": 224699924,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1612170226
    }
]