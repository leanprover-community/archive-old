[
    {
        "content": "<p>I translated <code>projective.lean</code> and <code>projective_resolution.lean</code> into <code>injective.lean</code> and <code>injective_resolution.lean</code></p>",
        "id": 271017770,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1644256897
    },
    {
        "content": "<p>Thanks for doing that</p>",
        "id": 271018343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644257099
    },
    {
        "content": "<p>There is one <em>sorry</em> though: to show <code>[exact g.op f.op]</code> when <code>[exact f g]</code>.</p>",
        "id": 271018752,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1644257260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Did you do that in LTE already?</p>",
        "id": 271018884,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644257291
    },
    {
        "content": "<p>I don't remember, but probably not!</p>",
        "id": 271019012,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644257350
    },
    {
        "content": "<p>Aah, found it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">$</span> <span class=\"n\">rg</span> <span class=\"s2\">\"exact g.op f.op\"</span>\n<span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">exact_seq.lean</span>\n<span class=\"mi\">101</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">g.op</span> <span class=\"n\">f.op</span> <span class=\"o\">:=</span>\n<span class=\"mi\">280</span><span class=\"o\">:</span>  <span class=\"k\">have</span> <span class=\"n\">hgf</span> <span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">g.op</span> <span class=\"n\">f.op</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 271019017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644257352
    },
    {
        "content": "<p>Let me copy and paste this</p>",
        "id": 271019067,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1644257371
    },
    {
        "content": "<p>Yes, please do.</p>",
        "id": 271019113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644257390
    },
    {
        "content": "<p>Oh, git blame blames me for <code>kernel_unop_iso</code> and <code>cokernel_unop_iso</code> as well...</p>",
        "id": 271019348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644257484
    },
    {
        "content": "<p>This may be in a somewhat more restrictive context than what you're doing <span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> ... we're assuming <code>variables {ùíú : Type u} [category.{v} ùíú] [abelian ùíú]</code> here IIRC</p>",
        "id": 271019589,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644257578
    },
    {
        "content": "<p>At some point we should add exact categories to mathlib.</p>",
        "id": 271019980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644257760
    },
    {
        "content": "<p>I need that instance in the following statement:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi><mo><mover><mo><mo>‚Üí</mo></mo><mi>f</mi></mover></mo><mi>R</mi><mo><mover><mo><mo>‚Üí</mo></mo><mi>g</mi></mover></mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">Q \\overset{f}{\\rightarrow}R\\overset{g}{\\rightarrow} S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3945em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">‚Üí</span></span></span><span style=\"top:-3.614em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0154em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0154em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">‚Üí</span></span></span><span style=\"top:-3.614em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is exact and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>:</mo><mi>R</mi><mo>‚Üí</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">h: R\\to J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span> is a morphism to an injective object such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">h f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is zero, then we have a morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>‚Üí</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">S\\to J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>. I did this by using the <code>exact.lift</code> in <code>projective.lean</code> by using the opposite category.</p>",
        "id": 271021327,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1644258370
    },
    {
        "content": "<p>So I have to assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">C^{op}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> has images kernels etc.</p>",
        "id": 271021378,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1644258391
    },
    {
        "content": "<p>It is quite close to assuming <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> being abelian in some sense.</p>",
        "id": 271021420,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1644258422
    },
    {
        "content": "<p>TBH I'm not a big fan of the <code>subobject</code> approach to all this stuff.</p>",
        "id": 271022299,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644258728
    },
    {
        "content": "<p>Alternatively, I can prove it by doing this <a href=\"/user_uploads/3121/x80R38vK4-2BRpjTw6NrFcTY/Screenshot-2022-02-07-at-18.32.06.png\">Screenshot-2022-02-07-at-18.32.06.png</a> <br>\nbut mathlib cannot find <code>mono theta</code> instance.  I guess I could try to prove theta being mono by using pseudoelements. But that would require abelian category anyway.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/x80R38vK4-2BRpjTw6NrFcTY/Screenshot-2022-02-07-at-18.32.06.png\" title=\"Screenshot-2022-02-07-at-18.32.06.png\"><img src=\"/user_uploads/3121/x80R38vK4-2BRpjTw6NrFcTY/Screenshot-2022-02-07-at-18.32.06.png\"></a></div>",
        "id": 271022488,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1644258820
    }
]