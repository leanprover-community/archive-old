[
    {
        "content": "<p>27 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products\">#maths &gt; left vs right modules in tensor products</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 282433830,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652656251
    },
    {
        "content": "<p>Any more thoughts on this, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>?</p>",
        "id": 282602133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652772830
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 284392301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653932317
    },
    {
        "content": "<p>I vote in favour of merging this PR.</p>",
        "id": 284443252,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986064
    },
    {
        "content": "<p>I appreciate Scott's point about wanting control over whether <code>restrict_scalars</code> affects a set of right or left scalars (or both) but this can never be achieved with <code>restrict_scalars</code> as it stands because it only mentions one set of scalars so any instances to copy across other actions (e.g., \"right actions\") are underdetermined.</p>\n<p>For this, we would need something like what Eric mentions <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313996.20right.20actions.20on.20restrict_scalars/near/282063117\">above</a> <code>restrict_scalars₂ A B L R M</code>.</p>",
        "id": 284443322,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986126
    },
    {
        "content": "<p>That day may come but I think it should not block this PR as it's a separate concern.</p>",
        "id": 284443417,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986169
    },
    {
        "content": "<p>For emphasis, this Lean snippet indicates what I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.restrict_scalars</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">B</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Fails, can never work.</span>\n</code></pre></div>",
        "id": 284443880,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986444
    },
    {
        "content": "<p>There is still a choice to be made in the case that one has a left and right action of the same right. The following Lean snippet indicates what I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.restrict_scalars</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">L</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">L</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Fails, could work.</span>\n\n<span class=\"c1\">-- This is the instance that this PR proposes should work.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">A</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- Fails, could work.</span>\n</code></pre></div>",
        "id": 284444605,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653986879
    },
    {
        "content": "<p>Come to think of it, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> what do you think about allowing both <code>module Lᵐᵒᵖ</code> and <code>module Aᵐᵒᵖ</code> above?</p>",
        "id": 284444892,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653987030
    },
    {
        "content": "<p>Since Scott recently merged a PR that disabled the <code>L</code> instance, I'm inclined to leave the <code>Lᵐᵒᵖ</code> instance absent too, at least until someone actually needs it and then we can revisit the design</p>",
        "id": 284445155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653987154
    },
    {
        "content": "<p>I agree. I'm going to merge this. I'm confident appreciate the issues at play.</p>",
        "id": 284445250,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1653987216
    }
]