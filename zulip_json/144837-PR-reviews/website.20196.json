[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/196\">#196</a> is an update to the <a href=\"https://leanprover-community.github.io/extras/simp.html\">simplification documentation</a>.</p>",
        "id": 251785574,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630616428
    },
    {
        "content": "<p>I'm not really sure what the lifecycle of a PR is for the website -- so I figured I'd mention that this PR exists here.</p>",
        "id": 251786149,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630616657
    },
    {
        "content": "<p>Incidentally, I found editing this documentation to have a high barrier to entry (there's a <code>docs/extras/simp.md</code> in mathlib, but it's a redirect, so then I had to find the right repo, and after editing it I found I didn't have permission to push a branch, so I had to fork the website and make a PR using my fork's branch).  There must be a reason it's not, but it would be nice if all mathlib documentation were in the mathlib repo.</p>",
        "id": 251787210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630617077
    },
    {
        "content": "<p>It looks good to me, but I've been hoping an expert like <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> might take a quick look at it.</p>",
        "id": 251791407,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1630619110
    },
    {
        "content": "<p>I tried digging up what the <code>lift_eq</code> and <code>use_axioms</code> configuration options do, reading through the core C++ code as best I could.</p>\n<p><code>lift_eq</code> seems to have something to do with generating proofs of reflexive relations from proofs of equalities, though I couldn't come up with an example.</p>\n<p><code>use_axioms</code> seems to allow <code>simp</code> to use <code>funext</code> and <code>propext</code> (for example, to rewrite under binders).</p>\n<p>I also wrote that <code>canonize_proofs</code> lets <code>simp</code> replace proofs with a canonical defeq one, since that's what the source code said. I have no idea when or why you'd do this. Maybe this is from the before-times when proof irrelevance wasn't a thing.</p>",
        "id": 251813106,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630635147
    },
    {
        "content": "<p>simp uses <code>propext</code> when simp lemmas are provided in the form <code>A &lt;-&gt; B</code>, because internally it only knows how to handle equality rewriting</p>",
        "id": 251813367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630635386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/website.20196/near/251813106\">said</a>:</p>\n<blockquote>\n<p>I also wrote that <code>canonize_proofs</code> lets <code>simp</code> replace proofs with a canonical defeq one, since that's what the source code said. I have no idea when or why you'd do this. Maybe this is from the before-times when proof irrelevance wasn't a thing.</p>\n</blockquote>\n<p>No, this is not before time stuff. Proofs are defeq but not syntactically equal, and simp cares about syntactic equality, so it does make a difference. Note that there are quire a few simp lemmas that use variables in place of proof arguments on the LHS for added generality even when the argument can be given a proof</p>",
        "id": 251813533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630635548
    },
    {
        "content": "<p>I'm not entirely sure how this is implemented, but my guess is that it keeps a list of all proof terms encountered and whenever two proof terms have the same type it replaces one with the other</p>",
        "id": 251813644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630635643
    },
    {
        "content": "<p>I don't have any additional wisdom regarding <code>lift_eq</code>, unfortunately. I suspect it might have something to do with generalizing <code>congr</code> and <code>simp</code> to work on other relations, which never really happened</p>",
        "id": 251813969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630635935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/website.20196/near/251813644\">said</a>:</p>\n<blockquote>\n<p>I'm not entirely sure how this is implemented, but my guess is that it keeps a list of all proof terms encountered and whenever two proof terms have the same type it replaces one with the other</p>\n</blockquote>\n<p>I'd gotten as far as finding that there was <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/defeq_canonizer.h#L33\">a map for that</a> (it's also used for instances), but I didn't dig into what was responsible for maintaining it.</p>\n<p>I had no idea that <code>simp</code> didn't know about proof irrelevance; that's interesting. I'm now wondering if I've introduced any simp lemmas that weren't proof-generic enough...</p>",
        "id": 251821551,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630643658
    },
    {
        "content": "<p>it knows about proof irrelevance indirectly, through <code>congr</code>, which handles arguments of <code>subsingleton</code> types specially (including propositions)</p>",
        "id": 251824677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630646764
    },
    {
        "content": "<p>Are you talking about the \"congruence lemmas\" mentioned in <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simplify.cpp\">simplify.cpp</a>, or is <code>congr</code> used somewhere in <code>simp</code>?</p>",
        "id": 251825311,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630647372
    },
    {
        "content": "<p>The tactic called <code>congr</code> uses the same underlying machinery that <code>simp</code> uses to rewrite in subterms, namely some C++ code that will generate congruence lemmas for arbitrary definitions</p>",
        "id": 251826031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630648094
    },
    {
        "content": "<p><code>simp</code> does not call <code>congr</code> directly in lean</p>",
        "id": 251826058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630648131
    },
    {
        "content": "<p>in fact, <code>simp</code> came first, and I asked for the congruence lemma generator to be exposed as a standalone tactic</p>",
        "id": 251826099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630648176
    },
    {
        "content": "<p>I assume Mario's not not satisfied with the PR, having given a couple corrections.</p>",
        "id": 252338699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631034644
    },
    {
        "content": "<p>That's correct. It would be nice to figure out <code>lift_eq</code> and get rid of the (?), but I don't have the time to investigate this myself, and the changes themselves look good</p>",
        "id": 252382780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631055434
    },
    {
        "content": "<p>It'd also be nice to have some explanation of what the role of congruence lemmas is with <code>simp</code>, but <code>simp.md</code> is already trying to do too much.</p>\n<p>There's a <a href=\"https://documentation.divio.com/\">theory of documentation</a> that there are broadly four types, and that it's useful to be clear what you're targeting.  <code>simp.md</code> is mostly an explanation (for theoretical knowledge while studying), but by the end it becomes a reference (for theoretical knowledge while working).  Ideally the reference part would be a separate document that's integrated into <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp\">tactic#simp</a> (with <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp\">tactic#simp</a> being the first part of a longer reference document, like the beginning of a <a href=\"https://reference.wolfram.com/language/ref/Dt.html\">Mathematica reference page</a>).  It's better having this information written down than not having it at all, but adding too much else to <code>simp.md</code> seems to be out of scope for what it aims to be.</p>\n<p>Long term I'd like to reorganize the documentation to make it easy to have all these kinds of articles, all interlinked, but it's not something I can put any time into for at least another couple of months.</p>",
        "id": 252491319,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631118661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> Do you think it's ready to be merged now?</p>",
        "id": 252491432,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631118702
    },
    {
        "content": "<p>It's merged now, thanks so much for working on this!</p>\n<p><strong>edit</strong>: the <a href=\"https://leanprover-community.github.io/extras/simp.html\">new page</a> is now live</p>",
        "id": 252494495,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1631119846
    },
    {
        "content": "<p>Looks like the markdown processor for the website doesn't italicize <code>*`simp` lemmas*</code> like \"<em><code>simp</code> lemmas</em>\".  (And Zulip-flavored markdown has no escaping, so I can't reproduce what it looks like here.)</p>\n<p>It seems that the <code>code { padding: 1px 3px }</code> causes the first line of every code block to be indented by 3 pixels in my browsers (Chrome and Firefox on linux).</p>",
        "id": 252499605,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1631121784
    },
    {
        "content": "<p>Thanks so much for doing this! The original version of that document was written by me and I never really knew what I was talking about, I just needed to have something to show the undergraduates who thought that <code>simp</code> would close an arbitrary goal as long as it was simple!</p>",
        "id": 252507419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631124811
    }
]