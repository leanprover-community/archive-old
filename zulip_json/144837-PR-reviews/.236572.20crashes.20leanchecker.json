[
    {
        "content": "<p>Any ideas? <a href=\"https://github.com/leanprover-community/mathlib/runs/2051731961?check_suite_focus=true#step:8:8\">https://github.com/leanprover-community/mathlib/runs/2051731961?check_suite_focus=true#step:8:8</a></p>",
        "id": 229213749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615147288
    },
    {
        "content": "<p>It looks like <code>ext_exception</code> contains extra error information, but <code>lean_checker</code> doesn't know how to print it</p>",
        "id": 229215347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615148758
    },
    {
        "content": "<p>FWIW, <code>nanoda_lib</code> was updated recently to fix the issues mentioned in <a href=\"#narrow/stream/144837-PR-reviews/topic/.236375/near/228434456\">the other recent leanchecker bug thread</a>, but it also crashes on this commit: <a href=\"https://github.com/ammkrn/nanoda_lib/issues/1\">https://github.com/ammkrn/nanoda_lib/issues/1</a></p>",
        "id": 229229414,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615162132
    },
    {
        "content": "<p>The <code>nanoda_lib</code> message is <em>ever so slightly</em> more revealing than the leanchecker one, but not by much</p>",
        "id": 229229557,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615162260
    },
    {
        "content": "<p>It's a shame that neither reveal the offending lemma</p>",
        "id": 229229585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615162273
    },
    {
        "content": "<p>Running <code>leanchecker</code> on my machine I get an error on a different line of <code>mathlib.txt</code>, but perhaps the export output is non-deterministic, or the error is a memory error that depends on the system it runs on. My hunch is that the error relates to this line:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/abb3121f210743a930dea73cd766d988079bdf8b/src/data/mv_polynomial/variables.lean#L478\">https://github.com/leanprover-community/mathlib/blob/abb3121f210743a930dea73cd766d988079bdf8b/src/data/mv_polynomial/variables.lean#L478</a></p>",
        "id": 229230293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615162903
    },
    {
        "content": "<p>Oh whoops, I didn't pay attention to the line number in <code>leanchecker</code>'s output so I just ran it again. On my machine it says: <code>line 5909651: kernel exception</code>.</p>",
        "id": 229230562,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615163160
    },
    {
        "content": "<p>Whereas the message in the CI log is: <code>line 5909649: kernel exception</code>.</p>",
        "id": 229230633,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615163193
    },
    {
        "content": "<p>Mine gives <code>line 5909498</code></p>",
        "id": 229230639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615163209
    },
    {
        "content": "<p>Which starts <code>#DEF 48051</code>, and the line starting with <code>48051</code> ends in <code>total_degree_mul</code></p>",
        "id": 229230668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615163250
    },
    {
        "content": "<p>It's <code>#DEF 48063</code> for me but the line starting with <code>48063</code> also ends in <code>total_degree_mul</code>.</p>",
        "id": 229230758,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615163340
    },
    {
        "content": "<p>Perhaps the CI should upload the txt file if that step fails</p>",
        "id": 229230778,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615163363
    },
    {
        "content": "<p>After gzipping, anyway, since 500MB is on the large sizee</p>",
        "id": 229230782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615163376
    },
    {
        "content": "<p>I'm trying now with the output of <code>lean --export=mathlib.txt src/data/mv_polynomial/variables.lean</code>, which is the file that lemma appears in</p>",
        "id": 229230856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615163433
    },
    {
        "content": "<p>It succeeds</p>",
        "id": 229231192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615163763
    },
    {
        "content": "<p>I guess I can try pushing a version of the PR that doesn't touch the lemma used by total_degree_mul though, and see if that helps</p>",
        "id": 229231308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615163834
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/eric-wieser/monoid_algebra-distrib-2\">branch#eric-wieser/monoid_algebra-distrib-2</a> has the modified version, lets see if it helps</p>",
        "id": 229231537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615164044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> reported the following at the <code>nanoda_lib</code> issue:</p>\n<blockquote>\n<p>Zulip won't let me reply to your thread, it says I'm not subscribed to the stream. The offender is <code>mv_polynomial.total_degree_mul</code>. FWIW Trepplein is also failing, so there seems to be consensus. Trepplein's error message says <code>mv_polynomial.degrees_mul</code>, but that's a local error and not the top level declaration. If leanchecker is failing but the proof isn't throwing an error in Lean proper, my guess is that this is an issue with the exporter.</p>\n</blockquote>\n<blockquote>\n<p>As a short term measure, I added an example executable <code>examples/debug.rs</code> that will run the checker on 1 thread only and print the names of the declarations as they're compiled and checked. You can invoke it with:</p>\n</blockquote>\n<blockquote>\n<p><code>cargo run --release --example debug &lt;path to export file&gt;</code></p>\n</blockquote>",
        "id": 229240330,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615172474
    },
    {
        "content": "<p>Test</p>",
        "id": 229241757,
        "sender_full_name": "Chris B",
        "timestamp": 1615173734
    },
    {
        "content": "<p>The old nanoda pretty printer was able to reconstruct the types from the export file such that they match the current mathlib master signatures, so that doesn't seem to be an issue. Unfortunately the value level terms are giant tactic proofs, so I can post them if you want to see them, but I'm not sure how much good they'll do.</p>",
        "id": 229241820,
        "sender_full_name": "Chris B",
        "timestamp": 1615173825
    },
    {
        "content": "<p><a href=\"https://gist.github.com/ammkrn/75e5f979ecd0edd859fba3b3c505423c\">https://gist.github.com/ammkrn/75e5f979ecd0edd859fba3b3c505423c</a></p>",
        "id": 229242125,
        "sender_full_name": "Chris B",
        "timestamp": 1615174123
    },
    {
        "content": "<p>OK, just to make sure I understand the situation, <code>mv_polynomial.total_degree_mul</code> doesn't actually type check according to <code>nanoda_lib</code> and Trepplein. You've checked using <code>nanoda</code> that the exported type agrees with what's in mathlib source, so that suggests there's a bug in Lean causing it to accept this term when it shouldn't?</p>",
        "id": 229242803,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615174766
    },
    {
        "content": "<p>I think the take-away from the pretty printer thing is just that there's not a blatant error in the export file w.r.t. the expected type of the definition, like the exported instructions are faithful to the original lean file's ascribed type. To narrow down the actual error a little bit, there's a call to <code>infer_app</code> where the type of the binder isn't definitionally equal to the inferred type of the argument.</p>\n<p>From nanoda_lib, the reduced type of the binder is:<br>\n<code>App (Const (has_add, [u_1]), App (App (App (Const (finsupp, [u_1, 0]), Local: {σ : Sort S(u_1)}), Const nat), Const nat.has_zero))</code><br>\nand the arg type is:<br>\n<code>App (Const (add_monoid, [M(u_1, 0)]), App (App (App (Const (finsupp, [u_1, 0]), Local: {σ : Sort S(u_1)}), Const nat), App (App (Const (add_monoid.to_has_zero, [0]), Const nat), Const nat.add_monoid)))</code></p>\n<p>cleaned up:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">binder</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">has_add.</span><span class=\"o\">{[</span><span class=\"n\">u_1</span><span class=\"o\">]}</span> <span class=\"o\">(((</span><span class=\"n\">finsupp.</span><span class=\"o\">{[</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]}</span> <span class=\"n\">Local</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">S</span><span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"o\">)})</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">))</span>\n<span class=\"n\">inferred</span> <span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.</span><span class=\"o\">{[</span><span class=\"n\">M</span><span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)]}</span> <span class=\"o\">(((</span><span class=\"n\">finsupp.</span><span class=\"o\">{[</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]}</span> <span class=\"n\">Local</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">S</span><span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"o\">)})</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">add_monoid.to_has_zero.</span><span class=\"o\">{[</span><span class=\"mi\">0</span><span class=\"o\">]}</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">nat.add_monoid</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>The whole trepplein error is displayed as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Exception</span> <span class=\"k\">in</span> <span class=\"n\">thread</span> <span class=\"s2\">\"main\"</span> <span class=\"n\">java.lang.IllegalArgumentException</span><span class=\"o\">:</span> <span class=\"n\">wrong</span> <span class=\"n\">type</span><span class=\"o\">:</span>  <span class=\"n\">finsupp.add_monoid</span>  <span class=\"o\">:</span>  <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"n\">inferred</span> <span class=\"n\">type</span><span class=\"o\">:</span>  <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span><span class=\"o\">)</span>  <span class=\"bp\">!=</span><span class=\"kd\">def</span>  <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n<span class=\"n\">stuck</span> <span class=\"n\">on</span><span class=\"o\">:</span>  <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229243787,
        "sender_full_name": "Chris B",
        "timestamp": 1615175750
    },
    {
        "content": "<p>That could have been more clear in addressing your question: yes, according to nanoda_lib and trepplein, <code>mv_polynomial.total_degree_mul</code> is failing. According to nanoda_lib it's because of the application issue above. The pretty printer, which uses the export file, was able to reconstruct <code>mv_polynomial.total_degree_mul</code> as you see it in that gist using only the exported instructions. The type matches mathlib, but I haven't looked closely at the value level term.</p>",
        "id": 229246789,
        "sender_full_name": "Chris B",
        "timestamp": 1615178505
    },
    {
        "content": "<p>It looks like this is an issue with some constituent definition and not total_degree_mul itself. The value level term given in the export file for total_degree_mul in 5b61f07 (passing) and c8892e4 (failing) are identical.</p>",
        "id": 229249087,
        "sender_full_name": "Chris B",
        "timestamp": 1615180665
    },
    {
        "content": "<p>These are all of the consts referenced by total_degree_mul, so probably a good starting point. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"s2\">\"finsupp\"</span><span class=\"o\">,</span> <span class=\"s2\">\"comm_semiring.to_semiring\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finsupp.has_add\"</span><span class=\"o\">,</span> <span class=\"s2\">\"ordered_semiring.to_ordered_cancel_add_comm_monoid\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finset.has_mem\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finset.mem_bUnion\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finsupp.support\"</span><span class=\"o\">,</span> <span class=\"s2\">\"add_semigroup.to_has_add\"</span><span class=\"o\">,</span> <span class=\"s2\">\"nat.add_monoid\"</span><span class=\"o\">,</span> <span class=\"s2\">\"has_zero.zero\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finset.le_sup\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finsupp.sum_add_index\"</span><span class=\"o\">,</span> <span class=\"s2\">\"mv_polynomial.comm_semiring\"</span><span class=\"o\">,</span> <span class=\"s2\">\"semiring.to_distrib\"</span><span class=\"o\">,</span> <span class=\"s2\">\"distrib.to_has_mul\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finset.has_singleton\"</span><span class=\"o\">,</span> <span class=\"s2\">\"classical.prop_decidable\"</span><span class=\"o\">,</span> <span class=\"s2\">\"add_comm_monoid.to_add_monoid\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Exists.dcases_on\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finset.bUnion\"</span><span class=\"o\">,</span> <span class=\"s2\">\"eq.trans\"</span><span class=\"o\">,</span> <span class=\"s2\">\"ordered_cancel_add_comm_monoid.to_ordered_add_comm_monoid\"</span><span class=\"o\">,</span> <span class=\"s2\">\"eq.refl\"</span><span class=\"o\">,</span> <span class=\"s2\">\"funext\"</span><span class=\"o\">,</span> <span class=\"s2\">\"order_bot.to_partial_order\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finset.mem_singleton\"</span><span class=\"o\">,</span> <span class=\"s2\">\"eq.mp\"</span><span class=\"o\">,</span> <span class=\"s2\">\"preorder.to_has_le\"</span><span class=\"o\">,</span> <span class=\"s2\">\"has_singleton.singleton\"</span><span class=\"o\">,</span> <span class=\"s2\">\"nat.has_zero\"</span><span class=\"o\">,</span> <span class=\"s2\">\"add_le_add\"</span><span class=\"o\">,</span> <span class=\"s2\">\"eq\"</span><span class=\"o\">,</span> <span class=\"s2\">\"nat.ordered_semiring\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finsupp.sum\"</span><span class=\"o\">,</span> <span class=\"s2\">\"semilattice_sup_bot.to_order_bot\"</span><span class=\"o\">,</span> <span class=\"s2\">\"has_le.le\"</span><span class=\"o\">,</span> <span class=\"s2\">\"has_mul.mul\"</span><span class=\"o\">,</span> <span class=\"s2\">\"nat\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finsupp.add_monoid\"</span><span class=\"o\">,</span> <span class=\"s2\">\"eq.rec\"</span><span class=\"o\">,</span> <span class=\"s2\">\"eq.mpr\"</span><span class=\"o\">,</span> <span class=\"s2\">\"id\"</span><span class=\"o\">,</span> <span class=\"s2\">\"mv_polynomial.total_degree\"</span><span class=\"o\">,</span> <span class=\"s2\">\"semiring.to_monoid_with_zero\"</span><span class=\"o\">,</span> <span class=\"s2\">\"mv_polynomial\"</span><span class=\"o\">,</span> <span class=\"s2\">\"nat.semilattice_sup_bot\"</span><span class=\"o\">,</span> <span class=\"s2\">\"partial_order.to_preorder\"</span><span class=\"o\">,</span> <span class=\"s2\">\"eq.symm\"</span><span class=\"o\">,</span> <span class=\"s2\">\"comm_semiring\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finset\"</span><span class=\"o\">,</span> <span class=\"s2\">\"finset.sup_le\"</span><span class=\"o\">,</span> <span class=\"s2\">\"has_mem.mem\"</span><span class=\"o\">,</span> <span class=\"s2\">\"add_monoid.to_add_semigroup\"</span><span class=\"o\">,</span> <span class=\"s2\">\"nat.add_comm_monoid\"</span><span class=\"o\">,</span> <span class=\"s2\">\"monoid_with_zero.to_mul_zero_class\"</span><span class=\"o\">,</span> <span class=\"s2\">\"nat.has_add\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Exists\"</span><span class=\"o\">,</span> <span class=\"s2\">\"propext\"</span><span class=\"o\">,</span> <span class=\"s2\">\"add_monoid_algebra.support_mul\"</span><span class=\"o\">,</span> <span class=\"s2\">\"mul_zero_class.to_has_zero\"</span><span class=\"o\">,</span> <span class=\"s2\">\"add_monoid.to_has_zero\"</span><span class=\"o\">,</span> <span class=\"s2\">\"has_add.add\"</span><span class=\"o\">,</span> <span class=\"s2\">\"congr_arg\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 229249898,
        "sender_full_name": "Chris B",
        "timestamp": 1615181426
    },
    {
        "content": "<p>So, after removing an unrelated and unused definition, the PR seems to be passing</p>",
        "id": 229262753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615191665
    },
    {
        "content": "<p>Somehow the presence or absence of the unused definition <code>def add_monoid_algebra.to_multiplicative</code> affects whether <code>total_degree_mul</code> is accepted by lean checker, which is some scary action-at-a-distance...</p>",
        "id": 229265915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615193564
    },
    {
        "content": "<p>This sounds like an interesting bug!  I wouldn't be surprised if this is a bug in the projection macro.  However I'm having trouble reproducing it:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ git rev-parse HEAD\nc8892e44fe95f8fe8b7892aa83b6ce0466fba8f5\n$ lean -E export.txt src/data/mv_polynomial/variables.lean\n$ leanchecker export.txt\nchecked 46571 declarations\n$ ~/trepplein/target/universal/stage/bin/trepplein export.txt\n-- successfully checked 46571 declarations\n</code></pre></div>",
        "id": 229272175,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615196904
    },
    {
        "content": "<p>Right, I've only been able to reproduce it on the full export</p>",
        "id": 229273208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615197485
    },
    {
        "content": "<p>Even though the failure looks to be within that file</p>",
        "id": 229273235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615197494
    },
    {
        "content": "<p>The summary so far:</p>\n<ul>\n<li>Error messages point to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.total_degree_mul\">docs#mv_polynomial.total_degree_mul</a></li>\n<li>Checking just that file succeeds</li>\n<li>Removing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.to_multiplicative\">docs#add_monoid_algebra.to_multiplicative</a> makes  the whole checker pass, even though nothing uses that definition and it seems to check fine in isolation.</li>\n</ul>",
        "id": 229273781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615197771
    },
    {
        "content": "<p>Slightly smaller reproduction (only 4.8M of text):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>lean -E export.txt --only-export=mv_polynomial.degrees_mul --rec src/\n~/trepplein/target/universal/stage/bin/trepplein export.txt\n</code></pre></div>",
        "id": 229274104,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615197941
    },
    {
        "content": "<p>Does that export include the string <code>add_monoid_algebra.to_multiplicative</code> (or its components in an appropriate way)?</p>",
        "id": 229274212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615197993
    },
    {
        "content": "<p>No.  Interestingly, only trepplein fails on it but not leanchecker.</p>",
        "id": 229274481,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615198123
    },
    {
        "content": "<p>From <span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span>'s comment above, it looks vaguely like the lean typeclass inference is forgetting to emit <code>add_monoid.to_has_add</code>?</p>",
        "id": 229275638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615198715
    },
    {
        "content": "<p>Ok, I'm just bad at testing.  This fails with both leanchecker and trepplein and with either <code>degrees_mul</code> or <code>total_degree_mul</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean -E export.txt --only-export<span class=\"o\">=</span>mv_polynomial.degrees_mul --rec src/\n</code></pre></div>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean -E export_small.txt --only-export<span class=\"o\">=</span>mv_polynomial.degrees_mul src/data/mv_polynomial/variables.lean\n</code></pre></div>",
        "id": 229276564,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615199200
    },
    {
        "content": "<p>This is the error that leanchecker doesn't print:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">line</span> <span class=\"mi\">210987</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">add_monoid_algebra.support_mul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.add_monoid</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.add_monoid</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">finsupp.add_monoid</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.add_monoid</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_has_zero</span> <span class=\"n\">nat</span> <span class=\"n\">nat.add_monoid</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 229276573,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615199210
    },
    {
        "content": "<p>Here's proof that removing the unrelated definition seems to fix things: <a href=\"https://github.com/leanprover-community/mathlib/pull/6572/commits/2a2134f50eff7443dcec5789a97cc51cfcd0fc43\">https://github.com/leanprover-community/mathlib/pull/6572/commits/2a2134f50eff7443dcec5789a97cc51cfcd0fc43</a> (the \"run tests\" CI is complete and passing, the parent commit is the one that started this thread)</p>",
        "id": 229277050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615199466
    },
    {
        "content": "<p>Is that definition somehow polluting a cache lean is keeping?</p>",
        "id": 229277111,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615199499
    },
    {
        "content": "<p>This is weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">t0</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.variables</span>\n<span class=\"n\">kernel</span> <span class=\"n\">exception</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.vars'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.variables</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.degrees'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.variables</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.degrees'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.comm_ring'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">algebra.category.CommRing.adjunctions</span>\n<span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.hom_equiv'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">algebra.category.CommRing.adjunctions</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">CommRing.free._proof_1'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.variables</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.degrees'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.comm_ring'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.variables</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.degrees'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.comm_ring</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.comm_ring'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">mathlib_eric</span><span class=\"bp\">-</span><span class=\"n\">wieser</span><span class=\"bp\">/</span><span class=\"n\">monoid_algebra</span><span class=\"bp\">-</span><span class=\"n\">distrib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">1379</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data.mv_polynomial.variables</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">mv_polynomial.degrees'</span>\n</code></pre></div>",
        "id": 229279437,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615200690
    },
    {
        "content": "<p>Do you need to re-run <code>get-cache</code>?</p>",
        "id": 229280458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615201175
    },
    {
        "content": "<p>And possibly <code>delete-zombies</code>?</p>",
        "id": 229280470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615201182
    },
    {
        "content": "<p>The weird part is that <code>lean src/all.lean</code> works.</p>",
        "id": 229280648,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615201239
    },
    {
        "content": "<p>What is <code>-t0</code>?</p>",
        "id": 229280670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615201247
    },
    {
        "content": "<p>\"Trust level zero.\"</p>",
        "id": 229280689,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615201257
    },
    {
        "content": "<p>In this mode, Lean unfolds all macros and rechecks every definition on import.</p>",
        "id": 229280732,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615201275
    },
    {
        "content": "<p>Oh, I missed the first error message and was looking at the rest</p>",
        "id": 229280887,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615201337
    },
    {
        "content": "<p>Can you get lean to print the kernel exception info in that message too? Although I assume its what we saw before.</p>",
        "id": 229280920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615201361
    },
    {
        "content": "<p>If I run <code>lean -E export.txt --only-export=mv_polynomial.degrees_mul --rec src/</code> on the good and bad commits, neither export.txt contains a reference to the changed lemma</p>",
        "id": 229282986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615202468
    },
    {
        "content": "<p>So there's definitely a stale cache somewhere</p>",
        "id": 229282997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615202474
    },
    {
        "content": "<p>For what it's worth, the issue was brought on by missing a typeclass assumption in the linked PR; but I think the leanchecker / lean bug is still real, it just isn't in my way after all.</p>",
        "id": 229290313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615206465
    },
    {
        "content": "<p>This is really weird.  Let's compare the expressions from the small export (where only the variables files is imported) and the full export:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">add_monoid_algebra.support_mul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.has_add</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.add_monoid</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_monoid_algebra.support_mul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comm_semiring.to_semiring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.add_monoid</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.add_monoid</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In both cases, only the relevant declarations have been exported (the first 99% of the files are identical), so I don't think this is a bug in the exporter.</p>",
        "id": 229291673,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615207212
    },
    {
        "content": "<p>There are lots of other weird differences, such as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">finsupp.has_add</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.add_monoid</span>\n<span class=\"n\">add_semigroup.to_has_add</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_monoid.to_add_semigroup</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.has_zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finsupp.add_monoid</span> <span class=\"n\">σ</span> <span class=\"n\">nat</span> <span class=\"n\">nat.add_monoid</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 229291824,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615207319
    },
    {
        "content": "<p>To rule out the exporter, is the difference visible with <code>#print</code>?</p>",
        "id": 229292622,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615207779
    },
    {
        "content": "<p>Oh, I think I'm on to something.  Yes, the difference is visible when printing with to_raw_fmt.</p>",
        "id": 229293044,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615207989
    },
    {
        "content": "<p>Ok, the problem is solved.  This fixes the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>rm src/data/mv_polynomial/variables.olean\nlean --make src/data/mv_polynomial/variables.lean\n</code></pre></div>\n<p>It's just a hash collision in the lean files.  So the stale cache was the olean cache.</p>",
        "id": 229293401,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615208175
    },
    {
        "content": "<p>If I'm correct, you should be able to revert the fix in this PR and it the error won't come back.</p>",
        "id": 229293436,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615208202
    },
    {
        "content": "<p>And looking back, the reason why I couldn't reproduce it at first was because I didn't use the cache.</p>",
        "id": 229293686,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615208351
    },
    {
        "content": "<p>As it happens the fix is an improvement, so I don't actually want to revert it in that PR</p>",
        "id": 229293693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615208357
    },
    {
        "content": "<p>But I can push a reversion commit to a different branch if you want me to check</p>",
        "id": 229293716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615208379
    },
    {
        "content": "<p>How big are the colliding hashes?</p>",
        "id": 229293818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615208425
    },
    {
        "content": "<p>32 bit, of course.</p>",
        "id": 229293898,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615208458
    },
    {
        "content": "<p>Ouch. How much work would it be to change the hash to something more reasonable (like perhaps SHA-1, since we trust that for git)</p>",
        "id": 229295163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615209093
    },
    {
        "content": "<p>Out of curiosity, which hashes exactly had a collision: a per-commit, per-file or per-declaration hash?</p>",
        "id": 229296956,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615209881
    },
    {
        "content": "<p>This is the per-file hash that controls whether Lean needs to recompile a file.</p>",
        "id": 229302360,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615212035
    },
    {
        "content": "<p>PRs that change the hash algorithm are acceptable.  Backwards compatibility is not an issue since we don't have any.  But I'm not sure if it's worth the effort.</p>",
        "id": 229303066,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615212284
    },
    {
        "content": "<p>Does Lean 4 use a better hash?</p>",
        "id": 229306045,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615213368
    },
    {
        "content": "<p>I guess changing the hash algorithm would mean retracing the footsteps of <a href=\"https://github.com/leanprover-community/lean/issues/140\">leanprover-community/lean#140</a>, which looks straighforward if tedious.</p>",
        "id": 229306626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615213580
    },
    {
        "content": "<p>Lean 4 no longer compiles dependencies, that's one way to outsource the problem.  Now make is used for recompilation, and it uses the mtime (yeah, time to dust off the old <code>touch **/*.olean</code>).</p>",
        "id": 229310262,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615214973
    }
]