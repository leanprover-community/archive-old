[
    {
        "content": "<p>Continuing discussion from <a href=\"#narrow/stream/116395-maths/topic/witt.20vectors\" title=\"#narrow/stream/116395-maths/topic/witt.20vectors\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/witt.20vectors</a></p>\n<p>I suppose this PR might be somewhat controversial.</p>\n<ol>\n<li>It seems that it breaks mathlib in ways where before we could get away with <code>_</code> and let Lean figure it out, but now we need to supply data ourselves.</li>\n<li>It's not yet clear whether this will give a speedup of slowdown of the build.</li>\n<li>Without this PR, it seems that Witt vectors are \"doomed\".</li>\n</ol>",
        "id": 196190995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588603897
    },
    {
        "content": "<p>Are any of the core Lean experts in a position to explain why the PR makes Lean more stupid, and whether anything can be done about this stupidity whilst still enabling the Witt vectors work to compile in a reasonable amount of time?</p>",
        "id": 196191231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588603992
    },
    {
        "content": "<p>I'm very worried by everything I read on this topic. I have no idea what is a Witt vector, so I guess I don't care about them. I care very much about Lean not being stupid.</p>",
        "id": 196191393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588604055
    },
    {
        "content": "<p>Witt vectors are just a completely normal piece of algebra.</p>",
        "id": 196191427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604072
    },
    {
        "content": "<p>They solve the following problem. Given the ring Z/pZ, we want to define Z/p^2Z as a set by (Z/pZ)^2, and now we have to figure out how to define addition on it, so we need functions which send (a,b) in Z/pZ to 0 if a+b&lt;0 and 1 if a+b&gt;=p (the \"carry digit\"). This problem is solved by Witt polynomials, and Witt vectors are just (Z/pZ)^n with this structure of addition and multiplication. It all generalises to a large class of perfect fields.</p>",
        "id": 196191664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604167
    },
    {
        "content": "<p>Mathematically there is absolutely nothing remarkable about it.</p>",
        "id": 196191708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604183
    },
    {
        "content": "<p>You can take some limit of them, and then construct the p-adic integers Z_p from its residue field Z/pZ</p>",
        "id": 196191792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604223
    },
    {
        "content": "<p>Doing it with other finite fields builds a really interesting (to an arithmetician) class of complete discrete valuation rings.</p>",
        "id": 196191855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604255
    },
    {
        "content": "<p>Over at the Witt vectors topic, they seem to discuss this PR.<br>\nHere, on the topic of some technical PR, people discuss Witt vectors<br>\n/me rolls on the floor</p>",
        "id": 196192059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588604334
    },
    {
        "content": "<p>If you start with the p-adic numbers, take an algebraic closure, take the ring of integers, reduce it mod p, perfect it, and then take the Witt vectors and invert p, you have made Fontaine's field B_{dR}, which you (Patrick) once told me was a ridiculous goal (in terms of getting Antoine to formalise it ;-) ), but actually you can see how close we are :-)</p>",
        "id": 196192076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604342
    },
    {
        "content": "<p>Did someone try fixing all the errors in mathlib yet, or are we just guessing that they look pretty innocuous?</p>",
        "id": 196192156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588604376
    },
    {
        "content": "<p>The first one looked innocuous, so by induction we should be OK.</p>",
        "id": 196192294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604421
    },
    {
        "content": "<p>and induction usually works great in Lean</p>",
        "id": 196192329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604435
    },
    {
        "content": "<p>I've never built C++ Lean before.</p>",
        "id": 196192760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588604630
    },
    {
        "content": "<p>Let me try to do that, and try to fix mathlib.</p>",
        "id": 196192773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588604638
    },
    {
        "content": "<p>I'm looking at them now. I've been able to fix the non-category theory ones so far.</p>",
        "id": 196192854,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588604657
    },
    {
        "content": "<p>I'll push what I have to a branch shortly.</p>",
        "id": 196192910,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588604680
    },
    {
        "content": "<p>So did filling in the <code>_</code> with <code>x * y</code> in the algebra/opposite file solve that first problem?</p>",
        "id": 196192926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588604688
    },
    {
        "content": "<p>For some reason <code>x * y</code> didn't work (maybe more coercions were needed somewhere), but <code>_ * _</code> did.</p>",
        "id": 196193025,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588604736
    },
    {
        "content": "<p>How about another question: do we understand why these places broke? Or at least one of them?</p>",
        "id": 196193162,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588604777
    },
    {
        "content": "<p>I don't!</p>",
        "id": 196193237,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588604807
    },
    {
        "content": "<p>Hmm, interesting. So this one looked fairly simple:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">real</span><span class=\"bp\">/</span><span class=\"n\">hyperreal</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">591</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"s2\">&quot;eliminator&quot;</span> <span class=\"n\">elaborator</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">is_st_add</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">is_st</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">→</span> <span class=\"n\">is_st</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">→</span> <span class=\"n\">is_st</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">+</span> <span class=\"err\">?</span><span class=\"n\">m_4</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">infinitesimal</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">infinitesimal</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">infinitesimal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196193632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588604983
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">infinitesimal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">is_st</span> <span class=\"n\">x</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 196193663,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588604995
    },
    {
        "content": "<p>Presumably this was ultimately relying on the fact that <code>(0 : ℝ) + 0 = 0</code>!</p>",
        "id": 196193807,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588605035
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">is_st_add</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_st</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">is_st</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">is_st</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">+</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196193857,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588605055
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">infinitesimal_add</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">infinitesimal</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">infinitesimal</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">infinitesimal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_add</span> <span class=\"mi\">0</span> <span class=\"bp\">▸</span> <span class=\"n\">is_st_add</span>\n</code></pre></div>",
        "id": 196193910,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588605077
    },
    {
        "content": "<p>It's almost like <code>@[irreducible]</code> is an obscure feature that nobody really understands??</p>",
        "id": 196193985,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588605114
    },
    {
        "content": "<p>Certainly I don't</p>",
        "id": 196194145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588605166
    },
    {
        "content": "<p>It doesn't help that Lean ≤3.10 unfolds irreducible definitions in lots of unexpected places.  When checking whether two types are definitionally equal (e.g. when assigning metavariables).  When inferring types.  When checking that a type is a pi-type, etc.</p>",
        "id": 196194717,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588605293
    },
    {
        "content": "<p>Here's the branch: <a href=\"https://github.com/leanprover-community/mathlib/tree/lean_pr_211\" title=\"https://github.com/leanprover-community/mathlib/tree/lean_pr_211\">https://github.com/leanprover-community/mathlib/tree/lean_pr_211</a></p>\n<p>After you build the PR branch from <a href=\"https://github.com/leanprover-community/lean/issues/211\" title=\"https://github.com/leanprover-community/lean/issues/211\">lean#211</a>, use <code>elan toolchain link local &lt;path/to/lean/&gt;</code> and then the above branch should pick up the new version of Lean.</p>",
        "id": 196194753,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588605303
    },
    {
        "content": "<p>I feel a bit uncomfortable only changing the transparency in a single place.  Should we change it to semireducible everywhere?  This is how it is in Lean 4.</p>",
        "id": 196195270,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588605508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> How do I undo that <code>elan</code> change when I'm done?</p>",
        "id": 196195417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588605567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196195270\" title=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196195270\">said</a>:</p>\n<blockquote>\n<p>I feel a bit uncomfortable only changing the transparency in a single place.  Should we change it to semireducible everywhere?  This is how it is in Lean 4.</p>\n</blockquote>\n<p>We should at least try it I think.</p>",
        "id": 196195651,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588605646
    },
    {
        "content": "<p>Some of these other errors, like the ones in <code>geometry/manifold/real_instances.lean:217</code>, are more mysterious</p>",
        "id": 196195736,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588605687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> The <code>elan</code> command just creates a new toolchain which you should be able to remove with <code>elan toolchain uninstall</code>. It shouldn't affect anything else unless you've already got a toolchain named <code>local</code>.</p>",
        "id": 196195830,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588605718
    },
    {
        "content": "<p>Ok, so should I also change the <code>.toml</code>?</p>",
        "id": 196195993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588605779
    },
    {
        "content": "<p>Ooh, maybe you already did.</p>",
        "id": 196196026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588605793
    },
    {
        "content": "<p>(I'm at 70% of the Lean build) <span aria-label=\"fencing\" class=\"emoji emoji-1f93a\" role=\"img\" title=\"fencing\">:fencing:</span></p>",
        "id": 196196056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588605807
    },
    {
        "content": "<p>The toml is changed.</p>",
        "id": 196196083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588605817
    },
    {
        "content": "<p>I've updated <a href=\"https://gist.github.com/bryangingechen/8ebb9400835b54482f4d2246501f94be\" title=\"https://gist.github.com/bryangingechen/8ebb9400835b54482f4d2246501f94be\">the gist</a> with the errors, marking the few I was able to fix. I won't be able to work on this until later tonight, so feel free to push arbitrary changes to either the Lean PR branch or the mathlib branch.</p>",
        "id": 196196087,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588605819
    },
    {
        "content": "<p>Another cool <code>elan</code> trick: if you don't want to change the toml, you can run <code>elan override set ....</code> in the mathlib directory where you want a different lean.</p>",
        "id": 196196213,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588605857
    },
    {
        "content": "<p>In particular several of these errors don't seem to have anything irreducible around, which is confusing</p>",
        "id": 196196483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588605965
    },
    {
        "content": "<p>Can you point me to one of them?</p>",
        "id": 196196540,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588605988
    },
    {
        "content": "<p>Oh whoops I forgot <code>op</code> has <code>@[irreducible]</code></p>",
        "id": 196196609,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588606006
    },
    {
        "content": "<p>Let me look harder</p>",
        "id": 196196623,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588606010
    },
    {
        "content": "<p>Maybe <code>src/data/pfun.lean:206</code>?</p>",
        "id": 196196713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588606038
    },
    {
        "content": "<p>Or the ones in <code>src/data/padics/padic_norm.lean</code>? This file does import <code>data.real.cau_seq</code> but it's not obvious to me why (it doesn't seem to use the real numbers; <code>padic_norm</code> itself takes rational values)</p>",
        "id": 196197028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588606167
    },
    {
        "content": "<p>How can I check that I'm running the correct Lean?</p>",
        "id": 196197179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606218
    },
    {
        "content": "<p><code>lean --version</code> in the correct directory.  Then check the git revision it prints.</p>",
        "id": 196197211,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588606232
    },
    {
        "content": "<p>Aah, right, thanks!</p>",
        "id": 196197282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606259
    },
    {
        "content": "<p>It seems to be ok</p>",
        "id": 196197292,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606263
    },
    {
        "content": "<p><code>elan show</code> will also tell you what \"active toolchain\" it uses</p>",
        "id": 196197341,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588606283
    },
    {
        "content": "<p>or the ones in <code>src/set_theory/cofinality.lean</code>: the <code>set_theory</code> directory doesn't contain <code>irreducible</code> and it doesn't import much else, I think</p>",
        "id": 196197382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588606296
    },
    {
        "content": "<p>What is the best way to build mathlib and stop at the first error?</p>",
        "id": 196197408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606304
    },
    {
        "content": "<p>I use <code>leanpkg build 2&gt;&amp;1 | less</code> for this</p>",
        "id": 196197511,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588606329
    },
    {
        "content": "<p>But that just collects errors, right? It doesn't kill the build</p>",
        "id": 196197586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606355
    },
    {
        "content": "<p>But maybe that's fine</p>",
        "id": 196197604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606362
    },
    {
        "content": "<p>I think the remaining errors either definitely involve something irreducible (<code>opposite</code>, <code>real</code>) or it seems like too much effort to figure out (<code>data.polynomial</code>?)</p>",
        "id": 196197941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588606489
    },
    {
        "content": "<p>Though, I don't understand specifically why some of the ones that do involve irreducible things failed, yet.</p>",
        "id": 196198186,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588606581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Would you mind pushing your suggested semireducibility changes to a branch on top of <a href=\"https://github.com/leanprover-community/lean/issues/211\" title=\"https://github.com/leanprover-community/lean/issues/211\">lean#211</a>?</p>",
        "id": 196198596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606731
    },
    {
        "content": "<p>I think I understand a bit what happens in <code>pfun</code>: right now we also unfold proofs of theorems.</p>",
        "id": 196198665,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588606757
    },
    {
        "content": "<p>Then we can also build that version of Lean, and see how much mathlib likes that.</p>",
        "id": 196198669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606759
    },
    {
        "content": "<p>I'll be back after dinner.</p>",
        "id": 196198703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606773
    },
    {
        "content": "<p>Pushed.</p>",
        "id": 196198717,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588606779
    },
    {
        "content": "<p>Pushed where?</p>",
        "id": 196198764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606795
    },
    {
        "content": "<p>To the <code>type_context_fix</code> branch?</p>",
        "id": 196198823,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588606804
    },
    {
        "content": "<p>Ooh, I thought we might want both versions next to each other. But maybe not (-;</p>",
        "id": 196198910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588606847
    },
    {
        "content": "<p>I fixed the opposite stuff in categories</p>",
        "id": 196278736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588666505
    },
    {
        "content": "<p>Fixed the hyperreals</p>",
        "id": 196283945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588669905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Could this also be implemented via <code>set_option standard_reducibility blabla</code>?</p>",
        "id": 196284288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588670152
    },
    {
        "content": "<p>Then I could just switch that option on in the witt vector file, and the rest of mathlib doesn't have to care.</p>",
        "id": 196284352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588670171
    },
    {
        "content": "<p>I think it's the right default.  Irreducible definitions should not be unfolded, that's the explicit intention behind marking them as such.  Besides, that's how it's going to be in <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span>, so we might as well get used to it now.</p>",
        "id": 196284428,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588670240
    },
    {
        "content": "<p>Ok... I'll try to fix as much as I can.</p>",
        "id": 196285353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588670849
    },
    {
        "content": "<p>Note that in one of my fixes I cheated: I locally marked the definition as semireducible. But in my opinion the file was building API for the definition, so then it should be fine.</p>",
        "id": 196285434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588670894
    },
    {
        "content": "<p>But some of the failure doesn't seem to have anything to do with irreducible defs.</p>",
        "id": 196285710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671118
    },
    {
        "content": "<p>Ooh, wait. It does.</p>",
        "id": 196285769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671135
    },
    {
        "content": "<p>There was an <code>op</code> somewhere <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 196285781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671146
    },
    {
        "content": "<p>Lemmas are also irreducible. <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span>  In some cases, Lean was able to infer arguments by unifying proofs of lemmas...</p>",
        "id": 196285829,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588671178
    },
    {
        "content": "<p>It broke on <code>refine blabla _ _</code>...</p>",
        "id": 196286227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671428
    },
    {
        "content": "<p><code>simp</code> no longer solves</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">cones_hom</span> <span class=\"n\">F</span> <span class=\"err\">≫</span> <span class=\"n\">cones_inv</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">walking_parallel_pair</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"err\">≫</span>\n      <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_function</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"n\">j</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">cones</span> <span class=\"o\">(</span><span class=\"n\">diagram</span> <span class=\"n\">F</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">walking_parallel_pair</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"err\">≫</span>\n      <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_function</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 196286511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671606
    },
    {
        "content": "<p>We probably need some help from <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 196286581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671660
    },
    {
        "content": "<p>Which file is this in?</p>",
        "id": 196286622,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588671682
    },
    {
        "content": "<p><code>category_theory/limits/shapes/constructions/limits_of_products_and_equalizers.lean</code></p>",
        "id": 196286779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671788
    },
    {
        "content": "<p>It seems that <code>convert</code> is brutal enough to replace the more refined <code>refine</code>. But the problem just shifts to the next line.</p>",
        "id": 196286824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671838
    },
    {
        "content": "<p>And there even <code>convert</code> gives up.</p>",
        "id": 196286864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588671845
    },
    {
        "content": "<p>Which is not a surprise, because we went from 2 goals to 11 goals...</p>",
        "id": 196287076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588672000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196285829\" title=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196285829\">said</a>:</p>\n<blockquote>\n<p>Lemmas are also irreducible. <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span>  In some cases, Lean was able to infer arguments by unifying proofs of lemmas...</p>\n</blockquote>\n<p>So secretly we could actually pull of the mathematicians trick of \"by the object constructed in the proof of Theorem 5.4\"...</p>",
        "id": 196287231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588672127
    },
    {
        "content": "<p>We could even do it without saying anything!</p>",
        "id": 196287283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588672171
    },
    {
        "content": "<p>That's not just a trick, that's a very dirty trick.</p>",
        "id": 196287573,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588672338
    },
    {
        "content": "<p><code>category_theory/limits/shapes/constructions/limits_of_products_and_equalizers.lean</code> uses <code>pi.lift c.app : X ⟶ ∏ F.obj</code> to fill in a goal of type <code>unop X ⟶ ∏ F.obj</code>.  I guess <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> needs to fix this properly.</p>",
        "id": 196288566,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588673153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I see that you also just locally mark things reducible?</p>",
        "id": 196288570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588673159
    },
    {
        "content": "<p>I just pushed a fix of <code>geometry/manifold/real_instances</code>. It's quite dirty again.</p>",
        "id": 196288634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588673188
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- a/src/geometry/manifold/real_instances.lean</span>\n<span class=\"gi\">+++ b/src/geometry/manifold/real_instances.lean</span>\n<span class=\"gu\">@@ -213,8 +213,10 @@ def Icc_left_chart (x y : ℝ) [fact (x &lt; y)] :</span>\n   end,\n   open_target := begin\n     have : is_open {z : ℝ | z &lt; y - x} := is_open_Iio,\n<span class=\"gd\">-    have : is_open {z : fin 1 → ℝ | z 0 &lt; y - x} :=</span>\n<span class=\"gd\">-      (continuous_apply 0) _ this,</span>\n<span class=\"gi\">+    have : is_open {z : fin 1 → ℝ | z 0 &lt; y - x},</span>\n<span class=\"gi\">+    { have key : _ → _ := @continuous_apply (fin 1) (λ _, ℝ) _ 0,</span>\n<span class=\"gi\">+      dsimp at key,</span>\n<span class=\"gi\">+      exact key _ this },</span>\n     exact continuous_subtype_val _ this\n   end,\n   continuous_to_fun := begin\n</code></pre></div>",
        "id": 196288664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588673214
    },
    {
        "content": "<p>If I don't see a better solution, then yes, I just mark them reducible.</p>",
        "id": 196288684,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588673228
    },
    {
        "content": "<p>wow, <code>diff</code> is a language?</p>",
        "id": 196288734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588673267
    },
    {
        "content": "<p>Well, you can syntax highlight them... makes sense right?</p>",
        "id": 196288786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588673285
    },
    {
        "content": "<p>it looks like magic</p>",
        "id": 196288806,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588673307
    },
    {
        "content": "<blockquote>\n<p>pygments doesn't do magic<br>\n                            — eastern wisdom</p>\n</blockquote>",
        "id": 196288830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588673332
    },
    {
        "content": "<p>/me <span aria-label=\"fencing\" class=\"emoji emoji-1f93a\" role=\"img\" title=\"fencing\">:fencing:</span> and it's looking good so far</p>",
        "id": 196289265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588673638
    },
    {
        "content": "<p>Fixed bochner integration</p>",
        "id": 196289637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588673916
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- a/src/geometry/manifold/real_instances.lean</span>\n<span class=\"gi\">+++ b/src/geometry/manifold/real_instances.lean</span>\n<span class=\"gu\">@@ -213,10 +213,8 @@ def Icc_left_chart (x y : ℝ) [fact (x &lt; y)] :</span>\n   end,\n   open_target := begin\n     have : is_open {z : ℝ | z &lt; y - x} := is_open_Iio,\n<span class=\"gd\">-    have : is_open {z : fin 1 → ℝ | z 0 &lt; y - x},</span>\n<span class=\"gd\">-    { have key : _ → _ := @continuous_apply (fin 1) (λ _, ℝ) _ 0,</span>\n<span class=\"gd\">-      dsimp at key,</span>\n<span class=\"gd\">-      exact key _ this },</span>\n<span class=\"gi\">+    have : is_open {z : fin 1 → ℝ | z 0 &lt; y - x} :=</span>\n<span class=\"gi\">+      @continuous_apply (fin 1) (λ _, ℝ) _ 0 _ this,</span>\n     exact continuous_subtype_val _ this\n   end,\n   continuous_to_fun := begin\n</code></pre></div>",
        "id": 196289902,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588674136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I thought I tried that!</p>",
        "id": 196292738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588676287
    },
    {
        "content": "<p>It seems that this stuff is subtle/fragile... <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 196292761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588676307
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"fencing\" class=\"emoji emoji-1f93a\" role=\"img\" title=\"fencing\">:fencing:</span> <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> <br>\nMathlib builds for me.</p>",
        "id": 196294195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588677408
    },
    {
        "content": "<p>I just pushed</p>",
        "id": 196294207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588677422
    },
    {
        "content": "<p>Does this mean Witt vectors are back on?</p>",
        "id": 196294232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588677437
    },
    {
        "content": "<p>The total number of changes aren't even too big:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/lean_pr_211?expand=1\" title=\"https://github.com/leanprover-community/mathlib/compare/lean_pr_211?expand=1\">https://github.com/leanprover-community/mathlib/compare/lean_pr_211?expand=1</a></p>",
        "id": 196294386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588677548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196294232\" title=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196294232\">said</a>:</p>\n<blockquote>\n<p>Does this mean Witt vectors are back on?</p>\n</blockquote>\n<p>Well, first we need to get <a href=\"https://github.com/leanprover-community/lean/issues/211\" title=\"https://github.com/leanprover-community/lean/issues/211\">lean#211</a> merged, and then released and then this PR has to be merged into mathlib.</p>",
        "id": 196294416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588677578
    },
    {
        "content": "<p>But it means you are unblocked, right? :D</p>",
        "id": 196294510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588677636
    },
    {
        "content": "<p>Not yet though. Maybe you should formalize sober spaces while you wait.</p>",
        "id": 196294951,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588677933
    },
    {
        "content": "<p>Soooo, what about also having Lean not unfold proofs of lemmas.</p>",
        "id": 196295136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588678064
    },
    {
        "content": "<p>Currently I'm forced to admit that definitional proof irrelevance is \"an obscure feature that nobody really understands\".</p>",
        "id": 196295259,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588678137
    },
    {
        "content": "<p>Or, wait. Is this change fixing that too?</p>",
        "id": 196295289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588678173
    },
    {
        "content": "<p>Do we have any performance benchmark here?</p>",
        "id": 196295692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588678483
    },
    {
        "content": "<p>It didn't feel like Lean was slower, when compiling mathlib</p>",
        "id": 196295965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588678689
    },
    {
        "content": "<p>I am now running <code>time nice leanpkg build</code> on this mathlib.<br>\nWhen I'm done, I'll also run it on regular mathlib.<br>\nCheck back in ~ 4 hours (-;</p>",
        "id": 196296305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588678964
    },
    {
        "content": "<p>Another thing I am a bit confused about: In general, the proofs of lemmas may not be immediately available. If unification wants to unfold one of these proofs, does that mean it joins on the task computing the proof?</p>",
        "id": 196296866,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588679387
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">time</span> nice leanpkg build <span class=\"c1\">### building with lean#211</span>\nreal    48m45.006s\nuser    584m25.837s\nsys     7m46.827s\n</code></pre></div>",
        "id": 196301065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588682035
    },
    {
        "content": "<p>Starting the \"classic\" build now.</p>",
        "id": 196301117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588682047
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">time</span> nice leanpkg build <span class=\"c1\">### building with lean-3.10.0</span>\nreal    45m12.958s\nuser    571m15.583s\nsys     7m42.585s\n</code></pre></div>",
        "id": 196306280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588684850
    },
    {
        "content": "<p>So the build times seem very similar. I have no idea how big the noise factor is.</p>",
        "id": 196306314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588684869
    },
    {
        "content": "<p>But we do seem to get a tiny slowdown</p>",
        "id": 196306332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588684879
    },
    {
        "content": "<p>I would have expected that lean is trying less stuff, more conservative. So would it have been crazy to actually see a slight speedup instead?</p>",
        "id": 196306394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588684910
    },
    {
        "content": "<p>I'm surprised it's not a speedup</p>",
        "id": 196306406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588684916
    },
    {
        "content": "<p>2.3% ... are we willing to sacrifice that?</p>",
        "id": 196306963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588685180
    },
    {
        "content": "<p>Maybe we should include witt vectors in the comparison?</p>",
        "id": 196307381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588685381
    },
    {
        "content": "<p>But more seriously... is there anything we can say about the noise? Or whether or not this should have been a speedup?</p>",
        "id": 196307481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588685408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Do you have some wise words to say?</p>",
        "id": 196307517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588685424
    },
    {
        "content": "<p>I bet if you build mathlib five times, you'll see a larger variance.</p>",
        "id": 196307609,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588685469
    },
    {
        "content": "<p>Also how did you build lean?  Compiler version, build type (debug/release)?</p>",
        "id": 196307640,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588685484
    },
    {
        "content": "<p>Aaah, does that matter?</p>",
        "id": 196307665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588685497
    },
    {
        "content": "<p>It matters about one or two percent, I would imagine.</p>",
        "id": 196307740,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588685529
    },
    {
        "content": "<p>I see. I just followed the build instructions. Is there some config file you would want to see?</p>",
        "id": 196307766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588685549
    },
    {
        "content": "<p>If you want, I can run a number of builds tonight. But maybe we just decide that this PR is going to get merged anyway?</p>",
        "id": 196307834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588685589
    },
    {
        "content": "<p>I vote for merge.</p>",
        "id": 196307847,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588685600
    },
    {
        "content": "<p>Yeah, there really isn't any conceivable reason to defend the old behavior</p>",
        "id": 196307897,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588685628
    },
    {
        "content": "<p>Unless it would be significantly faster</p>",
        "id": 196307960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588685645
    },
    {
        "content": "<p>Well, then obviously something else must be broken to make it slower!</p>",
        "id": 196308000,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588685675
    },
    {
        "content": "<p>Btw, you might already be aware of <a href=\"http://speedcenter.informatik.kit.edu/lean/\" title=\"http://speedcenter.informatik.kit.edu/lean/\">http://speedcenter.informatik.kit.edu/lean/</a>. I can't really recommend this particular software to use for benchmarking other projects such as mathlib, but we have some students who are working on an actually usable alternative, so maybe soon...</p>",
        "id": 196308491,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1588685906
    },
    {
        "content": "<p>I was not aware of it</p>",
        "id": 196308684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588686007
    },
    {
        "content": "<p>So, thanks (-;</p>",
        "id": 196308694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588686012
    },
    {
        "content": "<p>When the usable alternative is there, it would be cool to add these stats to the community website</p>",
        "id": 196309157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588686257
    },
    {
        "content": "<p>I think we're long overdue for some kind of mathlib performance benchmarking. It's way too easy to introduce invisible slowdowns.</p>",
        "id": 196312939,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588688012
    },
    {
        "content": "<p>I think everybody agrees, but everybody seem to be measuring only noise</p>",
        "id": 196313059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588688054
    },
    {
        "content": "<p>Presumably there's some kind of service we can pay for that will do this with dedicated resources, right?</p>",
        "id": 196313252,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1588688147
    },
    {
        "content": "<p>Certainly one can rent dedicated servers, though they are moderately expensive and/or require custom infrastructure (saving $ by not running the server 24/7 means more complexity managing the server).</p>",
        "id": 196316982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588689632
    },
    {
        "content": "<p>Not sure whether there are off-the-shelf services of this kind. Probably worth discussing with the Lean 4 team.</p>",
        "id": 196317052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588689666
    },
    {
        "content": "<p>Actually we are already at the point where a reasonably beefy machine would be running at a nontrivial fraction of capacity if it did nothing but build mathlib commits. I tried one of the Scaleway HC-BM1-S bare-metal instances (\"2× Intel® Xeon Silver 4114\", whatever that means; 20 cores) and it took about 40 minutes to build mathlib once, so if there are ~240 commits in a month that comes to 160 hours. One month is about 730 hours.</p>",
        "id": 196318222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588690153
    },
    {
        "content": "<p>An alternative: Pick some metric(s) that Lean can count while building, for example number of entries to <code>is_def_eq_core</code> or whatever, and use that as a proxy for compilation time which is not affected by the hardware.</p>",
        "id": 196318502,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588690259
    },
    {
        "content": "<p>I'm just coming back to this. It looks like Gabriel just merged <a href=\"https://github.com/leanprover-community/lean/issues/211\" title=\"https://github.com/leanprover-community/lean/issues/211\">lean#211</a> into master <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> . Thanks to Gabriel and Johan for following up on this! </p>\n<p>Out of curiosity, how did the changes in the \"Semireducible everywhere!' commit (<a href=\"https://github.com/leanprover-community/lean/pull/211/commits/d9293317c8cd3b77a7f94b20f05f7fc4164467e1\" title=\"https://github.com/leanprover-community/lean/pull/211/commits/d9293317c8cd3b77a7f94b20f05f7fc4164467e1\">https://github.com/leanprover-community/lean/pull/211/commits/d9293317c8cd3b77a7f94b20f05f7fc4164467e1</a>) affect the number of errors in the mathlib branch?</p>",
        "id": 196320455,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588691103
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/compare/lean_pr_211?expand=1\" title=\"https://github.com/leanprover-community/mathlib/compare/lean_pr_211?expand=1\">https://github.com/leanprover-community/mathlib/compare/lean_pr_211?expand=1</a></p>",
        "id": 196320675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588691180
    },
    {
        "content": "<p>I don't think it got worse</p>",
        "id": 196320697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588691190
    },
    {
        "content": "<p>Ah, OK. Can we revert any of the fixes to mathlib that were made before that commit, or is the new Lean still unable to fill in as many underscores as Lean 3.10.0?</p>",
        "id": 196321098,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588691341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196318222\" title=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196318222\">said</a>:</p>\n<blockquote>\n<p>Actually we are already at the point where a reasonably beefy machine would be running at a nontrivial fraction of capacity if it did nothing but build mathlib commits. I tried one of the Scaleway HC-BM1-S bare-metal instances (\"2× Intel® Xeon Silver 4114\", whatever that means; 20 cores) and it took about 40 minutes to build mathlib once, so if there are ~240 commits in a month that comes to 160 hours. One month is about 730 hours.</p>\n</blockquote>\n<p>Maybe we can improve Scott's build bot a bit? I think he mentioned averaging the build times of the last 5 builds, for example.</p>",
        "id": 196321888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588691643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196321098\" title=\"#narrow/stream/144837-PR-reviews/topic/lean.23211.20don't.20unfold.20irred.20defs/near/196321098\">said</a>:</p>\n<blockquote>\n<p>Ah, OK. Can we revert any of the fixes to mathlib that were made before that commit, or is the new Lean still unable to fill in as many underscores as Lean 3.10.0?</p>\n</blockquote>\n<p>I didn't try</p>",
        "id": 196321982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588691662
    },
    {
        "content": "<p>Feel free to golf the PR, while I'm having dinner (-;</p>",
        "id": 196322064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588691682
    },
    {
        "content": "<p>No luck reverting any of the earlier changes. Oh well.</p>",
        "id": 196384158,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1588723867
    }
]