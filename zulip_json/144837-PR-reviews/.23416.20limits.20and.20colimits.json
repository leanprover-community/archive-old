[
    {
        "content": "<p>Okay, here is limits and colimits (just for general shapes, not all the useful special cases yet), with no dependency on new-fangled tactics.</p>\n<p><a href=\"https://github.com/leanprover/mathlib/pull/416\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/416\">https://github.com/leanprover/mathlib/pull/416</a></p>",
        "id": 135665324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539337653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> hopefully this will give you the parts you need for playing with presheaves.</p>",
        "id": 135665397,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539337720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Hurray! Thank you so much!</p>",
        "id": 135667107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539340051
    },
    {
        "content": "<p>I've now added all the special shapes (although equalizers and pullbacks are less developed than everything else).</p>",
        "id": 135741575,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539454758
    },
    {
        "content": "<p>I also added instances for (co)limits in <code>Type u</code>, and appropriate simp lemmas.</p>",
        "id": 135741583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539454777
    },
    {
        "content": "<p>I'm happy for this to be reviewed/merged at this point, I don't have immediate plans to add more.</p>",
        "id": 135741588,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539454798
    },
    {
        "content": "<p>A few missing bits if anyone wants to fill them in:</p>\n<ul>\n<li>lemmas describing how equalizers and pullbacks (and the dual notions) transform, similar to all the <code>pre</code>, <code>post</code>, and <code>map</code> lemmas in the other files</li>\n<li>the final three lemmas describing how colimits behave in <code>Type u</code>. (<span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>?)</li>\n</ul>",
        "id": 135741667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539454886
    },
    {
        "content": "<p>One thing that I noticed while working on sheaves was that Lean couldn't figure out that if a category has limits then it also has products.</p>",
        "id": 135741727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539454962
    },
    {
        "content": "<p>I guess this means we need to add some instances.</p>",
        "id": 135741730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539454974
    },
    {
        "content": "<p>Other stuff that should be done in other PRs later, and of which I have prototypes (but someone should feel free to do themselves):</p>\n<ul>\n<li>functors into a complete category are complete</li>\n<li>all the gadgets getting between different shapes of limits (equalizers and products imply all limits, etc)</li>\n<li>filtered limits, finite limits, finite products</li>\n</ul>",
        "id": 135741731,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539454976
    },
    {
        "content": "<p>But maybe \"limits implies products\" should also be part of other PRs?</p>",
        "id": 135741741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539455015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , let me see if I have that one.</p>",
        "id": 135741743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539455028
    },
    {
        "content": "<p>Yes, I've got it. It relies on <code>discrete_category.lean</code>, which I think never got PR'd yet.</p>",
        "id": 135741853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539455173
    },
    {
        "content": "<p>Ok, well it can of course wait till another PR (-;</p>",
        "id": 135741862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539455199
    },
    {
        "content": "<p>I have a notational problem in the (co)limits PR. At first I'd introduced </p>\n<div class=\"codehilite\"><pre><span></span>def sigma {C : Type u} [ùíû : category.{u v} C][has_coproducts.{u v} C] {Œ≤ : Type v} (f : Œ≤ ‚Üí C) : C\ndef pi {C : Type u} [ùíû : category.{u v} C][has_products.{u v} C] {Œ≤ : Type v} (f : Œ≤ ‚Üí C) : C\n</pre></div>",
        "id": 135759817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539486994
    },
    {
        "content": "<p>but then realised <code>sigma</code> is a terrible idea, because it overloads the built-in sigma.</p>",
        "id": 135759832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539487063
    },
    {
        "content": "<p><code>protected</code>?</p>",
        "id": 135759834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539487072
    },
    {
        "content": "<p>I thought to change <code>sigma</code> to <code>Sigma</code> and <code>pi</code> to <code>Pi</code>, but <code>Pi</code> is of course already taken for pi-types.</p>",
        "id": 135759877,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539487099
    },
    {
        "content": "<p>Is <code>protected</code> the best solution?</p>",
        "id": 135759879,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539487108
    },
    {
        "content": "<p>I'm a bit unclear on what happens when we use it.</p>",
        "id": 135759880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539487118
    },
    {
        "content": "<p>it means you have to prefix the namespace</p>",
        "id": 135759882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539487130
    },
    {
        "content": "<p>Hmm. I guess that's okay.</p>",
        "id": 135759890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539487146
    },
    {
        "content": "<p>there are a few examples of things in the library named <code>sigma</code> and <code>pi</code> and protected</p>",
        "id": 135759892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539487176
    },
    {
        "content": "<p>Ok, I'll try that.</p>",
        "id": 135759894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539487191
    },
    {
        "content": "<p>I better sleep, spent a long time on <span class=\"emoji emoji-1f6eb\" title=\"airplane departure\">:airplane_departure:</span> today.</p>",
        "id": 135759936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539487207
    },
    {
        "content": "<p>In other news, there's a second PR, containing the constructions limits =&gt; equalizers, limits =&gt; products, products + equalizer =&gt; limits, and functors into complete categories form a complete category, ready to go.</p>",
        "id": 135759953,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539487257
    },
    {
        "content": "<p>By the way, in response to an earlier suggestion of inferring has_products from has_limits or something like this, I suggest that all these be regular defs, and you make them instances in particular categories</p>",
        "id": 135760013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539487337
    },
    {
        "content": "<p>that way you get to decide which ones imply which others</p>",
        "id": 135760020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539487353
    },
    {
        "content": "<p>Great, these have just appeared as <a href=\"https://github.com/leanprover/mathlib/issues/420\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/420\">#420</a>.</p>",
        "id": 135788644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539542623
    },
    {
        "content": "<p>Are there any examples of actual limits (in mathlib or in your repo)?</p>",
        "id": 135788813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539542922
    },
    {
        "content": "<p>so how close are we to direct limits?</p>",
        "id": 135788825,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539542959
    },
    {
        "content": "<p>Direct limits of what?</p>",
        "id": 135788830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539542980
    },
    {
        "content": "<p>rings</p>",
        "id": 135788833,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539542989
    },
    {
        "content": "<p>This was my question: we have abstract notion of limits and colimits, but I think there is no example yet</p>",
        "id": 135788883,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539543017
    },
    {
        "content": "<p>Limits in Ring would be an example</p>",
        "id": 135788884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539543026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> maybe you could do one example, in order to demonstrate the interface, and then we could try to have another one.</p>",
        "id": 135788999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539543239
    },
    {
        "content": "<p>The examples so far are just are the (co)limits in <code>Type u</code>. <a href=\"https://github.com/leanprover/mathlib/pull/416/files#diff-e57d73facf90a0010edf5b1dcece8ac1\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/416/files#diff-e57d73facf90a0010edf5b1dcece8ac1\">https://github.com/leanprover/mathlib/pull/416/files#diff-e57d73facf90a0010edf5b1dcece8ac1</a></p>",
        "id": 135789055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539543315
    },
    {
        "content": "<p>I'm a bit indecisive about how to do rings. We can do it directly, or we can build machinery to do it quickly. :-)</p>",
        "id": 135789059,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539543349
    },
    {
        "content": "<p>What would be the machinery?</p>",
        "id": 135789101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539543374
    },
    {
        "content": "<p>reflective subcategories (to get from Ring to CommRing) and monadic adjunctions (to get from Type to Ring)</p>",
        "id": 135789305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539543780
    },
    {
        "content": "<p>But I don't know this stuff well; I'd need to talk to Reid again to get it all straight.</p>",
        "id": 135789312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539543797
    },
    {
        "content": "<p>I guess that is an indication that doing things directly on the first pass is a good idea. :-)</p>",
        "id": 135789324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539543837
    },
    {
        "content": "<p>Also, my PRs don't include filtered colimits yet, so the direct limits Kenny wants require another intermediate step.</p>",
        "id": 135789364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539543872
    },
    {
        "content": "<p>I'd love to get this fancy stuff, but it would probably be better to first do it by hand for rings, and then check we get the same result using fancy stuff (I mean the same usability, hopefully the abstract result should be the same anyway)</p>",
        "id": 135789424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539543988
    },
    {
        "content": "<p>Maybe topological spaces are an easier target for beginners</p>",
        "id": 135789431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539544026
    },
    {
        "content": "<p>Ok... I will do products for rings in a moment.</p>",
        "id": 135789949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539545031
    },
    {
        "content": "<p>As I mentioned in another thread, the perfect closure of F can be constructed as a direct limit of a bunch of copies of F.</p>",
        "id": 135790430,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539545861
    },
    {
        "content": "<p>So I would really like to have direct limit. However it's fine if you don't feel like doing it.</p>",
        "id": 135790433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539545881
    },
    {
        "content": "<p>No, I would like to do it (the general definition, that is). Next time I see Reid around I'm going to ask him about how to do it without too much duplication.</p>",
        "id": 135790486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539545963
    },
    {
        "content": "<p>in the meantime, maybe I can revive my <a href=\"https://github.com/leanprover/mathlib/pull/118\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/118\">direct limit PR</a>...</p>",
        "id": 135790554,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539546032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> would there be any problem if I do so?</p>",
        "id": 135790703,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539546299
    },
    {
        "content": "<p>I think it's pointless to try to do topological spaces before you do rings, there are too many definitions and notations to decipher. I started with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_products</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Top</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">prod</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Œ≤</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"bp\">Œ†</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">},</span>\n    <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"n\">continuous_supr_dom</span> <span class=\"n\">continuous_induced_dom</span><span class=\"bp\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"n\">is_product</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span><span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>but then I see goals like <code>is_open ((Œª (a : ((s.to_shape).X).Œ±) (b : Œ≤), (s.œÄ b).val a) ‚Åª¬π' s_1)</code> which is pretty hard to read</p>",
        "id": 135791871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539548365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> You will see something very similar if you do products of rings. The <code>to_shape</code> and the <code>s.pi ..).val</code> etc are all parts of the category theory.</p>",
        "id": 135797440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539559366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, to parse that for you: <code>s_1</code> is presumably an open set. <code>s</code> is a cone (in this case called a \"fan\" because we're doing products, not general limits. It has a field <code>X</code>, which is the cone point. Unfortunately this is written as <code>(s.to_shape).X</code>; I wish the <code>to_shape</code> wasn't necessary; I'll investigate that further. I'd originally called <code>X</code> <code>cone_point</code>, but people's preference for brevity caused me to change it. In any case, <code>(s.to_shape).X</code> is now a <code>Top</code>, i.e. a bundled topological space. Then <code>((s.to_shape).X).Œ±</code> is the underlying type of points of that topological space. <code>s.œÄ b</code> is one of the projection maps of the cone, i.e. the continuous map from <code>((s.to_shape).X)</code> to <code>f b</code>. So the goal you reach is just saying: the preimage of an open set under the ... [oops, first attempt got this wrong]</p>",
        "id": 135803776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539572466
    },
    {
        "content": "<p>under the product of all the projection maps (i.e. some subset of <code>\\Pi b, (f b).Œ±</code>) is open.</p>",
        "id": 135803885,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539572751
    },
    {
        "content": "<p>At this point we're actually going to need to look at the topology we gave on <code>Œ† b</code>, and see that this is true pretty much by definition, using the fact that all the <code>(s.œÄ b).val</code> are continuous functions.</p>",
        "id": 135803926,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539572812
    },
    {
        "content": "<p>(assuming that's is the definition of the product topology we're using, I haven't looked)</p>",
        "id": 135803932,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539572835
    },
    {
        "content": "<p>If you have advice about renaming fields to make it easier to do that unpacking, please let me know!</p>",
        "id": 135803936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539572861
    },
    {
        "content": "<p>I would suggest casing a whole bunch on <code>s</code></p>",
        "id": 135804097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539573154
    },
    {
        "content": "<p>if possible</p>",
        "id": 135804237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539573432
    },
    {
        "content": "<p>I would prefer to see a theorem that assumes a topological space and some properties</p>",
        "id": 135804244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539573452
    },
    {
        "content": "<p>I'll continue this in <a href=\"#narrow/stream/144837-PR-reviews/subject/.23422.20limits.20in.20CommRing\" title=\"#narrow/stream/144837-PR-reviews/subject/.23422.20limits.20in.20CommRing\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/subject/.23422.20limits.20in.20CommRing</a></p>",
        "id": 135805031,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539575031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> wrote on the PR page:</p>\n<blockquote>\n<p>Another thing which doesn't work for me: duplication of duality.<br>\nWhat about copying to_additive and adapting it to an duality method?</p>\n</blockquote>\n<p>We talked about that in Orsay. I think Mario and Scott came to the conclusion that it is a lot of hassle.</p>",
        "id": 135963625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539772978
    },
    {
        "content": "<p>For example, a lot of names change.</p>",
        "id": 135963653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539773035
    }
]