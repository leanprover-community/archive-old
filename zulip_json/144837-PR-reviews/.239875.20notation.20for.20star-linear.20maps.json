[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9875\">#9875</a> adds notation for star-linear maps as <code>M →ₗ*[R] N</code> etc.</p>\n<p>I think it's a bit weird to use <code>*</code> here, as it means <code>has_mul.mul</code> in most other contexts.</p>\n<p>Is it time to pick a \"standard\" notation for <code>has_star.star</code>? Some options would be:</p>\n<ul>\n<li><code>z†</code>, <code>M →ₗ†[R] N</code>: dagger is sometimes conjugation</li>\n<li><code>z⋆</code>, <code>M →ₗ⋆[R] N</code>: <code>⋆</code> is typed as <code>\\star</code></li>\n</ul>",
        "id": 258687492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634895865
    },
    {
        "content": "<p>(note that on github, the font renders <code>*</code> (mul) with 6 points not 5, making it more visibly distinct from <code>⋆</code>)</p>",
        "id": 258687631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1634895939
    },
    {
        "content": "<p>Just as a thought, <code>†</code> is the character that Lean 4 uses to denote \"dead\" variables, right? So it might not be a good idea to get too attached to using it</p>",
        "id": 258701992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1634904408
    },
    {
        "content": "<p>I like the idea of <code>\\star</code> as the standard notation for star, especially since Lean 4 has effectively eliminated its most serious competitor anyway.</p>",
        "id": 258711645,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1634909475
    },
    {
        "content": "<p>I don't think you can type the lean 4 dagger though, it's for pretty printing only, so it's not technically a problem although it might get confusing in printing if you have shadowed variables and daggered variables</p>",
        "id": 258712451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1634909830
    },
    {
        "content": "<p>I don't like the idea of an enforced switch to a notation like <code>*</code> or <code>†</code> for complex conjugation.  I think <code>conj</code> is much more transparent to the casual user, and I would like it to continue to be acceptable mathlib style (even preferred, in purely complex-number files) to write <code>conj</code>.  </p>\n<p>But I'd be fine with either <code>M →ₗ†[R] N</code> or <code>M →ₗ⋆[R] N</code> for conjugate-linear maps.</p>",
        "id": 258729328,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1634917109
    },
    {
        "content": "<p>I recall having this discussion back when <code>star</code> was being introduced: <a href=\"#narrow/stream/113488-general/topic/star_ring\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/star_ring</a></p>\n<p>Maybe settling for localized notation only would be the way to go here. Also it's more compatible with the \"bundled\" approach to star: we can locally choose notation for the particular flavor of star we want to be using.</p>",
        "id": 258756357,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1634928717
    },
    {
        "content": "<p>Having encountered papers that simultaneously dealt with complex conjugation, adjoints of operators, and left and right duals of objects in monoidal categories, I am in favour of flexible local notations. :-)</p>",
        "id": 258794562,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634950965
    },
    {
        "content": "<p>(Clearly the solution here is to use bar, dagger, and check, and completely forbid star as being hopelessly confusing!)</p>",
        "id": 258794583,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1634951022
    }
]