[
    {
        "content": "<p>I figured to eliminate the large amount of duplication between <code>monoid_algebra</code> and <code>add_monoid_algebra</code>, we need an equivalence between them. Hopefully from there a handful of theorems about <code>monoid_algebra</code> can be transferred over the equivalence to <code>add_monoid_algebra</code> in some future PRs, and the file can shrink a lot.</p>",
        "id": 213178615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602605143
    },
    {
        "content": "<p>I think you're missing a lemma</p>",
        "id": 213197947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602614033
    },
    {
        "content": "<p>Not related to this PR, but is there a good reason for why <code>add_monoid_algebra R M</code> is not defined as <code>monoid_algebra R (multiplicative M)</code>?</p>",
        "id": 213198627,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602614304
    },
    {
        "content": "<p>Because the resulting lemmas become awkward to use I think</p>",
        "id": 213225567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602628515
    },
    {
        "content": "<p>Thanks for catching my mistakes Kevin!</p>",
        "id": 213225591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602628538
    },
    {
        "content": "<p>I was just sick of admin. I made the branch <code>kbuzzard/mult-add-irred</code> (following your branch naming convention!) and made multiplicative and additive irreducible (and did nothing else). Course it doesn't compile, yet, but I'll keep tinkering...</p>",
        "id": 213226279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602628845
    },
    {
        "content": "<p>I tried this in <a href=\"https://github.com/leanprover-community/mathlib/issues/2292\">#2292</a> and failed</p>",
        "id": 213227379,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602629643
    },
    {
        "content": "<p>I tried it too, when initially writing <code>monoid_algebra</code> (it used to be that <code>polynomial</code> was built directly on <code>finsupp</code>). My attempt foundered because it was too much trouble to tell Lean when I wanted it to unfold <code>multiplicative</code> and when I didn't want it do. It's possible that being more rigorous (make <code>multiplicative</code> as irreducible as possible, never ever unfold, add API to <code>multiplicative</code> as needed) would get there. On the other hand, Yury is our master refactorer ... so it's a challenge. :-)</p>",
        "id": 213374518,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1602729660
    },
    {
        "content": "<p>This was the approach I took with <code>with_zero</code>, although I must confess I sometimes cheated and locally made it reducible in a file if I couldn't figure out how to fix a proof properly</p>",
        "id": 213383580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602742519
    }
]