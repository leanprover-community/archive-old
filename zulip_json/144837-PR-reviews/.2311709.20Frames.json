[
    {
        "content": "<p>How should this be called?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">hmm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inf_Sup_le_supr_inf</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"bp\">⨆</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">⊓</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 270039658,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643639473
    },
    {
        "content": "<p>/poll What's its name?</p>\n<ul>\n<li><code>frame</code></li>\n<li><code>complete_heyting_algebra</code></li>\n</ul>",
        "id": 270039744,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643639516
    },
    {
        "content": "<p>Here's why I like <code>complete_heyting_algebra</code>: it matches the existing pattern of <code>complete_boolean_algebra</code>,  and the relation of <code>heyting_algebra</code> to <code>complete_heyting_algebra</code> is more obvious than the relation of <code>heyting_algebra</code> to <code>frame</code> (since we have <code>heyting_algebra</code>s coming soon anyway). The name <code>complete_heyting_algebra</code> is much more unambiguous than the name <code>frame</code>. It's also worth noting that the three categories <code>cHa</code>, <code>Frm</code> and <code>Loc</code> all have different morphisms: in particular a map of frames isn't the same thing as a map of complete heyting algebras, so matching <code>frame_hom</code> doesn't really apply here because we're missing <code>heyting_algebra_hom</code>.</p>",
        "id": 270040523,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1643639809
    },
    {
        "content": "<p>I mostly prefer <code>frame</code> because (i) it's short, and (ii) that's what I've mostly seen used in the literature (but of course I've a very partial view of all the literature).</p>",
        "id": 270040576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643639835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270040523\">said</a>:</p>\n<blockquote>\n<p>matching <code>frame_hom</code> doesn't really apply here because we're missing <code>heyting_algebra_hom</code>.</p>\n</blockquote>\n<p>Not for long! <a href=\"https://github.com/leanprover-community/mathlib/tree/heyting_hom\">branch#heyting_hom</a></p>",
        "id": 270040786,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643639898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270040786\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270040523\">said</a>:</p>\n<blockquote>\n<p>matching <code>frame_hom</code> doesn't really apply here because we're missing <code>heyting_algebra_hom</code>.</p>\n</blockquote>\n<p>Not for long! <a href=\"https://github.com/leanprover-community/mathlib/tree/heyting_hom\">branch#heyting_hom</a></p>\n</blockquote>\n<p>Nice! Then I have another point in favour of <code>heyting_algebra</code> - it matches the name of <code>heyting_hom</code>!</p>",
        "id": 270040941,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1643639949
    },
    {
        "content": "<p>My opinion is that we could use <code>frame</code> until someone comes along and say \"Hey! I want to define vector spaces frames but <code>frame</code> already means something else\", but I'm not fussed either way.</p>",
        "id": 270041028,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643639983
    },
    {
        "content": "<p>Perhaps the best way forward here though is to just have aliases - CompleteHeyting is different from Frame, but they have the same objects so aliases for that would be okay</p>",
        "id": 270041066,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1643640001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270041028\">said</a>:</p>\n<blockquote>\n<p>My opinion is that we could use <code>frame</code> until someone comes along and say \"Hey! I want to define vector spaces frames but <code>frame</code> already means something else\", but I'm not fussed either way.</p>\n</blockquote>\n<p>Yeah the ambiguity could be resolved early by using <code>order.frame</code> or something?</p>",
        "id": 270041139,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1643640019
    },
    {
        "content": "<p>I prefer <code>complete_heyting_algebra</code> over <code>order.frame</code>!</p>",
        "id": 270041461,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643640134
    },
    {
        "content": "<p>Mostly, the ambiguity could be resolved by banning vector spacists from mathlib <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 270041528,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643640163
    },
    {
        "content": "<p>Another thing to take into account is whether we'll ever want coframes (the order dual of frames).</p>",
        "id": 270044472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643641230
    },
    {
        "content": "<p>I can see <a href=\"http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/co-Heyting+algebra\">coHeyting algebras</a> being useful to someone, so maybe</p>",
        "id": 270044733,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1643641323
    },
    {
        "content": "<p>Like Bhavik said already, these are the objects of two different categories so mathlib's unbundled style makes the naming a bit awkward. As someone interested in geometry, I care about frames and don't care at all about complete Heyting algebras so I don't know if I can give any justification for my preference which is independent of that.</p>",
        "id": 270045304,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643641533
    },
    {
        "content": "<p>I wonder if anyone really cares about <em>complete</em> Heyting algebras though? It seems like a weird mix of internal and external quantification</p>",
        "id": 270045347,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643641549
    },
    {
        "content": "<p>So how do you name coframes? <code>complete_coheyting_algebra</code>?</p>",
        "id": 270045841,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643641706
    },
    {
        "content": "<p><code>locale</code>?</p>",
        "id": 270045947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643641739
    },
    {
        "content": "<p>There's no use for the dual</p>",
        "id": 270046044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643641779
    },
    {
        "content": "<p>It would be like, how do you name a ring-like structure with (a * b) + c = (a + c) * (b + c)</p>",
        "id": 270046098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643641798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270045947\">said</a>:</p>\n<blockquote>\n<p><code>locale</code>?</p>\n</blockquote>\n<p>Nah, that's the opposite category, not the order dual.</p>",
        "id": 270046241,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643641842
    },
    {
        "content": "<p>Aha, I did the wrong kind of dual again...</p>",
        "id": 270046244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643641843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270046044\">said</a>:</p>\n<blockquote>\n<p>There's no use for the dual</p>\n</blockquote>\n<p>So what about bi Heyting algebras?</p>",
        "id": 270046347,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643641880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270046098\">said</a>:</p>\n<blockquote>\n<p>It would be like, how do you name a ring-like structure with (a * b) + c = (a + c) * (b + c)</p>\n</blockquote>\n<p>That's a bit unfair. Heyting algebras are the correct generality for implication. Co Heyting algebras are the correct generality for difference.</p>",
        "id": 270046581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643641952
    },
    {
        "content": "<p>I mean I guess this is related to something like paraconsistent logic, but it seems extremely outré even by mathlib standards</p>",
        "id": 270046600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643641961
    },
    {
        "content": "<p>\"outré\" as in \"scandalized\"?</p>",
        "id": 270046680,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643641992
    },
    {
        "content": "<p>In any case in the frame/geometry story, it doesn't make sense to dualize like this.</p>",
        "id": 270046717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643642008
    },
    {
        "content": "<p>Because these operations on propositions are really coming from operations on sets, and you can't sensibly dualize sets in the same way.</p>",
        "id": 270046846,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643642046
    },
    {
        "content": "<p>Isn't that precisely an argument to have the dual structure, rather than forcibly get to the dual structure using <code>order_dual</code> later?</p>",
        "id": 270047163,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643642166
    },
    {
        "content": "<p>I mean that the dual structure to a frame is just as irrelevant as <code>gnir</code> with <code>+</code> and <code>*</code> swapped</p>",
        "id": 270047292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643642226
    },
    {
        "content": "<p>I wouldn't devote any attention to worrying about how we could support it.</p>",
        "id": 270047373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643642259
    },
    {
        "content": "<p>If ever we want them, they would either be called <code>coframe</code> or <code>complete_brouwer_algebra</code>, I presume.</p>",
        "id": 270047392,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643642270
    },
    {
        "content": "<p>The thing is that it's really easy for me to define them, as I'm defining the dual notion already, rather than for someone to come along later and to try to understand what the hell I was thinking.</p>",
        "id": 270047568,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643642325
    },
    {
        "content": "<p>I see \"frame\" as the more neutral name. \"Complete Heyting algebra\" is biased toward viewing implication as central to the story, which it isn't if you're interested in locales as I understand. It's admittedly non-descriptive but then so is \"lattice\"</p>",
        "id": 270047633,
        "sender_full_name": "David Wärn",
        "timestamp": 1643642352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270047633\">said</a>:</p>\n<blockquote>\n<p>I see \"frame\" as the more neutral name. \"Complete Heyting algebra\" is biased toward viewing implication as central to the story, which it isn't if you're interested in locales as I understand. It's admittedly non-descriptive but then so is \"lattice\"</p>\n</blockquote>\n<p>This is a fair point. I agree lattice is non-descriptive, but I think it's a more widely known term than \"frame\"</p>",
        "id": 270047835,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1643642434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270047292\">said</a>:</p>\n<blockquote>\n<p>I mean that the dual structure to a frame is just as irrelevant as <code>gnir</code> with <code>+</code> and <code>*</code> swapped</p>\n</blockquote>\n<p>BTW just to be clear, when I say \"frame\" here I am referring to the frame/frame homomorphism concept. Not necessarily the cHa/cHa homomorphism concept.</p>",
        "id": 270048489,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643642696
    },
    {
        "content": "<p>nor the <code>heyting_algebra</code>/<code>heyting_hom</code> concept, I presume?</p>",
        "id": 270049114,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643642932
    },
    {
        "content": "<p><a href=\"http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/co-Heyting+negation\">http://nlab-pages.s3.us-east-2.amazonaws.com/nlab/show/co-Heyting+negation</a> at least shows use of both concepts simultaneously.</p>",
        "id": 270049202,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643642964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270045347\">said</a>:</p>\n<blockquote>\n<p>I wonder if anyone really cares about <em>complete</em> Heyting algebras though? It seems like a weird mix of internal and external quantification</p>\n</blockquote>\n<p>I think it's a sensible notion. If you do intuitionistic predicate logic then they are a natural choice for the type of truth values, allowing all sorts of quantifiers</p>",
        "id": 270049777,
        "sender_full_name": "David Wärn",
        "timestamp": 1643643163
    },
    {
        "content": "<p>Well I guess the reason it confuses me is that a logical morphism of topoi preserves finite limits but not (in general) infinitary ones.</p>",
        "id": 270050851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643643520
    },
    {
        "content": "<p>But you could also consider infinitary logic of course.</p>",
        "id": 270050896,
        "sender_full_name": "Reid Barton",
        "timestamp": 1643643541
    },
    {
        "content": "<p>So, should I define <code>coframe</code> or not?</p>",
        "id": 270058627,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643645917
    },
    {
        "content": "<p>I don't think you should</p>",
        "id": 270058799,
        "sender_full_name": "David Wärn",
        "timestamp": 1643645991
    },
    {
        "content": "<p>Yury just pointed out that <code>filter</code> is a coframe, so I'm defining it.</p>",
        "id": 270061574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643646988
    },
    {
        "content": "<p>If it's a notion that no mathematician has ever needed, I don't see the point of defining it: no-one will look for it, no-one will understand it when browsing through the library, and no-one will ever use it. Mathematics is not a game where one plays with all possible structures, it's a domain in which centuries of thoughts and experiments have identified the interesting structures.</p>",
        "id": 270062868,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643647425
    },
    {
        "content": "<p>Well, you have it over at <a href=\"https://github.com/leanprover-community/mathlib/tree/coframe\">branch#coframe</a>. It just fits too nicely to trash it...</p>",
        "id": 270064496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643648035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> while I understand and mostly agree with this point, it should be noted that mathematics, at least for the past two centuries, has <em>also</em> been a game of playing with structures which, at the time they were discovered, didn't appear to have lasting interest. As an example, consider non-Euclidean geometry. It was not heralded as the advent of new geometry worthy of scrutiny, but instead even lambasted by some. Note: I am not necessarily arguing for or against inclusion of coframes in mathlib.</p>",
        "id": 270103598,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1643662744
    },
    {
        "content": "<p>Sure, you are absolutely right! But it takes time to recognize what is new and important, it is a digestion process done by the whole mathematics community, and probably not the role of mathlib. Better focus on what is not here yet and obviously important (there is plenty of it!).</p>",
        "id": 270107414,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643664293
    },
    {
        "content": "<p>Agreed</p>",
        "id": 270127103,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1643673355
    },
    {
        "content": "<p>The current vote is</p>\n<ul>\n<li><code>frame</code> 6</li>\n<li><code>complete_heyting_algebra</code> 7</li>\n</ul>\n<p>What do we do? I really like <code>frame</code> because it's short and it's what I've seen so far in the literature. Should we have both, with an alias from one to the other?</p>",
        "id": 270970995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644237289
    },
    {
        "content": "<p>I still prefer <code>complete_heyting_algebra</code>, but I'd be more than happy with an alias.</p>",
        "id": 270972611,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1644238088
    },
    {
        "content": "<p>Of course frame cannot be in the root namespace.</p>",
        "id": 270976489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644240062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270976489\">said</a>:</p>\n<blockquote>\n<p>Of course frame cannot be in the root namespace.</p>\n</blockquote>\n<p>Would you prefer <code>order.frame</code>? Or is there a different namespace that you believe is more appropriate?</p>",
        "id": 270976607,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1644240122
    },
    {
        "content": "<p>I'm pretty sure that Patrick does not care about frames as long as they stay out of the root namespace.</p>",
        "id": 270998948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644249377
    },
    {
        "content": "<p>About naming, I wonder whether it might even make sense to have two separate definitions to capture the two intensionally different notions of frame and cHa?</p>",
        "id": 270999058,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644249429
    },
    {
        "content": "<p>Which way would the instance go?</p>",
        "id": 270999137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644249460
    },
    {
        "content": "<p>That's pointless from a purely order hierarchy point of view.</p>",
        "id": 270999159,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644249467
    },
    {
        "content": "<p>It looks really weird to me to call the specific definition <code>frame</code> in the PR a cHa, given that it does not come with an internal implication operation and does not extend a class of Heyting algebras.</p>",
        "id": 270999180,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644249475
    },
    {
        "content": "<p>It will, that's the thing.</p>",
        "id": 270999350,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644249538
    },
    {
        "content": "<p>As in, in the future?</p>",
        "id": 270999397,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644249559
    },
    {
        "content": "<p>I'm currently writing the theory of Heyting/Brouwer algebras in another branch.</p>",
        "id": 270999402,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644249563
    },
    {
        "content": "<p>Seems strange to do it in this order</p>",
        "id": 270999887,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644249723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270999159\">said</a>:</p>\n<blockquote>\n<p>That's pointless from a purely order hierarchy point of view.</p>\n</blockquote>\n<p>I guess the issue is that the hierarchy does a bad job of capturing the underlying ontology. E.g. it doesn't make sense to say that a frame is a Heyting algebra.</p>",
        "id": 271001527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644250328
    },
    {
        "content": "<p>But then I also find it correspondingly bizarre that people use the same term \"topos\" for the totally separate concepts of Grothendieck topos or elementary topos, so what do I know.</p>",
        "id": 271001730,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644250419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311709.20Frames/near/270976489\">said</a>:</p>\n<blockquote>\n<p>Of course frame cannot be in the root namespace.</p>\n</blockquote>\n<p>I don't necessarily disagree with this conclusion, but is there an established convention behind this? We have both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lattice\">docs#lattice</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subspace\">docs#subspace</a> in the root namespace even though they have other established meanings in mathematics. Certainly order lattices and vector subspaces are more important to mathlib than frames -- is this the reason you think frame shouldn't be in the root namespace, or do you also object to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lattice\">docs#lattice</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subspace\">docs#subspace</a>?</p>",
        "id": 271001970,
        "sender_full_name": "David Wärn",
        "timestamp": 1644250493
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/lattice\">docs#lattice</a> goes back to the prehistory of mathlib. That's why it's in the root namespace. When someone will want to discuss lattices in Lie groups for instance then we'll have to fix this. I don't know how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subspace\">docs#subspace</a> ended up in the root namespace, but this could be fixed at any time. In the long run I think the root namespace should contain only stuff that is completely uncontroversial like <code>group</code> or <code>topological_space</code>. Fixing old stuff isn't high priority, but let's not add super generic terms to this namespace.</p>",
        "id": 271007209,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644252609
    },
    {
        "content": "<p>In the end I don't think the frame vs cHa naming issue matters so much because we can always give the category of frames the correct name, and it may have a definition which looks funny but we can document why.</p>",
        "id": 271018586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644257196
    },
    {
        "content": "<p>Ok, we aren't really coming to a conclusion. I suggest that this PR defines <code>order.frame</code>. Later this can be generalized to include an internal implication operation using forgetful inheritance. It can then be renamed or aliased to <code>complete_Heyting_algebra</code>.</p>",
        "id": 271245760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1644396504
    },
    {
        "content": "<p>Just to chime in, I'd argue we should define the dual notion <code>order.coframe</code> (or whatever name seems best), not because the object is mathematically interesting, but because it allows us to deduplicate lemmas between filters and complete lattices</p>",
        "id": 271417497,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644492069
    },
    {
        "content": "<p>Add <code>order_dual</code> and we're up to three instances of that typeclass, which seems ample yo justify it existing</p>",
        "id": 271417644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644492139
    },
    {
        "content": "<p>Fully agree. I have it ready on <a href=\"https://github.com/leanprover-community/mathlib/tree/coframe\">branch#coframe</a> if you're okay with it</p>",
        "id": 271421490,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644494621
    },
    {
        "content": "<p>Also note that without it, we'll have to provide the instance <code>frame (order_dual (order_dual \\a))</code> by hand, although that's not terribly important.</p>",
        "id": 271422824,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644495396
    }
]