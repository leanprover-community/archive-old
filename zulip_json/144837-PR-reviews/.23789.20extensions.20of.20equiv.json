[
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/definition.20of.20is_mul_hom\" title=\"#narrow/stream/113488-general/topic/definition.20of.20is_mul_hom\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/definition.20of.20is_mul_hom</a></p>\n<p>Maybe this is a better place for this conversation.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">le_equiv</span> <span class=\"kn\">extends</span> <span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">to_fun</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>This fails because <code>monotone</code> expects a preorder. Should I just not use monotone and write out its definition explicitly? <code>monotone</code> uses <code>{{ }}</code> brackets. If I write it myself then this is an opportunity to change them -- should I?</p>",
        "id": 161002728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552836351
    },
    {
        "content": "<p>Actually, I probably want <code>x1 &lt;= x2 iff f x1 &lt;= f x2</code> in the definition of le_equiv</p>",
        "id": 161002775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552836417
    },
    {
        "content": "<p>Should there be a coercion to X -&gt; Y, or should the user have to explicitly invoke it with <code>add_equiv.to_equiv</code>?</p>",
        "id": 161003317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552837231
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">linear_ordered_comm_group_equiv</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n   <span class=\"kn\">extends</span> <span class=\"n\">le_equiv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">mul_equiv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">invalid &#39;structure&#39; header, field &#39;to_equiv&#39; from &#39;mul_equiv&#39; has already been declared</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- aargh</span>\n</pre></div>\n\n\n<p>Should I extend one (say le_equiv) and then add the axiom for the other one, and then define a projection onto the other one?</p>",
        "id": 161003763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552838031
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">le_mul_equiv</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n   <span class=\"kn\">extends</span> <span class=\"n\">le_equiv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_mul_hom</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n\n<span class=\"kn\">infix</span> <span class=\"bp\">`</span> <span class=\"err\">≃</span><span class=\"bp\">≤*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"o\">:=</span> <span class=\"n\">le_mul_equiv</span>\n\n<span class=\"n\">def</span> <span class=\"n\">le_mul_equiv</span><span class=\"bp\">.</span><span class=\"n\">to_mul_equiv</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span><span class=\"bp\">≤*</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">h</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Is that notation great or horrible?</p>",
        "id": 161004193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552838586
    },
    {
        "content": "<p><code>linear_ordered_comm_group_equiv</code> or <code>linear_ordered_comm_group.equiv</code>?</p>",
        "id": 161022028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552868870
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">group_equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">mul_equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">group_equiv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">mul_equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</pre></div>\n\n\n<p>? I'm going for the first one. An equiv of groups is just an equiv of the underlying has_muls</p>",
        "id": 161104621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552950336
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">is_mul_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>Should this be a class, like <code>is_group_hom</code>?</p>",
        "id": 161106163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552951756
    },
    {
        "content": "<p>you should use old style structures for <code>linear_ordered_comm_group_equiv</code></p>",
        "id": 161337995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553169325
    },
    {
        "content": "<p>I do not understand these old v new structure issues, but I have spent some time making basic new structures now so perhaps when I re-read the notes on this issue its relevance to me will finally become apparent.</p>",
        "id": 161338080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553169402
    },
    {
        "content": "<p>I kind of wish Leo didn't decide to call them \"old\" / \"new\" as opposed to something more neutral like \"flat\" / \"nested\"</p>",
        "id": 161338115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553169459
    },
    {
        "content": "<p>in this case it's simply the fact that new style structures don't allow diamonds but old style structures do</p>",
        "id": 161338221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553169565
    },
    {
        "content": "<p>old style structures are appropriate for \"pushout\" type constructions where you are gluing along certain fields of the structure</p>",
        "id": 161338247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553169598
    },
    {
        "content": "<p>I'm unclear on why we need <code>add_equiv</code> and such, do you have an example use or is this just filling out the library?</p>",
        "id": 161338541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553169827
    },
    {
        "content": "<p>ideally I would like to just stick to the \"mathematically relevant\" equivs like <code>group_equiv</code> and <code>ring_equiv</code></p>",
        "id": 161338642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553169902
    },
    {
        "content": "<p>The history of the PR was that I wanted <code>group_equiv</code> for the perfectoid project, so I wrote <code>group_equiv</code> and <code>monoid_equiv</code>, and then Chris pointed out that <code>monoid_equiv</code> was suboptimal in the sense that demanding that the bijection be a morphism of monoids was too strong; one only needs to demand that it's a morphism of has_muls, and then because it's a bijection (in fact one only uses surjectivity) one can deduce that it sends 1 to 1, which is part of the definition of a morphism of monoids. Chris then suggested using mul_equiv instead, and just defining monoid_equiv to be mul_equiv.</p>",
        "id": 161340732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553171778
    },
    {
        "content": "<p>I myself don't care whether mul_equiv is there or not; I need group_equiv in practice so I think there is an argument which says it should be there. I am happy to be instructed on this matter.</p>",
        "id": 161340797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553171849
    },
    {
        "content": "<p>Are you saying that in <code>monoid_equiv</code> you don't need that <code>f 1 = 1</code>?</p>",
        "id": 161340888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553171903
    },
    {
        "content": "<p>Yes</p>",
        "id": 161340906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553171908
    },
    {
        "content": "<p>how does that reasoning go?</p>",
        "id": 161340921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553171919
    },
    {
        "content": "<p>It follows from bijectivity and the fact that multiplication is preserved</p>",
        "id": 161340925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553171922
    },
    {
        "content": "<p>The proof is in the PR ;-)</p>",
        "id": 161340936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553171936
    },
    {
        "content": "<p>1 is the unique left and right identity in a monoid</p>",
        "id": 161340961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553171961
    },
    {
        "content": "<p>oh, two-sided identities are unique</p>",
        "id": 161340964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553171962
    },
    {
        "content": "<p>right</p>",
        "id": 161340968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553171966
    },
    {
        "content": "<p>So that made Chris more inclined to make mul_equiv.</p>",
        "id": 161341033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553172004
    },
    {
        "content": "<p>So you can define <code>monoid_equiv</code> as just preserving mul, and <code>group_equiv</code> extends <code>monoid_equiv</code></p>",
        "id": 161341046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553172018
    },
    {
        "content": "<p>right</p>",
        "id": 161341053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553172024
    },
    {
        "content": "<p>so this is cute -- I think that's what Chris liked</p>",
        "id": 161341064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553172034
    },
    {
        "content": "<p>In fact this was another issue</p>",
        "id": 161341069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553172046
    },
    {
        "content": "<p>I didn't know whether to define group_equiv to extend monoid_equiv or just to <em>equal</em> monoid_equiv</p>",
        "id": 161341103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553172067
    },
    {
        "content": "<p>I think <code>vector_space</code> is an extension</p>",
        "id": 161341123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553172088
    },
    {
        "content": "<p>IIRC the proofs of things like symmetry were different depending on the two choices</p>",
        "id": 161341124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553172090
    },
    {
        "content": "<p>and that's the same kind of thing</p>",
        "id": 161341148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553172113
    }
]