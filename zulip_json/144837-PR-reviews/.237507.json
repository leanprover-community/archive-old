[
    {
        "content": "<p>Can someone explain to me the error I describe in the comments for this pull request? Namely, why does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">monomial_sub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monomial</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">monomial</span> <span class=\"n\">m</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">monomial</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">single_sub.symm</span>\n</code></pre></div>\n<p>Throw a type mismatch, while</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">monomial_add</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">monomial</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">monomial</span> <span class=\"n\">s</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">monomial</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">single_add.symm</span>\n</code></pre></div>\n<p>Works fine?</p>",
        "id": 237717086,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1620329941
    },
    {
        "content": "<p>My guess is that mv_polynomial has a different subtraction to finsupp</p>",
        "id": 237718127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620330469
    },
    {
        "content": "<p>Largely by accident</p>",
        "id": 237718137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620330475
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.comm_ring/src\">src#mv_polynomial.comm_ring</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.has_sub/src\">src#finsupp.has_sub</a>, maybe?</p>",
        "id": 237718234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620330512
    },
    {
        "content": "<p>The former uses <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.comm_ring/src\">src#add_monoid_algebra.comm_ring</a></p>",
        "id": 237718593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620330697
    },
    {
        "content": "<p>Nope, they're the same, something else is going on</p>",
        "id": 237719319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620331065
    },
    {
        "content": "<p>What's the error?</p>",
        "id": 237719330,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620331069
    },
    {
        "content": "<p>Aha! <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.single_sub\">docs#finsupp.single_sub</a> is bizarrely about <code>nat</code>!</p>",
        "id": 237719547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620331188
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">monomial_sub</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monomial</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">monomial</span> <span class=\"n\">m</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">monomial</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">single_sub.symm</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch, term</span>\n<span class=\"cm\">  single_sub.symm</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  single ?m_2 ?m_3 - single ?m_2 ?m_4 = single ?m_2 (?m_3 - ?m_4)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  monomial m a - monomial m b = monomial m (a - b)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 237719551,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1620331190
    },
    {
        "content": "<p>So the thing to do here is rename that lemma to <code>finsupp.single_sub_nat</code></p>",
        "id": 237719865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620331322
    },
    {
        "content": "<p>And add a new lemma that says what you actually wanted</p>",
        "id": 237719915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620331333
    },
    {
        "content": "<p>While you're at it (and in the context of this PR), a lemma for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.single_neg\">docs#finsupp.single_neg</a> (which doesn't yet exist) would be great.</p>",
        "id": 237719997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620331383
    },
    {
        "content": "<p>I suspect this happened because this stuff was being developed for multivariable polynomials.</p>",
        "id": 237745485,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620343383
    },
    {
        "content": "<blockquote>\n<p>Eric Wieser: So the thing to do here is rename that lemma to finsupp.single_sub_nat</p>\n</blockquote>\n<p>Or better yet, I think, abstract the finsupp.single_sub lemma to work over any <code>has_sub</code> range type.</p>",
        "id": 237784616,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1620375440
    },
    {
        "content": "<p>I don't think it's necessary to add a <code>finsupp.single_sub_nat</code> lemma if we just do that</p>",
        "id": 237784713,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1620375498
    },
    {
        "content": "<p>You can't do that because we have no typeclass for <code>x - 0 = x</code></p>",
        "id": 237786430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620376481
    },
    {
        "content": "<p>And <code>nat</code> doesn't satisfy <code>add_group</code> which is what <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_zero\">docs#sub_zero</a> requires</p>",
        "id": 237786508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620376520
    },
    {
        "content": "<p>I made a thread about this a while ago</p>",
        "id": 237786521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620376527
    },
    {
        "content": "<p>I tried to generalize <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.sub_zero\">docs#nat.sub_zero</a> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_add_monoid\">docs#canonically_ordered_add_monoid</a>  (see <a href=\"#narrow/stream/113488-general/topic/subtraction.20in.20canonically_ordered_add_monoid\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/subtraction.20in.20canonically_ordered_add_monoid</a>) but it was tricky and I abandoned it. I think it's still worthwhile to do.</p>",
        "id": 238815157,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1621019445
    }
]