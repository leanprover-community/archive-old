[
    {
        "content": "<p>I am still not 100% sure of the community's plans for the <code>deprecated</code> folder but I've started the procedure of turning <code> is_add_hom</code>, <code>is_mul_hom</code>, <code>is_add_monoid_hom</code>, <code>is_monoid_hom</code>, <code>is_add_group_hom</code>, <code>is_group_hom</code>, <code>is_semiring_hom</code>,  <code>is_add_submonoid</code>, <code>is_submonoid</code>, ... all from classes to structures. Current progress is in <a href=\"https://github.com/leanprover-community/mathlib/issues/8178\">#8178</a> . Someone let me know if I've got the wrong end of the stick! I've just got tired of the existence of <code>deprecated</code> and term is done so I thought I'd try a refactor.</p>",
        "id": 244663833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625207413
    },
    {
        "content": "<p>It would be great if the people involved in the original deprecation could write a library note explaining what the problem with unbundled subXs and X_homs. I'm sure there were problems, but if we don't write them down someone in future will inevitably try to refactor back in the other direction</p>",
        "id": 244666524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625209798
    },
    {
        "content": "<p>(it may also be the case that lean4 makes some of those problems moot)</p>",
        "id": 244666611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625209838
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/116395-maths/topic/busywork/near/244677015\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/busywork/near/244677015</a>, where Anne quotes some reasons.</p>",
        "id": 244677194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625217151
    },
    {
        "content": "<p>My main question is \"is this branch going in the right direction\"? Given that nobody is howling that I've made an incorrect definition, I'll assume the answer is yes. There are a bunch of instances which I'm changing to lemmas and at the back of my mind I'm thinking \"are these actually ever used by anyone?\".</p>",
        "id": 244680587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625219374
    },
    {
        "content": "<p>It looks like the right direction to me. The only thing I would add is <code>bundle</code>/<code>unbundle</code> maps, sending <code>h : is_hom (f : A → B)</code> to <code>h.bundle : hom A B</code> and <code>f : hom A B</code> to <code>f.unbundle : is_hom (coe_fn f)</code>.</p>",
        "id": 244682154,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625220250
    },
    {
        "content": "<p>We have those already as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.is_monoid_hom\">docs#monoid_hom.is_monoid_hom</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.of\">docs#monoid_hom.of</a>, right?</p>",
        "id": 244684870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625222058
    },
    {
        "content": "<p>There are a couple of those, but IIRC not all.</p>",
        "id": 244686475,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1625223273
    },
    {
        "content": "<p>IIRC we have is_mul_hom and is_monoid_hom and is_group_hom but I'm not sure we have all of these bundled</p>",
        "id": 244759154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625261008
    },
    {
        "content": "<p>You're right, we don't have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_hom.of\">docs#mul_hom.of</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_hom.is_mul_hom\">docs#mul_hom.is_mul_hom</a></p>",
        "id": 244760232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625261868
    },
    {
        "content": "<p>There's no point in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_group_hom\">docs#is_group_hom</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_monoid_hom\">docs#is_monoid_hom</a>, right? The latter always is implied by the former in the cases where the implication can even be stated</p>",
        "id": 244760353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625261953
    },
    {
        "content": "<p>I guess the former auto-populates <code>map_one</code>, but I don't think that convenience is worth the weight of a new definition when a new <code>is_monoid_hom.of_group</code> would be just as good</p>",
        "id": 244760494,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625262036
    },
    {
        "content": "<p>I'm as far as <code>deprecated.subring</code> and I noticed incompatibilities in naming conventions. Here's some code I'm going to push later today:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_subring_preimage</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">is_add_group_hom.preimage</span> <span class=\"n\">f.to_is_add_group_hom</span> <span class=\"n\">hs.to_is_add_subgroup</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">is_submonoid.preimage</span> <span class=\"n\">f.to_is_monoid_hom</span> <span class=\"n\">hs.to_is_submonoid</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_subring_image</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">is_add_group_hom.image_add_subgroup</span> <span class=\"n\">f.to_is_add_group_hom</span> <span class=\"n\">hs.to_is_add_subgroup</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">is_submonoid.image</span> <span class=\"n\">f.to_is_monoid_hom</span> <span class=\"n\">hs.to_is_submonoid</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>(this compiles on the <code>undeprecate</code> branch). You see that for <code>preimage</code> we don't use dot notation at all for <code>is_subring</code>, for monoids it's in the namespace for the subobject and for additive groups it's in the namespace for the morphisms. For image we don't even have a consistent naming convention. I am not tempted to fix all this now because I'm already touching a gazillion files in this refactor, but one could still ask what the best convention is here.</p>",
        "id": 245487472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625859310
    },
    {
        "content": "<p>From bad to worse:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_subring_set_range</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"n\">is_add_group_hom.range_add_subgroup</span> <span class=\"n\">f.to_is_add_group_hom</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">range.is_submonoid</span> <span class=\"n\">f.to_is_monoid_hom</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The proof says \"the range is a subring because it's a submonoid and an additive subgroup\" and indicates yet another way of expressing these ideas.</p>\n<p>Just to be clear -- I am refactoring stuff here but not changing any of the names of the lemmas.</p>",
        "id": 245487899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625859542
    },
    {
        "content": "<p>I like how the author of that lemma found the two existing inconsistent names but still decided to create a new one inconsistent with both.</p>",
        "id": 245489772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625860537
    },
    {
        "content": "<p>Presumably we never had <code>is_semiring_hom</code>?</p>",
        "id": 245489861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1625860570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238178.20undeprecate/near/245489772\">said</a>:</p>\n<blockquote>\n<p>I like how the author of that lemma found the two existing inconsistent names but still decided to create a new one inconsistent with both.</p>\n</blockquote>\n<p>In the original author's defence, the original proof before the refactor was <code>{}</code> because everything was being done by type class inference.</p>",
        "id": 245491383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625861296
    },
    {
        "content": "<p>There certainly is <code>is_semiring_hom</code> -- I have no idea why a semiring hom is being used here and the is_ stuff is being used for the others. It's just all a bit of a mess, I'd not really realised this because of course I never use these functions.</p>",
        "id": 245491515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625861376
    },
    {
        "content": "<p>I've now touched 39 files and in some sense have absolutely no idea of how many more will need to be fixed. I am working on a \"happiness is just around the corner\" principle.</p>\n<p>I've made two \"contentious\" decisions which I'll document here before I forget them:</p>\n<p>1) We used to be able to do <code>instance : (R : Type) [ring R] (S : set R) [is_subring S] : ring ↥S := ...</code> (and the same for submonoids, subgroups, subfields etc). These instances are used all over the place in the <em>statements</em> of results. If <code>is_subring</code> isn't a class then replacing it with <code>(hS : is_subring S)</code> means that type class inference will never find the ring instance on <code>↥S</code>. I spent some time trying to make this work, but eventually gave up and now am using <code>[hS : fact (is_subring S)]</code> which works like a dream. I am not sure that these lemmas are actually being used in practice but right now this is what I'm changing the definitions to.</p>\n<p>2) Occasionally I see lemmas involving <code>is_ring_hom</code> and I think \"it would be sensible to state this with <code>ring_hom</code> instead -- but actually the <code>ring_hom</code> version is probably in the library somewhere\", so I just port the lemmas directly and don't attempt to change them. Right now I think that it would be an achievement just getting things to compile so I'm not minded to start making other changes at the same time.</p>",
        "id": 245615684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626022287
    },
    {
        "content": "<p>Update: the PR touches 92 files and has a green tick. But it's OK, it's mostly messing with parts of mathlib which people don't use, so there have been very few conflicts, most of which were caused by me anyway.</p>",
        "id": 247824229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627765910
    },
    {
        "content": "<p>I think that one option for future work is to remove <code>deprecated</code> from src, I think that this is in sight unless <code>control</code> needs it for some reason.</p>",
        "id": 247824282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627766032
    },
    {
        "content": "<p>there's just a few gnarly bits left. I can open issues for them maybe.</p>",
        "id": 247824337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1627766088
    }
]