[
    {
        "content": "<p>This <a href=\"https://github.com/leanprover-community/mathlib/pull/14659\">#14659</a> also seems to have been overlooked.</p>",
        "id": 288119412,
        "sender_full_name": "Violeta Hern치ndez",
        "timestamp": 1656650158
    },
    {
        "content": "<p>We introduce notation for basic games, which allows us to simplify a few arguments</p>",
        "id": 288119460,
        "sender_full_name": "Violeta Hern치ndez",
        "timestamp": 1656650176
    },
    {
        "content": "<p>The notation stuff all looks great, I'm curious if anyone has opinions about your aggressive use of <code>reducible</code></p>",
        "id": 288130465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656659866
    },
    {
        "content": "<p>The motivation I assume is mainly driven by wanting things like <code>unique (left_moves star)</code> to work?</p>",
        "id": 288130569,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656659936
    },
    {
        "content": "<p>(or whatever a similar true statement is)</p>",
        "id": 288130596,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656659957
    },
    {
        "content": "<p>Yeah, <code>reducible</code> makes both the instances for unique/empty left/right moves, and the simp lemmas for moving left/right immediate</p>",
        "id": 288205006,
        "sender_full_name": "Violeta Hern치ndez",
        "timestamp": 1656698095
    },
    {
        "content": "<p>I'm admittedly not 100% sure if this is the right approach either, but this doesn't seem to have broken anything... yet</p>",
        "id": 288205042,
        "sender_full_name": "Violeta Hern치ndez",
        "timestamp": 1656698117
    },
    {
        "content": "<p>The \"simp lemma\" comment feels irrelevant because you have all those lemmas anyway (just not as simp)</p>",
        "id": 288208735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656700232
    },
    {
        "content": "<p>All the <code>reducible</code> definitions seem to be safe according to two criteria:</p>\n<ul>\n<li>Every variable is used at most once.</li>\n<li>The definitions are simple wrappers around constructors (or themselves are wrappers around such a function), so the number of head unfoldings is bounded above by a constant.</li>\n</ul>\n<p>Together these mean the definitions don't cost much in terms of how much unfolding they might create.</p>",
        "id": 288209775,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1656700825
    }
]