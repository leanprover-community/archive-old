[
    {
        "content": "<p>There was a thread in the newbies stream about <code>eq.rhs</code>, and how the <code>.rhs</code> is not pretty-printed in the tactic state (I'm not sure if I understood the comment correctly).  This got me thinking, should we enable <code>pp.generalized_field_notation</code> by default?  (It is not complete, and there are very likely cases where it doesn't round-trip.)</p>",
        "id": 197151983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589206857
    },
    {
        "content": "<p>Oh I didn't even notice this difference.</p>",
        "id": 197152158,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589206931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> My comment was about something different:<br>\nI would like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n</code></pre></div>\n\n\n<p>and then</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">lhs</span>\n</code></pre></div>\n\n\n<p>should give</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n<span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"c1\">-- and not h.lhs</span>\n</code></pre></div>",
        "id": 197152424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589207041
    },
    {
        "content": "<p>My point in that context was that you still see this term <code>eq.rhs</code> in some form, not the actual RHS of the equation (which you would see instead, if you had written it manually)</p>",
        "id": 197152485,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589207048
    },
    {
        "content": "<p>But that is orthogonal.</p>",
        "id": 197152491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589207050
    },
    {
        "content": "<p>Yet another option I wasn't aware of...</p>",
        "id": 197152521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589207064
    },
    {
        "content": "<p>Maybe we should add a reducibility setting <code>transparent</code></p>",
        "id": 197152591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589207108
    },
    {
        "content": "<p><code>@[transparent] def eq.lhs := ...</code></p>",
        "id": 197152614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589207122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I get it now.  Unfortunately I don't see a way to get this without adding a (local) notation.</p>",
        "id": 197152619,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589207123
    },
    {
        "content": "<p>How do you do it with notation? I didn't see a way</p>",
        "id": 197152648,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589207137
    },
    {
        "content": "<p>Another possibility is a <code>pp</code> flag to unfold <code>reducible</code> things</p>",
        "id": 197152682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589207156
    },
    {
        "content": "<p>Or at least unfold <code>transparent</code> things</p>",
        "id": 197152742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589207170
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  You declare a notation that expands to a tactic, you can pass expressions to the tactic via the expected type.</p>",
        "id": 197152783,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589207191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23227.20pretty-print.20using.20dot.20notation/near/197152591\">said</a>:</p>\n<blockquote>\n<p>Maybe we should add a reducibility setting <code>transparent</code></p>\n</blockquote>\n<p>I feel like this would end up touching virtually everything for not that much benefit, though I could be wrong</p>",
        "id": 197152795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589207199
    },
    {
        "content": "<p>I'm completely against making the pretty-printer unfold definitions.  This is just going to cause lots and lots of confusion.  There is a reason we don't beta-reduce during pretty-printing.  However, having the elaborator unfold transparent definitions would be ok with me.</p>",
        "id": 197152930,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589207260
    },
    {
        "content": "<p><code>pp.beta</code> is one of my favorite options though...</p>",
        "id": 197153074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589207311
    }
]