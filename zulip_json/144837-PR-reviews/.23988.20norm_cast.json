[
    {
        "content": "<p>Currently there is a very long list of attributes being added starting at <a href=\"https://github.com/leanprover-community/mathlib/pull/988/files#diff-836b1338043521d5628c0a4b8832505dR357\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/988/files#diff-836b1338043521d5628c0a4b8832505dR357\">https://github.com/leanprover-community/mathlib/pull/988/files#diff-836b1338043521d5628c0a4b8832505dR357</a><br>\nDoes it make sense to move these to the respective files <code>real.lean</code> and <code>complex.lean</code> (or whatever they are). Of course some of these lemmas are in core, so then it's fine to keep them here. Do we want this tactic to depend on the complex numbers?</p>",
        "id": 165104082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557258224
    },
    {
        "content": "<p>Is it possible to have a syntax</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attributes</span> <span class=\"o\">[</span><span class=\"n\">norm_cast</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>?</p>",
        "id": 165107284,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557260515
    },
    {
        "content": "<p>you already have it</p>",
        "id": 165107335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557260534
    },
    {
        "content": "<p>remove the s and the second series of []</p>",
        "id": 165107347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557260546
    },
    {
        "content": "<p>Great! I think I would rather keep the attributes with the tactic, unless we want to start using the tactic earlier, i.e., before all the lemmas with the attributes are even defined.</p>",
        "id": 165108000,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557260961
    },
    {
        "content": "<p>I just used it for the first time! The goal was <code>0 &lt; ↑n + 1</code> where coercion goes to real numbers. <code>norm_cast, linarith</code> <span aria-label=\"victory\" class=\"emoji emoji-270c\" role=\"img\" title=\"victory\">:victory:</span></p>",
        "id": 165108605,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557261343
    },
    {
        "content": "<p>I can feel Rob is worried</p>",
        "id": 165108793,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557261460
    },
    {
        "content": "<p>he knows what is coming</p>",
        "id": 165108798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557261469
    },
    {
        "content": "<blockquote>\n<p>he knows what is coming</p>\n</blockquote>\n<p><code>linarith_mod_cast</code> bitte</p>",
        "id": 165108867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557261491
    },
    {
        "content": "<p>No, I think we can just chain tactics like you just did...</p>",
        "id": 165108893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557261509
    },
    {
        "content": "<p>Bad news is importing this kills all my other proofs</p>",
        "id": 165109238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557261742
    },
    {
        "content": "<p>I get deterministic timeout in proofs not using <code>norm_cast</code></p>",
        "id": 165109259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557261762
    },
    {
        "content": "<p>that used to type check instantaneously</p>",
        "id": 165109306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557261790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> What is your reason for keeping the attributes in this file?</p>",
        "id": 165112468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557264143
    },
    {
        "content": "<p>I don't really care either way... To me it just feels more natural to have them close the the lemma's if possible.</p>",
        "id": 165112521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557264179
    },
    {
        "content": "<p>I don't really mind either. Maybe the current setup is easier to modify, and helps to understand the role of the different attributes.</p>",
        "id": 165140890,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1557299878
    },
    {
        "content": "<p>Actually, I didn't even look at the imports. I don't think <code>tactic.norm_cast</code> should import any more than is necessary to define the tactic. Most of the attributes should be added when the lemmas are proved.</p>",
        "id": 165145712,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557305838
    },
    {
        "content": "<p>It would be silly if you needed to import <code>data.complex</code> in order to simplify <code>nat</code>-to-<code>int</code> casts.</p>",
        "id": 165145728,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557305863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span></p>",
        "id": 165145737,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557305880
    },
    {
        "content": "<p>Patrick, that must be caused by a transitive import. Do you get the same problem importing <code>data.complex.basic</code> instead of <code>norm_cast</code>?</p>",
        "id": 165145814,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1557305945
    },
    {
        "content": "<p>After all, <code>data.complex</code> is very ... <em>complex</em> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 165145816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557305947
    },
    {
        "content": "<p>I removed all the unnecessary imports from norm_cast.lean<br>\n<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> could you check if that solved the problem?</p>\n<p>They are two reasons why I had left these attributes in the norm_cast.lean file :<br>\n- compile time, now any modification in the file requires recompiling a lot of things<br>\n- clarity, you could see the general shape of the lemmas, and their different versions for different data types</p>\n<p>There's nothing much that can be done about the first point,<br>\nbut about the second, I could add a comment with a list of  \"typical\" norm_cast and simp_cast lemmas</p>",
        "id": 165160163,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1557320378
    },
    {
        "content": "<p>I should say that I didn't pull the branch. I copied the content of the tactic file into a new file in a project depending on an old version of mathlib. I have a real workflow issue here, and it was the same with <code>omega</code> and <code>cooper</code>. It's very hard to test a tactic until it actually is in mathlib (or can be dumped in a completely autonomous file)</p>",
        "id": 165187998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1557339968
    },
    {
        "content": "<p>Right now I registered lemmas like <code>complex.of_real_im</code> as elimination lemmas,<br>\nand lemmas like <code>rat.cast_mk_of_ne_zero</code> as compositionnal lemmas.<br>\nBut the fact is that, unlike more simple lemmas like <code>nat.cast_add</code>, these don't just move casts around, they also simplify things (for instance <code>complex.of_real_im</code> removes the projection).<br>\nDo you think that these lemmas should be applied by norm_cast, or should they be left to the simplifier?<br>\nMore generally, where do we draw the line between what is a norm_cast lemma and what should be left to simp?</p>",
        "id": 165257466,
        "sender_full_name": "Paul-Nicolas Madelaine",
        "timestamp": 1557412198
    },
    {
        "content": "<p>Ooh, I think <code>norm_cast</code> should do as much as possible. Because it's still a very small thing that it tries to do. But it tries to do it really well.</p>",
        "id": 165257604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412275
    },
    {
        "content": "<p>Simp tries to do a lot, and for that reason it's not popular to call simp half-way a proof.</p>",
        "id": 165257626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557412294
    },
    {
        "content": "<p>We were just discussing whether it would make sense to introduce a <code>cast_mode</code> or <code>mod_cast</code> tactic combinator. It would accept a list of tactics and normalize all casts between the steps.<br>\n<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> told me he's running into proofs in which <code>rw</code> and <code>norm_cast</code> lines alternate repeatedly.<br>\nI have to say I do not have any idea how the cast tactics are implemented ;)</p>",
        "id": 167282488,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1559647633
    }
]