[
    {
        "content": "<p>This sets up the basics of the new <code>norm_num</code>. It passes the basic tests, but I haven't benchmarked it yet.</p>",
        "id": 196054075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588429497
    },
    {
        "content": "<p>Thanks :-)</p>",
        "id": 196056270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588432847
    },
    {
        "content": "<p>So I've been benchmarking <code>norm_num</code> on Floris's solution to the pi approximation problem, and the results are... not good. I'm not running both versions side by side, but <code>pi_gt_31415</code> was remarked to run for 9 seconds, and now it takes 34 seconds. Many of the other scripts time out, and I'm still trying to figure out how to test them correctly in case something is going wrong.</p>\n<p>The question now is what to do about it. Should we move forward with it anyway? Most problems are not bottlenecked on large arithmetic. Alternatively, we could scope down the C++ <code>tactic.norm_num</code> to only include the \"hot path\" theorems on addition and multiplication of natural numbers and leave everything else for the mathlib version. Thoughts?</p>",
        "id": 196104973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588514876
    },
    {
        "content": "<p>That's much less bad than what I would have expected, just 3x slowdown.</p>",
        "id": 196105056,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515000
    },
    {
        "content": "<p>there are some minor algorithmic improvements over the C++ version, I'm not sure how much of that is showing</p>",
        "id": 196105126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515076
    },
    {
        "content": "<p>Note that we need to keep some functions like <code>mk_nat_val_ne_proof</code> anyhow for the equation compiler.  We can add functions for addition there as well.</p>",
        "id": 196105128,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515082
    },
    {
        "content": "<p>I'm also wondering whether it would be worthwhile to try Karatsuba multiplication. It would be nice to do an analysis on the cutoff where it becomes worthwhile in terms of proof length</p>",
        "id": 196105190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515158
    },
    {
        "content": "<p>Personally, I would say go for it.  We have more to gain by moving the algebraic hierarchy from core to mathlib than the slight performance loss here.  If somebody wants to do serious computation, they can probably wait a few months.</p>",
        "id": 196105191,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515158
    },
    {
        "content": "<blockquote>\n<p>Karatsuba multiplication</p>\n</blockquote>\n<p>Just how large are the numbers we are talking about here?</p>",
        "id": 196105204,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515198
    },
    {
        "content": "<p>probably up to 10^10</p>",
        "id": 196105208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515229
    },
    {
        "content": "<p>this is tiny by computer standards, but everything is more expensive when each bit costs a theorem application</p>",
        "id": 196105252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515258
    },
    {
        "content": "<p>Oh, so just 30 bits?  And that takes half a minute?</p>",
        "id": 196105269,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515266
    },
    {
        "content": "<p>something like <code>2 + 11482 / 8119 ≤ (5401 / 2923) ^ 2</code> takes about 3 seconds</p>",
        "id": 196105287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515297
    },
    {
        "content": "<p>that's a lie, let me get a real example</p>",
        "id": 196105345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515365
    },
    {
        "content": "<p>The old <code>norm_num.derive</code> takes 50ms on that \"example\".</p>",
        "id": 196105356,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515413
    },
    {
        "content": "<p>actually it's more like 6 seconds in situ, but almost instant (19ms) on its own. Hm...</p>",
        "id": 196105412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515486
    },
    {
        "content": "<p>And the new one takes 26ms.</p>",
        "id": 196105421,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515538
    },
    {
        "content": "<p>That's a 2x speed-up?</p>",
        "id": 196105425,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515546
    },
    {
        "content": "<p>benchmarking lean is so hard</p>",
        "id": 196105431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515563
    },
    {
        "content": "<p>Both tactics spend most of the time in the simplifier.</p>",
        "id": 196105432,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515566
    },
    {
        "content": "<p>And not just in the simplifier, <em>creating the damn simp set</em> takes most of the runtime, a few hundred milliseconds.</p>",
        "id": 196105479,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515617
    },
    {
        "content": "<p>ffs</p>",
        "id": 196105481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515627
    },
    {
        "content": "<p>Does <code>norm_num1</code> have the same behavior?</p>",
        "id": 196105497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515676
    },
    {
        "content": "<p>I believe it uses an empty simp set</p>",
        "id": 196105501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515684
    },
    {
        "content": "<p>Old and new <code>norm_num1</code> both take 50ms in total.</p>",
        "id": 196105543,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515727
    },
    {
        "content": "<p>well, if it's 50ms I'm not worried. 3 seconds is the problem</p>",
        "id": 196105547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515756
    },
    {
        "content": "<p>Ok, do you have some other small examples where the performance is very different?</p>",
        "id": 196105556,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515812
    },
    {
        "content": "<p>Here is the example I'm playing with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">pi</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">sqrt_two_add_series</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sqrt_two_add_series</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"bp\">_</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt_two_add_series_succ</span><span class=\"o\">],</span> <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_monotone_left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt_le_left</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h2</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sqrt_two_add_series_step_down&#39;</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">sqrt_two_add_series</span> <span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">sqrt_two_add_series</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sqrt_two_add_series_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_monotone_left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_sqrt_of_sqr_le</span> <span class=\"n\">h</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> currently we use the &quot;slow&quot; certificates (using real computation instead of nat computation),</span>\n<span class=\"cm\">  because the certificates for nat raise errors during type-checking -/</span>\n\n<span class=\"c1\">-- the following lemma takes about 9 seconds</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pi_gt_31415</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1415</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">pi_gt_sqrt_two_add_series</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_mul_of_div_le</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">le_sqrt_of_sqr_le</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">11482</span><span class=\"bp\">/</span><span class=\"mi\">8119</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">5401</span><span class=\"bp\">/</span><span class=\"mi\">2923</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">2348</span><span class=\"bp\">/</span><span class=\"mi\">1197</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">11367</span><span class=\"bp\">/</span><span class=\"mi\">5711</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">25705</span><span class=\"bp\">/</span><span class=\"mi\">12868</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">23235</span><span class=\"bp\">/</span><span class=\"mi\">11621</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sqrt_two_add_series</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">timetac</span> <span class=\"s2\">&quot;norm_num&quot;</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">norm_num1</span><span class=\"o\">]},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196105620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515880
    },
    {
        "content": "<p>For example, this takes 330ms (of which 300ms are spent on <code>mk_app</code>...):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">999999999</span><span class=\"bp\">*</span><span class=\"mi\">9999999999</span> <span class=\"bp\">=</span> <span class=\"mi\">9999999999999999</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">norm_num1</span>\n</code></pre></div>",
        "id": 196105621,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515881
    },
    {
        "content": "<p>I include the full context because it seems to be playing a role in the runtime (unfortunately...)</p>",
        "id": 196105635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515933
    },
    {
        "content": "<p>Your example doesn't build at the moment (specific_limits is broken atm).</p>",
        "id": 196105640,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588515957
    },
    {
        "content": "<p>fixed</p>",
        "id": 196105681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588515974
    },
    {
        "content": "<p>/me is compiling half of mathlib <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span></p>",
        "id": 196105760,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588516137
    },
    {
        "content": "<p>This requires slightly less than half of mathlib and is also quite slow:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">23235</span> <span class=\"bp\">/</span> <span class=\"mi\">11621</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">6283</span> <span class=\"bp\">/</span> <span class=\"mi\">2000</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">25705</span> <span class=\"bp\">/</span> <span class=\"mi\">12868</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">23235</span> <span class=\"bp\">/</span> <span class=\"mi\">11621</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">23235</span> <span class=\"bp\">/</span> <span class=\"mi\">11621</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">11367</span> <span class=\"bp\">/</span> <span class=\"mi\">5711</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">25705</span> <span class=\"bp\">/</span> <span class=\"mi\">12868</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">25705</span> <span class=\"bp\">/</span> <span class=\"mi\">12868</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2348</span> <span class=\"bp\">/</span> <span class=\"mi\">1197</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">11367</span> <span class=\"bp\">/</span> <span class=\"mi\">5711</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">11367</span> <span class=\"bp\">/</span> <span class=\"mi\">5711</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">5401</span> <span class=\"bp\">/</span> <span class=\"mi\">2923</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2348</span> <span class=\"bp\">/</span> <span class=\"mi\">1197</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2348</span> <span class=\"bp\">/</span> <span class=\"mi\">1197</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">11482</span> <span class=\"bp\">/</span> <span class=\"mi\">8119</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">5401</span> <span class=\"bp\">/</span> <span class=\"mi\">2923</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">5401</span> <span class=\"bp\">/</span> <span class=\"mi\">2923</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">11482</span> <span class=\"bp\">/</span> <span class=\"mi\">8119</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">11482</span> <span class=\"bp\">/</span> <span class=\"mi\">8119</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 196105810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516202
    },
    {
        "content": "<p>36 seconds</p>",
        "id": 196105821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516233
    },
    {
        "content": "<p>and if I replace <code>real</code> with <code>A</code> then it takes 11ms <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 196105892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516369
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">13240</span><span class=\"n\">ms</span>    <span class=\"mi\">93</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span>\n</code></pre></div>\n\n\n<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 196105904,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588516389
    },
    {
        "content": "<p>HOW?? It's like a zombie that refuses to die</p>",
        "id": 196105959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516469
    },
    {
        "content": "<p>Your last example takes 1.27s on my crappy laptop, what are your imports?</p>",
        "id": 196105986,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588516498
    },
    {
        "content": "<p>same as before, <code>data.real.pi</code></p>",
        "id": 196105995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516521
    },
    {
        "content": "<p>i.e. everything</p>",
        "id": 196105997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516530
    },
    {
        "content": "<p>With only <code>data.real.basic</code> imported, it's 10x faster. <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 196106037,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588516563
    },
    {
        "content": "<p>Of course this is to be expected, given the difference between <code>real</code> and <code>A</code> it's obviously type class inference taking up the time, and so more mathlib = more pain</p>",
        "id": 196106050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516595
    },
    {
        "content": "<p>Interesting: with <code>data.real.pi</code> I get <code>12961ms    84.1%   tactic.mk_app</code>, but with <code>data.real.basic</code> it's much better: <code>425ms    34.3%   tactic.mk_app</code></p>",
        "id": 196106065,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588516637
    },
    {
        "content": "<p>I'm wondering how I could identify which calls to <code>mk_app</code> are taking up the time. If I made <code>def mk_app' := mk_app</code> and then replace all calls to <code>mk_app</code> to <code>mk_app'</code>, I hope it will show up in the profiler</p>",
        "id": 196106198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516889
    },
    {
        "content": "<p>Did you know that <code>expr.of_nat</code> uses <code>mk_app</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">13804</span><span class=\"n\">ms</span>    <span class=\"mi\">87</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n</code></pre></div>",
        "id": 196106247,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1588516942
    },
    {
        "content": "<p>ugh, yes</p>",
        "id": 196106249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516951
    },
    {
        "content": "<p>it shouldn't be hard to make a <code>instance_cache</code> version of <code>expr.of_nat</code></p>",
        "id": 196106259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516974
    },
    {
        "content": "<p>I'll try that</p>",
        "id": 196106261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588516982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks a lot for diving in to this!</p>",
        "id": 196140831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588569528
    },
    {
        "content": "<p>What is the status of this PR? Do you need help with fixing mathlib? Or is the main concern the slowdown?</p>",
        "id": 196213743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588613523
    },
    {
        "content": "<p>Is this one of those tactics that could have a <code>norm_num?</code> version that outputs a reasonably short certificate that is faster to check than regenerating the proof?</p>",
        "id": 196213831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588613571
    },
    {
        "content": "<p>I'm now going to benchmark how long it takes to build this PR with <code>lean-3.10.0</code>.</p>",
        "id": 196306650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588685034
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">time</span> nice leanpkg build <span class=\"c1\">### building the norm_num branch</span>\nreal    43m2.154s\nuser    531m57.718s\nsys     7m33.007s\n</code></pre></div>",
        "id": 196314145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588688491
    },
    {
        "content": "<p>Seems to be a speedup (-;</p>",
        "id": 196314243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588688527
    },
    {
        "content": "<p>This is great, the expected slowdowns are speedups and expected speedups are slowdowns</p>",
        "id": 196314986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1588688838
    },
    {
        "content": "<p>In maths when the unexpected happens it usually means that you're about to learn something interesting</p>",
        "id": 196317389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588689808
    },
    {
        "content": "<p>Is the speedup exciting enough to get <code>norm_num</code> out of core in the next release?</p>",
        "id": 196727728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588828165
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- the following lemma takes about 9 seconds</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pi_gt_31415</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1415</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">pi_gt_sqrt_two_add_series</span> <span class=\"mi\">6</span><span class=\"o\">),</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_mul_of_div_le</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">le_sqrt_of_sqr_le</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_sub</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">11482</span><span class=\"bp\">/</span><span class=\"mi\">8119</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">5401</span><span class=\"bp\">/</span><span class=\"mi\">2923</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">2348</span><span class=\"bp\">/</span><span class=\"mi\">1197</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">11367</span><span class=\"bp\">/</span><span class=\"mi\">5711</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">25705</span><span class=\"bp\">/</span><span class=\"mi\">12868</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sqrt_two_add_series_step_up&#39;</span> <span class=\"o\">(</span><span class=\"mi\">23235</span><span class=\"bp\">/</span><span class=\"mi\">11621</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sqrt_two_add_series</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">parsing</span> <span class=\"n\">took</span> <span class=\"mi\">65</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"n\">ms</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">of</span> <span class=\"n\">pi_gt_31415</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">151</span><span class=\"n\">ms</span>\n<span class=\"n\">decl</span> <span class=\"n\">post</span><span class=\"bp\">-</span><span class=\"n\">processing</span> <span class=\"n\">of</span> <span class=\"n\">pi_gt_31415</span> <span class=\"n\">took</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00408</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">of</span> <span class=\"n\">pi_gt_31415</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">14</span><span class=\"n\">s</span>\n</code></pre></div>\n\n\n<p>From 9 seconds to 1.14 with the new <code>norm_num</code>!</p>",
        "id": 197006333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589050259
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- the following lemma took about 15 seconds</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pi_gt_3141592</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">141592</span>  <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"c1\">-- elaboration of pi_gt_3141592 took 3.17s</span>\n\n<span class=\"c1\">-- the following lemma took about 19 seconds</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pi_lt_3141593</span> <span class=\"o\">:</span> <span class=\"n\">pi</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">141593</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"c1\">-- elaboration of pi_lt_3141593 took 3.52s</span>\n</code></pre></div>",
        "id": 197006408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589050428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.232589.20norm_num/near/196213831\" title=\"#narrow/stream/144837-PR-reviews/topic/.232589.20norm_num/near/196213831\">said</a>:</p>\n<blockquote>\n<p>Is this one of those tactics that could have a <code>norm_num?</code> version that outputs a reasonably short certificate that is faster to check than regenerating the proof?</p>\n</blockquote>\n<p>Not particularly. If you know a way to prove correctness of multiplication faster than evaluating it, I'd like to know (I think this is still an open problem). For non-primality there are efficient certificates, of course, but <code>norm_num</code> already generates short proofs when it can (on the assumption that the corresponding VM functions are fast enough that their contribution is negligible). The only case where this is probably not true is in non-primality of large numbers, since the VM does the search for a factor using trial division, which is not good for large numbers.</p>",
        "id": 197006842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589051071
    },
    {
        "content": "<p>There are also short certificates for prime numbers but they are complicated and don't really pay off until you get really large</p>",
        "id": 197006856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589051117
    },
    {
        "content": "<p>I guess it is time to move these statements about the digits of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span></span></span></span> to mathlib, then! (They used to be in a gist as they were too slow for mathlib, right?)</p>",
        "id": 197006920,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589051196
    },
    {
        "content": "<p>right</p>",
        "id": 197006922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589051204
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2641\" title=\"https://github.com/leanprover-community/mathlib/issues/2641\">#2641</a></p>",
        "id": 197010805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589055656
    },
    {
        "content": "<p>I'm really excited that this PR is now on the merge queue!</p>",
        "id": 197012555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589057993
    },
    {
        "content": "<p>Once it's merged we can have a big PR moving lots of algebra out of core and into mathlib</p>",
        "id": 197012614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589058014
    }
]