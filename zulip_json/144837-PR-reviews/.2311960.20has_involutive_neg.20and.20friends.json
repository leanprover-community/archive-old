[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11960\">#11960</a> introduces a <code>has_involutive_neg</code> typeclass modeled after <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_involutive_star\">docs#has_involutive_star</a>, that allows us to merge together all our <code>neg_neg</code> lemmas (and same for <code>inv_inv</code>).</p>\n<p>I'm worried this will go stale quite quickly, as a lot of commonly-used lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inv\">docs#inv</a>_inv₀ have been made redundant and removed.</p>\n<p>Do these new typeclasses seem reasonable?</p>",
        "id": 271803027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644831589
    },
    {
        "content": "<p>You're missing <code>has_distrib_neg (set α)</code>. cf <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.neg_smul\">docs#set.neg_smul</a> although we seem to be missing the <code>mul</code> version?</p>",
        "id": 271806507,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644833664
    },
    {
        "content": "<p>If the lemmas aren't already there then I'd lean towards leaving that instance to a follow-up</p>",
        "id": 271807298,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644834154
    },
    {
        "content": "<p>I only added the instances for <code>unitary</code>, <code>special_linear_group</code>, and <code>GL_pos</code> as part of that PR (where there were no existing lemmas) because they were trivial applications of <code>subtype.ext</code>.</p>",
        "id": 271807367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644834201
    },
    {
        "content": "<p>However that points out the shortcomings of <code>has_distrib_neg</code>: it only talks about distributivity of <code>mul</code>, not of <code>smul</code>.</p>",
        "id": 271807477,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644834245
    },
    {
        "content": "<p>Yes, <code>neg_smul</code> I very deliberately left to a follow-up PR</p>",
        "id": 271807518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644834271
    },
    {
        "content": "<p>What's the plan?</p>",
        "id": 271807546,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1644834287
    },
    {
        "content": "<p>\"Snipe <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> with generalization ideas and leave them to explore those after my PR is merged\" seems like a workable plan right now ;)</p>",
        "id": 271807626,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644834326
    },
    {
        "content": "<p>My plan stopped at \"<code>has_distrib_neg</code> will deduplicate around 25 lemmas\", and accidentally expanded to \"<code>has_involutive_neg</code> will deduplicate another 20 more\"</p>",
        "id": 271807749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644834390
    },
    {
        "content": "<p>The one downside of this PR is that <a href=\"https://github.com/leanprover-community/mathlib/pull/11960#discussion_r806436692\">it means <code>simp</code> now times out when trying to find a 3x3 determinant</a>. <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span>, <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>, do we care about that? We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_fin_three\">docs#matrix.det_fin_three</a> anyway.</p>",
        "id": 271956212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644922268
    },
    {
        "content": "<p>I don't think <code>simp</code> is the best tool to solve this problem, so as long as this doesn't indicate a <code>simp</code> loop (it doesn't, right?), I wouldn't block the PR on that.</p>",
        "id": 271957519,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644922959
    },
    {
        "content": "<p>Does the <code>simp only</code> form in the comments still work, or does that also time out now?</p>",
        "id": 271957537,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1644922972
    },
    {
        "content": "<p>I think that's not good. That sounds like a typeclass search is happening too often</p>",
        "id": 271957722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644923069
    },
    {
        "content": "<p>could someone summarize the relevant changes? Is <code>neg_neg</code> using an extra typeclass assumption now?</p>",
        "id": 271957763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644923103
    },
    {
        "content": "<p>the quick fix is to not make the general <code>neg_neg</code> a simp lemma and instead reinstate the original one just for simp</p>",
        "id": 271957835,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644923149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311960.20has_involutive_neg.20and.20friends/near/271957763\">said</a>:</p>\n<blockquote>\n<p>could someone summarize the relevant changes? Is <code>neg_neg</code> using an extra typeclass assumption now?</p>\n</blockquote>\n<p><code>neg_neg</code> now has a dedicated typeclass, and there is a similar typeclass that extends it for (<code>neg_mul</code>, <code>mul_neg</code>, <code>neg_mul_neg</code>, ...)</p>",
        "id": 271958428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644923465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311960.20has_involutive_neg.20and.20friends/near/271957537\">said</a>:</p>\n<blockquote>\n<p>Does the <code>simp only</code> form in the comments still work, or does that also time out now?</p>\n</blockquote>\n<p>Yes, that still works</p>",
        "id": 271958922,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644923711
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311960.20has_involutive_neg.20and.20friends/near/271957519\">said</a>:</p>\n<blockquote>\n<p>I don't think <code>simp</code> is the best tool to solve this problem, so as long as this doesn't indicate a <code>simp</code> loop (it doesn't, right?), I wouldn't block the PR on that.</p>\n</blockquote>\n<p>I assume it doesn't indicate a loop, because there's no such problem on the 2x2 matrix</p>",
        "id": 271959696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644924150
    },
    {
        "content": "<p>I've gone ahead and changed it to use the <code>simp only</code> instead. I have no real idea how to debug the timeout - <code>trace.simplify.rewrites</code> doesn't seem to be showing anything obvious</p>",
        "id": 271960320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644924526
    },
    {
        "content": "<p>Does <code>squeeze_simp</code> give you the same set of rewrites?</p>",
        "id": 271960567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644924666
    },
    {
        "content": "<p>you can increase the timeout or run it in the console (which has infinite timeout) to see it complete</p>",
        "id": 271960645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644924713
    },
    {
        "content": "<p>That's <code>-T</code>, right?</p>",
        "id": 271960983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644924937
    },
    {
        "content": "<p>Oh sorry, you mean in the console I don't even need to pass the argument because the default is no limit</p>",
        "id": 271961087,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644924991
    },
    {
        "content": "<p>The output is pretty similar - here's what's in the comment at the moment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">det_succ_row_zero</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">cons_append</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">fin.default_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_zero</span><span class=\"o\">,</span> <span class=\"n\">cons_vec_bit0_eq_alt0</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">cons_val_one</span><span class=\"o\">,</span>\n    <span class=\"n\">cons_vec_alt0</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_succ_above_one</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_succ</span><span class=\"o\">,</span> <span class=\"n\">finset.univ_unique</span><span class=\"o\">,</span> <span class=\"n\">minor_apply</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span>\n    <span class=\"n\">fin.zero_succ_above</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_zero_eq_one</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_succ_above_zero</span><span class=\"o\">,</span> <span class=\"n\">nat.neg_one_sq</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">cons_val_succ</span><span class=\"o\">,</span> <span class=\"n\">det_fin_zero</span><span class=\"o\">,</span> <span class=\"n\">head_cons</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">],</span>\n</code></pre></div>\n<p>vs with this PR:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">det_succ_row_zero</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">minor_apply</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_zero_eq_one</span><span class=\"o\">,</span> <span class=\"n\">cons_val_one</span><span class=\"o\">,</span>\n    <span class=\"n\">head_cons</span><span class=\"o\">,</span> <span class=\"n\">fintype.univ_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_eq_subtype_mk</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_zero</span><span class=\"o\">,</span> <span class=\"n\">det_fin_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">finset.sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">fin.zero_succ_above</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_succ_above_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">cons_val_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_succ_above_one</span><span class=\"o\">,</span> <span class=\"n\">nat.neg_one_sq</span><span class=\"o\">],</span>\n</code></pre></div>",
        "id": 271961373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644925188
    },
    {
        "content": "<p>does that <code>simp only</code> run with regular timeout?</p>",
        "id": 271961439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644925210
    },
    {
        "content": "<p>Yes</p>",
        "id": 271961450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644925215
    },
    {
        "content": "<p>(and very quickly too)</p>",
        "id": 271961473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644925231
    },
    {
        "content": "<p>so the problem is likely in the failed rewrites</p>",
        "id": 271961481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644925243
    },
    {
        "content": "<p>there is a trace option for that too</p>",
        "id": 271961496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644925256
    },
    {
        "content": "<p><code>set_option trace.simp_lemmas.failure true</code></p>",
        "id": 271961520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644925271
    },
    {
        "content": "<p>you can probably do it on the 2x2 assuming that you get a similar simp only list</p>",
        "id": 271961585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644925317
    },
    {
        "content": "<p>Do you have any ideas about why the simp only lists are different?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -1,24 +1,26 @@</span><span class=\"w\"></span>\n<span class=\"gi\">+cons_append</span><span class=\"w\"></span>\n<span class=\"w\"> </span>cons_val_one<span class=\"w\"></span>\n<span class=\"w\"> </span>cons_val_succ<span class=\"w\"></span>\n<span class=\"w\"> </span>cons_val_zero<span class=\"w\"></span>\n<span class=\"gi\">+cons_vec_alt0</span><span class=\"w\"></span>\n<span class=\"gi\">+cons_vec_bit0_eq_alt0</span><span class=\"w\"></span>\n<span class=\"w\"> </span>det_fin_zero<span class=\"w\"></span>\n<span class=\"w\"> </span>det_succ_row_zero<span class=\"w\"></span>\n<span class=\"w\"> </span>fin.coe_succ<span class=\"w\"></span>\n<span class=\"w\"> </span>fin.coe_zero<span class=\"w\"></span>\n<span class=\"gd\">-fin.mk_eq_subtype_mk</span><span class=\"w\"></span>\n<span class=\"gd\">-fin.mk_zero</span><span class=\"w\"></span>\n<span class=\"gi\">+fin.default_eq_zero</span><span class=\"w\"></span>\n<span class=\"w\"> </span>finset.sum_singleton<span class=\"w\"></span>\n<span class=\"gi\">+finset.univ_unique</span><span class=\"w\"></span>\n<span class=\"w\"> </span>fin.succ_succ_above_one<span class=\"w\"></span>\n<span class=\"w\"> </span>fin.succ_succ_above_zero<span class=\"w\"></span>\n<span class=\"w\"> </span>fin.succ_zero_eq_one<span class=\"w\"></span>\n<span class=\"w\"> </span>fin.sum_univ_succ<span class=\"w\"></span>\n<span class=\"gd\">-fintype.univ_of_subsingleton</span><span class=\"w\"></span>\n<span class=\"w\"> </span>fin.zero_succ_above<span class=\"w\"></span>\n<span class=\"w\"> </span>head_cons<span class=\"w\"></span>\n<span class=\"w\"> </span>minor_apply<span class=\"w\"></span>\n<span class=\"w\"> </span>mul_one<span class=\"w\"></span>\n<span class=\"w\"> </span>nat.neg_one_sq<span class=\"w\"></span>\n<span class=\"w\"> </span>neg_mul<span class=\"w\"></span>\n<span class=\"w\"> </span>one_mul<span class=\"w\"></span>\n<span class=\"w\"> </span>pow_one<span class=\"w\"></span>\n<span class=\"w\"> </span>pow_zero<span class=\"w\"></span>\n</code></pre></div>",
        "id": 271962119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644925648
    },
    {
        "content": "<p><del>docs#finset.univ_unique probably isn't simp any more</del></p>",
        "id": 271962320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644925775
    },
    {
        "content": "<p>Here's the diff in the <code>rewrite_failures</code> output: <a href=\"/user_uploads/3121/SoTONud-9pqKs3y8SoB_ormr/traces.diff\">traces.diff</a></p>",
        "id": 271962396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644925805
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311960.20has_involutive_neg.20and.20friends/near/271962320\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.univ_unique\">docs#finset.univ_unique</a> probably isn't simp any more</p>\n</blockquote>\n<p>it still is and you don't seem to have touched it in your PR</p>",
        "id": 271962588,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1644925929
    },
    {
        "content": "<p>I think the <code>simp only</code> line in the comment is out of date. Here's the regenerated <code>simp only</code> list on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">matrix.det_succ_row_zero</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_succ</span><span class=\"o\">,</span> <span class=\"n\">cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">minor_apply</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_zero_eq_one</span><span class=\"o\">,</span> <span class=\"n\">cons_val_one</span><span class=\"o\">,</span>\n  <span class=\"n\">head_cons</span><span class=\"o\">,</span> <span class=\"n\">fintype.univ_of_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_eq_subtype_mk</span><span class=\"o\">,</span> <span class=\"n\">fin.mk_zero</span><span class=\"o\">,</span> <span class=\"n\">det_fin_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n  <span class=\"n\">finset.sum_singleton</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">fin.zero_succ_above</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_succ_above_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">cons_val_succ</span><span class=\"o\">,</span> <span class=\"n\">fin.succ_succ_above_one</span><span class=\"o\">,</span> <span class=\"n\">nat.neg_one_sq</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 271962635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644925968
    },
    {
        "content": "<p>Which as far as I can tell is identical</p>",
        "id": 271962687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644926004
    },
    {
        "content": "<p>Notably, <code>squeeze_simp</code> also times out on master</p>",
        "id": 271962793,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644926050
    },
    {
        "content": "<p>So I think this might just be really close to the timeout threshold already</p>",
        "id": 271962805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644926060
    },
    {
        "content": "<p><code>try_for 53000 { simp [matrix.det_succ_row_zero, fin.sum_univ_succ] },</code> times out on the 3x3 case on master (54000 is ok)</p>",
        "id": 271963142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644926272
    },
    {
        "content": "<p>what about on the PR? (Increase the timeout using <code>set_option timeout</code> and then play with <code>try_for N</code>)</p>",
        "id": 271963357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644926399
    },
    {
        "content": "<p>It looks like <code>try_for</code> overrides the default timeout?</p>",
        "id": 271963746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644926588
    },
    {
        "content": "<p>So actually, any slow proof can be fixed by just locally using <code>try_for</code></p>",
        "id": 271963759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644926601
    },
    {
        "content": "<p><code>136000</code> fails, <code>137000</code> succeeds - so about 2.5x slower with this PR</p>",
        "id": 271963893,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644926667
    },
    {
        "content": "<p>can you capture and diff the rewrite failure output? My main worry is that simp is 2.5x slower across the board</p>",
        "id": 271964085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644926798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311960.20has_involutive_neg.20and.20friends/near/271962396\">said</a>:</p>\n<blockquote>\n<p>Here's the diff in the <code>rewrite_failures</code> output: <a href=\"/user_uploads/3121/SoTONud-9pqKs3y8SoB_ormr/traces.diff\">traces.diff</a></p>\n</blockquote>\n<p>I did so here</p>",
        "id": 271964126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644926833
    },
    {
        "content": "<p>and determinant calculation is just an especially bad case because of all the multiplication and subtraction</p>",
        "id": 271964133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644926837
    },
    {
        "content": "<p>I'll try tracing typeclass instances at the same time</p>",
        "id": 271964365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644926978
    },
    {
        "content": "<p>I don't see anything especially incriminating in the rewrite failure list, if anything there are fewer lemmas to look at. So it's probably the typeclasses</p>",
        "id": 271964632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1644927142
    },
    {
        "content": "<p>Weirdly I can't seem to get output from both traces at the same time.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.simp_lemmas.failure</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>only traces the second</p>",
        "id": 271964903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644927298
    },
    {
        "content": "<p>Either way: on a 2x2 matrix, there are <code>5352</code> failures to find <code>division_ring a</code>, whereas on the PR there are <code>139127</code> failures to find the same</p>",
        "id": 271965135,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644927436
    },
    {
        "content": "<p>I've tried adjusting the priority of <code>has_involutive_inv.to_has_inv</code> to see if it helps</p>",
        "id": 271966032,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644927932
    },
    {
        "content": "<p>Removing <code>group.to_has_inv</code> and <code>group_with_zero.to_has_inv</code> instead might also help</p>",
        "id": 271966120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644927972
    },
    {
        "content": "<p>I agree that simp isn't the best tool for proving this lemma. But it's a good canary in the coal mine -- a first time user of mathlib might reach for simp to prove this, and it'd be unfortunate if it couldn't.</p>",
        "id": 271966811,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1644928353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311960.20has_involutive_neg.20and.20friends/near/271966032\">said</a>:</p>\n<blockquote>\n<p>I've tried adjusting the priority of <code>has_involutive_inv.to_has_inv</code> to see if it helps</p>\n</blockquote>\n<p>This seems to have solved the problem</p>",
        "id": 272030445,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644955442
    },
    {
        "content": "<p>When I was a first time user of mathlib I'd reach for <code>simp</code> to solve <em>everything</em></p>",
        "id": 272091519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645003766
    }
]