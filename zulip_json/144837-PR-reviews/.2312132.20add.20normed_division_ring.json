[
    {
        "content": "<p>Any new ideas? I don't even know how to begin troubleshooting.</p>",
        "id": 273237711,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645800391
    },
    {
        "content": "<p>Should we just bump the threshold?</p>",
        "id": 273239308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645801131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312132.20add.20normed_division_ring/near/272877090\">said</a>:</p>\n<blockquote>\n<p>okay, I got it. I just needed 5GB of memory. Should I post the output here?</p>\n</blockquote>\n<p>Note that the server started by vscode <a href=\"https://github.com/leanprover-community/lean/blob/c6f789e73ca072c0f9ad9add96957c910fca802e/src/shell/lean.cpp#L168-L170\">appears to only use 1 GiB</a></p>",
        "id": 273240219,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645801483
    },
    {
        "content": "<p>This PR seems innocent. The linter fails because you're adding a type-class along one of the longest branches in the type-class hierarchy.<br>\nSo bumping the threshold seems fine here.</p>",
        "id": 273240591,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645801635
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312132.20add.20normed_division_ring/near/272929025\">said</a>:</p>\n<blockquote>\n<p>Half of the instance search is because of the subgoal <code>has_continuous_smul ℝ β</code> from the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_add_group.path_connected\">docs#topological_add_group.path_connected</a> instance.  It might be worth a try to swap the last two arguments there so that it searches for <code>toplogical_add_group β</code> first.</p>\n</blockquote>\n<p>I'll take a look if that improves anything.</p>",
        "id": 273240727,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645801685
    },
    {
        "content": "<p>It would be need if <a href=\"https://github.com/leanprover-community/lean/blob/65ad4ffdb3abac75be748554e3cbe990fb1c6500/src/util/interrupt.cpp#L15\"><code>g_heartbeat</code></a> were exposed somehow by a variant of <code>try_for</code> that returned <code>option (prod nat T)</code>, where if the try_for succeeds it returns how long it actually took</p>",
        "id": 273241839,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645802272
    },
    {
        "content": "<p>That way you could do <code>(ret, count) ← try_for (threshold*k)</code> then include <code>count</code> in the error message <code>if threshold &lt; count</code></p>",
        "id": 273242028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645802365
    },
    {
        "content": "<p><del>Bumping from 15000 to 25000 seems to just result in errors downstream</del> Nevermind, these are just in <code>nolints.txt</code></p>",
        "id": 273242281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645802501
    },
    {
        "content": "<p>(tested with <code>#lint_all only fails_quickly'</code> where <code>fails_quickly'</code> is just a copy of <code>fails_quickly</code> with a different timeout)</p>",
        "id": 273242375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645802544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312132.20add.20normed_division_ring/near/272929025\">said</a>:</p>\n<blockquote>\n<p>Half of the instance search is because of the subgoal <code>has_continuous_smul ℝ β</code> from the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_add_group.path_connected\">docs#topological_add_group.path_connected</a> instance.  It might be worth a try to swap the last two arguments there so that it searches for <code>toplogical_add_group β</code> first.</p>\n</blockquote>\n<p>I changed the order in <a href=\"https://github.com/leanprover-community/mathlib/tree/lower_fails_quickly\">branch#lower_fails_quickly</a>, but the <code>fails_quickly</code> check needs basically the same number of steps on that branch and master branch.</p>",
        "id": 273254057,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645808226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312132.20add.20normed_division_ring/near/273242375\">said</a>:</p>\n<blockquote>\n<p>(tested with <code>#lint_all only fails_quickly'</code> where <code>fails_quickly'</code> is just a copy of <code>fails_quickly</code> with a different timeout)</p>\n</blockquote>\n<p>If you only want to check a single declaration, you can save some time by doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"n\">d</span> <span class=\"bp\">←</span> <span class=\"n\">get_decl</span> <span class=\"bp\">`</span><span class=\"n\">prod.nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">fails_quickly</span> <span class=\"mi\">15000</span> <span class=\"n\">d</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">trace</span>\n</code></pre></div>",
        "id": 273254236,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645808302
    },
    {
        "content": "<p>Shall we just increase the timeout then? This PR has picked up some conflicts in the meantime</p>",
        "id": 274065732,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646356734
    },
    {
        "content": "<p>Thoughts?</p>",
        "id": 275085674,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647074841
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/pull/12675\">#12675</a> for a related issue.</p>",
        "id": 275269654,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647278485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  any idea why <code>normed_division_ring</code> also creates such huge type class search problems? Is there a suitable fix, like lowering the instance priority? Or does this just mean I should abandon this as a typeclass (which seems a shame)?</p>",
        "id": 275602235,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647485685
    },
    {
        "content": "<p>actually, I should have merged master first before I asked. Maybe CI will be okay on this branch now that <a href=\"https://github.com/leanprover-community/mathlib/pull/12675\">#12675</a> is in.</p>",
        "id": 275608199,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647493916
    },
    {
        "content": "<p>And indeed, that seemed to do the trick!</p>",
        "id": 275615522,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1647502474
    },
    {
        "content": "<p>Indeed, thanks!</p>",
        "id": 275649532,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1647522615
    }
]