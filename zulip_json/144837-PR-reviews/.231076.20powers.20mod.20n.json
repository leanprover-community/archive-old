[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> Can you explain why you want <code>n</code> to be a <code>pnat</code> in your assumption <code>hg</code>? Because as far as I can see you are coercing <code>n</code> to a <code>nat</code> almost everywhere.</p>",
        "id": 166345996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558604321
    },
    {
        "content": "<p>The main point is that <code>zmod n</code> needs <code>n : pnat</code>.  You could refactor things so some parts of the story work with nat, but the interaction with <code>zmod</code> is really the main point.</p>",
        "id": 166346309,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558604663
    },
    {
        "content": "<p>I was thinking about defining a <code>zmod' n</code> such that <code>zmod' (n+1) = zmod (n+1)</code> and <code>zmod' 0 = int</code>; this would unify a lot of your finite/infinite stuff</p>",
        "id": 166346445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558604825
    },
    {
        "content": "<p>Also, I think you can define the dihedral group construction over any (abelian?) group. That's another way to reduce the duplication</p>",
        "id": 166346523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558604900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> Would it be an idea to use <code>(i : ℕ)</code> in the definition of <code>pow_mod</code>. And then in fact, you can leave out that definition, and prove a bunch of lemmas about <code>foo ^ (i : ℕ)</code>. That way you also have nice notation.</p>",
        "id": 166346651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558605045
    },
    {
        "content": "<p>You will always need the type ascription</p>",
        "id": 166346692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605110
    },
    {
        "content": "<p>Returning to the <code>n : ℕ+</code> assumption. I think that lemmas that don't need the positivity assumption should be proved without it. Someone will thank you for including that edge case.</p>",
        "id": 166346697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558605116
    },
    {
        "content": "<p>Yes, you can certainly make everything much more general.  But part of my motivation comes from formalising some early undergraduate material, which I think is useful for expository purposes.  I don't want to wrap that in too many layers of additional abstraction.</p>",
        "id": 166346698,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558605118
    },
    {
        "content": "<blockquote>\n<p>You will always need the type ascription</p>\n</blockquote>\n<p>And you will have readable notation.</p>",
        "id": 166346743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558605125
    },
    {
        "content": "<p>I'm not saying it's a bad idea, but keep this in mind - there is no way to infer the coercion</p>",
        "id": 166346758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605152
    },
    {
        "content": "<p>Alternative: define an instance <code>has_pow M (zmod n)</code>?</p>",
        "id": 166346768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558605176
    },
    {
        "content": "<p>that's what I thought Neil did</p>",
        "id": 166346785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605192
    },
    {
        "content": "<p>No, he just uses the function.</p>",
        "id": 166346855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558605251
    },
    {
        "content": "<p>Having <code>zmod'</code> will help with the edge case, especially once you get to more abstract group theory</p>",
        "id": 166346876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605283
    },
    {
        "content": "<p>I'm not keen on writing <code>i.val</code> as <code>i : nat</code> for <code>i : zmod n</code>, because this coercion does not preserve any useful structure.</p>",
        "id": 166346908,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558605323
    },
    {
        "content": "<p>But it does, in this case</p>",
        "id": 166346924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605346
    },
    {
        "content": "<p>the fact that <code>zmod'</code> is a type defined by cases will make some concrete stuff on it a bit weird, but as long as you just need that it's a group or something it should be useful</p>",
        "id": 166346976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605378
    },
    {
        "content": "<p>alternatively it could literally be the abstract definition - <code>zmod' n = int / span {n}</code></p>",
        "id": 166347021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605446
    },
    {
        "content": "<p>this is computationally less efficient than <code>zmod</code>, but as long as the other one is available it might be useful to have both</p>",
        "id": 166347098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605511
    },
    {
        "content": "<p>I am also not keen on having <code>has_pow M (zmod n)</code>, because the natural translation into ordinary mathematical language is a false statement.</p>",
        "id": 166347122,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558605546
    },
    {
        "content": "<p>We also have <code>has_div</code> on things where it's false...</p>",
        "id": 166347222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558605639
    },
    {
        "content": "<p>it's <code>has_pow</code> not <code>has_lawful_pow</code></p>",
        "id": 166347223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605640
    },
    {
        "content": "<p>Did you know that there is a coe from <code>rat</code> to <code>Z/3Z</code>?</p>",
        "id": 166347280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605720
    },
    {
        "content": "<p>that's about the same level of questionable</p>",
        "id": 166347330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558605740
    },
    {
        "content": "<p>OK.  I will experiment with these suggestions.</p>",
        "id": 166347383,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558605835
    },
    {
        "content": "<p>Neil is thinking in a very similar way to the way that I started thinking when I wanted to write Lean code which I could show to undergraduates. One can argue that a main goal, when doing this, is to be able to write Lean code which looks as similar as possible to what undergraduates write on paper. It turns out that mathematicians on paper write a complex blend of set theory and type theory, depending on what is convenient, and have a complex system of notational overloading and implicit casts, which a system like Lean finds hard to imitate, in places. Lean 4 will have this far more flexible parser and I am quietly confident that mathematicians are going to be coming up with some devious tricks once they realise what can be done. Of course another approach is just to explain what you mean in comments in your code -- if Lean 3 won't let you make it the way we mathematicians are used to having it look, you can just explain this. Of course there is also Patrick's formatter, providing what is in some sense a very powerful interface between mathematicians and Lean, but it only works in one direction; students can't write the LaTeX and expect the Lean to appear. These are quite subtle issues. Mathematicians are fiercely proud of their notation, even though sometimes it really stinks (I have taught 3rd year number theory classes which contain both Legendre symbols and fractions in brackets, and these are indistinguishable without context). </p>\n<p>As for zmod', note that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mi mathvariant=\"normal\">/</mi><mo>(</mo><mn>0</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord mathrm\">/</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">0</span><span class=\"mclose\">)</span></span></span></span> is indeed <code>int</code>, so I guess mathematicians would prefer <code>zmod'</code> to <code>zmod</code>, but computer scientists might well think differently.</p>",
        "id": 166352043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558611022
    },
    {
        "content": "<blockquote>\n<p>As for zmod', note that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mi mathvariant=\"normal\">/</mi><mo>(</mo><mn>0</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord mathrm\">/</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">0</span><span class=\"mclose\">)</span></span></span></span> is indeed <code>int</code></p>\n</blockquote>\n<p>by which I mean \"canonically isomorphic to <code>int</code>\"</p>",
        "id": 166352272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558611333
    },
    {
        "content": "<p>I very much would like to be able to define <code>zmod 0</code>. You lose the definitionally equality to fin, and the fintype instance, but you gain a lot. I think if we had both, the one without the <code>pnat</code> would get more use. I'm not really in favour of computationally efficiency at the expense of ease of proof.</p>",
        "id": 166359061,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558617228
    },
    {
        "content": "<p>I have pushed a new version with an instance of <code>has_pow M (zmod n)</code>, and with results proved for <code>n : nat</code> rather than <code>n : pnat</code> where possible, and with some further stylistic tweaks.  I think that that makes it appropriate to mark all existing conversations as resolved.  </p>\n<p>I'd prefer to leave the finite and infinite cases separate for the moment.  We can revisit this issue when <code>zmod 0</code> or <code>zmod' 0</code> is in mathlib.</p>",
        "id": 166361107,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558618773
    },
    {
        "content": "<p>I think I still have some open conversations about spacing and such... please take a look at those.</p>",
        "id": 166361302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558618893
    },
    {
        "content": "<p>And thanks for the new version!</p>",
        "id": 166361319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558618904
    },
    {
        "content": "<p>Those comments about spacings etc (for which, thanks) should be covered by the \"stylistic tweaks\".</p>",
        "id": 166361505,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1558619028
    },
    {
        "content": "<p>It might be best to do a regex search for <code>,[a-z]</code> or something like that... there are still some spaces missing <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 166362334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558619544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> Ooh, and there is also <code>]}</code> and <code>}}</code> which ought to have spaces according to the style guide.</p>",
        "id": 166363538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558620414
    },
    {
        "content": "<p>And yes... I would very much like to have a tool that just cleans up our files for us... I'm not sure if that is easy to write though...</p>",
        "id": 166363572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558620438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span> I have been revisiting this PR again. Sorry for the long silence.<br>\nI understand the need for expository Lean files.<br>\nHowever, currently it seems to me that formal maths is bad at combining library development and exposition. Taking \"shortcuts\" seems to hit us hard in the back a couple months down the road. Example: we have a chunk of stuff about modules over commutative rings, and refactoring the theory to include non-commutative rings is painful, and nobody wants to do it.<br>\nSimilarly, these libraries are very bad at handling canonically isomorphic objects. That's a pity, but it does mean that we should not introduce if possible.<br>\nYou introduce <code>cyclic</code> in this PR, and it is not so clear to me why mathlib should know about that type if we already have <code>zmod</code>. I think the <code>power_mod</code> and <code>zmod</code> files are quite uncontroversial. At some point <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> suggested to generalise the dihedral construction to arbitrary abelian groups. Please let me know what you would like to do here.<br>\nTo sum up: exposition is great, but the library seems to prefer generalities (even if they are harder to grasp for undergraduates).</p>",
        "id": 170422883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562645954
    }
]