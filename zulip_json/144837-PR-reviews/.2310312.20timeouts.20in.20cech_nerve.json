[
    {
        "content": "<p>I think some changes to the imports in this PR have pushed an already slow proof over the timeout boundary.</p>\n<p>Could someone familiar with that part of mathlib take a look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.simplicial_object.cech_nerve/src\">src#category_theory.simplicial_object.cech_nerve</a>  and see if they can think of any obvious speedups?</p>\n<p>Alternatively, is there an obviously \"bad\" import that my PR adds?</p>",
        "id": 262587999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637760533
    },
    {
        "content": "<p>I'll have a look a little later</p>",
        "id": 262600274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637766449
    },
    {
        "content": "<p>I suppose un<code>tidy</code>ing as much as possible would help</p>",
        "id": 262600315,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637766472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> The following provides some speedup for <code>category_theory.simplicial_object.cech_nerve</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The Čech nerve construction, as a functor from `arrow C`. -/</span>\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cech_nerve</span> <span class=\"o\">:</span> <span class=\"n\">arrow</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">simplicial_object</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.cech_nerve</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift</span>\n      <span class=\"o\">(</span><span class=\"n\">wide_pullback.base</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">F.right</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.π</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"n\">F.left</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">arrow.w</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.π_arrow_assoc</span><span class=\"o\">]),</span>\n    <span class=\"n\">naturality'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">ext</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_π</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_π_assoc</span><span class=\"o\">,</span>\n          <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_π</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_π</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_base</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_base_assoc</span><span class=\"o\">,</span>\n          <span class=\"n\">category.assoc</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_base</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_base</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"kd\">end</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">wide_pullback.lift_π</span><span class=\"o\">,</span> <span class=\"n\">category.id_comp</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">wide_pullback.lift_base</span><span class=\"o\">,</span> <span class=\"n\">category.id_comp</span><span class=\"o\">,</span> <span class=\"n\">category.comp_id</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">wide_pullback.lift_π</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">wide_pullback.lift_π</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_π_assoc</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">wide_pullback.lift_base</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span>\n        <span class=\"n\">wide_pullback.lift_base</span><span class=\"o\">,</span> <span class=\"n\">wide_pullback.lift_base_assoc</span><span class=\"o\">,</span> <span class=\"n\">category.assoc</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 262604164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637768305
    },
    {
        "content": "<p>Oh no, that's one of the ones that failed in my gcd pr</p>",
        "id": 262604214,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1637768329
    },
    {
        "content": "<p>I had some changes at <a href=\"https://github.com/leanprover-community/mathlib/pull/9606/files#diff-242bd0ab0ba65ca1d5df6749ae5f495ca2656dd8ae6f2237625cb81c0cd4738f\">https://github.com/leanprover-community/mathlib/pull/9606/files#diff-242bd0ab0ba65ca1d5df6749ae5f495ca2656dd8ae6f2237625cb81c0cd4738f</a></p>",
        "id": 262604314,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1637768398
    },
    {
        "content": "<p>Are you happy to PR that, Adam?</p>",
        "id": 262684613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637833381
    },
    {
        "content": "<p>Now it's timing out in <a href=\"https://github.com/leanprover-community/mathlib/issues/10324\">#10324</a> as well - what did I ever do to Čech to deserve this?</p>",
        "id": 262772520,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1637916738
    },
    {
        "content": "<p>And in <a href=\"https://github.com/leanprover-community/mathlib/issues/10507\">#10507</a> as well <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> Čech is getting on our nerves.</p>",
        "id": 262841531,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637968486
    },
    {
        "content": "<p>Ok, I guess I should really try to speed things up in that file...</p>",
        "id": 262842344,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1637969625
    },
    {
        "content": "<p>This just timed out the latest staging patch</p>",
        "id": 262870483,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638015746
    },
    {
        "content": "<p>It may be worth pushing this through ASAP</p>",
        "id": 262870507,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638015786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <br>\nHere is an attempt at speeding things up: <a href=\"https://github.com/leanprover-community/mathlib/issues/10521\">#10521</a><br>\nIt would be helpful if you merge this into your branches to see if this fixes the timeout issue before merging <a href=\"https://github.com/leanprover-community/mathlib/issues/10521\">#10521</a></p>",
        "id": 262890790,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638043961
    },
    {
        "content": "<p>It turns out I could avoid the extra import in <a href=\"https://github.com/leanprover-community/mathlib/issues/10324\">#10324</a>, so that managed to land, but I can see if it'd help with <a href=\"https://github.com/leanprover-community/mathlib/issues/9606\">#9606</a>, maybe tomorrow</p>",
        "id": 262891587,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1638045128
    },
    {
        "content": "<p>it's passed all CI checks:)</p>",
        "id": 262901500,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638060858
    },
    {
        "content": "<p>It looks like I get this timeout in every (at least, in every second) build. It would be nice to have <a href=\"https://github.com/leanprover-community/mathlib/issues/10521\">#10521</a> reviewed (I don't feel fit to review it myself).</p>",
        "id": 262906268,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638069409
    },
    {
        "content": "<p>The Cech nerve is used fairly extensively in LTE. <a href=\"https://github.com/leanprover-community/mathlib/issues/10521\">#10521</a> shouldn't really break anything, but I wonder whether it's possible to check this before merging and if something goes wrong I could modify <a href=\"https://github.com/leanprover-community/mathlib/issues/10521\">#10521</a> accordingly. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 262907037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638070730
    },
    {
        "content": "<p>It also timed out twice in <a href=\"https://github.com/leanprover-community/mathlib/issues/10431\">#10431</a></p>",
        "id": 262926106,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638102335
    },
    {
        "content": "<p>trying to merge in <a href=\"https://github.com/leanprover-community/mathlib/tree/better_sorry_lint_merge\">branch#better_sorry_lint_merge</a>. But the deterministic timeout is not always reproducible when merging master again...</p>",
        "id": 262926422,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638102730
    },
    {
        "content": "<p>The speedup works for <a href=\"https://github.com/leanprover-community/mathlib/issues/10202\">#10202</a></p>",
        "id": 262933855,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638112732
    },
    {
        "content": "<p>I suggest that we merge <a href=\"https://github.com/leanprover-community/mathlib/issues/10521\">#10521</a> now, then fix it later if something breaks (e.g., in LTE).</p>",
        "id": 262943812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638127139
    },
    {
        "content": "<p>All my recent PRs fail because of a timeout in <code>cech_nerve</code>.</p>",
        "id": 262943880,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638127216
    },
    {
        "content": "<p>Sounds good to me!</p>",
        "id": 262944468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638128160
    },
    {
        "content": "<p>Does anyone want to review it?</p>",
        "id": 262944507,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638128168
    },
    {
        "content": "<p>On the queue.</p>",
        "id": 262944508,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638128174
    },
    {
        "content": "<p>I'll do a mathlib bump in LTE today</p>",
        "id": 262970049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638165810
    },
    {
        "content": "<p>Hopefully it won't be too painful</p>",
        "id": 262970051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638165819
    }
]