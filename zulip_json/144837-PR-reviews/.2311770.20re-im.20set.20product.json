[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/11770\">#11770</a> I define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">set.re_prod_im</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"n\">complex.re</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">complex.im</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>and introduce notation <code>s ×ℂ t</code> for this definition. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is not happy about the name and suggests <code>complex.rect</code>. I don't like <code>complex.rect</code> for two reasons: first, for me <code>rect</code> is more about the product of two intervals, not generic sets; second, I like <code>is_closed.re_prod_im</code> more than <code>is_closed.complex_rect</code>. Which name do you prefer?</p>",
        "id": 270496012,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643859219
    },
    {
        "content": "<p>I'm also open to other suggestions if there are better names for \"rectangular sets\"</p>",
        "id": 270496084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1643859265
    },
    {
        "content": "<p>/poll name for the new def<br>\nset.re_prod_im, is_closed.re_prod_im<br>\ncomplex.rect, is_closed.complex_rect<br>\ncomplex.set_prod, is_closed.complex_prod</p>",
        "id": 270496094,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643859282
    },
    {
        "content": "<p>I'll wait for 24h, then choose the most popular answer.</p>",
        "id": 270496116,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643859323
    },
    {
        "content": "<p><code>re_prod_im</code> got more votes than all other options together (even with multiplicities), so I'm going to leave <a href=\"https://github.com/leanprover-community/mathlib/pull/11770\">#11770</a> as is.</p>",
        "id": 270741851,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643993653
    }
]