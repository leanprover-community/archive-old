[
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/3672\">#3672</a> (on adjacency matrices) is currently hung up on PR <a href=\"https://github.com/leanprover-community/mathlib/issues/3458\">#3458</a>, introducing simple graphs.</p>",
        "id": 206429869,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597038124
    },
    {
        "content": "<p>The simple graph PR is a little mired in complications, because there are far too many ways to define graphs, and set/fintype/finset shenanigans.</p>",
        "id": 206429939,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597038248
    },
    {
        "content": "<p>Most of the potentially controversial stuff is not needed at all for <a href=\"https://github.com/leanprover-community/mathlib/issues/3672\">#3672</a>, and <a href=\"https://github.com/leanprover-community/mathlib/issues/3672\">#3672</a> contains all the (graph theoretic) facts I need for the proof of the Friendship Theorem that <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> and I have.</p>",
        "id": 206429959,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597038308
    },
    {
        "content": "<p>To accelerate the process, would it be a good idea to trim back <a href=\"https://github.com/leanprover-community/mathlib/issues/3458\">#3458</a> to just the essentials, and then save the rest for future PRs, or to add the essentials to <a href=\"https://github.com/leanprover-community/mathlib/issues/3672\">#3672</a>, or is neither idea wise?</p>",
        "id": 206430027,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597038400
    },
    {
        "content": "<p>(the proof of the Friendship Theorem is on <code>mathlib:freek_83_friendship_theorem</code>. There's also some experimental stuff there, but on the save on my computer, all the needed parts build at once.)</p>",
        "id": 206430097,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597038493
    },
    {
        "content": "<p>I had thought we were waiting for <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> to get back from vacation to do the review for <a href=\"https://github.com/leanprover-community/mathlib/issues/3458\">#3458</a>?  (Maybe the PR probably shouldn't be marked changes-requested anymore, because I think we addressed previous comments.)</p>\n<p>I'm also not exactly sure what you're referring to by the potentially controversial stuff in the commit, though I do agree that there are too many ways to define graphs, which makes it hard to commit to one.</p>\n<p>In case anyone wants to take a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/3458\">#3458</a> (which is only about 200 lines for graphs and some basic lemmas), here is an overview of the design in case it helps:</p>\n<ul>\n<li>A simple graph <code>G</code> is a symmetric irreflexive relation <code>G.adj</code>.  Graphs are parameterized by a vertex type <code>V</code>.</li>\n<li>Given a vertex <code>v</code>, the set of adjacent vertices is <code>G.neighbor_set v</code>.  This is simply <code>G.adj v</code> as a set.</li>\n<li>The set of edges <code>G.edge_set</code> is given as a set on unordered pairs on <code>V</code>.  The multigraph interface will eventually supply a type <code>E</code> of edges that is <code>G.edge_set</code> as a subtype.</li>\n<li>A graph is locally finite at a vertex <code>v</code> if <code>G.neighbor_set v</code> is a <code>fintype</code>.  In this case, <code>G.degree v</code> is defined as the cardinality of this set.</li>\n<li>Since  big operators use <code>finsets</code>, there is a <code>G.neighbor_finset v</code> for the <code>finset</code> version of the set when G is locally finite at v.  There are lemmas relating this to <code>G.neighbor_set v</code> and <code>G.degree v</code>.</li>\n<li>A graph is locally finite if it is locally finite at each vertex.  There is an implementation of these instances when <code>V</code> is a <code>fintype</code>.</li>\n</ul>\n<p>There are also some additions to <code>data.sym2</code> to make the interface as decidable as possible.  I thought it was important to be able to, at some point, implement basic graph algorithms, and it didn't seem to be too much of a hassle.</p>\n<p>A tradeoff with defining local finiteness the way we did is that, on one hand it's nice that you can just write <code>G.degree v</code> and class resolution will take care of the rest, but on the other there <em>is</em> a coercion in there since it's a <code>set</code> that's a <code>fintype</code>.</p>\n<p>A tension that is present in the design is from handling arbitrary simple graphs versus locally finite simple graphs versus finite simple graphs.  The interface we managed to produce satisfies all three tolerably well, or at least I think it does.</p>",
        "id": 206436620,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1597046509
    },
    {
        "content": "<p>If we’re just waiting for Johan that’s fine. I’m working on a few projects and lost track.</p>",
        "id": 206484202,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1597078337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233458.20and.20.233672/near/206436620\">said</a>:</p>\n<blockquote>\n<p>(Maybe the PR probably shouldn't be marked changes-requested anymore, because I think we addressed previous comments.)</p>\n</blockquote>\n<p>Everyone with write access to non-master branches of mathlib has the ability to change tags. There are instructions and guidance about tags on mathlib PRs at <a href=\"https://leanprover-community.github.io/contribute/index.html\">#contrib</a>. <a href=\"https://leanprover-community.github.io/contribute/index.html#lifecycle-of-a-pr\">This part</a>, specifically. Those are somewhat new, let me know if you have an idea how they could be better.</p>",
        "id": 206504340,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1597088522
    }
]