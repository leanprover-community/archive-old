[
    {
        "content": "<p>Ooops, thanks!  I just corrected it!</p>",
        "id": 290994098,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658903566
    },
    {
        "content": "<p>I think <code> 2743ms    78.1%   tactic.compute_degree.norm_assum</code> is the interesting line here, everything above seems like generic tactic infrastructure. I wonder if it's relatively fast and getting called often or whether there's a specific call making it slow.</p>",
        "id": 291012878,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658916321
    },
    {
        "content": "<p>Anne, thank you very much!  I think that you are right and I am not particularly proud of <code>norm_assum</code>.</p>\n<p>I fixed a different issue, that halved the computation time of this example to 1.5s.  This meant producing a better expression for the guessed degree that then did not have to involve so heavily <code>norm_num</code> (which, unsurprisingly, is called by the tactic <code>norm_assum</code>).</p>",
        "id": 291016004,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658918360
    },
    {
        "content": "<p>With the current version, this is the output of the profiler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">32</span><span class=\"n\">s</span>\n<span class=\"n\">num.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">24623</span>\n<span class=\"n\">num.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">36656</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.step</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction._lambda_2</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">scope_trace</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.prove_monic</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.istep</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.solve1</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction._lambda_3</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.with_ast</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction</span>\n <span class=\"mi\">1320</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.istep._lambda_1</span>\n <span class=\"mi\">1319</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.focus'</span>\n <span class=\"mi\">1319</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">focus'_aux</span>\n <span class=\"mi\">1319</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">_private.935943205.focus'_aux._main._lambda_3</span>\n <span class=\"mi\">1319</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad.monad._lambda_8</span>\n <span class=\"mi\">1223</span><span class=\"n\">ms</span>    <span class=\"mi\">92</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.focus1</span>\n <span class=\"mi\">1145</span><span class=\"n\">ms</span>    <span class=\"mi\">86</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.compute_degree_le._lambda_6</span>\n  <span class=\"mi\">967</span><span class=\"n\">ms</span>    <span class=\"mi\">73</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.try_core</span>\n  <span class=\"mi\">966</span><span class=\"n\">ms</span>    <span class=\"mi\">73</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.seq'</span>\n  <span class=\"mi\">932</span><span class=\"n\">ms</span>    <span class=\"mi\">70</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.compute_degree_le</span>\n  <span class=\"mi\">811</span><span class=\"n\">ms</span>    <span class=\"mi\">61</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp_coeff</span>\n  <span class=\"mi\">776</span><span class=\"n\">ms</span>    <span class=\"mi\">58</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.refine</span>\n  <span class=\"mi\">769</span><span class=\"n\">ms</span>    <span class=\"mi\">58</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.to_expr</span>\n  <span class=\"mi\">715</span><span class=\"n\">ms</span>    <span class=\"mi\">54</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.resolve_coeff._main._lambda_4</span>\n  <span class=\"mi\">715</span><span class=\"n\">ms</span>    <span class=\"mi\">54</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.resolve_coeff</span>\n  <span class=\"mi\">674</span><span class=\"n\">ms</span>    <span class=\"mi\">51</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.all_goals'</span>\n  <span class=\"mi\">674</span><span class=\"n\">ms</span>    <span class=\"mi\">51</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">_private.639532715.all_goals'_core._main._lambda_2</span>\n  <span class=\"mi\">674</span><span class=\"n\">ms</span>    <span class=\"mi\">51</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">all_goals'_core</span>\n  <span class=\"mi\">649</span><span class=\"n\">ms</span>    <span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.resolve_coeff._main._lambda_3</span>\n  <span class=\"mi\">637</span><span class=\"n\">ms</span>    <span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.try</span>\n  <span class=\"mi\">552</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.repeat</span>\n  <span class=\"mi\">552</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">repeat_aux</span>\n  <span class=\"mi\">549</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">_private.3747439109.repeat_aux._main._lambda_1</span>\n  <span class=\"mi\">549</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.compute_degree_le._lambda_2</span>\n  <span class=\"mi\">549</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.resolve_sum_step</span>\n  <span class=\"mi\">442</span><span class=\"n\">ms</span>    <span class=\"mi\">33</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad_orelse</span>\n  <span class=\"mi\">418</span><span class=\"n\">ms</span>    <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">any_goals'_core</span>\n  <span class=\"mi\">418</span><span class=\"n\">ms</span>    <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.any_goals'</span>\n  <span class=\"mi\">418</span><span class=\"n\">ms</span>    <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">_private.4026170745.any_goals'_core._main._lambda_2</span>\n  <span class=\"mi\">340</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.norm_assum._lambda_2</span>\n  <span class=\"mi\">340</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.norm_assum</span>\n  <span class=\"mi\">339</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.norm_num</span>\n  <span class=\"mi\">338</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.norm_num1</span>\n  <span class=\"mi\">338</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad.orelse'</span>\n  <span class=\"mi\">337</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.replace_at._lambda_4</span>\n  <span class=\"mi\">337</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.alternative._lambda_2</span>\n  <span class=\"mi\">337</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.replace_at</span>\n  <span class=\"mi\">331</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.derive'</span>\n  <span class=\"mi\">331</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext_simplify_core</span>\n  <span class=\"mi\">322</span><span class=\"n\">ms</span>    <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.derive'._lambda_3</span>\n  <span class=\"mi\">309</span><span class=\"n\">ms</span>    <span class=\"mi\">23</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.get</span>\n  <span class=\"mi\">308</span><span class=\"n\">ms</span>    <span class=\"mi\">23</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_instance</span>\n  <span class=\"mi\">286</span><span class=\"n\">ms</span>    <span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.mk_app</span>\n  <span class=\"mi\">284</span><span class=\"n\">ms</span>    <span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.append_typeclasses</span>\n  <span class=\"mi\">202</span><span class=\"n\">ms</span>    <span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_ineq</span>\n  <span class=\"mi\">116</span><span class=\"n\">ms</span>     <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_field</span>\n   <span class=\"mi\">82</span><span class=\"n\">ms</span>     <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_le_nonneg_rat</span>\n   <span class=\"mi\">82</span><span class=\"n\">ms</span>     <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_le_nat</span>\n   <span class=\"mi\">82</span><span class=\"n\">ms</span>     <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_le_rat</span>\n   <span class=\"mi\">78</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp_coeff._lambda_3</span>\n   <span class=\"mi\">78</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_simp_set_core</span>\n   <span class=\"mi\">78</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.propagate_tags</span>\n   <span class=\"mi\">78</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp_coeff._lambda_2</span>\n   <span class=\"mi\">78</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp._lambda_3</span>\n   <span class=\"mi\">78</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp_core</span>\n   <span class=\"mi\">78</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_simp_set</span>\n   <span class=\"mi\">78</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_mul_rat</span>\n   <span class=\"mi\">76</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">simp_lemmas.mk_default</span>\n   <span class=\"mi\">76</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.join_user_simp_lemmas</span>\n   <span class=\"mi\">48</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_one_le_nat</span>\n   <span class=\"mi\">44</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.resolve_coeff._main._lambda_2</span>\n   <span class=\"mi\">41</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.congr'._main._lambda_1</span>\n   <span class=\"mi\">37</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_mul_nonneg_rat</span>\n   <span class=\"mi\">37</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_mul_nat</span>\n   <span class=\"mi\">37</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.eval_expr'</span>\n   <span class=\"mi\">37</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.guess_degree'</span>\n   <span class=\"mi\">36</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.congr_core'</span>\n   <span class=\"mi\">36</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_field._lambda_1</span>\n   <span class=\"mi\">35</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_eq_congr_core</span>\n   <span class=\"mi\">34</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_specialized_congr_lemma</span>\n   <span class=\"mi\">30</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.eval_expr</span>\n   <span class=\"mi\">27</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_sle_nat</span>\n   <span class=\"mi\">27</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.unify</span>\n   <span class=\"mi\">26</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.compute_degree_le._lambda_5</span>\n   <span class=\"mi\">26</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.success_if_fail</span>\n   <span class=\"mi\">25</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.of_nat</span>\n   <span class=\"mi\">25</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.of_rat</span>\n   <span class=\"mi\">14</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.exact</span>\n   <span class=\"mi\">13</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.get_lead_coeff</span>\n   <span class=\"mi\">11</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_add_nat</span>\n   <span class=\"mi\">11</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_add_nonneg_rat</span>\n   <span class=\"mi\">11</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_add_rat</span>\n   <span class=\"mi\">10</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_app</span>\n    <span class=\"mi\">7</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_pos_nat</span>\n    <span class=\"mi\">6</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">_private.2427847625.relation_tactic._lambda_1</span>\n    <span class=\"mi\">6</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_core</span>\n    <span class=\"mi\">6</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">relation_tactic</span>\n    <span class=\"mi\">6</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.replace_target</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">pexpr.of_expr</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">to_pexpr</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">name.has_decidable_eq</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">expr.to_rat</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.assert</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.pp</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic_state.format_expr</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">expr.to_nat</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic_format_expr</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">expr.to_nonneg_rat</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.infer_type</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">expr.app</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_succ._main._lambda_1</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad.fail</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">expr.has_coe_to_fun</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">simp_lemmas.resolve_and_add</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">simp_lemmas.append_pexprs</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_simp_set_core._lambda_5</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.replace_target._lambda_1</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">expr.mk_app</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">simp_lemmas.add_pexpr</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_succ</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_eq_mpr</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.find_same_type</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.save_info_with_widgets</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_nat_int_ext</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_congr_core</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">simp_lemmas.add_simp</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">_private.377553211.simp_lemmas.resolve_and_add._lambda_3</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_instance_cache</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">user_attribute.get_cache</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.save_widget</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.intro_core</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_cast</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.intro</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad.mk_exception</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.attr._lambda_6</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.assumption._lambda_1</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.attr._lambda_3</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.assert_core</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.triv</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_pow</span>\n</code></pre></div>",
        "id": 291016978,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658918980
    },
    {
        "content": "<p>and indeed, as Anne predicted, <code>norm_assum</code> is now just a \"passing\" tactic.</p>",
        "id": 291017174,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658919109
    },
    {
        "content": "<p>My first suspect is now <code>  769ms    58.3%   tactic.to_expr</code>, this usually means Lean has to infer a lot of stuff that the tactic could pass in instead, such as instances. You can try and see if <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tactic.instance_cache\">docs#tactic.instance_cache</a> helps.</p>",
        "id": 291018887,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658920170
    },
    {
        "content": "<p>I'll look into this, although I have never used <code>instance_cache</code>.  It seems to want to have a universe level: how do I find that?</p>\n<p>Edit: I see that there is a <code>mk_instance_cache</code> that will probably take care of this.</p>",
        "id": 291020059,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658920979
    },
    {
        "content": "<p>Anne, using <code>instance_cache</code> was actually good fun!  It seems that it shaved off another 30% from the overall performance, which is very good!  I also enjoyed seeing a little bit of the typeclass mechanism at work!</p>\n<p>This is the current profiler run on the same proof.  If you feel like suggesting more improvements, I'd be happy to look at them!</p>\n<p>(Btw, now that the proof is stably just over 1s, I doubt that there will be any major change and I am no longer concerned about performance.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">06</span><span class=\"n\">s</span>\n<span class=\"n\">num.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">22208</span>\n<span class=\"n\">num.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">27601</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.with_ast</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.istep</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">scope_trace</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.prove_monic</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.step</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction._lambda_3</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.istep._lambda_1</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.prove_monic._lambda_1</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.focus1</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction._lambda_2</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.solve1</span>\n <span class=\"mi\">1057</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_interaction</span>\n <span class=\"mi\">1053</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad.monad._lambda_8</span>\n <span class=\"mi\">1052</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">_private.935943205.focus'_aux._main._lambda_3</span>\n <span class=\"mi\">1052</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">focus'_aux</span>\n <span class=\"mi\">1052</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.focus'</span>\n  <span class=\"mi\">913</span><span class=\"n\">ms</span>    <span class=\"mi\">86</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.compute_degree_le._lambda_6</span>\n  <span class=\"mi\">749</span><span class=\"n\">ms</span>    <span class=\"mi\">70</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.try_core</span>\n  <span class=\"mi\">741</span><span class=\"n\">ms</span>    <span class=\"mi\">70</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.seq'</span>\n  <span class=\"mi\">739</span><span class=\"n\">ms</span>    <span class=\"mi\">69</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.compute_degree_le</span>\n  <span class=\"mi\">623</span><span class=\"n\">ms</span>    <span class=\"mi\">58</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.refine</span>\n  <span class=\"mi\">621</span><span class=\"n\">ms</span>    <span class=\"mi\">58</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.to_expr</span>\n  <span class=\"mi\">613</span><span class=\"n\">ms</span>    <span class=\"mi\">58</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp_coeff</span>\n  <span class=\"mi\">545</span><span class=\"n\">ms</span>    <span class=\"mi\">51</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.resolve_coeff</span>\n  <span class=\"mi\">545</span><span class=\"n\">ms</span>    <span class=\"mi\">51</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.resolve_coeff._main._lambda_4</span>\n  <span class=\"mi\">507</span><span class=\"n\">ms</span>    <span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.all_goals'</span>\n  <span class=\"mi\">507</span><span class=\"n\">ms</span>    <span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">all_goals'_core</span>\n  <span class=\"mi\">507</span><span class=\"n\">ms</span>    <span class=\"mi\">48</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_private.639532715.all_goals'_core._main._lambda_2</span>\n  <span class=\"mi\">496</span><span class=\"n\">ms</span>    <span class=\"mi\">46</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.try</span>\n  <span class=\"mi\">484</span><span class=\"n\">ms</span>    <span class=\"mi\">45</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.resolve_coeff._main._lambda_3</span>\n  <span class=\"mi\">434</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.repeat</span>\n  <span class=\"mi\">434</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">repeat_aux</span>\n  <span class=\"mi\">433</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">_private.3747439109.repeat_aux._main._lambda_1</span>\n  <span class=\"mi\">433</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.compute_degree_le._lambda_2</span>\n  <span class=\"mi\">433</span><span class=\"n\">ms</span>    <span class=\"mi\">41</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.resolve_sum_step</span>\n  <span class=\"mi\">370</span><span class=\"n\">ms</span>    <span class=\"mi\">35</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad_orelse</span>\n  <span class=\"mi\">316</span><span class=\"n\">ms</span>    <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">_private.4026170745.any_goals'_core._main._lambda_2</span>\n  <span class=\"mi\">316</span><span class=\"n\">ms</span>    <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">any_goals'_core</span>\n  <span class=\"mi\">316</span><span class=\"n\">ms</span>    <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.any_goals'</span>\n  <span class=\"mi\">270</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.norm_assum</span>\n  <span class=\"mi\">270</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.norm_assum._lambda_2</span>\n  <span class=\"mi\">267</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.norm_num</span>\n  <span class=\"mi\">265</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.norm_num1</span>\n  <span class=\"mi\">265</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad.orelse'</span>\n  <span class=\"mi\">264</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.replace_at</span>\n  <span class=\"mi\">264</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.alternative._lambda_2</span>\n  <span class=\"mi\">264</span><span class=\"n\">ms</span>    <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.replace_at._lambda_4</span>\n  <span class=\"mi\">259</span><span class=\"n\">ms</span>    <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.ext_simplify_core</span>\n  <span class=\"mi\">259</span><span class=\"n\">ms</span>    <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.derive'</span>\n  <span class=\"mi\">256</span><span class=\"n\">ms</span>    <span class=\"mi\">24</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.derive'._lambda_3</span>\n  <span class=\"mi\">250</span><span class=\"n\">ms</span>    <span class=\"mi\">23</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.get</span>\n  <span class=\"mi\">249</span><span class=\"n\">ms</span>    <span class=\"mi\">23</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_instance</span>\n  <span class=\"mi\">226</span><span class=\"n\">ms</span>    <span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.mk_app</span>\n  <span class=\"mi\">225</span><span class=\"n\">ms</span>    <span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.append_typeclasses</span>\n  <span class=\"mi\">151</span><span class=\"n\">ms</span>    <span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_ineq</span>\n  <span class=\"mi\">102</span><span class=\"n\">ms</span>     <span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_field</span>\n   <span class=\"mi\">69</span><span class=\"n\">ms</span>     <span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_mul_rat</span>\n   <span class=\"mi\">59</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_le_nat</span>\n   <span class=\"mi\">59</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_le_nonneg_rat</span>\n   <span class=\"mi\">59</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_le_rat</span>\n   <span class=\"mi\">46</span><span class=\"n\">ms</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.propagate_tags</span>\n   <span class=\"mi\">46</span><span class=\"n\">ms</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_simp_set_core</span>\n   <span class=\"mi\">46</span><span class=\"n\">ms</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp._lambda_3</span>\n   <span class=\"mi\">46</span><span class=\"n\">ms</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp_core</span>\n   <span class=\"mi\">46</span><span class=\"n\">ms</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_simp_set</span>\n   <span class=\"mi\">46</span><span class=\"n\">ms</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp_coeff._lambda_2</span>\n   <span class=\"mi\">46</span><span class=\"n\">ms</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.simp_coeff._lambda_3</span>\n   <span class=\"mi\">42</span><span class=\"n\">ms</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">simp_lemmas.mk_default</span>\n   <span class=\"mi\">42</span><span class=\"n\">ms</span>     <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.join_user_simp_lemmas</span>\n   <span class=\"mi\">40</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.resolve_coeff._main._lambda_2</span>\n   <span class=\"mi\">39</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.congr'._main._lambda_1</span>\n   <span class=\"mi\">38</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.eval_expr'</span>\n   <span class=\"mi\">37</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.guess_degree'</span>\n   <span class=\"mi\">36</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_mul_nat</span>\n   <span class=\"mi\">36</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_mul_nonneg_rat</span>\n   <span class=\"mi\">34</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_eq_congr_core</span>\n   <span class=\"mi\">34</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.congr_core'</span>\n   <span class=\"mi\">33</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_specialized_congr_lemma</span>\n   <span class=\"mi\">32</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_one_le_nat</span>\n   <span class=\"mi\">31</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_field._lambda_1</span>\n   <span class=\"mi\">30</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.eval_expr</span>\n   <span class=\"mi\">25</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.interactive.compute_degree_le._lambda_5</span>\n   <span class=\"mi\">25</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.unify</span>\n   <span class=\"mi\">24</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.success_if_fail</span>\n   <span class=\"mi\">21</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.of_rat</span>\n   <span class=\"mi\">21</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.of_nat</span>\n   <span class=\"mi\">17</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_sle_nat</span>\n   <span class=\"mi\">16</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.compute_degree.get_lead_coeff</span>\n   <span class=\"mi\">11</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_app</span>\n   <span class=\"mi\">10</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_add_nonneg_rat</span>\n   <span class=\"mi\">10</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_add_nat</span>\n   <span class=\"mi\">10</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_add_rat</span>\n    <span class=\"mi\">8</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.exact</span>\n    <span class=\"mi\">7</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_core</span>\n    <span class=\"mi\">6</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">_private.2427847625.relation_tactic._lambda_1</span>\n    <span class=\"mi\">6</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>   <span class=\"n\">relation_tactic</span>\n    <span class=\"mi\">5</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_pos_nat</span>\n    <span class=\"mi\">5</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.replace_target</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_simp_set_core._lambda_5</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">_private.377553211.simp_lemmas.resolve_and_add._lambda_3</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">simp_lemmas.append_pexprs</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">simp_lemmas.resolve_and_add</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">is_valid_simp_lemma_cnst</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>   <span class=\"n\">simp_lemmas.add_pexpr</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.save_info_with_widgets</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.assert</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.mk_one</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.instance_cache.mk_sub</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.save_widget</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>   <span class=\"n\">name.has_decidable_eq</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.intro</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">expr.to_rat</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic_state.format_expr</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.triv</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">expr.to_nat</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">user_attribute.get_cache</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic_format_expr</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.intro_core</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_succ._main._lambda_1</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.infer_type</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">environment.get</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.assert_core</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.prove_succ</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.eval_cast</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.pp</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">expr.to_nonneg_rat</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.match_sign</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.replace_target._lambda_1</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">expr.const</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_instance_cache</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.attr._lambda_5</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.save_info_thunk</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply_congr_core</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.true_intro</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.apply</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">tactic.mk_const</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">interaction_monad.monad._lambda_3</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>   <span class=\"n\">norm_num.derive.step</span>\n</code></pre></div>",
        "id": 291059691,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658937181
    },
    {
        "content": "<p>Nice work! I guess 1 second is about doable with respect to timing, now it's getting comparable to a slow call <code>norm_num</code> itself. I also don't see any obvious places of inefficiency in the profiling output.</p>",
        "id": 291110955,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1658956322
    },
    {
        "content": "<p>Thank you so much for your assistance!  I'll consider myself satisfied with the current performance.  If the tactic gets used more and it turns out to be slow, I'll see how to improve it.</p>",
        "id": 291111951,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658956842
    },
    {
        "content": "<p>Is this the kind of tactic that can trace a <code>Try this:</code> 4-line-proof to auto-replace itself?</p>",
        "id": 291134655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658976426
    },
    {
        "content": "<p>I have a <code>Try this</code> for when you use the tactic on a lemma available in the library.</p>\n<p>I am going to look at the proof terms that the tactic produces, but the process is more of the form of a calc proof, so I am skeptic that 4 lines will suffice.</p>",
        "id": 291141117,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658983522
    },
    {
        "content": "<p>Embedded in the argument are also several steps where you prove that <code>a ≤ b</code> for <code>a b : ℕ</code> small natural numbers, which are currently dealt with by <code>norm_num</code>.</p>",
        "id": 291141214,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658983630
    },
    {
        "content": "<p>To give an idea of how the tactic works, this is what it does:</p>\n<ul>\n<li>compute behind the scenes the \"meta_degree\" of the polynomial;</li>\n<li>apply a lemma to reduce the degree computation to an inequality <code>f.nat_degree ≤ meta_degree</code> and the statement <code>f.coeff meta_degree ≠0</code>.</li>\n</ul>\n<p>(so far so good).<br>\nThen, both proofs follow similar patterns: recurse into <code>f</code> and deal with summands, products, powers,...</p>\n<p>So, the structure of the proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_nat_degree_of_ne_zero</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">compute_degree_le</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp_coeff</span><span class=\"o\">,</span> <span class=\"bp\">&lt;</span><span class=\"n\">possibly</span> <span class=\"n\">continue</span> <span class=\"n\">here</span><span class=\"bp\">&gt;</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 291142920,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658986073
    },
    {
        "content": "<p>I think having <code>norm_num</code> in the output of <code>Try this</code> would of course be completely fine.</p>",
        "id": 291143163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658986441
    },
    {
        "content": "<p>Ok, I have already tried delaying the norm_num calls as late as I could.  I'll see what I can produce as a self-replacement of the tactic.</p>",
        "id": 291143250,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658986539
    },
    {
        "content": "<p>Here is a very quick attempt at cleaning up the result of <code>show_term</code> in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">monomial</span> <span class=\"mi\">11</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span>\n    <span class=\"o\">((</span><span class=\"n\">X.nat_degree_sub_le_iff_left</span> <span class=\"o\">((</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">nat_degree_monomial_le</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_X_le.trans</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">le_nat_degree_of_ne_zero</span>\n      <span class=\"o\">(</span><span class=\"n\">ne_of_eq_of_ne</span>\n        <span class=\"o\">((</span><span class=\"n\">coeff_sub_eq_right_of_succ</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_X_le.trans</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n          <span class=\"o\">(</span><span class=\"n\">neg_inj.mpr</span> <span class=\"n\">coeff_monomial</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>  <span class=\"c1\">-- 1 ≤ 11</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>  <span class=\"c1\">-- 1 ≤ 10</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>  <span class=\"c1\">-- -ite (11 = 10 + 1) 1 0 ≠ 0</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It is not so bad.  If I were \"looking\" at the goal, this is what I would do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">monomial</span> <span class=\"mi\">11</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">nat_degree_add_eq_right_of_nat_degree_lt</span><span class=\"o\">,</span> <span class=\"n\">nat_degree_neg</span><span class=\"o\">,</span>\n    <span class=\"n\">nat_degree_monomial</span><span class=\"o\">],</span>\n  <span class=\"n\">rotate</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat_degree_neg</span><span class=\"o\">,</span> <span class=\"n\">nat_degree_monomial</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">nat_degree_X_le</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>  <span class=\"c1\">-- 1 &lt; ite (1 = 0) 0 11</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>  <span class=\"c1\">-- ite (1 = 0) 0 11 = 11</span>\n</code></pre></div>\n<p>Not much shorter!</p>",
        "id": 291145787,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658989667
    },
    {
        "content": "<p>Actually, <code>show_term</code> of the two proofs, omitting the <code>norm_num</code>calls, look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--  `compute_degree` (cleaned up to remove the embedded `norm_num`s</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span>\n  <span class=\"o\">((</span><span class=\"n\">X.nat_degree_sub_le_iff_left</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_monomial_le</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_X_le.trans</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">le_nat_degree_of_ne_zero</span>\n     <span class=\"o\">(</span><span class=\"n\">ne_of_eq_of_ne</span> <span class=\"o\">((</span><span class=\"n\">coeff_sub_eq_right_of_succ</span> <span class=\"mi\">10</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_X_le.trans</span> <span class=\"n\">_</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">neg_inj.mpr</span> <span class=\"n\">coeff_monomial</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n\n<span class=\"c1\">--  explicit `rw`</span>\n<span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">id_tag</span> <span class=\"n\">id_tag.rw</span>\n   <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">sub_eq_add_neg</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">))))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n  <span class=\"o\">((</span><span class=\"n\">id_tag</span> <span class=\"n\">id_tag.rw</span>\n      <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"bp\">-⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">))</span>\n         <span class=\"o\">(</span><span class=\"n\">nat_degree_add_eq_right_of_nat_degree_lt</span>\n            <span class=\"o\">((</span><span class=\"n\">id_tag</span> <span class=\"n\">id_tag.rw</span>\n                <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"n\">X.nat_degree</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">-⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span><span class=\"o\">))</span>\n                   <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree_neg</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n               <span class=\"o\">((</span><span class=\"n\">id_tag</span> <span class=\"n\">id_tag.rw</span>\n                   <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"n\">X.nat_degree</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_monomial</span> <span class=\"mi\">11</span> <span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n                  <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"n\">nat_degree_X_le</span>\n                     <span class=\"n\">_</span><span class=\"o\">[(</span><span class=\"n\">id_tag</span> <span class=\"n\">id_tag.rw</span>\n                          <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">((</span><span class=\"bp\">-⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">))</span>\n                             <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree_neg</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n                         <span class=\"o\">((</span><span class=\"n\">id_tag</span> <span class=\"n\">id_tag.rw</span>\n                             <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">((</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_monomial</span> <span class=\"mi\">11</span> <span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n                            <span class=\"n\">_</span><span class=\"o\">)]))))))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n     <span class=\"o\">((</span><span class=\"n\">id_tag</span> <span class=\"n\">id_tag.rw</span>\n         <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">((</span><span class=\"bp\">-⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree_neg</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n        <span class=\"o\">((</span><span class=\"n\">id_tag</span> <span class=\"n\">id_tag.rw</span> <span class=\"o\">(</span><span class=\"n\">eq.rec</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">((</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">11</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_monomial</span> <span class=\"mi\">11</span> <span class=\"mi\">1</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n           <span class=\"n\">_</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 291146151,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658990125
    },
    {
        "content": "<p>My preliminary conclusion is that, with either approach, it does not seem desirable to replace <code>compute_degree</code> with a <code>Try this:</code>.  The example above is a polynomial with two terms and \"no coefficients\"...</p>",
        "id": 291146347,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658990368
    },
    {
        "content": "<p>With the current implementation, some single-term polynomials do output a <code>Try this:</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">11</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">compute_degree</span><span class=\"o\">,</span>  <span class=\"c1\">-- fails: `Try this: exact polynomial.nat_degree_X_pow _`</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291146525,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658990530
    },
    {
        "content": "<p>Maybe the trace can be optional, using <code>compute_degree?</code>.</p>",
        "id": 291147064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658991108
    },
    {
        "content": "<p>Here is another data-point:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">b</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">show_term</span><span class=\"o\">{</span><span class=\"n\">compute_degree</span><span class=\"o\">}</span>  <span class=\"c1\">-- several pages long,</span>\n  <span class=\"n\">show_term</span>  <span class=\"c1\">-- only one page</span>\n  <span class=\"o\">{</span><span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">nat_degree_mul'</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ne_of_eq_of_ne</span> <span class=\"n\">_</span> <span class=\"n\">one_ne_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]),</span> <span class=\"bp\">←</span> <span class=\"n\">map_one</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"n\">any_goals</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">leading_coeff_linear</span> <span class=\"n\">one_ne_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">any_goals</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">nat_degree_linear</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">one_ne_zero</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I think that you would rarely want to look at the proof generated by <code>compute_degree</code>.  What it does, is a <code>calc</code> proof, except that whenever it encounters a product or a power, it <code>congr</code>s and continues on the two branches (well, only one branch in the case of a power).  I am not sure how to structure this nicely in a human-readable output.</p>",
        "id": 291147795,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658991885
    },
    {
        "content": "<p>If it helps in speeding up certain slow instances, it might be worth supporting it.</p>",
        "id": 291147834,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658991946
    },
    {
        "content": "<p>Sorry, my internet was bad.</p>",
        "id": 291147844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658991958
    },
    {
        "content": "<p>The example above has been cunningly devised to immediately dive into a product split.</p>",
        "id": 291147887,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658991965
    },
    {
        "content": "<p>That message should have been posted ages ago.</p>",
        "id": 291147891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658991966
    },
    {
        "content": "<p>Anyway, your last example convinces me that in general the tracing is a bad idea.</p>",
        "id": 291147903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658991985
    },
    {
        "content": "<p>Ok, I will think about implementing a reasonable trace.  I would not include it in the current PR though, since it add clutter.</p>",
        "id": 291147912,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658992001
    },
    {
        "content": "<p>Also, I would like to see someone use it and complain that it is slow: at the moment, it does not seem bad, after Anne's insightful suggestions.</p>",
        "id": 291147928,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658992029
    },
    {
        "content": "<p>Currently, I think that the main issue to produce a reasonable proof is how products are dealt with.  If the user provides a polynomial of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">7</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"bp\">...</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>(or some permutation), I am sure that I can produce an automated and very slick proof to reduce to <code>a ≠ 0</code>.  But anything in which the leading term involved slightly complicated products will likely end up in garbage.</p>",
        "id": 291148255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658992334
    },
    {
        "content": "<p>For the record:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">7</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span>\n    <span class=\"n\">C</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">compute_degree</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>elaborates in ~1.4s on my computer.</p>",
        "id": 291148465,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658992554
    },
    {
        "content": "<p>Showing the inequality <code>(...).nat_degree ≤ 7</code> elaborates in less than half a second.  Maybe it makes sense to have a version that gives out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">7</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span>\n    <span class=\"n\">C</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">compute_degree_le</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_nat_degree_of_ne_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>  <span class=\"c1\">-- quick</span>\n  <span class=\"n\">simp_coeff</span><span class=\"o\">,</span>\n<span class=\"c1\">--  ⊢ a * 1 ≠ 0</span>\n<span class=\"c1\">--  the * 1 is simply a consequence of me not dealing with the case in which one factor is a (power of) `X`.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>where <code>simp_coeff</code> consumes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">7</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">6</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">coeff</span> <span class=\"mi\">7</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I can tweak the implementation so that in this case it produces a faster proof.</p>",
        "id": 291149314,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658993280
    },
    {
        "content": "<p>Would this be desirable?  It may not be entirely straightforward and would borrow from the other approach that I had, using <code>move_add</code>.</p>",
        "id": 291149434,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658993362
    },
    {
        "content": "<p>The main issue with these arguments is that it is very easy to leave a side-goal of the form <code>nat_degree F ≤ n</code>, which then would have to again call on <code>compute_degree_le</code> (which is considerably faster than <code>compute_degree</code>, btw).</p>",
        "id": 291149598,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658993474
    },
    {
        "content": "<p>Focusing in: this application</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">e</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">nat_degree</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">compute_degree</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>takes 3.5s, does not seem contrived and could probably be sped up.  I will think of how to deal with products more efficiently.</p>",
        "id": 291151828,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658995242
    }
]