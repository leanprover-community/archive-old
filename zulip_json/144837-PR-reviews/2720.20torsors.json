[
    {
        "content": "<p>It seems that <a href=\"https://github.com/leanprover-community/mathlib/issues/2720\">#2720</a> uses a non-standard naming convention for lemmas listing operations top-to-bottom of the syntax tree, not left-to-right. I was going to suggest renaming the lemmas but realized then with our current naming scheme the axioms</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">vadd_vsub</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">p1</span> <span class=\"bp\">+</span><span class=\"err\">ᵥ</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"bp\">-</span><span class=\"err\">ᵥ</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p2</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">vsub_vadd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">+</span><span class=\"err\">ᵥ</span> <span class=\"n\">v</span> <span class=\"bp\">-</span><span class=\"err\">ᵥ</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>should get the same name.</p>",
        "id": 197945903,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589813640
    },
    {
        "content": "<p>Maybe one just puts a <code>'</code> on the one with the brackets?</p>",
        "id": 197946159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589813736
    },
    {
        "content": "<p>Any naming strategy based on a tree traversal order will have ambiguities.  You've listed one for in-order traversal, for pre-order consider <code>(a - b) + c</code> vs. <code>a + (b - c)</code> which would both get the name <code>add_sub</code>.</p>",
        "id": 197946894,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589814047
    },
    {
        "content": "<p>Maybe we should start using xml names</p>",
        "id": 197947406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589814250
    },
    {
        "content": "<p>Maybe (just trying to provoke Patrick here :-) we should move beyond this primitive 1-categorical idea of linear names, and typeset higher-dimensional string diagrams showing the compositional structure of the name.</p>",
        "id": 197947986,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589814507
    },
    {
        "content": "<p>(Heptapod B?)</p>",
        "id": 197948032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1589814532
    }
]