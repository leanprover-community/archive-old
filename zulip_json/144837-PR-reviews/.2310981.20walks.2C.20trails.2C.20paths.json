[
    {
        "content": "<p>This is the first chunk from the rather large <a href=\"https://github.com/leanprover-community/mathlib/pull/8737\">#8737</a>, introducing walks, trails, and paths for simple graphs.</p>\n<p>(After this, there's another chunk <a href=\"https://github.com/leanprover-community/mathlib/pull/11010\">#11010</a>, which probably isn't worth looking at until <a href=\"https://github.com/leanprover-community/mathlib/pull/10981\">#10981</a> is merged.)</p>",
        "id": 265939970,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640283385
    },
    {
        "content": "<p>Is it okay to have commented code in <code>src/combinatorics/simple_graph/eulerian.lean</code>?</p>",
        "id": 265940331,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640283711
    },
    {
        "content": "<p>That's not part of this PR (this one's <a href=\"https://github.com/leanprover-community/mathlib/pull/10981\">#10981</a>), so it's ok <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 265940395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640283740
    },
    {
        "content": "<p>I'm reviewing tomorrow morning. Please don't merge before that <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 265953316,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640293458
    },
    {
        "content": "<p>There's a naming convention question. This is how they are now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">start_mem_support</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">end_mem_support</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span>\n</code></pre></div>\n<p>But one could argue that they should be <code>left_mem_support</code> and <code>right_mem_support</code>.</p>\n<p>Does the docstring for <code>walk</code> have enough force to suggest that <code>u</code> and <code>v</code> are respectively the start and end? or would it be better to switch to a left and right convention?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">A</span> <span class=\"n\">walk</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">sequence</span> <span class=\"n\">of</span> <span class=\"n\">adjacent</span> <span class=\"n\">vertices.</span>  <span class=\"n\">For</span> <span class=\"n\">vertices</span> <span class=\"bp\">`</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"bp\">`</span><span class=\"o\">,</span>\n<span class=\"n\">the</span> <span class=\"n\">type</span> <span class=\"bp\">`</span><span class=\"n\">walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"bp\">`</span> <span class=\"n\">consists</span> <span class=\"n\">of</span> <span class=\"n\">all</span> <span class=\"n\">walks</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"n\">ending</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"n\">v</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>Or would <code>source</code> and <code>target</code> be better still?</p>",
        "id": 266007090,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640357758
    },
    {
        "content": "<p>My thinking is that <code>left</code> and <code>right</code>are universally understood while <code>start</code>/<code>source</code> and <code>end</code>/<code>target</code> are domain-specific and, well, there are at least two options as you've just pointed out.</p>",
        "id": 266007418,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640358083
    },
    {
        "content": "<p>Would anyone care to break the tie here? For more context, thinking about a walk as having a directionality shows up elsewhere, too, for instance \"until\" and \"from\" in these functions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">take_until</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">),</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">take_from</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">),</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">take_spec</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">p.support</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p.take_until</span> <span class=\"n\">u</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">p.take_from</span> <span class=\"n\">u</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 266008913,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640359681
    },
    {
        "content": "<p>I'd call take_from drop_until</p>",
        "id": 266012748,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640364358
    },
    {
        "content": "<p>And remove the hypothesis requirement from the definition. For example, for drop_until, I'd make it a walk of just the last vertex if the vertex in question isn't in the walk</p>",
        "id": 266012816,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640364428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> Thanks for that naming suggestion; that makes it all more <code>list</code>-like.</p>\n<p>I tried removing the <code>support</code> hypothesis, but it seems to be necessary to be able to get the start/end vertices correct for the resulting <code>walk</code>. Here's where it's living right now if you wanted to take a look: <a href=\"https://github.com/leanprover-community/mathlib/blob/fbe9e61cb68db740698bd4b8c706a57e5d8dca6f/src/combinatorics/simple_graph/connectivity.lean#L507\">https://github.com/leanprover-community/mathlib/blob/fbe9e61cb68db740698bd4b8c706a57e5d8dca6f/src/combinatorics/simple_graph/connectivity.lean#L507</a></p>",
        "id": 266014926,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640367276
    },
    {
        "content": "<p>Cool, I'll take a look, but probably only in a couple of days. I see what the problem with my definition was, if the vertex isn't in the walk, you can't make the type.</p>",
        "id": 266015118,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640367562
    }
]