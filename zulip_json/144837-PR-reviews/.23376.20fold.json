[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> have you looked at the changes I've made to category theory? I'm splitting the functions and their laws into <code>has_hom</code> and <code>category</code>. Does this seem like a hard pill to swallow?</p>",
        "id": 135361568,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538937292
    },
    {
        "content": "<p>I would have guessed a different split based on the names</p>",
        "id": 135371027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538956875
    },
    {
        "content": "<p>You mean both the identity and composition staying with <code>category</code>?</p>",
        "id": 135371292,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538957372
    },
    {
        "content": "<p>Yeah. I don't think we really have a math name for a \"non-lawful\" category, though.</p>",
        "id": 135371420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538957574
    },
    {
        "content": "<p>What if we went with: <code>has_hom</code>, <code>has_hom_id</code>, <code>semicategory</code> (this is for <code>has_hom</code> + associativity), and <code>category</code>?</p>",
        "id": 135371620,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538957980
    },
    {
        "content": "<p>What's the difference between a semicategory and a semigroupoid?</p>",
        "id": 135372533,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538959799
    },
    {
        "content": "<p>nothing, afaict</p>",
        "id": 135372686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538960103
    },
    {
        "content": "<p>Cool, that's good to know. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> that sounds like a useful division. Would it be useful to make a class for composition as well?</p>",
        "id": 135372746,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538960214
    },
    {
        "content": "<p>I think these subdivisions should be created need-based rather than just because we can. Is there a use for all these?</p>",
        "id": 135372918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538960532
    },
    {
        "content": "<p>The need for <code>has_hom</code> is so that <code>End</code> can have an identity and a composition when the <code>hom</code> doesn't have laws yet. That's useful so that <code>const (End _)</code> will be an applicative without laws when we don't know that we have a monoid without laws (<code>has_one</code> and <code>has_mul</code>)</p>",
        "id": 135373014,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538960742
    },
    {
        "content": "<p>In this case for a monad (without laws) <code>m</code>, <code>a -&gt; m a</code> can be considered an endomorphism and therefore a monoid without laws.</p>",
        "id": 135373073,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538960830
    },
    {
        "content": "<p>Otherwise, we need <code>m</code> to be a lawful monad for <code>const (End ...)</code> to even have the operation of an applicative</p>",
        "id": 135373081,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1538960870
    },
    {
        "content": "<p>I guess the thing I'm not understanding is the need for all these \"lawless\" things. Why bother talking about them?</p>",
        "id": 135378268,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538971007
    },
    {
        "content": "<p>In a programming context you might want access to the operations without the proof obligations</p>",
        "id": 135378296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538971082
    },
    {
        "content": "<p>That's why <code>monad</code> and <code>lawful_monad</code> are separate</p>",
        "id": 135378325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538971101
    },
    {
        "content": "<p>Plus I know a few examples of things that are \"almost\" monads but are not lawful</p>",
        "id": 135378332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538971127
    },
    {
        "content": "<p>Hmm.. We should just use a meta version of sorry for the proof obligations in those cases!</p>",
        "id": 135378548,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538971520
    },
    {
        "content": "<p>In any case, I appreciate that lawless monads are in wide use.</p>",
        "id": 135378551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538971558
    },
    {
        "content": "<p>So how about today we just create <code>has_hom</code>, and leave everything else on as as-needed basis.</p>",
        "id": 135378597,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538971587
    },
    {
        "content": "<p>It's true we could stub out the proofs, but I would really rather not make a habit of it. Better to promise nothing than to lie about a proof; you can exploit false proofs in the VM to obtain weird crashes and possibly memory unsafety in the future</p>",
        "id": 135378849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972055
    },
    {
        "content": "<p>(I think stubbing out proofs of <em>true</em> things that you don't want to bother proving in a programming context is fine, though)</p>",
        "id": 135378865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538972140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, I'm happy with the split of <code>category</code> into <code>has_hom</code> and <code>category</code>.</p>",
        "id": 135384159,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538982473
    },
    {
        "content": "<p>Is this <a href=\"https://github.com/leanprover/mathlib/issues/376\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/376\">#376</a>?</p>",
        "id": 135384436,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1538982808
    },
    {
        "content": "<p>Yes.</p>",
        "id": 135384486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538982861
    },
    {
        "content": "<p>Nice indexing job <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 135407315,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539009178
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'll keep it that way then. I'm a bit annoyed at the occurrences of <code>has_hom.hom</code> sprinkled here and there. How do you feel about just writing <code>hom</code> and making any other <code>hom</code> definition protected?</p>",
        "id": 135407439,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539009275
    },
    {
        "content": "<p>Hmm, not sure. Can you point to an annoying instance? The problem is that I wasn't expecting the user ever to write <code>hom</code>, because there's notation for it, so it seems awkward to claim the name.</p>",
        "id": 135428255,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539033150
    },
    {
        "content": "<p>Should the <code>example</code> directory of <code>category_theory</code> be renamed to <code>instances</code>?</p>",
        "id": 135565389,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539202341
    },
    {
        "content": "<p>I agree; <code>example</code> makes it sound like ancillary stuff or the lean <code>example</code> keyword</p>",
        "id": 135565479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202450
    },
    {
        "content": "<p>Cool, I'll do that in the fold PR, how about that?</p>",
        "id": 135565868,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1539202846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think this is ready to be merged. The travis build fails but I believe that if you clear the cache, it will be ok. I renamed the <code>example</code> directory to <code>instances</code> and old files are lingering around.</p>",
        "id": 152618394,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1545941037
    }
]