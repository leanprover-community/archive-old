[
    {
        "content": "<p>I think this one is ready.<br>\nI'm still worried about what happens to mathlib after we merge this PR. But if others don't mind... we can lump it in the same release as all the other PRs that are merged into core.</p>",
        "id": 197719314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589561044
    },
    {
        "content": "<p>As long as you volunteer to update mathlib.  You're also the one who knows best what has been removed.  I don't think any of the other changes breaks anything in mathlib.</p>",
        "id": 197722344,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589562400
    },
    {
        "content": "<p>As long as none of the other PRs breaks anything in mathlib...</p>",
        "id": 197722449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589562455
    },
    {
        "content": "<p>I will work on the algebra part</p>",
        "id": 197722468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589562464
    },
    {
        "content": "<p>Oh, there was one breaking change:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gh\">diff --git a/src/tactic/simps.lean b/src/tactic/simps.lean</span>\n<span class=\"gh\">index 3a986891..46831659 100644</span>\n<span class=\"gd\">--- a/src/tactic/simps.lean</span>\n<span class=\"gi\">+++ b/src/tactic/simps.lean</span>\n<span class=\"gu\">@@ -29,8 +29,9 @@ meta def simps_add_projection (nm : name) (type lhs rhs : expr) (args : list exp</span>\n   let decl_value := refl_ap.lambdas args,\n   let decl := declaration.thm decl_name univs decl_type (pure decl_value),\n   add_decl decl &lt;|&gt; fail format!&quot;failed to add projection lemma {decl_name}.&quot;,\n<span class=\"gd\">-  when add_simp $</span>\n<span class=\"gd\">-    set_basic_attribute `simp decl_name tt &gt;&gt; set_basic_attribute `_refl_lemma decl_name tt</span>\n<span class=\"gi\">+  when add_simp $ do</span>\n<span class=\"gi\">+    set_basic_attribute `_refl_lemma decl_name tt,</span>\n<span class=\"gi\">+    set_basic_attribute `simp decl_name tt</span>\n\n /-- Derive lemmas specifying the projections of the declaration.\n   If `todo` is non-empty, it will generate exactly the names in `todo`. -/\n</code></pre></div>",
        "id": 197722657,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589562551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> had a question about <a href=\"https://github.com/leanprover-community/lean/pull/229#discussion_r425921374\">default_dec_tac</a> that was hidden in a resolved comment. Was that settled?</p>",
        "id": 197723653,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589563017
    },
    {
        "content": "<p>A thanks. I didn't see that one.</p>",
        "id": 197724827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589563601
    },
    {
        "content": "<p>We don't need to do that in this PR. At some point I thought that it depended on algebra, but it didn't.</p>",
        "id": 197724883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589563633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Does</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">constant</span> <span class=\"n\">foo_rec</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">k</span><span class=\"o\">]</span>  <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">stupid</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo_rec</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">foo_rec</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">nat_zero_eq_zero</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">do</span>\n<span class=\"n\">cgr</span> <span class=\"err\">←</span> <span class=\"n\">mk_congr_lemma_simp</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo_rec</span><span class=\"o\">),</span>\n<span class=\"n\">type_check</span> <span class=\"n\">cgr</span><span class=\"bp\">.</span><span class=\"k\">proof</span>\n</code></pre></div>\n\n\n<p>depend on <code>group</code>. Not really, right? I can change it to <code>preorder</code> if I want, right?</p>",
        "id": 197727266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564758
    },
    {
        "content": "<p>Or <code>has_one</code></p>",
        "id": 197727329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564781
    },
    {
        "content": "<p>Yes.</p>",
        "id": 197727417,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589564829
    },
    {
        "content": "<p>Ok, pushed</p>",
        "id": 197727515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589564869
    },
    {
        "content": "<p>Hooray! It passed the linter. CI is now at the leanchecker stage.</p>",
        "id": 197745428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589572766
    },
    {
        "content": "<p>Approved. Thanks for the hard work everyone!</p>",
        "id": 197747364,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589573825
    },
    {
        "content": "<p>Can someone exactly what has been going on recently?</p>",
        "id": 197747405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589573853
    },
    {
        "content": "<p>See the commit message</p>",
        "id": 197747433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589573874
    },
    {
        "content": "<p>But basically: <code>{x}</code> is now what you want it to be. And the associativity for <code>{x,y,z}</code> also changed, so it's better now.</p>",
        "id": 197747502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589573900
    },
    {
        "content": "<p>Can someone check whether this will conflict with <a href=\"https://github.com/leanprover-community/mathlib/issues/2646\">#2646</a> or <a href=\"https://github.com/leanprover-community/mathlib/issues/2689\">#2689</a>?</p>",
        "id": 197747527,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589573926
    },
    {
        "content": "<p>Those two are also in the queue.</p>",
        "id": 197747538,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589573938
    },
    {
        "content": "<p>I fear that I won't be able to check before bed time</p>",
        "id": 197747583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589573971
    },
    {
        "content": "<p>OK, we can also just let bors tell us if something breaks.</p>",
        "id": 197747623,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1589573997
    },
    {
        "content": "<p>Did we hear from Leo about copyrights?</p>",
        "id": 197757231,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589579986
    },
    {
        "content": "<p>I mean copyrights on files moved from core to mathlib, especially ones we merge their contents in our files.</p>",
        "id": 197757315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589580024
    },
    {
        "content": "<p>I did not ask him anything. If someone wants to tell me what to ask him this would be great. I am not really following what is going on here</p>",
        "id": 197757407,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589580093
    },
    {
        "content": "<p>All I know is that people are super-excited about v3.13</p>",
        "id": 197757424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589580109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23229/near/197757407\">said</a>:</p>\n<blockquote>\n<p>I did not ask him anything. If someone wants to tell me what to ask him this would be great. I am not really following what is going on here</p>\n</blockquote>\n<p>I was half-following, and I think the question is:<br>\n\"We're moving stuff from core to mathlib. A bunch of it is copyrighted by (Leo? Microsoft?). Do you / Microsoft have any particular ideas on what we should or should not do about the copyright declarations in the files?\"</p>",
        "id": 197759639,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589581797
    },
    {
        "content": "<p>and maybe someone had a specific suggestion, so the question could be extended with \"Our first thought was to do <code>this</code>, is that okay or should we do something different?\"</p>",
        "id": 197759730,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589581838
    },
    {
        "content": "<p>Lean is apache licensed, so attribution is required but otherwise reuse should be fine</p>",
        "id": 197759863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589581947
    },
    {
        "content": "<p>So, what are we going to do:</p>\n<ul>\n<li>add Microsoft to (c) line of every file with code from Lean core;</li>\n<li>add Microsoft to Authors: line of ...;</li>\n<li>something else?</li>\n</ul>",
        "id": 197766151,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589588442
    },
    {
        "content": "<p>BTW, (c) one author followed by \"Authors: ...\" looks strange to me.</p>",
        "id": 197766186,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589588504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23229/near/197759639\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23229/near/197757407\">said</a>:</p>\n<blockquote>\n<p>I did not ask him anything. If someone wants to tell me what to ask him this would be great. I am not really following what is going on here</p>\n</blockquote>\n<p>I was half-following, and I think the question is:<br>\n\"We're moving stuff from core to mathlib. A bunch of it is copyrighted by (Leo? Microsoft?). Do you / Microsoft have any particular ideas on what we should or should not do about the copyright declarations in the files?\"</p>\n</blockquote>\n<p>I am happy to ask Leo about this but I need to know what the exact question is. I don't really want to say \"copyright you or MS or something\" and I don't know which files we're talking about.</p>",
        "id": 197766265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589588564
    },
    {
        "content": "<p>We are talking about files removed from core in <a href=\"https://github.com/leanprover-community/lean/issues/229\">lean#229</a>, mainly algebraic definitions/theorems.</p>",
        "id": 197766310,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589588640
    },
    {
        "content": "<p>They are copyright MS in lean 3.4.2</p>",
        "id": 197766352,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589588659
    },
    {
        "content": "<p>Clearly, if we just resurrect a file in <code>mathlib</code>, then we preserve the copyright header.</p>",
        "id": 197766380,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589588730
    },
    {
        "content": "<p>So is the question about files copyright Leo, copyright MS, or both?</p>",
        "id": 197766396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589588757
    },
    {
        "content": "<p>I see, I can see both kinds of file.</p>",
        "id": 197766466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589588810
    },
    {
        "content": "<p>Wait a minute. I'm looking at the copyright headers.</p>",
        "id": 197766468,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589588814
    },
    {
        "content": "<p>What happens to e.g. <code>src/library/arith_instance.cpp</code>? It's C++ code. Surely that's not going into mathlib?</p>",
        "id": 197766494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589588841
    },
    {
        "content": "<p>C++ definitely doesn't go to mathlib</p>",
        "id": 197766667,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589589016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Why did you have to change app builder in this PR?</p>",
        "id": 197766710,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589589065
    },
    {
        "content": "<p>Is there an example of a lean file which will go essentially unchanged into mathlib, and which has \"copyright Microsoft\" written in it?</p>",
        "id": 197766730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589589096
    },
    {
        "content": "<p><code>init/algebra/group</code>?</p>",
        "id": 197766823,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589589232
    },
    {
        "content": "<p>/me is going to the kitchen</p>",
        "id": 197766888,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589589295
    },
    {
        "content": "<p>And is the question simply \"do you mind if we move a file unchanged from Lean 3.12 into mathlib\" or are there some more subtle questions?</p>",
        "id": 197767000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589589425
    },
    {
        "content": "<p>There is a more subtle question: what should we do when we merge code from this file with our code in mathlib?</p>",
        "id": 197767565,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589590088
    },
    {
        "content": "<p>According to Apache License, we clearly may move code to mathlib without asking.</p>",
        "id": 197767578,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589590123
    },
    {
        "content": "<p>The only question is what sort of attribution is OK.</p>",
        "id": 197767585,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589590146
    },
    {
        "content": "<p>Ok I asked him something</p>",
        "id": 197768713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589591642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/lean.23229/near/197766710\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> Why did you have to change app builder in this PR?</p>\n</blockquote>\n<p>I have no idea. Gabriel did that so that I could move forward again <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 197775270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589601712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> From a cursory glance it seems to me it was entirely just deleting (unused) c++ functions which reference removed lemmas, barring a single change here: <a href=\"https://github.com/leanprover-community/lean/pull/229/files?file-filters%5B%5D=.cpp&amp;file-filters%5B%5D=.h#diff-672f44b0651a1af0d7da661a06ca7295L926\">https://github.com/leanprover-community/lean/pull/229/files?file-filters%5B%5D=.cpp&amp;file-filters%5B%5D=.h#diff-672f44b0651a1af0d7da661a06ca7295L926</a><br>\nwhich is presumably non-functional.</p>",
        "id": 197808011,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1589653110
    }
]