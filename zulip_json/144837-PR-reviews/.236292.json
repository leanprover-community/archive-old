[
    {
        "content": "<p>Could someone who knows about tactics check that the tagging of <code>@[mono]</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/6292\">#6292</a> is done correctly?  Otherwise, looks good to go.</p>",
        "id": 228259645,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614615948
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span></p>",
        "id": 228259657,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614615954
    },
    {
        "content": "<p>Has it been tested to work? I don't know if/how <code>mono</code> deals with the <code>integrable</code> side conditions</p>",
        "id": 228260829,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614616355
    },
    {
        "content": "<p>And unfortunately there's no doc for <code>@[mono]</code></p>",
        "id": 228260859,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1614616366
    },
    {
        "content": "<p>That makes sense.  <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>, could you please add one or two tests to<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/test/monotonicity/test_cases.lean\">https://github.com/leanprover-community/mathlib/blob/master/test/monotonicity/test_cases.lean</a><br>\n?</p>",
        "id": 228274376,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614620849
    },
    {
        "content": "<p>Also, is there a reason you chose to give </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[mono]</span> <span class=\"kd\">lemma</span> <span class=\"n\">set_integral_mono</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"n\">integral_mono</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>the <code>@[mono]</code> tag rather than say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set_integral_mono_ae_restrict</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≤ᵐ</span><span class=\"o\">[</span><span class=\"n\">μ.restrict</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∫</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span> <span class=\"o\">:=</span>\n<span class=\"n\">integral_mono_ae</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>?  Likewise for the other lemma families.  I just have no idea what does/doesn't work with <code>@[mono]</code>.</p>",
        "id": 228275242,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614621136
    },
    {
        "content": "<p>To be honest, I don't really know either <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>My decision rule here was quite simple : I assumed (maybe I'm wrong) that <code>mono</code> is supposed to work only with \"pure\" <code>≤</code>, not <code>≤ᵐ</code> or <code>≤ᶠ</code>, so I just put the tag on lemmas that were only assuming <code>≤</code>. But again, maybe that's just false.</p>\n<p>I did a bit of testing with the tags I had put, and found two problems :</p>\n<ul>\n<li>the first one was easily solved : putting <code>@[mono]</code> on both <code>integral_mono</code> and <code>set_integral_mono</code> is stupid, because those are really the same lemma (except the second one only accepts measure looking like <code>μ.restrict s), and it was confusing </code>mono`. Now, the following works perfectly :  </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">real.exp</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"bp\">∫</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">real.exp</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">mono</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">real.continuous_exp.integrable_on_compact</span> <span class=\"n\">compact_Icc</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">real.continuous_exp.comp</span> <span class=\"bp\">$</span> <span class=\"n\">continuous_add_right</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">integrable_on_compact</span> <span class=\"n\">compact_Icc</span> <span class=\"o\">},</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n  <span class=\"n\">mono</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<ul>\n<li>the second issue is stranger : if I replace <code>in Icc 0 1</code> by <code>in 0..1</code> in the above example, the first mono takes ages and I eventually get an \"excessive memory usage\" error (note that I have limited the memory Lean is allowed to use, but that doesn't explain the whole thing). I can't see where that comes from, so it would be great if someone who knows mono could explain what is wrong, and what is the good decision rule for \"should I put <code>@[mono]</code> on this lemma\"</li>\n</ul>",
        "id": 228407513,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1614691123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>, was it you who wrote <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#mono\">tactic#mono</a>?  Are you able to take a look?</p>\n<p>We can also just omit the <code>@[mono]</code> tag on the <code>interval_integral</code> version of the lemma.</p>",
        "id": 228506318,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1614727858
    },
    {
        "content": "<p>Yes indeed I wrote it. I'll have a look</p>",
        "id": 228739432,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1614849436
    },
    {
        "content": "<p>What was the issue with <code>mono</code>? I don't see that part of the conversation</p>",
        "id": 229201040,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1615135727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236292/near/228407513\">said</a>:</p>\n<blockquote>\n<ul>\n<li>the second issue is stranger : if I replace <code>in Icc 0 1</code> by <code>in 0..1</code> in the above example, the first mono takes ages and I eventually get an \"excessive memory usage\" error (note that I have limited the memory Lean is allowed to use, but that doesn't explain the whole thing). I can't see where that comes from, so it would be great if someone who knows mono could explain what is wrong, and what is the good decision rule for \"should I put <code>@[mono]</code> on this lemma\"</li>\n</ul>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Thanks for looking at this!  It's this issue mentioned by Anatole.</p>",
        "id": 229202265,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615136843
    },
    {
        "content": "<p>You would need to tag <a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval_integral.integral_mono\">docs#interval_integral.integral_mono</a> with <code>@[mono]</code> to see the issue.</p>",
        "id": 229202389,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1615136953
    },
    {
        "content": "<p>Ok, I'll see what's going on. Maybe I could clear up the documentation</p>",
        "id": 229211575,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1615145245
    }
]