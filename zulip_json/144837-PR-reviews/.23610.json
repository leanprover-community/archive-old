[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> you know about coinductive and tests. Could you have a look at our porblem with <a href=\"https://github.com/leanprover/mathlib/pull/610\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/610\">https://github.com/leanprover/mathlib/pull/610</a>?</p>",
        "id": 156396061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547842239
    },
    {
        "content": "<p>I don't think it's about coinductive predicates. I've been hitting this issue with my fold PR. I think there's something fishy about how we moved everything into <code>src</code> and Travis' cache seems all messed up</p>",
        "id": 156396171,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1547842364
    },
    {
        "content": "<p>Sorry, I only read Bryan's comment without looking at the Travis output. Indeed it looks this is again Travis cache. I don't understand why this is still an issue after several commits with the new <code>src</code></p>",
        "id": 156396326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547842521
    },
    {
        "content": "<p>Me neither. I've tried several approaches for being thorough at clearing all the olean files. To no avail</p>",
        "id": 156396536,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1547842691
    },
    {
        "content": "<p>There might also be a cache issue, but the issue I was highlighting is that the test file which I copied from base Lean spits out a bunch of output from <code>#check</code> and <code>#print</code> statements and I think mathlib tests currently don't use that style. One solution would just be to comment all those lines out, but I'm not sure if we want to replace them with other checks.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thoughts?</p>",
        "id": 156396812,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1547842962
    },
    {
        "content": "<p>Are you using those prints as a way of checking what your code does?</p>",
        "id": 156398120,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1547844228
    },
    {
        "content": "<p>I didn't write the code, <span class=\"user-mention\" data-user-id=\"110294\">@Johannes HÃ¶lzl</span> did, but I assume that's the case. This PR is just to move stuff that was removed from lean 3.4.2 into mathlib (see <a href=\"https://github.com/leanprover/lean/commit/e79cb3f2c4987dcfbec8e3e15eb83837cabe1058\" target=\"_blank\" title=\"https://github.com/leanprover/lean/commit/e79cb3f2c4987dcfbec8e3e15eb83837cabe1058\">this commit</a> and <a href=\"https://github.com/leanprover/lean/pull/1989\" target=\"_blank\" title=\"https://github.com/leanprover/lean/pull/1989\">this PR</a>).</p>",
        "id": 156398526,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1547844586
    },
    {
        "content": "<p>I confirm again that removing all olean and compiling this branch works here. Why isn't this merged?</p>",
        "id": 156434642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547899315
    },
    {
        "content": "<p>I think it's a very bad omen for the Lean 4 transition that mathlib maintainers are not able to seamlessly move from Lean 3.4.1 to Lean 3.4.2</p>",
        "id": 156434685,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547899358
    },
    {
        "content": "<p>A lot of things are happening at once at the minute, which is of course great, but I'm sure adds to the confusion</p>",
        "id": 156434911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547899840
    },
    {
        "content": "<p>Last I checked there is still an outstanding issue with this PR, the <code>#check</code> statements</p>",
        "id": 156455620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547939063
    },
    {
        "content": "<p>lean repo uses a different test mechanism, where the lean file is compiled and the output is checked against an expected output. We just have no output tests that fail if something is wrong</p>",
        "id": 156455636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547939117
    },
    {
        "content": "<p>Right. Would it be enough to replace the <code>#check (term : type)</code> lines with <code>example (term : type) : true := trivial</code> ?</p>\n<p>Then we would just need to figure out what to do with the <code>#print</code> statements.</p>",
        "id": 156456183,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1547940214
    },
    {
        "content": "<p>I just pushed something that does basically that</p>",
        "id": 156456237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547940345
    },
    {
        "content": "<p>I used <code>example : type := term</code></p>",
        "id": 156456239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547940359
    },
    {
        "content": "<blockquote>\n<p>Last I checked there is still an outstanding issue with this PR, the <code>#check</code> statements</p>\n</blockquote>\n<p>If this was an issue, why didn't you say it? People could have tried to fix it.</p>",
        "id": 156496297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548015854
    }
]