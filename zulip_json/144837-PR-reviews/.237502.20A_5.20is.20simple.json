[
    {
        "content": "<p>I was expecting to find the \"count conj classes\" proof. But this seems to be a different proof. What is the high-level argument? (This should probably be in a module doc.)<br>\nI wish most of this proof could be automated, but that's probably not reasonable atm.</p>",
        "id": 238116371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620641654
    },
    {
        "content": "<p>(cc: <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> <span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span>)</p>",
        "id": 238116399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620641673
    },
    {
        "content": "<p>In general, I'd say nontrivial math arguments should either have a lot of comments in them saying what is going on, or written with a more litterate style that makes it obvious (with a lot of <code>have</code>, or <code>show</code>, or <code>suffices</code>, or <code>obtain</code>) -- or both, maybe. For instance, Line 276 reads</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">gA</span><span class=\"o\">⟩,</span> <span class=\"n\">gH</span><span class=\"o\">,</span> <span class=\"n\">g1</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Hb</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Just adding the type, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">obtain</span> <span class=\"o\">⟨⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">gA</span><span class=\"o\">⟩,</span> <span class=\"n\">gH</span><span class=\"o\">,</span> <span class=\"n\">g1</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">alternating_group</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">5</span><span class=\"o\">)),</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span> <span class=\"bp\">∧</span> <span class=\"n\">g</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">:=</span> <span class=\"n\">Hb</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>helps a lot the reader.</p>",
        "id": 238117911,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620642570
    },
    {
        "content": "<p>I also agree that this terse comment-free style which we mathematicians inherited from Johannes and Mario should not always be the norm nowadays</p>",
        "id": 238118040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620642632
    },
    {
        "content": "<p>(I should also say that your work on Abel-Ruffini is fantastic!)</p>",
        "id": 238118071,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620642661
    },
    {
        "content": "<p>I very much agree with Sébastien.</p>",
        "id": 238119164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620643244
    },
    {
        "content": "<p>I can add comments later to the module doc and throughout the doc itself, but for now as a quick summary, the idea is to show that any nontrivial normal subgroup of A5 contains a 3-cycle. To do that, we pick an element of that nontrivial normal subgroup, and do casework on the size of the largest cycle in that element. If that cycle is a 5-cycle, then the whole permutation is a 5-cycle, and we calculate that we can conjugate-and-multiply a particular 5-cycle to get a 3-cycle. If it's a 4-cycle, there's a contradiction. If it's a 3-cycle, then squaring our permutation is a 3-cycle. If it's a 2-cycle, then our permutation is conjugate to (12)(34), and we check that a particular permutation of this cycle type can generate a 3-cycle.</p>",
        "id": 238169963,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620663540
    },
    {
        "content": "<p>I will say though that I thought I would originally prove all An (for n&gt;4) are simple this way, hence wanting to avoid doing conj class counting, but then there was just a little too much explicit computation in that proof, so I switched track to just proving it for A5, and then later I'd do an induction... I think the induction will have to include some of these ideas, but the conjugacy class counting may be necessary anyway eventually, for say representation theory.</p>",
        "id": 238171022,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620663946
    },
    {
        "content": "<p>I can also include a link to a source following this reasoning (but for all large A_n): <a href=\"https://people.reed.edu/~jerry/332/08ansim.pdf\">https://people.reed.edu/~jerry/332/08ansim.pdf</a></p>",
        "id": 238171102,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620663969
    },
    {
        "content": "<p>It may well actually prove reasonable to follow this explicit 3-cycle computation approach for large A_n once <span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> 's work gets far enough</p>",
        "id": 238171202,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620664010
    },
    {
        "content": "<p>I think it would be a great test case to see if the conj-class-counting proof can be made really short and slick.</p>",
        "id": 238172019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620664335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> thanks for explaining the idea behind the proof!</p>",
        "id": 238172200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620664406
    },
    {
        "content": "<p>I think that counting conjugacy classes in general could require <em>more</em> dependence on explicit list representations than this, because the proof I'm thinking of really involves an explicit bijection of lists. There may be a way around that though, particularly if we just want to do A5.</p>",
        "id": 238180734,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620667784
    },
    {
        "content": "<p>If there is a decent orbit-stabilizer way to do it, then that's definitely worth developing.</p>",
        "id": 238181827,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620668186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Did you consider using Iwasawa's criterion: <a href=\"https://kconrad.math.uconn.edu/blurbs/grouptheory/PSLnsimple.pdf\">https://kconrad.math.uconn.edu/blurbs/grouptheory/PSLnsimple.pdf</a></p>",
        "id": 238190572,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1620671572
    },
    {
        "content": "<p>I haven’t considered that, but that also requires showing that permutations of cycle type (2,2) normal-generate A5, which is a large fraction of my existing proof (at least, that exact argument does)</p>",
        "id": 238191549,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620671963
    },
    {
        "content": "<p>It does look like a good thing to work on sooner or later, if we want to keep classifying easy simple groups</p>",
        "id": 238195818,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620673704
    },
    {
        "content": "<p>In retrospect, the right way to start this project, as with all projects, would be to read through all possibly relevant Keith Conrad notes.</p>",
        "id": 238685988,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620942387
    },
    {
        "content": "<p>I think the best strategy for tackling An in general is probably the second proof here <a href=\"https://kconrad.math.uconn.edu/blurbs/grouptheory/Ansimple.pdf\">https://kconrad.math.uconn.edu/blurbs/grouptheory/Ansimple.pdf</a></p>",
        "id": 238686030,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620942419
    },
    {
        "content": "<p>It basically only requires tools I have and two base cases, A5 and A6</p>",
        "id": 238686094,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620942444
    },
    {
        "content": "<p>You should get Keith onto the chat :-) I gave a talk at UMD last week and he was there, he asked a bunch of questions about what could be done</p>",
        "id": 238689107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620944040
    },
    {
        "content": "<p>I’ve commented my PR more - please let me know if you want further comments</p>",
        "id": 238709773,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620959622
    },
    {
        "content": "<p>I’ll also check out alternate approaches</p>",
        "id": 238709782,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620959640
    },
    {
        "content": "<p>I have a somewhat short proof that the commutator of the alternating group is itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">commutator</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⁅</span><span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">alternating_group</span> <span class=\"n\">α</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"n\">alternating_group</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">general_commutator_le_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">closure_three_cycles_eq_alternating.symm</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">closure_le</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">s5</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">finset.univ.exists_smaller_set</span> <span class=\"mi\">5</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">card_of_subtype</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">iff.refl</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"n\">s5</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_conj</span> <span class=\"o\">(</span><span class=\"n\">extend_domain</span> <span class=\"o\">(</span><span class=\"n\">fin.cycle_range</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_conj_iff_cycle_type_eq</span><span class=\"o\">,</span> <span class=\"n\">hg.cycle_type</span><span class=\"o\">,</span> <span class=\"n\">cycle_type_extend_domain</span><span class=\"o\">,</span>\n      <span class=\"n\">fin.cycle_type_cycle_range</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">is_conj_iff.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">set_like.mem_coe.2</span> <span class=\"o\">((</span><span class=\"n\">general_commutator_normal</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">conj_mem</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">general_commutator_def</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">subset_closure</span> <span class=\"o\">⟨(</span><span class=\"n\">extend_domain</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">swap</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">extend_domain</span> <span class=\"o\">(</span><span class=\"n\">swap</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">swap</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_alternating_group</span><span class=\"o\">,</span> <span class=\"n\">sign_extend_domain</span><span class=\"o\">],</span>\n    <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_alternating_group</span><span class=\"o\">,</span> <span class=\"n\">sign_extend_domain</span><span class=\"o\">],</span>\n    <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">extend_domain_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_rev</span><span class=\"o\">,</span> <span class=\"n\">extend_domain_inv</span><span class=\"o\">,</span> <span class=\"n\">swap_inv</span><span class=\"o\">],</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec_trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 238912759,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1621099368
    },
    {
        "content": "<p>This maybe lends support for trying some kind of transitivity proof (by the Iwasawa criterion or similar) and would certainly make a simple proof of non-solvability.</p>",
        "id": 238912808,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1621099438
    }
]