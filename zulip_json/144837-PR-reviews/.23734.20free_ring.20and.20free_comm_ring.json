[
    {
        "content": "<p>Suggestions / Discussions? Do we like polynomials? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 158735716,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550395086
    },
    {
        "content": "<p>Isn't a free comm ring an integer polynomial?</p>",
        "id": 158735867,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550395418
    },
    {
        "content": "<p>they're isomorphic</p>",
        "id": 158735870,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550395431
    },
    {
        "content": "<p>So why define them twice?</p>",
        "id": 158735921,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550395474
    },
    {
        "content": "<p>This sounds like an implementation issue to me so I don't think I'll be much help</p>",
        "id": 158736048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550395745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> because here we don't need <code>\\a</code> discrete for <code>free_comm_ring \\a</code> to be a <code>comm_ring</code></p>",
        "id": 158736128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550395865
    },
    {
        "content": "<p>Does discrete mean decidable equality?</p>",
        "id": 158736186,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550395957
    },
    {
        "content": "<p>yes</p>",
        "id": 158736205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550395987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> when you write a PR like this you should more clearly state your intention. Github PR's provide a comment field for a reason. I guess your idea is to replace the current <code>data.polynomial</code> with this implementation?</p>",
        "id": 158736616,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1550396667
    },
    {
        "content": "<p>well I think <code>free_ring</code> is important in and of itself; I see a lot of work that has to be done if one wants to replace <code>data.polynomial</code> with this implementation</p>",
        "id": 158736670,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550396764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> don't we like free functors?</p>",
        "id": 158736743,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550396946
    },
    {
        "content": "<p>He's talking about <code>free_comm_ring</code> I'm guessing.</p>",
        "id": 158736746,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550396983
    },
    {
        "content": "<p>Yes, the title is <code>free_comm_ring</code>. If this is added to mathlib I think we should replace <code>polynomial</code> and <code>mv_polynomial</code> otherwise we will have a lot of duplicate work</p>",
        "id": 158736803,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1550397045
    },
    {
        "content": "<p>changed thread title</p>",
        "id": 158736909,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550397299
    },
    {
        "content": "<p>I am talking about both</p>",
        "id": 158736917,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550397307
    },
    {
        "content": "<p>I'm already confused about <code>free_abelian_group α</code>. What's the difference between it at the add_comm_group pi_instance on <code>α → ℤ</code>?</p>",
        "id": 158738839,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1550400981
    },
    {
        "content": "<p>you need decidable equality on <code>\\a</code> for the latter</p>",
        "id": 158738968,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550401230
    },
    {
        "content": "<p>Free abelian groups need to be finitely supported functions. So <code>α →₀ ℤ</code> would be isomorphic.</p>",
        "id": 158738972,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550401240
    },
    {
        "content": "<p>But decidable equality isn't a very good justification to define things twice.</p>",
        "id": 158738983,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550401268
    },
    {
        "content": "<p>Where is decidable equality needed?</p>",
        "id": 158738999,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1550401315
    },
    {
        "content": "<p>The support of the sum of two finsupps is the union of the supports. You need decidable equality for union of finsets.</p>",
        "id": 158739131,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550401505
    },
    {
        "content": "<p>I see, thanks</p>",
        "id": 158739188,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1550401612
    },
    {
        "content": "<p>Kenny I think used multisets, and effectively quotiented by extensionality, and ignoring zeros. I'm not a fan of this approach. I don't think computing on types without decidable equality is very often useful, and you are slowing down the computations quite a bit with this approach I guess as well.</p>",
        "id": 158739246,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550401713
    },
    {
        "content": "<p>For actual computations, neither approach is much good</p>",
        "id": 158739511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550402219
    },
    {
        "content": "<p>we would need an explicit computational type that looks more like some GAP data type</p>",
        "id": 158739521,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550402239
    },
    {
        "content": "<p>so the \"computable\" marker is not much more than a gimmick in any case</p>",
        "id": 158739572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550402322
    },
    {
        "content": "<p>I think maybe we should just remove the <code>decidable_eq</code> constraint from <code>finsupp</code></p>",
        "id": 158739630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550402404
    },
    {
        "content": "<p>It depends how hard the computations are.</p>",
        "id": 158739644,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550402416
    },
    {
        "content": "<p>I think it's one of the factors in why typeclass inference on polynomials is so slow</p>",
        "id": 158739647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550402432
    },
    {
        "content": "<p>For provable computations we should use <code>ring</code> or something that manipulates polynomial expressions</p>",
        "id": 158739656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550402478
    },
    {
        "content": "<p>and computability doesn't matter for this</p>",
        "id": 158739661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550402496
    },
    {
        "content": "<p>There was some talk about removing finsupp, and replacing it with dfinsupp, which is a quotient and doesn't use decidable equality. In any case, I'm not in favour of having two different versions of the same thing, just because of some decidable equality issue.</p>",
        "id": 158739709,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550402566
    },
    {
        "content": "<p>I agree there</p>",
        "id": 158739712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550402582
    },
    {
        "content": "<p>I don't know whether kenny's latest version of <code>free_comm_ring</code> is better than <code>polynomial</code> but there should only be one</p>",
        "id": 158739721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550402614
    },
    {
        "content": "<p>Also, I sneaked in some monad instance; should I do that?</p>",
        "id": 158740867,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550404702
    },
    {
        "content": "<p>free_comm_ring is faster than mv_polynomial in my usecase</p>",
        "id": 159094840,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550776004
    }
]