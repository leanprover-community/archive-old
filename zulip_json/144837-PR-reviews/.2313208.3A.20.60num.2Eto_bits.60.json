[
    {
        "content": "<p>The following def:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">of_bits</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">num</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">L</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">pos_num.equiv_list_bool.symm</span> <span class=\"n\">L.init</span>\n</code></pre></div>\n<p>was met with this comment:</p>\n<blockquote>\n<p>This function does not handle lists with trailing ff correctly. It should be defined directly by recursion</p>\n</blockquote>\n<p>I'm wondering what the right definition is supposed to be. My guess is that the following definition would be preferable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">of_bits'</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">bool</span> <span class=\"bp\">â†’</span> <span class=\"n\">num</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">tt</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">num.bit1</span> <span class=\"o\">(</span><span class=\"n\">of_bits'</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">ff</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">num.bit0</span> <span class=\"o\">(</span><span class=\"n\">of_bits'</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The only issue is that this breaks <code>of_bits_strict_mono</code> which is very useful for defining well-founded recursion on functions that more naturally act on <code>list bool</code>. In particular, the efficient mkpair function, which is more naturally defined on <code>list bool</code>, uses the monotonicity of  <code>of_bits</code> to ensure that for <code>0 &lt; a</code>, <code>(unpair' a).fst &lt; a</code> and <code>(unpair' a).snd &lt; a</code> (both of which are critical if we want to define recursive functions on nat encodings). I think these two remain true even with the new definition but for more complicated reasons, because we no longer have that just because the binary encoding gets shorter, the actual number gets shorter. I just wanted to confirm that this is what we wanted before making the change.</p>\n<p>Finally, with regards to <code>nat.size</code>, I think I might have asked about this earlier, but in fact, we should do even more and connect <code>num.to_bits</code> to <code>nat.bits</code> (and then state that <code>(nat.bits n).length = nat.size n</code>). Unfortunately, I could not find any API about <code>nat.size</code> and <code>nat.bits</code>, and the current state of bit manipulation of nats is a bit disorganized I think (for example, there is the bit manipulation in <code>computability/encoding</code>, which is now moved to <code>num/to_bits</code> in this PR; there is <code>num.bitwise</code>;  there is <code>data/nat/bitwise</code> and <code>nat.bitwise</code> in Lean itself; there is <code>data.bitvec</code>; and finally there is <code>digits 2</code>. None of these, AFAICT, talk to each other at all, and this really needs to be refactored I think. Still, this will probably be a completely different PR -- I don't think it would make sense to do it in this one.</p>",
        "id": 281203269,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1651690607
    },
    {
        "content": "<p>I don't think <code>of_bits_strict_mono</code> should hold, at least not the way it is currently stated. What is <code>unpair'</code>?</p>",
        "id": 281204359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651691052
    },
    {
        "content": "<p>the simplest equivalent-enough statement to <code>of_bits_strict_mono</code> is <code>l1.length &lt; l2.length -&gt; of_bits (l1 ++ [tt]) &lt; of_bits (l2 ++ [tt])</code></p>",
        "id": 281204501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651691133
    },
    {
        "content": "<p>I forgot that <code>nat.bits</code> existed but given that it does I think <code>num.to_bits</code> should be renamed to <code>num.bits</code> and the main theorem of the file should be the equivalence of <code>num.bits</code> and <code>nat.bits</code></p>",
        "id": 281205381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651691571
    },
    {
        "content": "<p>it's true that <code>nat.bitwise</code> and <code>num.bitwise</code> are not directly connected to each other but these functions mainly exist only as auxiliaries for <code>nat.lor</code>, <code>nat.land</code> etc</p>",
        "id": 281205561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651691657
    },
    {
        "content": "<p>the stuff about arbitrary bases, <code>nat.log</code> and <code>digits</code> has much heavier dependencies and I would avoid it</p>",
        "id": 281205653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651691711
    },
    {
        "content": "<p><code>data.bitvec</code> is just not very well written (and very old) and I would avoid it too</p>",
        "id": 281205702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651691736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2313208.3A.20.60num.2Eto_bits.60/near/281204359\">said</a>:</p>\n<blockquote>\n<p>What is <code>unpair'</code>?</p>\n</blockquote>\n<p>Sorry, <code>unpair'</code> is the pairing function with logarithmic overhead in the number of bits (or log-log overhead as a <code>nat</code>), which I wanted to use to eventually define polytime functions. It is defined in this PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/13213\">https://github.com/leanprover-community/mathlib/pull/13213</a>, and we discussed it here: <a href=\"#narrow/stream/113488-general/topic/Is.20.60to_partrec.2Ecode.60.20actually.20efficient.3F\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Is.20.60to_partrec.2Ecode.60.20actually.20efficient.3F</a></p>",
        "id": 281209466,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1651693407
    },
    {
        "content": "<p>See the lemmas <code>unpair'_fst_lt</code> and <code>unpair'_snd_lt</code> in that PR for where <code>of_bits_strict_mono</code> is used</p>",
        "id": 281209727,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1651693531
    },
    {
        "content": "<p>I think in <code>unpair'</code> it's fine since the definition explicitly uses a <code>++ [tt]</code> somewhere in there</p>",
        "id": 281211600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1651694382
    },
    {
        "content": "<p>Why is the linter failing? It says<br>\n<code>elan: command failed: curl -sSfL https://github.com/leanprover/elan/releases/download//elan-x86_64-unknown-linux-gnu.tar.gz -o /tmp/tmp.LdkCqitUdL/elan-init.tar.gz</code></p>",
        "id": 281256169,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1651730735
    },
    {
        "content": "<p>This is a problem we have had for a few days. The solution is to merge master, where the problem has been solved.</p>",
        "id": 281256306,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1651730875
    }
]