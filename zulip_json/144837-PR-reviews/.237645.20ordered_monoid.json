[
    {
        "content": "<p>Dear All,</p>\n<p>the second <code>ordered</code> refactor PR just finished building successfully.  I would like to add a couple of extra lemmas about monotonicity.  However, before pushing them and getting CI to work on the PR for a <em>long</em> time, I would like to get an opinion.</p>\n<p>Several existing lemmas are now simple applications of new lemmas.  As such, I would prefer to eliminate them, rather than keeping them floating around.  Is there some reason to maintain the old names?  Note that in all(?) cases, I have changed their statements to the more general setting.  Notable exceptions are the <code>norm_num</code> and <code>linarith</code> lemmas: these have scrupulously been preserved.</p>\n<p>If you simply want to have a clickable link, the \"redundant lemmas\"  start <a href=\"https://github.com/leanprover-community/mathlib/blob/395f4e2b240143f5c8896f2e8c8ffbaf6ab371fe/src/algebra/ordered_group.lean#L360\">here</a>.</p>\n<p>Thanks!</p>",
        "id": 240326841,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622036796
    },
    {
        "content": "<p>You're asking about whether we should have <code>P -&gt; Q</code> if we already have <code>P &lt;-&gt; Q</code>? I would say that in many cases it is useful to also have the one way functions.</p>",
        "id": 240327505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622037092
    },
    {
        "content": "<p>Ok, this does answer almost, if not all, the redundancies.  I may go for <code>alias</code>ing the ones that are of this form.  Thanks, Kevin!</p>",
        "id": 240327668,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622037156
    },
    {
        "content": "<p>I will also try to make sure that the one-way functions cannot be proven with weaker assumptions, but I may miss out on some of them.</p>",
        "id": 240327800,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622037225
    },
    {
        "content": "<p>If you're trying to write slick term-mode proofs then the one-way functions are handy, and this is pretty low-level stuff so one could imagine the Marios of this world wanting to be golfy and not having to write <code>(foo_equiv _ _).1</code>everywhere</p>",
        "id": 240327813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622037233
    },
    {
        "content": "<p>I also agree that it's good to keep them, but only stated in aliased form right after the iff statement. Like in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">sub_nonneg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">sub_self</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">sub_le_sub_iff_left</span><span class=\"o\">]</span>\n\n<span class=\"n\">alias</span> <span class=\"n\">sub_nonneg</span> <span class=\"bp\">↔</span> <span class=\"n\">le_of_sub_nonneg</span> <span class=\"n\">sub_nonneg_of_le</span>\n</code></pre></div>\n<p>Note that if you only want to alias one of the two directions you can use an underscore, as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alias</span> <span class=\"n\">sub_le_self_iff</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"n\">sub_le_self</span>\n</code></pre></div>\n<p>(I'm sure you've already seen these tricks since you're working on these files, but they may be useful to other people too)</p>",
        "id": 240328975,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622037718
    },
    {
        "content": "<p>Aah yes, I learnt this trick earlier this week when someone was asking about what <code>alias</code> did!</p>",
        "id": 240329181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622037790
    },
    {
        "content": "<p>Ok, thank you both for your comments!  Sébastien, I had seen the <code>alias</code> stuff <em>in situ</em>, but it is nice to see that what I had deduced is actually correct!</p>",
        "id": 240329192,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622037791
    },
    {
        "content": "<p>Dear All,</p>\n<p>I think that PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7645\">#7645</a> is now ready for review!  Here is a summary of the major changes.</p>\n<ul>\n<li>I split the <code>co(ntra)variant</code> stuff in a separate file called <code>algebra/covariant_and_contravariant.lean</code>: these are general facts, mostly not specific to orders or multiplication.</li>\n<li>The file called <code>algebra/ordered_monoid_lemmas.lean</code> contains no <code>monoid</code>!  Most of the multiplication assumptions are <code>has_mul</code> or <code>mul_one_class</code>.</li>\n<li>The file called <code>algebra/ordered_group.lean</code> now uses <code>co(ntra)variants</code> up until roughly half its length.</li>\n</ul>\n<p>I may continue to convert <code>ordered_group</code>, but the PR is already quite long as is and was planning to leave this for a new PR.</p>\n<p>Any comments?</p>\n<p>Thank you very much!</p>",
        "id": 240423176,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622094879
    },
    {
        "content": "<p>Dear All (especially Sébastien!),</p>\n<p>I am thinking of adding the code below to <code>algebra/group/defs.lean</code>, but I am wary of stepping into quicksand.</p>\n<p>Does it seems reasonable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_monoid_lemmas</span>  <span class=\"c1\">--this import is for the second snippet: it will be in a separate file.</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">npow</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">npow_rec_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">npow_rec</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">npow_rec_zero_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">npow_rec</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">npow_rec_succ_apply</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">npow_rec</span> <span class=\"n\">n.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">npow</span>\n\n<span class=\"kd\">@[simp, to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">npow_rec_one</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">npow_rec</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">id</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">npow_eq_npow_rec</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>       <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">monoid.npow_zero'</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">npow_rec_zero_apply</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">calc</span>\n      <span class=\"n\">npow</span> <span class=\"n\">n.succ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">monoid.npow_succ'</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">npow_eq_npow_rec</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n.succ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">npow_rec_succ_apply</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">npow_eq_nrec</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">npow_rec</span> <span class=\"o\">:=</span>\n<span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">npow_eq_npow_rec</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">npow_eq_nrec_apply</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">congr_fun</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">npow_eq_nrec</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">npow_rec_mono</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>      <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">monotone_const</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"k\">calc</span>\n      <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_left'</span> <span class=\"o\">(</span><span class=\"n\">npow_rec_mono</span> <span class=\"n\">n</span> <span class=\"n\">ab</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n                   <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_right'</span> <span class=\"n\">ab</span> <span class=\"o\">(</span><span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The reason for adding this is so that I can prove monotonicity of powers with very few assumptions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">npow_mono</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">M</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"k\">calc</span>\n  <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">npow_eq_nrec_apply</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">npow_rec</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">npow_rec_mono</span> <span class=\"n\">n</span> <span class=\"n\">ab</span>\n       <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">b</span>     <span class=\"o\">:</span> <span class=\"n\">npow_eq_nrec_apply.symm</span>\n</code></pre></div>",
        "id": 240570679,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622187452
    },
    {
        "content": "<p>I'm not really convinced that you need to do this in terms of <code>npow_rec</code>: as <code>npow</code> and <code>npow_rec</code> satisfy the same equations, all your proofs on <code>npow_rec</code> can be given directly on <code>npow</code>, right? I mean, you can give a direct proof of <code>npow_mono</code> without mentioning <code>npow_rec</code> at all.</p>",
        "id": 240578241,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1622192588
    },
    {
        "content": "<p>You are probably right: I was simply scared of using <code>npow</code> directly, since I understood that there were issues related to it, but was not really sure to what extent!  I will try!</p>",
        "id": 240578397,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622192695
    },
    {
        "content": "<p>Dear All,</p>\n<p>I noticed that <code>monotone</code> assumes <code>preorder</code>, while <code>strict_mono</code> only assumes <code>has_lt</code>.  Thus, I thought of changing <code>monotone</code> to use <code>has_le</code> and almost everything works.  Except:</p>\n<ul>\n<li>there were 2 cases where I had to replace a term with <code>(by exact [same term])</code>;</li>\n<li>one of the tests for <code>apply_fun</code> no longer works.</li>\n</ul>\n<p>The test does not work, I believe, since now the <code>monotone</code> assumption does not get picked up by... something.  The proof of the test gets fixed by adding an extra <code>apply order_embedding.monotone</code> after the exact.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- broken test in test/apply_fun.lean</span>\n<span class=\"c1\">-- Verify that `apply_fun` works with `fin.cast_succ`, even though it has an implicit argument.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a.cast_succ</span> <span class=\"bp\">≤</span> <span class=\"n\">b.cast_succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">fin.cast_succ</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"c1\">-- up to here was enough before the change preorder --&gt; has_le</span>\n  <span class=\"n\">apply</span> <span class=\"n\">order_embedding.monotone</span><span class=\"o\">,</span> <span class=\"c1\">-- this is now needed.</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I am happy to roll back to having <code>monotone</code> and <code>strict_mono</code> to have asymmetric assumptions, but I wonder why this is needed.</p>\n<p>Thanks!</p>",
        "id": 240769355,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622401503
    },
    {
        "content": "<p>I don't see any failing tests in <code>test/apply_fun.lean</code> on that branch. Can you ping me when there are compiled oleans showing the failure?</p>",
        "id": 240782082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622422454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> , the error was on commit</p>\n<p>222c99df8fc74411782feb9a47465437578b6e2c</p>\n<p>but I reverted it afterwards, to make sure that new stuff worked.</p>\n<p>Is this enough information?  That commit fails the test.</p>",
        "id": 240788791,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622433456
    },
    {
        "content": "<p>The later commits introduce a few more generalisations, but undo the <code>preorder --&gt; has_le</code> change and the tests (as well as everything else) work again.</p>",
        "id": 240788846,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622433525
    },
    {
        "content": "<p>Btw, regardless of the preorder/has_le issue, I think that this has been a further positive test for <code>apply_fun</code>, since it produced an extra goal.  That is, if I understood the purpose of the test!</p>",
        "id": 240794677,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622440448
    },
    {
        "content": "<p>Dear All,</p>\n<p>I realize that this PR is <em>huge</em> and that reviewing it is not pleasant!  What can I do to make the process easier for whoever would like to spend some time with it?</p>\n<p>Really, the basic strategy is very simple: extract a couple of properties that were already present, make them stand-alone and only assume then when needed, instead of always \"by default\".</p>\n<p>If someone is willing to review it, let me know if you want more details!</p>\n<p>Thanks a lot!</p>",
        "id": 240971710,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622566578
    },
    {
        "content": "<p>Dear All,</p>\n<p>this is the PR that always gives something back.  I decided to merge master into this PR, since it has been sitting there for some time and now I have some merge conflicts.  So far, so good.</p>\n<p>Except that the merge conflicts appear to be approximately 200 lines of <code>data/nat/basic</code> having to do with <code>pow</code> that are no longer in <code>master</code> but are on my branch.</p>\n<p>Have these lemmas moved somewhere else?  I cannot find them, although there is some comment to the extent that these lemmas could be duplicated by similar lemmas for <code>canonically_ordered_something</code>.</p>\n<p>What should I do, simply remove them?</p>\n<p>Thanks!</p>",
        "id": 241139789,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622636153
    },
    {
        "content": "<p>This is how the merge conflict starts:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">! ### `pow` -/</span>\n\n<span class=\"c1\">-- This is redundant with `canonically_ordered_semiring.pow_le_pow_of_le_left`,</span>\n<span class=\"c1\">-- but `canonically_ordered_semiring` is not such an obvious abstraction, and also quite long.</span>\n<span class=\"c1\">-- So, we leave a version in the `nat` namespace as well.</span>\n<span class=\"c1\">-- (The global `pow_le_pow_of_le_left` needs an extra hypothesis `0 ≤ x`.)</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">pow_le_pow_of_le_left</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"n\">canonically_ordered_semiring.pow_le_pow_of_le_left</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pow_le_pow_of_le_right</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">j</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>        <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">eq_zero_of_le_zero</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">le_refl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">h.lt_or_eq_dec.elim</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ'</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">nat.mul_one</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n    <span class=\"n\">nat.mul_le_mul</span> <span class=\"o\">(</span><span class=\"n\">pow_le_pow_of_le_right</span> <span class=\"bp\">$</span> <span class=\"n\">le_of_lt_succ</span> <span class=\"n\">hl</span><span class=\"o\">)</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">)</span>\n<span class=\"c1\">-- and so on for ~200 lines</span>\n</code></pre></div>",
        "id": 241139933,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622636230
    },
    {
        "content": "<p>They were moved: <a href=\"https://github.com/leanprover-community/mathlib/issues/7758\">#7758</a></p>",
        "id": 241140619,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1622636644
    },
    {
        "content": "<p>Great, thank you very much, Gabriel!  I will therefore remove them from the version of <code>data/nat/basic</code> in this PR!</p>",
        "id": 241140743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622636740
    },
    {
        "content": "<p>Just merge master into your branch?</p>",
        "id": 241142626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622637826
    },
    {
        "content": "<p>That's what I thought I did, but on my local version the new file (<code>data/nat/pow</code>) was not there and the lines were in <code>data/nat/basic</code>.  Anyway, I think that even though my local copy was messed up, the one on GitHub was correct and seems to be happily building mathlib!</p>",
        "id": 241143210,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622638097
    },
    {
        "content": "<p>Sorry about this; I've been trying to straighten out some of the spiderweb of dependencies from <code>data</code> into other places, so I have quite a few \"moving things around\" PRs in the works at the moment. It's going to cause some conflicts. :-(</p>",
        "id": 241147998,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1622640368
    },
    {
        "content": "<p>Scott, no worries!  I have had to re-touch so many files for this PR that this was not a big deal at all!  I simply wanted to make sure that, by erasing these lemmas from that file, they would not be lost elsewhere!</p>",
        "id": 241148121,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622640433
    },
    {
        "content": "<p>Damiano you shouldn't be erasing things manually, just update master and merge it into your branch.</p>",
        "id": 241150174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622641320
    },
    {
        "content": "<p>If you erase things manually then you'll create another commit which might conflict with the already-in-master commit.</p>",
        "id": 241150339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622641391
    },
    {
        "content": "<p>Git still confuses me, so I am probably wrong, but the commit that caused the merge conflict was the merging of master.  (It has the automatic message <code>Merge branch 'master' into adomani_ordered_stuff</code>.)</p>\n<p>I certainly had <em>intended</em> to merge master into my branch and I thought that I had done it successfully, not receiving any merge conflict on my machine, but then, on mathlib,  there were some extra lemmas in one file.</p>\n<p>I admit that I do not know what was going on, but it seems that the current version has achieved what I was hoping that it would!</p>",
        "id": 241151253,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622641798
    },
    {
        "content": "<p>Is it possible you had not pulled the latest master from origin before you merged master locally?</p>",
        "id": 241151543,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1622641915
    },
    {
        "content": "<p>It is certainly possible, although my memory is that I switched to master, typed leanproject up, then switched back to my branch and merged master.  Whether my memory actually agrees with the reality is something that I am not sure I can verify!  <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 241152213,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622642194
    },
    {
        "content": "<p>you can just do it again</p>",
        "id": 241152249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622642216
    },
    {
        "content": "<p>If there are problems then those problems are coming your way in the future anyway</p>",
        "id": 241152285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622642238
    },
    {
        "content": "<p>If two different PRs move lemmas around, git usually gives up on you and produces a merged version with the lemmas in both places (possibly alongside confusing merge conflicts)</p>",
        "id": 241152421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622642286
    },
    {
        "content": "<p>I think that's what happened here</p>",
        "id": 241152510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1622642331
    },
    {
        "content": "<p>This might be what happened here.  I will try to redo the merge, but once my computer is finished with the <code>lean --make src</code> command that is now running.</p>",
        "id": 241153804,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622642873
    },
    {
        "content": "<p>Ok, the PR built on my computer <em>after</em> I removed the extra lines in <code>data/nat/basic</code>.  I then </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">switch</span> <span class=\"n\">master</span>\n<span class=\"n\">leanproject</span> <span class=\"n\">up</span>\n<span class=\"n\">git</span> <span class=\"n\">pull</span>  <span class=\"c1\">-- to make sure, \"Already up to date.\"</span>\n<span class=\"n\">git</span> <span class=\"n\">switch</span> <span class=\"n\">adomani_ordered_stuff</span>\n<span class=\"n\">git</span> <span class=\"n\">merge</span> <span class=\"n\">master</span>  <span class=\"c1\">-- had merge conflict with the manually removed lines: I accepted the incoming *without* the extra lines</span>\n</code></pre></div>\n<p>and now I think that everything is ok!</p>",
        "id": 241164037,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622647005
    },
    {
        "content": "<p>yeah that looks fine except that now of course you don't know that it builds any more. Why not just push and let CI tell you?</p>",
        "id": 241164268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1622647098
    },
    {
        "content": "<p>CI is already doing that: I am waiting for it to finish, though it might take a few hours still</p>",
        "id": 241164383,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622647155
    },
    {
        "content": "<p>It has been building mathlib for 2h40m, at the moment.</p>",
        "id": 241164464,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622647193
    },
    {
        "content": "<p>(which is a good sign: if there are errors, it often picks them up early, since I am modifying the \"initial\" ordered files, which get used in <code>nat</code>, for instance.)</p>",
        "id": 241164626,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622647237
    },
    {
        "content": "<p>Also CI produced oleans successfully!  I assume that no lemmas have been lost (nor duplicated) in the process!</p>",
        "id": 241313610,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1622664955
    }
]