[
    {
        "content": "<p>In this PR I am proposing to change the notation of continuous functions from <code>C(α, β)</code> to <code>C⟮α, β⟯</code>. If it is to be merged, it should probably be merged quickly. Probably many people should agree to and be aware of this change. Who should I ping?</p>",
        "id": 242056052,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623241288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 242056142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623241333
    },
    {
        "content": "<p>LGTM, also adding a warning on the weird parenthesis (and an explanation on why we use these) at the point of the definition and in the file-level docstring would be a welcome addition.</p>",
        "id": 242057247,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623241957
    },
    {
        "content": "<p>Can anybody give me a short explanation why the new parens are better than the old ones?  (I can only see the downsides so far: they're harder to type, and they mess up the monospace on github since they're shorter than a regular character.)</p>",
        "id": 242057911,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623242310
    },
    {
        "content": "<p>Can we have somthing like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><msub><mo>→</mo><mi>c</mi></msub><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X \\to_c Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">→</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>? <code>\\_c</code> doesn't do anything in VScode.</p>",
        "id": 242058490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623242637
    },
    {
        "content": "<p>This would be more consistent with all of the morphisms in the algebra heirarchy</p>",
        "id": 242058610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623242676
    },
    {
        "content": "<p>There's no subscript c in Unicode.  But there's superscript ᶜ and we could also use -&gt;C like with linear maps.</p>",
        "id": 242058696,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623242729
    },
    {
        "content": "<p>how does one add a subscript c to unicode?</p>",
        "id": 242058743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623242753
    },
    {
        "content": "<p>Unicode choices are sooo weird</p>",
        "id": 242058786,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623242762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237859.20notation.20for.20continuous.20functions/near/242058743\">said</a>:</p>\n<blockquote>\n<p>how does one add a subscript c to unicode?</p>\n</blockquote>\n<p>Do you <em>really</em> want to know?</p>",
        "id": 242058899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623242824
    },
    {
        "content": "<p>By sending a formal proposal to Unicode, these guys are working on it: <a href=\"https://github.com/stevengj/subsuper-proposal\">https://github.com/stevengj/subsuper-proposal</a>  (nothing happened in the last few years though)</p>",
        "id": 242058909,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623242829
    },
    {
        "content": "<p>Some background here: <a href=\"https://stackoverflow.com/questions/6638471/why-does-the-unicode-superscripts-and-subscripts-block-not-contain-simple-sequen\">https://stackoverflow.com/questions/6638471/why-does-the-unicode-superscripts-and-subscripts-block-not-contain-simple-sequen</a></p>",
        "id": 242058967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623242863
    },
    {
        "content": "<p>I asked because this issue does come up occasionally (not c specifically, but there have been other similar issues -- right now it just seems random, which can't be the best solution)</p>",
        "id": 242059069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623242902
    },
    {
        "content": "<blockquote>\n<p>we don't want to turn this into<br>\nan Internet petition, but endorsements from well-known developers,<br>\norganizations, open-source projects, and companies, could be helpful</p>\n</blockquote>",
        "id": 242059158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623242964
    },
    {
        "content": "<p>It would be nice to get a mention of lean in there somewhere, especially if someone at MSR can put their name behind it</p>",
        "id": 242059427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623243106
    },
    {
        "content": "<p>It might be worth moving this thread from Kevin's question onwards so as not to derail <span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span>'s question</p>",
        "id": 242059716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623243201
    },
    {
        "content": "<p>See the discussion in <a href=\"https://github.com/leanprover-community/mathlib/pull/3904#discussion_r475063154\">https://github.com/leanprover-community/mathlib/pull/3904#discussion_r475063154</a> to explain why these weird parentheses are needed in a smooth context. TLDR: <code>C^n(...)</code> will not work with usual parentheses, but it can work with the weird ones. If you want to have coherent notations between smooth functions and continuous functions, it makes sense to also use the weird parenthesis for continuous functions.</p>",
        "id": 242060795,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623243736
    },
    {
        "content": "<p>Ah, I didn't see that PR.  It shouldn't be hard to make <code>C^n(...)</code> work with regular parentheses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tcmm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">C</span><span class=\"bp\">^`</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">`</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"n\">I'</span><span class=\"o\">,</span> <span class=\"n\">M'</span> <span class=\"bp\">`</span><span class=\"o\">)</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">tcmm</span> <span class=\"n\">n</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">C</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">M</span><span class=\"bp\">;</span> <span class=\"n\">I'</span><span class=\"o\">,</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>:1025</code> tells Lean to stop parsing the n before the next parenthesis.</p>",
        "id": 242061966,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623244314
    },
    {
        "content": "<p>Is there resistance to switching to an arrow-based notation?</p>",
        "id": 242062261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623244460
    },
    {
        "content": "<p>Because at a glance I have no idea what type of function is under the bundle with this notation, even though it's probably familiar to mathematicians</p>",
        "id": 242062365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623244516
    },
    {
        "content": "<p>To be honest the notation with parenthesis is the real world thing. The decorated arrow is pure mathlib craziness.</p>",
        "id": 242063171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623244876
    },
    {
        "content": "<p><code>C^n(M, M')</code> is the standard notation, understood by everyone.</p>",
        "id": 242063218,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623244896
    },
    {
        "content": "<p>Is <code>C^n(A, B; C, D)</code> standard notation too? That's the one I found hard to parse the order of without context</p>",
        "id": 242063640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623245027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237859.20notation.20for.20continuous.20functions/near/242063171\">said</a>:</p>\n<blockquote>\n<p>The decorated arrow is pure mathlib craziness.</p>\n</blockquote>\n<p>As Kevin points out though, the craziness is extremely pervasive, so might make sense to use it here too for consistency.</p>",
        "id": 242063919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623245122
    },
    {
        "content": "<p>In algebra the standard notation is <code>→</code></p>",
        "id": 242064259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623245231
    },
    {
        "content": "<p>\"Say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo separator=\"true\">,</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">V,W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> are vector spaces and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo>:</mo><mi>V</mi><mo>→</mo><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">\\phi:V\\to W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> is a linear map. \"</p>",
        "id": 242064341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623245265
    },
    {
        "content": "<p>Same in topology <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 242064863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623245453
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237859.20notation.20for.20continuous.20functions/near/242063640\">said</a>:</p>\n<blockquote>\n<p>Is <code>C^n(A, B; C, D)</code> standard notation too? That's the one I found hard to parse the order of without context</p>\n</blockquote>\n<p>No, it's not standard because a lot of things are left implicit in standard maths, but can not be left implicit in Lean: here, in <code>C^n(I, M; I', M')</code>,<code>I</code> and <code>I'</code> indicate which smooth structure one is referring to when one is saying the function is smooth (in the same way that when we say we have a linear map in Lean we need to specify over which field, while it is always left implicit in real world math).</p>",
        "id": 242065103,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623245534
    },
    {
        "content": "<p>To give a concrete proposal, what would be the opinion on:</p>\n<ol>\n<li><code>M →C^n[I,I'] M'</code></li>\n<li><code>M →C^n[I→I'] M'</code>?</li>\n</ol>",
        "id": 242068094,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623246703
    },
    {
        "content": "<p>With the advantage being I don't have to go to the definition of <code>→C^n[I→I']</code> to know the type of <code>⇑f</code> given<code>f : M →C^n[I,I'] M'</code>, it's obvious it's <code>M → M'</code> - vs the current <code>C^n(I, M; I', M')</code> which IMO opinion is ambiguous between <code>I → M</code>, <code>I → I</code> and <code>M → M'</code>.</p>",
        "id": 242068590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623246874
    },
    {
        "content": "<p>mathlib doesn't really encourage thinking about bundled objects, but in ordinary math <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(X, Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> is the <strong>space</strong> of continuous maps from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, so it makes sense to talk about a continuous map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>Z</mi><mo>→</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f : Z \\to C(X, Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> (which may or may not be the same thing as a continuous map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>Z</mi><mo>×</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f : Z \\times X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, depending on the context). If we're just talking about individual continuous maps from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> then of course we usually write things like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f : X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> instead.</p>\n<p>I added the notation <code>C(X,Y)</code> around 3 years ago when I defined the compact-open topology, but it has occurred to me that it's not really consistent with the notations for bundled algebraic homomorphisms which have been added since then.</p>",
        "id": 242082424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1623251973
    },
    {
        "content": "<p>(Maybe I should add that this is the perspective in algebraic topology but other fields like analysis might use the same or similar notation but think about it in a different way.)</p>",
        "id": 242083234,
        "sender_full_name": "Reid Barton",
        "timestamp": 1623252302
    },
    {
        "content": "<p>Hi Reid! It's good to see you around!</p>",
        "id": 242083261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1623252312
    },
    {
        "content": "<p>I personally like the notation <code>C⟮α, β⟯</code> better because I like when notation is similar to standard mathematics, but I don't have any real strong reason, so how do we go about deciding? Should we vote? I guess in such case it would be cool to switch back to <code>C(α, β)</code>, although it was cool to be able to distinguish visually the parentheses related to <code>C</code> with the normal ones</p>",
        "id": 242087126,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623253732
    },
    {
        "content": "<p>No one has mention using an arrow with a subscript <code>t</code> for this... It's consistent with the notation for homeomorphisms...</p>",
        "id": 242087562,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623253901
    },
    {
        "content": "<p>t for topology, right?</p>",
        "id": 242087750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623253974
    },
    {
        "content": "<p>Yup</p>",
        "id": 242087764,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623253979
    },
    {
        "content": "<p>A vote might get better visibility in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a></p>",
        "id": 242088102,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623254112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237859.20notation.20for.20continuous.20functions/near/242087562\">said</a>:</p>\n<blockquote>\n<p>No one has mention using an arrow with a subscript <code>t</code> for this... It's consistent with the notation for homeomorphisms...</p>\n</blockquote>\n<p>It makes sense although this is the furthest notation from standard notation in maths</p>",
        "id": 242088111,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623254115
    },
    {
        "content": "<p>IMO having consistent notation across for continuous maps and homeomorphisms is more important than trying to match the usual mathematical notation.</p>",
        "id": 242088405,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623254241
    },
    {
        "content": "<p>And as far as I know there is no standard notation for the collection of homeomorphisms that is similar to <code>C(-,-)</code></p>",
        "id": 242088492,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623254277
    },
    {
        "content": "<p>Just to show what happens visually, in practice</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">proj</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">),</span> <span class=\"n\">C</span><span class=\"bp\">⟮</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">),</span> <span class=\"n\">F.obj</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"n\">F.obj</span> <span class=\"n\">j'</span><span class=\"bp\">⟯</span>\n</code></pre></div>\n<p>would become</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">proj</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">),</span> <span class=\"o\">(((</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">),</span> <span class=\"n\">F.obj</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">→ₜ</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">j'</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"bp\">⟮</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"bp\">⟯⟯</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"bp\">⟮</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"bp\">⟯</span>\n</code></pre></div>\n<p>would become</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ₜ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→ₜ</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→ₜ</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the new notation would need more parentheses but it is fine to me</p>",
        "id": 242090400,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623255002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237859.20notation.20for.20continuous.20functions/near/242087562\">said</a>:</p>\n<blockquote>\n<p>No one has mention using an arrow with a subscript <code>t</code> for this... It's consistent with the notation for homeomorphisms...</p>\n</blockquote>\n<p>Also, this would make it less consistent with the notation for smooth functions, even if we change it to <code>→C^n[I; I']</code></p>",
        "id": 242090648,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623255101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237859.20notation.20for.20continuous.20functions/near/242090400\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">proj</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">),</span> <span class=\"o\">(((</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">),</span> <span class=\"n\">F.obj</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">→ₜ</span> <span class=\"o\">(</span><span class=\"n\">F.obj</span> <span class=\"n\">j'</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>[...] the new notation would need more parentheses</p>\n</blockquote>\n<p>There's no need to exaggerate, you just need a single pair here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">proj</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">→ₜ</span> <span class=\"n\">F.obj</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 242090888,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623255190
    },
    {
        "content": "<p>Oh I thought this would have been interpreted as <code>let proj : (Π j' : Jᵒᵖ, (Π j : Jᵒᵖ, F.obj j)) →ₜ F.obj j</code></p>",
        "id": 242091657,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623255414
    },
    {
        "content": "<p>If we give <code>→ₜ</code> the same precedence as <code>→</code>, then it should work.</p>",
        "id": 242091857,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623255484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"267205\">Nicolò Cavalleri</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237859.20notation.20for.20continuous.20functions/near/242090400\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"bp\">⟮</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"bp\">⟮</span><span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"bp\">⟯⟯</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"bp\">⟮</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">γ</span><span class=\"bp\">⟯</span>\n</code></pre></div>\n<p>would become</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ₜ</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→ₜ</span> <span class=\"n\">γ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→ₜ</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You can golf this as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→ₜ</span> <span class=\"n\">β</span> <span class=\"bp\">→ₜ</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→ₜ</span> <span class=\"n\">γ</span>\n</code></pre></div>",
        "id": 242092037,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1623255571
    },
    {
        "content": "<p>Ok then I will edit my above comment accordingly</p>",
        "id": 242095707,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623257126
    },
    {
        "content": "<p>In the future we could also introduce, e.g., <code>→ₜ*</code> for continuous group homomorphisms between topological groups. I think this notation would be quite nice actually...</p>",
        "id": 242097049,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623257662
    },
    {
        "content": "<p>I'd be fine with arrow notation like <code>α →ₜ β</code> for continuous maps and <code>M →C^n[I,I'] M'</code> for smooth maps.</p>",
        "id": 242098731,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623258395
    },
    {
        "content": "<p>Not sure if notations are flexible enough to parse this, though.</p>",
        "id": 242098840,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623258452
    },
    {
        "content": "<p>Ok I still like the notation with the <code>C</code> visually, but I agree these are good argumentations. I will wait 24h for everyone to have a look and be able to oppose if they want before changing the PR</p>",
        "id": 242101182,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1623259502
    },
    {
        "content": "<p>is <code>M →C^n[I,I'] M'</code> better or worse than <code>M →C[I,I']^n M'</code>?</p>",
        "id": 242101606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623259702
    },
    {
        "content": "<p>I would prefer <code>C^n</code>, because it reminds of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> used on paper</p>",
        "id": 242101954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1623259850
    }
]