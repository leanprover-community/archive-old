[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span>, a side question, while you have this fresh in your mind --- </p>\n<p>Is the widely written proof of strictification: \"the endomorphism category <code>C \\func C</code> is strict, and any monoidal category <code>C</code> embeds into <code>C \\func C</code> by tensoring on the left, and hence equivalent to a strict category\" ... true? useless? not even wrong?</p>\n<p>We would define <code>strict_monoidal</code> so there are equalities of objects such that associators and unitors are equal to <code>eq_to_hom _</code>. With that, I think <code>C \\func C</code> is in fact <code>strict_monoidal</code>. Any monoidal subcategory of a strict monoidal category seems to be strict. I guess the last step has a slightly subtlety: we need the image of the embedding in <code>C \\func C</code> to be a monoidal subcategory, so perhaps you have to throw in all tensor products to make this happen (call that the \"monoidal image\"?), but it's still the case that a faithful monoidal functor gives an monoidal equivalence to the monoidal image (I think!?).</p>\n<p>(Summary so far: I think the quoted proof is true.)</p>\n<p>What's remains completely unclear to me is if this statement is actually useful (in the sense of actually justifying ignoring associators and unitors in calculations).</p>",
        "id": 236845573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619794070
    },
    {
        "content": "<p>I think that the answer depends on what you mean by \"justify\", i.e., whether you want to ignore associators and unitors on paper or in a formal proof.</p>\n<p>You're probably already aware of this, but the statement \"every monoidal category is equivalent to a strict monoidal category\" implies \"a free monoidal category is thin\" (which is the statement of monoidal coherence in the PR). Indeed, if <code>F C</code> is a free monoidal category and <code>embedding : F C ‚•§ D</code> is a monoidal functor to a strict monoidal category such that <code>is_equivalence embedding</code>, then it should be possible to prove by induction on arrow expressions in the free monoidal category that <code>embedding.map f</code> for <code>f : A ‚ü∂ B</code> is always of the form <code>some combination of Œµ and Œº ‚â´ eq_to_hom _ ‚â´ some combination of Œµ and Œº</code>, which only depends on <code>A</code> and <code>B</code> (and not on <code>f</code>), so from the natural isomorphism <code>ùü≠ (F C) ‚âÖ embedding ‚ãô is_equivalence.inverse embedding</code> we deduce that <code>F C</code> is thin.</p>\n<p>So the answer depends on whether you feel that the statement about free monoidal categories justifies ignoring associators and unitors. I'm not qualified to comment on this in a pen-and-paper setting. In a formal setting, I hope that my experiments on the <code>coherence</code> branch will shed some light on this question.</p>\n<p>One final remark: while the route to the free-monoidal-category version of monoidal coherence that goes via embedding into a strict monoidal category seems easier on paper (at least to me) than the Beylin-Dybjer proof that i followed in the PR, my feeling is that formalizing this argument in Lean would most likely end up both longer and less pretty than what I have in the PR. In fact, I think that the two proofs are in principle quite similar, except that the proof in the PR manages to avoid all of the <code>eq_to_hom</code>s and <code>functor.ext</code>s that the embedding into endofunctors route would most likely require.</p>",
        "id": 236895977,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1619814144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237324.20monoidal.20coherence.20theorem/near/236895977\">said</a>:</p>\n<blockquote>\n<p>One final remark: while the route to the free-monoidal-category version of monoidal coherence that goes via embedding into a strict monoidal category seems easier on paper (at least to me) than the Beylin-Dybjer proof that i followed in the PR, my feeling is that formalizing this argument in Lean would most likely end up both longer and less pretty than what I have in the PR.</p>\n</blockquote>\n<p>From my attempts at doing the monoidal coherence theorem which were much more like the former approach, I agree with your feeling.</p>",
        "id": 236896128,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1619814225
    },
    {
        "content": "<p>Great! Thank you for your accounts. I'd had past bad experiences with trying to formalise the \"strictification by embedding\" argument, so I'm pleased that you think there's a difference in the relative difficulties of the paper and formal versions of these statements! Your formalisation of Beylin-Dybjer is great, and indeed very pleasant that there is no fighting with <code>eq_to_hom</code> and <code>functor.ext</code>.</p>",
        "id": 236922347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619830408
    },
    {
        "content": "<p>I've asked <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> on that PR if he knows if it would be easy to allow inductive constructors to start with the symbol <code>Œª</code>. Let's merge after he's had a chance to reply; it's obviously not super important for this PR. :-)</p>",
        "id": 236922423,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1619830499
    }
]