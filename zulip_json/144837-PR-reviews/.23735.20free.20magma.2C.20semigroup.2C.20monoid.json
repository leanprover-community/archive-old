[
    {
        "content": "<p>Do we like monads?</p>",
        "id": 158741742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550406246
    },
    {
        "content": "<p>Do we want more free constructions?</p>",
        "id": 158741755,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550406334
    },
    {
        "content": "<p>I basically did 4 free constructions in one morning</p>",
        "id": 158741758,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550406341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Do you see some worth in this PR as testcases for your newly added adjunctions?</p>",
        "id": 158741799,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550406405
    },
    {
        "content": "<p>My gut feeling is that every now and then we get people who say \"hey, are XYZ in Lean yet?\" and if someone who knows how Lean works best has written a basic definition then we can say \"yes\" and sound more impressive, whilst simultaneously removing the risk that someone who wants something like free monoids will patch something together in a non-idiomatic way.</p>",
        "id": 158741812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406449
    },
    {
        "content": "<p>free monoid is just list; I have not constructed free monoid from a type</p>",
        "id": 158741864,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550406556
    },
    {
        "content": "<p>you have two free semigroup constructions now, so they should be related</p>",
        "id": 158741915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406649
    },
    {
        "content": "<p>also any nontrivial connections between the different free constructions</p>",
        "id": 158741923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406668
    },
    {
        "content": "<p>they are canonically isomorphic, no less</p>",
        "id": 158741926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406671
    },
    {
        "content": "<p>the constructions are different - one works on an existing magma</p>",
        "id": 158741931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406693
    },
    {
        "content": "<p>but I think you can say that the free semigroup over the free magma is isomorphic to the free semigroup</p>",
        "id": 158741974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406727
    },
    {
        "content": "<p>Kenny and I were chatting privately about this but I'll raise it here -- is there a useful \"Strickland Predicate\" for these constructions?</p>",
        "id": 158741975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406732
    },
    {
        "content": "<p>It's not so clear to me that there is. Neil isn't subscribed to this stream BTW.</p>",
        "id": 158741988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406754
    },
    {
        "content": "<p>I'm not sure why he is getting his name on all this stuff now</p>",
        "id": 158741990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406773
    },
    {
        "content": "<p>What's it actually called?</p>",
        "id": 158741993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406782
    },
    {
        "content": "<p>a predicate?</p>",
        "id": 158742000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406789
    },
    {
        "content": "<p>:-)</p>",
        "id": 158742001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406794
    },
    {
        "content": "<p>I am using it to mean a way of identifying an object as isomorphic to an object which you've constructed</p>",
        "id": 158742004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406818
    },
    {
        "content": "<p>Sure, you can write <code>is_free</code></p>",
        "id": 158742005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406819
    },
    {
        "content": "<p>(typically a universal object)</p>",
        "id": 158742006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406825
    },
    {
        "content": "<p>I actually proved the isomorphism (and deleted it afterwards because it works :p</p>",
        "id": 158742047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550406865
    },
    {
        "content": "<p>So one dumb predicate is that a random object A is isomorphic to the universal object X if there's an isomorphism between A and X</p>",
        "id": 158742048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406866
    },
    {
        "content": "<p>I’ll add it back after lunch</p>",
        "id": 158742049,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550406874
    },
    {
        "content": "<p>that should be one of the things in this PR I guess</p>",
        "id": 158742050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406875
    },
    {
        "content": "<p>But Neil isolated a more primitive criterion for a random object to be isomorphic to the universal object.</p>",
        "id": 158742054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406902
    },
    {
        "content": "<p>that is, without the definition you can say that if you have a type that satisfies the universal property then it's isomorphic to the free construction</p>",
        "id": 158742065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406922
    },
    {
        "content": "<p>Right.</p>",
        "id": 158742067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406932
    },
    {
        "content": "<p>But Neil had an easier-to-check property which implied the universal property</p>",
        "id": 158742070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406946
    },
    {
        "content": "<p>but the universal property spans universes so no luck</p>",
        "id": 158742071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550406950
    },
    {
        "content": "<p>I think this was part of the motivation</p>",
        "id": 158742114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550406971
    },
    {
        "content": "<p>such a criterion is dependent on the object in question</p>",
        "id": 158742116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550406982
    },
    {
        "content": "<p>sadly we cannot quantify over universes</p>",
        "id": 158742117,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550406983
    },
    {
        "content": "<p>no it is all wrong</p>",
        "id": 158742123,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550407009
    },
    {
        "content": "<p>don’t Strickland it</p>",
        "id": 158742124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550407015
    },
    {
        "content": "<p>In the case of free groups and such, you can say something like the function that takes a list and sums elements of f applied to the list, is injective</p>",
        "id": 158742125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550407019
    },
    {
        "content": "<p>use adjunctions</p>",
        "id": 158742126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550407021
    },
    {
        "content": "<p>which amounts to a description that refers to the free X's construction</p>",
        "id": 158742176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550407083
    },
    {
        "content": "<p>say that X is a free group over A if X is the initial object in some weird comma category</p>",
        "id": 158742187,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550407128
    },
    {
        "content": "<p>no</p>",
        "id": 158742190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550407143
    },
    {
        "content": "<p>So do we want more free constructions or not? <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 158744033,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550410854
    },
    {
        "content": "<p>I say we want everything at least once</p>",
        "id": 158744043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550410895
    },
    {
        "content": "<p>And prove the universal properties</p>",
        "id": 158744050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550410908
    },
    {
        "content": "<p>so... more free constructions?</p>",
        "id": 158744051,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550410920
    },
    {
        "content": "<p>you know how many structures we have</p>",
        "id": 158744097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550410952
    },
    {
        "content": "<p>actually I don't know</p>",
        "id": 158744099,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550410956
    },
    {
        "content": "<p>I estimate at least 20?</p>",
        "id": 158744101,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550410963
    },
    {
        "content": "<p>Ultimately we surely want to consider all standard constructions like limits and colimits in all standard categories</p>",
        "id": 158744114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550410988
    },
    {
        "content": "<p>And the construction of these more general things often involves free things</p>",
        "id": 158744121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411017
    },
    {
        "content": "<p>but free comm ring seems to be controversial</p>",
        "id": 158744170,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411080
    },
    {
        "content": "<p>I still can't get over the fact that there is no free fields</p>",
        "id": 158744175,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411103
    },
    {
        "content": "<p>can someone explain it to me categorically?</p>",
        "id": 158744183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411113
    },
    {
        "content": "<p>Well I am only representing the mathematicians side of the story</p>",
        "id": 158744185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411120
    },
    {
        "content": "<p>Kenny, why don't you look up the statement of the standard adjoint functor theorems and post them here</p>",
        "id": 158744191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411156
    },
    {
        "content": "<p>Special and general</p>",
        "id": 158744234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411170
    },
    {
        "content": "<p>because I don't believe in it</p>",
        "id": 158744236,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411178
    },
    {
        "content": "<p>Because one of them gives free groups</p>",
        "id": 158744237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411181
    },
    {
        "content": "<p>I'm just saying that we could then see why they don't give free fields</p>",
        "id": 158744238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411205
    },
    {
        "content": "<p>But I am at the gym</p>",
        "id": 158744241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411211
    },
    {
        "content": "<p>And typing is hard</p>",
        "id": 158744242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411220
    },
    {
        "content": "<p>And my hands are quite sweaty</p>",
        "id": 158744252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411239
    },
    {
        "content": "<p>But I can still think</p>",
        "id": 158744254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411247
    },
    {
        "content": "<blockquote>\n<p>Theorem 2.1. Sufficient conditions for a limit-preserving functor G:D→C to be a right adjoint include:</p>\n<p>1. D is complete and locally small, and G satisfies the solution set condition.</p>\n<p>This is Freyd’s original version, sometimes called the “General Adjoint Functor Theorem”.</p>\n<p>2. D is complete, locally small well-powered, and has a small cogenerating set, and C is locally small.</p>\n<p>This is sometimes called the “Special Adjoint Functor Theorem”, and abbreviated to SAFT.</p>\n<p>3. D is locally small and cototal, and C is locally small.</p>\n</blockquote>",
        "id": 158744258,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411266
    },
    {
        "content": "<p>Is G the forgetful one?</p>",
        "id": 158744303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411307
    },
    {
        "content": "<p>yes</p>",
        "id": 158744304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411322
    },
    {
        "content": "<p>What does complete mean?</p>",
        "id": 158744305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411338
    },
    {
        "content": "<p>Product of two fields isn't a field</p>",
        "id": 158744313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411350
    },
    {
        "content": "<p>ah, limit preserving</p>",
        "id": 158744315,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411361
    },
    {
        "content": "<p>fields don't have limit</p>",
        "id": 158744320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411386
    },
    {
        "content": "<p>They have direct limit but not product</p>",
        "id": 158744364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411418
    },
    {
        "content": "<p>What does cototal mean?</p>",
        "id": 158744427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411585
    },
    {
        "content": "<p>What is a limit preserving functor? Does this imply that both categories have all limts?</p>",
        "id": 158744491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411736
    },
    {
        "content": "<p>Does existence of free X imply X has all limits? I doubt it</p>",
        "id": 158744544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550411828
    },
    {
        "content": "<p>I thought left adjoints preserve colimits and right adjoints preserve limits</p>",
        "id": 158744587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411883
    },
    {
        "content": "<p>what is there to preserve if there are no limits</p>",
        "id": 158744590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550411892
    },
    {
        "content": "<p>I just didn't know whether the predicate \"limit preserving\" only applied to functors between categories that had all limits</p>",
        "id": 158744835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412375
    },
    {
        "content": "<p>well <code>Set</code> certainly has all limits and colimits</p>",
        "id": 158744845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412444
    },
    {
        "content": "<p>so if there were an adjunction, we would also be able to find (one of) them in field</p>",
        "id": 158744848,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412457
    },
    {
        "content": "<p>Only on the target objects or something</p>",
        "id": 158744851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412475
    },
    {
        "content": "<p>But given that no two fields have a coproduct or product</p>",
        "id": 158744897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412508
    },
    {
        "content": "<p>Maybe this answers your question</p>",
        "id": 158744903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412519
    },
    {
        "content": "<p>\"Limit preserving\" doesn't necessarily require the source category to have limits, but the conditions on D in each version of the theorem do</p>",
        "id": 158744919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550412577
    },
    {
        "content": "<p>wait... Group =&gt; Monoid have a left adjoint <em>and</em> a right adjoint, doesn't it</p>",
        "id": 158744920,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412581
    },
    {
        "content": "<p>I can make it smaller or bigger</p>",
        "id": 158744922,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412594
    },
    {
        "content": "<p>yes that's true</p>",
        "id": 158744964,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550412609
    },
    {
        "content": "<p>the right adjoint is called the <code>units</code></p>",
        "id": 158744965,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412628
    },
    {
        "content": "<p>I'll work on the left adjoint</p>",
        "id": 158744967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412631
    },
    {
        "content": "<p>you can formally invert everything, or you can just keep the invertible things</p>",
        "id": 158744969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550412632
    },
    {
        "content": "<p>actually I'm not so sure anymore</p>",
        "id": 158744971,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412656
    },
    {
        "content": "<p>which one is the left adjoint</p>",
        "id": 158744973,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412659
    },
    {
        "content": "<p>given any map from a monoid to the group, the units must be mapped to... units? ah but not every such map from the units can be extended</p>",
        "id": 158744985,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412691
    },
    {
        "content": "<p>ok I'm clear</p>",
        "id": 158744986,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412693
    },
    {
        "content": "<p>inverting everything is the left adjoint</p>",
        "id": 158744987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550412695
    },
    {
        "content": "<p>I'm always impressed by people who know which is which out of left and right adjoint</p>",
        "id": 158745034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412763
    },
    {
        "content": "<p>I never found a good way of remembering</p>",
        "id": 158745044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412774
    },
    {
        "content": "<p>An aide de memoir or whatever</p>",
        "id": 158745054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412793
    },
    {
        "content": "<p>well when you figured out the right one right, what's left is the left one</p>",
        "id": 158745055,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412794
    },
    {
        "content": "<p>Right</p>",
        "id": 158745058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412802
    },
    {
        "content": "<p>A left module is when the ring acts on the left</p>",
        "id": 158745063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412834
    },
    {
        "content": "<p>But for adjoints I always look it up</p>",
        "id": 158745105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412854
    },
    {
        "content": "<p>ok so I want to formally invert everything in a monoid M to form a group L(M)</p>",
        "id": 158745106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412872
    },
    {
        "content": "<p>to my mind, the best way is to use the free group generated by M, and then quotient?</p>",
        "id": 158745107,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412893
    },
    {
        "content": "<p>I recall seeing something that implies that there is another construction</p>",
        "id": 158745115,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550412905
    },
    {
        "content": "<p>Because lean has special support for quotients</p>",
        "id": 158745119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412920
    },
    {
        "content": "<p>Which means that it's idiomatic to use them in your constructions</p>",
        "id": 158745121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550412954
    },
    {
        "content": "<p>there has to be a cleaner way</p>",
        "id": 158745168,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550413013
    },
    {
        "content": "<p>because at the beginning I used (Monoid =&gt; Group) to construct the free group in the first place</p>",
        "id": 158745176,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550413026
    },
    {
        "content": "<p>Kenny why don't you prove that groups have all limits while you're at it?</p>",
        "id": 158745184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550413073
    },
    {
        "content": "<p>limits? isn't that just product?</p>",
        "id": 158745223,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550413083
    },
    {
        "content": "<p>oh wait limits</p>",
        "id": 158745226,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550413090
    },
    {
        "content": "<p>eh isn't that just a subset of the product?</p>",
        "id": 158745227,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550413096
    },
    {
        "content": "<p>oh nvm the construction I used was Type =&gt; Type-with-involution =&gt; Monoid-with-involution =&gt; Group</p>",
        "id": 158745413,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550413544
    },
    {
        "content": "<p>so, resume construction as quotient of free group</p>",
        "id": 158745414,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550413556
    },
    {
        "content": "<p>nope it's too ugly</p>",
        "id": 158745551,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550413753
    },
    {
        "content": "<p>Updated</p>",
        "id": 158752747,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550426035
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">free_magma</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">x</span><span class=\"o\">)</span>    <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">length</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 158762988,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550444659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ok so the discussion on the other thread inspired me to define this function; do you see any worth?</p>",
        "id": 158762992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550444676
    },
    {
        "content": "<p>you should ask the mathematicians, but I think this is used</p>",
        "id": 158763478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550445563
    },
    {
        "content": "<p>it's also an example of a definition that doesn't use the universal property, how would you write it as a lift?</p>",
        "id": 158763526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550445638
    },
    {
        "content": "<p>I've already noticed that <code>traverse</code> doesn't use universal property</p>",
        "id": 158765038,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550448322
    },
    {
        "content": "<p>also of course you can write it as a lift, <code>N</code> is a magma afterall</p>",
        "id": 158765042,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550448352
    },
    {
        "content": "<p>it's the lift of the constant function 1</p>",
        "id": 158765090,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550448375
    },
    {
        "content": "<p>(modulo some <code>multiplicative</code> business)</p>",
        "id": 158765098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550448407
    },
    {
        "content": "<p>Yes, it is definitely used (a lot!).</p>",
        "id": 158782660,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550477681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> could you provide some examples?</p>",
        "id": 158783556,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550478846
    },
    {
        "content": "<p>It's about free groups instead of free magmas but <a href=\"https://en.wikipedia.org/wiki/Word_metric\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Word_metric\">https://en.wikipedia.org/wiki/Word_metric</a> comes to mind</p>",
        "id": 158785362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550481017
    },
    {
        "content": "<p>Honestly I don't see the point of magmas though. They are so... <em>lawless</em></p>",
        "id": 158785394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550481080
    },
    {
        "content": "<p>just like functors</p>",
        "id": 158786346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550481971
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">@Sebastien Gouezel</span> could you provide some examples?</p>\n</blockquote>\n<p>As Mario says, this is a special instance of the word distance on groups. The word distance <code>d(g, h)</code> on a finitely generated group G with a symmetric generating subset S is the minimal number of generators one needs to multiply <code>g</code> (on the right) to get to <code>h</code>. This turns an algebraic object into a geometric one, with the caveat that the word distance depends on <code>S</code>. But one can identify properties that do not depend on the choice of <code>S</code> (they are said to be invariant under quasi-isometries), and this opens a whole area of research called geometric group theory.</p>",
        "id": 158815256,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1550510354
    },
    {
        "content": "<p>Is this PR controversial in any way?</p>",
        "id": 158969047,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550664619
    },
    {
        "content": "<p>this doesn't have any polynomial stuff, right?</p>",
        "id": 158969321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550664912
    },
    {
        "content": "<p>right</p>",
        "id": 158969609,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550665230
    },
    {
        "content": "<p>i'm on board</p>",
        "id": 158969721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550665345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> well, for some reason, Simon assigned you, so...</p>",
        "id": 158975999,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550670772
    },
    {
        "content": "<p>Is nobody gonna merge this PR?</p>",
        "id": 159051692,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550740333
    },
    {
        "content": "<p>Kenny, people have other things to do as well. I'm sure it's on a pile :-)</p>",
        "id": 159054084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550743086
    },
    {
        "content": "<p>It doesn't even build. It's been on yellow a while I think.</p>",
        "id": 159061527,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550750006
    },
    {
        "content": "<p>is it a bug?</p>",
        "id": 159062423,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550751147
    },
    {
        "content": "<p>Does it build for you with current mathlib? If so then ask someone to restart something (and if it doesn't then fix it but don't force push :-) )</p>",
        "id": 159075662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550762423
    }
]