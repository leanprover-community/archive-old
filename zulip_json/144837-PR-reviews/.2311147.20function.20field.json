[
    {
        "content": "<p>Function fields of integral schemes are coming to mathlib. One thing that I don't know yet is how to deal with concrete special cases. For example: the function field of <code>Spec ℤ</code> is ℚ`. Except that this \"is\" is of course meant in a very loose sense of \"canonically isomorphic\". It's not defeq, and not even propeq.<br>\nShould we just not worry about this, and fix this with characteristic predicates whenever the time comes?</p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>)</p>",
        "id": 266504218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640958146
    },
    {
        "content": "<p>My instinct is that this is what we've done with things like fields of fractions (a concrete model and a characteristic predicate) and this is working fine. We'll need to do this with algebraic closures at some point -- we have the concrete model but I think we'll need the abstract predicate at some point.</p>",
        "id": 266504304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640958245
    },
    {
        "content": "<p>One option could be to provide <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_fraction_ring\">docs#is_fraction_ring</a>  instances for the chosen field on various rings constructed from the scheme, like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">O</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}(U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> for any nonempty open, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mrow><mi>X</mi><mo separator=\"true\">,</mo><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}_{X,x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> for any point, etc.</p>",
        "id": 266521817,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640981561
    },
    {
        "content": "<p>BTW <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> we do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebraic_closure.is_alg_closure\">docs#algebraic_closure.is_alg_closure</a></p>",
        "id": 266521839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640981614
    },
    {
        "content": "<p>There is a follow up PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/11129\">#11129</a> that provides the instance <code>is_fraction_ring (X.presheaf.stalk x) X.function_field</code>.</p>",
        "id": 266522087,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640981969
    },
    {
        "content": "<p>Do we have a predicate saying that a certain open is affine?</p>",
        "id": 266522099,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640981994
    },
    {
        "content": "<p>Not yet. I've tried to come up with one some time ago but some properties that I wanted to show got a bit blocked without the Spec adjunction. (Or at least the fact that Spec is fully faithful).<br>\nBut I probably should add it sooner so that we could state some results using it.</p>",
        "id": 266522791,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1640983026
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266572188,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1641066587
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span>, please free free to revive <a href=\"https://github.com/leanprover-community/mathlib/pull/9802\">#9802</a> and get it merged, as I said once before. If you encounter any problem and need help, just let me know! (I think that to_Γ_Spec (the unit of adjunction) is_iso is a good definition for affineness.) I’m still working on the (co)limits in the Grothendieck categories, and haven’t started to leanify the core of Gillam’s paper (and by the way, I no longer plan to do a massive refactor of Spec using the localization functor).<br>\nWhat I have been able to achieve at <a href=\"https://github.com/leanprover-community/mathlib/compare/lax_grothendieck?expand=1#diff-779e8ece193ac9cfb8b3ab087590457d8f57c59a774bd663d70eaa8e6a160ecd\">branch lax_grothendieck</a> is showing colimits exist under conditions listed in the nLab page. Now I’m trying to establish that the forgetful functor preserves colimits in the greatest generality: of course if the listed conditions are all met then it follows from the construction. However I think I can prove it in four cases: (1) fiber categories has_terminal (leanified); (2) fiber categories has_initial and the “pushforward” functors preserves_initial; (3) fiber categories has_colimits; (4) base categories has_colimits and pushforward functors is_left_adjoint (i.e. we have pullback functors). (It’s sort of original research, albeit rather trivial, and does take time. The same for the organization of the whole construction of colimits around <code>fiber_push</code> and other functors (a 2-natural transformation pops up!).)<br>\nAfter these, I still need to do the ‘transfer pseudofunctor across adjunctions’ stuff to dualize the results, before getting back to Gillam’s paper proper, and it won’t be fast.</p>",
        "id": 266572252,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1641066656
    },
    {
        "content": "<p>Wow. Sounds that you've embarked on a great journey!<br>\nIf you are no longer trying to refactor Spec, I think I will start tidying up <a href=\"https://github.com/leanprover-community/mathlib/pull/9802\">#9802</a> and try to get it merged.</p>",
        "id": 266609002,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641122044
    }
]