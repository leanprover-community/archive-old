[
    {
        "content": "<p>I can't get PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14140\">#14140</a> to work. I tried making use of <code>is_left_distrib (*) (+)</code> to generalize some theorems, but I'm getting hard-to-fix breakage in random spots. I then tried to simply make new <code>left_distrib</code> and <code>right_distrib</code> classes and make <code>distrib</code> extend both, but that broke even worse.</p>",
        "id": 282439269,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652663655
    },
    {
        "content": "<p>Hard-to-fix breakage: <a href=\"https://github.com/leanprover-community/mathlib/pull/14140/commits/b90e50d8fd597917ad9fad2ef204dd2f7e01f079\">https://github.com/leanprover-community/mathlib/pull/14140/commits/b90e50d8fd597917ad9fad2ef204dd2f7e01f079</a> <br>\nMy attempt at new typeclasses that went even worse: <a href=\"https://github.com/leanprover-community/mathlib/pull/14140/commits/ac030bb8c5bbc7cc9da9111009ef0538341ee4ae\">https://github.com/leanprover-community/mathlib/pull/14140/commits/ac030bb8c5bbc7cc9da9111009ef0538341ee4ae</a></p>",
        "id": 282439298,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652663721
    },
    {
        "content": "<p>This (from the PR as it currently is, I assume the second link) is nonsense:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">add_one_mul</span> <span class=\"o\">[</span><span class=\"n\">right_distrib_class</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>because it puts two different multiplications on <code>α</code></p>",
        "id": 282454871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652683501
    },
    {
        "content": "<p>Is there a way around this? Surely there's some way to state that multiplication is right distributive over addition, <em>and</em> <code>x * 1 = 1 * x = x</code></p>",
        "id": 282454912,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652683542
    },
    {
        "content": "<p>I'm not very technically proficient with Lean structures and classes</p>",
        "id": 282454923,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652683559
    },
    {
        "content": "<p>Yes, you either make one typeclass containing both sets of properties, or you make <code>right_distrib_class</code>not extend <code>has_mul</code></p>",
        "id": 282454929,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652683562
    },
    {
        "content": "<p>See for instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_domain\">docs#is_domain</a> for an example of the second approach</p>",
        "id": 282454970,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652683573
    },
    {
        "content": "<p>But I would seriously question whether this generalization is a good idea before you embark on trying to fix everything it breaks</p>",
        "id": 282454999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652683604
    },
    {
        "content": "<p>Is the latter even possible? Surely I need <code>has_mul</code> to state the distributive property</p>",
        "id": 282455022,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652683624
    },
    {
        "content": "<p><code>is_domain</code> needs <code>ring</code> but doesn't extend <code>ring</code></p>",
        "id": 282455049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652683639
    },
    {
        "content": "<p>This PR does have at least one concrete use: it gives us a bunch of lemmas on <code>ordinal</code>s, which are left-distributive but not right-distributive</p>",
        "id": 282455059,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652683646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2314140.20Generalize.20theorems.20on.20distributivity/near/282455049\">said</a>:</p>\n<blockquote>\n<p><code>is_domain</code> needs <code>ring</code> but doesn't extend <code>ring</code></p>\n</blockquote>\n<p>Oh, I wasn't aware there was a difference</p>",
        "id": 282455077,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652683667
    },
    {
        "content": "<blockquote>\n<p>This PR does have at least one concrete use</p>\n</blockquote>\n<p>That should <em>definitely</em> be in the PR description</p>",
        "id": 282455079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652683669
    },
    {
        "content": "<p>Do you envisage any other applications? While strictly speaking two uses (<code>ordinal</code> and <code>distrib</code>) are enough to justify a new typeclass, I think when the risk of a performance hit / annoying typeclass problems are this high, it would be good to have a third application in mind</p>",
        "id": 282455186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652683764
    },
    {
        "content": "<p>Unfortunately no. I can't think of any other applications either, it seems like halfway-distributive structures are just rare</p>",
        "id": 282455375,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652683916
    },
    {
        "content": "<p>Cardinals are distributive both ways, btw</p>",
        "id": 282455418,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652683923
    },
    {
        "content": "<p>Even Wikipedia seems to not have any other examples</p>",
        "id": 282455588,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652684052
    },
    {
        "content": "<p>I guess it boils down to trying this and seeing if it hampers performance or leads to weird troubles</p>",
        "id": 282455607,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652684070
    },
    {
        "content": "<p>I guess another instance would be <code>prod ordinal ordinal</code> or <code>I \\to ordinal</code></p>",
        "id": 282457662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652685609
    },
    {
        "content": "<p>I tried making <code>left_distrib_class</code> and <code>right_distrib_class</code> require <code>has_mul</code> and <code>has_add</code>, but now I'm getting some weird def-eq errors?</p>",
        "id": 282673513,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652807106
    },
    {
        "content": "<p>It seems like <code>non_unital_non_assoc_semiring</code>and various other classes now have two <code>mul</code>s when they didn't before, which is obviously undesirable</p>",
        "id": 282673587,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652807135
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A typeclass stating that multiplication is left distributive over addition. -/</span>\n<span class=\"kd\">@[protect_proj]</span>\n<span class=\"kd\">class</span> <span class=\"n\">left_distrib_class</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- A typeclass stating that multiplication is right distributive over addition. -/</span>\n<span class=\"kd\">@[protect_proj]</span>\n<span class=\"kd\">class</span> <span class=\"n\">right_distrib_class</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- A typeclass stating that multiplication is left and right distributive</span>\n<span class=\"sd\">over addition. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor has_mul has_add left_distrib right_distrib]</span>\n<span class=\"kd\">class</span> <span class=\"n\">distrib</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">has_add</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">left_distrib_class</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">right_distrib_class</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>This doesn't work under <code>set_option old_structure_cmd true</code>, I wonder if that has anything to do with what's happening</p>",
        "id": 282673995,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652807288
    },
    {
        "content": "<p>If by that you mean \"I turned off old structures and things broke\", that's expected behavior</p>",
        "id": 282703096,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652819729
    },
    {
        "content": "<p>You have to do a lot more work than just removing the option to switch between them</p>",
        "id": 282703217,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652819786
    },
    {
        "content": "<p>(and I doubt we want to do that anyway)</p>",
        "id": 282703236,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652819797
    },
    {
        "content": "<p>Either way, the simple solution here is just to not have distrib extend the new classes</p>",
        "id": 282703287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652819835
    },
    {
        "content": "<p>And instead to add the forgetful instances manually</p>",
        "id": 282703319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652819853
    },
    {
        "content": "<p>I have no idea what old structures even does</p>",
        "id": 282804957,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652887824
    },
    {
        "content": "<p>I guess I'll try the forgetful approach</p>",
        "id": 282804976,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652887833
    },
    {
        "content": "<p>Is that in the FAQ?</p>",
        "id": 282805093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652887876
    },
    {
        "content": "<p>No, if someone adds it to the to-do list I'll add it when I'm back from holiday</p>",
        "id": 282805685,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652888090
    },
    {
        "content": "<p>(or if they want to write it they can feel very welcome to!)</p>",
        "id": 282805821,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652888153
    },
    {
        "content": "<p>I feel like we should rename old structures to flat structures because:</p>\n<ol>\n<li>It would stop scaring people away (including myself)</li>\n<li>That's really what they are</li>\n</ol>",
        "id": 282806421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652888398
    },
    {
        "content": "<p>Mario I suspect would also strongly approve. Although they really will be old when Lean 4 eats us.</p>",
        "id": 282808013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652888972
    },
    {
        "content": "<p>Ideally they'd have different notation entirely</p>",
        "id": 282809006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652889400
    },
    {
        "content": "<p><code>flat_structure</code> vs <code>structure</code>, or perhaps <code>@[flat] structure</code> but I suspect that's harder</p>",
        "id": 282809038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652889416
    },
    {
        "content": "<p>Alright! I got this to compile!</p>",
        "id": 282877567,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652931621
    },
    {
        "content": "<p>I think the idea of not making <code>distrib</code> depend on <code>left_distrib_class</code> and <code>right_distrib_class</code> is a good one</p>",
        "id": 282877923,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652932073
    },
    {
        "content": "<p>Otherwise we'd need to make a bunch of oddly specific mixins</p>",
        "id": 282877963,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652932084
    },
    {
        "content": "<p>Seems to have been forgotten...</p>",
        "id": 284187910,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653687681
    },
    {
        "content": "<p>The PR has been ready for the past week or so</p>",
        "id": 284187948,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1653687715
    }
]