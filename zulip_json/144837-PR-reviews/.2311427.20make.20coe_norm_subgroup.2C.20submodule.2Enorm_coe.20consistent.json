[
    {
        "content": "<p>Any objections to merging this?</p>\n<p>Note that there was already a poll <a href=\"#narrow/stream/113488-general/topic/Simp.20normal.20form.3A.20coe_norm_subgroup.2C.20submodule.2Enorm_coe\">here</a></p>",
        "id": 269093678,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643024847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> any thoughts?</p>",
        "id": 269093779,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643024904
    },
    {
        "content": "<p>The only reason why I'm against it is because it is inconsistent with how we do coercion lemmas everywhere else.  If there's a good reason why it should be changed <em>only</em> for norms in submodules, then that's fine.</p>",
        "id": 269097502,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643027115
    },
    {
        "content": "<p>Interesting! Until you wrote this, I thought that we had no such global consistency (and maybe even that it was not possible). Could you give an example of one of the lemmas that go the other way?</p>",
        "id": 269101937,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643029550
    },
    {
        "content": "<p>Gabriel, I think it's more about subtype coercion vs intermediate canonical coercion.</p>",
        "id": 269102161,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643029634
    },
    {
        "content": "<p>Here are a few examples: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nreal.coe_nat_cast\">docs#nreal.coe_nat_cast</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subring.coe_nat_cast\">docs#subring.coe_nat_cast</a></p>",
        "id": 269102300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643029697
    },
    {
        "content": "<blockquote>\n<p>I thought that we had no such global consistency (and maybe even that it was not possible). Could you give an example of one of the lemmas that go the other way?</p>\n</blockquote>\n<p>The typical pattern is that norm_cast requires lemmas to be written like <code>f (↑ x) = g x</code> and then we just tag the same lemma as simp.  The example that immediately comes to mind is all kinds of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/coe_le_coe\">docs#coe_le_coe</a>.  Let me see if I can find something that is not a relation.</p>",
        "id": 269103515,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643030324
    },
    {
        "content": "<p>We don't have that many operations that accept different argument types, but always return the same value (so that <code>f (↑ x) = f x</code> type checks).  Norms are one example but I couldn't find many coercion lemmas for them.  Cardinalities are another, and indeed: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card_coe\">docs#fintype.card_coe</a> is <code>card (↑ s) = s.card</code> (and marked as simp).</p>",
        "id": 269103739,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643030442
    },
    {
        "content": "<p>This is misleading. The LHS is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.card\">docs#fintype.card</a> and the RHS is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.card\">docs#finset.card</a>.</p>",
        "id": 269104203,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643030691
    },
    {
        "content": "<p>I don't see how that is misleading (or unrelated).  We don't always simplify fintype.card to finset.card; the reason this lemma is marked simp is because it removes the coercion.  The change in this PR is pretty much exactly the same situation, except with norm instead of card.</p>",
        "id": 269105093,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643031153
    },
    {
        "content": "<p>They are simply not the same function, although one is defined in term of the other.</p>",
        "id": 269105232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643031223
    },
    {
        "content": "<p>Neither are the two norms?  (Or is it purely because we don't have a has_card class?)</p>",
        "id": 269105467,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1643031341
    },
    {
        "content": "<p>And the only reason we don't always simplify <code>fintype.card</code> to <code>finset.univ.card</code> is I think purely cosmetic/practical. It's harder to type <code>(finset.univ : finset α).card</code> than <code>fintype.card α</code>.</p>",
        "id": 269105472,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643031343
    },
    {
        "content": "<p>I actually think the cardinality example is very helpful and it has made me change my vote <a href=\"#narrow/stream/113488-general/topic/Simp.20normal.20form.3A.20coe_norm_subgroup.2C.20submodule.2Enorm_coe\">here</a>!</p>",
        "id": 269108937,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643032734
    },
    {
        "content": "<p>My previous thinking was that the norm on the ambient space induces the norm on the subspace so <code>simp</code> should go in the direction that says this but I now think it's better to have <code>simp</code> remove, rather than insert, coercions. I can imagine having some expression involving norms of elements that happen to belong to a subgroup but where this is incidental to the mathematics; I wouldn't want <code>simp</code> to insert a bunch of coercions.</p>",
        "id": 269109539,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643032943
    },
    {
        "content": "<p>ooh it's a bit like 12 angry men except without the anger</p>",
        "id": 269120615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643037616
    },
    {
        "content": "<p>Ping for the people who voted <a href=\"#narrow/stream/113488-general/topic/Simp.20normal.20form.3A.20coe_norm_subgroup.2C.20submodule.2Enorm_coe\">in the other thread</a> who haven't participated in this one: <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>:</p>",
        "id": 269255005,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643116751
    },
    {
        "content": "<p>I keep changing my opinion on this one :-). My impression is that there are arguments in both directions, so the final call should be on the majority of uses in mathlib. I see that <a href=\"https://github.com/leanprover-community/mathlib/pull/11427\">#11427</a> makes us fix three simp calls. If the other direction requires less tweaks, it is probably better, if it requires more it is probably worse.</p>",
        "id": 269256668,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643117637
    },
    {
        "content": "<p>The other direction required only adding two <code>←</code>s in a rewrite: <a href=\"https://github.com/leanprover-community/mathlib/commit/a492016b0d240505c8c2736771cdfea4b4ba472b\">https://github.com/leanprover-community/mathlib/commit/a492016b0d240505c8c2736771cdfea4b4ba472b</a></p>",
        "id": 269257154,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643117842
    },
    {
        "content": "<p>Anyone change their mind yet? :)</p>",
        "id": 270194896,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643716141
    },
    {
        "content": "<p>I guess I'm fine with both now.</p>",
        "id": 270246666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643735017
    }
]