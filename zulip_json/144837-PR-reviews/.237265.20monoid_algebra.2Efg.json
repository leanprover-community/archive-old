[
    {
        "content": "<p>Can someone have a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/7265\">#7265</a>? It's from LTE, but it seems to me a reasonable statement to have in mathlib. Thanks!!</p>",
        "id": 236678205,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619705149
    },
    {
        "content": "<p>I was just waiting for a cache to appear so I can try to golf it further. It looks like one is ready now!</p>",
        "id": 236678418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619705215
    },
    {
        "content": "<p>The statement looks good to me, I just can't help feeling there's an intermediate result that would split the proof in two, either one we already have somewhere else or one we should have</p>",
        "id": 236678493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619705244
    },
    {
        "content": "<p>Hm, the only mathematically reasonable statement I can extract is that the monoid algebra is a quotient of a polynomial ring in finitely many variables (this is essentially the proof of the result itself).</p>",
        "id": 236694696,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619710036
    },
    {
        "content": "<p>OK, slightly better, it is a quotient of the polynomial ring whose variables are indexed by any spanning set of the monoid</p>",
        "id": 236695012,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619710174
    },
    {
        "content": "<p>Do we have this statement?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">missing</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">add_submonoid.closure</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span> <span class=\"n\">function.left_inverse</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">ℕ</span> <span class=\"n\">coe</span><span class=\"o\">)</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 236695973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619710519
    },
    {
        "content": "<p>(and is it true?)</p>",
        "id": 236695996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619710531
    },
    {
        "content": "<p>The approach I was exploring was something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">the_inverse</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">add_monoid_algebra</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_monoid_algebra.lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">mv_polynomial.monomial</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">m.to_add</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aeval_of_right_inverse</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">add_submonoid.closure</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">function.left_inverse</span> <span class=\"n\">e</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">ℕ</span> <span class=\"n\">coe</span><span class=\"o\">)):</span>\n  <span class=\"n\">function.right_inverse</span>\n    <span class=\"o\">(</span><span class=\"n\">the_inverse</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">mv_polynomial.aeval</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">multiplicative.of_add</span> <span class=\"bp\">↑</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">function.right_inverse_iff_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">alg_hom.coe_comp</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">alg_hom.coe_id</span> <span class=\"n\">R</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mv_polynomial.aeval_monomial</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- this looks true, but is probably easier in the multiplicative case</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236697836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619711277
    },
    {
        "content": "<p>It seems something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.mem_span_iff_total\">docs#finsupp.mem_span_iff_total</a></p>",
        "id": 236697953,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619711327
    },
    {
        "content": "<p>But in general I have the impression that to deal with <code>span</code> and similar stuff is much easier to avoid to name the explicit linear combination. Using some <code>induction</code> is almost always easier</p>",
        "id": 236698364,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619711481
    },
    {
        "content": "<p>But probably less constructive or computable or something else I don't understand (let me just say less explicit).</p>",
        "id": 236698420,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619711517
    },
    {
        "content": "<p>The advantage of obtaining the explicit linear combination is that you can then use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra.lift\">docs#add_monoid_algebra.lift</a> which has all the inductions steps already proved for you</p>",
        "id": 236700838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619712394
    },
    {
        "content": "<p>But perhaps the glue is too much work at the moment</p>",
        "id": 236700975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619712446
    },
    {
        "content": "<p>Hmm... I want a map to the monoid algebra, not from it</p>",
        "id": 236701396,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619712609
    },
    {
        "content": "<p>You already know that map, it's <code>⇑(mv_polynomial.aeval $ λ (s : S), (of R M) (multiplicative.of_add ↑s) : _ →ₐ[R] _)</code></p>",
        "id": 236702247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619712967
    },
    {
        "content": "<p>Your current proof obscures it a little by throwing in a ulift at the same time</p>",
        "id": 236702300,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619712986
    },
    {
        "content": "<p>I would be very happy to throw away the <code>ulift</code>, it is an artifact of <code>finite_type.iff_quotient_mv_polynomial'</code>. If you see how to avoid it I take any suggestion.</p>",
        "id": 236702427,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619713038
    },
    {
        "content": "<p>But my map is only surjective, we can not build an inverse, the monoid algebra has much more relations then the polynomial ring</p>",
        "id": 236702583,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619713091
    },
    {
        "content": "<p>You can build a right inverse</p>",
        "id": 236702621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619713105
    },
    {
        "content": "<p>Regarding the ulift</p>",
        "id": 236702742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619713149
    },
    {
        "content": "<p>I think <code>finite_type.iff_quotient_mv_polynomial'</code> is stated poorly</p>",
        "id": 236702783,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619713162
    },
    {
        "content": "<p>You should be able to add a third universe argument to make the problem go away</p>",
        "id": 236703038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619713235
    },
    {
        "content": "<p>Probably by merging it with the proof in <code>iff_quotient_mv_polynomial''</code></p>",
        "id": 236703081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619713253
    },
    {
        "content": "<p>I have to go back home, but I really don't know how to work with universes... indeed I wrote <code>iff_quotient_mv_polynomial'</code> and I remember being confused by this universes stuff</p>",
        "id": 236705025,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619714004
    },
    {
        "content": "<p>I'll try to make a PR</p>",
        "id": 236705961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619714395
    },
    {
        "content": "<p>I guess if <a href=\"https://github.com/leanprover-community/mathlib/issues/7265\">#7265</a> is blocking you, there's no reason to wait for the ulift cleanup first</p>",
        "id": 236706039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619714413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237265.20monoid_algebra.2Efg/near/236697836\">said</a>:</p>\n<blockquote>\n<p>The approach I was exploring was something like:</p>\n</blockquote>\n<p>I updated that message to be sorry-free, but it's missing the <code>missing</code> lemma needed to glue it with <code>finite_type</code>, and needs the <code>rfl</code> lemmas from <a href=\"https://github.com/leanprover-community/mathlib/issues/7412\">#7412</a>.</p>",
        "id": 236706930,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619714783
    },
    {
        "content": "<p>Hm... I am almost sure there no right inverse that it also is an<code>alg_hom</code>. Let me see what happens</p>",
        "id": 236718613,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619719375
    },
    {
        "content": "<p>Ah, I see! The missing lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">missing</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">add_submonoid.closure</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span><span class=\"o\">)),</span> <span class=\"n\">function.left_inverse</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">finsupp.total</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">ℕ</span> <span class=\"n\">coe</span><span class=\"o\">)</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>is  false. We can construct <code>e</code>, but it would not be additive</p>",
        "id": 236718793,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619719427
    },
    {
        "content": "<p><code>e</code> simply builds some coefficients that work to write any <code>m : M</code> as  a linear combination of elements in <code>S</code>, but in general this choice will not agree with addition. And there is now way to solve this if <code>S</code> is not a base (well... something like a base in the monoid world).</p>",
        "id": 236719210,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619719603
    },
    {
        "content": "<p>I had a feeling it might not be additive, but I can't think of an obvious counter-example</p>",
        "id": 236720375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619720082
    },
    {
        "content": "<p>Just take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>=</mo><msub><mi mathvariant=\"double-struck\">F</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">M = \\mathbb{F}_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83889em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> as an additive monoid, and take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">S=M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. The \"coordinates \" of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> are any two numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a,b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> even, and the  \"coordinates \" of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> are two numbers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(c,d)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> odd. Now, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>=</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 = 1 + 1 = 1 +1 + 1 + 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>2</mn><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">b =2d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">d</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><mn>4</mn><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">b =4d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">d</span></span></span></span>, so  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">d=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> that is absurd.</p>",
        "id": 236721725,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619720617
    },
    {
        "content": "<p>The point is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> generates <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> means that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a quotient of the free monoid on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> (this is just a fancy way of rephrasing the definition). An additive <code>e</code> would be a splitting of the quotient map, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> would be a direct summand of a free thing, and in particular without torsion.</p>",
        "id": 236722184,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619720805
    },
    {
        "content": "<p>I don't know what is better in Lean, but mathematically I am really against proving the surjectivity providing a right inverse. Indeed the right inverse morally does not exist (in the category we are working in).</p>",
        "id": 236722504,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619720984
    },
    {
        "content": "<p>Thanks for the insight!</p>",
        "id": 236723078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619721200
    },
    {
        "content": "<p>I guess I have some Lean-debts to honor <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 236723700,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1619721428
    }
]