[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have time to take a look at this? There is trouble with <code>data.vector2</code> getting imported by tactics like <code>linarith</code> and <code>slimcheck</code></p>",
        "id": 211361694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601129243
    },
    {
        "content": "<p>Causes a notation clash</p>",
        "id": 211361698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601129255
    },
    {
        "content": "<p>let's kill the notation clash then</p>",
        "id": 211361705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601129274
    },
    {
        "content": "<p>Sure, but in which manner?</p>",
        "id": 211361748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601129305
    },
    {
        "content": "<p>This sounds like a potentially very painful refactor</p>",
        "id": 211361758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601129324
    },
    {
        "content": "<p>I assume it's the battle for <code>::</code>?</p>",
        "id": 211361760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601129334
    },
    {
        "content": "<p>make vector.cons a localized notation</p>",
        "id": 211361768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601129357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> It's defined as global notation in core</p>",
        "id": 211362654,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601130672
    },
    {
        "content": "<p>damn</p>",
        "id": 211362666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601130706
    },
    {
        "content": "<p>remove the notation from core entirely, I guess</p>",
        "id": 211362673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601130719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.234267.20Cheby/near/211361758\">said</a>:</p>\n<blockquote>\n<p>This sounds like a potentially very painful refactor</p>\n</blockquote>",
        "id": 211362720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601130735
    },
    {
        "content": "<p>I don't think it gets used all that much</p>",
        "id": 211362725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601130754
    },
    {
        "content": "<p>There is a reason mathlib bans overloaded global notations. This one stuck around as long as it did because no one uses vectors</p>",
        "id": 211362761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601130836
    },
    {
        "content": "<p>that's not even a joke. They aren't the best choice for what they do in any respect</p>",
        "id": 211362871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601130935
    },
    {
        "content": "<p>if you want computation, arrays are faster. if you want a dependent vector type, <code>vector</code> isn't defined by the obvious inductive so pattern matching is <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> . If you want to represent finite sequences for maths then <code>fin n -&gt; R</code> is easier to work with</p>",
        "id": 211362932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601131033
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/471\">lean#471</a></p>",
        "id": 211363447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601131791
    }
]