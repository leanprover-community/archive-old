[
    {
        "content": "<p>I'm still working on making this pass CI, but I probably should bring it up for discussion.</p>\n<p>A while back, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> switched the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite\">docs#set.finite</a> to be a custom inductive, since when it's <code>nonempty (fintype s)</code> Lean sees <code>h : s.finite</code> as being an instance, so in tactic mode it becomes a frozen instance. That saves the need to use <code>unfreezingI</code>, which is nice.  But I was wanting to make <code>set.finite</code> be <code>protected</code> so that there could be a top-level <code>Prop</code>-valued predicate on types called <code>finite</code> that wouldn't conflict with this when <code>set</code> is open, and it turns out you can't do <code>protected inductive</code>. It does turn out, though, that if you make a definition <code>irreducible</code> then Lean won't recognize terms of it as being instances.</p>\n<p>So, this PR reverts <code>set.finite</code> to its original definition while making it be protected and irreducible.  API-wise, it means that when you want say a set <code>s</code> is finite you have to write <code>s.finite</code> or <code>set.finite s</code>, and you also can no longer pattern match on the <code>set.finite</code> constructor or use angle bracket notation. There haven't been too many examples of the latter two in mathlib, and almost every change has been switching <code>set.finite</code> to dot notation or fully qualifying it.</p>",
        "id": 283686187,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653355120
    },
    {
        "content": "<p>Yury's PR was <a href=\"https://github.com/leanprover-community/mathlib/pull/9164\">#9164</a>, and there <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> had suggested seeing whether making <code>set.finite</code> irreducible would have solved the frozen instance problem.</p>",
        "id": 283686343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653355289
    },
    {
        "content": "<p>One thing I should mention is that, for reasons of expediency, I made many lemmas in data/set/finite dependent on choice when they can do without it. What happened is that where before there might have been <code>casesI h</code> with <code>h : s.finite</code>, now it's <code>haveI := h.fintype</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.fintype\">docs#set.finite.fintype</a> uses choice). This wouldn't take too long to fix if it matters to anyone.</p>",
        "id": 283687355,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653356229
    },
    {
        "content": "<p>Did I suggest making it irreducible?</p>",
        "id": 283707449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653377924
    },
    {
        "content": "<p>Also, does <code>@[protected] inductive</code> work?</p>",
        "id": 283710940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1653380217
    },
    {
        "content": "<p>Yeah I don't really see why you need to change the definition to protect it. Those are very separate things.</p>",
        "id": 283711311,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1653380404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2314344.20make.20set.2Efinite.20protected/near/283710940\">said</a>:</p>\n<blockquote>\n<p>Also, does <code>@[protected] inductive</code> work?</p>\n</blockquote>\n<p>No.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[protected]</span> <span class=\"kd\">inductive</span> <span class=\"n\">finite'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">finite'</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">finite</span> <span class=\"c1\">-- correctly not ok</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite'</span> <span class=\"c1\">-- incorrectly ok</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n</code></pre></div>",
        "id": 283751099,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653401581
    },
    {
        "content": "<p>Maybe I am misunderstanding, but outside of the <code>namespace</code> they seem to have the right behaviour:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[protected]</span> <span class=\"kd\">def</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[protected]</span> <span class=\"kd\">inductive</span> <span class=\"n\">finite'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">finite'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- neither works</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite'</span>\n</code></pre></div>",
        "id": 283752361,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653402126
    },
    {
        "content": "<p>And if you go back to the namespace afterwards?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- your code here</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">finite</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n</code></pre></div>",
        "id": 283752507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653402201
    },
    {
        "content": "<p>also works as expected, Johan</p>",
        "id": 283752530,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653402210
    },
    {
        "content": "<p>Notice that using <code>@[protected] def</code> makes the behaviour of the two identical: they both work inside the EDIT[literally first] namespace, and they both do not work outside.</p>",
        "id": 283752537,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653402211
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[protected]</span> <span class=\"kd\">def</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[protected]</span> <span class=\"kd\">inductive</span> <span class=\"n\">finite'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">finite'</span>\n\n<span class=\"c1\">-- both work</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- neither works</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite'</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- neither works again</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n</code></pre></div>",
        "id": 283752679,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653402265
    },
    {
        "content": "<p>So \"the first time you are in the correct namespace\" is a thing, it seems.</p>",
        "id": 283752761,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653402306
    },
    {
        "content": "<p>I think this is an artifact of the <code>protected</code> attribute: first Lean adds the declaration unprotected (and since you're in the <code>set</code> namespace, adds the shorter alias), and then the <code>protected</code> attribute protects it, but doesn't remove the alias.</p>",
        "id": 283752858,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653402351
    },
    {
        "content": "<p>interestingly, this only weorks if you do <code>finite'</code> in a namespace isntead of explicitly calling it <code>set.finite'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">set.finite</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[protected]</span> <span class=\"kd\">inductive</span> <span class=\"n\">set.finite'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">set.finite'</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">finite'</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite</span>\n<span class=\"k\">#check</span> <span class=\"n\">set.finite'</span>\n<span class=\"k\">#check</span> <span class=\"n\">set.finite</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n\n<span class=\"c1\">-- and just so we check that it's not a fluke:</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">set</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">finite'</span>\n<span class=\"k\">#check</span> <span class=\"n\">finite</span>\n<span class=\"k\">#check</span> <span class=\"n\">set.finite'</span>\n<span class=\"k\">#check</span> <span class=\"n\">set.finite</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">set</span>\n</code></pre></div>",
        "id": 283752956,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653402375
    },
    {
        "content": "<p>I already observed in other situations that forcing the namespace by using it in the name, rather than inside a <code>namespace ...</code> works differently.</p>",
        "id": 283753151,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653402481
    },
    {
        "content": "<p>are those to do with dot notation by any chance, Damiano?</p>",
        "id": 283753213,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653402506
    },
    {
        "content": "<p>Yes, I think so.  I could find what it was, possibly, but I remember wanting to put a single lemma in <code>_root_.something</code> and thinking that it was not worth it to close and reopen the namespace and then it turned out that things did not really work as expected.</p>",
        "id": 283753384,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653402580
    },
    {
        "content": "<p>I'm often confused about why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.derivative\">docs#polynomial.derivative</a> works with dot notation, but not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map_ring_hom\">docs#polynomial.map_ring_hom</a>. so I maybe thought it may be related to this. not sure.</p>",
        "id": 283753624,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1653402652
    },
    {
        "content": "<p>Anyway, for the question at hand, it seems that having a \"very short\" namespace with the protected, inductive definition of <code>finite'</code> should work!</p>",
        "id": 283753675,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1653402679
    },
    {
        "content": "<p>I'm going to post two options as a sort of poll -- upvote the one you like.</p>",
        "id": 283755772,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653403553
    },
    {
        "content": "<p><strong>Option 1.</strong> Leave <code>set.finite</code> as a custom inductive.</p>\n<p>In Lean 4, we can do <code>protected inductive</code> just fine. We could also can switch back to <code>nonempty (fintype s)</code> once mathlib is ported.</p>",
        "id": 283755883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653403602
    },
    {
        "content": "<p><strong>Option 2.</strong> Switch <code>set.finite</code> back to <code>nonempty (fintype s)</code>. <em>(This is what this PR is currently doing).</em></p>\n<p>In Lean 4, there are no longer frozen instances, so it's unnecessary to use a custom inductive for this. We can remove the <code>irreducible</code> attribute once mathlib is ported.</p>",
        "id": 283755946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653403643
    },
    {
        "content": "<p>Ok, reverted the reversion.</p>",
        "id": 283773787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653410671
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14344/commits/537ddcb699da237699b4bfa97069a2726d7c7311\">https://github.com/leanprover-community/mathlib/pull/14344/commits/537ddcb699da237699b4bfa97069a2726d7c7311</a></p>",
        "id": 283773908,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653410723
    },
    {
        "content": "<p>Making <code>set.finite</code> irreducible (at least temporarily) still ended up being a useful exercise because it turned up some uses of the constructor that could be expressed in better ways.</p>",
        "id": 283774132,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653410810
    },
    {
        "content": "<p>PSA: if there's already a fintype instance for your set <code>s</code>, as of a day ago you can now do <code>s.finite_of_fintype</code> rather than invoking the <code>fintype</code> instance by name for the <code>set.finite</code> constructor.</p>\n<p>This seems to make certain lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite_Icc\">docs#set.finite_Icc</a> superfluous (you can write <code>(set.Icc a b).finite_of_fintype</code>), but I see no reason to remove them.</p>",
        "id": 283775059,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653411215
    },
    {
        "content": "<p>I merged master yesterday to check <a href=\"https://github.com/leanprover-community/mathlib/pull/14344\">#14344</a> still compiles, which pushed it to the back of the <a href=\"https://bit.ly/3zVLgqR\">#queue</a>. The change here is fairly mechanical (<code>finite</code> -&gt; <code>set.finite</code> or dot notation, and a handful of places where <code>set.finite_of_fintype _</code> replaces some specialized expression).</p>",
        "id": 284396063,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653935836
    }
]