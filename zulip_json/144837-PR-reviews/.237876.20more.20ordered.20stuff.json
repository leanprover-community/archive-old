[
    {
        "content": "<p>I have also split off a really small side PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/7884\">#7884</a>), dealing with removing <code>@</code> to take care of changing typeclass assumptions \"under the hood\".</p>",
        "id": 242231811,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623341638
    },
    {
        "content": "<p>A few more PRs, to fracture the refactor into smaller bits.</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7890\">#7890</a> moves the definition and lemmas for <code>covariant</code> and <code>contravariant</code> to a separate file, updates the documentation.</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7889\">#7889</a> increases the API for <code>covariant</code> and <code>contravariant</code>, but does not actually make use of it.</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7876\">#7876</a> uses the API and weakens assumptions for the lemmas in <code>algebra/ordered_monoid_lemmas</code> (plus some ripple effect in a few files).</li>\n</ul>\n<p>I will split off smaller chunks of the later gap <a href=\"https://github.com/leanprover-community/mathlib/issues/7876\">#7876</a> --&gt; <a href=\"https://github.com/leanprover-community/mathlib/issues/7645\">#7645</a>, but after some of these PRs get comments/are merged, to avoid having to constantly merge and update the later ones.</p>\n<p>Of course, I would be very grateful for any comments or suggestions that anyone might have!</p>",
        "id": 242306177,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623393319
    },
    {
        "content": "<p>Dear All,</p>\n<p>PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7876\">#7876</a> is the next one in line for the <code>ordered</code> refactor.  The PR is fairly large: +509 -370 lines, over 8 files.  However,</p>\n<ul>\n<li>6 of the touched files are essentially the result of name changes (usually a <code>'</code> disappearing from a lemma statement) -- out of these 6 files, 5 only have one line changed,</li>\n<li>1 of the files (<code>algebra/ordered_monoid.lean</code>) had some stuff moved to <code>algebra/ordered_monoid_lemmas</code>.</li>\n</ul>\n<p>Thus, essentially, the change is mostly in file <code>algebra/ordered_monoid_lemmas</code>.</p>\n<p>I do not know how to make the diff smaller or break this up.  All the old statements are (I hope!) still there, but almost all of them have been moved around and their proofs likely also changed.  However, the fact that all of mathlib builds (it did before I fixed the merge conflicts of a previous merged PR) should be indication that the <em>used</em> lemmas in this file have not been lost!</p>\n<p>If anyone has an idea of what I could do to simplify a review of this file, I would be happy to implement it!</p>\n<p>Thanks a lot!</p>",
        "id": 242523669,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623608486
    },
    {
        "content": "<p>Also note that something similar will happen with the files <code>ordered_group</code>, <code>linear_ordered_group_with_zero</code> and <code>ordered_ring</code>, so any suggestions for breaking this PR into smaller ones will have a ripple effect in the subsequent ones.</p>",
        "id": 242523836,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623608717
    },
    {
        "content": "<p>Can you summarize the renamed lemmas in the PR description. Indicating which <code>'</code>s were removed?</p>",
        "id": 242580808,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623668611
    },
    {
        "content": "<p>Eric, I just updated the PR description!  I hope that this is helpful!</p>",
        "id": 242581689,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623669139
    },
    {
        "content": "<p>Here it is as well:</p>\n<p>Name changes:</p>\n<ul>\n<li>lemma <code>mul_le_of_le_one_of_le'</code> became <code>mul_le_of_le_one_of_le</code>;</li>\n<li>lemma <code>lt_mul_of_one_le_of_lt'</code> became <code>lt_mul_of_one_le_of_lt</code>;</li>\n<li>lemma <code>add_eq_zero_iff_eq_zero_of_nonneg</code> became <code>add_eq_zero_iff'</code>.</li>\n</ul>",
        "id": 242581739,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623669188
    },
    {
        "content": "<p>(really, these are the lemmas that were used outside of the PR: the two <code>mul</code> ones have a corresponding <code>to_additive</code> version and the <code>add</code> one is the <code>to_additive</code> version of <code>mul_eq_one_iff_eq_one_of_one_le</code>.)</p>",
        "id": 242582298,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623669559
    },
    {
        "content": "<p>So what happened to the original <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_le_of_le_one_of_le\">docs#mul_le_of_le_one_of_le</a>? Is the the same statement as the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_le_of_le_one_of_le'\">docs#mul_le_of_le_one_of_le'</a> that replaces it?</p>",
        "id": 242587734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1623673196
    },
    {
        "content": "<p>Both of the old lemmas are proven by <code>mul_le_of_le_one_of_le_new</code>, where the <code>[...]_new</code> is, of course, the new formulation.  Notice that the <em>explicit and implicit</em> arguments have not changed, but the typeclass arguments have.</p>",
        "id": 242589536,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623674198
    },
    {
        "content": "<p>Thus, I decided to keep the \"un-primed\" statement and rename the various occurrences.  This turned out to be a one-or-two-replacements job.</p>",
        "id": 242589702,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623674290
    },
    {
        "content": "<p>For total disclosure, these are all the signatures:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- new</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_le_of_le_one_of_le_new</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- unprimed</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_le_of_le_one_of_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">right_cancel_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_le_of_le_one_of_le_new</span>\n\n<span class=\"c1\">-- primed</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_le_of_le_one_of_le'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_one_class</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span>\n<span class=\"o\">[</span><span class=\"n\">covariant_class</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">function.swap</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"n\">mul_le_of_le_one_of_le_new</span>\n</code></pre></div>",
        "id": 242589756,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623674323
    },
    {
        "content": "<p>Knowing that <code>partial_order</code> implies <code>preorder</code> and that <code>right_cancel_monoid</code> implies <code>mul_one_class</code>, you can clearly see the implications.</p>\n<p>The reason the linter did not complain in the earlier file, is that the <em>proof</em> actually used more assumptions.  This is the reason why I did not simply change the assumptions, but I also reproved the results.</p>",
        "id": 242590662,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623674794
    },
    {
        "content": "<p>Also, in case you are looking for a quick review, PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7921\">#7921</a> simply moves lemmas about <code>strict_mono</code> close to lemmas about <code>mono</code>.  While not a large change, it should decrease slightly the diff to master of the current PR <a href=\"https://github.com/leanprover-community/mathlib/issues/7876\">#7876</a>.  <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 242596246,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1623677233
    },
    {
        "content": "<p>In the hope of giving a slight nudge to this PR, I grepped lemmas and theorems in the file <code>algebra/ordered_monoid_lemmas</code> in <code>master</code> and on this branch.  The end result is that I had missed two results, so I converted those as well and these are the missing lemmas on which CI is now working.</p>\n<p>I also summarized the effect that this PR had on the lemmas in <code>ordered_monoid_lemmas</code> in the PR description.</p>\n<p>A pleasing outcome is that 7 primed lemmas became redundant, since the current version has weaker assumptions than either the unprimed or primed version.</p>\n<p>If anyone woudl like more details on what happened, do let me know!</p>",
        "id": 243172931,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624028706
    },
    {
        "content": "<p>The usual update on the <code>order</code> refactor.  Upcoming PRs:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7940\">#7940</a> introduces an instance -- should be easy and short.</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/7999\">#7999</a> another short PR dealing with <code>ordered_monoid</code>: most of the actual lemmas are about <code>canonically_ordered</code> and this iteration of the <code>order</code> refactor does not consider them.  The PR just makes some small changes.</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8060\">#8060</a> big PR: here I really converted all the lemmas about <code>ordered_group</code>s to use the new typeclasses.  This is similar to the now-merged change in <code>ordered_monoid_lemmas</code>.  Again, I tried to contain the spread of the PR as much as I could and, once I fix the small broken bits, it should not touch more than ~5 files, besides the main <code>algebra/ordered_group</code>.</li>\n</ul>\n<p>After this, it will be a breeze to finish the refactor of the algebraic structures with <em>one</em> operation.   Next up, will be <code>ordered_semirings</code>.</p>\n<p>As always, anyone willing to read/review/comment the PRs would be very welcome!</p>\n<p>Thanks!</p>",
        "id": 243697441,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624474821
    },
    {
        "content": "<p>Sorry, I was away for a bit (busy with other work and personal things). I'll try to make sure this keeps moving again.</p>",
        "id": 244281208,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1624973743
    },
    {
        "content": "<p>No worries!  And thank you very much for approving/merging two PRs!</p>",
        "id": 244291064,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1624977260
    }
]