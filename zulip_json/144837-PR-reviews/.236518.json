[
    {
        "content": "<p>/poll The RHS of <code>maps_to f (range g) s ↔ _</code> is best filled by</p>\n<ul>\n<li><code>maps_to (f ∘ g) univ s</code></li>\n<li><code>range (f ∘ g) ⊆ s</code></li>\n<li><code>∀ c, f (g c) ∈ h</code></li>\n<li>... and should be marked <code>@[simp]</code></li>\n<li>... and should not be marked <code>@[simp]</code></li>\n</ul>",
        "id": 228615296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614786785
    },
    {
        "content": "<p>context:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">maps_range_to</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">maps_to</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.maps_to\">docs#set.maps_to</a> for reference.</p>",
        "id": 228615375,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614786809
    },
    {
        "content": "<p>Pretend that I wrote<code>maps_to (f ∘ g) univ s</code> instead of <code>maps_to (f ∘ g) univ</code></p>",
        "id": 228615527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614786851
    },
    {
        "content": "<p>I'm not completely sure what the purpose of the <code>maps_to</code> predicate is.  It seems to be just as easy to write <code>f '' s ⊆ t</code> instead of <code>maps_to f s t</code>.  Is it because of the definitional reduction?</p>",
        "id": 228618623,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614787848
    },
    {
        "content": "<p>By this argument there's no point having the <code>tendsto</code> predicate on filters, because it is modelling exactly the same situation (if you think of a filter on X as being a generalised subset of X).</p>",
        "id": 228618832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614787908
    },
    {
        "content": "<p>This is an intriguing argument, I don't know what to say.  Maybe tendsto was a mistake.</p>",
        "id": 228620576,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614788467
    },
    {
        "content": "<p>Definitionally <code>maps_to</code> is much easier to work with than the other version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">set.maps_to_def</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set.maps_to</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">set.maps_to</span> <span class=\"n\">set.image</span> <span class=\"n\">set.subset</span> <span class=\"n\">has_subset.subset</span> <span class=\"n\">set_of</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- (∀ ⦃x : α⦄, x ∈ s → f x ∈ t) ↔</span>\n  <span class=\"c1\">-- (∀ ⦃a : β⦄, (a ∈ λ (b : β), ∃ (a : α), a ∈ s ∧ f a = b) → a ∈ t)</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 228621144,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614788645
    },
    {
        "content": "<p>Then I was on the right track.  If that's the case, then I'm against <code>range (f ∘ g) ⊆ s</code> as it has the wrong definitional reduction.</p>",
        "id": 228621658,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614788814
    },
    {
        "content": "<p>BTW: <code>unfold</code> doesn't do definitional reduction.  In fact, unfold is just simp.  You want dunfold.</p>",
        "id": 228621798,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614788858
    },
    {
        "content": "<p>For reference, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.maps_to'\">docs#set.maps_to'</a> is the actual proof of that statement</p>",
        "id": 228622218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614788984
    },
    {
        "content": "<p><code>f '' s \\subseteq t</code> and <code>s \\subseteq f\\-1' t</code> are logically equivalent (but not defeq), and because mathematicians don't know which one they like best, they introduce a third predicate <code>mapsto</code> in order to reduce confusion.</p>",
        "id": 228622252,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614789000
    },
    {
        "content": "<p>See for example <a href=\"https://stacks.math.columbia.edu/tag/008K\">https://stacks.math.columbia.edu/tag/008K</a> for a \"categorified\" variant where everything is a type not a Prop. Note also that everything is also canonical, which apparently means that you don't have to prove that any of the forthcoming diagrams commute.</p>",
        "id": 228622480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614789068
    },
    {
        "content": "<p>Based on the argument of convenient definitional reduction, then presumably this is also a bad lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">maps_univ_to</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">maps_to</span> <span class=\"n\">f</span> <span class=\"n\">univ</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"n\">range</span> <span class=\"n\">f</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and a better one might be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">set.maps_univ_to'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">maps_to</span> <span class=\"n\">f</span> <span class=\"n\">univ</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 228623093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614789284
    },
    {
        "content": "<p>Since the former makes things definitionally more complex, while the latter makes them definitionally simpler?</p>",
        "id": 228623209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614789336
    },
    {
        "content": "<p>I'm cautiously enthusiastic about <code>maps_univ_to'</code>.</p>",
        "id": 228623399,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614789392
    },
    {
        "content": "<p>Where the difference between the two is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.range_subset_iff\">docs#set.range_subset_iff</a></p>",
        "id": 228623751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614789546
    }
]