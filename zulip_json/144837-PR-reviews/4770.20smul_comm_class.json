[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/4770\">#4770</a> I suggest we add a typeclass <code>smul_comm_class</code> saying that two actions on the same space commute. I'd like to have some feedback on the idea before I spend time porting existing definitions to this typeclass.</p>",
        "id": 214441055,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603562857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> I think that this class can be used for conjugate semimodules if we regard them as semimodules over <code>opposite complex</code>.</p>",
        "id": 214441112,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603562901
    },
    {
        "content": "<p>And generalize <code>semimodule</code> structure on <code>linear_map</code>s.</p>",
        "id": 214441221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603563033
    },
    {
        "content": "<p>I don't understand, can you spell out the idea a little more?  The conjugate semimodule is defined to be a scalar multiplication of <code>opposite ℂ</code> on the same space, but then how do linear maps work when the first space is over <code>opposite ℂ</code> and the second space is over <code>ℂ</code>?</p>",
        "id": 214441698,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603563696
    },
    {
        "content": "<p>Would this also help in representation theory, where the action of <code>G</code> on <code>V</code> and the action of <code>K</code> on <code>V</code> commute?</p>",
        "id": 214441881,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603563896
    },
    {
        "content": "<p>Currently we treat representations as modules over <code>monoid_algebra K G</code> but that leads to \"ugly\" statements</p>",
        "id": 214441897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603563925
    },
    {
        "content": "<p>We should have an instance generating an action of <code>monoid_algebra K G</code> from the fact that two actions commute.</p>",
        "id": 214442221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603564350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I was thinking about sesqlinear forms, not conjugate linear maps. Let me think about it a bit more.</p>",
        "id": 214442311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603564488
    },
    {
        "content": "<p>One way to generalize this is to have <code>[has_canonical_ring_hom R S]</code> typeclass with instances <code>has_canonical_ring_hom R R</code> and <code>[algebra R A] : has_canonical_ring_hom R A</code> and do some parts of linear algebra for maps from <code>semimodule R M</code> to <code>semimodule S M₂</code>.</p>",
        "id": 214442722,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603565003
    },
    {
        "content": "<p>with notation <code>M →ₗ[R] M'</code> using <code>R=S</code>.</p>",
        "id": 214442734,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603565033
    },
    {
        "content": "<p>Sometimes there is more than one \"canonical\" ring hom from R to S :-(</p>",
        "id": 214442885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603565200
    },
    {
        "content": "<p>OK, this sounds doable.  Even though it would be a huge refactor, at least it's a joint generalization of linear and conjugate-linear maps, rather than a direct duplication of linear-map theory to conjugate-linear-map theory.</p>",
        "id": 214442905,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603565229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Then we can have <code>linear_map (f : R →+* S) M M'</code></p>",
        "id": 214442983,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603565290
    },
    {
        "content": "<p>Also, often all of <code>R</code>, <code>S</code> and the ring hom <code>f : R -&gt; S</code> would be variables, and then it will be annoying to stuff <code>f</code> into an instance even to write the statements of lemmas.</p>",
        "id": 214442986,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565291
    },
    {
        "content": "<p>Right, I think we want something more like the latter</p>",
        "id": 214443001,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565311
    },
    {
        "content": "<p>With notation both for the general form and <code>linear_map (ring_hom.id R) M M'</code>.</p>",
        "id": 214443028,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603565348
    },
    {
        "content": "<p>In an <a href=\"#narrow/stream/116395-maths/topic/Conjugate-linear.20maps\">earlier discussion</a> about conjugate-linear maps, Johan mentioned Frobenius-linear maps.  I don't know anything about them, but are they covered by this construction?</p>",
        "id": 214443153,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603565453
    },
    {
        "content": "<p>I agree this is a useful notion--in technical mumbo-jumbo we're describing the category of (rings+modules) as a displayed category over the category of rings.</p>",
        "id": 214443172,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565481
    },
    {
        "content": "<p>A Frobenius-linear map is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f:X\\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>λ</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>λ</mi><mi>p</mi></msup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(\\lambda x)=\\lambda^p f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>. Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> acting on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x\\mapsto x^p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> is hence a ring homomorphism.</p>",
        "id": 214443336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603565678
    },
    {
        "content": "<p>About the original PR, I think this notion is useful too, but some things that could be instances of it might better be thought of as bimodules.</p>",
        "id": 214443339,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565687
    },
    {
        "content": "<p>Where bimodule is defined as ...?</p>",
        "id": 214443358,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603565715
    },
    {
        "content": "<p>But we don't have right modules yet and thus don't have bimodules either.</p>",
        "id": 214443359,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565716
    },
    {
        "content": "<p>Like in the traditional way--a left action of something and a right action of something else, that commute.</p>",
        "id": 214443371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565743
    },
    {
        "content": "<p>I suggest that we use <code>[semimodule R M] [semimodule (opposite R) M] [smul_comm_class R (opposite R) M]</code> for bimodules.</p>",
        "id": 214443429,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603565771
    },
    {
        "content": "<p>I think this sounds pretty miserable... writing things in the wrong order is a pain, and so is <code>opposite</code></p>",
        "id": 214443434,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565787
    },
    {
        "content": "<p>We can introduce notation for right smul.</p>",
        "id": 214443445,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603565809
    },
    {
        "content": "<p>Something like <code>a ⋅' b = (op b) ⋅ a</code>.</p>",
        "id": 214443472,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603565847
    },
    {
        "content": "<p>Yes, something like that might be okay (and then we should have <code>right_submodule R M := submodule (opposite R) M</code>, etc.)</p>",
        "id": 214443480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565865
    },
    {
        "content": "<p>Anyways we should wait until someone really wants right modules/bimodules before doing anything there.</p>",
        "id": 214443571,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/4770.20smul_comm_class/near/214443336\">said</a>:</p>\n<blockquote>\n<p>A Frobenius-linear map is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f:X\\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>λ</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>λ</mi><mi>p</mi></msup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(\\lambda x)=\\lambda^p f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>. Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> acting on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x\\mapsto x^p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> is hence a ring homomorphism.</p>\n</blockquote>\n<p>So it's a <code>linear_map frobenius X Y</code>, right?</p>",
        "id": 214443582,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603565998
    },
    {
        "content": "<p>and likewise we would have <code>linear_map conj V W</code>?</p>",
        "id": 214443627,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603566014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/4770.20smul_comm_class/near/214443582\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/4770.20smul_comm_class/near/214443336\">said</a>:</p>\n<blockquote>\n<p>A Frobenius-linear map is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f:X\\to Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>λ</mi><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>λ</mi><mi>p</mi></msup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(\\lambda x)=\\lambda^p f(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">λ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>. Here <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> acting on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x\\mapsto x^p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> is hence a ring homomorphism.</p>\n</blockquote>\n<p>So it's a <code>linear_map frobenius X Y</code>, right?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/4770.20smul_comm_class/near/214443627\">said</a>:</p>\n<blockquote>\n<p>and likewise we would have <code>linear_map conj V W</code>?</p>\n</blockquote>\n<p>This sounds totally workable, and therefore evidence in favour of Yury's idea.</p>",
        "id": 214443794,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603566243
    },
    {
        "content": "<p>We'll need someone to write a tactic that takes a fact about <code>linear_map f M N</code> and turns it into a fact about <code>linear_map (ring_hom.id R) M N</code> replacing all applications of <code>f</code> with <code>id</code>s and removing <code>S</code> from the arguments. While I understand how <code>to_additive</code> works, it doesn't modify arity of functions etc.</p>",
        "id": 214443916,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603566418
    },
    {
        "content": "<p>(the new theorem should be defeq to the old one, so no need to convert the proof)</p>",
        "id": 214443930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603566442
    },
    {
        "content": "<p>Note that we've seen several examples here where R=S but the canonical map isn't the identity.</p>",
        "id": 214444368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603566969
    },
    {
        "content": "<p>In the conjugation example, I think the map is between <code>opposite ℂ</code> and <code>ℂ</code>, rather than from <code>ℂ</code> to itself?</p>",
        "id": 214444417,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603567037
    },
    {
        "content": "<p>We can think about it both ways</p>",
        "id": 214444512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603567169
    },
    {
        "content": "<p>There is the following advantage to making it the conjugation homomorphism a map from <code>is_R_or_C</code> to itself (rather than <code>opposite</code>): if I understand correctly, the conjugation will then be defeq to the identity in the case of <code>ℝ</code>, and so a conjugate-linear map over <code>ℝ</code> will, definitionally, be a linear map.  This would allow for cleaner statements of some of the results in <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> ' PR.</p>",
        "id": 214444784,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603567485
    },
    {
        "content": "<p>If R=S then an f-linear map will be linear over the subring of R consisting of things fixed by f I guess.</p>",
        "id": 214444860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603567578
    },
    {
        "content": "<p>Unfortunately, we can't make a <code>symm</code> instance for <code>smul_comm_class</code> in Lean 3.</p>",
        "id": 214446313,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603569502
    },
    {
        "content": "<p>So, we have to choose what comes first.</p>",
        "id": 214446327,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603569530
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">distrib_mul_action</span> <span class=\"n\">S</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_scalar</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.map_add</span><span class=\"o\">,</span> <span class=\"n\">smul_add</span><span class=\"o\">],</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f.map_smul</span><span class=\"o\">,</span> <span class=\"n\">smul_comm</span> <span class=\"n\">c</span><span class=\"o\">]⟩⟩</span>\n</code></pre></div>\n\n<p>Should it be like this or <code>smul_comm_class S R M₂</code>?</p>",
        "id": 214446347,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603569576
    },
    {
        "content": "<p>The class is a <code>Prop</code> anyways, so I think there's not much danger in just picking randomly at the use site and providing both orders at the instance definition site</p>",
        "id": 214446419,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603569634
    },
    {
        "content": "<p>... though with bimodules you won't have this problem <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 214446436,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603569663
    },
    {
        "content": "<p>I hope we'll see Lean 4 soon, and add <code>symm</code> instance.</p>",
        "id": 214446465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603569702
    },
    {
        "content": "<p>(where \"soon\" means \"this year\")</p>",
        "id": 214446479,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603569721
    },
    {
        "content": "<p>As a temporary measure we can have a <code>symm</code> <code>lemma</code> and, though it might not actually be worthwhile, a linter which checks that each instance has a <code>symm</code> version</p>",
        "id": 214447373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603570729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/4770.20smul_comm_class/near/214443429\">said</a>:</p>\n<blockquote>\n<p>I suggest that we use <code>[semimodule R M] [semimodule (opposite R) M] [smul_comm_class R (opposite R) M]</code> for bimodules.</p>\n</blockquote>\n<p><code>smul_comm_class</code> is in mathlib now. Is there a reason (other than time) that I shouldn't make a PR with this definition of <code>bimodule</code> and the other basic API for bimodules that's been discussed?</p>",
        "id": 220734935,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608671663
    },
    {
        "content": "<p>I'd really like to see ideals and two-sided ideals distinguished from each other.</p>",
        "id": 220735013,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608671741
    },
    {
        "content": "<p>Go ahead. I don't know whether we should have a <code>bimodule</code> typeclass that extends three typeclasses, or use these three arguments every time we speak about bimodules. And we need some notation for <code>op a • b</code> (something like <code>b •ᵣ a</code>). If you keep it as a notation (not a <code>def</code>), then you can apply lemmas about <code>smul</code> directly.</p>",
        "id": 220739753,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608675249
    },
    {
        "content": "<p>I ran into trouble getting a <code>bimodule</code>typeclass that extends all three off the ground, so I'm writing a draft that is just an abbreviation for <code>smul_comm_class</code>. I think defining right modules and bimodules is easy enough, but <code>subbimodule</code>s may get kind of weird.</p>",
        "id": 220740223,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608675605
    },
    {
        "content": "<p>You can extend two <code>semimodule</code> classes, have an axiom equivalent to <code>smul_comm_class</code>, and an instances from <code>[bimodule R M]</code> to <code>smul_comm_class R (opposite R) M</code> and <code>smul_comm_class (opposite R) R M</code>. Then you'll be able to apply theorems about <code>smul_comm_class</code>.</p>",
        "id": 220740510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608675806
    },
    {
        "content": "<p>The problem was with extending two <code>semimodule</code> classes. It didn't work for me, either with or without <code>old_structure_cmd</code>.</p>",
        "id": 220740603,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608675856
    },
    {
        "content": "<p>I've pushed to <a href=\"https://github.com/leanprover-community/mathlib/tree/bimodule\">branch#bimodule</a>, although the API for <code>subbimodule</code> isn't really there yet</p>",
        "id": 220740713,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608675953
    },
    {
        "content": "<p>If you define <code>right_semimodule := semimodule (opposite R) M</code>, can you extend <code>right_semimodule</code> without <code>old_structure_cmd</code>?</p>",
        "id": 220744110,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608677958
    },
    {
        "content": "<p>Because right now your problem is:</p>\n<ul>\n<li><code>old_structure_cmd = True</code>: you have two <code>zero_add</code> fields, which have different types</li>\n<li><code>old_structure_cmd = False</code>: you have two <code>to_semimodule</code> fields, which have different types</li>\n</ul>",
        "id": 220744145,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608677997
    },
    {
        "content": "<p>My thinking is maybe you can trick lean into generating one field called <code>to_right_semimodule</code></p>",
        "id": 220744209,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608678020
    },
    {
        "content": "<p>Oh, this is something Reid (I think) told me not to do anyway, for the same reason that <code>semimodule</code> does not extend <code>semiring</code>; you shouldn't extend things that don't use all your type arguments.</p>",
        "id": 220744285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608678100
    },
    {
        "content": "<p>Sorry, I haven't realized that we're going to have <code>bimodule R S M</code>, not <code>bimodule R M</code>.</p>",
        "id": 220744704,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608678393
    },
    {
        "content": "<p>Yes, <code>bimodule R S M</code> may be an abbreviation (or even a notation) for <code>smul_comm_class R (opposite S) M</code>.</p>",
        "id": 220744757,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608678457
    }
]