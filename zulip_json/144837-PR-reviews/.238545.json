[
    {
        "content": "<p>In this PR there is a long proof that takes ~30s to typecheck on my local machine. I checked this proof step by step and I believe there is no problematic step specifically but it is the sum of all steps that takes such a long time and the proof is long. More specifically, the proof is made up of many subproofs that fill up the fields of a structure and no proof is particularly long. I could try to factor the proof in some lemmas but it would be unnatural, there are no interesting lemmas that I can extract. Is there no way to tell mathlib to wait more before triggering the timeout? It waits less than 30 seconds for that proof but 30 seconds would be sufficient</p>",
        "id": 248510713,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1628185298
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib/issues/8545\">#8545</a> for mobile readers)</p>",
        "id": 248514167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628186915
    },
    {
        "content": "<p>Your <code>inv_fun</code> looks suspicious to me; <code>if h : p then foo else false.elim _</code> can be simplified to <code>have h : p := _, foo</code>, which should make all the proofs about it shorter</p>",
        "id": 248515176,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628187450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238545/near/248515176\">said</a>:</p>\n<blockquote>\n<p>Your <code>inv_fun</code> looks suspicious to me; <code>if h : p then foo else false.elim _</code> can be simplified to <code>have h : p := _, foo</code>, which should make all the proofs about it shorter</p>\n</blockquote>\n<p>But <code>h</code> is not always true! That lines comes from your suggestion in this thread: <a href=\"#narrow/stream/113489-new-members/topic/Default.20alternative/near/245939587\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Default.20alternative/near/245939587</a></p>",
        "id": 248516520,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1628188087
    },
    {
        "content": "<p>I'm referring to the outer if in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">B'</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">y.1</span> <span class=\"bp\">∈</span> <span class=\"n\">e.base_set</span> <span class=\"k\">then</span>\n        <span class=\"n\">total_space_mk</span> <span class=\"n\">_</span> <span class=\"n\">y.1</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"o\">(</span><span class=\"n\">congr_arg</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">e.symm_coe_fst'</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">e.to_local_homeomorph.symm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"n\">y.2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">inhabit</span> <span class=\"n\">B'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">default</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n    <span class=\"k\">else</span> <span class=\"n\">false.elim</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_nonempty_iff</span><span class=\"o\">,</span> <span class=\"n\">is_empty_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hB</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hB</span> <span class=\"n\">y.1</span><span class=\"o\">,</span> <span class=\"o\">}),</span>\n</code></pre></div>",
        "id": 248520253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628189773
    },
    {
        "content": "<p>Without being at lean, don't you just want <code>let inh : inhabited B' := ⟨y.1⟩</code>?</p>",
        "id": 248522444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628190727
    },
    {
        "content": "<p>You're right that my offhanded comment is to blame for sending you down that path though! Sorry about that...</p>",
        "id": 248548679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628204931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238545/near/248522444\">said</a>:</p>\n<blockquote>\n<p>Without being at lean, don't you just want <code>let inh : inhabited B' := ⟨y.1⟩</code>?</p>\n</blockquote>\n<p>Yes you're right I did not think I could use a variable after a <code>λ</code> to inhabit a type but now that I saw you're suggestion I managed to find an alternative without even the need of inhabiting B' and it solved my problem of the timeout! Thanks a lot! (It now takes 23s instead of 30s but it is enough for mathlib not to trigger the timeout)</p>",
        "id": 248588413,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1628241756
    },
    {
        "content": "<p>Your new <code>inv_fun</code> looks much better!</p>",
        "id": 248595526,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628246495
    },
    {
        "content": "<p>I am encountering a weird error in this PR. When I try to define an instance of topological space on the total space of a pullback bundle in the natural way as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[priority 90, nolint unused_arguments]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">pullback.total_space.topological_space</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">B'</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">total_space</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"n\">induced</span> <span class=\"o\">(</span><span class=\"n\">pullback_total_space_embedding</span> <span class=\"n\">E</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">prod.topological_space</span>\n</code></pre></div>\n<p>the linter triggers a <code>TYPE CLASS SEARCHES TIMED OUT</code> error (although this gives no problems in the build...). The weird thing about this is that it did not trigger this error a while ago, but it did when I merged this old PR with the current master branch, which makes me think that it might be due to some new checks of the linter.</p>\n<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> since you just pushed another construction of vector bundles, did you encounter anything similar?</p>",
        "id": 275572443,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647462317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> what is your plan regarding merging this PR before or after Heather's refactor?</p>",
        "id": 275984284,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647805491
    },
    {
        "content": "<p>It might take a while to do the refactor (I won't be sure that I have the definitions right until I finish constructing the vector bundle of continuous linear maps).  So if your PR is ready before then, it should be merged.</p>",
        "id": 275986321,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647808518
    },
    {
        "content": "<p>I don't really see the point of merging anything more about vector bundles before the definition is fixed.</p>",
        "id": 275986678,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1647809017
    },
    {
        "content": "<p>I think the two things are independent</p>",
        "id": 275987553,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647810038
    },
    {
        "content": "<p>The construction of the trivialization is what matters in the PR and I don't think Heather is planning to change the definition of trivialization</p>",
        "id": 275987663,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647810211
    },
    {
        "content": "<p>The rest of the PR is just a few lines that will be adapted the same way as the direct sum</p>",
        "id": 275987723,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647810294
    },
    {
        "content": "<p>The same goes for sections, they should be independent from Heather's refactor</p>",
        "id": 275987782,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647810370
    },
    {
        "content": "<p>I think there may also be a substantial refactor of the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_vector_prebundle\">docs#topological_vector_prebundle</a> method for constructing vector bundles, but that's ok here since your construction doesn't go through this route.</p>",
        "id": 275988644,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647811553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> I propose that you prove the <a href=\"https://github.com/leanprover-community/mathlib/blob/3b707bdcbf4e9accc568450dbddb269704d5baef/src/topology/vector_bundle.lean#L145\">additional property</a> that will be needed for the construction after the refactor, separately as a lemma.  That way your PR can be merged whenever it's ready, but the refactor will also have everything needed for the construction following the new definition.</p>",
        "id": 276017190,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1647850599
    },
    {
        "content": "<p>What construction are you referring to?</p>",
        "id": 276028480,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647857354
    },
    {
        "content": "<p>Oh you mean to add that lemma for the pullback bundle to the current PR?</p>",
        "id": 276029186,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1647857804
    }
]