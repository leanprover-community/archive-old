[
    {
        "content": "<p>With <a href=\"https://github.com/leanprover-community/lean/pull/691\">lean#691</a>, I'd decided what to do about unary nats (nat constructor expressions) as an afterthought, but admittedly <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20lean.3Amaster/near/273983995\">it was nonintuitive</a> and could lead to confusion.</p>\n<p>This PR modifies it to do things the right way, I hope. There's now an option (<code>pp.nat_numerals</code>) to control whether these expressions get represented as numerals, and then they are processed in exactly the same way as other numerals.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_numeral_type</span><span class=\"o\">]</span> <span class=\"n\">nat</span>\n<span class=\"k\">#check</span> <span class=\"mi\">3</span>\n<span class=\"k\">#check</span> <span class=\"n\">nat.zero.succ.succ.succ</span>\n<span class=\"c1\">-- both give (3 : ℕ) : ℕ</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.nat_numerals</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"n\">nat.zero.succ.succ.succ</span>\n<span class=\"c1\">-- (1 : ℕ).succ.succ : ℕ</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.numerals</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.nat_numerals</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"n\">nat.zero.succ.succ.succ</span>\n<span class=\"c1\">-- nat.zero.succ.succ.succ : ℕ</span>\n</code></pre></div>\n<p>There was a vestigial internal option that controlled this anyway, and this new <code>pp.nat_numerals</code> exposes it. I've set it to be contingent on <code>pp.numerals</code> being true, for principle of least surprise.</p>",
        "id": 274052088,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646347752
    },
    {
        "content": "<p>I'm planning on creating some mathlib documentation listing all the pp options, so we don't have to dig up and pass around links to Zulip messages with the useful ones.</p>",
        "id": 274052465,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646347996
    },
    {
        "content": "<p>There is a bit of a bug, which is that when this option is <code>false</code> the expressions fail to round-trip:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.nat_numerals</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">nat.zero.succ.succ.succ</span>\n<span class=\"c1\">-- 1.succ.succ : ℕ</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">succ.succ</span>\n<span class=\"c1\">-- invalid field notation, type is not of the form (C ...) where C is a constant</span>\n</code></pre></div>\n<p>However, with an additional option it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.nat_numerals</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.numeral_types</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">nat.zero.succ.succ.succ</span>\n<span class=\"c1\">-- (1 : ℕ).succ.succ : ℕ</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ.succ</span>\n<span class=\"c1\">-- (1 : ℕ).succ.succ : ℕ</span>\n</code></pre></div>\n<p>I'm not sure if there's any good way to fix this.</p>",
        "id": 274059010,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646351962
    }
]