[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Pinging you here. Could you give a brief status update please?</p>",
        "id": 204769033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595490830
    },
    {
        "content": "<p>I'm doing a bit of tidy up locally, I'll push it today then request review.</p>",
        "id": 204804048,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1595514386
    },
    {
        "content": "<p>Today lasted a year and a half, but I believe this is finally ready for review! I just opened a few PRs for prerequisites, but I would appreciate comments on <a href=\"https://github.com/leanprover-community/mathlib/pull/3292\">#3292</a> already. Notably, I don't know whether we want to keep <code>range_rat_equiv : range (coe : ℚ → α) ≃ range (coe : ℚ → β)</code>, the isomorphism between the copies of the rationals inside char zero division rings <code>α</code> and <code>β</code>.</p>",
        "id": 279805197,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650623512
    },
    {
        "content": "<p>Thanks Yael -- it would be great to see this in mathlib. </p>\n<p>Of course once you have that then there's the refactor to remove all instances of <code>real</code> from the library ;-)</p>",
        "id": 279805631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650623837
    },
    {
        "content": "<p>This PR was halved in size, but there's still some that can go. The last thing we need before it is mergeable is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_rat_sq_btwn_rat</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Do we have the corresponding general topological fact somewhere? It's basically intermediate value theorem + the rationals are dense.</p>",
        "id": 287171924,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655981151
    },
    {
        "content": "<p>here's a stronger lemma, but I guess more specific than you'd want as it uses <code>real.sqrt</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.order.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.archimedean</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.sqrt</span>\n\n\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">exists_rat_sq_btwn_rat'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hy</span> <span class=\"o\">:=</span> <span class=\"n\">hx.trans</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">real.sqrt</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">real.sqrt</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">real.sqrt_lt_sqrt_iff</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hx.le</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hxq</span><span class=\"o\">,</span> <span class=\"n\">hqy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_rat_btwn</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">real.sqrt_nonneg</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">hxq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.sqrt_lt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hx.le</span><span class=\"o\">)</span> <span class=\"n\">hq.le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hxq</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">real.lt_sqrt</span> <span class=\"n\">hq.le</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hqy</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hxq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hqy</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_rat_sq_btwn_rat</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">le_or_lt</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">hx</span><span class=\"bp\">|</span><span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">h0q</span><span class=\"o\">,</span> <span class=\"n\">hqy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_rat_sq_btwn_rat'</span> <span class=\"o\">(</span><span class=\"n\">half_lt_self</span> <span class=\"n\">hy</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hy</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">hqy</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">exists_rat_sq_btwn_rat'</span> <span class=\"n\">h</span> <span class=\"n\">hx</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287174291,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655982693
    },
    {
        "content": "<p>Ah sorry, to be clear this lemma is already proven in <a href=\"https://github.com/leanprover-community/mathlib/pull/3292\">#3292</a>. I meant \"we need to find the home and correct generalisation of this lemma\".</p>",
        "id": 287174527,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655982844
    },
    {
        "content": "<p>was fun to prove it anyways ^^ I think it's just worth leaving this as it is, because there's already finagling with domains and such</p>",
        "id": 287174579,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1655982891
    }
]