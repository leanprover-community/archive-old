[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115237\">@Jared Corduan</span> Even better would be to discuss it in the PR reviews stream <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> But it's a bit hidden...</p>",
        "id": 177266447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570123365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Should have shown you <code>push_neg</code> instead</p>",
        "id": 177266497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570123413
    },
    {
        "content": "<p>And I think I would call <code>infinite'</code> by <code>nat.infinite</code> or something like that.</p>",
        "id": 177266524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570123437
    },
    {
        "content": "<p>ah, wonderful! :)</p>",
        "id": 177266587,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570123455
    },
    {
        "content": "<p>Would my Pi2 definition live in my ramsey file? or with fintype? do folks mind that it is not as general as it could be (were I to place it outside my file)?</p>",
        "id": 177266839,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570123648
    },
    {
        "content": "<p>I would call it <code>nat.unbounded</code> fwiw</p>",
        "id": 177266847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570123654
    },
    {
        "content": "<p>Should I state my theorems with <code>infinite</code>, and swap it out for <code>unbounded</code> when I need to? or are the statements with <code>unbounded</code> ok, provided there exists the equivalence of definitions somewhere?</p>",
        "id": 177267000,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570123776
    },
    {
        "content": "<p>for mathlib, I would prefer a theorem of the form <code>infinite A &lt;-&gt; ∀ x : ℕ, ∃ y : ℕ, x &lt; y ∧ y ∈ A</code> and skip the double definition</p>",
        "id": 177267156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1570123854
    },
    {
        "content": "<p>ok, sure thing. That mean stating the ramsey theorems with the mathlib infinite, and swapping out when I need unbounded (which shall be unnamed).</p>",
        "id": 177267288,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570123940
    },
    {
        "content": "<p>I'm having trouble proving the <code>iff</code> between the mathlib <code>infinite</code>and my unbounded definition. I am currently here:</p>\n<div class=\"codehilite\"><pre><span></span>lemma infinite_unbounded (H : set ℕ) :\n  set.infinite H ↔ ∀ x : ℕ, ∃ y : ℕ, x &lt; y ∧ y ∈ H :=\nbegin\n  constructor,\n  { classical,\n    contrapose,\n    intro h, unfold set.infinite, rw not_not,\n    have hf : ∃ x, ∀ y, ¬ (x &lt; y ∧ y ∈ H),\n    simp [not_forall, not_exists] at h, simp, exact h,\n    simp at hf,\n    cases hf with x hx,\n    unfold finite,\n    constructor,\n    exact ⟨sorry, sorry⟩,\n  },\n  { intros h hfin,\n    cases (finset.exists_nat_subset_range hfin.to_finset) with n hn,\n    cases (h n) with y Hy,\n    have hyn : y ∈ finset.range n,\n    apply finset.subset_iff.mpr hn, simp [Hy.right],\n    simp at hyn,\n    exact lt_irrefl n (lt_trans (Hy.left) hyn) }\nend\n</pre></div>\n\n\n<p>In context, right before the two sorrys, I have <code>hx : ∀ (y : ℕ), x &lt; y → y ∉ H</code> and need to show <code>fintype ↥H</code>. which seems great, <code>finset.range x</code> should be my fintype. But I get two errors that I'm having trouble understanding.</p>\n<p>If I replace the first sorry with <code>finset.range x</code>, I learn that <code>finset ℕ</code> is not the same type as <code>finset ↥H</code>. Is the coercion on <code>set ℕ</code> not to <code>ℕ</code>?</p>\n<p>If I try to fix the second sorry by showing <code>have hb : ∀ x : ↑H, x ∈ finset.range x</code>, I learn that there is a class instance problem with <code>has_mem ↑H (finset ℕ)</code>.</p>\n<p>I think that I am misunderstanding <code>↑H</code> somehow (it must not be <code>ℕ</code>).</p>",
        "id": 177965239,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570845741
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">infinite_unbounded</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">H</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">by_contra</span> <span class=\"n\">H_contra</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">H_contra</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"n\">finite_subset</span> <span class=\"o\">(</span><span class=\"n\">finite_le_nat</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">finish</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hfin</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">exists_nat_subset_range</span> <span class=\"n\">hfin</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">hyn</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset_iff</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hy</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hyn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">lt_irrefl</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">Hy</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"n\">hyn</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 177965781,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1570846618
    },
    {
        "content": "<p>thank you <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> ! I will look up what <code>refine finite_subset (finite_le_nat x) (λ _ _, by finish)</code> does! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>  refine and finish!</p>",
        "id": 177965901,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570846783
    },
    {
        "content": "<p>oh oops, that's supposed to be an <code>exact</code>, i just used <code>refine</code> while finding the proof</p>",
        "id": 177965968,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1570846850
    },
    {
        "content": "<p>I knew about <code>push_neg</code> from <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , but <code>finish</code> is new to me, thanks!</p>",
        "id": 177966056,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570847003
    },
    {
        "content": "<p>ok! so much thanks to <span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> 's help, what's left to think about is (and sorry I'm so slow!):</p>\n<ul>\n<li>can I simplify my proof of the specialized version of the PHP, using the fact that a finite union of finite sets is finite.</li>\n<li>can I use a more natural definition of \"size two sets\"? I'm a bit scared of using length 2 vectors or fintype, and my definition of and ordered pair <code>(a, b)</code> where <code>a &lt; b</code> is pretty normal in ramsey theory, but I like the idea of doing it right!</li>\n<li>maybe the two lemmas I have about increasing functions on ℕ can be generalized and placed in algebra.order_functions.</li>\n</ul>\n<p>please let me know your preference between long open PRs and getting it done right the first time!</p>",
        "id": 177968435,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570851316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115237\">@Jared Corduan</span> We certainly prefer getting it done right.</p>",
        "id": 177970547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570855412
    },
    {
        "content": "<p>Particularly for PRs which add entire new modules, there's less cost to having long-open PRs.</p>",
        "id": 177970732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1570855738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115237\">@Jared Corduan</span> In the end, I think we don't really care about how you prove you theorem. What we do care about is an end result that can be applied in as many setups as possible. For you proof, it is extremely useful to have the inductive type <code>color</code> lying around. But I propose that after proving your \"main\" theorem, you go one step further, and reprove it for arbitrary types of cardinality two, by choosing a bijection to <code>color</code>. That saves the user the burden of choosing this bijection.</p>",
        "id": 177971434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570857085
    },
    {
        "content": "<p>In the same sense, if you can add an induction on top that generalizes the result to more colors... all the better.</p>",
        "id": 177971481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570857132
    },
    {
        "content": "<p>Similarly, if you can replace <code>nat^2</code> by ordered pairs in some more general ordered type, extra bonus points.</p>",
        "id": 177971485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570857180
    },
    {
        "content": "<p>I'm not saying all of these <em>must</em> be done. But if it's easy to do, please do it. It vastly increases the risk that this theorem gets used elsewhere.</p>",
        "id": 177971501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570857223
    },
    {
        "content": "<p>hah I think that something got lost in translation in the phrase \"increases the risk that this theorem gets used\" :D</p>",
        "id": 177976250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1570865942
    },
    {
        "content": "<p>ok, great, I'll keep going with it! Thank you again for all the help!</p>",
        "id": 177986130,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1570882901
    },
    {
        "content": "<p>I'm having some trouble figuring out how to work with <code>fintype</code> and <code>multiset</code>, apologies if these are basic questions, perhaps I just need to read some more (or find some good examples of using them in action).</p>\n<p>My goal was to provide the <code>fintype</code> instance for the enumeration <code>color</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n</pre></div>\n\n\n<p>making the needed <code>multiset</code> is easy, <code>red :: blue :: multiset.zero</code>. Then to make a <code>fintype</code> I need to provide a <code>nodup</code> instance. There are a few <code>nodup</code>s around, but it seems the multiset one lifts the list one  via <code>nodup (λ s t p, propext $ perm_nodup p)</code>.  If I try to make a <code>fintype</code> and break into tactic mode:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">all_colors</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">color</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"n\">red</span> <span class=\"bp\">::</span> <span class=\"n\">blue</span> <span class=\"bp\">::</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Then I'm pretty close, but the sorry is where I am stuck at showing <code> list.pairwise ne list.nil</code>. Looking at the inductive definition of <code>list.nodup</code>, I see that this is indeed the base case, but I don't know in general how to resolve this to Prop...</p>\n<p>Carrying on, if I try to use my <code>all_colors</code> to make a fintype, I get stuck trying to prove membership on the multiset:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">color_fintype</span>  <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">color</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span>\n<span class=\"n\">all_colors</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>The target at the sorrys is <code>red ∈ all_colors</code> and <code>blue ∈ all_colors</code>. the magic of simp doesn't solve this for me, and I can't figure out how the membership works in the multiset...</p>\n<p>Anyway, I'll carry on, I'm sure if I find some more examples I get it :)</p>",
        "id": 180560437,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573591957
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">color</span>\n<span class=\"n\">def</span> <span class=\"n\">all_colors</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">color</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">red</span><span class=\"o\">,</span> <span class=\"n\">blue</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 180561134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573592363
    },
    {
        "content": "<p>For a slight performance optimisation </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">color</span>\n<span class=\"n\">def</span> <span class=\"n\">all_colors</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">color</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">red</span> <span class=\"bp\">::</span> <span class=\"n\">blue</span> <span class=\"bp\">::</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 180562353,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573593110
    },
    {
        "content": "<p>thank you <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> ! I see now that that notation is mentioned in the comments inside finset.lean. I'll have to figure out what that's doing...</p>\n<p>Was I far off in trying to create the finset directly?</p>\n<p>Is there a similar trick to creating instances of <code>fintype</code>? With the new working <code>all_colors</code> I'm still unsure how to show, eg, <code>red ∈ all_colors</code>.</p>",
        "id": 180566187,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573595550
    },
    {
        "content": "<p>I'm sure either <code>dec_trivial</code> or <code>by simp all_colors</code> will prove <code>red ∈ all_colors</code></p>",
        "id": 180566268,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573595625
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">color_fintype</span>  <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">color</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span>\n<span class=\"n\">all_colors</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 180566351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573595663
    },
    {
        "content": "<p><code>assume x, by cases x; simp</code> will also prove all colors are in all_colors</p>",
        "id": 180566465,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573595738
    },
    {
        "content": "<p>When I used to get stuck on questions like <code>red ∈ all_colors</code> I would do the following dirty trick. First switch notation off, so you can see what <code>∈</code> really means:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"kn\">instance</span> <span class=\"n\">color_fintype</span>  <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">color</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span>\n<span class=\"n\">all_colors</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ has_mem.mem red all_colors</span>\n<span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>and then just unfold to figure out what the heck is going on:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_mem</span><span class=\"bp\">.</span><span class=\"n\">mem</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">mem</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>Actually, this is a tricky one.</p>",
        "id": 180566693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573595878
    },
    {
        "content": "<p>that's awesome, thank you, I would have not know to try that!</p>",
        "id": 180566787,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573595924
    },
    {
        "content": "<p>I guess the point is that ultimately you see that <code>list.mem</code> is involved.</p>",
        "id": 180566808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573595935
    },
    {
        "content": "<p>I get an error on the <code>refl</code>after the left</p>",
        "id": 180566844,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573595954
    },
    {
        "content": "<p>maybe you should post working code. I filled in stuff to get your code working and maybe I made different choices to you. This compiles for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">color</span>\n\n<span class=\"n\">def</span> <span class=\"n\">all_colors</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">color</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span> <span class=\"n\">red</span> <span class=\"bp\">::</span> <span class=\"n\">blue</span> <span class=\"bp\">::</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">constructor</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">color_fintype</span>  <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">color</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span>\n<span class=\"n\">all_colors</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 180566989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573596024
    },
    {
        "content": "<p>ok, thanks, I was trying to get a short example of where I was stuck, but maybe I've done something weird</p>",
        "id": 180567079,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573596090
    },
    {
        "content": "<p>But I've seen this trick before with list.mem: </p>\n<div class=\"codehilite\"><pre><span></span>example : 3 ∈ [1,2,3,4,5] :=\nbegin\n  right,\n  right,\n  left,\n  refl,\nend\n</pre></div>\n\n\n<p>that was why I tried it.</p>",
        "id": 180567096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573596111
    },
    {
        "content": "<p>I appreciate the help! I'll play around some with that and see if I can get it working! I can't get the <code>assume x, by cases x; simp</code> to work either (the simp gets the red sqiggle), so I'm probably doing something odd.</p>",
        "id": 180567255,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573596213
    },
    {
        "content": "<p>Then post working code.</p>",
        "id": 180567316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573596244
    },
    {
        "content": "<p>(minimized if possible)</p>",
        "id": 180567333,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1573596257
    },
    {
        "content": "<p>The refl I assume was trying to prove <code>red = blue</code>, at least that's the goal I see. anyway, I get more organized and report back, thanks again!</p>",
        "id": 180567391,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573596312
    },
    {
        "content": "<p>ok! <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> definition of <code>all_colors</code> does work with <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's fintype instance. It took me a while to figure this out, I was getting errors I didn't understand and had to build a bunch of olean files to see what was going on. So, as promised, working code :) :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">color</span>\n\n<span class=\"n\">def</span> <span class=\"n\">all_colors</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">color</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">red</span> <span class=\"bp\">::</span> <span class=\"n\">blue</span> <span class=\"bp\">::</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">dec_trivial</span><span class=\"bp\">⟩</span>\n<span class=\"n\">def</span> <span class=\"n\">all_colors&#39;</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">color</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">red</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">color_fintype</span>  <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">color</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span>\n  <span class=\"n\">all_colors</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- This refl does not work with all_colors&#39;</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span>\n<span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>I still have a lot to learn about how fintype works!</p>",
        "id": 180583956,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573611916
    },
    {
        "content": "<p>(so to be clear, the error I was getting earlier still happens when using <code>def all_colors' : finset color := {red, blue}</code>. Though the first definition I had of <code>all_colors</code> with <code>red :: blue :: multiset.zero</code> and the <code>sorry</code> also works with the same proof.)</p>",
        "id": 180584186,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573612199
    },
    {
        "content": "<p>is there any notation for working the equivalence (<code>≃</code>)  structure from <code>data/equiv</code>? I looked but could not find anything.</p>\n<p>I wrote a lemma<br>\n<code>lemma color_equiv_fin2 : color ≃ fin 2 </code> with my two element enumeration <code>color</code>.<br>\nBut the name <code>color_equiv_fin2.inv_fun</code>, is pretty long and quickly becomes unwieldy. I tried using let bindings for both <code>inv_fun</code> and <code>to_fun</code>, but then is seems that I am no longer able to do a rewrite with <code>right_inv</code>.  (for example, if I let <code>g := color_equiv_fin2.to_fun</code> and <code>g' := color_equiv_fin2.inv_fun</code>, then I cannot rewrite with <code>color_equiv_fin2.right_inv</code> when I see <code>g ( g' (x))</code>, etc.)</p>\n<p>Maybe I just need a short name for <code>color_equiv_fin2</code>, but I thought that maybe I was using things in a weird way.</p>",
        "id": 180937903,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573956736
    },
    {
        "content": "<p>The preferred notation is <code>e x</code> and <code>e.symm x</code> for the function and its inverse</p>",
        "id": 180937974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573956918
    },
    {
        "content": "<p>ok, thanks!</p>",
        "id": 180938033,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1573957012
    },
    {
        "content": "<p>I'm having trouble proving things about definitions that use if-then-else. (relating to me trying to provide a more mathlib friendly interface to my version of ramsey's theorem.)</p>\n<p>In particular, the usual trick for extending ramsey's theorem from two colors to multiple colors involves turning a coloring of <code>k</code>-many colors into a coloring of two colors:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n<span class=\"bp\">|</span> <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">color</span>\n\n<span class=\"n\">def</span> <span class=\"n\">split_coloring</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">color</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">red</span> <span class=\"k\">else</span> <span class=\"n\">blue</span>\n</pre></div>\n\n\n<p>I then want to be able to make conclusions about <code>split_coloring</code>, such as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">red_split</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">split_coloring</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">red</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">split_coloring</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>But I get stuck trying to conclude that <code>f a = k</code> from <code> ite (f a = k) red blue = red</code>.</p>",
        "id": 188296466,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1581796973
    },
    {
        "content": "<p>Try <code>split_ifs</code></p>",
        "id": 188296480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581797030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"115237\">@Jared Corduan</span> That will give you to goals.</p>",
        "id": 188296519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581797045
    },
    {
        "content": "<p>The first you can close by <code>assumption</code></p>",
        "id": 188296524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581797055
    },
    {
        "content": "<p>ok, thanks!</p>",
        "id": 188296526,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1581797059
    },
    {
        "content": "<p>The second will be <code>exfalso, proof_that_blue_ne_red</code></p>",
        "id": 188296530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581797072
    },
    {
        "content": "<p>I suppose I should spend more time seeing what tactics are available. :)</p>",
        "id": 188296542,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1581797106
    },
    {
        "content": "<p>Hmm, maybe not <code>exfalso</code> but <code>by_contradiction</code></p>",
        "id": 188296551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581797121
    },
    {
        "content": "<p>or <code>simp</code></p>",
        "id": 188296569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581797143
    },
    {
        "content": "<p>do you mean <code>simp</code> for my original problem? <code>simp</code> is one of my few tactics I've been trying to use, it did not work her. maybe I need to open some libraries to make <code>simp</code> work for this case?</p>",
        "id": 188296648,
        "sender_full_name": "Jared Corduan",
        "timestamp": 1581797263
    },
    {
        "content": "<p>No, after some <code>split_ifs</code> invocation. For example <code>split_ifs at h; simpa</code> or <code>revert h, split_ifs, simp</code></p>",
        "id": 188297919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1581799591
    }
]