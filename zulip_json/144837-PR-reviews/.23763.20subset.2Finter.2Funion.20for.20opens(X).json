[
    {
        "content": "<p>Ok... so I wrote 3 silly little instances for <code>opens(X)</code> in <a href=\"https://github.com/leanprover/mathlib/issues/763\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/763\">#763</a>. However, now I was just wondering... would it be \"better\" to define these in terms of the lattice structure on <code>opens</code>?</p>",
        "id": 159441038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551201910
    },
    {
        "content": "<p>wha... why do you need this if you already have the structure?</p>",
        "id": 159441200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202067
    },
    {
        "content": "<p>Because notation?</p>",
        "id": 159441263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202099
    },
    {
        "content": "<p>We are writing a perfectoid project, and we try to make the top-level files readable for people who don't know what a lattice is.</p>",
        "id": 159441275,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202131
    },
    {
        "content": "<p>So they will be very happy if they see standard notation for unions and intersections</p>",
        "id": 159441300,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202160
    },
    {
        "content": "<p>it should be defined in terms of the lattice operation, and it should be simped away</p>",
        "id": 159441302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202162
    },
    {
        "content": "<p>They will forgive us the weird subset symbol... but that's about as far as their forgiveness will go</p>",
        "id": 159441315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202183
    },
    {
        "content": "<p>Are there places where Lean would get upset if union and join were defeq?</p>",
        "id": 159441509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202355
    },
    {
        "content": "<p>there are places it will get upset if it's not</p>",
        "id": 159441531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202380
    },
    {
        "content": "<p>In other words, could <code>has_union</code> and <code>has_lub</code> just be the same thing?</p>",
        "id": 159441548,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202390
    },
    {
        "content": "<p>well, you can't use the same notation for both</p>",
        "id": 159441558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202414
    },
    {
        "content": "<p>because the two symbols don't look the same</p>",
        "id": 159441564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202427
    },
    {
        "content": "<p>I mean: could you have 1 class with 2 notations?</p>",
        "id": 159441568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202439
    },
    {
        "content": "<p>Could we just get rid of <code>has_union</code></p>",
        "id": 159441616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202450
    },
    {
        "content": "<p>But keep the notation</p>",
        "id": 159441622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202458
    },
    {
        "content": "<p>if you put them in the same class what makes the two functions the same?</p>",
        "id": 159441653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202503
    },
    {
        "content": "<p>Ok, let me ask it like this: what is the raison d'etre for <code>has_union</code>?</p>",
        "id": 159441684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202538
    },
    {
        "content": "<p>Probably there are some places where using union notation for a lattice is strange or ambiguous</p>",
        "id": 159441690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202546
    },
    {
        "content": "<p>the raison d'etre is because we have notation classes for all notations</p>",
        "id": 159441753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202567
    },
    {
        "content": "<p>But maybe some notations could share a class?</p>",
        "id": 159441760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202584
    },
    {
        "content": "<p>that is a mathematical (notation) claim</p>",
        "id": 159441780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202610
    },
    {
        "content": "<p>Yes, it is.</p>",
        "id": 159441785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202619
    },
    {
        "content": "<p>maybe someone just wants to use a cup symbol</p>",
        "id": 159441800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202629
    },
    {
        "content": "<p>Aah, for the cup product on cohomology.</p>",
        "id": 159441809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202641
    },
    {
        "content": "<p>and doesn't care about lattices</p>",
        "id": 159441811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202642
    },
    {
        "content": "<p>Ok, I retract my claims</p>",
        "id": 159441815,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202650
    },
    {
        "content": "<p>But the cup product on cohomology gives a ring structure. So Lean won't like that either. The cup product has to be <code>*</code></p>",
        "id": 159441830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202681
    },
    {
        "content": "<p>Sorry for fighting the system once again</p>",
        "id": 159441883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202700
    },
    {
        "content": "<p>I guess M has no notation at all...</p>",
        "id": 159441909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202742
    },
    {
        "content": "<p>I'm still unhappy that notation is locked into the type system. I understand the reasons, but I don't think it is morally right.</p>",
        "id": 159441943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202800
    },
    {
        "content": "<p>Anyway, I'm not trying to start another flame war</p>",
        "id": 159442006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202813
    },
    {
        "content": "<p>Metamath has notation, it's proof local</p>",
        "id": 159442027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202835
    },
    {
        "content": "<p>Just hoping that your golden triple combo will materialise at some point</p>",
        "id": 159442028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202839
    },
    {
        "content": "<p>or section local</p>",
        "id": 159442032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202847
    },
    {
        "content": "<p>Oh! That sounds awesome!</p>",
        "id": 159442034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202851
    },
    {
        "content": "<p>it's super low tech: you just have a hypothesis that says <code>+ = plus-of(G)</code> where <code>+</code> is a suggestively named variable</p>",
        "id": 159442085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202898
    },
    {
        "content": "<p>But is it infix?</p>",
        "id": 159442104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551202919
    },
    {
        "content": "<p>yes</p>",
        "id": 159442107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202922
    },
    {
        "content": "<p>metamath doesn't do this whole lambda calculus adjacency means function application thing</p>",
        "id": 159442173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551202953
    },
    {
        "content": "<p>So, if I understand your 3 golden features correctly, then Metamath and Lean form a disjoint cover of these 3 features?</p>",
        "id": 159442342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203076
    },
    {
        "content": "<p>and I think you can guess what I want to do about that</p>",
        "id": 159442360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203092
    },
    {
        "content": "<p>Port Lean's metaprogramming and tactic environment to metamath?</p>",
        "id": 159442401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203131
    },
    {
        "content": "<p>But you don't want to do metaprogramming in the same language as metamath proofs, right?</p>",
        "id": 159442419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203150
    },
    {
        "content": "<p>So will you end up with 2 different languages in the end?</p>",
        "id": 159442445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203162
    },
    {
        "content": "<p>I'm working on that as well... you want some functional programming language for writing programs</p>",
        "id": 159442518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203205
    },
    {
        "content": "<p>that is interpreted in the logic so you can prove things</p>",
        "id": 159442539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203229
    },
    {
        "content": "<p>Does M have category theory?</p>",
        "id": 159442592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203269
    },
    {
        "content": "<p>yes</p>",
        "id": 159442599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203273
    },
    {
        "content": "<p>Ok, cool!</p>",
        "id": 159442655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203288
    },
    {
        "content": "<p>In theory, the Tarski-Grothendieck axiom allows for doing universes, but I never needed it</p>",
        "id": 159442666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203301
    },
    {
        "content": "<p>but I probably didn't get serious enough</p>",
        "id": 159442676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203311
    },
    {
        "content": "<p>Where can I browse the category theory stuff?</p>",
        "id": 159442702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203343
    },
    {
        "content": "<p>I'd like to see what it looks like</p>",
        "id": 159442715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203357
    },
    {
        "content": "<p><a href=\"http://us2.metamath.org/mpeuni/mmtheorems.html#dtl:8\" target=\"_blank\" title=\"http://us2.metamath.org/mpeuni/mmtheorems.html#dtl:8\">http://us2.metamath.org/mpeuni/mmtheorems.html#dtl:8</a></p>",
        "id": 159442726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203378
    },
    {
        "content": "<p>I imagine you get swamped in proof obligations that <code>tidy</code> takes care of in mathlib</p>",
        "id": 159442727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203381
    },
    {
        "content": "<p>looking at the proofs won't tell you anything about how much I got bogged down</p>",
        "id": 159442790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203404
    },
    {
        "content": "<p>because the proofs aren't tactics, they are proofs</p>",
        "id": 159442799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203415
    },
    {
        "content": "<p>I haven't gone nearly as far as you guys with the category theory</p>",
        "id": 159442845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203463
    },
    {
        "content": "<p>I see</p>",
        "id": 159442868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551203488
    },
    {
        "content": "<p>but yoneda is there at least</p>",
        "id": 159442873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551203499
    },
    {
        "content": "<p>Ok, I tried to make the instances in <a href=\"https://github.com/leanprover/mathlib/issues/763\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/763\">#763</a> more defeq, and also simp them away immediately afterwards. So now it is just glorified notation for mathematicians who don't know better.</p>",
        "id": 159445535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551205853
    }
]