[
    {
        "content": "<p>Does anyone know why the oleans for this are totally borked?</p>",
        "id": 291932741,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659568406
    },
    {
        "content": "<p>I don't know what happened, but I will offer an outrageous (and very unlikely to be true) theory: If you run <code>lean --make src</code> on your commit (<code>64a025b</code>) after downloading the olean cache, it starts building <code>data.set.pointwise</code>. Four minutes prior to <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/2792082604\">your run</a> on <code>lena</code>, Yaël triggered <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/2792062646\">another run</a> on <code> nale</code> by pushing a commit titled \"pointwise instances\", which touches <code>src/data/set/pointwise.lean</code>. Could the two machines be sharing a network mount and be overwriting each other's oleans? Yours starts building at 2022-08-03T20:08:48.0181269Z, Yaël's reaches <code>data.set.pointwise</code> (and errors out) at 2022-08-03T20:12:04.7641284Z.</p>",
        "id": 291953021,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659577612
    },
    {
        "content": "<p>Oooh, the <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/2791961680\">parent run</a> from Yaël's branch looks interesting. It ran on <code>lena</code> (same machine as yours), and was supposed to be cancelled but GitHub says that \"Runner lena did not respond to a cancelation request with 00:05:00\". Maybe the build kept running on the same working directory that would be later used for your run?</p>",
        "id": 291955694,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659580374
    },
    {
        "content": "<p>Confirmation: building <code>81e03d</code>, replacing the resulting copy of <code>src/data/set/pointwise.olean</code> by the one in <code>64a025b</code>'s cache and running <code>lean --make src/data/set/pointwise.lean</code> does not rebuild anything or change the replaced olean. A properly-built version of <code>pointwise.olean</code> corresponding to <code>64a025b</code> does not have this property.</p>",
        "id": 291957362,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659581786
    },
    {
        "content": "<p>Impressive sleuthing! How are you navigating which runs ran on which machines? I don't know how to access this kind of information efficiently.</p>",
        "id": 291961531,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659585631
    },
    {
        "content": "<p>Also, it seems like I just ran into a similar problem with the latest oleans from <a href=\"https://github.com/leanprover-community/mathlib/pull/15657\">#15657</a> (commit 625b906bf0). Downloading the cache and running <code>lean --make src</code> it starts in <code>src/algebra/order/field</code>.</p>",
        "id": 291961706,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1659585803
    },
    {
        "content": "<p>This might not be the same issue. <code>algebra/order/field</code> has been causing problems for my undergraduates for a while now, this is the exciting \"olean of size zero\" issue which people have been talking about for a while</p>",
        "id": 291974314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659598107
    },
    {
        "content": "<p>There's only one thing in common between the <code>algebra.order.field</code> issue and this one: Me <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 291975526,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659599100
    },
    {
        "content": "<p>As Kevin said, the <code>algebra/order/field</code> issue is preexisting: <a href=\"https://github.com/leanprover-community/lean/pull/749\">leanprover-community/lean#749</a>. There's a workaround awaiting review at <a href=\"https://github.com/leanprover-community/mathlib/pull/15784\">#15784</a></p>",
        "id": 291992175,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659611195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2315833.20.3A.20pi_Lp.20refactor/near/291961531\">said</a>:</p>\n<blockquote>\n<p>Impressive sleuthing! How are you navigating which runs ran on which machines? I don't know how to access this kind of information efficiently.</p>\n</blockquote>\n<p>Me neither, I just ran out of ideas, went to the GH Actions run list and started opening runs near to yours to see if something stood out. I guess the maintainers might have extra information by looking at the admin interface for bors.</p>",
        "id": 292002188,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1659617270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> or anyone else: any other comments on this refactor?</p>",
        "id": 293347621,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660459495
    }
]