[
    {
        "content": "<p>In PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14422\">#14422</a>, I construct the localized category, obtained by formally inverting a class of arrows <code>W</code> in a category <code>C</code>.  The universal property of the localization if also obtained.</p>",
        "id": 284222394,
        "sender_full_name": "Joël Riou",
        "timestamp": 1653733354
    },
    {
        "content": "<p>Don't they have the homotopy category associated to a category of complexes in LTE? Was this not defined as a localisation?</p>",
        "id": 284222987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1653734337
    },
    {
        "content": "<p>I believe that what is in mathlib (and LTE) is the homotopy category K(A) of a (pre)additive category: it is a <em>quotient</em> category. The derived category D(A) is obtained from the category of complexes C(A) by formally inverting quasi-isomorphisms.</p>",
        "id": 284223578,
        "sender_full_name": "Joël Riou",
        "timestamp": 1653735268
    },
    {
        "content": "<p>In general, in a model category, what we call the \"homotopy category\" is obtained by formally inverting weak equivalences. It turns out to be equivalent to the quotient category of cofibrant and fibrant objects up to homotopy. (This is basically the fundamental lemma of homotopical algebra, which I have fully implemented in Lean recently.)<br>\n(For example, one may describe the \"D^-\" derived category of some abelian categories as the homotopy category of bounded below complexes of projective objects.)</p>",
        "id": 284223752,
        "sender_full_name": "Joël Riou",
        "timestamp": 1653735494
    },
    {
        "content": "<p>(In general, the homotopy category K(A) is not equivalent to the derived category D(A) because they may be quasi-isomorphisms which are not homotopy equivalences.)</p>",
        "id": 284223922,
        "sender_full_name": "Joël Riou",
        "timestamp": 1653735719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"459699\">@Joël Riou</span> Cool!</p>",
        "id": 284225319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653737649
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 284225484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1653737905
    },
    {
        "content": "<p>Great! I can finally delete <a href=\"https://github.com/leanprover-community/mathlib/tree/cat_localization\">branch#cat_localization</a> ;) <br>\nBTW, does this PR also introduce a characteristic predicate for the localization? I think that would be a fairly important construction to have!</p>",
        "id": 284245843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1653767892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/Localization.20of.20categories/near/284245843\">said</a>:</p>\n<blockquote>\n<p>BTW, does this PR also introduce a characteristic predicate for the localization? I think that would be a fairly important construction to have!</p>\n</blockquote>\n<p>Thanks! Of course, the predicate(s) will be in a separate PR as I did not want to make this one too long.</p>",
        "id": 284247766,
        "sender_full_name": "Joël Riou",
        "timestamp": 1653770932
    }
]