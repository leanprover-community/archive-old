[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The following invalid Lean code might help you understand what&#39;s going on here:</span>\n<span class=\"cm\">M   ≃ₗ[R] f.ker.quotient  : (submodule.quot_equiv_of_eq_bot _ (ker_eq_bot_of_mono _)).symm</span>\n<span class=\"cm\">... ≃ₗ[R] f.range         : linear_map.quot_ker_equiv_range f</span>\n<span class=\"cm\">... ≃ₗ[R] r.range.mkq.ker : linear_equiv.of_eq _ _ (submodule.ker_mkq _).symm</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 205237745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595944404
    },
    {
        "content": "<p>I also asked this over at Github: how hard would it be to make that claim (rather than the code) invalid?</p>",
        "id": 205237866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595944448
    },
    {
        "content": "<p>You can fix it by doing the calc in <code>iso</code> rather than <code>linear_iso</code></p>",
        "id": 205238809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595944898
    },
    {
        "content": "<p>Is the <code>≃ₗ[R]</code> the issue?</p>",
        "id": 205238903,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1595944924
    },
    {
        "content": "<p>It looks like <code>calc</code> doesn't like the <code>R</code> argument to the relation.</p>",
        "id": 205239022,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595944991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, to do that Markus would have to put in the <code>linear_equiv.to_Module_iso'</code> separately after each <code>:</code>, right?</p>",
        "id": 205239050,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595945009
    },
    {
        "content": "<p>right, and I'm guessing you want these anyways to work in RMod in general</p>",
        "id": 205239081,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595945033
    },
    {
        "content": "<p>+1</p>",
        "id": 205239092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595945040
    },
    {
        "content": "<p>but maybe that's circular with what we're defining now, I haven't looked closely</p>",
        "id": 205239146,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595945053
    },
    {
        "content": "<p>(Gosh it would be nice if we all used the polymorphic <code>iso</code> everywhere anyway. :-)</p>",
        "id": 205239180,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595945068
    },
    {
        "content": "<p>for instance if these are all general facts about abelian categories but we're in the middle of proving RMod is an abelian category</p>",
        "id": 205240495,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595945629
    },
    {
        "content": "<p>then it's probably not worth making them into separate definitions if they'll only ever be used here</p>",
        "id": 205240596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595945673
    }
]