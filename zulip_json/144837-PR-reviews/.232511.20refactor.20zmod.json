[
    {
        "content": "<p>As identified in <a href=\"https://github.com/leanprover-community/mathlib/issues/1564\" title=\"https://github.com/leanprover-community/mathlib/issues/1564\">#1564</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/1601\" title=\"https://github.com/leanprover-community/mathlib/issues/1601\">#1601</a>, there is currently a bit of a mess involved with primality assumptions. I've made an attempt at refactoring the library, and this is the first step. If people like this, it shouldn't be hard to move the padics over to this framework as well.</p>",
        "id": 195145868,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587702469
    },
    {
        "content": "<p>I'm not sure the change to make <code>zmod n</code> be two different types depending on <code>n</code> is going to be a net positive. It means you can't do <code>cases (i : zmod n)</code></p>",
        "id": 195146752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587703925
    },
    {
        "content": "<p>Here's a crazy idea: <code>zmod n := quotient int (int.modeq n)</code></p>",
        "id": 195146831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587704094
    },
    {
        "content": "<p>with the sizes of numbers in the computational fragment being controlled by appropriate calls to <code>normalize : zmod n -&gt; zmod n</code> that is provably equal to the identity</p>",
        "id": 195146847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587704146
    },
    {
        "content": "<p>BTW, can we use the general <code>add_subgroup.quotient</code> framework here?</p>",
        "id": 195146985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587704311
    },
    {
        "content": "<p>I think I prefer <code>modeq</code> for its defeq</p>",
        "id": 195147095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587704498
    },
    {
        "content": "<p>I think <code>add_subgroup.quotient</code> is going to require it to be of the form <code>n | a - b</code> at best, which isn't horrible but doesn't match <code>modeq</code></p>",
        "id": 195147149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587704564
    },
    {
        "content": "<p>Why not use <code>quotient_add_group.left_rel</code> for <code>modeq</code>? This will give us many properties for free.</p>",
        "id": 195147240,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587704701
    },
    {
        "content": "<p>(or better ideal quotient)</p>",
        "id": 195147264,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587704747
    },
    {
        "content": "<p>it sounds like the sort of change that will get our dependencies in a tangle</p>",
        "id": 195147306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587704767
    },
    {
        "content": "<p>Plus most of the work is in <code>nat.modeq</code> anyway and that's not a subgroup quotient</p>",
        "id": 195147405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587704898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So far it seems to work fine, after setting up a bit of api</p>",
        "id": 195147408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587704906
    },
    {
        "content": "<p>What would you expect to happen after <code>cases (i : zmod n)</code>?</p>",
        "id": 195147430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587704957
    },
    {
        "content": "<p>To get an integer representative?</p>",
        "id": 195147434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587704969
    },
    {
        "content": "<p>I guess yes.</p>",
        "id": 195147439,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1587704979
    },
    {
        "content": "<p>well before you would get a nat and a proof it's less than n</p>",
        "id": 195147440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587704981
    },
    {
        "content": "<p>with the quotient you would get an int</p>",
        "id": 195147448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587704995
    },
    {
        "content": "<p>Now you have <code>i.val</code> and <code>i.val_lt</code>.</p>",
        "id": 195147450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587704997
    },
    {
        "content": "<p>And the <code>cast : int â†’ zmod n</code> is surjective, so you can case on that to get an integer representative.</p>",
        "id": 195147494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705020
    },
    {
        "content": "<p>the main time when API boundaries don't work is when defeq stuff gets involved</p>",
        "id": 195147500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705058
    },
    {
        "content": "<p>defining a type by cases on a parameter definitely gets defeq stuff involved</p>",
        "id": 195147505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705076
    },
    {
        "content": "<p>Sure, but I thought you didn't want to rely on defeq too much?</p>",
        "id": 195147515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705102
    },
    {
        "content": "<p>I don't</p>",
        "id": 195147543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705123
    },
    {
        "content": "<p>Like I said, after setting up the api, I didn't have too do much work in refactoring the rest of the library</p>",
        "id": 195147561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705128
    },
    {
        "content": "<p>The changes to the other files are because of <code>[fact p.prime]</code> not because of the change in the definition of <code>zmod n</code></p>",
        "id": 195147572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705158
    },
    {
        "content": "<p>I don't have any particular issues to bring up with the new definition of the type. It's only a vague warning flag for me</p>",
        "id": 195147640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705280
    },
    {
        "content": "<p>I also didn't like it at first. But it turned out to work quite well.</p>",
        "id": 195147644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705299
    },
    {
        "content": "<p>perhaps we will see an issue later, perhaps not</p>",
        "id": 195147652,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705303
    },
    {
        "content": "<p>With your definition, will you be able to prove stuff in <code>zmod 2</code> using <code>dec_trivial</code>?</p>",
        "id": 195147661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705334
    },
    {
        "content": "<p>it's basically equivalent to making the type irreducible, since no one will want to analyze the type now</p>",
        "id": 195147665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705344
    },
    {
        "content": "<p>Except if you are in <code>zmod n</code> for an explicit <code>n</code>.</p>",
        "id": 195147710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705366
    },
    {
        "content": "<p>Oh, <code>zmod n</code> isn't finite anymore</p>",
        "id": 195147712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705375
    },
    {
        "content": "<p>so that might inhibit a <code>dec_trivial</code> proof</p>",
        "id": 195147720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705387
    },
    {
        "content": "<p>unless we use some mechanism for proving nonzero like Anne's <code>numeral</code> typeclass in the other thread</p>",
        "id": 195147724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705412
    },
    {
        "content": "<p>Which occurs quite frequently in quadratic reciprocity. You have quite a number of slick <code>dec_trivial</code> proofs there.</p>",
        "id": 195147728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705414
    },
    {
        "content": "<p><code>zmod n</code> is a fintype under the assumption <code>[fact (0 &lt; n)]</code>.</p>",
        "id": 195147750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705444
    },
    {
        "content": "<p>yes but unless there is a way to prove that assumption it's useless</p>",
        "id": 195147757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705466
    },
    {
        "content": "<p>It is proven automatically for <code>n.succ</code>, which was good enough for this PR.... ?</p>",
        "id": 195147809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705507
    },
    {
        "content": "<p>I guess your <code>dec_trivial</code> might become <code>by haveI : fact (0 &lt; 2) := \\&lt;dec_trivial\\&gt;; exact dec_trivial</code></p>",
        "id": 195147811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705510
    },
    {
        "content": "<p>Hmm, I don't think I had to do that.</p>",
        "id": 195147820,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705547
    },
    {
        "content": "<p>I'm not sure whether <code>2</code> counts as <code>1.succ</code> or not. Lean always keeps me on my toes here</p>",
        "id": 195147822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705561
    },
    {
        "content": "<p>But maybe <code>[fact (0 &lt; n)]</code> could be proven from the numeral class as well.</p>",
        "id": 195147823,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705571
    },
    {
        "content": "<p>You don't actually need the numeral class here, just a few instances about <code>fact (0 &lt; n)</code></p>",
        "id": 195147867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705603
    },
    {
        "content": "<p>Right, in this case <code>bit1</code> will work (-; because <code>-1/2</code> is not a term of <code>nat</code>, lol</p>",
        "id": 195147877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587705620
    },
    {
        "content": "<p><code>fact (0 &lt; bit1 n)</code> and <code>[fact (0 &lt; n)] : fact (0 &lt; bit0 n)</code></p>",
        "id": 195147882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1587705631
    }
]