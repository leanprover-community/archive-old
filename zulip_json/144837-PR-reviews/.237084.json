[
    {
        "content": "<p>The nat smul refactor builds, and the <code>archive</code> and <code>test</code> directories also. Now it's <code>leanchecker</code> who is unhappy, and I don't know what to do about this.</p>",
        "id": 234315729,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618317020
    },
    {
        "content": "<p>I'm really looking forward to this PR. (Or perhaps there is a follow-up for <code>int</code> smul?) I just ran into a <code>smul_with_zero.to_has_scalar = finsupp.has_scalar</code> goal.</p>",
        "id": 234325135,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618320785
    },
    {
        "content": "<p>For what type of finsupp?</p>",
        "id": 234326606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618321264
    },
    {
        "content": "<p>I'm building the free R-linear completion of a category, so the morphisms are <code>R</code>-valued finsupps.</p>",
        "id": 234327257,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618321477
    },
    {
        "content": "<p>I then show that this category is preadditive, which adds an instance of <code>add_comm_group</code> for each hom type.</p>",
        "id": 234327308,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618321501
    },
    {
        "content": "<p>Then a moment later a proof picks up the <code>int.module</code> instance from the <code>add_comm_group</code>, and then we have two different <code>has_scalar</code>.</p>",
        "id": 234327415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618321543
    },
    {
        "content": "<p>Yes, there is a follow-up for ints, but hopefully all the difficulties will have been solved with this one, and the other one will be straightforward.</p>",
        "id": 234327506,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618321566
    },
    {
        "content": "<p>(I was thinking that all the difficulties for this one had been solved, so you can imagine by disappointment when seeing the leanchecker failure :-)</p>",
        "id": 234327607,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618321608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I just want to give you a big big thank you for this refactor! Know that I'm cheering you on!</p>",
        "id": 234328020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618321743
    },
    {
        "content": "<p>Yes this is a lot of work to solve a kind of rare but actually very annoying when it happens to you problem</p>",
        "id": 234331244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618322835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234315729\">said</a>:</p>\n<blockquote>\n<p>The nat smul refactor builds, and the <code>archive</code> and <code>test</code> directories also. Now it's <code>leanchecker</code> who is unhappy, and I don't know what to do about this.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , I am afraid your wisdom would be be needed on this one :-(</p>",
        "id": 234363963,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618333341
    },
    {
        "content": "<p>I can't reproduce this locally. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 234364012,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618333365
    },
    {
        "content": "<p>Argh!</p>",
        "id": 234364155,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618333421
    },
    {
        "content": "<p>Last time leanchecker did something hard to reproduce, wasn't it an olean cache hash collision? Could that have happened again?</p>",
        "id": 234367980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618334841
    },
    {
        "content": "<p>When I did <code>lean --make</code> after <code>leanproject up</code>, it <em>did</em> recompile some files.  So maybe there is indeed some issue with the cache.</p>",
        "id": 234370158,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618335629
    },
    {
        "content": "<p>Same here: after <code>leanproject up</code> , then doing <code>lean --make src</code> recompiles some files, so there is something fishy with the cache.</p>",
        "id": 234379280,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618339290
    },
    {
        "content": "<p>You can add a docstring somewhere in <code>logic/basic</code> to make the CI recompile the whole library.</p>",
        "id": 234383424,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1618340907
    },
    {
        "content": "<p>Perhaps bumping the hash from 32 to 64 bit (or, optimistically SHA1 or similar) can't wait till lean 4</p>",
        "id": 234386836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618342306
    },
    {
        "content": "<p>I am assuming that something with probability <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>32</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{-32}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> didn't just happen twice?</p>",
        "id": 234390104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618343696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234383424\">said</a>:</p>\n<blockquote>\n<p>You can add a docstring somewhere in <code>logic/basic</code> to make the CI recompile the whole library.</p>\n</blockquote>\n<p>Good idea, I've just done that (although if the problem is that two olean files get the same hash, this shouldn't change after this).</p>",
        "id": 234390568,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618343829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234390104\">said</a>:</p>\n<blockquote>\n<p>I am assuming that something with probability <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>32</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{-32}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> didn't just happen twice?</p>\n</blockquote>\n<p>Well it might be closer to 2^-16 because of birthday problems, although this still seems a bit unlikely. It might be a weakness in the hash function</p>",
        "id": 234422037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618359400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234390568\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234383424\">said</a>:</p>\n<blockquote>\n<p>You can add a docstring somewhere in <code>logic/basic</code> to make the CI recompile the whole library.</p>\n</blockquote>\n<p>Good idea, I've just done that (although if the problem is that two olean files get the same hash, this shouldn't change after this).</p>\n</blockquote>\n<p>Docstrings should be in the olean files (because they are used by hovers in downstream files), so adding a docstring should change the hash of that file and all its dependents.</p>",
        "id": 234422209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618359538
    },
    {
        "content": "<p>It's passing CI! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>\n<p>Anyone planning on reading through it all? :-)</p>",
        "id": 234448346,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618382242
    },
    {
        "content": "<p>I suggest that we merge this asap.</p>",
        "id": 234454440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618385808
    },
    {
        "content": "<p>I'll take a look at it now, but, as with most of these massive refactors, I don't think there is much to be reviewd, once CI is happy.</p>",
        "id": 234454510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618385845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">algebra_nat</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">algebra.id</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Is that expected? I guess it's a diamond that should be solved in a future PR? By adding even more fields to <code>semiring</code>?</p>",
        "id": 234455219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618386200
    },
    {
        "content": "<p>Doesn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id\">docs#algebra.id</a> use the smul found by typeclass search?</p>",
        "id": 234456737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618386939
    },
    {
        "content": "<p>I expect that the problem is <code>to_ring_hom</code></p>",
        "id": 234456828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618386974
    },
    {
        "content": "<p>I think the problem is the use of to_ring_hom</p>",
        "id": 234456860,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618386992
    },
    {
        "content": "<p>That should probably be <code>{ smul := (\\smul), ..(ring_hom.id R).to_algebra}</code></p>",
        "id": 234456911,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618387019
    },
    {
        "content": "<p>Possibly then needing a manual proof of <code>smul_def' :=</code></p>",
        "id": 234456976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618387059
    },
    {
        "content": "<p>That sounds like something that is actually fixable in master independent of this PR</p>",
        "id": 234457060,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618387096
    },
    {
        "content": "<p>but <code>nat.cast_ring_hom nat</code> is not defeq to <code>ring_hom.id nat</code>, is it?</p>",
        "id": 234457151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618387162
    },
    {
        "content": "<p>This PR is only supposed to solve <code>smul</code> issues. And</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra_nat</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_has_scalar</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">algebra.id</span> <span class=\"n\">ℕ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_has_scalar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works fine. So this must be something with the other fields.</p>",
        "id": 234457454,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618387248
    },
    {
        "content": "<p>Ok, understood.</p>",
        "id": 234457882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618387406
    },
    {
        "content": "<p>Indeed, what fails is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nat.cast_ring_hom</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>This will probably be solved by Lean4-like numerics, i.e., embedding another data field containing the cast from nat into your ring as data.</p>",
        "id": 234457975,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618387447
    },
    {
        "content": "<p>One question I have (but it's minor) is whether we want to keep <code>nsmul</code> as a name.</p>",
        "id": 234458057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618387495
    },
    {
        "content": "<p>Now that <code>\\bul\\N</code> is gone, I wonder if it should all be renamed to <code>nat_smul</code>. But this can perfectly well be done in a follow-up PR.</p>",
        "id": 234458110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618387524
    },
    {
        "content": "<p>Thanks a lot for writing these massive docs: <a href=\"https://github.com/leanprover-community/mathlib/pull/7084/files#diff-9860a3e2f558fa016e7026f97d27d9196714b9948782edcc6b572689d674d839R248\">https://github.com/leanprover-community/mathlib/pull/7084/files#diff-9860a3e2f558fa016e7026f97d27d9196714b9948782edcc6b572689d674d839R248</a></p>",
        "id": 234458606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618387792
    },
    {
        "content": "<p>This is just moved from another file, since this library note should appear earlier than it used to be. But I indeed had written this, some time ago, for metric spaces :-)</p>",
        "id": 234458965,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618387960
    },
    {
        "content": "<p>Aha, I see.</p>",
        "id": 234459003,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618387975
    },
    {
        "content": "<p>Should it maybe just be put in a file on its own?</p>",
        "id": 234459019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618387987
    },
    {
        "content": "<p>It doesn't even mention groups! :-)</p>",
        "id": 234459025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618387988
    },
    {
        "content": "<p>Anyway, I also meant \"thanks\" for writing these docs: <a href=\"https://github.com/leanprover-community/mathlib/pull/7084/files#diff-9860a3e2f558fa016e7026f97d27d9196714b9948782edcc6b572689d674d839R304\">https://github.com/leanprover-community/mathlib/pull/7084/files#diff-9860a3e2f558fa016e7026f97d27d9196714b9948782edcc6b572689d674d839R304</a></p>",
        "id": 234459058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618388014
    },
    {
        "content": "<p>There is this annoyance in category theory that the two \"canonical\" examples of abelian categories are Abelian Groups and R-modules, and every mathematician knows that an abelian group \"is\" a Z-module, but of course in practice life isn't so easy. In the future one can imagine this getting a little easier.</p>",
        "id": 234474834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618395833
    },
    {
        "content": "<p>Hooray! bors succesfully built the PR. A couple more hours till the linting is done, and then it's in mathlib (-;</p>",
        "id": 234482588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618399964
    },
    {
        "content": "<p>Is it expected that <code>leanchecker</code> time increased from ~35 to ~60 minutes after this PR? (Is there anything we can do about it?)</p>",
        "id": 234491211,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618404163
    },
    {
        "content": "<p>Compile time apparently dropped by 6 minutes, because several slow proofs were refactored.</p>",
        "id": 234491328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618404216
    },
    {
        "content": "<p>So hopefully <code>leanchecker</code> sees similar benefits?</p>",
        "id": 234491359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618404229
    },
    {
        "content": "<p>I guess I'm seeing quite the opposite: <a href=\"https://github.com/leanprover-community/mathlib/runs/2342200929?check_suite_focus=true\">the previous <code>staging</code> build</a>, <a href=\"https://github.com/leanprover-community/mathlib/runs/2342466534?check_suite_focus=true\">the current one with #7084</a></p>",
        "id": 234492012,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618404479
    },
    {
        "content": "<p>I think the reason is that there is still something fishy with the cache/hash: now when I do <code>leanproject up</code> on mathlib master, and then <code>lean --make</code>, then it starts recompiling stuff. The <code>leanchecker</code> step certainly had to do this recompiling step before exporting everything and checking it with <code>leanchecker</code>, which would explain the additional time.</p>",
        "id": 234519968,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618413916
    },
    {
        "content": "<p>This is a question relating to the consequences of this PR.  The lemma below works with this proof.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_smul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">zero_nsmul</span><span class=\"o\">]</span> <span class=\"o\">},</span> <span class=\"c1\">--why not simp, and that's it?</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">succ_nsmul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>However, the \"old\" proof used to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat_smul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[(</span><span class=\"bp\">•</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>I actually do not mind about the longer proof, but I have two questions.</p>\n<ul>\n<li>Am I missing a simple proof of the lemma?</li>\n<li>Why does <code>zero_nsmul</code>, which is a <code>simp</code> lemma, have to be explicitly mentioned in the first proof above?</li>\n</ul>\n<p>Thanks!</p>",
        "id": 234520206,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618413998
    },
    {
        "content": "<p>The reason is that you are too early in the import hierarchy, before the semimodule structure is registered. If you do it later in the hierarchy, <code>by simp</code> is enough.</p>",
        "id": 234520627,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618414150
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_smul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 234520729,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618414193
    },
    {
        "content": "<p>Great, thanks!</p>\n<p>Also:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_smul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">succ_nsmul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and even, like Sébastien's, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_smul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 234520833,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618414214
    },
    {
        "content": "<p>Note that <code>zero_nsmul</code> is not a simp lemma, because it is superseded by <code>zero_smul</code> later on.</p>",
        "id": 234521125,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618414309
    },
    {
        "content": "<p>Ok, thanks a lot for the explanation!  I really like this refactor and I am getting used to it!</p>",
        "id": 234521385,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618414385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234521125\">said</a>:</p>\n<blockquote>\n<p>Note that <code>zero_nsmul</code> is not a simp lemma, because it is superseded by <code>zero_smul</code> later on.</p>\n</blockquote>\n<p>Should it be a simp lemma until the superseding lemma is created?</p>",
        "id": 234523499,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618415161
    },
    {
        "content": "<p>That's what I did initially, but the <code>simp_nf</code> linter complained. Since it is only the case in a few files, I don't think it matters.</p>",
        "id": 234527274,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618416421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234519968\">said</a>:</p>\n<blockquote>\n<p>I think the reason is that there is still something fishy with the cache/hash: now when I do <code>leanproject up</code> on mathlib master, and then <code>lean --make</code>, then it starts recompiling stuff. The <code>leanchecker</code> step certainly had to do this recompiling step before exporting everything and checking it with <code>leanchecker</code>, which would explain the additional time.</p>\n</blockquote>\n<p>This is very worrisome.  It took 2 minutes to finish compilation on my machine.</p>",
        "id": 234527734,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618416593
    },
    {
        "content": "<p>I have seen this behaviour before with a branch I was working on with a student: after <code>leanproject get-cache</code> I would always have to compile with <code>lean --make</code>, and it always started at the same random place, and we could never explain why, but it was relatively late in the heirarchy so it would only ever take a couple of minutes and we learnt to live with it. The problem didn't go away for months.</p>",
        "id": 234528317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618416809
    },
    {
        "content": "<p>It's the <code>koszul_cx</code> branch of mathlib FWIW. I'm no computer scientist but are we talking about the same issue? If I checkout this branch then <code>leanproject get-cache</code> and then <code>lean --make src</code> starts producing output. I just tried it again and it looks like the problem is still there. Poor Amelia Livingston has been dealing with this throughout her MSc.</p>",
        "id": 234529233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618417153
    },
    {
        "content": "<p>Ah ok, then I'm a bit relieved.  This is apparently not a new problem.</p>",
        "id": 234529346,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618417187
    },
    {
        "content": "<p>I can confirm that we've had this problem since around January at the very least.</p>",
        "id": 234529476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618417224
    },
    {
        "content": "<p>Can you reproduce by the way?</p>",
        "id": 234529519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618417237
    },
    {
        "content": "<p>Yes, I'm observing exactly the same problem: running <code>lean --make src</code> after <code>leanproject up</code> recompiles files (for 2 minutes..).  This is not the intended behavior.</p>",
        "id": 234529635,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618417277
    },
    {
        "content": "<p>Fwiw, I think that 2 minutes on Gabriel's beast translates to 20 minutes on a normal laptop (-;</p>",
        "id": 234529722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618417321
    },
    {
        "content": "<p>The difference between you and me is that when I observe unintended behaviour I just assume it's my own fault.</p>",
        "id": 234529789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618417337
    },
    {
        "content": "<p>Yes every meeting we would have would start with me pulling her branch and then spending a few minutes chatting while it compiled and we'd muse on what we'd done for me to be in this mess.</p>",
        "id": 234529899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618417393
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7192\">#7192</a></p>",
        "id": 234529925,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618417406
    },
    {
        "content": "<p>wow -- you can fix this by editing README.md only?</p>",
        "id": 234530067,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618417464
    },
    {
        "content": "<p>If I'm correct, it should be also fixed after the next batch is merged.</p>",
        "id": 234530105,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618417486
    },
    {
        "content": "<p>I didn't notice that we already had a batch running.</p>",
        "id": 234530159,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618417510
    },
    {
        "content": "<p>AFAICT, all that's necessary to fix this is to upload the newly compiled olean files.</p>",
        "id": 234530284,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618417564
    },
    {
        "content": "<p>In Amelia's branch, from what Kevin is saying, the problem has been there for a long time, even after updating the branch again and again. Could it be that two files have the same hash, and this doesn't change while these two files are not updated?</p>",
        "id": 234530631,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618417729
    },
    {
        "content": "<p>Hmm, the issue with Amelia's branch might also be that it doesn't build.  The CI build terminates after the first error (or so).  If the error comes early, then there's still lots of files that have no oleans.</p>",
        "id": 234531414,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618417998
    },
    {
        "content": "<p>I'm pretty sure that it sometimes built. [I might be wrong]</p>",
        "id": 234531490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618418030
    },
    {
        "content": "<p>All xs are red here: <a href=\"https://github.com/leanprover-community/mathlib/commits/koszul_cx\">https://github.com/leanprover-community/mathlib/commits/koszul_cx</a></p>",
        "id": 234531700,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618418095
    },
    {
        "content": "<p>(at least after the last merge)</p>",
        "id": 234531796,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618418129
    },
    {
        "content": "<p>The reason this strikes me as odd is that I certainly remember meetings in e.g. Feb where leanproject get-cache wouldn't give me a fully compiled project but I could fix it with <code>lean --make src</code> and I'd get no errors.</p>",
        "id": 234531985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618418199
    },
    {
        "content": "<p>Last <code>bors</code> run failed, at the <code>leanchecker</code> stage. <a href=\"https://app.bors.tech/batches/137714\">https://app.bors.tech/batches/137714</a> Is there a way to download the oleans, to see if <code>lean --make src</code> has something to recompile?</p>",
        "id": 234532004,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618418208
    },
    {
        "content": "<p><code>leanproject get-mathlib-cache --rev df0b3be</code> should work</p>",
        "id": 234532141,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618418270
    },
    {
        "content": "<p>(after checking out the <code>df0b3be</code> commit)</p>",
        "id": 234532230,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618418288
    },
    {
        "content": "<p>Actually, <code>lean --make src/</code> starts compiling even with current <code>master</code>.</p>",
        "id": 234532426,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618418366
    },
    {
        "content": "<p>For me, it starts with <code>src/analysis/mean_inequalities.lean</code>.</p>",
        "id": 234532501,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618418397
    },
    {
        "content": "<p>Do you know how to fetch the df0b3be commit?</p>",
        "id": 234532503,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618418398
    },
    {
        "content": "<p>I assumed <code>git checkout df0b3be</code> would work after fetching, but if not I think <code>master</code> has the same problem right now.</p>",
        "id": 234532773,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618418487
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123965\">Bryan Gin-ge Chen</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234532501\">said</a>:</p>\n<blockquote>\n<p>For me, it starts with <code>src/analysis/mean_inequalities.lean</code>.</p>\n</blockquote>\n<p>For me, it starts with this file, but also with other files importing <code> src/analysis/special_functions/pow.lean</code>. I have created a branch modifying this file, to see if it makes a difference. <a href=\"https://github.com/leanprover-community/mathlib/tree/change_hash\">branch#change_hash</a></p>",
        "id": 234532811,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618418509
    },
    {
        "content": "<p>df0b3be is the commit of the batch that just failed, right?</p>",
        "id": 234532819,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618418514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234532819\">said</a>:</p>\n<blockquote>\n<p>df0b3be is the commit of the batch that just failed, right?</p>\n</blockquote>\n<p>Yes, it is. I copied it from <a href=\"https://github.com/leanprover-community/mathlib/actions/runs/748360382\">https://github.com/leanprover-community/mathlib/actions/runs/748360382</a></p>",
        "id": 234532845,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618418524
    },
    {
        "content": "<p>Mmh, that recompiles for me as well.  (I downloaded the zip version.)</p>",
        "id": 234532957,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618418559
    },
    {
        "content": "<p>The first file is ring_theory/polynomial/cyclotomic (also in master).</p>",
        "id": 234533056,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618418609
    },
    {
        "content": "<p>Good news!  <code>leanproject get mathlib:bump</code> doesn't need recompilation.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/issues/7192\">#7192</a> (probably requires <code>bors r+ p=42</code> so that it's in its own batch)</p>",
        "id": 234533705,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618418863
    },
    {
        "content": "<p>Strange, I wonder why <code>df0b3be</code> failed then, since it also went through a recompilation step.</p>",
        "id": 234534085,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618418997
    },
    {
        "content": "<p>There is probably a difference in how hashes are computed when files are loaded from olean as opposed to lean.  And then compilation is not idempotent.</p>",
        "id": 234534478,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618419128
    },
    {
        "content": "<p>Would having GitHub Actions run <code>leanproject build</code> twice before uploading oleans prevent this in the future?</p>",
        "id": 234534891,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618419267
    },
    {
        "content": "<p>(Assuming we don't want to fuss more with the hashing code in Lean.)</p>",
        "id": 234535051,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618419326
    },
    {
        "content": "<p>Hmm, that might be a good workaround.</p>",
        "id": 234535083,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618419336
    },
    {
        "content": "<p>Added to <a href=\"https://github.com/leanprover-community/mathlib/issues/7192\">#7192</a></p>",
        "id": 234535205,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618419372
    },
    {
        "content": "<p>OK, bors is running it now.</p>",
        "id": 234535625,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1618419528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, are you going to take on the <code>int</code> version as well, or would you like some help? :-)</p>",
        "id": 234594005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618443846
    },
    {
        "content": "<p>I'm working on it.</p>",
        "id": 234628066,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1618470688
    },
    {
        "content": "<p>Then I suppose the rat / division_ring version comes next?</p>",
        "id": 234635516,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618474637
    },
    {
        "content": "<p>Finite fields are division rings but don't have an action of rat (at least not a mathematically natural one which is likely to give rise to diamonds), so it's not quite that.</p>",
        "id": 234639426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618476716
    },
    {
        "content": "<p>Maybe <code>algebra rat A</code>?</p>",
        "id": 234639726,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618476855
    },
    {
        "content": "<p>or even <code>semimodule rat A</code>?</p>",
        "id": 234639750,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618476872
    },
    {
        "content": "<p>the moment you have <code>algebra rat A</code> I think it's pretty clear which rat structure you want to be using! The issue with abelian groups is that sometimes they can inherit more than one Z-structure, all mathematically equal but sometimes not definitionally equal.</p>",
        "id": 234639822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618476920
    },
    {
        "content": "<p>Ah, so <code>char_zero</code> and field?</p>",
        "id": 234639870,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618476950
    },
    {
        "content": "<p>But this happens for rat algebras too I think</p>",
        "id": 234640470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618477237
    },
    {
        "content": "<p>That is, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/rat.algebra_rat\">docs#rat.algebra_rat</a> at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.id\">docs#algebra.id</a> have non-defeq scalar actions for <code>algebra rat rat</code></p>",
        "id": 234640591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618477290
    },
    {
        "content": "<p>At some point we need to convince the devs that TC should use <code>subsingleton</code> instances when available to get past defeq problems...</p>",
        "id": 234643770,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618478809
    },
    {
        "content": "<p>(Where by \"convince\" I mean see if they can work out a way to produce such magic for us. :-)</p>",
        "id": 234643822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618478837
    },
    {
        "content": "<p>They could just rename <code>exact</code> to <code>convert</code> and hope that we never notice.</p>",
        "id": 234644092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618478969
    },
    {
        "content": "<p>Does <code>convert</code> work every time that <code>exact</code> would?</p>",
        "id": 234644887,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618479336
    },
    {
        "content": "<p>Yeah I think so. The issue is that sometimes you're not ready to go \"this is exactly the answer\", you just want to do e.g. a rewrite which fails because of a subsingleton typeclass problem</p>",
        "id": 234645035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618479403
    },
    {
        "content": "<p>Ok, thanks!  I have seen convert work very well when exact didn't, but had never tried replacing exacts with converts, at least not consciously!</p>",
        "id": 234645221,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618479495
    },
    {
        "content": "<p>Well, <code>convert</code> is also a bit more expensive... so if <code>exact</code> works...</p>",
        "id": 234645855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618479831
    },
    {
        "content": "<p>Does a single convert always even help? Aren't there situations where instead of<code>convert f (g x)</code> uou need something like<code>convert f (by convert g (by convert x))</code>?</p>",
        "id": 234645996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618479884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234644887\">said</a>:</p>\n<blockquote>\n<p>Does <code>convert</code> work every time that <code>exact</code> would?</p>\n</blockquote>\n<p>No:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"c1\">-- produces goal 2 = 3</span>\n\n<span class=\"c1\">-- `exact h` works of course</span>\n</code></pre></div>",
        "id": 234646828,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1618480270
    },
    {
        "content": "<p><code>convert h using 1</code> or perhaps <code>0</code> presumably works there?</p>",
        "id": 234647116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618480441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234646828\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237084/near/234644887\">said</a>:</p>\n<blockquote>\n<p>Does <code>convert</code> work every time that <code>exact</code> would?</p>\n</blockquote>\n<p>No:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">convert</span> <span class=\"n\">h</span> <span class=\"c1\">-- produces goal 2 = 3</span>\n\n<span class=\"c1\">-- `exact h` works of course</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm very confused what's going on there; does <code>exact</code> force lean to unfold <code>p</code>? And why does <code>convert</code> create the goal <code>2=3</code>?</p>",
        "id": 234649020,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618481297
    },
    {
        "content": "<p><code>using 0</code> does work Eric</p>",
        "id": 234649056,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1618481312
    },
    {
        "content": "<p>This might be a discussion which is better off elsewhere. Yes <code>exact h</code> tries to identify the goal with <code>h</code> definitionally so it will unfold and reduce</p>",
        "id": 234651845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1618482792
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s example would be a nice addition to the docs for convert to explain why <code>using</code> is needed.</p>\n<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>: <code>7 = bit1 3</code>, <code>5 = bit1 2</code></p>",
        "id": 234652967,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1618483398
    },
    {
        "content": "<p>Gabriel: thank you very much for the enlightening example!</p>",
        "id": 234654516,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1618484322
    }
]