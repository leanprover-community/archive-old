[
    {
        "content": "<p>Can we merge this? It's been a couple weeks and it's relatively important.</p>",
        "id": 273305981,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1645837229
    },
    {
        "content": "<p>I left a few comments.</p>",
        "id": 273311830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1645843432
    },
    {
        "content": "<p>Why do you need this specialization of <code>eq_to_hom</code>?</p>",
        "id": 273328113,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645865349
    },
    {
        "content": "<p>Also, it would be nice to isolate adding the coercion to <code>Groupoid</code> and removing the <code>.α</code> in a separate PR.</p>",
        "id": 273328168,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645865428
    },
    {
        "content": "<p>Yes -- PRs of over 200 lines and containing several definitions are harder to review -- the shorter you can make a PR the better. The community has extremely high standards when it comes to library code as well. A postdoc of mine made a PR changing one character and two weeks later there's still a lively discussion going on about the change.</p>",
        "id": 273328377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645865828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> which one? I want to see this.</p>",
        "id": 273352268,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645895957
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11962\">#11962</a> changes a <code>u</code> to a <code>v</code></p>",
        "id": 273353400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645897516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"437861\">@Praneeth Kolichala</span>, my comment about splitting off the <code>has_coe_to_sort</code> changes is for you to <strong>split them off</strong>, not retract them <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 273371690,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645921315
    },
    {
        "content": "<p>Understand, <a href=\"https://github.com/leanprover-community/mathlib/pull/11595\">#11595</a> should depend on the <code>has_coe_to_sort</code> PR.</p>",
        "id": 273371737,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645921345
    },
    {
        "content": "<p>Oh my idea was the reverse. I locally checked out a new branch with the coe_to_sort changes, reverted those commits on the old branch, and I was planning on making the has_coe_to_sort branch depend on the old one.</p>",
        "id": 273372301,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1645922081
    },
    {
        "content": "<p>I can do what you're suggesting too (but I guess I would have to manually copy over the  <code>has_coe_to_sort</code> changes, since the commits modify code in <a href=\"https://github.com/leanprover-community/mathlib/pull/11595\">#11595</a>, so they can't be automatically be added to a different branch?)</p>",
        "id": 273372388,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1645922239
    },
    {
        "content": "<p>I made the PR because it was already ready (<a href=\"https://github.com/leanprover-community/mathlib/pull/12323\">#12323</a>), but I'll work on doing it in the way <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> suggested, which is to have this PR (<a href=\"https://github.com/leanprover-community/mathlib/pull/11595\">#11595</a>) depend on that rather than the other way around.</p>",
        "id": 273372588,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1645922569
    },
    {
        "content": "<p>Both should be fine (but you should have merge conflicts either way, right?)</p>",
        "id": 273383666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645939156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> To respond to your questions/suggestions that you left on the pull request:</p>\n<p>The <code>ulift</code> here is to allow <code>H : I × X -&gt; Y</code>, a homotopy, to be of type <code>(ulift I) × X -&gt; Y</code>, as you know. This is so that we can map pairs of paths <code>(p, q)</code>, where p is a homotopy path class in <code>I</code> and <code>q</code> is a homotopy path class in <code>X</code>, to the path in Y that happens when you \"run\" <code>p</code> and <code>q</code> in parallel (i.e. the path which is at <code>H(p(t), q(t))</code> at time <code>t</code>; for this to be well-defined, we need to show that it doesn't matter which path you choose in <code>p</code>).   I thought this was in general a useful notion to have for homotopies, and this is already implemented by <code>prod_to_prod_Top</code>, which provides an isomorphism <code>πₓA × πₓB = πₓ(A × B)</code>, and hence exactly such a map. Unfortunately, because <code>prod_to_prod_Top</code> is a statement using category theory, it requires <code>A</code> and <code>B</code> to be in the same universe. This is why I explicitly want a conversion of <code>H</code> to a map where <code>I</code> and <code>X</code> are in the same universe. We don't need to lift <code>X</code> and <code>Y</code> to higher universes because they are already spaces in an arbitrary universe, whereas we need to lift <code>I</code> because it is a subset of the real numbers, which only lives in <code>Type 0</code>.</p>\n<p>I have another version using the lower level <code>path.homotopic.prod</code>, which is what <code>prod_to_prod_Top</code> is based off of, and avoiding the slightly messy <code>ulift</code>'s . However, I chose to use this because it takes advantage of the existing category theory library. For example, I can use the functorality of <code>prod_to_prod_Top</code> without reproving it (e.g. see lemma <code>eq_diag_path</code>). I'm OK with going back to that version if people think it's cleaner/shorter.</p>",
        "id": 273589289,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1646108340
    },
    {
        "content": "<p>For <code>hcast</code> (homotopy cast), this is largely for convenience. I agree that there might be a better way to do it, but I'm not really sure how. Without this abbreviation, <code>eq_to_hom</code> becomes very painful to use for the fundamental groupoid, because Lean doesn't recognize <code>x=y</code>, where <code>x</code> and <code>y</code> are points in a topological space, as also expressing an equality about points in the corresponding fundamental groupoid.</p>\n<p>For example, the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">diagonal_path'</span> <span class=\"o\">:</span> <span class=\"n\">from_top</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">from_top</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">hcast</span> <span class=\"o\">(</span><span class=\"n\">H.apply_zero</span> <span class=\"n\">x₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">H.diagonal_path</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">hcast</span> <span class=\"o\">(</span><span class=\"n\">H.apply_one</span> <span class=\"n\">x₁</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>would have to be something like (untested):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">diagonal_path'</span> <span class=\"o\">:</span> <span class=\"n\">from_top</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">from_top</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">H.apply_zero</span> <span class=\"n\">x₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">from_top</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"n\">from_top</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x₀</span><span class=\"o\">)))</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">H.diagonal_path</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">eq_to_hom</span> <span class=\"o\">(</span><span class=\"n\">H.apply_one</span> <span class=\"n\">x₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">from_top</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">x₁</span><span class=\"o\">))</span> <span class=\"bp\">⟶</span> <span class=\"n\">from_top</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x₁</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which is much longer, and time-consuming to think about because Lean doesn't automatically figure out the types for you.</p>\n<p>I'm not sure in what other way I'm reinventing the wheel. The rest of the file relates <code>hcast</code> for homotopy classes of paths to <code>path.cast</code>, and then proves a small lemma that involves casts. I was thinking it might be easier to use <code>heq</code> since there seems to be some additions to the relationship between <code>eq_to_hom</code> and <code>heq</code>, but <code>eq_to_hom</code> is good enough here. If you have any suggestions to simplify, or could point me to lemmas that I've accidentally duplicated, I'd appreciate it!</p>",
        "id": 273589644,
        "sender_full_name": "Praneeth Kolichala",
        "timestamp": 1646108796
    },
    {
        "content": "<p>I swear this is a question for <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span></p>",
        "id": 273607059,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646124700
    }
]