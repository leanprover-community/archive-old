[
    {
        "content": "<p>Hopefully we can get the <code>prop_limits</code> branch merged, but I thought I'd ping <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> at the same time here in the hope we could discuss future changes that would lessen the pain this PR may cause.</p>",
        "id": 209478619,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599635900
    },
    {
        "content": "<p>In particular, my suggestion made earlier was that we could add <code>chosen_limit</code> class, which carries data (and is thus dangerous for the typeclass system), and have most of the API rely on <code>chosen_limit</code> rather than <code>has_limit</code>. We'd provide a single global instance using the axiom of choice to translate <code>has_limit</code> to <code>chosen_limit</code>. As long as no one makes other global instances, we'll never hit defeq problems, I think.</p>",
        "id": 209478694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599635984
    },
    {
        "content": "<p>But still you have the option of locally activating particular <code>chosen_limit</code> instances, and controlling what gets fed in to uses of the limits API in that file.</p>",
        "id": 209478761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599636022
    },
    {
        "content": "<p>A couple of things: This has already been mentioned by a few people a few times, but I think it should be explicitly encouraged in the documentation for definitions and lemmas to be stated using <code>is_</code> versions (with <code>has_</code> or <code>chosen_</code> versions derived from those) as much as possible - this would make it cleaner to combine different bits of the library among other benefits.</p>",
        "id": 209504232,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1599654858
    },
    {
        "content": "<p>I think it would also be nice to see <code>has_images</code> become propositional if <code>has_limits</code> is as well for consistency throughout, in particular to help in the cases where we are converting between images and limits (<span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> mentioned this to me)</p>",
        "id": 209504362,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1599654961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233995/near/209504362\">said</a>:</p>\n<blockquote>\n<p>I think it would also be nice to see <code>has_images</code> become propositional if <code>has_limits</code> is as well for consistency throughout, in particular to help in the cases where we are converting between images and limits (<span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> mentioned this to me)</p>\n</blockquote>\n<p>Yes, this is on my roadmap, but I don't think it needs to be part of <a href=\"https://github.com/leanprover-community/mathlib/issues/3995\">#3995</a>, which is already a huge PR.</p>",
        "id": 209504481,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1599655059
    },
    {
        "content": "<p>Further for consistency, I wonder if we want to change <code>is_left_adjoint</code> to be propositional too? I think the case here is a bit more subtle than for limits but it is a little odd how <code>is_</code> is usually subsingleton, except for this case (somewhat relatedly, I find it odd that <code>has_add</code> and <code>has_mul</code> etc are data, but we are making <code>has_limits</code> propositional; this feels inconsistent with the rest of mathlib).</p>",
        "id": 209504494,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1599655075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233995/near/209504481\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233995/near/209504362\">said</a>:</p>\n<blockquote>\n<p>I think it would also be nice to see <code>has_images</code> become propositional if <code>has_limits</code> is as well for consistency throughout, in particular to help in the cases where we are converting between images and limits (<span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> mentioned this to me)</p>\n</blockquote>\n<p>Yes, this is on my roadmap, but I don't think it needs to be part of <a href=\"https://github.com/leanprover-community/mathlib/issues/3995\">#3995</a>, which is already a huge PR.</p>\n</blockquote>\n<p>Right, I'm mentioning all these as things I'd like to see soon rather than an additional part of <a href=\"https://github.com/leanprover-community/mathlib/issues/3995\">#3995</a></p>",
        "id": 209504578,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1599655111
    },
    {
        "content": "<p>Similarly, I have a draft branch in which I make <code>connected</code> propositional (and can rename to <code>is_connected</code>).</p>",
        "id": 209578196,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599691859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233995/near/209504232\">said</a>:</p>\n<blockquote>\n<p>A couple of things: This has already been mentioned by a few people a few times, but I think it should be explicitly encouraged in the documentation for definitions and lemmas to be stated using <code>is_</code> versions (with <code>has_</code> or <code>chosen_</code> versions derived from those) as much as possible - this would make it cleaner to combine different bits of the library among other benefits.</p>\n</blockquote>\n<p>I've just added a module doc to the PR, which has a paragraph emphasising this point (although admitting we currently fall far short).</p>",
        "id": 209581087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599694067
    },
    {
        "content": "<p>On my list for chores that can happen after this merges:</p>\n<ul>\n<li>rename <code>cone.X</code> as <code>cone.apex</code>, per an old suggestion</li>\n<li>separate <code>category_theory/limits/limits.lean</code> into a <code>is_limit.lean</code> and a <code>has_limit.lean</code> file.</li>\n</ul>",
        "id": 209581171,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599694129
    },
    {
        "content": "<p>Will <code>cocone.X</code> become <code>cocone.apex</code> too? I feel like this isn't the best term, but oh well :) Do we also want to change <code>cartesian_closed</code> to <code>is_cartesian_closed</code>, and make that propositional too?</p>",
        "id": 209581841,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1599694675
    },
    {
        "content": "<p>Yes, my plan had been to change both to <code>.apex</code>. Very happy to use other names; I don't think they <em>have</em> to be the same for both cones and cocones.</p>",
        "id": 209582033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1599694850
    },
    {
        "content": "<p>Riehl uses <code>nadir</code> for cocones, I don't really have any strong feelings on a name - I quite like <code>point</code> though, and I think this has appeared a couple of times in lemma names in <code>limit.lean</code></p>",
        "id": 209582151,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1599694966
    }
]