[
    {
        "content": "<p>Does anyone by chance know of a nice and short name for the function</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The map `ℤ → ℤ` sending $n$ to $(-1) ^ n$. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">neg_one_pow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_pow.pow</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 266690774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641219750
    },
    {
        "content": "<p><code>altern_sgn</code>? <code>alt_pow</code>? <code>alt_sgn</code>?</p>",
        "id": 266690850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641219788
    },
    {
        "content": "<p>The downside of <code>neg_one_pow</code> is that in names like <code>neg_one_pow_eq_neg_one_pow</code> it is hard to realise that the LHS of that name is a single atom.</p>",
        "id": 266690864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641219794
    },
    {
        "content": "<p><code>sgnpow</code>?</p>",
        "id": 266691029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641219855
    },
    {
        "content": "<p><code>negonepow</code>?</p>",
        "id": 266691081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641219885
    },
    {
        "content": "<p>I think <code>negonepow</code> might be better than <code>neg_one_pow</code>. Because it stresses that it's a new atom.</p>",
        "id": 266691898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641220288
    },
    {
        "content": "<p>Here's another thought that just occured to me. We really are only interested in the <em>sign</em>. Not in the <code>(-1)^n</code> for its own sake.</p>",
        "id": 266692014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641220343
    },
    {
        "content": "<p>So should we maybe have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The parity sign function -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">prtysgn</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">r</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"n\">r</span>\n</code></pre></div>",
        "id": 266692094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641220399
    },
    {
        "content": "<p>You don't even need <code>n : ℤ</code> anymore, by the way.</p>",
        "id": 266692252,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641220456
    },
    {
        "content": "<p>You mean <code>n</code> could be anything?</p>",
        "id": 266692278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641220476
    },
    {
        "content": "<p>As long as <code>even n</code> makes sense</p>",
        "id": 266692290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641220485
    },
    {
        "content": "<p>Yeah, in a <code>semiring</code></p>",
        "id": 266692330,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641220494
    },
    {
        "content": "<p>So in particular we could reuse it for <code>ℕ</code></p>",
        "id": 266692376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641220513
    },
    {
        "content": "<p>Yep, good point</p>",
        "id": 266692408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641220533
    },
    {
        "content": "<p>Note that <code>prtysgn</code> is a horrible name. So the naming issue isn't solved that way.</p>",
        "id": 266692525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641220586
    },
    {
        "content": "<p>Reminds me of the Coq naming convention <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 266692566,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641220617
    },
    {
        "content": "<p>I think it would break some lemmas if the sum of two non-even things is not necessarily even.</p>",
        "id": 266692575,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641220623
    },
    {
        "content": "<p>Of course, that's the point of strengthening typeclasses when you need to. General definitions, not so general lemmas.</p>",
        "id": 266692634,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641220657
    },
    {
        "content": "<p>Actually, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.even_add\">docs#nat.even_add</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.even_add\">docs#int.even_add</a> but not the result in a general semiring <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> It should be true though, because <code>2 * a + 2 * b = 2 * (a + b)</code>.</p>",
        "id": 266692774,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641220738
    },
    {
        "content": "<p>Is there a type class where every element is either even or odd?<br>\nOr some subclass of such rings that contains both int and nat?</p>",
        "id": 266692799,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641220759
    },
    {
        "content": "<p>I don't think so. So you will need to have basically each lemma in a version about <code>ℕ</code> and another about <code>ℤ</code>.</p>",
        "id": 266692978,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641220835
    },
    {
        "content": "<p>Sounds like Yaël will be PRing <code>odd_or_even_class</code> later tonight <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 266693118,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641220893
    },
    {
        "content": "<p>Weird that <code>even_add</code> is not done in general</p>",
        "id": 266693368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641220998
    },
    {
        "content": "<p>Anyway, I don't think there are many interesting rings where <code>odd_xor_even</code> holds. <code>ℕ</code> and <code>ℤ</code>. And then some number rings that are fully ramified at <code>2</code>. And of course <code>zmod 2</code> itself.</p>",
        "id": 266693641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641221150
    },
    {
        "content": "<p>But I guess <code>ℕ</code>, <code>ℤ</code> and <code>zmod 2</code> are all legit inputs to this function.</p>",
        "id": 266693730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641221176
    },
    {
        "content": "<p>Is there a particular case where we had to use nat and not int?<br>\nOr there could be a simp lemma coercing stuff in nat into stuff in int and that might be enough.</p>",
        "id": 266693810,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641221227
    },
    {
        "content": "<p>Or you <code>coe</code> everything into <code>zmod 2</code>. For <code>zmod 2</code> all the proofs will be <code>rfl</code>.</p>",
        "id": 266694018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641221346
    },
    {
        "content": "<p>Would introducing a notation fix the naming problem? Something like <code>₋₁ r</code> for example.</p>",
        "id": 266694652,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641221719
    },
    {
        "content": "<p>Ooh, that's a slick idea!</p>",
        "id": 266694708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641221754
    },
    {
        "content": "<p>You still need the <code>n</code> though</p>",
        "id": 266694725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641221762
    },
    {
        "content": "<p>But <code>₋₁^ n</code> could expand to <code>id</code> or <code>has_neg.neg</code> depending on the parity of <code>n</code>.</p>",
        "id": 266694789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641221791
    },
    {
        "content": "<p>On second thought, it doesn't completely fix the naming problem. You still need to what name to use in lemmas about this thing.</p>",
        "id": 266694857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641221832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> pinging you, because you wanted to use something like this in flt-regular, I think.</p>",
        "id": 266695082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641221950
    },
    {
        "content": "<p>Yes, this is going to be useful, thanks.</p>",
        "id": 266697248,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1641223059
    },
    {
        "content": "<p>I'm not sure I yet understand the advantage of this definition vs having a short notation for <code>(-1 : units ℤ) ^ n</code></p>",
        "id": 266697573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641223253
    },
    {
        "content": "<p>One advantage is that <code>n</code> can have type <code>zmod 2</code>. I'm not sure how important that is.</p>",
        "id": 266697647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641223314
    },
    {
        "content": "<p>Would it make sense to have notation like <code>₋₁^ n * r</code>? Or maybe <code>₋₁^ n • r</code>?</p>",
        "id": 266697922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641223469
    },
    {
        "content": "<p>I'm still struggling to show that <code>decidable_pred (even : zmod n → Prop)</code> so that I could give the \"coe everything into <code>zmod 2</code>\" thing a try.<br>\nDoes anyone want to try to show that <code>example {n x : ℕ} : even (x : zmod n) ↔ odd n ∨ even x := sorry</code> or something similar? I don't really know my way around zmod.</p>",
        "id": 266700037,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641224580
    },
    {
        "content": "<p>And I also still think that the original form would suffice, and writing it explicitly as an <code>smul</code> gives us quite a few simp lemmas for free.<br>\nBut I guess everything is worth a shot?</p>",
        "id": 266700382,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641224689
    },
    {
        "content": "<p>I don't think a definition based on <code>even</code> and generalized to <code>semiring</code> is very good, then you end up with nonsense like <code>neg_one_pow (3 : ℚ) = 1</code>.</p>",
        "id": 266701210,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641225055
    },
    {
        "content": "<p>Yeah, that's true.</p>",
        "id": 266701873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641225387
    },
    {
        "content": "<p>I'd also favor <code>₋₁^ n • r</code> over <code>₋₁^ n * r</code>, because then you get all the lemmas about scaling by a group element rather than having to deal with coercions</p>",
        "id": 266702483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641225680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311204.20neg.20one.20pow/near/266697647\">said</a>:</p>\n<blockquote>\n<p>One advantage is that <code>n</code> can have type <code>zmod 2</code>. I'm not sure how important that is.</p>\n</blockquote>\n<p>We could quite easily add a <code>has_pow (units ℤ) (zmod 2)</code> instance if that becomes useful</p>",
        "id": 266702590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641225729
    },
    {
        "content": "<p>I think I will keep the definition like this for now. The new definition seems to cause some timeouts in some stuff in LTE.<br>\nThough it should be fixable, I'm not really convinced that this is worth the pain.</p>",
        "id": 266703757,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641226327
    },
    {
        "content": "<p>As for the naming issue,</p>",
        "id": 266704559,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641226798
    },
    {
        "content": "<p>/poll The name of the map <code>n ↦ (-1) ^ n</code><br>\nneg_one_pow<br>\nnegonepow<br>\nalt_pow<br>\nalg_sgn<br>\nsgnpow</p>",
        "id": 266704561,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641226800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311204.20neg.20one.20pow/near/266690864\">said</a>:</p>\n<blockquote>\n<p>The downside of <code>neg_one_pow</code> is that in names like <code>neg_one_pow_eq_neg_one_pow</code> it is hard to realise that the LHS of that name is a single atom.</p>\n</blockquote>\n<p>While this is a downside, to me sticking to the conventions will make this way more discoverable.</p>",
        "id": 266705323,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641227250
    },
    {
        "content": "<p>Also that lemma could just be named <code>neg_one_pow_apply</code> to fit with our naming conventions.</p>",
        "id": 266705510,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1641227340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2311204.20neg.20one.20pow/near/266693118\">said</a>:</p>\n<blockquote>\n<p>Sounds like Yaël will be PRing <code>odd_or_even_class</code> later tonight <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>\n</blockquote>\n<p>What a mind-reader <span aria-label=\"smirk\" class=\"emoji emoji-1f60f\" role=\"img\" title=\"smirk\">:smirk:</span></p>",
        "id": 266707034,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641228173
    },
    {
        "content": "<p>Is it <code>nonempty (R -&gt;+* zmod 2)</code>?</p>",
        "id": 266707955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641228675
    },
    {
        "content": "<p>No, because you can map everything to <code>0</code>, but that's uninteresting.</p>",
        "id": 266708088,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641228729
    },
    {
        "content": "<p>I think it is since rings are unital in lean.</p>",
        "id": 266708237,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641228827
    },
    {
        "content": "<p>Ah yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.map_one'\">docs#ring_hom.map_one'</a> forces it.</p>",
        "id": 266708504,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641228962
    },
    {
        "content": "<p>If I understand <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> correctly, then we shouldn't even have a new defn. But maybe notation <code>₋₁</code> for <code>-1 : units ℤ</code>. And then we can just write <code>₋₁ ^ n • r</code>, and continue life as usual.</p>",
        "id": 266710105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641229704
    },
    {
        "content": "<p>On the other hand, I claim that <code>₋₁ ^ n • _</code> is just coincidentally doing the right thing in maths notation. But what we really care about is an alternating thingy (sum, series, sequence, whatever).</p>",
        "id": 266710274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641229786
    },
    {
        "content": "<p>So I think I like the idea of having <code>alt n r</code>.</p>",
        "id": 266710387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641229829
    },
    {
        "content": "<p>Note that we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.alternating_sum\">docs#list.alternating_sum</a></p>",
        "id": 266710431,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641229852
    },
    {
        "content": "<p>It would mesh well with how you want to name things.</p>",
        "id": 266710440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641229856
    },
    {
        "content": "<p>I find the <code> ₋₁ </code> weird looking, and worry it might do more harm than good for readability. I'd prefer if we had a nice notation for <code>units</code> to make this <code>(-1 : units ℤ)^n</code> look like <code>(-1 : ℤˣ)^n</code>.<br>\n<code>alt</code> also sounds good to me</p>",
        "id": 266710952,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1641230074
    },
    {
        "content": "<p>Ohh, notation for <code>units</code> makes <em>a lot</em> of sense. Why have we never introduced that before <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> <span aria-label=\"distraught\" class=\"emoji emoji-1f629\" role=\"img\" title=\"distraught\">:distraught:</span> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 266711263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641230225
    },
    {
        "content": "<p>I always thought people had decided not to for some reason <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 266711357,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641230264
    },
    {
        "content": "<p>We have <code>\\^0</code> for the non-zero-divisors submonoid, but that's localized I think</p>",
        "id": 266711646,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641230402
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11236\">#11236</a> introduces <code>ˣ</code> as notation for <code>units</code>.</p>",
        "id": 266818208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641308614
    },
    {
        "content": "<p>Missing a docstring explaining the notation, but otherwise LGTM</p>",
        "id": 266820191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641309579
    },
    {
        "content": "<p>Now that we can write <code>(-1 : ℤˣ)^n</code>, does that mean there is less need for a dedicated function?</p>",
        "id": 267045595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641464898
    },
    {
        "content": "<p>I think I still need to write <code>(↑((-1 : ℤˣ)^n) : ℤ)</code> to obtain what I want, which does not seem that ideal.</p>",
        "id": 267046090,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641465281
    },
    {
        "content": "<p>Can you elaborate why you would need that?</p>",
        "id": 267046225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641465379
    },
    {
        "content": "<p>There is a scalar action of <code>ℤˣ</code> on almost every object you can think of.</p>",
        "id": 267046245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641465400
    },
    {
        "content": "<p>But I think most of the simp lemmas are not stated in terms of  the action of <code>ℤˣ</code>?<br>\nFor example the lemmas for preadditive categories.<br>\nAn alternative is to restate those lemmas in terms of the action by <code>ℤˣ</code>, but I do not think the duplication is worth it.</p>",
        "id": 267046764,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641465773
    },
    {
        "content": "<p>Which simp lemmas are you thinking of?</p>",
        "id": 267046822,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641465827
    },
    {
        "content": "<p>mainly <code>map_zsmul</code>, <code>comp_zsmul</code>, <code>zsmul_comp</code>.</p>",
        "id": 267046886,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641465859
    },
    {
        "content": "<p>Ooh, I definitely think it makes sense to have copies of those lemmas for the action by <code>ℤˣ</code>.</p>",
        "id": 267046921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641465907
    },
    {
        "content": "<p><code>map_uzsmul</code>? Or is that name too horrible?</p>",
        "id": 267046944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641465923
    },
    {
        "content": "<p>To generalize it fully I would need to start from giving <code>has_pow G (units ℤ)</code> and some how making it correspond to <code>has_scalar G (units ℤ)</code> via <code>to_additive</code>. The stuff following is quite a size as well. <br>\nThis is not something that I know how to do off the bat, and unfortunately I don't really have time this week to dive into it :(.<br>\nI'll come back to it next week if this is really the right way to go and no-one has started working on it.</p>",
        "id": 267048791,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641467143
    },
    {
        "content": "<p>I would like to know what <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> thinks</p>",
        "id": 267051153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641468921
    },
    {
        "content": "<p>I assume you meant <code>has_scalar (units ℤ) G</code> not <code>has_scalar G (units ℤ)</code>?</p>",
        "id": 267059014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641474805
    },
    {
        "content": "<p>I think <code>has_pow G (units ℤ)</code> is a totally reasonable instance to exist</p>",
        "id": 267059036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641474818
    },
    {
        "content": "<p>(and so is <code>has_pow M (units nat)</code>, but that's not exactly useful!)</p>",
        "id": 267059108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641474849
    },
    {
        "content": "<p><code>map_uzsmul</code> as an extension of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/map_zsmul\">docs#map_zsmul</a> seems fine to me</p>",
        "id": 267059164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641474895
    },
    {
        "content": "<p>A more general lemma would be that additive maps preserve any action by X that factors through the Z action (<code>is_scalar_tower X Z A</code>), which is really just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_smul_of_tower\">docs#linear_map.map_smul_of_tower</a> but for add_monoid_hom; but that doesn't work for the multiplicative case</p>",
        "id": 267059311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641474982
    }
]