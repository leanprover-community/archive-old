[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥₊`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> writes</p>\n<blockquote>\n<p>If someone has a better idea for the notation, pleas don't hesitate suggest something. The more natural <code>∥`:1024 e:1 `∥₊`:1</code> doesn't work, I think because Lean gets confused with <code>∥ ∥</code>.</p>\n</blockquote>\n<p>Is there anyone who knows how to get the version with <code>∥x∥₊</code> working?</p>",
        "id": 243359092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624268395
    },
    {
        "content": "<p>You could add a zero-width-space again /s</p>",
        "id": 243359453,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1624268599
    },
    {
        "content": "<p>Can you write the line <code>notation...</code> explicitly? I don't know you mean by \"zero-width-space\"... <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 243359874,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624268869
    },
    {
        "content": "<p>zero-width-space is a unicode character that is completely invisible, but still sitting there in your document.</p>",
        "id": 243360204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624269071
    },
    {
        "content": "<p>Not sure we want that in mathlib... it's quite hacky <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 243360219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624269086
    },
    {
        "content": "<p>(And Eric put a <code>/s</code> at the end of his remark)</p>",
        "id": 243360237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624269106
    },
    {
        "content": "<p>(deleting because I could cause genuine confusion)</p>",
        "id": 243360294,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1624269126
    },
    {
        "content": "<p>I see... and I agree that it is quite confusing</p>",
        "id": 243360719,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624269462
    },
    {
        "content": "<p>Is it possible to tell Lean that <code>∥x∥₊</code> should be tried with higher priority than <code>∥x∥</code>?</p>",
        "id": 243360767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624269483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Did you try lowering the priority of <code>∥x∥</code> as notation for <code>has_norm</code>?</p>",
        "id": 243360789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624269502
    },
    {
        "content": "<p>I am not sure how to do it, but with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[priority 100]</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>I get the error <code>invalid expression starting at 389:61</code>, where line 389 is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_real_norm_eq_coe_nnnorm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal.of_real</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥₊</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 243361189,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624269808
    },
    {
        "content": "<p>Note that this is not the first time <code>∥x∥₊</code> is used, but it is the first time it is used together with <code>∥x∥</code></p>",
        "id": 243362095,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624270438
    },
    {
        "content": "<p>And even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">of_real_norm_eq_coe_nnnorm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal.of_real</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>doesn't work, so the problem seems to be <code>∥x∥</code>.</p>",
        "id": 243362269,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624270553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> you know all the ins and outs of the parser nowadays... can you help us out?</p>",
        "id": 243362830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1624270937
    },
    {
        "content": "<p>We would like to have the following two notations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥₊`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 243363182,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624271169
    },
    {
        "content": "<p>Didn't I warn you this would happen? Having your left and right delimiters being the same is a recipe for disaster</p>",
        "id": 243365030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624272566
    },
    {
        "content": "<p>Is this also true in Lean 4? It's....pretty common in maths!</p>",
        "id": 243365057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624272588
    },
    {
        "content": "<p>I suggested the vertical bars with quills on the sides to distinguish</p>",
        "id": 243365073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624272596
    },
    {
        "content": "<p>Even latex has <code>\\left| ... \\right|</code></p>",
        "id": 243365132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624272611
    },
    {
        "content": "<p>I do remember a great post of yours where you wrote some nice ambiguous stuff...</p>",
        "id": 243365144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624272622
    },
    {
        "content": "<p>you can fix the issue with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"bp\">`∥₊`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>but I'm not sure you will like the result</p>",
        "id": 243365198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624272663
    },
    {
        "content": "<p>lean 4 has the potential to alleviate this issue because it has mandatory whitespace as a token, so you can use spacing cues to help tell the difference between left and right delimiters</p>",
        "id": 243365406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624272816
    },
    {
        "content": "<p>I don't know what the <code>1024</code> refers to, so maybe I misunderstood something, but with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>I get errors every time  <code>∥</code> is used, even before the other declaration.</p>",
        "id": 243365510,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624272882
    },
    {
        "content": "<p>Warning: notation precedence doesn't work when both delimiters are the same (in Lean 3 at least). </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">∥</span> <span class=\"c1\">-- `∥`:1 _:1024 `∥`:1 := #0</span>\n</code></pre></div>",
        "id": 243365583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624272953
    },
    {
        "content": "<p>I've always understood this as \"<code>∥</code> can't have two different numbers associated with it, even if you're using it to mean two different things\".</p>",
        "id": 243365669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624272994
    },
    {
        "content": "<p>Yes, that's correct. The way the parser works, those numbers are associated to tokens, not token occurrences within a notation</p>",
        "id": 243365812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624273103
    },
    {
        "content": "<p>Copying Johan's definition from LTE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"n\">e</span><span class=\"bp\">`∥₊`</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>seems to work... let me see if it really compiles</p>",
        "id": 243366096,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624273293
    },
    {
        "content": "<p>Oh, and with that in mind, it explains why <code>id ∥x∥ = 0</code> works, because those precedences say that after the first opening <code>∥</code> the next one you see can't be another opening <code>∥</code>, so <code>∥a∥b∥c∥</code> is always interpreted as <code>(∥a∥) b (∥c∥)</code> instead of <code>∥a (∥b∥) c∥</code></p>",
        "id": 243366102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624273305
    },
    {
        "content": "<p>and it also explains why you have to put parens around it in a lot of cases, because it has the ludicrously low precedence of 1</p>",
        "id": 243366205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624273349
    },
    {
        "content": "<p>Oh, but here's an interesting observation to add on Kevin's:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">∥</span>\n<span class=\"c1\">-- `∥`:1 _:1024 `∥`:1 := norm #0</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"bp\">`∥₊`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">∥</span>\n<span class=\"c1\">-- `∥`:1024 _:1024 `∥`:1024 := norm #0</span>\n<span class=\"c1\">-- `∥`:1024 _:1024 `∥₊`:1 := nnnorm #0</span>\n</code></pre></div>",
        "id": 243366380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624273462
    },
    {
        "content": "<p>So each token occurrence is overwriting the previous precedence</p>",
        "id": 243366402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624273489
    },
    {
        "content": "<p>which is why adding the second notation makes <code>∥x∥</code> parsing change completely</p>",
        "id": 243366434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624273508
    },
    {
        "content": "<p>Yes! So we could be in a position where importing a file using the + notation actually breaks code in other files.</p>",
        "id": 243366473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624273536
    },
    {
        "content": "<p>lean should really throw an error if you try to set two precedences on a single token instead of this</p>",
        "id": 243366560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624273571
    },
    {
        "content": "<p>putting no precedence is apparently the same as putting <code>:1</code></p>",
        "id": 243366862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624273799
    },
    {
        "content": "<p>Both notations are declared in the same file, that compiles with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"n\">e</span><span class=\"bp\">`∥₊`</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>I am building mathlib locally to see if this really works.</p>",
        "id": 243367012,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624273878
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"n\">e</span><span class=\"bp\">`∥₊`</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">∥</span>\n<span class=\"c1\">-- `∥`:1 _:1 `∥`:1 := norm #0</span>\n<span class=\"c1\">-- `∥`:1 _:1 `∥₊`:1 := nnnorm #0</span>\n</code></pre></div>",
        "id": 243367068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624273919
    },
    {
        "content": "<p>Mario is pointing out that the 1024 is being overridden, you could change it to 37 and it would make no difference.</p>",
        "id": 243367161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624273968
    },
    {
        "content": "<p>The previous <code>∥x∥</code> notation had that precedence, so it makes sense that this will work, and will make <code>∥x∥₊</code> have more or less the same parsing quirks as <code>∥x∥</code></p>",
        "id": 243367259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624274041
    },
    {
        "content": "<p>If you put no precedences at all you also get the same result</p>",
        "id": 243367383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624274094
    },
    {
        "content": "<p>Oh now here's an oddity worthy of the \"mysteries of the lean 3 parser\" thread:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span> <span class=\"n\">e</span> <span class=\"bp\">`∥`</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">2</span> <span class=\"bp\">`∥₊`</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n<span class=\"k\">#print</span> <span class=\"kd\">notation</span> <span class=\"bp\">∥</span>\n<span class=\"c1\">-- `∥`:1 _:2 `∥₊`:1 := nnnorm #0</span>\n</code></pre></div>\n<p>The second notation deletes the first</p>",
        "id": 243367844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1624274369
    },
    {
        "content": "<p>I don't think I understand all the details in this conversation, but </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1024</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"bp\">`∥`</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">norm</span> <span class=\"n\">e</span> <span class=\"c1\">--the original notation in mathlib</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"n\">e</span><span class=\"bp\">`∥₊`</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>works and mathlib compiles, so unless someone has a reason to do otherwise I will keep things like that.</p>",
        "id": 243376373,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1624279597
    },
    {
        "content": "<p>The only issue is that what you write there is misleading, because what Lean ends up doing is changing the 1024 to a 1 behind the scenes, so people might be misled. Why not just write 1? The issue is that you <em>cannot</em> make it a 1024 even though this is what we want.</p>",
        "id": 243377195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624280032
    }
]