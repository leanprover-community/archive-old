[
    {
        "content": "<p>So, I'm almost done with the PR for general linear groups and the subgroup of positive elements. Now the only remaining issue is that of the names.  What should be the name for the subgroup of elements with positive determinant? I went with <code>GL_pos</code> but sometimes one also uses <code>GL_plus</code>.  Actually what I've done is made a <code>GL_plus</code> namespace where <code>GL_pos</code> is defined (which I don't like too much, but lint was complaining about having something called <code>GL_pos</code> in the <code>GL_pos</code> namespace.)</p>",
        "id": 249461830,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1628950411
    },
    {
        "content": "<p>You can define it as <code>GL_plus</code> outside of the namespace.</p>",
        "id": 249463562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1628953031
    },
    {
        "content": "<p>Another option would be to call it <code>matrix.general_linear_group.plus</code>, which avoids the confusion of using <code>GL</code> in some names and <code>general_linear_group</code> in others.</p>",
        "id": 249465959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1628956207
    },
    {
        "content": "<p>I'm trying to find where to put the following two defs </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--Submonoid of positive elements of an ordered semiring-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">pos_submonoid</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/--The subgroup of positive units of a linear ordered commutative ring-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">units.pos_subgroup</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_mul_left</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">$</span> <span class=\"n\">x.mul_inv.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pos_submonoid.comap</span> <span class=\"o\">(</span><span class=\"n\">units.coe_hom</span> <span class=\"n\">R</span><span class=\"o\">)}</span>\n</code></pre></div>\n<p>I wanted to put them in <code>order.ring</code> but lean complains that it doesn't know what <code>submonoid</code> or <code>subgroup</code> is.  I'm guessing there is some dependency issues? is there an easy fix for this? or any ideas of a better place to put these defs?</p>",
        "id": 255709023,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1633077237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Did you have plans in this direction?</p>",
        "id": 255709364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633077390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> Maybe you can use <code>leanproject import-graph</code> to find the best candidate file?</p>",
        "id": 255709478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633077459
    },
    {
        "content": "<p>Oh I've never tried this before. What does it do?</p>",
        "id": 255709629,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1633077530
    },
    {
        "content": "<p>It generates a DAG of all the mathlib imports.</p>",
        "id": 255709731,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633077598
    },
    {
        "content": "<p>I had, before I took a break.  I had in mind to work more generally, without assuming <code>ordered_semiring</code> and was not thinking of defining a <code>pos_submonoid</code> directly.  It seems like a good idea, though people may also want a <code>pos_subsemigroup</code> as well?</p>",
        "id": 255709850,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1633077644
    },
    {
        "content": "<p>So I tried it, after a little while it came back with <code>[WinError 2] \"dot\" not found in path.</code></p>",
        "id": 255709870,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1633077655
    },
    {
        "content": "<p>I don't think <code>subsemigroup</code> exists right now</p>",
        "id": 255709934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633077690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> Can you instruct <code>import-graph</code> to generate a <code>.dot</code> file?</p>",
        "id": 255709981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633077719
    },
    {
        "content": "<p>Right now, it probably generates that internally, and then tries to convert it to <code>.pdf</code> using <code>dot</code>.</p>",
        "id": 255710048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633077738
    },
    {
        "content": "<p>My idea was to work with a Type <code>R</code>, a relation <code>r : R \\to R \\to Prop</code> and an element <code>o : R</code> and define the subtype <code>{ a : R | r o a }</code>.  This would then be specialized to the relation <code>r</code> being <code>le</code> or <code>lt</code> depending on context and <code>o</code> being, almost always <code>0</code>, if R has a zero.</p>",
        "id": 255710094,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1633077770
    },
    {
        "content": "<p>however, I am happy with this definition: I did not have a plan to remove the <code>odered_[...]</code> typeclasses, so it might be a good idea to have the <code>positive</code> ones as well!</p>",
        "id": 255710188,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1633077824
    },
    {
        "content": "<p>You should be able to put it in a file about subrings I would hope, like <code>ring_theory.subring</code> or <code>ring_theory.subsemiring</code> (is this definition actually a sub-semiring in fact?). EDIT : oh wait those files might not include the order stuff, in which case maybe a new file is best</p>",
        "id": 255712334,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633078857
    },
    {
        "content": "<p>The <code>nonneg</code> version would be a subsemiring</p>",
        "id": 255712438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633078916
    },
    {
        "content": "<p>Ah so we need <code>subnon_unital_ring</code> /s</p>",
        "id": 255712550,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633078964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238466.20matrix.2Egeneral_linear_group/near/255709981\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> Can you instruct <code>import-graph</code> to generate a <code>.dot</code> file?</p>\n</blockquote>\n<p>its still giving me the same error</p>",
        "id": 255712636,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1633079009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238466.20matrix.2Egeneral_linear_group/near/255712334\">said</a>:</p>\n<blockquote>\n<p>You should be able to put it in a file about subrings I would hope, like <code>ring_theory.subring</code> or <code>ring_theory.subsemiring</code> (is this definition actually a sub-semiring in fact?). EDIT : oh wait those files might not include the order stuff, in which case maybe a new file is best</p>\n</blockquote>\n<p>Actually <code>ring_theory.subring</code> seems to work. So maybe I'll put them there</p>",
        "id": 255712880,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1633079144
    },
    {
        "content": "<p>Perhaps with a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- while these definitions are not about subrings, this is the earliest we have</span>\n<span class=\"c1\">-- both ordered ring structures and submonoids available</span>\n</code></pre></div>\n<p>comment</p>",
        "id": 255713127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633079280
    },
    {
        "content": "<p><code>pos_submonoid</code> might fit in <code>subsemiring.lean</code>?</p>",
        "id": 255713225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633079324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238466.20matrix.2Egeneral_linear_group/near/255713225\">said</a>:</p>\n<blockquote>\n<p><code>pos_submonoid</code> might fit in <code>subsemiring.lean</code>?</p>\n</blockquote>\n<p>Ah yes good point. I'll put it there, with the comment.</p>",
        "id": 255714237,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1633079922
    }
]