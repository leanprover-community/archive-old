[
    {
        "content": "<p>This seems like it might speed up some of our instance searches for <code>has_coe_to_fun</code>. I changed the definition of <code>linear_map.has_coe_to_fun</code> to </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">gβ</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">gγ</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">mβ</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mγ</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>Using curly brackets instead of square brackets meant I could remove a <code>set_option class.instance_max_depth 50</code>. Shall we do this for all our bundled hom types?</p>",
        "id": 176750009,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1569593983
    },
    {
        "content": "<p>I guess one cannot answer without trying, and seeing what breaks (if anything breaks).</p>",
        "id": 176751340,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569594809
    },
    {
        "content": "<p>This <code>[]</code> to <code>{}</code> change could possibly be made in many more places, right? Like <code>linear_map.map_add</code>?</p>",
        "id": 176751631,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569594981
    },
    {
        "content": "<p>I am not sure I understand what is going on here: if you replace square brackets by curly brackets, then how does the coercion find the implicit arguments?</p>",
        "id": 176756725,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1569598225
    },
    {
        "content": "<p>In stead of going on a type class hunt, it just infers them from the type right under its nose</p>",
        "id": 176757488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569598687
    },
    {
        "content": "<p>Recall <code>β →ₗ[α] γ</code> really means <code>@linear_map α β γ rα gβ gγ mαβ mαγ</code> where <code>rα : ring α</code>, <code>gβ : add_comm_group β</code>, etc., so if you have <code>f : β →ₗ[α] γ</code> to provide to <code>coe</code>, then the instances<code>rα</code>, <code>gβ</code>, ... can be read off from the type of <code>f</code>.</p>",
        "id": 176760917,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569601043
    },
    {
        "content": "<p>This is hilarious. Well spotted Chris!</p>",
        "id": 176760988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1569601088
    },
    {
        "content": "<p>Can we extract some general principle?<br>\nI remember this also happened with some functions like <code>quotient.lift</code></p>",
        "id": 176761364,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569601377
    },
    {
        "content": "<p>I think that as soon as we bundle things we can use this principle</p>",
        "id": 176762315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569602143
    },
    {
        "content": "<p>Well I was hoping for a syntactic criterion, which could be checked automatically.<br>\nSomething like \"if an argument <code>x</code> is mentioned in the type of a later <code>()</code> or <code>{}</code> argument, don't use <code>[]</code>s for <code>x</code>\"</p>",
        "id": 176763183,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569602940
    },
    {
        "content": "<p>Aah, you want <code>#sanity_check</code> to catch these...</p>",
        "id": 176764785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1569604071
    },
    {
        "content": "<p>That would be nice!</p>",
        "id": 176764865,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1569604108
    },
    {
        "content": "<p>One potential syntactic criterion is:</p>\n<blockquote>\n<p>If a type-class argument occurs in the conclusion of a declaration, then we should make it implicit (in curly braces instead of square brackets)</p>\n</blockquote>\n<p>This has both advantages and disadvantages, but it is too broad. The advantage of course is that is doesn't have to do type-class inference search. One disadvantage is that the argument <code>β →ₗ[α] γ</code> could have metavariables: maybe it's <code>@linear_map α β γ rα gβ gγ ?m1 ?m2</code>, and then it would be nice to figure out the implicit arguments. I don't think that is likely to happen in this case, since <code>linear_map</code>has these arguments as type-class arguments, but it is possible: maybe you're doing a tactic proof, and because you did something \"bad\" earlier (<a href=\"#narrow/stream/113488-general/topic/rewriting.20and.20type.20class.20inference\" title=\"#narrow/stream/113488-general/topic/rewriting.20and.20type.20class.20inference\">like in this thread</a>) the <code>?m1</code> and <code>?m2</code> are future subgoals.</p>\n<p>My syntactic criterion has the problem that it is too broad, covering declarations we don't want to cover. Consider </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mul_comm</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">comm_semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>The argument <code>h</code> occurs in the conclusion, in both instances of <code>_ * _</code>, which, written out fully, are</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">has_mul</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semigroup</span><span class=\"bp\">.</span><span class=\"n\">to_has_mul</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semigroup</span><span class=\"bp\">.</span><span class=\"n\">to_semigroup</span> <span class=\"n\">α</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>However, there are cases when I want to apply <code>mul_comm</code> when the type-class argument of <code>has_mul.mul</code> is not syntactically of the form <br>\n<code>@semigroup.to_has_mul _ (@comm_semigroup.to_semigroup _ _) _ _</code>. For example, if I write <code>x * y</code> where <code>x</code> and <code>y</code> are elements in a commutative ring <code>α</code>, then the instance <code>has_mul α</code> might not go via <code>comm_semigroup α</code>. In that case, we do need type-class inference: we need to find <code>comm_semigroup α</code>, and then check that the two resulting <code>has_mul</code> instances are definitionally equal.</p>\n<p>Here is a syntactic criterion which we should consider:</p>\n<blockquote>\n<p>If a type-class argument occurs in the conclusion of a declaration, as a argument to a irreducible definition or a constant, then we should make it implicit (in curly braces)</p>\n</blockquote>\n<p>With \"constant\" I here also mean all inductive types, structures and constructors (maybe we should exclude recursors, since they have definitional reduction rules - but you're doing something very uglily if you have a recursor directly in the type of a declaration). <br>\nNote that this excludes the last example, since <code>h</code> is an argument only to <code>comm_semigroup.to_semigroup</code> which is not reducible.</p>\n<p>The fact that a type-class argument occurs as an argument to a constant or irreducible definition means that everything that reasonably unifies with the conclusion will have the type-class argument already written there.</p>",
        "id": 176771332,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569608144
    },
    {
        "content": "<p>Here is a more compelling case where you could have metavariables in the conclusion, and you might want type-class inference to find them (the \"disadvantage\" of my previous post -- This is also a problem with the restricted syntactic criterion).</p>\n<p>Consider:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod_singleton</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n</pre></div>\n\n\n<p>For the sake of argument, suppose that <code>finset.prod</code> is irreducible. This is not the case, but it is a reasonable (and maybe even desirable?) thing to do. Now <code>finset.prod_singleton</code> satisfies my (restricted) syntactic criterium: <code>h</code> should be an implicit argument. But now suppose that I want to <code>rw [← finset.prod_singleton]</code>. Now we have a problem: how do we find <code>comm_monoid β</code>? It was not in the original expression: it was not needed in the term <code>f a</code>. But it is also not inferred by type-class inference, since we made the argument implicit. So now we probably get a new goal <code>comm_monoid β</code>, which is not desirable.</p>",
        "id": 176772434,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569608883
    },
    {
        "content": "<p>this seems to be basically the same criterion that explains why equalities use explicit args</p>",
        "id": 176772646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569609003
    },
    {
        "content": "<p>The problem in my last example is that the expression we have here is <code>?m = f a</code>, and so the type class argument doesn't occur.</p>",
        "id": 176772697,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569609028
    },
    {
        "content": "<p>if you want to rewrite with it, then you can infer stuff, but if you just want to state it (or rewrite the wrong direction) then less can be inferred</p>",
        "id": 176772731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569609052
    },
    {
        "content": "<p>But I want to sometimes rewrite in the wrong(?) direction. Do we need a separate lemma for rewriting in the wrong direction?</p>",
        "id": 176773039,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569609246
    },
    {
        "content": "<p>The existing convention already handles this</p>",
        "id": 176773106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569609301
    },
    {
        "content": "<p><code>finset.prod_singleton</code> is breaking the convention and making too much stuff implicit</p>",
        "id": 176773139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569609320
    },
    {
        "content": "<p><code>a</code> and <code>f</code> should be explicit; given these arguments the comm_monoid instance is inferrable</p>",
        "id": 176773246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569609370
    },
    {
        "content": "<p>But you can still make typeclass arguments implicit when they would be implicit as regular args. That is, if they appear in the type of a hypothesis</p>",
        "id": 176773450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569609531
    },
    {
        "content": "<p>which covers your <code>f : β →ₗ[α] γ</code> example</p>",
        "id": 176773594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569609612
    },
    {
        "content": "<blockquote>\n<p><code>finset.prod_singleton</code> is breaking the convention and making too much stuff implicit</p>\n</blockquote>\n<p>true</p>\n<blockquote>\n<p><code>a</code> and <code>f</code> should be explicit; given these arguments the comm_monoid instance is inferrable</p>\n</blockquote>\n<p>using type-class inference, yes, but not without.</p>\n<blockquote>\n<p>But you can still make typeclass arguments implicit when they would be implicit as regular args. That is, if they appear in the type of a hypothesis<br>\nwhich covers your <code>f : β →ₗ[α] γ</code> example</p>\n</blockquote>\n<p>Ok, that is a different criterion than I used. But this very much does not cover <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>'s example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">gβ</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">gγ</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">γ</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">mβ</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">mγ</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 176774300,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569610129
    },
    {
        "content": "<p>That's true. I guess coercions are special, in that they never fire anyway unless the types are already pretty well pinned down</p>",
        "id": 176775277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569610729
    },
    {
        "content": "<p>I agree that the problem is basically the same as the convention which non-type-class arguments should be explicit and which should be implicit. Unfortunately I think that covers <em>very</em> few cases. In something like</p>\n<div class=\"codehilite\"><pre><span></span>def gpowers : Π {α : Type u_1} [_inst_1 : group α], α → set α\ntheorem gpowers_subset : ∀ {α : Type u_1} [_inst_1 : group α] {a : α} {s : set α} [_inst_3 : is_subgroup s], a ∈ s → gpowers a ⊆ s\n</pre></div>\n\n\n<p>it seems like in almost all cases it's fine to make <code>_inst_1 : group α</code> implicit in <code>gpowers_subset</code>. You do have a problem if you want to write <code>have := gpowers_subset (h : a ∈ s)</code>, because then I think neither of the type-class arguments are known (<code>is_subgroup s</code> doesn't fire, since the argument <code>group α</code> is still a meta-variable, right?)</p>",
        "id": 176776778,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1569611501
    },
    {
        "content": "<p>If you interpret the subset as an implication, then you could make the group A argument implicit</p>",
        "id": 176777906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569612157
    },
    {
        "content": "<p>but that's basically saying that we don't intend to use the other form</p>",
        "id": 176777955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1569612191
    },
    {
        "content": "<p>I think what is special about the coercion here is that in <code>has_coe_to_fun (β →ₗ[α] γ)</code>, <code>β →ₗ[α] γ</code> is basically an argument because it's the argument of the <code>coe</code> field</p>",
        "id": 176778733,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569612669
    },
    {
        "content": "<p>but you'd have to look at <code>has_coe_to_fun</code> to know that</p>",
        "id": 176778744,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569612681
    },
    {
        "content": "<p>Well, even if the general case is hard, I don't want to derail Chris's original suggestion. How about we just change all the relevant <code>has_coe_to_fun</code> instances for now?</p>",
        "id": 176791129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1569623256
    }
]