[
    {
        "content": "<p>I've just finished up <a href=\"https://github.com/leanprover/mathlib/issues/352\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/352\">#352</a>, a tactic called <code>fin_cases</code>. It's intended use is <code>fin_cases h</code>, where <code>h : fin n</code> for some numeral <code>n</code>. It just performs case bashing.</p>\n<p>The demo is:</p>\n<div class=\"codehilite\"><pre><span></span>example (f : ℕ → Prop) (p : fin 3) (h0 : f 0) (h1 : f 1) (h2 : f 2) : f p.val :=\nbegin\n  fin_cases p,\n  all_goals { assumption }\nend\n</pre></div>\n\n\n<p>After <code>fin_cases p</code>, there are three goals, <code>f 0</code>, <code>f 1</code>, and <code>f 2</code>.</p>",
        "id": 135386568,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538985736
    },
    {
        "content": "<p>It's not super clear that it's actually useful. :-) A generalisation to <code>fintype</code> might be fun, although I'm not particularly sure how to implement that one.</p>",
        "id": 135386817,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538986064
    },
    {
        "content": "<p>Similarly tactics for expanding finite sums out into explicit sums might be useful.</p>",
        "id": 135386826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538986079
    },
    {
        "content": "<p>I wonder whether we can extend this to all fintypes</p>",
        "id": 135387043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538986275
    },
    {
        "content": "<p>How to implement it? well, you can use apply_instance to get a proof that it is a fintype, then whnf the result to get a list of explicit terms to use</p>",
        "id": 135387109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538986343
    },
    {
        "content": "<p>I'm not sure what to do with this. I'm not particularly interested in doing those generalisations right now. We should decide:<br>\n1) merge with the current functionality (but perhaps fixes)<br>\n2) find someone to take over and generalise<br>\n3) close<br>\nI'm happy with any of these.</p>",
        "id": 135391720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538992275
    },
    {
        "content": "<p>I will do (1), with the possibility of (2) later. I just wanted the idea on the table</p>",
        "id": 135391773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538992325
    },
    {
        "content": "<p>Do we need even the current version?</p>",
        "id": 135391797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538992349
    },
    {
        "content": "<p>I guess Kevin likes to come up with theorems that require case bashing</p>",
        "id": 135391804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538992370
    },
    {
        "content": "<p>I wrote it just as a warmup for the fintype version, which I genuinely wanted.</p>",
        "id": 135391991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538992629
    },
    {
        "content": "<p>oh? do you have an example?</p>",
        "id": 135392292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538992961
    },
    {
        "content": "<p>Hrm, it was way out in category theory land, where I was showing that if you have limits, then you have equalizers. I had written something that constructed a diagram (a category and a functor out of it) just by giving a list of edges and the morphisms they should be sent to. This gadget has lots of <code>fin n</code>s describing the objects and homs, etc. I forget exactly what it was, but checking something about the limit/equalizer relationship seemed achievable by just case bashing.</p>",
        "id": 135392374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538993130
    },
    {
        "content": "<p>(Of course it would be possible to prove limits =&gt; equalizers more directly, but I wanted to explore building diagrams just by \"drawing the diagram\" rather than custom inductive types.)</p>",
        "id": 135392435,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538993168
    },
    {
        "content": "<p>I can try to make this into a MWE, but it's probably not reasonable to do so until my work on limits lands. (Which will be shortly after <code>back</code> lands. :-)</p>",
        "id": 135392449,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538993213
    },
    {
        "content": "<p>I think Reid and I discussed some options for \"walking categories\" with you in Orsay</p>",
        "id": 135392920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538993816
    },
    {
        "content": "<p>involving small inductive types</p>",
        "id": 135392930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538993831
    },
    {
        "content": "<p>I wanted even cheaper options, with no inductive types at all. E.g. to be able to write: <code>diagram [(0,1,f), (0,1,g)]</code> to get the category with two parallel arrows, and the functor out of it sending those arrows to some morphisms <code>f</code> and <code>g</code>.</p>",
        "id": 135393741,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538994897
    },
    {
        "content": "<p>(Here <code>diagram</code> is a tactic, that doesn't exist at this level of generality.)</p>",
        "id": 135393761,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538994914
    },
    {
        "content": "<p>Maybe we could have some sort of diagram combinators</p>",
        "id": 135393767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538994936
    },
    {
        "content": "<p>Even better would be to just write <code>diagram [f, g]</code>, and have the tactic work out that since they have the same source and target we want a functor out of the walking parallel pair.</p>",
        "id": 135393772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538994948
    },
    {
        "content": "<p>is there a reason the set of objects here can't just be <code>nat</code>?</p>",
        "id": 135394119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538995423
    },
    {
        "content": "<p>If we are constructing a free category then only the homs matter</p>",
        "id": 135394164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538995455
    },
    {
        "content": "<p>But we're defining a functor out of it. Where do all the other objects go?</p>",
        "id": 135394201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1538995550
    },
    {
        "content": "<p>okay, I see. So something like <code>diagram [A, f, g]</code> could build a diagram supported on the objects and homs in the list</p>",
        "id": 135394343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538995782
    },
    {
        "content": "<p>what would this be used for?</p>",
        "id": 135394397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538995811
    },
    {
        "content": "<p>I would assume that the point of connecting a configuration of arrows to a diagram from a walking category is to relate it to other such diagrams</p>",
        "id": 135394412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538995859
    },
    {
        "content": "<p>but if you call <code>diagram</code> everytime and get a different walking category every time then that doesn't work</p>",
        "id": 135394434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538995891
    },
    {
        "content": "<p>I think we want ways to say: Look, we've got these morphisms. The following diagram commutes.</p>",
        "id": 135394479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538995928
    },
    {
        "content": "<p>Ah! so this is a way of making diagram chasing decidable</p>",
        "id": 135394494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538995980
    },
    {
        "content": "<p>When I was a PhD student I was doing some EGA-style algebraic geometry involving representability and pullbacks and what-have-you, and I ran into the following problem. I had a diagram on a piece of paper with lots of arrows everywhere, and I knew that \"it commuted\". I then wanted to add one more arrow in and claim that \"it still commutes\". I realised I was not entirely sure what I needed to check.</p>",
        "id": 135409536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539011096
    },
    {
        "content": "<p>After further thought I realised that perhaps I was not even entirely sure what I meant by a diagram commuting -- or even by a diagram.</p>",
        "id": 135409550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539011114
    },
    {
        "content": "<p>Presumably this sort of problem is completely understood? I am still not sure I understand exactly what is going on here.</p>",
        "id": 135409568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539011152
    },
    {
        "content": "<p>I came up with definitions such as \"if A and B are objects in the diagram then every way of defining a morphism from A to B using only composition and functions in the diagram, is the same way\"</p>",
        "id": 135409636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539011208
    },
    {
        "content": "<p>Are all of those morphisms supposed to be part of my diagram? I don't usually draw them.</p>",
        "id": 135409653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539011249
    },
    {
        "content": "<p>The official definition says that every path between two points yields equal compositions</p>",
        "id": 135409753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539011402
    },
    {
        "content": "<p>But at least in the case where the graph is acyclic (which most category theory graphs are), it reduces to checking all cycles in the graph</p>",
        "id": 135409833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539011460
    },
    {
        "content": "<p>where there is one source and one sink in the cycle, i.e. <code>A -&gt; ... -&gt; B &lt;- ... &lt;- A</code></p>",
        "id": 135409855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539011490
    },
    {
        "content": "<p>I see. The loop is just the degenerate case <code>A = B</code> somehow. I agree, loops very rarely came up in category theory.</p>",
        "id": 135409988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539011590
    },
    {
        "content": "<p>well, you could have <code>A -&gt; B -&gt; A</code></p>",
        "id": 135410003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539011608
    },
    {
        "content": "<p>and then \"it commutes\" implies this is an isomorphism</p>",
        "id": 135410012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539011623
    },
    {
        "content": "<p>I guess \"it commutes\" really means \"start at any point in the loop, go once round, and check you are the identity map\". So it's one check per number of nodes maybe</p>",
        "id": 135410078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539011667
    },
    {
        "content": "<p>wikipedia says check every polygonal subgraph, which is the same, but both are a bit redundant. I think you can say this: if the graph is planar with source and sink on the outside, then it suffices to check only polygons that are faces in the embedding</p>",
        "id": 135411040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539012637
    },
    {
        "content": "<p>Mine were often not planar. I would sometimes have to consider the pullback of a commutative square along a diagram, making a \"commutative cube\". Actually that _is_ planar isn't it -- I just never drew it that way :-)</p>",
        "id": 135415963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539017914
    },
    {
        "content": "<p>But I certainly had examples which were not planar.</p>",
        "id": 135415967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539017928
    },
    {
        "content": "<p>If you can decompose the graph into multiple planar bits you can check each bit</p>",
        "id": 135415995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539017962
    },
    {
        "content": "<p>for example if you have a cube you can get the three faces in the front and three in the back</p>",
        "id": 135416002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539017984
    },
    {
        "content": "<p>The cube usually isn't planar in the sense I described - it is important that the source and sink be both on the outside, and if they are opposite corners of the cube then you can't draw it so that this happens</p>",
        "id": 135416092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539018060
    }
]