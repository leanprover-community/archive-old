[
    {
        "content": "<p>I just made a PR <a href=\"https://github.com/leanprover-community/mathlib/issues/5823\">#5823</a> deleting a bunch of imports that are unneeded as they are imported transitively.<br>\nIts rather huge (705 lines over 447 files) and I appreciate there may be differing opinions on whether this is useful, so I'd like to hear some comments / establish consensus before asking for review, splitting up, excluding some files or closing as necessary.</p>",
        "id": 223455162,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611188003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> made a few PRs like this a while back so there's precedent at least.</p>",
        "id": 223455666,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611188415
    },
    {
        "content": "<p>cf. <a href=\"https://github.com/leanprover-community/mathlib/issues/3235\">#3235</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/3421\">#3421</a></p>",
        "id": 223455704,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1611188448
    },
    {
        "content": "<p>I'd argue this is actively harmful - it creates a lot of work when moving around files if I have to track down all the transitive includes that are now broken</p>",
        "id": 223456449,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611189106
    },
    {
        "content": "<p>Vs finding just the direct includes</p>",
        "id": 223456504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611189125
    },
    {
        "content": "<p>It's almost tempting to try a script that does the reverse</p>",
        "id": 223456542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611189170
    },
    {
        "content": "<p>I'm happy to be convinced I'm wrong though - my instinct is based on how things are in C++, which might not be a good match</p>",
        "id": 223456599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611189230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> can you give an example, if one simply wants to rename a file this would result in less work if there are as few explicit references to that filename as possible.</p>",
        "id": 223456737,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611189361
    },
    {
        "content": "<p>Ah, I guess I mean when splitting files in two then</p>",
        "id": 223456936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611189523
    },
    {
        "content": "<p>I'll try to come up with an example tomorrow</p>",
        "id": 223457347,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1611189943
    },
    {
        "content": "<p>I argued against this sort of change at <a href=\"#narrow/stream/113488-general/topic/unnecessary.20imports/near/195077370\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/unnecessary.20imports/near/195077370</a></p>",
        "id": 223457399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611189966
    },
    {
        "content": "<p>Updating references to a renamed file is trivial; what's not trivial is trying to figure out what file contains a simp lemma or instance that was implicitly relied upon</p>",
        "id": 223457419,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611190000
    },
    {
        "content": "<p>Thanks, I had a feeling this had been discussed before, but couldn't find the thread / Pr. Those are interesting points.<br>\nMy main motivation was that I wanted to reduce visual clutter in the top of files I've written where I have &gt;= 7 imports because I've copy pasted all sorts of junk in, so I'm not necessarily attached to or arguing for merging this PR either.<br>\nI wonder how common these semantically unnecessary imports you talk about are though?<br>\nIn the example you gave there wouldn't \"if C broke when you deleted <code>import A</code> from B add <code>import A</code> to C\" be an easy thing to fix , or am I missing something here? I guess if you made a bunch of these changes at once and only then tried to build your project it would be a bit more of a mess, but I don't know how common that is either.</p>",
        "id": 223459060,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611191673
    },
    {
        "content": "<p>The script is PRd at <a href=\"https://github.com/leanprover-community/mathlib-tools/issues/92\">mathlib-tools#92</a></p>",
        "id": 223459519,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611192222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> whether or not the PR is merged, the script is definitely useful! Because I sometimes don't want to bother with thinking about imports, so I just import some huge files in mathlib. Having a script minimize those will be very helpful.</p>",
        "id": 223469837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611204449
    },
    {
        "content": "<p>Unfortunately this doesn't do the far more useful thing of replacing imports that are unused by ones higher up the import tree, though I would also like to give that a go at some point <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 223470055,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1611204811
    },
    {
        "content": "<p>aah, I see. I thought it was doing that.</p>",
        "id": 223470120,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1611204878
    },
    {
        "content": "<p>In principle I think it's possible to automate the desired cleanup, without any fancy meta-analysis. For each import <code>X</code>, you see if the file still compiles if you replace <code>X</code> with <code>X</code>'s own imports. If it does, you then compile the rest of mathlib, inserting <code>import X</code> into any file which now breaks. Now repeat as often as you have patience for.</p>\n<p>In practice a human can do this so much more efficiently than such a dumb script, that it's unclear it's worth attempting.</p>\n<p>The \"clever\" approach of actually analysing a file to determine its true imports (e.g. by enumerating all the identifiers appearing in it and working out where they originate) sounds pretty intimidating with what we have in Lean 3.</p>",
        "id": 225277181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1612517779
    },
    {
        "content": "<p>I'm currently cleaning up the analysis import file on <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>'s suggestion and this tool would actually be quite useful because waiting for each file to build is a pain.</p>",
        "id": 245795923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626166875
    },
    {
        "content": "<p>I assume by \"this tool\" you mean the one Scott proposes, and not the tool in the referenced PR?</p>",
        "id": 245796358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626167146
    },
    {
        "content": "<p>Yeah, Scott's one, although James' one would already be great.</p>",
        "id": 245796831,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626167400
    },
    {
        "content": "<p>I've been using Scott's algorithm by hand so far.</p>",
        "id": 245798854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626168362
    }
]