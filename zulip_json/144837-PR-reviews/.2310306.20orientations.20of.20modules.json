[
    {
        "content": "<p>This is a really exciting PR but it raises a question for me about what choice to make for the generalisation of the concept of orientation when the scalars are not <code>ℝ</code> (or one of its subrings).</p>",
        "id": 261471347,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636966539
    },
    {
        "content": "<p>Specifically I'm wondering if the restriction of requiring the scalars to be ordered is the ideal generalisation. Very possibly it is, but I can imagine instead defining an orientation relative to a subgroup of the group of units of the scalars.</p>",
        "id": 261471596,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636966684
    },
    {
        "content": "<p>Thinking about finite dimensions over a field, the non-zero elements of the top exterior power form a (multiplicative) torsor for the units of the field. If we restrict to some sugbroup of the units, then we no longer have a single-point quotient and a choice of equivalence class corresponds to an orientation relative to this subgroup.</p>",
        "id": 261471810,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636966810
    },
    {
        "content": "<p>So if the subgroup is the positive real numbers <code>(0, ∞)</code> this is the usual concept of orientation but it might be a convenient way to talk about \"complex orientations\". I.e., an orientation of a complex vector space relative to <code>(0, ∞) ⊆ ℂ*</code>.</p>",
        "id": 261471991,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636966906
    },
    {
        "content": "<p>Is this crazy?</p>",
        "id": 261472064,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636966923
    },
    {
        "content": "<p>If we remove the ordered restriction, we can recover it by using <code>pos_submonoid R</code> as our ring of scalars</p>",
        "id": 261474161,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636968324
    },
    {
        "content": "<p>I expect we could even have things setup so that there is a default distinguished subgroup of the units for ordered scalars. I.e., define:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.submonoid</span>\n\n<span class=\"c1\">-- Maybe this already exists</span>\n<span class=\"kd\">def</span> <span class=\"n\">pos_units</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">u</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">mul_pos</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and have have a typeclass that picks it up automatically.</p>",
        "id": 261479368,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636971737
    },
    {
        "content": "<p>Or even:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.subgroup.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">pos_units</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span>  <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">u</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">one_mem'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n     <span class=\"n\">rintros</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)),</span>\n     <span class=\"n\">exact</span> <span class=\"n\">mul_pos</span> <span class=\"n\">hu</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_mem'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"n\">hvu</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">u</span><span class=\"o\">),</span>\n      <span class=\"n\">change</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n      <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">invertible</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hvu</span><span class=\"o\">,</span> <span class=\"n\">huv</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">inv_of_eq_right_inv</span> <span class=\"n\">huv</span><span class=\"o\">,</span> <span class=\"n\">inv_of_pos</span><span class=\"o\">],</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 261482367,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636973748
    },
    {
        "content": "<p>That's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.pos_subgroup\">docs#units.pos_subgroup</a></p>",
        "id": 261488606,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636978197
    },
    {
        "content": "<p>Oh thanks.</p>",
        "id": 261488676,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636978232
    },
    {
        "content": "<p>Oh, It looks like your typeclass asumptions are weaker though</p>",
        "id": 261488679,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636978235
    },
    {
        "content": "<p>Yeah, I guess so. I guess we might one day talk about oriented quaternionic things and want to drop commuativity. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>‍♂️</p>",
        "id": 261488750,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636978306
    },
    {
        "content": "<p>Mind PRing your more general definition?</p>",
        "id": 261488822,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1636978332
    },
    {
        "content": "<p>Sure. Just out for lunch but will do later.</p>",
        "id": 261489035,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636978459
    },
    {
        "content": "<p>I don't think units are particularly helpful for rays in <code>fin n → ℤ</code> or orientations of <code>fin n → ℤ</code>, for example, where \"positive\" (without any \"units\" restriction) seems to be the right thing to give the natural concepts.</p>\n<p>You could define a version of the equivalence relation I have for any commutative monoid action (the relation of orbits having nonempty intersection, which is an equivalence relation given commutativity), but I'm not sure you get any useful lemmas until you start restricting to particular cases such as the \"positive\" one.</p>",
        "id": 261491263,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1636979981
    },
    {
        "content": "<p>Good point about the units: they do not play nicely when taking subrings so if we want to be able to talk about orientations for scalars that are not a field then units are not the right idea.</p>",
        "id": 261500066,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636984873
    },
    {
        "content": "<p>Motivated largely by wanting to have a notion for orientation of complex vector spaces, I still wonder if it's worth considering a definition of orientation that does not need an ordering.</p>",
        "id": 261500251,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636984949
    },
    {
        "content": "<p>This would not require us to go so far as to allow any commutative monoid action, perhaps an orientation could include the data of a multiplicative submonoid of the non-zero elements.</p>",
        "id": 261500601,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636985151
    },
    {
        "content": "<p>If you still aren't convinced then I'm happy to let this go. I just wanted to bring it up.</p>",
        "id": 261500681,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1636985187
    },
    {
        "content": "<p>I'm not convinced we'll know any useful generalization (beyond that I have for <code>ordered_comm_semiring</code>) until we have multiple (formalized) examples in this area and so can see what lemmas get duplicated for the different but related concepts.</p>",
        "id": 261550115,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1637006045
    },
    {
        "content": "<p>Me too, thanks for humouring me.</p>",
        "id": 261550509,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637006240
    },
    {
        "content": "<p>A question I brought up in the PR that doesn't need to be answered before merging, but I'm still interested in; do we want to consider the vectors <code>(1,2)</code> and <code>(2,4)</code> in the <code>ℤ</code>-module <code>zmod 4 × zmod 4</code> as on the \"same ray\"?</p>",
        "id": 261550784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637006390
    },
    {
        "content": "<p>If the answer is \"no\", then \"same ray\" is not an equivalence relation</p>",
        "id": 261550856,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637006409
    },
    {
        "content": "<p>Something I'm finding weird about <code>orientation</code> is that it's a nonzero element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>hom</mi><mo>⁡</mo></mrow><mi>R</mi></msub><mo stretchy=\"false\">(</mo><msup><mi>M</mi><mrow><mo>∧</mo><mi>i</mi></mrow></msup><mo separator=\"true\">,</mo><mi>R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hom_R(M^{\\wedge i},R)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0747em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mop\">hom</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∧</span><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mclose\">)</span></span></span></span> modulo positive scaling with no restrictions on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>.  I wonder if an orientation should include that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> can be generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> elements?</p>\n<p>(Also, isn't orientation essentially from the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo>∖</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}\\setminus 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∖</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> is a disconnected space?  I'm not sure how this generalizes to rings that aren't more-or-less subrings of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>.)</p>",
        "id": 261556312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1637009070
    },
    {
        "content": "<p>Not restricting the index type is simply it being more convenient to put such requirements on lemmas (in whatever form is convenient for that lemma) than requiring them for the definition, if the definition doesn't actually use the requirement. (I suspect geometrical uses will end up with <code>[fact (finrank ℝ V = 2)]</code> as the most convenient way of passing that information around implicitly.)</p>",
        "id": 261586204,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1637025869
    }
]