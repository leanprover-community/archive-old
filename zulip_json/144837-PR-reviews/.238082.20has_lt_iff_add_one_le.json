[
    {
        "content": "<p>This PR is now ready for review!<br>\nI'm introducing a new typeclass to state that <code>∀ a b, a &lt; b ↔ a + 1 ≤ b</code>. This is designed to be satisfied by <code>ℕ</code>, <code>ℤ</code>, <code>fin n</code> and linear sums and disjoint unions of such. I coincidentally started encountering several places where it can be used: finite intervals, equitable functions...</p>",
        "id": 246710558,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626869793
    },
    {
        "content": "<p>I'm really not sure of where should the two new lemmas <code>lt_iff_add_one_le</code>, <code>lt_add_one_iff_le</code> should go. I've currently put one in <code>order.basic</code> right after the class definition and the other one (that requires contravariant stuff) in <code>algebra.ordered_monoid_lemmas</code>. What do you think, <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span>?</p>",
        "id": 246710796,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626869971
    },
    {
        "content": "<p>What lean type do you mean by linear sums and disjoint unions?</p>",
        "id": 246712419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1626870882
    },
    {
        "content": "<p>I don't know, actually. Both are orders on <code>α ⊕ β</code>. I don't think we have linear sum (which is all of <code>α</code> &lt; all of <code>β</code>) but disjoint union (all of <code>α</code> incomparable to all of <code>β</code>) could well be some instance already.</p>",
        "id": 246734426,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626880644
    },
    {
        "content": "<p>Maybe Eric is wondering where the <code>1</code> comes from in the disjoint union?</p>",
        "id": 246734554,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626880690
    },
    {
        "content": "<p>I guess in this generality it's a \"shift\" operator</p>",
        "id": 246734605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626880718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20has_lt_iff_add_one_le/near/246734426\">said</a>:</p>\n<blockquote>\n<p>I don't know, actually. Both are orders on <code>α ⊕ β</code>. I don't think we have linear sum (which is all of <code>α</code> &lt; all of <code>β</code>) but disjoint union (all of <code>α</code> incomparable to all of <code>β</code>) could well be some instance already.</p>\n</blockquote>\n<p>We do, that's used in the ordinal sum. I think it's called <code>sum.lex</code> or something</p>",
        "id": 246734815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626880809
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20has_lt_iff_add_one_le/near/246734605\">said</a>:</p>\n<blockquote>\n<p>I guess in this generality it's a \"shift\" operator</p>\n</blockquote>\n<p>That's how I think about it. There's no need for it to make sense arithmetically.</p>",
        "id": 246734931,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626880868
    },
    {
        "content": "<p>I guess ordinals are an example of this typeclass</p>",
        "id": 246734933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1626880869
    },
    {
        "content": "<p>How does this work for <code>fin n</code>? Is <code>shift</code> the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_rotate\">docs#fin_rotate</a>?</p>",
        "id": 246734985,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1626880902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.238082.20has_lt_iff_add_one_le/near/246734933\">said</a>:</p>\n<blockquote>\n<p>I guess ordinals are an example of this typeclass</p>\n</blockquote>\n<p>Absolutely!</p>",
        "id": 246735137,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626880954
    },
    {
        "content": "<p>I think it actually doesn't, because you can't define <code>(n - 1) + 1</code> in a way that doesn't conflict with <code>lt_iff_add_one_le</code></p>",
        "id": 246735196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626880987
    },
    {
        "content": "<p>I would separate the class into two, a \"discrete order\" (name TBD) which has a <code>succ</code> function satisfying <code>a &lt; b</code> iff <code>succ a &lt;= b</code>, and an extension where there is an addition and a one and <code>succ x = x + 1</code></p>",
        "id": 246735231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626881008
    },
    {
        "content": "<p>Oh yeah that sounds right! What about <code>has_lt_iff_succ_le</code>?</p>",
        "id": 246737079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626881877
    },
    {
        "content": "<p>how about <code>has_succ</code>? This is just defining what it means to be an (order) successor</p>",
        "id": 246737250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626881970
    },
    {
        "content": "<p>Note also that there is potential for the \"dual\" typeclasses. <code>has_lt_add_one_iff_le</code> (<code>a &lt; b + 1 ↔ a ≤ b</code>) is equivalent under cancellation assumptions but different in general.</p>",
        "id": 246737276,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626881983
    },
    {
        "content": "<p>That's a good idea but it could sound like it's a semantic typeclass.</p>",
        "id": 246737392,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626882043
    },
    {
        "content": "<p>What about <code>succ_order</code>?</p>",
        "id": 246737398,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626882050
    },
    {
        "content": "<p>most examples of succ functions I can think of satisfy both versions <code>succ a &lt;= b</code> iff <code>a &lt; b</code> and <code>a &lt; succ b</code> iff <code> a &lt;= b</code>, but maybe I'm considering linear orders too much</p>",
        "id": 246737758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626882242
    },
    {
        "content": "<p>if there aren't any good intermediate examples we should just have both axioms in the typeclass</p>",
        "id": 246737833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626882263
    },
    {
        "content": "<p>Also, should we have the actual dual typeclass <code>pred_order</code>? <code>ℕ</code> doesn't satisfy it this time.</p>",
        "id": 246738112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626882400
    },
    {
        "content": "<p>I don't think we need it much, although the conjunction of <code>has_succ</code> and <code>has_pred</code> could be useful</p>",
        "id": 246738246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626882480
    },
    {
        "content": "<p>in theory you can use <code>succ_order (dual X)</code></p>",
        "id": 246738369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626882532
    },
    {
        "content": "<p>Defining <code>succ_order</code> implies creating a function <code>succ</code> that'll be conflicting with <code>nat.succ</code> and <code>int.succ</code>. How should I go about that?</p>",
        "id": 246862437,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626967433
    },
    {
        "content": "<p>I can just not define <code>int.succ</code> and <code>succ</code> will be available directly, but <code>nat.succ</code> is part of the <em>definition</em> of <code>ℕ</code>, so that sounds harder.</p>",
        "id": 246862607,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626967518
    },
    {
        "content": "<p><code>succ'</code>?</p>",
        "id": 246862957,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626967711
    },
    {
        "content": "<p>Yeah but changing the def of <code>ℕ</code> is hard, right?</p>",
        "id": 246863162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626967826
    },
    {
        "content": "<p>Also, we won't have the nice dot notation anymore.</p>",
        "id": 246863200,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626967845
    },
    {
        "content": "<p>I mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">succ_order</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">succ'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 246863639,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626968037
    },
    {
        "content": "<p>Yeah sure, but then you want to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">succ'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">succ_order</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">succ_order.succ'</span>\n</code></pre></div>\n<p>Right?</p>",
        "id": 246863746,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1626968073
    },
    {
        "content": "<p>Usually <code>nat.succ</code> is behind <code>nat</code>, doing <code>open nat</code> is a recipe for clashes already.</p>",
        "id": 246863903,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1626968136
    },
    {
        "content": "<p>I would suggest leaving <code>int.succ</code> and <code>nat.succ</code> as they are and adding a new definition <code>_root_.succ</code>, or probably better <code>succ_order.succ</code> which can be opened if necessary. This class will not be used much.</p>",
        "id": 246864316,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626968311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> I do have some ideas about how to allow top orders in the typeclass. The current problem stems from the <code>≤ → &lt;</code> implications, so I'm offering to simply delete those, and reintroduce them under the assumption that <code>a</code> (or <code>b</code>) is not top. I'm looking for the simplest set of hypotheses I can have that achieves this.</p>",
        "id": 247469822,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1627484015
    },
    {
        "content": "<p>Sorry, missed this thread because I forgot I changed the PR name on GitHub :P</p>",
        "id": 247500621,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627498084
    },
    {
        "content": "<p>I believe it's worth the effort to ensure that <code>succ_order</code> is a subsingleton, so we should pick the value of <code>succ \\top</code>. <code>\\top</code> itself would work if you define <code>succ a</code> as the infimum of all <code>b &gt; a</code>, but <code>\\bot</code> would be better if you want to fit addition on <code>fin</code>, so I'm not quite sure what the best option is here.</p>",
        "id": 247501228,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627498344
    },
    {
        "content": "<p>I'm leaning towards the first option, also since you suggested deleting the whole <code>succ_eq_add_one_order</code>.</p>",
        "id": 247501460,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627498445
    },
    {
        "content": "<p>If we say <code>succ \\top = \\top</code>, then following the infimum definition the axioms would look something like: <code>∀ a b, a &lt; b → (succ a ≤ b ∧ a &lt; succ a)</code> and <code>∀ a, a ≤ succ a</code></p>",
        "id": 247502301,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627498785
    },
    {
        "content": "<p>Note that the opposite implication <code>∀ a b, (succ a ≤ b ∧ a &lt; succ a) → a &lt; b</code> is transitivity.</p>",
        "id": 247502615,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1627498914
    }
]