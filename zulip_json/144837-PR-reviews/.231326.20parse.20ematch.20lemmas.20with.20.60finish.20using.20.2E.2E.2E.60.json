[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/1326/\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1326/\">#1326</a> I extended <code>finish</code> to optionally parse a list of <code>ematch</code> lemmas along with the <code>simp</code> lemmas it already parses, e.g. <code>finish [simp lemmas here] using [ematch lemmas here]</code>. Sometimes it's desirable to guide the <code>ematch</code>ing part of <code>finish</code>, but too many <code>ematch</code> lemmas in the environment often causes <code>finish</code> itself to become very slow. This lets the user circumvent that by specifying an exact list of additional <code>ematch</code> lemmas for a particular goal, and increases the number of things which can be one-lined by <code>finish</code> :^)</p>",
        "id": 173153704,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565732085
    },
    {
        "content": "<p>What is an <code>ematch</code> lemma? Where can I read about them?</p>",
        "id": 173159331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565737159
    },
    {
        "content": "<p>I never ever ever use <code>finish</code> and never tell my students to use it. Is it something a mathematician might want?</p>",
        "id": 173159455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565737219
    },
    {
        "content": "<p><code>ematch</code> lemmas are what are heuristically instantiated by the <code>ematch</code> SMT-mode tactic</p>\n<p><code>eblast</code> (which is called by <code>finish</code> after calling <code>simp</code>) is <code>ematch</code> followed by congruence closure in a loop.</p>\n<p>in practice, it functions like a rewrite search---if your goal is attainable by rewriting several times, maybe both backwards and forwards with the same lemma, and maybe applying a lemma at the end, but you don't feel like working it out, then <code>finish using [my_lemmas_here]</code> should do it</p>",
        "id": 173170408,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565750839
    },
    {
        "content": "<p>in the following example, <code>finish</code> fails if <code>rev</code> and <code>append</code>are available only as simp lemmas, but succeeds if they are available for ematching:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">list</span>\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">append1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>      <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"o\">(</span><span class=\"n\">append1</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">rev</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">append1</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">rev</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">rev</span> <span class=\"n\">l</span> <span class=\"bp\">=</span>  <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">append1</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">rev</span><span class=\"o\">,</span> <span class=\"n\">append1</span><span class=\"o\">,</span> <span class=\"n\">rev</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">l_ih</span><span class=\"o\">,</span> <span class=\"n\">append1</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">::</span> <span class=\"n\">rev</span> <span class=\"n\">l</span> <span class=\"bp\">=</span>  <span class=\"n\">rev</span> <span class=\"o\">(</span><span class=\"n\">append1</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- finish[rev, append1] -- fails</span>\n  <span class=\"c1\">-- finish[rev, append1, l_ih] -- fails</span>\n  <span class=\"c1\">-- finish[rev, append1, l_ih.symm] -- simp goes into a loop</span>\n  <span class=\"n\">finish</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">rev</span><span class=\"o\">,</span> <span class=\"n\">append1</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 173171158,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565751953
    },
    {
        "content": "<p>another nice example is the only place in the library where <code>eblast</code> is used</p>\n<p>i'm too tired to make a MWE, but it's in order.boolean_algebra if you want to poke around</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">neg_neg</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">neg_inf</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-@</span><span class=\"n\">neg_neg</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-@</span><span class=\"n\">neg_neg</span> <span class=\"bp\">_</span> <span class=\"n\">y</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">neg_inf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">neg_neg</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{[</span><span class=\"n\">smt</span><span class=\"o\">]</span> <span class=\"n\">eblast_using</span> <span class=\"o\">[</span><span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_inf</span><span class=\"o\">]}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"err\">⊓</span> <span class=\"bp\">-</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- `finish` alone will time out</span>\n<span class=\"k\">by</span> <span class=\"n\">finish</span> <span class=\"kn\">using</span> <span class=\"o\">[</span><span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">neg_inf</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>in this case it's smart enough to try instantiating <code>neg_neg</code> at both x and y</p>",
        "id": 173171459,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565752431
    },
    {
        "content": "<p>Jesse, I wonder if you're now a person I could ask about investigating the ematch bug. From memory, the problem was that if an <code>[ematch]</code> lemma had two typeclass arguments which were of the same type, but with different carriers, e.g. a <code>[foo X]</code> and a <code>[foo Y]</code>, then <code>ematch</code> could not correctly apply the lemma.</p>",
        "id": 173172839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565754592
    },
    {
        "content": "<p>This was the reason I couldn't use <code>ematch</code> in the category theory library (and in fact hence the reason I wrote <code>rewrite_search</code> (coming soon ...?))</p>",
        "id": 173172886,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565754624
    },
    {
        "content": "<p>Let me know if you're interested and I can see if I can find the more detailed diagnosis of the bug.</p>",
        "id": 173172892,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565754651
    },
    {
        "content": "<p>Now that we have 3.5, perhaps we could actually just fix it ourselves.</p>",
        "id": 173172896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565754663
    },
    {
        "content": "<p>It would also be nice to know what the future of <code>ematch</code> is, in Lean 4. <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span>.</p>",
        "id": 173172907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565754688
    },
    {
        "content": "<p>Ah, here's the old issue: <a href=\"https://github.com/leanprover/lean/issues/1940\" target=\"_blank\" title=\"https://github.com/leanprover/lean/issues/1940\">https://github.com/leanprover/lean/issues/1940</a>, along with Leo's warning:</p>\n<blockquote>\n<p>The smt_tactic framework will have to be redone in the future. It has serious technical and performance problems. I'm not even sure whether we will want to keep it in the future or not. It should be treated as experimental code. I strongly suggest users do not use it in long term projects. If they do, they should keep in mind that their projects will break in spectacular ways when we re-implement and/or delete the SMT framework.</p>\n</blockquote>",
        "id": 173173455,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565755396
    },
    {
        "content": "<blockquote>\n<p>Let me know if you're interested and I can see if I can find the more detailed diagnosis of the bug.</p>\n</blockquote>\n<p>to borrow your phrase, the offending source code looks a bit above my pay grade, but i'm happy to keep the bug in mind as i get more familiar with the Lean 3 codebase</p>",
        "id": 173214631,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1565797342
    }
]