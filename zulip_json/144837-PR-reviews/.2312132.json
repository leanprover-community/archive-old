[
    {
        "content": "<p>This lint failed twice now (but the build is fine). Here is the error from the fails quickly linter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- logic/nonempty.lean</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">prod.nonempty</span> <span class=\"c\">/-</span><span class=\"cm\"> type-class inference timed out</span>\n<span class=\"cm\">State:</span>\n<span class=\"cm\">α : Type u_1,</span>\n<span class=\"cm\">β : Type u_2,</span>\n<span class=\"cm\">h : nonempty α</span>\n<span class=\"cm\">⊢ nonempty (α × β) -/</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">prod.nonempty</span> <span class=\"bp\">-</span> <span class=\"n\">type</span><span class=\"bp\">-</span><span class=\"kd\">class</span> <span class=\"n\">inference</span> <span class=\"n\">timed</span> <span class=\"n\">out</span>\n<span class=\"n\">State</span><span class=\"o\">:</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It certainly appears to have gotten itself in a state where it's stuck, but I don't know how to deal with it. Is this lint error showing up elsewhere?</p>",
        "id": 272875565,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645568833
    },
    {
        "content": "<p>This looks pretty unrelated indeed. Best thing to do now is to investigate the TC trace by following the instructions from the <code>fails_quickly</code> linter.</p>",
        "id": 272875929,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645569020
    },
    {
        "content": "<p>I tried that, but must have done it wrong. I ran my machine out of memory instantly.</p>",
        "id": 272876125,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645569126
    },
    {
        "content": "<p>okay, I got it. I just needed 5GB of memory. Should I post the output here?</p>",
        "id": 272877090,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645569717
    },
    {
        "content": "<p>Yes please! Zulip should collapse long posts automatically, so no worries about blowing up our timelines :)</p>",
        "id": 272877185,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645569762
    },
    {
        "content": "<p>Zulip tells me not to exceed 10000 characters, and I have a million...</p>",
        "id": 272877441,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645569918
    },
    {
        "content": "<p>Embrace the 100 messages</p>",
        "id": 272877552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645569997
    },
    {
        "content": "<p>Could you post the first few hundred lines then?</p>",
        "id": 272877558,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645570002
    },
    {
        "content": "<p>This is the contents of the file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">all</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.class_instances</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">β</span><span class=\"o\">],</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>Here is the first message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span>  <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">slim_check.gen.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">pmf.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">wseq.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">lazy_list.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">semiquot.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finset.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">multiset.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">erased.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">ulift.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">plift.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">cont_t.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">?</span><span class=\"n\">x_3</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">writer_t.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_4</span> <span class=\"bp\">?</span><span class=\"n\">x_5</span> <span class=\"bp\">?</span><span class=\"n\">x_6</span> <span class=\"bp\">?</span><span class=\"n\">x_7</span> <span class=\"bp\">?</span><span class=\"n\">x_8</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">free_add_semigroup.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">free_semigroup.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">free_add_magma.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">free_magma.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pfun.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_9</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">ultrafilter.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">seq1.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">computation.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">free_abelian_group.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">free_group.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.ring_exp.ring_exp_m.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.norm_fin.eval_fin_m.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">mv_polynomial.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_10</span> <span class=\"bp\">?</span><span class=\"n\">x_11</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">part.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">linarith.linarith_monad.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.ring.ring_m.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">set.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">with_zero.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">with_one.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">trunc.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">old_conv.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">parser.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">io_core_is_monad</span> <span class=\"bp\">?</span><span class=\"n\">x_12</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">monad_io_is_monad</span> <span class=\"bp\">?</span><span class=\"n\">x_13</span> <span class=\"bp\">?</span><span class=\"n\">x_14</span> <span class=\"bp\">?</span><span class=\"n\">x_15</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_15</span> <span class=\"o\">:</span> <span class=\"n\">monad_io</span> <span class=\"n\">interaction_monad</span> <span class=\"o\">:=</span> <span class=\"n\">monad_io_impl</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">caching</span> <span class=\"n\">failure</span> <span class=\"n\">for</span> <span class=\"n\">monad_io</span> <span class=\"n\">interaction_monad</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">sum.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_1</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">list.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">smt_tactic.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">vm_core.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">conv.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">option_t.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_2</span> <span class=\"bp\">?</span><span class=\"n\">x_3</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">reader_t.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_4</span> <span class=\"bp\">?</span><span class=\"n\">x_5</span> <span class=\"bp\">?</span><span class=\"n\">x_6</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">state_t.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_7</span> <span class=\"bp\">?</span><span class=\"n\">x_8</span> <span class=\"bp\">?</span><span class=\"n\">x_9</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">except_t.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_10</span> <span class=\"bp\">?</span><span class=\"n\">x_11</span> <span class=\"bp\">?</span><span class=\"n\">x_12</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">except.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_13</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">id.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.unsafe.type_context.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"n\">task.monad</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">interaction_monad.monad</span> <span class=\"bp\">?</span><span class=\"n\">x_14</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">caching</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"n\">monad</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">@</span><span class=\"n\">interaction_monad.monad</span> <span class=\"n\">tactic_state</span>\n</code></pre></div>",
        "id": 272877591,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645570034
    },
    {
        "content": "<p>you may want to just use <a href=\"https://gist.github.com\">https://gist.github.com</a> :D this is actually mildly unrelated</p>",
        "id": 272877626,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1645570074
    },
    {
        "content": "<p>The lines we're looking for start with <code>?x_0 : nonempty (a × b)</code></p>",
        "id": 272877701,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645570115
    },
    {
        "content": "<p>no time, battery about to die. <a href=\"/user_uploads/3121/gA2poik7hO2DrOHHodRYGqdj/trace.txt\">trace.txt</a></p>",
        "id": 272877750,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1645570156
    },
    {
        "content": "<p>Some notes during debugging:</p>\n<ul>\n<li>Should <code>nonempty_fin_lin_ord.nonempty</code> get a lower priority? It seems like it applies too early</li>\n</ul>",
        "id": 272877898,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645570244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312132/near/272877750\">said</a>:</p>\n<blockquote>\n<p>no time, battery about to die. <a href=\"/user_uploads/3121/gA2poik7hO2DrOHHodRYGqdj/trace.txt\">trace.txt</a></p>\n</blockquote>\n<p>\"If I had more time I would write a shorter message\"</p>",
        "id": 272878200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645570433
    },
    {
        "content": "<ul>\n<li><code>normed_division_ring</code> occurs twice in the trace and gets rejected almost instantly. Is that really the issue?</li>\n</ul>",
        "id": 272878333,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645570496
    },
    {
        "content": "<ul>\n<li>it's midnight I should be going to bed not debugging timeouts</li>\n</ul>",
        "id": 272878440,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645570562
    },
    {
        "content": "<p>I tried looking at it with fresh eyes and nothing jumps out except for the huge amount of instances we're searching through.</p>",
        "id": 272927602,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1645610952
    },
    {
        "content": "<p>Half of the instance search is because of the subgoal <code>has_continuous_smul ℝ β</code> from the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_add_group.path_connected\">docs#topological_add_group.path_connected</a> instance.  It might be worth a try to swap the last two arguments there so that it searches for <code>toplogical_add_group β</code> first.</p>",
        "id": 272929025,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1645611801
    }
]