[
    {
        "content": "<p>This PR had been sitting around for a while - it introduces some ugly underscores in a few places, but without it <code>dfinsupp.to_semimodule</code> is useless to me. Can we just tolerate the three underscore warts in exchange for having the more useful generalization?</p>",
        "id": 214298693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603450622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> you wrote on that PR. What do you think of Eric's reply?</p>",
        "id": 214301507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603452830
    },
    {
        "content": "<p>My only worry is that the transition that Eric describes might take a lot of time and effort. But I'm not sure how heavy that weighs.</p>",
        "id": 214301583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603452872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> seems fine with this - does anyone else want to take a look, or can we just put it in?</p>",
        "id": 214693813,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603802786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> LGTM</p>",
        "id": 214694852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603803456
    },
    {
        "content": "<p>So it is understood how to get rid of all those new <code>_</code>s? Can they not be removed in this PR too? Is the point that this is for some reason hard? Why were they not necessary before?</p>",
        "id": 214705786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603808535
    },
    {
        "content": "<p>I think the type argument <code>G</code> could be inferred from the local <code>add_comm_group G</code> instances. Now that the definition takes <code>add_comm_monoid G</code> instances, the elaborator isn't smart enough to extract G for us</p>",
        "id": 214715722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603812387
    },
    {
        "content": "<p>At any rate, I don't think we should hold up useful generalization just because of fear of a few underscores</p>",
        "id": 214715776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603812411
    },
    {
        "content": "<p>I'm very reluctant to put more work into generalizing if the conclusion is \"sorry, the net underscore count went up, please generalize even more of the universe\"</p>",
        "id": 214715906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603812470
    },
    {
        "content": "<p><code>dfinsupp.support_smul</code> clearly has too many implicits though</p>",
        "id": 214716507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603812676
    },
    {
        "content": "<p><code>b</code> and <code>v</code> should be explicit by our standard rule</p>",
        "id": 214716571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603812709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.233490/near/214715906\">said</a>:</p>\n<blockquote>\n<p>I'm very reluctant to put more work into generalizing if the conclusion is \"sorry, the net underscore count went up, please generalize even more of the universe\"</p>\n</blockquote>\n<p>Speaking generally, the problem isn't that the PR increases the number of underscores in mathlib (we have an infinite supply of those), but that it apparently doesn't work any more to just use <code>simp only [smul_apply]</code> where it used to, which is going to cause some poor future user who wants to write something similar to <code>instance : lie_algebra R (⨁ i, L i)</code> to be even more confused than you were when they get an error, because they don't have the context of \"oh the implicitness of arguments to <code>smul_apply</code> just changed\".</p>",
        "id": 214718011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603813204
    },
    {
        "content": "<p>So what's accepted as a path forward here? Making the <code>β</code> argument explicit?</p>",
        "id": 214724716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603815785
    },
    {
        "content": "<p>Put it in anyway, and wait until someone complains about trying to do something similar to <code>instance : lie_algebra R (⨁ i, L i)</code> before worrying?</p>",
        "id": 214732952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603819067
    },
    {
        "content": "<p><code>b,v,i</code> should all be explicit in <code>smul_apply</code></p>",
        "id": 214733235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819174
    },
    {
        "content": "<p>The argument being that even if they are explicit <code>rw smul_apply</code> will try to fill them in, so users shouldn't have to care?</p>",
        "id": 214733506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603819274
    },
    {
        "content": "<p>In general, I think that we should make more arguments explicit than we typically do.</p>",
        "id": 214733577,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603819310
    },
    {
        "content": "<p>the standard rule is that anything which can't be inferred by subsequent hypotheses should be explicit</p>",
        "id": 214733648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819327
    },
    {
        "content": "<p>Eg in <code>iff</code> statements, it doesn't hurt to make things more explicit, because you don't need to feed them to <code>rw</code> or <code>simp</code>. But if you want to do <code>have foo := some_lemma_iff</code> then it's great if <code>(a  b c : R)</code> are explicit by default.</p>",
        "id": 214733747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603819368
    },
    {
        "content": "<p>the exception rule for iff is that a variable is allowed to be implicit if it would be implicit in both the <code>.mp</code> and <code>.mpr</code> versions of the lemma</p>",
        "id": 214733833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819406
    },
    {
        "content": "<p>But even then, I often want to provide the <code>c</code>, and <code>_ : 0 &lt; c</code> should become a new goal.</p>",
        "id": 214733917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603819441
    },
    {
        "content": "<p>Now you need to jump through little hoops to make it work</p>",
        "id": 214734004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603819466
    },
    {
        "content": "<p>that's true, although the circumstances in which you want to do that are varied and difficult to make simple rules for</p>",
        "id": 214734126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819512
    },
    {
        "content": "<p>But adding an occasional <code>_</code> is cheap. Whereas writing <code>@some_lemma_iff _ _ _ _ _ _ _ _ _ _ a b c _</code> is ugly.</p>",
        "id": 214734306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603819572
    },
    {
        "content": "<p>one way would be to say that neither hypotheses nor conclusion are allowed to affect the implicitness, but that seems like it will go way overboard in most situations</p>",
        "id": 214734502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819651
    },
    {
        "content": "<p>i.e. it won't be \"an occasional <code>_</code>\", it will be in almost every lemma</p>",
        "id": 214734574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819678
    },
    {
        "content": "<p>I think a better solution is another implicitness mode (<code>@@@</code>?)</p>",
        "id": 214734725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603819737
    },
    {
        "content": "<p>I made some arguments explicit in <a href=\"https://github.com/leanprover-community/mathlib/issues/4803\">#4803</a></p>",
        "id": 214737068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603820674
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.has_coe_to_fun/src\">src#direct_sum.has_coe_to_fun</a> seems like it was snuck in at the end of the file. Is this actually supposed to be supported? That is, do we want to have <code>x i : M i</code>  where <code>x : ⨁ i, M i</code> to mean the projection, or should this be an explicit function? It seems similar to polynomials in some respects.</p>",
        "id": 214859879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603901641
    },
    {
        "content": "<p>Hardly snuck in, it's been there for at least two years: <a href=\"https://github.com/leanprover-community/mathlib/blame/de6a9d419dc190e34a51fc55aff6576dfed8b82f/src/algebra/direct_sum.lean#L159\">https://github.com/leanprover-community/mathlib/blame/de6a9d419dc190e34a51fc55aff6576dfed8b82f/src/algebra/direct_sum.lean#L159</a></p>",
        "id": 214870996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603906209
    },
    {
        "content": "<p>after some investigation, it's actually been there from the beginning</p>",
        "id": 214871089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603906251
    },
    {
        "content": "<p>Yep, even <a href=\"https://github.com/leanprover-community/mathlib/commit/89431cf4f01ff0f6b4005f96795a23571258cbf0\">https://github.com/leanprover-community/mathlib/commit/89431cf4f01ff0f6b4005f96795a23571258cbf0</a> has it</p>",
        "id": 214871170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603906285
    },
    {
        "content": "<p>There used to be such a coe for polynomials as well.</p>",
        "id": 214872547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603906842
    },
    {
        "content": "<p>But I think it was way to confusing. Because that's not the way you want to think of polynomials as functions.</p>",
        "id": 214872600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603906864
    },
    {
        "content": "<p>Now that almost all the new underscores are gone, any objections to merging it (after fixing merge conflicts)?</p>",
        "id": 214948913,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603967211
    },
    {
        "content": "<p>conflicts resolved, lgtm</p>",
        "id": 214949074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603967344
    },
    {
        "content": "<p>Thanks for working out the problem was a lack of <code>direct_sum</code> lemmas <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, and the elaborator's inability to unfold <code>dfinsupp</code> into <code>direct_sum</code> without extra help</p>",
        "id": 214949617,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603967742
    },
    {
        "content": "<p>Can I get a <code>bors d+</code> if there are no other comments?</p>",
        "id": 214949774,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603967834
    },
    {
        "content": "<p>well, it's a design question actually. Is one supposed to be a transparent wrapper around the other or not? If you create a non-<code>reducible</code> type alias then it seems that the answer is that it is different, which means when you define a new add and a new coe, you need a new add/coe lemma</p>",
        "id": 214949775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603967835
    },
    {
        "content": "<p>My opinion is that <code>direct_sum</code> should probably just be an <code>alias</code> / <code>abbreviation</code> - as far as I can tell, there is no part of the <code>direct_sum</code> API that doesn't already have an analogue in <code>finsupp</code>, and should therefore also be part of the <code>dfinsupp</code> API. Once my decaying stack of finsupp PRs crosses the finish line, I'll have a go at adding them to <code>dfinsupp</code> and see what remains</p>",
        "id": 214949942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603967968
    },
    {
        "content": "<p>I don't think that design question should hold up 3490 though</p>",
        "id": 214950272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603968188
    },
    {
        "content": "<p><code>direct_sum</code> is a module, <code>finsupp</code> is not</p>",
        "id": 214950383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603968265
    },
    {
        "content": "<p>(actually it's only a semimodule, even though there is literally a file called <code>direct_sum_module</code>. What's up with that?)</p>",
        "id": 214950418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603968299
    },
    {
        "content": "<p>Indeed, the design needs a good cleanup. But let's do that in a new PR.</p>",
        "id": 214950781,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603968561
    },
    {
        "content": "<p>finsupp is a module though, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.semimodule\">docs#finsupp.semimodule</a></p>",
        "id": 214951129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603968809
    },
    {
        "content": "<p>(<code>finsupp</code> has a module instance, <code>dfinsupp</code> has a module <code>def</code> which is not an instance.)</p>",
        "id": 214951144,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1603968821
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib/issues/4801\">#4801</a> makes it an instance for consistency with finsupp)</p>",
        "id": 214951203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603968855
    },
    {
        "content": "<p>CI is green on <a href=\"https://github.com/leanprover-community/mathlib/issues/3490\">#3490</a>. Is anything else needed?</p>",
        "id": 214965082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603977806
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 214965378,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603977955
    }
]