[
    {
        "content": "<p>To talk about lexicographical order of products types, sigma types, finsets, ..., what would you prefer between</p>",
        "id": 266072212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640460586
    },
    {
        "content": "<p>/poll Handling of lexicographical synonyms</p>\n<ul>\n<li>Having one synonym per type, eg <code>sigma_lex</code>, <code>prod_lex</code>, <code>finset_lex</code>...</li>\n<li>Having one synonym for all of them, eg <code>lex (Σ i, α i)</code>, <code>lex (α × β)</code>, <code>lex (finset α)</code>.</li>\n</ul>",
        "id": 266072323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640460747
    },
    {
        "content": "<p>Notation considerations are orthogonal to this choice. We can achieve nice notation regardless.</p>",
        "id": 266072347,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640460804
    },
    {
        "content": "<p>Pros of the first option</p>\n<ul>\n<li>Allows custom dot notation?</li>\n</ul>\n<p>Cons of the first option</p>\n<ul>\n<li>Overhead for defining lex synonyms (custom <code>to_lex</code>, <code>of_lex</code> equivs, boilerplate...)</li>\n<li>Kills dot notation from the original type. Things about the lex synonym are not in the original type's namespace.</li>\n</ul>\n<p>Pros of the second option</p>\n<ul>\n<li>No type synonym overhead</li>\n<li>Things stay in the original type's namespace (<code>sigma.lex</code>, <code>prod.lex</code>, <code>finset.lex</code>).</li>\n</ul>\n<p>Cons of the second option</p>\n<ul>\n<li>Dot notation will go through the original type.</li>\n</ul>",
        "id": 266072653,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640461307
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 266072704,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640461346
    },
    {
        "content": "<p>How do you want to name lemmas with the second option? <code>prod.lex_*</code>?</p>",
        "id": 266073080,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640461957
    },
    {
        "content": "<p><code>prod.lex.*</code></p>",
        "id": 266073095,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640461994
    },
    {
        "content": "<p>Will it work with dot notation?</p>",
        "id": 266073100,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640462004
    },
    {
        "content": "<p>Currently not I think, because Lean interprets <code>x.lex.whatever</code> as <code>(prod.lex x).whatever</code>, but that's probably fixable.</p>",
        "id": 266073152,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640462068
    },
    {
        "content": "<p>But again I can't think of a single <code>prod</code> or <code>sigma</code> lemma that can be used with dot notation. The reason is that you rarely pass a term <code>x : Σ i, α i</code> to a lemma. It's more often <code>i : ι</code>, <code>a : α i</code>. Same for <code>x : α × β</code> vs <code>a : α</code>, <code>b : β</code>.</p>",
        "id": 266073287,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640462318
    },
    {
        "content": "<p>Also note that we currently have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.colex\">docs#finset.colex</a> that uses the original type's notation.</p>",
        "id": 266073307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640462398
    },
    {
        "content": "<p>What will e.g. <code>lex (α × β × γ)</code> mean under the second option?</p>",
        "id": 266075025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640465393
    },
    {
        "content": "<p>It will mean <code>α ×ₗ (β × γ)</code></p>",
        "id": 266075208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640465664
    },
    {
        "content": "<p>If you want the lexicographic order on three things, you will do <code>α ×ₗ β ×ₗ γ</code>. But that orthogonal to the current choice.</p>",
        "id": 266075228,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640465759
    },
    {
        "content": "<p>Wait what's <code>×ₗ</code> and how does it relate to <code>lex</code>?</p>",
        "id": 266076765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640468315
    },
    {
        "content": "<p>Have a look at the PR <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span><br>\n<code>×ₗ</code> has exactly the same precedences as <code>×</code> and <code>α ×ₗ β = lex (α × β)</code>.</p>",
        "id": 266076781,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640468386
    },
    {
        "content": "<p>Looks obviously wrong to me but I can see the appeal.</p>",
        "id": 266077085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640468988
    },
    {
        "content": "<p>I don't think you can make the \"obviously right\" thing from using <code>lex</code>. Btw note that I'm planning on <code>lex</code> being barely visible from the outside. There's only <code>lex (finset α)</code> that I don't have notation for.</p>",
        "id": 266077212,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640469140
    },
    {
        "content": "<p>Maybe it should have a less appealing name like <code>lex_wrapper</code> or something</p>",
        "id": 266077358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640469435
    },
    {
        "content": "<p>I initially suggested <code>*_lex</code>. Now I don't care about name as long as we have notation.</p>",
        "id": 266088594,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1640489217
    },
    {
        "content": "<p>For the namespace, we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sum.lex.is_well_order\">docs#sum.lex.is_well_order</a></p>",
        "id": 266412470,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640853763
    }
]