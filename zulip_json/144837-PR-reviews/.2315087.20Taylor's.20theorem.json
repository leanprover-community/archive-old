[
    {
        "content": "<p>I've tried to change the definition so that it uses the new <code>polynomial_module</code>, but there is quite a lot of API missing (no <code>eval</code>, no <code>comp</code>, etc) and I am not really happy with implementing all that stuff myself, especially since I did not expect this to be part of the Taylor's theorem project. So the question is now what to do. I would be willing to change the definition of <code>taylor_coeff</code> so that it works for vector-valued functions. This should make it easier to migrate to <code>polynomial_module</code> once that is ready. The other possibility is to let the PR stay on the queue until <code>polynomial_module</code> is actually useable. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> since you two said that this is trivial and everything is there for Taylor's theorem <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 293978825,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660771661
    },
    {
        "content": "<p>I stopped copying stuff from <code>polynomial</code> to <code>polynomial_module</code> after ~80 lines and the observation that <code>polynomial.eval_add</code> needs <code>polynomial.sum_add_index</code> which needs a few other facts about polynomials.</p>",
        "id": 293979270,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660771877
    },
    {
        "content": "<p>I think <code>polynomial_module.eval_add</code> is just <code>finsupp.sum_add_index</code> if the definition of <code>polynomial_module.eval</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I current do not have any plans on expanding the <code>polynomial_module</code> API -- the stuff already in mathlib is sufficient for my applications.<br>\nBut if you can produce a file generalizing your PR with calculations of polynomials sorried out,  I might be able to extend the API to cover your needs.</p>",
        "id": 293991734,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1660776959
    },
    {
        "content": "<p>that would be great</p>",
        "id": 293992544,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660777511
    },
    {
        "content": "<p>I defined <code>eval</code> via <code>eval₂</code> , but that is not necessary since <code>comp</code> has to be defined by hand.</p>",
        "id": 293992654,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660777582
    },
    {
        "content": "<p>I am not quite done with rewriting (the actual Taylor theorems are missing), but I think I found all things that are needed from <code>polynomial_module</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">polynomial_module</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial_module</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Evaluate a polynomial `p` given a ring hom `σ`, a semilinear map `f`,</span>\n<span class=\"sd\">and a value `x` for the variable in the target -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eval₂_eq_sum</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p.eval₂</span> <span class=\"n\">σ</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- `eval x p` is the evaluation of the polynomial `p` at `x` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">polynomial_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">eval₂</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.id</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">linear_map.id</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eval_add</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p.eval</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">q.eval</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">eval_eq_sum</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p.eval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- We cannot invoke `eval₂` since `q` is a polynomial and not a scalar</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">p.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"bp\">^</span><span class=\"n\">e</span> <span class=\"bp\">•</span> <span class=\"n\">polynomial_module.single</span> <span class=\"n\">R</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eval_comp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p.comp</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p.eval</span> <span class=\"o\">(</span><span class=\"n\">q.eval</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">eval_monomial</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">polynomial_module.single</span> <span class=\"n\">R</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">i</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">polynomial_module</span>\n</code></pre></div>",
        "id": 293995969,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660780312
    },
    {
        "content": "<p>Opened a stub PR at <a href=\"https://github.com/leanprover-community/mathlib/pull/16126\">#16126</a>.  It should cover all your sorries for now and hopefully it is enough.</p>",
        "id": 294052291,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1660820029
    }
]