[
    {
        "content": "<p>The PR <a href=\"https://github.com/leanprover-community/mathlib/issues/3641\">#3641</a> seems to have broken the path_connected file in topology, even though it did not touch it. It times out at a continuity tactic at line 470. I tried to remove some continuity attributes around but nothing worked. Is there a way to trace back this tactic like with simp, so to understand what's going on?</p>",
        "id": 211107487,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1600939748
    },
    {
        "content": "<p>I don't think it has a tracing option at the moment</p>",
        "id": 211108105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600940099
    },
    {
        "content": "<p>Ok I'll go commenting code the old way then</p>",
        "id": 211111707,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1600942485
    },
    {
        "content": "<p>Well it seems there is nothing too wrong with my code and it is <code>truncate_continuous_family</code> to be extremely slow to compile, even without my code. Should maybe <code>continuity</code> be substituted with a more efficient proof, so that this problem does not risk happening over and over again when someone adds some new lemma to continuity?</p>",
        "id": 211136147,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1600956517
    },
    {
        "content": "<p>Probably yes. Unfortunately <code>continuity</code> is not yet fast enough to be used widely.</p>",
        "id": 211136578,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1600956699
    },
    {
        "content": "<p>Since I am the one who introduced this proof, I fixed it to avoid using <code>continuity</code> : <a href=\"https://github.com/leanprover-community/mathlib/issues/4244\">#4244</a></p>",
        "id": 211188847,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1600981105
    },
    {
        "content": "<p>Oh thanks that's super nice of you</p>",
        "id": 211194135,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1600984300
    },
    {
        "content": "<p>Actually on my computer it timed out there but on github it times out even before, at line 299, right after another continuity at line 298. Here I cannot understand what is going on because I cannot reproduce it on my computer. The proof there is slow to compile but not that slow (less than a minute I think), so the only thing I can think of is: can we also replace that continuity at line 298? I can't think of other solutions...</p>",
        "id": 211231067,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1601022719
    },
    {
        "content": "<p>Well I just found out about continuity? so no worries I'll do it myself</p>",
        "id": 211231308,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1601022890
    },
    {
        "content": "<p>I wonder if most continuities in general should be squeezed</p>",
        "id": 211231627,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1601023189
    },
    {
        "content": "<p>I mean why this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> TODO : When `continuity` gets quicker, change the proof back to :</span>\n<span class=\"cm\">    `begin`</span>\n<span class=\"cm\">      `simp only [has_coe_to_fun.coe, coe_fn, path.truncate],`</span>\n<span class=\"cm\">      `continuity,`</span>\n<span class=\"cm\">      `exact continuous_subtype_coe`</span>\n<span class=\"cm\">    `end` -/</span>\n</code></pre></div>\n\n<p>? I guess squeezed continuity will always be faster then continuity?</p>",
        "id": 211235173,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1601025698
    },
    {
        "content": "<p>Because <code>continuity</code> will always correspond to stuff that should be invisible. Ideally it should be an auto_param.</p>",
        "id": 211235505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601025959
    },
    {
        "content": "<p>In a case like this one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Image of a path from `x` to `y` by a continuous map -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">γ</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">continuity</span><span class=\"o\">,</span>\n  <span class=\"n\">source'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">target'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n<p>why should this proof be invisible? It'd feel it perfectly normal to have a proof here</p>",
        "id": 211236223,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1601026471
    },
    {
        "content": "<p>Even if it is an autoparam, you can still show the proof when you need/want to.</p>",
        "id": 211236432,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601026637
    },
    {
        "content": "<p>It doesn't feel normal at all to me. Would you prove (or even explicitly state) this continuity on paper (unless this is the first week of analysis 101)?</p>",
        "id": 211236928,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1601027000
    }
]