[
    {
        "content": "<p>I am wanting to add the lemma <code>coprime_add_mul_self {m n k : ℕ} : coprime m (n + k * m) ↔ coprime m n</code>as a simp lemma and am considering adding the various permutations of this (switching the order of arguments to coprime, the order of arguments to add and the order of arguments to mul. Is it okay to just create all these variants like this (how would one handle this if there were 16 or 32 permutations of essentially the same lemma)</p>",
        "id": 263677763,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638585245
    },
    {
        "content": "<p>For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_coprime.add_mul_right_left\">docs#is_coprime.add_mul_right_left</a> and friends do it the 8 lemma way. Side note: Is there no way to combine <code>nat.coprime</code> and <code>is_coprime</code> into one definition? It surprises me that they're separate.</p>",
        "id": 263678585,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1638586126
    },
    {
        "content": "<p>I would suggest adding all 2^n lemmas.</p>\n<p><code>nat.coprime</code> and <code>is_coprime</code> are different. <code>is_coprime</code> is a very general concept which works in all semirings but is a super-strong notion of coprimality. <code>nat.coprime</code> is a weaker version (i.e. more things are coprime) which only makes sense in the context of a unique factorization domain (or more generally a unique factorization monoid). To give a concrete example, <code>is_coprime (2 : nat) (3 : nat)</code> is false, although <code>is_coprime (2 : int) (3 : int)</code> is true.</p>",
        "id": 263700609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638617802
    },
    {
        "content": "<p>Are results for <code>nat.coprime a b</code> generally true under the <code>is_unit (gcd a b)</code> assumption?</p>",
        "id": 263701311,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1638618629
    },
    {
        "content": "<p>You mean <code>nat.gcd</code>? I should think <code>nat.coprime a b \\iff is_unit (nat.gcd a b)</code>.</p>",
        "id": 263701909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638619437
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat.coprime</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">nat.gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 263702268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638619735
    },
    {
        "content": "<p>Not that <code>is_unit (nat.gcd a b)</code> may also be expressed as <code>nat.gcd a b = 1</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 263704925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638622332
    }
]