[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has taken this PR through a couple of revisions, but I think it is quite solid and stable now. I've been stress testing it quite a bit on my <code>sheaf</code> branch, and I think it works well. Do others have any comments?</p>",
        "id": 147952349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542616677
    },
    {
        "content": "<p>I don't think we should add new stuff to this PR, but people are accumulating follow-up stuff.</p>",
        "id": 147952393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542616708
    },
    {
        "content": "<p>I think Kenny pointed out that this PR uses a lot of high automation. Are there any really expensive files in here?</p>",
        "id": 147952555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542617028
    },
    {
        "content": "<p>maybe add a few more <code>tidy says:</code> bits</p>",
        "id": 147952606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542617065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Isn't this battling in the wrong direction?</p>",
        "id": 147952756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542617328
    },
    {
        "content": "<p>And tons of this automation is hidden in auto_params. We really don't want to see those.</p>",
        "id": 147952768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542617352
    },
    {
        "content": "<p>yes, I realize that, and we had this conversation already with the <code>faster</code> branch</p>",
        "id": 147952911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542617573
    },
    {
        "content": "<p>The fact is that people compile mathlib often, and doubling the compile time is not a good thing</p>",
        "id": 147952920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542617604
    },
    {
        "content": "<p>Sure, but there we didn't really rewrite much. We only expanded <code>simp</code>s into <code>simp only</code>s.</p>",
        "id": 147952922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542617610
    },
    {
        "content": "<p>and here we can expand <code>tidy</code> into its proof script without much work</p>",
        "id": 147952928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542617627
    },
    {
        "content": "<p>If it is fast enough, I don't even think that is necessary, but any tactics that take more than a few seconds should probably be unrolled a bit</p>",
        "id": 147952977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542617680
    },
    {
        "content": "<p>Ok, the <code>limits</code> directory currently invokes <code>tidy</code> 156 times, and spends  107s inside <code>tidy</code>.  34 of these invocations take more than a second each.</p>",
        "id": 147954782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542620189
    },
    {
        "content": "<p>Only one takes more than 4.</p>",
        "id": 147954784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542620198
    },
    {
        "content": "<p>How do you make <code>lean --make</code> run single threaded?</p>",
        "id": 147955040,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542620567
    },
    {
        "content": "<p>The output from <code>--profile</code> is all jumbled up, and I can't tell which output is from which declaration. :-(</p>",
        "id": 147955047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542620589
    },
    {
        "content": "<p><code>-j0</code>, I think.</p>",
        "id": 147955100,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542620654
    },
    {
        "content": "<p>if you use <code>--profile</code>, only look at the STDERR</p>",
        "id": 147955104,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542620662
    },
    {
        "content": "<p>I mean</p>",
        "id": 147955106,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542620667
    },
    {
        "content": "<p>only look at the STDOUT</p>",
        "id": 147955108,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542620672
    },
    {
        "content": "<p>I actually forgot which one to look at</p>",
        "id": 147955112,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542620677
    },
    {
        "content": "<p>even then, if two declarations are running at once, I was having their profile output interspersed</p>",
        "id": 147955121,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542620695
    },
    {
        "content": "<p><code>git ls-files *.lean | xargs -I % sh -c '&gt;&amp;2 echo %; lean --profile % &gt;/dev/null;' &gt; profile.txt 2&gt;&amp;1</code></p>",
        "id": 147955148,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542620738
    },
    {
        "content": "<p>this is how I use it</p>",
        "id": 147955151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542620740
    },
    {
        "content": "<p>hmm.. even with <code>-j0</code> I can't make sense of the output.</p>",
        "id": 147955152,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542620746
    },
    {
        "content": "<p>Hmm... could you show me how to run that just on a subdirectory?</p>",
        "id": 147955199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542620764
    },
    {
        "content": "<p>Can I just change the <code>*.lean</code>?</p>",
        "id": 147955211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542620778
    },
    {
        "content": "<p>Kenny, your scripts seems to only tell me totals by file. Is that what you intended?</p>",
        "id": 147955243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542620853
    },
    {
        "content": "<p>yes...</p>",
        "id": 147955521,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542621212
    },
    {
        "content": "<p>That's not going to help me at all.</p>",
        "id": 147955582,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542621265
    },
    {
        "content": "<p>i'll excuse myself before you realize that i don't know anything about bash :P</p>",
        "id": 147955586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542621276
    },
    {
        "content": "<p>From what I can see, the instances of <code>tidy</code> that take more than a second don't even appear in the source file, they're in <code>auto_param</code>s.</p>",
        "id": 147955591,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542621297
    },
    {
        "content": "<p>/me hears a background choir chanting <em>\"We want caching! We want caching! We want caching...\"</em></p>",
        "id": 147955669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542621364
    },
    {
        "content": "<p>I think, until someone comes up with caching and/or faster tactic execution, I might find something more productive to do... Writing out human-irrelevant proofs for the sake of compilation times is the surest sign I've seen yet that this is all a bad idea. :-(</p>",
        "id": 147955737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542621476
    },
    {
        "content": "<p>If you would rather have someone else do it we can postpone it until someone else gets annoyed at compile times enough to do something about it...</p>",
        "id": 147956525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542622451
    },
    {
        "content": "<p>or until someone actually puts those caching ideas into practice</p>",
        "id": 147956557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542622506
    },
    {
        "content": "<p>An intermediate goal which looks much easier would be to find a way to collect olean built by travis as something people could download and use right away</p>",
        "id": 147956620,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542622571
    },
    {
        "content": "<p>How portable have you found them to be?</p>",
        "id": 147957272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542623388
    },
    {
        "content": "<p>Sebastian claims they should be portable enough</p>",
        "id": 147957330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542623412
    },
    {
        "content": "<p>For sure I've had no problem making them on one win10 machine and using them on another</p>",
        "id": 147957997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542624168
    },
    {
        "content": "<p>One has to make sure that the file transfer doesn't mangle the timestamps though</p>",
        "id": 147958014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542624205
    },
    {
        "content": "<p>If I remember correctly, Sebastian said they should even work across OSs. The only things that needs care are timestamps</p>",
        "id": 147958020,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542624222
    },
    {
        "content": "<p>Who wants to try downloading <a href=\"https://www.math.u-psud.fr/~pmassot/mathlib.tar.gz\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/mathlib.tar.gz\">https://www.math.u-psud.fr/~pmassot/mathlib.tar.gz</a> and play with it to see whether olean can be reused? It's a freshly compiled mathlib (without the <code>.git</code> directory)</p>",
        "id": 147998722,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542664694
    },
    {
        "content": "<p>This doesn't work for me, at least not in an obvious way. I unzipped and created <code>test.lean</code> in the root directory. Adding <code>import data.real.basic</code> starts recompiling everything.</p>",
        "id": 147999684,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542665605
    },
    {
        "content": "<p>(I'm on my Windows laptop, by the way, using msys2.)</p>",
        "id": 147999870,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542665764
    },
    {
        "content": "<p>What if you touch all olean files? (assuming <code>touch</code> exists on Windows)</p>",
        "id": 148000002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542665893
    },
    {
        "content": "<p>Doesn't seem to make a difference.</p>",
        "id": 148000259,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542666137
    },
    {
        "content": "<p>I have had success with using <code>touch</code> in the past</p>",
        "id": 148000638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542666542
    },
    {
        "content": "<p>if you touch the files then lean will accept them as correct without checking, regardless of the actual status</p>",
        "id": 148000680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542666575
    },
    {
        "content": "<p>so you get funny errors sometimes but it usually worksish</p>",
        "id": 148000691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542666591
    },
    {
        "content": "<p>Just the .oleans? Just the .leans? Both?</p>",
        "id": 148000744,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542666611
    },
    {
        "content": "<p>just the oleans</p>",
        "id": 148000754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542666617
    },
    {
        "content": "<p>I tried just the .oleans and both, neither seemed to do the trick.</p>",
        "id": 148000759,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542666622
    },
    {
        "content": "<p>also the oleans have to be touched in dependency order or very fast</p>",
        "id": 148000769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542666643
    },
    {
        "content": "<p>Um, okay, that I definitely didn't do.</p>",
        "id": 148000803,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542666685
    },
    {
        "content": "<p><code>find  -type f  -name \"*.olean\" -exec touch {} +</code> must not have been fast enough.</p>",
        "id": 148000811,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542666698
    },
    {
        "content": "<p>I think within a second should do</p>",
        "id": 148000821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542666712
    },
    {
        "content": "<p>you can check the modification dates</p>",
        "id": 148000866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542666726
    },
    {
        "content": "<p>alternatively, find a bashism to get the current time and set all the files to that</p>",
        "id": 148000876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542666743
    },
    {
        "content": "<p>Still not having any luck. I've set the timestamp on all .olean files to match a random file (with a later timestamp than any of the .leans). It still starts recompiling when I import anything.</p>",
        "id": 148001821,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542667717
    },
    {
        "content": "<p>oh I see</p>",
        "id": 148002004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542667864
    },
    {
        "content": "<p>I get a quick <code>lean --make</code> this way</p>",
        "id": 148002016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542667876
    },
    {
        "content": "<p>But with your own .oleans, right? Not with foreign ones?</p>",
        "id": 148002162,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542668024
    },
    {
        "content": "<p>yes</p>",
        "id": 148002171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542668041
    },
    {
        "content": "<p>I've never tested anything with foreign oleans. It's hard enough to get lean to accept native ones</p>",
        "id": 148002245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542668092
    },
    {
        "content": "<p>Unrelated to sharing olean files... I'm inclined to take this PR and split it into a logical series of commits, partly for my own understanding and partly to aid with review. Would that be helpful?</p>",
        "id": 148002544,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542668386
    },
    {
        "content": "<p>yes. Anything I can't review in one sitting gets delayed a lot more than it should</p>",
        "id": 148002745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542668529
    },
    {
        "content": "<p>Thank you, Reid, that would be fantastic.</p>",
        "id": 148008047,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542674965
    },
    {
        "content": "<p>I just tested in my office: my olean compiled at home work perfectly here. I'm not running up to date mathlib, I can use <code>mono</code> without any delay</p>",
        "id": 148028515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542707974
    },
    {
        "content": "<p>Patrick, what steps are you doing to test it, and what OS are you using on either end?</p>",
        "id": 148028645,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542708126
    },
    {
        "content": "<p>I just tried it on my (Linux) office desktop and saw the same behavior as on my laptop last night.</p>",
        "id": 148028654,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542708150
    },
    {
        "content": "<p>I'm using Linux on all my computers. What I just did was: </p>\n<div class=\"codehilite\"><pre><span></span>cd mathlib\nmv .git ..\ncd ..\nrm -rf mathlib\nwget https://www.math.u-psud.fr/~pmassot/mathlib.tar.gz\ntar xf mathlib.tar.gz\nmv .git mathlib/\n</pre></div>\n\n\n<p>Then I opened the mathlib folder in VScode, created a scratch file at the root of mathlib, with the monotonicity examples I wrote yesterday in the \"What's new\" thread</p>",
        "id": 148030294,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542710029
    },
    {
        "content": "<p>Of course the <code>.git</code> stuff is there only because I want to preserve my local branches and didn't want to clutter the tar.gz with them</p>",
        "id": 148030375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542710092
    },
    {
        "content": "<p>Then I don't know what the difference is, I did effectively the same thing (without the git stuff).</p>",
        "id": 148031165,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542711071
    },
    {
        "content": "<p>Do .olean files track the version of Lean used to compile them? What versions are you using on each computer?</p>",
        "id": 148031179,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1542711093
    },
    {
        "content": "<p>It works for me! I downloaded Patrick's files, and I could immediately run the <code>mono</code> example from the other thread. No recompiles.</p>",
        "id": 148032765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542712955
    },
    {
        "content": "<p>I'm on a Linux box.</p>",
        "id": 148032767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542712962
    },
    {
        "content": "<p>The version of Lean should be enforced by the leanpkg.toml (I'm using elan)</p>",
        "id": 148034169,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542714867
    },
    {
        "content": "<p>Reid has just pushed a subset of the limits PR, which just contains the preparatory work. <a href=\"https://github.com/leanprover/mathlib/pull/488\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/488\">https://github.com/leanprover/mathlib/pull/488</a></p>",
        "id": 148147105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542848961
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, very much for doing this!</p>",
        "id": 148147109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542848981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, the preliminary PR was just merged. How should we handle the next chunk? I could rebase the big PR onto master, but I'm not actually sure that's useful.</p>",
        "id": 148270095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543051689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, do you have a moment to discuss next steps with the limits PRs?</p>",
        "id": 148336028,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543186965
    },
    {
        "content": "<p>I'm actually in the midst of going through <code>limits.lean</code></p>",
        "id": 148336287,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543187433
    },
    {
        "content": "<p>Great, okay, I'll leave you to it, in that case!</p>",
        "id": 148336290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543187445
    },
    {
        "content": "<p>currently in the phase of dualizing all my changes. It's a lot of typing...</p>",
        "id": 148336990,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543188954
    },
    {
        "content": "<p>sorry :-(</p>",
        "id": 148337094,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543189146
    },
    {
        "content": "<p>Think of it as a meditative practice.</p>",
        "id": 148337099,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543189181
    },
    {
        "content": "<p>Well, it suddenly got interesting because one of the proofs is refusing to dualize</p>",
        "id": 148337213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543189395
    },
    {
        "content": "<p>OK, I defeated it, but a mystery for sure...</p>",
        "id": 148337460,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543189840
    },
    {
        "content": "<p>I suspect <code>erw</code> uses some black magic</p>",
        "id": 148337470,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543189908
    },
    {
        "content": "<p>I made some trivial comments. Feel free to ignore them.<br>\nI squashed some double newlines into one. (Don't know if this is appreciated.)<br>\nI also think we can scrape a bunch of lemmas into namespaces, because now we have 20 lemmas after each other, that all start with <code>limit.</code>.</p>",
        "id": 148345984,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543207133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'm going to drop the stuff about creating limits for now, because it doesn't appear to be used currently and I found about seven definitions of \"F creates limits\" which I think are all inequivalent.</p>",
        "id": 148370732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543242994
    },
    {
        "content": "<p>Sounds very reasonable. I think I followed the definition in Emily Riehl's book, but I agree it's a mess, and a mess better left until later.</p>",
        "id": 148388233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543257979
    },
    {
        "content": "<p>isn't useful for the reflexive subcategory stuff?</p>",
        "id": 148388303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1543258035
    },
    {
        "content": "<p>Yes, but that's not in \"this\" PR.</p>",
        "id": 148388328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543258057
    },
    {
        "content": "<p>This PR has conflicts, apparently. <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> and <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> have constructed colimits in the category of commutative rings as part of the refactoring schemes project so I got interested in it. This PR is very large -- over 3000 lines. That's a lot of work for Mario and Johannes. Am I right in thinking that this PR is being actively tested and used by Scott, Reid and Johan? My teaching finishes in two weeks. Is there anything I can do to help?</p>",
        "id": 150678603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543660375
    },
    {
        "content": "<p>The current plan is to chop this PR into pieces. Parts have been merged, other parts are currently being PRd.</p>",
        "id": 150678669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543660512
    },
    {
        "content": "<p>So this PR is only around for historical reasons.</p>",
        "id": 150678674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543660553
    },
    {
        "content": "<p>I see. Thanks. I've not been watching this category theory stuff at all because I've been extremely busy at work for the last two months. I can now see the light at the end of the tunnel though and I'm trying to work out the state of things. Would the correct thing to do to be to close this PR? Thanks for the pointer to <code>limits-2</code>.</p>",
        "id": 150678725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543660614
    },
    {
        "content": "<p>Maybe it should be closed, yes. Or at least a big fat notice that we keep it around because of the discussion on that page, but that it is actively being chopped into pieces.</p>",
        "id": 150678849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543660870
    },
    {
        "content": "<p>I've just closed the original mega-PR.</p>",
        "id": 150710544,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543727410
    }
]