[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/4567\">#4567</a> I refactored <code>linear_algebra/linear_independent</code> to provide more lemmas about type-level operations (<code>sum</code>, <code>option</code>) instead of concentrating on families indexed by sets. Results about families indexed by sets follow from <code>equiv</code>alences with type operations.<br>\nAmong other theorems, it adds</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">linear_independent_pair</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent_fin_cons</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">fin.cons</span> <span class=\"n\">x</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">submodule.span</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent.fin_cons</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">submodule.span</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">fin.cons</span> <span class=\"n\">x</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_independent_fin_cons.2</span> <span class=\"o\">⟨</span><span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent_fin_succ</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"n\">v</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">fin.tail</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">∉</span> <span class=\"n\">submodule.span</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"bp\">$</span> <span class=\"n\">fin.tail</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">linear_independent_fin2</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_independent</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 212945067,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602383824
    },
    {
        "content": "<p>These lemmas should make proving linear independence of <code>![v₁, v₂, v₃]</code> less painful.</p>",
        "id": 212945108,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602383899
    },
    {
        "content": "<p>What do you think about a PR review sprint? We have 41 PRs awaiting review.</p>",
        "id": 212945553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602384978
    },
    {
        "content": "<p>Give me a few days and I'll sprint :D</p>",
        "id": 212953418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602401406
    }
]