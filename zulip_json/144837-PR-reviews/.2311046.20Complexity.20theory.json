[
    {
        "content": "<p>It seems like I need to write a <code>has_add</code> instance for <code>part α</code>. Which of the following \"gets the order right\" if that makes sense?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.part</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">part</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">part</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 268209194,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1642370190
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/part.monad\">docs#part.monad</a></p>",
        "id": 268209947,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642371149
    },
    {
        "content": "<p>Shouldn't it just be \"fun a b, (+) &lt;$&gt; a &lt;*&gt; b\"</p>",
        "id": 268210022,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642371249
    },
    {
        "content": "<p>Note that the two orders result in the same value, i.e. <code>add</code> defined in any of these ways is commutative. The reason is because the result exists iff both subparts exist, and in that case it is the regular commutative <code>add</code> (well, assuming that the input <code>has_add A</code> instance is commutative)</p>",
        "id": 268276308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642429198
    },
    {
        "content": "<p>Mario, what you're saying precisely means that there is a right answer and a wrong one. If  <code>a</code> and <code>b</code> both exist, we definitely want the addition of <code>a</code> and <code>b</code> to mean <code>a + b</code>, not <code>b + a</code>.</p>",
        "id": 268276710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642429423
    },
    {
        "content": "<p>Because you're mapping with <code>+ y</code>, not <code>(+) y</code>, the first one should be the correct one.</p>",
        "id": 268276804,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642429470
    },
    {
        "content": "<p>To check, you can try proving <code>pure (a + b) = pure a + pure b</code> without assuming commutativity of addition on <code>α</code>.</p>",
        "id": 268276946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642429557
    },
    {
        "content": "<p>The second one should be using <code>(y +)</code> to match the first one, but then they are the same.</p>",
        "id": 268277479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642429797
    },
    {
        "content": "<p>Up to propext in the <code>dom</code> part</p>",
        "id": 268277720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1642429904
    },
    {
        "content": "<p>or <code>((+) y)</code>. I'm not sure <code>(y +)</code> works.</p>",
        "id": 268277734,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1642429917
    },
    {
        "content": "<p>Does Lean make a difference between monadic bind and applicative seq? Of course, we don't have ApplicativeDo, but could we have out of order seq execution? It's a proposition that they'd give the same result as execution in expression order.</p>",
        "id": 268278958,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1642430524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I meant that it doesn't matter what order you do the \"effects\" of <code>a</code> and <code>b</code> in. Of course you should not reorder the arguments to <code>+</code>, I missed that in the example. I mean that <code>(+) &lt;$&gt; a &lt;*&gt; b</code> and <code>flip (+) &lt;$&gt; b &lt;*&gt; a</code> are equal</p>",
        "id": 268285508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642433571
    },
    {
        "content": "<p>With both bind and seq, the ordering of effects is respected</p>",
        "id": 268285616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642433635
    },
    {
        "content": "<p>But <code>part</code> has commutative effects, in the sense of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_comm_applicative\">docs#is_comm_applicative</a></p>",
        "id": 268285834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642433733
    }
]