[
    {
        "content": "<p>Leanchecker fails on this one, while everything seems to be fine. Is there a way to diagnose what is going on?</p>",
        "id": 228120937,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614507537
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6375\">#6375</a> for mobile</p>",
        "id": 228120961,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614507577
    },
    {
        "content": "<p>Have you tried restarting the test?</p>",
        "id": 228121200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614507832
    },
    {
        "content": "<p>Yes, it failed twice, both on the last commit and on the one referenced by 213b4cf on the PR page.</p>",
        "id": 228122827,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614509708
    },
    {
        "content": "<p>Exit code 137 looks like it can mean out of memory</p>",
        "id": 228125648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614512960
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1716\">https://github.com/leanprover/lean/issues/1716</a> seems relevant</p>",
        "id": 228248573,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614612169
    },
    {
        "content": "<p>I have merged master, and I get the same leanchecker failure, so this is pretty deterministic. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> , any idea?</p>",
        "id": 228369502,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614672589
    },
    {
        "content": "<p>Can you binary search by commenting out half the file etc until the build succeeds?</p>",
        "id": 228369700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614672682
    },
    {
        "content": "<p>In case it's one particular nasty lemma</p>",
        "id": 228369754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614672716
    },
    {
        "content": "<p>I have bisected the problem. It is in the <code>add_comm_group</code> instance on <code>normed_group_hom V₁ V₂</code>, which is currently given by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">normed_group_hom</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">refine_struct</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"n\">normed_group_hom.has_add</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"n\">normed_group_hom.has_zero</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">normed_group_hom.has_neg</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">normed_group_hom.has_sub</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I have tried to expand the proof, removing the <code>refine_struct</code> and adding more type annotation, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">normed_group_hom</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_left_comm</span><span class=\"o\">,</span> <span class=\"n\">coe_add</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">coe_zero</span><span class=\"o\">,</span> <span class=\"n\">coe_add</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">coe_zero</span><span class=\"o\">,</span> <span class=\"n\">coe_add</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">coe_add</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">coe_zero</span><span class=\"o\">,</span> <span class=\"n\">coe_add</span><span class=\"o\">,</span> <span class=\"n\">add_right_neg</span><span class=\"o\">,</span> <span class=\"n\">coe_neg</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">sub_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.add_apply</span><span class=\"o\">,</span> <span class=\"n\">pi.neg_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_neg</span><span class=\"o\">,</span> <span class=\"n\">coe_add</span><span class=\"o\">]</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"bp\">@</span><span class=\"n\">normed_group_hom.has_zero</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"bp\">@</span><span class=\"n\">normed_group_hom.has_neg</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"bp\">@</span><span class=\"n\">normed_group_hom.has_add</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"bp\">@</span><span class=\"n\">normed_group_hom.has_sub</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It doesn't change anything: leanchecker still chokes on this.</p>",
        "id": 228403074,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614689057
    },
    {
        "content": "<p>Does proving it with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_group_sub\">docs#function.injective.add_comm_group_sub</a> do any better?</p>",
        "id": 228404963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614689979
    },
    {
        "content": "<p>That is, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">coe_inj</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">coe_fn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group_sub</span> <span class=\"n\">coe_fn</span> <span class=\"n\">rfl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 228405040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614690008
    },
    {
        "content": "<p>Which would be easier if you defined a new</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coe_injective</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">normed_group_hom</span> <span class=\"n\">V₁</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"bp\">→</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"n\">coe_fn</span> <span class=\"o\">:=</span> <span class=\"n\">coe_inj</span>\n</code></pre></div>\n<p>first</p>",
        "id": 228405688,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614690291
    },
    {
        "content": "<p>No, it doesn't change anything. I have also tried adding some <code>@[reducible]</code> on constructors for addition and so on, to no avail. This must be a weird bug in leanchecker...</p>",
        "id": 228422260,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614696781
    },
    {
        "content": "<p>Does it make sense to split the PR and get everything up to but not including that instance merged?</p>",
        "id": 228422398,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614696841
    },
    {
        "content": "<p>I don't think so: the <code>add_comm_group</code> instance is really something we want to have.</p>",
        "id": 228425064,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614697713
    },
    {
        "content": "<p>I don't doubt that, but there's at least 300 lines of other stuff from that PR that you could have in mathlib today while waiting for leanchecker to be fixed</p>",
        "id": 228425648,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614697900
    },
    {
        "content": "<p>This is for lean-liquid, so <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> will know what he wants.</p>",
        "id": 228427163,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1614698433
    },
    {
        "content": "<p>I think it's fine to just try to get this right.</p>",
        "id": 228427311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614698480
    },
    {
        "content": "<p>We have a copy in lean-liquid, and I'll just adapt to whatever ends up in mathlib</p>",
        "id": 228427346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614698496
    },
    {
        "content": "<p>But there is no hurry. So let's just try to sort this out.</p>",
        "id": 228427377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614698511
    },
    {
        "content": "<p>Also, <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> thanks a lot for refactoring this PR!</p>",
        "id": 228427466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614698532
    },
    {
        "content": "<p>This is an impressive bug!  I've tried sorrying out all of the proofs in <code>add_comm_group</code> and then it works.  But even putting back one proof (e.g. just zero_add) causes leanchecker to use up insane amounts of memory.</p>",
        "id": 228427850,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614698676
    },
    {
        "content": "<p>I've taken the liberty of pushing a small fix(?) to make leanchecker happy.</p>",
        "id": 228430713,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614699637
    },
    {
        "content": "<p>Will it fail if we use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_group\">docs#function.injective.add_comm_group</a> to define this instance?</p>",
        "id": 228434062,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1614700735
    },
    {
        "content": "<p>Out of curiosity, I tried <a href=\"https://github.com/ammkrn/nanoda\">nanoda</a> on the commit before Gabriel's fix, but it is giving what seems to be an unrelated error (and a similar error appears when I run <code>nanoda</code> on <code>master</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>expr line 74; Expected a `Sort` term in inductive mod, got App(App(App(Const(Anon :: \"category_theory\" :: \"presieve\", [Param(Anon :: \"v\"), Param(Anon :: \"u\")]), Local(serial : \"149954\", of : Binding { pp_name: Anon :: \"C\", ty: Sort(1 + Param(Anon :: \"u\")), style: Implicit }), Local(serial : \"149960\", of : Binding { pp_name: Anon :: \"_inst_1\", ty: App(Const(Anon :: \"category_theory\" :: \"category\", [Param(Anon :: \"v\"), Param(Anon :: \"u\")]), Local(serial : \"149954\", of : Binding { pp_name: Anon :: \"C\", ty: Sort(1 + Param(Anon :: \"u\")), style: Implicit }), style: InstImplicit }), Local(serial : \"149963\", of : Binding { pp_name: Anon :: \"X\", ty: Local(serial : \"149954\", of : Binding { pp_name: Anon :: \"C\", ty: Sort(1 + Param(Anon :: \"u\")), style: Implicit }, style: Implicit })\n</code></pre></div>\n<p>Going to see if I can get <a href=\"https://github.com/ammkrn/nanoda_lib\"><code>nanoda_lib</code></a> working next.</p>\n<p><strong>edit</strong>: no luck, <code>nanoda_lib</code> panics with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'main' panicked at 'internal error: entered unreachable code: ensur_sort could not produce a sort!', src/tc/infer.rs:190:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n<p>opened an issue: <a href=\"https://github.com/ammkrn/nanoda_lib/issues/1\">https://github.com/ammkrn/nanoda_lib/issues/1</a></p>",
        "id": 228434456,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614700861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236375/near/228434062\">said</a>:</p>\n<blockquote>\n<p>Will it fail if we use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_group\">docs#function.injective.add_comm_group</a> to define this instance?</p>\n</blockquote>\n<p>I suggested essentially this above already, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_group_sub\">docs#function.injective.add_comm_group_sub</a> is preferable</p>",
        "id": 228435238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614701086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.236375/near/228434062\">said</a>:</p>\n<blockquote>\n<p>Will it fail if we use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.injective.add_comm_group\">docs#function.injective.add_comm_group</a> to define this instance?</p>\n</blockquote>\n<p>It's probably fine.  I didn't look very hard into the issue yet.  What really worries me though is that if you replace <code>rw</code> by <code>simp</code>, then leanchecker fails.  Which is to say: maybe another <code>by simp</code> could also fail for the same reason.</p>",
        "id": 228444567,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614704354
    },
    {
        "content": "<p>BTW, trepplein has no problems with this definition.</p>",
        "id": 228445876,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614704764
    },
    {
        "content": "<p>I added some minor workarounds to the simp lemmas so that <code>by simp</code> doesn't crash leanchecker.</p>",
        "id": 228452889,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614707000
    },
    {
        "content": "<p>Thanks a lot for your help <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 228453176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614707098
    },
    {
        "content": "<p>Thanks indeed! Gabriel, do you mind putting some TODO comments near the various workarounds so future readers will be able to see what's going on?</p>",
        "id": 228453761,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1614707259
    },
    {
        "content": "<p>If only I had a good idea of what's going on here...  From what I've observed, the problem seems to occur if there is a term of the form <code>@has_add.add (has_coe_to_fun.F (normed_group_hom V₁ V₂)) pi.has_add x y</code>.  That is, if <code>pi.has_add</code> is used as an instance for a type that is not syntactically a pi. (But this surely can't be the only place we're doing this??!?!)</p>",
        "id": 228454772,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614707594
    },
    {
        "content": "<p>So I've \"fixed\" this by adding some type annotations and double-checking that they have the right effect..</p>",
        "id": 228454883,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614707641
    },
    {
        "content": "<p>Ok, I've added a library note and filed a Lean bug: <a href=\"https://github.com/leanprover-community/lean/issues/543\">https://github.com/leanprover-community/lean/issues/543</a></p>",
        "id": 228456737,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1614708287
    },
    {
        "content": "<p>Let me join the chorus of people thanking you Gabriel. Without people like you these ambitious projects such as this Scholze thing would be much more painful. Projects such as this are designed to make an impact on the research mathematical community so it's important that they succeed.</p>",
        "id": 228460605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614709726
    }
]