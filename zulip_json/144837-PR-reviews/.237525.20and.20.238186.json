[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> I think it makes sense to bring the discussion about ext functors to zulip.</p>",
        "id": 244939030,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625493487
    },
    {
        "content": "<p>Aside: Concerning Bhavik's comment on <a href=\"https://github.com/leanprover-community/mathlib/issues/8186\">#8186</a>, I'm separating the stuff about opposites and linear yoneda right now.</p>",
        "id": 244939312,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625493629
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7525\">#7525</a> looks to me like it has an error in the definition of Ext (coming from confusing C -&gt; D^op and C^op -&gt; D), and <a href=\"https://github.com/leanprover-community/mathlib/issues/8186\">#8186</a> fixes it.</p>",
        "id": 244939504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625493719
    },
    {
        "content": "<p>Yeah, I think that's a good move anyways.</p>",
        "id": 244939509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625493722
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/leanprover-community/mathlib/issues/8186\">#8186</a> has been split up (and I accounted for Kevin's comments in the other PRs as well). </p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8199\">#8199</a> Linear Yoneda</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8202\">#8202</a> Opposite stuff</li>\n</ul>",
        "id": 244942152,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625495045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.237525.20and.20.238186/near/244939504\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7525\">#7525</a> looks to me like it has an error in the definition of Ext (coming from confusing C -&gt; D^op and C^op -&gt; D), and <a href=\"https://github.com/leanprover-community/mathlib/issues/8186\">#8186</a> fixes it.</p>\n</blockquote>\n<p>I think the <code>[enough_projectives Cᵒᵖ]</code> is a pretty good hint that there is an issue with the definition from <a href=\"https://github.com/leanprover-community/mathlib/issues/7525\">#7525</a></p>",
        "id": 244942362,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625495170
    },
    {
        "content": "<p>You can define Ext by deriving in either variable so <code>[enough_projectives Cᵒᵖ]</code> is going to be a sufficient assumption</p>",
        "id": 244943157,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625495568
    },
    {
        "content": "<p>But with <code>[enough_projectives Cᵒᵖ]</code> AKA a nonexistent <code>[enough_injectives C]</code> you would have to right derive the <code>Y</code> in <code>Hom(X,Y)</code>.</p>",
        "id": 244943249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625495627
    },
    {
        "content": "<p>I added a sanity check to <code>ext.lean</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/7525\">#7525</a> showing that the definition is incorrect. This definition would say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>x</mi><msup><mi>t</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">Ext^{n+1}(X,Y) = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> whenever <code>X Y : C</code> with <code>X</code> an injective object (formulated in lean as saying that <code>X : C\\op</code> is projective).</p>",
        "id": 244957277,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625504492
    },
    {
        "content": "<p>I'll add an analogous sanity check to <a href=\"https://github.com/leanprover-community/mathlib/issues/8186\">#8186</a></p>",
        "id": 244957374,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625504553
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/e0207cfe0aeffa22761f8f62cbc3d4269cb1cbfb/src/category_theory/abelian/ext.lean#L65\">https://github.com/leanprover-community/mathlib/blob/e0207cfe0aeffa22761f8f62cbc3d4269cb1cbfb/src/category_theory/abelian/ext.lean#L65</a></p>",
        "id": 244963276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625509543
    },
    {
        "content": "<p>I'm fairly confident now that <code>ext-fix</code> has the right definition.</p>",
        "id": 244963342,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625509586
    },
    {
        "content": "<p>And I've now merged all the other changes into <a href=\"https://github.com/leanprover-community/mathlib/issues/8186\">#8186</a> <br>\n(The new CI runners are FAST!)</p>",
        "id": 244964086,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625510300
    },
    {
        "content": "<p>I agree that this is a great test theorem :-)</p>",
        "id": 244966781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625512627
    },
    {
        "content": "<p>Thanks very much for catching and fixing this, <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>! I was 60km from the nearest internet during the time this discussion happened. :-)</p>",
        "id": 246300172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1626490404
    }
]