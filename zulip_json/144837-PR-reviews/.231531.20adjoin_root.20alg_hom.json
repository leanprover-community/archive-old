[
    {
        "content": "<p>I just posted a slightly long comment on Github:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/1531/files#diff-8def6409d0ea0f590a9bda775a8660e8R124\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1531/files#diff-8def6409d0ea0f590a9bda775a8660e8R124\">https://github.com/leanprover-community/mathlib/pull/1531/files#diff-8def6409d0ea0f590a9bda775a8660e8R124</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">amk</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">adjoin_root</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>Here is what I wrote.</p>\n<blockquote>\n<p>We might need to think a bit more about how to handle \"large\" amounts of algebras. Because <code>adjoin_root f</code> is an algebra over <code>polynomial α</code> which is an algebra over <code>α</code> which is an algebra over <code>R</code>. (Lean is not aware of all of these.) The fact that <code>amk</code> is an algebra hom over <code>R</code> is just \"forgetting\" that it is an algebra hom over <code>polynomial α</code>. At the moment we don't have a good mechanism for \"forgetting scalars\" in an algebra hom. I have no idea how to handle this in a elegant manner. @rwbarton Do you have any ideas?</p>\n</blockquote>",
        "id": 177971239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570856687
    },
    {
        "content": "<p>I hoped that it would still work because <code>alpha</code> is an algebra over itself.</p>",
        "id": 177978817,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570870470
    },
    {
        "content": "<p>My point is: If I have <code>algebra R A</code> and <code>algebra A B</code> and <code>algebra A C</code> and an <code>B →ₐ[A] C</code>, how do we turn this into a <code>B →ₐ[R] C</code>? This is something that we'll need all over the place, and also something that could be applied here a lot. I haven't thought through the details, but I fear there are some hazards here...</p>",
        "id": 177979243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570871231
    },
    {
        "content": "<p>Another way of doing it might be to have a function that takes an <code>alg_hom</code> and returns an <code>alg_hom</code> over a smaller field.</p>",
        "id": 177979255,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570871257
    },
    {
        "content": "<p>Right... we use such a function all the time in mathematics. Except that it is completely invisible</p>",
        "id": 177979310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570871311
    },
    {
        "content": "<p>At the moment <em>I</em> don't see how to make readable statements in Lean.</p>",
        "id": 177979316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570871338
    },
    {
        "content": "<p>I think it has to be a function with bundled homs. You could make the notation short, like <code>ϕ.F</code> (for forgetful function). I don't know whether this function needs <code>R</code> as explicit argument, or whether Lean can figure it out from context.</p>",
        "id": 177996965,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1570899071
    }
]