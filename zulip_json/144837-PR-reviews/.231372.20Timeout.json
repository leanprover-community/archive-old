[
    {
        "content": "<p>I was splitting up a file in this <a href=\"https://github.com/leanprover-community/mathlib/pull/1372\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1372\">PR</a> but get a <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/579466607\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/579466607\">timeout in travis</a>. I am quite lost what's going on, so any help is appreciated.</p>",
        "id": 174704630,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567417997
    },
    {
        "content": "<p>Since when do we have a 90 minute limit on Travis? I thought it was 45 minutes</p>",
        "id": 174704924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567418344
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> (and whoever else knows how to deal with timeouts), what's the best approach for me to figure out why Travis is still timing out for this PR? Do I need to run the compile command on my PC and just wait for 90 minutes and see where it gets stuck? My laptop is quite old (+6 years) and hence has difficulties compiling mathlib all at once.</p>",
        "id": 174877394,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567601098
    },
    {
        "content": "<p>Timeouts are annoying to track. I had to track down some timeouts in <a href=\"https://github.com/leanprover-community/mathlib/issues/1319\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1319\">#1319</a>, and what I indeed did was compile the whole library locally. However, Lean doesn't print an error message when it reaches a timeout, and it still created the olean file (perhaps the command-line Lean has a much higher timeout treshhold?), so I looked at which olean files took longest to create. Now I realize I could have used <code>lean --make -T 100000</code> to set a timeout limit, which should probably work.</p>",
        "id": 174888733,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567608387
    },
    {
        "content": "<p>That said, I'm worried whether there could be something wrong with the Travis setup. PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1375\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1375\">#1375</a> fails, but it is hard to imagine that adding a single lemma (that is never used!) causes a timeout somewhere (the lemma itself compiles fine on my laptop)</p>",
        "id": 174888799,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567608452
    },
    {
        "content": "<p>On thing that should be mentioned is that travis does not provide a consistent computing power for jobs; sometimes when you just restart the build, it just works, because your job got more CPU. Since yours has failed over and over, that probably isn't the case?</p>",
        "id": 174889221,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567608692
    },
    {
        "content": "<blockquote>\n<p>That said, I'm worried whether there could be something wrong with the Travis setup. PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1375\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1375\">#1375</a> fails, but it is hard to imagine that adding a single lemma (that is never used!) causes a timeout somewhere (the lemma itself compiles fine on my laptop)</p>\n</blockquote>\n<p>That's interesting. I have the strong feeling that there is something wrong in the setup and not in the commit. I also did not add or change any lemmas (I just moved an removed some lemmas in my commit).</p>",
        "id": 174891943,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567610261
    },
    {
        "content": "<blockquote>\n<p>On thing that should be mentioned is that travis does not provide a consistent computing power for jobs; sometimes when you just restart the build, it just works, because your job got more CPU. Since yours has failed over and over, that probably isn't the case?</p>\n</blockquote>\n<p>Yeah, it did restart multiple times already</p>",
        "id": 174891973,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567610279
    },
    {
        "content": "<p>Interestingly, <a href=\"https://github.com/leanprover-community/mathlib/issues/1375\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1375\">#1375</a> did compile fine after I merged it into master. I tried merging your PR into master, to see if that changes anything.</p>",
        "id": 174914807,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1567625480
    },
    {
        "content": "<p>Seems not to have. I nuked the travis cache for <a href=\"https://github.com/leanprover-community/mathlib/issues/1372\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1372\">#1372</a>, and merged master again.</p>",
        "id": 174932481,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567640160
    },
    {
        "content": "<p>I just finished building this branch locally, and it did take an absurd amount of time. It looks like there are timeouts in at least the following:</p>\n<ul>\n<li><code>data/nat/choose.lean</code> at <code>add_pow</code></li>\n<li><code>computability/partrec.lean</code> at <code>partrec</code></li>\n<li><code>computability/partrec_code.lean</code> at <code>eval</code></li>\n<li><code>computability/halting.lean</code> at <code>vec</code></li>\n</ul>\n<p>These were just the files where I happened to notice <code>lean --make</code> get stuck for a very long time.</p>\n<p>How hard would it be to write a script that recorded compile times or some other related profiling? Something like that seems like it would be really useful on travis.</p>",
        "id": 174949257,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1567666166
    },
    {
        "content": "<p>The computability files have a few long proofs, but they haven't changed in a long while and they don't use any fancy tactics so I don't see how any recent change could have affected them</p>",
        "id": 174950999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567668379
    },
    {
        "content": "<p>Are you running with a shortened timeout?</p>",
        "id": 174951029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567668429
    },
    {
        "content": "<p>computability/partrec.lean at partrec is talking about an inductive definition, so that must be lean's autogenerated theorems</p>",
        "id": 174951126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567668497
    },
    {
        "content": "<p>eval is a big recursive definition, not even a theorem, and similarly with vec</p>",
        "id": 174951136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567668527
    },
    {
        "content": "<p>The time limit is set to <code>100000</code> in the settings.</p>\n<p>The timeouts in <code>data.nat.choose</code> go away if I change all the <code>choose</code> to <code>nat.choose</code>.  I also don't see why this would've changed.</p>",
        "id": 174951156,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1567668580
    },
    {
        "content": "<p>In fact I think those names are not accurate, i.e. the name that you see might not actually be what takes the time. Lean is multithreaded so it's probably hard to get that right</p>",
        "id": 174951161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567668586
    },
    {
        "content": "<p>it might just be a cold cache or something</p>",
        "id": 174951221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567668632
    },
    {
        "content": "<p>Yeah, I opened those 4 files in VS Code afterwards to check.</p>",
        "id": 174951228,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1567668647
    },
    {
        "content": "<p><code>(deterministic) timeout</code> doesn't live up to its name</p>",
        "id": 174951244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567668667
    },
    {
        "content": "<p>I think command line lean runs with infinite timeout</p>",
        "id": 174951269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567668700
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  - sadly, it failed again.<br>\nThanks for running it locally <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> ! As said, I have difficulties compiling everything on my computer. I agree, it would be really great to see in Travis where it got stuck/have some sort of table of compilation times for each theorem, but I guess, according to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , that's not an easy undertaking.</p>",
        "id": 174964047,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567682623
    },
    {
        "content": "<p>I created a <a href=\"https://github.com/leanprover-community/mathlib/pull/1403\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1403\">testing PR</a> to see if I can detect where and why this PR times out.</p>",
        "id": 175043899,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567757201
    },
    {
        "content": "<p>So apparently, changing the import from <code>data.rat</code> to <code>data.rat.order</code> in <code>tactic.norm_num</code> (see <a href=\"https://github.com/leanprover-community/mathlib/pull/1403/files\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1403/files\">here</a>) makes travis time out (see <a href=\"https://travis-ci.org/leanprover-community/mathlib/jobs/581560818\" target=\"_blank\" title=\"https://travis-ci.org/leanprover-community/mathlib/jobs/581560818\">here</a>). But why? <code>data.rat</code> imports <code>data.rat.order</code>. So to me it seems that it should not make any difference (or it should even be faster)(?).</p>",
        "id": 175065384,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567777387
    },
    {
        "content": "<p>Just a total guess, but does <code>data.rat</code> have things like typeclass short-circuits to make typeclass resolution (potentially much) faster?</p>",
        "id": 175067756,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567778853
    },
    {
        "content": "<p>By which I mean some technically-unnecessary instance declarations which make life easier for lean</p>",
        "id": 175067843,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567778886
    },
    {
        "content": "<p>My guess is that something now no longer imports <code>rat.cast</code> that needs it, and it timed out trying to coerce a <code>rat</code> to a <code>real</code></p>",
        "id": 175068100,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567779042
    },
    {
        "content": "<p>Chris's guess sounds very plausible. Broken coercions are a very common cause of timeout.</p>",
        "id": 175068176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567779097
    },
    {
        "content": "<p>Hmm, that sounds reasonable. I'll give it a shot.</p>",
        "id": 175068337,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567779187
    },
    {
        "content": "<p>This works now (I kept the <code>data.rat.cast</code> import in <code>norm_num</code>). Thanks Chris :)</p>",
        "id": 175079381,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1567786464
    }
]