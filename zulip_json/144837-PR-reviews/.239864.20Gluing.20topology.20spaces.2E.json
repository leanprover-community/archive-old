[
    {
        "content": "<p>This has been sitting in the queue for a while now, and it is blocking quite a lot of follow ups.<br>\nIt would be great If someone can check on it.<br>\n(Pinging <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  since you had reviewed it before)</p>",
        "id": 266775757,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641279770
    },
    {
        "content": "<p>IMHO, both <code>category_theory.glue_data</code> and <code>topology/gluing</code> need better module docstrings. BTW, why <code>V</code> is defined as a function on <code>J × J</code>, not <code>J → J → C</code>?</p>",
        "id": 266844134,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641320102
    },
    {
        "content": "<p>E.g., it would be nice to explain in the docstring the meaning of <code>U</code>, <code>V</code>, etc in the case when we start with a set <code>X</code> and its open covering.</p>",
        "id": 266844286,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641320196
    },
    {
        "content": "<p>Also, I think that we should have a definition <code>Top.glue_data.of_open_covering</code> and a theorem that says that the round-trip results in a space homeomorphic to the original one.</p>",
        "id": 266844455,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641320297
    },
    {
        "content": "<p>Also, I would prefer to see topology-specific terms \"(bundled) topological space\", \"homeomorphism\" instead of generic \"object\", \"isomorphism\" but it's a matter of taste.</p>",
        "id": 266844583,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641320378
    },
    {
        "content": "<p>The picture I have in mind when someone says \"gluing topology spaces\" is the following (and it seems that your construction is more general): we have a family of topological spaces <code>U i</code>; for each pair <code>(i, j)</code> we have a set in <code>U i</code> and a set in <code>U j</code> that are identified via some map; if <code>i = j</code>, then this map is the identity map, the construction is symmetric in <code>i</code>, <code>j</code>, and we have the cocycle condition. It seems that <code>V i j</code> is an abstract topological space that is identified both with a set in <code>U i</code> and with a set in <code>V i</code> via <code>f i j</code> and <code>f j i</code>, respectively. Instead of saying that <code>V i j</code> is isomorphic to <code>V j i</code>, you introduce additional maps <code>t'</code>. It would be nice to have an explanation (and a constructor in the case <code>V : sym2 J → C</code> and/or in the case <code>V i j ≅ V j i</code>).</p>",
        "id": 266846400,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641321413
    },
    {
        "content": "<p>The existence of such a map <code>t'</code> does not really loosen the condition that <code>V i j ≅ V j i</code>. It's just that we can infer <code>V i j ≅ V j i</code> from the<br>\ndata given so that we does not need to provide it explicitly.<br>\nThe <code>t'</code> is merely a translation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>V</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>∩</mo><msub><mi>V</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><mo>⊆</mo><msubsup><mi>t</mi><mrow><mi>i</mi><mi>j</mi></mrow><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mo stretchy=\"false\">(</mo><msub><mi>V</mi><mrow><mi>j</mi><mi>i</mi></mrow></msub><mo>∩</mo><msub><mi>V</mi><mrow><mi>j</mi><mi>k</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">V_{ij} \\cap V_{ik} \\subseteq t _{ij}^{-1}(V_{ji} \\cap V_{jk})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">ij</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">ik</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2672em;vertical-align:-0.413em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8542em;\"><span style=\"top:-2.4231em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">ij</span></span></span></span><span style=\"top:-3.1031em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.413em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ji</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∩</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">jk</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> into a more categorical language.<br>\nAnd I should probably say this in the doc string.</p>",
        "id": 266849316,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641322963
    },
    {
        "content": "<p>I've added a constructor that is less categorically flavoured and provided the \"gluing open subsets\" stuff.<br>\nI also added some more clarifications in the docs but I'm not sure if that is enough or not.</p>",
        "id": 266952242,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641398044
    },
    {
        "content": "<p>Does anyone want to give this a final look before I kick this on the queue?<br>\nThere were quite some changes since it was delegated.<br>\nSpecifically, I added a new file to contain the <code>elementwise</code> lemmas to fix the lint error.<br>\nAs a sidenote, does <code>local attribute [reassoc]</code> do the same thing as <code>attribute [reassoc]</code>?<br>\nIf so, should we add a linter to forbid the former? (same for <code>elementwise</code>).</p>",
        "id": 267053767,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641471072
    },
    {
        "content": "<p><code>local attribute [x]</code> only adds the attribute to <code>x</code> for that file, so if other files import the file, they won't get the attribute.</p>",
        "id": 267053833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641471120
    },
    {
        "content": "<p>Adding the attribute <code>reassoc</code> to a lemma generates a new simp lemma, but that lemma does not seem to be private or local, and it caused a naming clash when the linter imported <code>all.lean</code>.</p>",
        "id": 267053971,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641471226
    },
    {
        "content": "<p>Oh of course! So specific to <code>reassoc</code> the question is interesting. Sorry, I'd missed your point.</p>",
        "id": 267054432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641471551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I guess this is a question for you guys <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 267065742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641478913
    },
    {
        "content": "<p>Yes, I agree it would make sense if <code>local attribute [reassoc]</code> generated a private (or at least non-global) lemma.  I don't think we have a function to add private definitions though (so we'd need to make a name ourselves).</p>",
        "id": 267066314,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641479224
    },
    {
        "content": "<p>BTW, you can also write <code>simp [reassoc_of my_lemma]</code> if you only need it once or twice.</p>",
        "id": 267066458,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641479297
    }
]