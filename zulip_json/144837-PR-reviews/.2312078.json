[
    {
        "content": "<p>I'm getting deterministic timeouts from <code>has_deriv_at_interval_left_endpoint_of_tendsto_deriv</code> and <code>has_deriv_at_interval_right_endpoint_of_tendsto_deriv</code>, but I'm not really sure why (other than these proofs are really slow on master anyway and my changes must have just pushed it over the edge).</p>",
        "id": 274062821,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1646354497
    },
    {
        "content": "<p>these are in <code>analysis/calculus/extend_deriv</code></p>",
        "id": 274062864,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1646354522
    },
    {
        "content": "<p>Anybody else want to have a look?</p>",
        "id": 277469053,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1648842272
    },
    {
        "content": "<p>I suggested a tiny improvement using a trick that is good to know anyway</p>",
        "id": 277470639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648843218
    },
    {
        "content": "<p>I just fixed a deterministic timeout in the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.continuous_det\">docs#continuous_linear_map.continuous_det</a> for this PR. However, it took me an hour of trying various things until I stumbled upon something that I don't at all understand why it worked. In particular, I changed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.normed_space</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">matrix.normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Above 𝕜 is a non-discrete normed field and <code>s : finset E</code> where <code>E</code> is some type. I tried tons of things before this (including tracing the class instances on the master branch and shoving all of the results in explicitly, to no avail). What I find mysterious is that the change I made doesn't seem to provide Lean with any additional information (e.g., type class instances), and yet deleting the expected type was somehow key. For example, not even the following worked.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">matrix.normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>Can someone please explain to me what's going on?</p>",
        "id": 277970389,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649214460
    },
    {
        "content": "<p>And now there's another timeout. <span aria-label=\"very angry\" class=\"emoji emoji-1f621\" role=\"img\" title=\"very angry\">:very_angry:</span> I don't understand. I didn't even see anything about bornology when I traced the instances on this branch, so I don't know why this PR would be causing these problems.</p>",
        "id": 277970870,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649215000
    },
    {
        "content": "<p>Apparently it's having trouble finding <code>matrix.semi_normed_group</code>. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">matrix.semi_normed_group</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.normed_space</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 277972774,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1649217345
    },
    {
        "content": "<p>Ah here's the problem: when you give the type <code>normed_space 𝕜 (matrix s s k)</code>, Lean tries to find a <code>semi_normed_group (matrix s s 𝕜)</code> instance, and it finds <code>normed_group.to_semi_normed_group</code> from the <code>normed_group</code> instance you locally define just above. But on the right-hand side, you have <code>matrix.semi_normed_group</code> hardcoded in <code>matrix.normed_space</code>.</p>",
        "id": 277973070,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1649217632
    },
    {
        "content": "<p>Does adding a <code>semi_normed_group</code> letI solve the problem?</p>",
        "id": 277981515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649227804
    },
    {
        "content": "<p>changing the <code>letI</code> on the previous line from <code>normed_group</code> to <code>semi_normed_group</code> fixes the problem. That is,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.semi_normed_group</span><span class=\"o\">,</span>\n<span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.normed_space</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>works. I still don't entirely understand why it has trouble finding the <code>semi_normed_group</code> instance given that it had the <code>normed_group</code> instance. But at this point I have a bigger problem: something in this PR is causing certain type class resolution problems to fail. Now there is a deterministic timeout in <code>number_theory/modular</code></p>",
        "id": 278012349,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649246268
    },
    {
        "content": "<blockquote>\n<p>I still don't entirely understand why it has trouble finding the <code>semi_normed_group</code> instance given that it had the <code>normed_group</code> instance.</p>\n</blockquote>\n<p>Probably because the version it finds via <code>normed_group.to_semi_normed_group</code> doesn't unify in the same way as <code>matrix.semi_normed_group</code></p>",
        "id": 278033522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649256121
    },
    {
        "content": "<blockquote>\n<p>But on the right-hand side, you have <code>matrix.semi_normed_group</code> hardcoded in <code>matrix.normed_space</code>.</p>\n</blockquote>\n<p>Lean knows how to resolve this (it happens all the time with <code>module</code> and <code>ring</code>), but it does seem to be behind many timeouts like these</p>",
        "id": 278033740,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649256211
    },
    {
        "content": "<p>The profiler says that the <code>simp</code>s in <code>number_theory/modular/tendsto_lc_row0</code> are really expensive, changing them to the corresponding <code>simp only [..]</code> version makes it compile way faster on my machine, might be that the more expensive instance finding just gets it barely to timeout.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">tendsto_lc_row0</span> <span class=\"o\">{</span><span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hcd</span> <span class=\"o\">:</span> <span class=\"n\">is_coprime</span> <span class=\"o\">(</span><span class=\"n\">cd</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cd</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">↑ₘ</span><span class=\"n\">g</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">cd</span><span class=\"o\">},</span> <span class=\"n\">lc_row0</span> <span class=\"n\">cd</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span>\n    <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">mB</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span>  <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">):</span><span class=\"n\">ℝ</span><span class=\"o\">)],</span> <span class=\"n\">coe</span> <span class=\"bp\">∘</span> <span class=\"n\">cd</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">hmB</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">mB</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">continuous_pi_iff</span><span class=\"o\">,</span> <span class=\"n\">fin.forall_fin_two</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">continuous_const</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨⟨</span><span class=\"n\">continuous_id</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">cd</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">cd</span> <span class=\"mi\">1</span><span class=\"o\">)⟩⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">filter.tendsto.of_tendsto_comp</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">comap_cocompact</span> <span class=\"n\">hmB</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">SL</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">matrix.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">cocompact_ℝ_to_cofinite_ℤ_matrix</span> <span class=\"o\">:</span>\n    <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">matrix.map</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Coprod_cofinite</span><span class=\"o\">,</span> <span class=\"n\">Coprod_cocompact</span><span class=\"o\">]</span>\n      <span class=\"n\">using</span> <span class=\"n\">tendsto.pi_map_Coprod</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">tendsto.pi_map_Coprod</span>\n        <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">int.tendsto_coe_cofinite</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf₁</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">f₁</span> <span class=\"n\">cofinite</span> <span class=\"o\">(</span><span class=\"n\">cocompact</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">cocompact_ℝ_to_cofinite_ℤ_matrix.comp</span> <span class=\"n\">subtype.coe_injective.tendsto_cofinite</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hf₂</span> <span class=\"o\">:</span> <span class=\"n\">closed_embedding</span> <span class=\"o\">(</span><span class=\"n\">lc_row0_extend</span> <span class=\"n\">hcd</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"n\">lc_row0_extend</span> <span class=\"n\">hcd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_continuous_linear_equiv.to_homeomorph.closed_embedding</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">hf₂.tendsto_cocompact.comp</span> <span class=\"o\">(</span><span class=\"n\">hf₁.comp</span> <span class=\"n\">subtype.coe_injective.tendsto_cofinite</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">fin_cases</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mB</span><span class=\"o\">,</span> <span class=\"n\">mul_vec</span><span class=\"o\">,</span> <span class=\"n\">dot_product</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_two</span><span class=\"o\">,</span> <span class=\"n\">_root_.coe_coe</span><span class=\"o\">,</span> <span class=\"n\">coe_matrix_coe</span><span class=\"o\">,</span> <span class=\"n\">int.coe_cast_ring_hom</span><span class=\"o\">,</span> <span class=\"n\">lc_row0_apply</span><span class=\"o\">,</span>\n  <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">lc_row0_extend_apply</span><span class=\"o\">,</span> <span class=\"n\">linear_map.general_linear_group.coe_fn_general_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"n\">general_linear_group.to_linear_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_plane_conformal_matrix</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_vec_lin_apply</span><span class=\"o\">,</span> <span class=\"n\">cons_val_one</span><span class=\"o\">,</span> <span class=\"n\">head_cons</span><span class=\"o\">]},</span>\n  <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"n\">g.det_coe.symm</span> <span class=\"n\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">f₁</span><span class=\"o\">,</span> <span class=\"n\">mul_vec</span><span class=\"o\">,</span> <span class=\"n\">dot_product</span><span class=\"o\">,</span> <span class=\"n\">fin.sum_univ_two</span><span class=\"o\">,</span> <span class=\"n\">matrix.det_fin_two</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">subtype.coe_mk</span><span class=\"o\">,</span>\n  <span class=\"n\">lc_row0_extend_apply</span><span class=\"o\">,</span> <span class=\"n\">cons_val_zero</span><span class=\"o\">,</span> <span class=\"n\">linear_map.general_linear_group.coe_fn_general_linear_equiv</span><span class=\"o\">,</span>\n  <span class=\"n\">general_linear_group.to_linear_apply</span><span class=\"o\">,</span> <span class=\"n\">coe_plane_conformal_matrix</span><span class=\"o\">,</span> <span class=\"n\">mul_vec_lin_apply</span><span class=\"o\">,</span> <span class=\"n\">cons_val_one</span><span class=\"o\">,</span> <span class=\"n\">head_cons</span><span class=\"o\">,</span>\n  <span class=\"n\">map_apply</span><span class=\"o\">,</span> <span class=\"n\">neg_mul</span><span class=\"o\">,</span> <span class=\"n\">int.cast_sub</span><span class=\"o\">,</span> <span class=\"n\">int.cast_mul</span><span class=\"o\">,</span> <span class=\"n\">neg_sub</span><span class=\"o\">],</span>\n    <span class=\"n\">ring</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 278090262,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1649281347
    },
    {
        "content": "<p>Thanks for this. Those were indeed some costly simps.</p>",
        "id": 278199951,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1649353027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2312078/near/278012349\">said</a>:</p>\n<blockquote>\n<p>changing the <code>letI</code> on the previous line from <code>normed_group</code> to <code>semi_normed_group</code> fixes the problem. That is,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.semi_normed_group</span><span class=\"o\">,</span>\n<span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">s</span> <span class=\"n\">s</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">matrix.normed_space</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>works.</p>\n</blockquote>\n<p>It turns out that removing these lines entirely also works (<a href=\"https://github.com/leanprover-community/mathlib/pull/13491\">#13491</a>), presumably because all that's actually needed is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.topological_space\">docs#matrix.topological_space</a></p>",
        "id": 279242488,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650232676
    },
    {
        "content": "<p>I would swear that didn't work a few weeks ago, but maybe I'm misremembering.</p>",
        "id": 279242883,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650233246
    }
]