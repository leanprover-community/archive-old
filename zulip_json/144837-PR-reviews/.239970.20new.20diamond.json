[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> This PR introduces several non-defeq diamonds, what was it supposed to fix?</p>",
        "id": 259231048,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635337929
    },
    {
        "content": "<p>Can you give an example of a diamond that comes up?</p>",
        "id": 259231639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635338278
    },
    {
        "content": "<p>Oh, I guess <code>encodable (prod unit unit)</code> probably is no-longer defeq via the old and new paths</p>",
        "id": 259231748,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635338333
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9970\">#9970</a></p>",
        "id": 259232170,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635338579
    },
    {
        "content": "<p>(you can also click the arrow in the topic name)</p>",
        "id": 259232249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635338629
    },
    {
        "content": "<p>(not on mobile)</p>",
        "id": 259232329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635338666
    },
    {
        "content": "<p>Surprisingly, even <code>encodable unit</code> is not defeq to the old instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.encodable.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">unique.encodable</span> <span class=\"bp\">=</span> <span class=\"n\">encodable.unit</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 259233104,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635339055
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>The two enumerations of <code>unit</code> are:<br>\n1. <code>some ()</code>, <code>none</code>, <code>none</code>, ...<br>\n2. <code>some ()</code>, <code>some ()</code>, <code>some ()</code>, ...</p>\n</div></div>",
        "id": 259233187,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1635339107
    },
    {
        "content": "<p>Wait, so they're not even propositionally equal?</p>",
        "id": 259233897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635339445
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.encodable.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">unique.encodable</span> <span class=\"bp\">≠</span> <span class=\"n\">encodable.unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">ne_of_apply_ne</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">encodable.decode</span> <span class=\"n\">unit</span> <span class=\"n\">h</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option.some_ne_none</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 259234490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635339727
    },
    {
        "content": "<p>Hmm, sorry for that. I was a bit to quick with merging that. <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> is it ok to make this a <code>def</code> instead of an instance?</p>",
        "id": 259243482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635343413
    },
    {
        "content": "<p>Yes. I'm sorry for forgetting about diamonds.</p>",
        "id": 259251675,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635346443
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/10006\">#10006</a></p>",
        "id": 259252812,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635346848
    }
]