[
    {
        "content": "<p>This PR adds <code>M[X]</code> as module over <code>R[X]</code>. Should we try to merge both constructions into 1 definition? So that we can use <code>polynomial M</code> for both of them? I.e., it becomes a ring if <code>M</code> is a ring.<br>\nCurrently the definition of <code>polynomial R</code> relies on <code>R</code> being a ring. Can we weaken that? Is the refactor worth it?</p>",
        "id": 289949429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658142012
    },
    {
        "content": "<p>Presumably that would mean weakening <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra\">docs#add_monoid_algebra</a> too?</p>",
        "id": 289950212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658142571
    },
    {
        "content": "<p>Hmm; what happens when <code>M = R[X]</code>?</p>",
        "id": 289950322,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658142641
    },
    {
        "content": "<p>Mathematically you get <code>R[X, Y]</code>.</p>",
        "id": 289950410,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658142696
    },
    {
        "content": "<p>This sounds like it touches the same can of worms we kept tripping over for representation theory</p>",
        "id": 289950411,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658142696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2315065.20polynomial.20modules/near/289950410\">said</a>:</p>\n<blockquote>\n<p>Mathematically you get <code>R[X, Y]</code>.</p>\n</blockquote>\n<p>Right, which means that now the action of <code>R[X]</code> on <code>M[X]</code> (<code>M = R[X]</code>) is ambiguous because the variables aren't named</p>",
        "id": 289950508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658142750
    },
    {
        "content": "<p>(currently, the action of <code>R[X][X]</code> on <code>R[X][X][X]</code> is not ambiguous, it always acts on the trailing <code>X</code>s)</p>",
        "id": 289950578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658142811
    },
    {
        "content": "<p><del>Hmm actually I might be wrong</del></p>",
        "id": 289950657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658142845
    },
    {
        "content": "<p>But I think Johan's proposal has <code>R[X]</code> act on <code>M[X]</code> via the action of <code>R</code> on <code>M</code></p>",
        "id": 289951208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658143236
    },
    {
        "content": "<p>Whcih means that <code>R[X][X]</code> acts on <code>R[X][X][X]</code> via the action on the leading <code>X</code>s, and we're in trouble</p>",
        "id": 289951232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658143262
    },
    {
        "content": "<p>(note that we're already in trouble here with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_scalar\">docs#pi.has_scalar</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_scalar'\">docs#pi.has_scalar'</a>, which has the same problem)</p>",
        "id": 289951266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658143286
    },
    {
        "content": "<p>Even mathematically speaking, saying that <code>M[X]</code> as module over <code>R[X]</code> is technically ambiguous: \"everyone\" knows what the action is, but there are situations where you can change the default expectation.</p>\n<p>Isn't it possible to give a default module structure that can be overridden by an explicit one?</p>",
        "id": 289951307,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658143321
    },
    {
        "content": "<p>Yes, to be honest I would not be totally sure what <code>X • mY</code> means, taking the action of <code>R[X]</code> on <code>M[Y]</code> (to avoid confusion).</p>",
        "id": 289951447,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658143407
    },
    {
        "content": "<p>For instance, it is useful to have Laurent polynomials be modules over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span> and over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">[</mo><msup><mi>X</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">R[X^{-1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>.  In unformalized maths, this causes little issues.</p>",
        "id": 289951460,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658143424
    },
    {
        "content": "<p>Riccardo, I agree: in the absence of further hints, I would proceed thinking that the action is the one where \"<code>X</code> acts as <code>Y</code>\", but would be ready to switch to whatever I was told later on!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 289951599,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658143538
    },
    {
        "content": "<p>Yes, if nothing is written I would do the same. But in my brain a module over <code>R[X]</code> is a module over <code>R</code> <em>plus</em> a chosen endomorphism. And it is extremely useful to be able to choose the endomorphism.</p>",
        "id": 289951700,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658143606
    },
    {
        "content": "<p>Isn't it exactly what <span class=\"user-mention\" data-user-id=\"475844\">@Pierre-Alexandre Bazin</span> has been defining recently?</p>",
        "id": 289951741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658143643
    },
    {
        "content": "<p>And, if I'm supposed to switch, I would think that the person who is writing the proof should be in charge of letting me know what I should be doing!  This feels very much like providing the instance explicitly, when it is not the \"obvious\" choice.  The remaining detail seems to be figuring out what is the default choice that requires introducing as few custom implementations as possible.</p>",
        "id": 289951745,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658143646
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> yes, in <a href=\"https://github.com/leanprover-community/mathlib/pull/14666\">#14666</a></p>",
        "id": 289951821,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658143693
    },
    {
        "content": "<p>So isn't the solution to not overload instances but instead use the type synonym coming from <a href=\"https://github.com/leanprover-community/mathlib/pull/14666\">#14666</a>?</p>",
        "id": 289951871,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658143750
    },
    {
        "content": "<p>What's <code>M[X]</code> in the picture implied by 14666?</p>",
        "id": 289952012,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658143836
    },
    {
        "content": "<p><code>M[X]</code> is not directly related to <a href=\"https://github.com/leanprover-community/mathlib/pull/14666\">#14666</a>. In that PR the author considers module over <code>R[X]</code> in general, where the action of <code>X</code> is not specified.</p>",
        "id": 289952148,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658143906
    },
    {
        "content": "<p>And by \"not specified\", you mean \"specified by an endomorphism\", right?</p>",
        "id": 289952379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658143977
    },
    {
        "content": "<p>So the problem is that, since <code>R[X]</code> is an <code>R</code>-algebra, we always have an external multiplication of <code>R</code> on <code>R[X]</code>. In particular <code>R[X]</code> acts on <code>R[X][X]</code>.</p>\n<p>If we define <code>M[X]</code> as a module over <code>S[X]</code> (for an <code>S</code>-module <code>M</code>), then, in the case <code>S = M = R[X]</code>, then we have <em>two</em> actions of <code>R[X]</code> on <code>M[X]</code>, and the two don't agree, right?</p>",
        "id": 289952678,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658144102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2315065.20polynomial.20modules/near/289952379\">said</a>:</p>\n<blockquote>\n<p>And by \"not specified\", you mean \"specified by an endomorphism\", right?</p>\n</blockquote>\n<p>Yes, I mean something not found by TC inference.</p>",
        "id": 289952713,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658144123
    },
    {
        "content": "<p>I'm not sure I understand your point, Riccardo. If the action of <code>R[X]</code> over <code>R[X][X]</code> is ambiguous, the answer is to define a type synonym of <code>R[X][X]</code>, and that's exactly what <a href=\"https://github.com/leanprover-community/mathlib/pull/14666\">#14666</a> does.</p>",
        "id": 289952943,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658144238
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>'s summary</p>",
        "id": 289953185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658144372
    },
    {
        "content": "<p>We are mixing problems I think. <a href=\"https://github.com/leanprover-community/mathlib/pull/14666\">#14666</a> is not that relevant to this discussion. Here we are proposing to define a new object <code>M[X]</code>, for an <code>R</code>-module <code>M</code>, that generalize the definition of polynomial ring, meaning that if <code>M</code> is also a ring you get the usual polynomial ring. In general you get a \"polynomial module\", so you can add stuff but not multiply.</p>",
        "id": 289953212,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658144392
    },
    {
        "content": "<p>And we are wondering whether it should be a module over <code>R[X]</code>.</p>",
        "id": 289953282,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1658144413
    },
    {
        "content": "<p>The object itself is fine, the danger indeed only arises when we give it the <code>R[X]</code> action</p>",
        "id": 289953317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658144427
    },
    {
        "content": "<p>Because presumably we also want it to have the <code>R</code> action</p>",
        "id": 289953364,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658144437
    },
    {
        "content": "<p>If only the addition is needed, you can use <code>ℕ →₀ M</code> instead.<br>\nA type alias is introduced in this PR for <code>ℕ →₀ M</code>to give it a <code>R[X]</code>-module instance, and what I need is this particular instance.<br>\nI think including <code>R</code> in the type alias would solve this diamond?<br>\nIf so, then</p>\n<ul>\n<li><code>R[X]</code> acts on <code>polynomial_module R R[X]</code> as <code>R[Y]</code> acting on <code>R[X][Y]</code></li>\n<li><code>R[X]</code> acts on <code>polynomial_module R[X] R[X]</code> as <code>R[X]</code> acting on <code>R[X][Y]</code> </li>\n<li><code>R[X][X]</code> acts on <code>polynomial_module R[X] R[X]</code> as <code>R[X][Y]</code> acting on itself.</li>\n</ul>",
        "id": 289972803,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658154446
    },
    {
        "content": "<p>That sounds promising</p>",
        "id": 289973188,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658154604
    },
    {
        "content": "<p>Can you elaborate on what the instance arguments look like?</p>",
        "id": 289973315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658154674
    },
    {
        "content": "<p>Do you mean the arguments to <code>polynomial_module</code>?<br>\nIt is <code>(R M : Type*) [comm_ring R] [add_comm_group M] [module R M]</code>.</p>",
        "id": 289974791,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658155322
    },
    {
        "content": "<p>No, I mean the definition of <code>polynomial_module</code> and the statement of <code>polynomial_module.module</code> (no need for its definition)</p>",
        "id": 289975010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658155399
    },
    {
        "content": "<p>The definition is <code>def polynomial_module := ℕ →₀ M</code>.<br>\nThe module instance on <code>polynomial_module</code> are<br>\n<code>instance : module R (polynomial_module R M)</code> and<br>\n<code>instance : module R[X] (polynomial_module R M)</code>.</p>",
        "id": 289975446,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658155563
    },
    {
        "content": "<p>But <code>polynomial_module R M</code> is also a <code>nat</code>-module, right?</p>",
        "id": 289975986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658155790
    },
    {
        "content": "<p>Is <code>polynomial_module R[X] R[X]</code> an <code>R</code> module? You don't seem to include that</p>",
        "id": 289976104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658155823
    },
    {
        "content": "<blockquote>\n<p>Is <code>polynomial_module R[X] R[X]</code> an <code>R</code> module?</p>\n</blockquote>\n<p>I don't think so?</p>",
        "id": 289976263,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658155900
    },
    {
        "content": "<blockquote>\n<p>But <code>polynomial_module R M</code> is also a <code>nat</code>-module</p>\n</blockquote>\n<p>Does every <code>add_comm_group</code> automatically get this? I don't think this would cause a diamond though.</p>",
        "id": 289976448,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658155973
    },
    {
        "content": "<p>Is this rule safe?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">polynomial_module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That forces the inherited actions to factor through S, which at least prevents inheriting a <code>R[X]</code>- action</p>",
        "id": 289976965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658156198
    },
    {
        "content": "<p>But also means you get a <code>module R (polynomial_module R[X] R[X])</code> instance which is probably a good thing</p>",
        "id": 289977151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658156283
    },
    {
        "content": "<p>I think it is safe. Though I would probably never use <code>polynomial_module R[X] R[X]</code>, I suppose there is also no harm in generalizing.</p>",
        "id": 289978181,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1658156693
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 291791337,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1659492000
    },
    {
        "content": "<p>Could someone please put this back on the bors queue?</p>",
        "id": 293765332,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1660670706
    },
    {
        "content": "<p>done</p>",
        "id": 293839106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660715703
    }
]