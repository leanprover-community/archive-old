[
    {
        "content": "<p>In this PR I define <code>lp E p</code> to be the subgroup of <code>Π i, E i</code> with finite lp norm, and prove that if <code>[fact (1 ≤ p)]</code> it is a <code>normed_group</code>.  In writing further code involving this construction, I realised there's a problem:  <code>lp E p</code> is for some reason inheriting the pi topology of <code>Π i, E i</code>, rather than (as I would desire) being topology-less without <code>[fact (1 ≤ p)]</code>, and inheriting the normed space topology if <code>[fact (1 ≤ p)]</code> is assumed.  You can check this by inspecting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">lp</span> <span class=\"n\">E</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>in the file.</p>",
        "id": 266127027,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640551736
    },
    {
        "content": "<p>I have thought of one fix, which is to make <code>lp_aux</code> the add_subgroup and then <code>lp</code> a type synonym which inherits certain instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lp_aux</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[derive add_comm_group]</span> <span class=\"kd\">def</span> <span class=\"n\">lp</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"n\">lp_aux</span> <span class=\"n\">E</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">lp</span> <span class=\"n\">E</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">coe_subtype</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">is_empty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"o\">(</span><span class=\"n\">lp</span> <span class=\"n\">E</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">set.subsingleton_coe_of_subsingleton</span>\n</code></pre></div>",
        "id": 266127029,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640551746
    },
    {
        "content": "<p>This works throughout, with one unfortunate exception: one can no longer easily compare membership in different <code>lp</code> spaces, i.e. the following no longer typechecks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">monotone</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lp</span> <span class=\"n\">E</span> <span class=\"n\">q</span> <span class=\"bp\">≤</span> <span class=\"n\">lp</span> <span class=\"n\">E</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 266127083,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640551820
    },
    {
        "content": "<p>So I'd be curious to hear other ideas!</p>",
        "id": 266127093,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640551839
    },
    {
        "content": "<p><span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> I found a second method:  make a type synonym for <code>Π i, E i</code> rather than for <code>lp E p</code> itself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive add_comm_group]</span> <span class=\"kd\">def</span> <span class=\"n\">pre_lp</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">is_empty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"o\">(</span><span class=\"n\">pre_lp</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pi.unique_of_is_empty</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lp</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"o\">(</span><span class=\"n\">pre_lp</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">lp</span> <span class=\"n\">E</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">coe_subtype</span>\n</code></pre></div>",
        "id": 266128031,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640553253
    },
    {
        "content": "<p>This allows <code>lp E q</code> and <code>lp E p</code> to be compared, albeit as subgroups of this stupid <code>pre_lp</code> auxiliary type.</p>\n<p>I'll welcome comments on which method is preferable.</p>",
        "id": 266128104,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640553366
    },
    {
        "content": "<p>The second one looks much better!</p>",
        "id": 266128520,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640554063
    },
    {
        "content": "<p>although I don't know the details of this specific situation.</p>",
        "id": 266128524,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640554079
    },
    {
        "content": "<p>Innocent naming remark: Is there anyone else who is irrationally bothered by the fact that there is a variablish <code>p</code> in the names <code>lp</code>, <code>Lp</code>, <code>padic_int</code>, etc?<br>\nWould it be very bad to call these spaces <code>L</code> and <code>l</code> (or <code>ℓ</code>)? Maybe in the <code>analysis</code> namespace?</p>",
        "id": 266148098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640583750
    }
]