[
    {
        "content": "<p>I want to bring this PR to the attention of the community. Feedback on the design choices very welcome. The main new definition is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">no_zero_smul_divisors</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_smul_eq_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">},</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Some random thought/questions that popped into my mind:</p>\n<ol>\n<li>Should we have a multiplicative version? For use with group actions... Can/should this be phrased in a way that it includes free group actions?</li>\n<li>In a different direction, this definition is close to a definition of <code>torsion_free</code>. But the usual definition of <code>torsion_free</code> depends on <code>non_zero_divisors</code>. How do we envision those three classes to play together/depend/be implemented? I mean the triple <code>no_zero_divisors</code>, <code>no_zero_smul_divisors</code> and <code>torsion_free</code>.</li>\n</ol>",
        "id": 226651492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613566514
    },
    {
        "content": "<p>Hmmm, I retract the comment about free group actions. It seems related, but it doesn't fit exactly.</p>",
        "id": 226652381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613567016
    },
    {
        "content": "<p>My answer to 1 is \"yes, but probably as a follow-up\"</p>",
        "id": 226653384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613567584
    },
    {
        "content": "<p>I think we need some kind of <code>mul_action_with_zero</code></p>",
        "id": 226653432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613567608
    },
    {
        "content": "<p>A related, though not entirely pertinent comment: I often found myself wanting a <code>non_zero_divisor</code> predicate on elements of a ring, but I could not find it: is it there?</p>\n<p>I think that allowing individual elements of a ring to be non-zero divisors, instead of all (non-zero) elements, is really the property that is used most often.</p>",
        "id": 226653950,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613567883
    },
    {
        "content": "<p>We already have <code>distrib_mul_action</code> or something like that (<span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>). I think that's meant to cover that use case.</p>",
        "id": 226654007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613567905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I don't think it's in mathlib, and it should definitely be (-;</p>",
        "id": 226654096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613567955
    },
    {
        "content": "<p>Ok, I also hope that having elements that are <code>non_zero_divisors</code> will unlock lots of results in commutative algebra having to do with localizations, (Krull) dimension, regular sequences.  In all these situations, you really cannot get integral domains all the time, even if you start with, and only care about,  integral domains.</p>",
        "id": 226654356,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613568089
    }
]