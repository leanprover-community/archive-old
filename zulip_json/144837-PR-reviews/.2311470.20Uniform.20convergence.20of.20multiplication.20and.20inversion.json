[
    {
        "content": "<p>I'm trying to decide about a typeclass diamond that has come up in this PR.</p>",
        "id": 269239802,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643108100
    },
    {
        "content": "<p>In general for a topological group, there are two uniformities (left and right) but when the group is commutative, these coincide. This PR proves some useful facts about the uniformity in the commutative case. However it has to step around a diamond:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.uniform_group</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_group</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">topological_group</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">oh_dear</span> <span class=\"o\">:</span>\n  <span class=\"n\">to_uniform_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">prod.uniform_space</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">to_uniform_space</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_uniform_space</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- Fails</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">topological_group</span>\n</code></pre></div>",
        "id": 269239882,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643108156
    },
    {
        "content": "<p>Here is the solution: <a href=\"https://github.com/leanprover-community/mathlib/pull/11470/files#diff-9f86ab67a896f479d352b91a16faebb3f92d52dccd3b6b9e21f5c97d4eb4a526R254\">https://github.com/leanprover-community/mathlib/pull/11470/files#diff-9f86ab67a896f479d352b91a16faebb3f92d52dccd3b6b9e21f5c97d4eb4a526R254</a></p>",
        "id": 269240005,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643108217
    },
    {
        "content": "<p>I think this is probably fine, especially because the diamond only exists because we have temporarily done:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">topological_group.to_uniform_space</span>\n</code></pre></div>",
        "id": 269240172,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643108303
    },
    {
        "content": "<p>What if you held the two uniformities inside <code>topological_group</code>?</p>",
        "id": 269240248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643108352
    },
    {
        "content": "<p>Yes, I'm getting to that :-)</p>",
        "id": 269240262,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643108361
    },
    {
        "content": "<p>The real solution here is to bundle the uniform structure(s) up with the group and I see that in fact we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_add_group\">docs#uniform_add_group</a></p>",
        "id": 269240267,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643108367
    },
    {
        "content": "<p>But there are still two issues:</p>\n<ol>\n<li><a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_add_group\">docs#uniform_add_group</a> is additive-only</li>\n<li>Even a multiplicative version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/uniform_add_group\">docs#uniform_add_group</a> would forget the commutativity</li>\n</ol>",
        "id": 269240517,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643108458
    },
    {
        "content": "<p>Personally I think we can merge this PR with its solution as is, and address these issues later but before deciding I wanted to get some opinion(s).</p>",
        "id": 269240705,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643108555
    },
    {
        "content": "<p>There's more I could say about resolving these issues (e.g., as Yaël suggests bundling up both uniform structures with all <code>topological_groups</code>, and also catering for the Roelcke uniformity) but for now I'm specifically interested in whether others agree it's OK to merge this PR.</p>",
        "id": 269241730,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643109146
    },
    {
        "content": "<p>I commented on the PR. It shouldn't be merged, it's unfortunately based on a misunderstanding of our setup (which is probably poorly explained).</p>",
        "id": 269245359,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643111621
    },
    {
        "content": "<p>And indeed the module docstring of that file is a shame.</p>",
        "id": 269245418,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643111645
    },
    {
        "content": "<p>Thanks Patrick. Of course I appreciate the point about using the assumption <code>uniform_add_group</code>. Do really already we have the fact that commutativity implies uniform continuity (of multiplicaiton / inversion)?</p>",
        "id": 269245875,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643111973
    },
    {
        "content": "<p>Also, will you need a <code>group_with_zero</code> version?</p>",
        "id": 269246041,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643112021
    },
    {
        "content": "<p>Oliver: Yes of course, how could we do anything without this? But this is spelled \"uniform continuity of addition/negation\" because it's the additive version.</p>",
        "id": 269246096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643112039
    },
    {
        "content": "<p>To be clear, I'm not hung up on the multiplication / addition point.</p>",
        "id": 269246162,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643112077
    },
    {
        "content": "<p>It's that when using <code>uniform_add_group</code> you just give yourself uniform continuity from the beginning.</p>",
        "id": 269246184,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643112092
    },
    {
        "content": "<p>Yaël, what is the statement you have in mind.</p>",
        "id": 269246188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643112096
    },
    {
        "content": "<p>But this actually follows from commutativity. I wouldn't be very surprised if we have this fact but I couldn't find it.</p>",
        "id": 269246217,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643112115
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">uniform_group_with_zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">uniform_continuous_div</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">/</span> <span class=\"n\">p.2</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 269246322,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643112155
    },
    {
        "content": "<p>Oliver: we certainly have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_add_group_is_uniform\">docs#topological_add_group_is_uniform</a> which states that if you start with a commutative topological group and endow it with the uniform structure you have in mind then you get a <code>uniform_add_group</code>, which is exactly the mathematical content of that PR, but packaged in a convenient way.</p>",
        "id": 269246531,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643112256
    },
    {
        "content": "<p>That's it. Thank you!</p>",
        "id": 269246560,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643112272
    },
    {
        "content": "<p>OK unfortunately this PR is doomed.</p>",
        "id": 269246573,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643112279
    },
    {
        "content": "<p>You can still turn it into something useful by having the multiplicative version and <code>to_additive</code> attributes.</p>",
        "id": 269246630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643112316
    },
    {
        "content": "<p>Yaël, what is the example you have in mind?</p>",
        "id": 269246652,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643112345
    },
    {
        "content": "<p>I have none. It's just that we usually need the full trinity of <code>add_monoid</code>/<code>monoid</code>/<code>monoid_with_zero</code>.</p>",
        "id": 269248483,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643113381
    }
]