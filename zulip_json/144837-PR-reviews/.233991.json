[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>, just wanted to check I correctly understand one of your comments.  You say</p>\n<blockquote>\n<p>Wouldn't it make sense to have a typeclass for <code>ord_connected</code> subsets (instead of a definition), instances that all kinds of intervals are <code>ord_connected</code>, and then give <code>subtype_densely_ordered</code> as an instance, that would cover at once all intervals?</p>\n</blockquote>\n<p>Is this proposing to make something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">ord_connecteds</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">ord_connected</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>similar to how one goes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open\">docs#is_open</a> to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.opens\">docs#topological_space.opens</a> ?</p>",
        "id": 209224123,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599396455
    },
    {
        "content": "<p>No, I mean adding the attribute <code>attribute [class] ord_connected</code> just after the definition of <code>ord_connected</code>, and register all the lemmas such as <code>ord_connected_Ici</code> as instances, and then putting <code>ord_connected</code> as a typeclass assumption in some instances.</p>",
        "id": 209224490,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1599396997
    },
    {
        "content": "<p>OK, this makes sense!  Should there be other lemmas that I also rewrite to use typeclass inference?  Like this one perhaps?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">ord_connected</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">ord_connected</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ord_connected</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">hs</span> <span class=\"n\">hy</span> <span class=\"n\">hx</span> <span class=\"bp\">⟨</span><span class=\"n\">hz</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n</code></pre></div>",
        "id": 209224921,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599397742
    },
    {
        "content": "<p>I am not sure about this one (I mean, I really don't know). When the conclusion is an instance and you want it to apply to all intervals, then the assumption should clearly be in instance form. In this specific case, the conclusion can be an instance or not, but since you don't want to use this for all intervals I don't think I would change it to instance form.</p>",
        "id": 209225480,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1599398711
    },
    {
        "content": "<p>Thank you, that makes sense.  Another question, sorry.  How do I ensure access to the property of order-connectedness within a proof, if this is given as a typeclass assumption rather than a named hypothesis? I have seen this done in other files (such as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nontrivial\">docs#nontrivial</a>) by giving the definition as something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">ord_connected</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">contains_full_intervals</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">⦃</span><span class=\"n\">y</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(rather than the current pattern</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">ord_connected</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">⦃</span><span class=\"n\">y</span><span class=\"o\">⦄</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">Icc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span>\n</code></pre></div>\n\n\n<p>), and then pulling out <code>contains_full_intervals</code> as a lemma for future use.  Should I make this change here, or is there another way?</p>",
        "id": 209225592,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599398898
    },
    {
        "content": "<p>If I'm understanding right, maybe you just want to name the type class assumptions? <code>[hs : ord_connected s]</code> instead of <code>[ord_connected s]</code>.</p>",
        "id": 209225915,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599399583
    },
    {
        "content": "<p>But if you do this with <code>variable [hs : ord_connected s]</code> you'll probably also want to <code>include hs</code> to mimic the anonymous behavior.</p>",
        "id": 209225970,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599399628
    },
    {
        "content": "<p>Thanks!  For some reason I had picked up the impression that that named typeclass assumptions were poor style ... If not, I'll happily use that pattern.</p>",
        "id": 209226050,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1599399766
    },
    {
        "content": "<p>No, I think it's just almost never necessary, and because of the <code>include</code> thing it's better to avoid unless needed. But this seems like a good reason to use them.</p>",
        "id": 209226183,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1599400004
    }
]