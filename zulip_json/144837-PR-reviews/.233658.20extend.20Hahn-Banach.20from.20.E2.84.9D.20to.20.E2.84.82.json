[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/3286\">#3286</a>, <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> extended Hahn-Banach from ℝ to ℂ.  Now, in <a href=\"https://github.com/leanprover-community/mathlib/issues/3658\">#3658</a>, he is doing some of the corollaries of Hahn-Banach.</p>\n<p>To avoid repetition, he introduces a literal \"Hahn-Banach holds over this field\" property for fields <code>𝕜</code> which are normed algebras over <code>ℝ</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">exists_extension_norm_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">subspace</span> <span class=\"err\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"err\">𝕜</span><span class=\"o\">),</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"err\">𝕜</span><span class=\"o\">]</span> <span class=\"err\">𝕜</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"err\">∥</span><span class=\"n\">g</span><span class=\"err\">∥</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span><span class=\"n\">f</span><span class=\"err\">∥</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(see <a href=\"#narrow/stream/113488-general/topic/Hahn-Banach.20corollaries\">previous discussion</a>).  I am wondering whether there is a more mathematically efficient property, that would avoid the scary quantifier <code>∀ (E : Type v)</code>.</p>\n<p>Basically, let me formulate Ruben's proof of complex Hahn-Banach in a more field-independent way, and then it might be possible to abstract out the properties of the field and/or norm that are required.  Given a field <code>𝕜</code> which is a normed algebra over <code>ℝ</code>, one has a topological group <code>U</code> which is the group of length-1 elements.  Thanks to <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> we have the Haar measure on <code>U</code>, and so there is a well-defined averaging operation on real representations of <code>U</code>, projecting the whole space to the <code>U</code>-invariant portion.  The key point of the Hahn-Banach argument is that one can take a real-linear map from some <code>E</code> to <code>𝕜</code> and convert it to a <code>𝕜</code>-linear map -- this is the point of Ruben's lemma from the last PR, <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/extend.html#linear_map.extend_to_%E2%84%82\"><code>linear_map.​extend_to_ℂ</code></a>.  In general, one would do it by this averaging operation, applied to the real-linear maps from <code>E</code> to <code>𝕜</code> considered as a representation of <code>U</code>, in such a way that the invariant subspace is precisely the <code>𝕜</code>-linear maps.</p>",
        "id": 205841892,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596485608
    },
    {
        "content": "<p>This is all very stream-of-consciousness, I have not checked at all whether the mathematics works.  And this could boil down to a lot of trouble for a theorem that might, in the end, apply only to <code>𝕜 = ℂ</code>.  (I am not sure if there are any (infinite) extension fields of <code>ℝ</code> for which people use Hahn-Banach.)</p>",
        "id": 205842199,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596485769
    },
    {
        "content": "<p>Haar measure will only exist on U if it's locally compact, but I don't know which normed algebras we're talking about here.</p>",
        "id": 205842203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596485771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, normed algebras over R which are themselves fields.</p>",
        "id": 205842336,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596485855
    },
    {
        "content": "<p>Given that the sphere is compact only in finite dimensions, I guess that means only <code>ℂ</code>?</p>",
        "id": 205842375,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596485878
    },
    {
        "content": "<p>or things isomorphic to C ;-)</p>",
        "id": 205842440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596485893
    },
    {
        "content": "<p>But even for the benefit of <code>ℂ</code> only, perhaps there is a nicer way of formulating the property, that doesn't involve <code>∀ (E : Type v)</code>.</p>",
        "id": 205842665,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596486016
    },
    {
        "content": "<p>It would be good to have a typeclass <code>is_real_or_complex</code>, but I haven't thought at how one could define it properly...</p>",
        "id": 205842721,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596486046
    },
    {
        "content": "<p><code>is_algebraic R k</code>?</p>",
        "id": 205842762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596486074
    },
    {
        "content": "<p>The difficulty is that, when you speak of reals or complexes, you really want it to come with its field structure and its norm.</p>",
        "id": 205842822,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596486119
    },
    {
        "content": "<p>For instance, with something like <code>[field k] [is_real_or_complex k]</code> , you could have a type <code>k</code> which is the reals, but with potentially two different field structures.</p>",
        "id": 205842950,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596486183
    },
    {
        "content": "<p>Maybe defining <code>is_real_or_complex k</code> as <code>k = \\R \\or k = \\C</code>, and registering an instance from <code>is_real_or_complex k</code> to <code>normed_field k</code> could work.</p>",
        "id": 205843084,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596486252
    },
    {
        "content": "<p>If you make it an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>-algebra and a field, algebraic over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>, then I guess you get everything for free. But I have no idea if this is useful to you.</p>",
        "id": 205843096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596486258
    },
    {
        "content": "<p>You also want the norm to be the right one...</p>",
        "id": 205843146,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596486284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> with this averaging approach you still have to quantify over all normed spaces, right?</p>",
        "id": 205843229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596486330
    },
    {
        "content": "<p>No, that'd be a theorem.</p>",
        "id": 205843290,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596486361
    },
    {
        "content": "<p>I mean, I haven't written down the \"theorem\" so I don't know what the hypotheses should be for <code>[is_real_or_complex k]</code> :)</p>",
        "id": 205843390,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596486399
    },
    {
        "content": "<p>But the idea would be that this projection operator comes for free from <code>[is_real_or_complex]</code> -- by averaging using Haar masure or by some other method.</p>",
        "id": 205843599,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596486532
    },
    {
        "content": "<p>I don't have a clue about the mathematics you're proposing to use, but if it works, all the better :)</p>",
        "id": 205845806,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1596487758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>, here's the idea.  What makes your proof of <code>exist_extension_norm</code> for <code>ℂ</code> work?  I claim it's the existence of your map <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/extend.html#linear_map.extend_to_%E2%84%82\"><code>linear_map.​extend_to_ℂ</code></a>, i.e. the canonical projection that, given <code>ℂ</code>-vector spaces <code>E</code> and <code>E'</code> and an <code>ℝ</code>-linear map <code>f : E → E'</code>, produces a <code>ℂ</code>-linear map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mrow><mo fence=\"true\">[</mo><mi>f</mi><mo>↦</mo><mi>f</mi><mo>−</mo><mi>i</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>⋅</mo><mo stretchy=\"false\">)</mo><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\tfrac{1}{2}\\left[f \\mapsto f - i f(i\\cdot)\\right]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mord\">⋅</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">]</span></span></span></span></span>, and which is well-behaved in the sense that an already-<code>ℂ</code>-linear map is unchanged by it.</p>",
        "id": 205848444,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596489369
    },
    {
        "content": "<p>I belive something similar can be done for quaternions, by the way:  if <code>f</code> is <code>ℝ</code>-linear then I think <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>4</mn></mfrac><mrow><mo fence=\"true\">[</mo><mi>f</mi><mo>−</mo><mi>i</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo>⋅</mo><mo stretchy=\"false\">)</mo><mo>−</mo><mi>j</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mo>⋅</mo><mo stretchy=\"false\">)</mo><mo>−</mo><mi>k</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo>⋅</mo><mo stretchy=\"false\">)</mo><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\tfrac{1}{4}\\left[f - if(i\\cdot) -jf(j\\cdot) -kf(k\\cdot)\\right]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mord\">⋅</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord\">⋅</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">⋅</span><span class=\"mclose\">)</span><span class=\"mclose delimcenter\" style=\"top:0em;\">]</span></span></span></span></span> is Q-linear.</p>",
        "id": 205848525,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596489456
    },
    {
        "content": "<p>So, one could go one step back, and replace your property <code>exists_extension_norm</code> with a property <code>exists_projection_map</code> ...</p>",
        "id": 205848617,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596489546
    },
    {
        "content": "<p>But that would still have a scary quantifier <code>∀ (E : Type v)</code>, and so I was wondering about hypotheses on <code>𝕜</code> that guarantee the existence of such a projection.  Averaging by Haar measure would be one way to get this projection.</p>",
        "id": 205848738,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596489632
    },
    {
        "content": "<p>However, this is a lot of work to go through for the benefit of a property that is actually just <code>is_real_or_complex</code> <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 205848885,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596489747
    },
    {
        "content": "<p>I experimented with implementing the approach I was suggesting, and found a sticking point.  Given the group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>c</mi><mo>∈</mo><mi mathvariant=\"double-struck\">k</mi><mo>:</mo><mo stretchy=\"false\">∥</mo><mi>c</mi><mo stretchy=\"false\">∥</mo><mo>=</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">U=\\{c \\in \\mathbb{k}:\\lVert c\\rVert =1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">∥</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">∥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> I want to (1) define a representation of <code>U</code> on <code>ℝ</code>-linear maps from <code>E</code> to <code>E'</code>, and (2) state that a certain representation of <code>U</code> admits a projection map onto its trivial sub-representation.  This language should be available from the very beginning of a development of representation theory -- but we don't have it yet ...</p>",
        "id": 205965303,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1596577767
    },
    {
        "content": "<p>So much low-hanging fruit!</p>",
        "id": 205965552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596577950
    },
    {
        "content": "<p>Seriously. Rep theory, basic algebraic number theory, graph theory, eigenvalues, all that stuff on Patrick's list -- I need to recruit more people</p>",
        "id": 205965901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1596578247
    }
]