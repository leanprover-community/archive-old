[
    {
        "content": "<p>Some progress ... at this point the analysis is intra-procedural only and aggregate insensitive.</p>\n<p>Here is a first example of an LCNF declaration ('Array.all' in the mono phase) that contains captured variables/parameters. I still need check many others to make sure it is doing the right thing, as I understand it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.all</span>\n        <span class=\"n\">α</span>                                                                                 <span class=\"c1\">-- CAPTURE (α     == _uniq.1)</span>\n        <span class=\"n\">as</span>                                                                                <span class=\"c1\">-- ESCAPE  (as    == _uniq.2)</span>\n        <span class=\"n\">p</span>                                                                                 <span class=\"c1\">-- CAPTURE (p     == _uniq.3)</span>\n        <span class=\"n\">start</span>                                                                             <span class=\"c1\">-- ESCAPE  (start == _uniq.4)</span>\n        <span class=\"n\">stop</span>                                                                              <span class=\"c1\">-- ESCAPE  (stop  == _uniq.5)</span>\n    <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.1</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_0</span><span class=\"bp\">;</span>                                                      <span class=\"c1\">-- CAPTURE (_f.1  == _uniq.6)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.2</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_1</span><span class=\"bp\">;</span>                                                      <span class=\"c1\">-- CAPTURE (_f.2  == _uniq.7)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.3</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_2</span><span class=\"bp\">;</span>                                                      <span class=\"c1\">-- CAPTURE (_f.3  == _uniq.8)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.4</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_3</span><span class=\"bp\">;</span>                                                      <span class=\"c1\">-- CAPTURE (_f.4  == _uniq.9)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.5</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_4</span><span class=\"bp\">;</span>                                                      <span class=\"c1\">-- CAPTURE (_f.5  == _uniq.10)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.6</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_5</span><span class=\"bp\">;</span>                                                      <span class=\"c1\">-- CAPTURE (_f.6  == _uniq.11)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">Functor.mk</span> <span class=\"n\">_</span> <span class=\"n\">_uniq.6</span> <span class=\"n\">_uniq.7</span><span class=\"bp\">;</span>                                               <span class=\"c1\">-- CAPTURE (_x.7  == _uniq.12)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.8</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._elam_0</span><span class=\"bp\">;</span>                                                     <span class=\"c1\">-- CAPTURE (_x.8  == _uniq.13)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.9</span> <span class=\"o\">:=</span> <span class=\"n\">Applicative.mk</span> <span class=\"n\">_</span> <span class=\"n\">_uniq.12</span> <span class=\"n\">_uniq.8</span> <span class=\"n\">_uniq.13</span> <span class=\"n\">_uniq.9</span> <span class=\"n\">_uniq.10</span><span class=\"bp\">;</span>                <span class=\"c1\">-- CAPTURE (_x.9  == _uniq.14)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.10</span> <span class=\"o\">:=</span> <span class=\"n\">Monad.mk</span> <span class=\"n\">_</span> <span class=\"n\">_uniq.14</span> <span class=\"n\">_uniq.11</span><span class=\"bp\">;</span>                                              <span class=\"c1\">-- CAPTURE (_x.10 == _uniq.15)</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.11</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLt</span> <span class=\"n\">_uniq.4</span> <span class=\"n\">_uniq.5</span><span class=\"bp\">;</span>                                                 <span class=\"c1\">-- ESCAPE  (_x.11 == _uniq.16)</span>\n  <span class=\"n\">cases</span> <span class=\"n\">_uniq.16</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">_x.12</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"bp\">;</span>                                                                    <span class=\"c1\">-- ESCAPE  (_x.12 == _uniq.17)</span>\n    <span class=\"n\">return</span> <span class=\"n\">_uniq.17</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">_x.13</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">_uniq.2</span><span class=\"bp\">;</span>                                                    <span class=\"c1\">-- ESCAPE  (_x.14 == _uniq.18)</span>\n    <span class=\"k\">let</span> <span class=\"n\">_x.14</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLe</span> <span class=\"n\">_uniq.5</span> <span class=\"n\">_uniq.18</span><span class=\"bp\">;</span>                                              <span class=\"c1\">-- ESCAPE  (_x.14 == _uniq.19)</span>\n    <span class=\"n\">cases</span> <span class=\"n\">_uniq.19</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_uniq.16</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_f.15</span> <span class=\"o\">:=</span> <span class=\"n\">Array.all._redArg._lam_0</span> <span class=\"n\">_uniq.3</span> <span class=\"n\">_uniq.19</span><span class=\"bp\">;</span>                             <span class=\"c1\">-- CAPTURE (_f.15 == _uniq.20)</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.16</span> <span class=\"o\">:=</span> <span class=\"n\">USize.ofNat</span> <span class=\"n\">_uniq.4</span><span class=\"bp\">;</span>                                                   <span class=\"c1\">-- CAPTURE (_x.16 == _uniq.21)</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.17</span> <span class=\"o\">:=</span> <span class=\"n\">USize.ofNat</span> <span class=\"n\">_uniq.5</span><span class=\"bp\">;</span>                                                   <span class=\"c1\">-- CAPTURE (_x.17 == _uniq.22)</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.18</span> <span class=\"o\">:=</span> <span class=\"n\">Array.anyMUnsafe.any</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span> <span class=\"n\">_uniq.15</span> <span class=\"n\">_uniq.20</span> <span class=\"n\">_uniq.2</span> <span class=\"n\">_uniq.21</span> <span class=\"n\">_uniq.22</span><span class=\"bp\">;</span>  <span class=\"c1\">-- CAPTURE (_x.18 == _uniq.23)</span>\n      <span class=\"n\">cases</span> <span class=\"n\">_uniq.23</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"n\">_uniq.19</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.19</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">;</span>                                                               <span class=\"c1\">-- ESCAPE  (_x.19 == _uniq.24)</span>\n        <span class=\"n\">return</span> <span class=\"n\">_uniq.24</span>\n</code></pre></div>\n<p>I am assuming there are bugs in this, but so far I see captures in about 2/3 of the LCNF declarations in the mono phase.</p>",
        "id": 314359193,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1670375477
    },
    {
        "content": "<p>Interesting. Not directly related to your analysis, but that <code>Id</code> monad should definitely be inlined more... we're probably missing some heuristics or annotations with the new instance inlining design.</p>",
        "id": 314406193,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670403537
    },
    {
        "content": "<p>You may want to filter out variables of <code>Sort</code> or unboxed type (or <code>Nat</code> I guess, which we can't really stack-allocate). Together with better inlining I would expect that only <code>p</code> is a meaningfully non-escaping variable here.</p>",
        "id": 314406839,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670403756
    },
    {
        "content": "<p>Do you know why <code>as</code> is escaping?</p>",
        "id": 314406868,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670403767
    },
    {
        "content": "<blockquote>\n<p>Not directly related to your analysis, but that Id monad should definitely be inlined more...</p>\n</blockquote>\n<p>I believe that's because the <code>Array.anyM</code> is marked <code>@[specialize]</code>.  Right now it still refers to the monad instance, but that should be gone once it's been specialized to the function.</p>",
        "id": 314524439,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670436605
    },
    {
        "content": "<p>In practice, we should never need to generate code for <code>Array.all</code>.</p>",
        "id": 314524724,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670436696
    },
    {
        "content": "<p>The <code>Array.all</code> function is a tough test case.  It's not supposed be used before specialization, and it contains lots of FFI calls without escape information (<code>Array.size</code>, etc.).</p>",
        "id": 314526692,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670437245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20escape.20analysis.20.2E.2E.2E/near/314406868\">said</a>:</p>\n<blockquote>\n<p>Do you know why <code>as</code> is escaping?</p>\n</blockquote>\n<p><code>as</code> (fvarid _uniq.2) escapes because it is used in <code>let _x.13 := Array.size ◾ _uniq.2;</code>, which is then used in <code>let _x.14 := Nat.decLe _uniq.5 _uniq.18;</code>, which is then returned (first Bool.false case).</p>\n<p>However, there are gaps, since I am, at this point, assuming that if it is an arg to a function, it escapes. I still need to propagate escape analysis across the call graph.</p>",
        "id": 314547965,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1670443589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20escape.20analysis.20.2E.2E.2E/near/314524724\">said</a>:</p>\n<blockquote>\n<p>In practice, we should never need to generate code for <code>Array.all</code>.</p>\n</blockquote>\n<p>Is this the case because <code>Array.all</code> is marked as <code>@[inline]</code>?</p>",
        "id": 314548787,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1670443874
    },
    {
        "content": "<p>Right, <code>Array.all</code> is <code>@[inline]</code> so there should be no remaining calls to the function.  And after inlining theres <code>anyMUnsafe.any</code>, which is waiting for a concrete function value to be specialized.</p>",
        "id": 314552802,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670445388
    },
    {
        "content": "<p>It would be better to test <code>def f (arr : Array (Array Nat)) (start stop : Nat) : Bool := arr.all (·.isEmpty) start stop</code> because <code>f</code> might actually be called at runtime.</p>",
        "id": 314553001,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670445472
    },
    {
        "content": "<p>What is the logic to understand the meaning of these functions? The <code>instMonadId</code> part makes sense, but what does <code>lam_0</code>, <code>lam_1</code>, etc means here? Are these basically specific class methods implemented and we just lost track of the original method?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Id.instMonadId._lam_0</span> <span class=\"o\">(</span><span class=\"n\">α.1</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β.2</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span>\n<span class=\"kd\">def</span> <span class=\"n\">Id.instMonadId._lam_1</span> <span class=\"o\">(</span><span class=\"n\">α.1</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β.2</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_y.3</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_y.4</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span>\n<span class=\"kd\">def</span> <span class=\"n\">Id.instMonadId._lam_2</span> <span class=\"o\">(</span><span class=\"n\">α.1</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span>\n<span class=\"kd\">def</span> <span class=\"n\">Id.instMonadId._lam_3</span> <span class=\"o\">(</span><span class=\"n\">α.1</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β.2</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span>\n<span class=\"kd\">def</span> <span class=\"n\">Id.instMonadId._lam_4</span> <span class=\"o\">(</span><span class=\"n\">α.1</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β.2</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span>\n<span class=\"kd\">def</span> <span class=\"n\">Id.instMonadId._lam_5</span> <span class=\"o\">(</span><span class=\"n\">α.1</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β.2</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 314554151,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1670445871
    },
    {
        "content": "<blockquote>\n<p>Are these basically specific class methods implemented?</p>\n</blockquote>\n<p>yes</p>",
        "id": 314554192,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1670445887
    },
    {
        "content": "<p>FWIW, here is the LCNF decl properly internalized and with types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Array.all</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.1</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_0</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.2</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.3</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_2</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.4</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PUnit</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_3</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.5</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PUnit</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_f.6</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._lam_5</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Functor.mk</span> <span class=\"n\">_</span> <span class=\"n\">_f.1</span> <span class=\"n\">_f.2</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.8</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">PUnit</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId._elam_0</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.9</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Applicative.mk</span> <span class=\"n\">_</span> <span class=\"n\">_x.7</span> <span class=\"n\">_f.3</span> <span class=\"n\">_x.8</span> <span class=\"n\">_f.4</span> <span class=\"n\">_f.5</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.10</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span> <span class=\"n\">Monad.mk</span> <span class=\"n\">_</span> <span class=\"n\">_x.9</span> <span class=\"n\">_f.6</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">_x.11</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLt</span> <span class=\"n\">start</span> <span class=\"n\">stop</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">_x.11</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">_x.12</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"bp\">;</span>\n    <span class=\"n\">return</span> <span class=\"n\">_x.12</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">_x.13</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">as</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">_x.14</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLe</span> <span class=\"n\">stop</span> <span class=\"n\">_x.13</span><span class=\"bp\">;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">_x.14</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.11</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_f.15</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Array.all._redArg._lam_0</span> <span class=\"n\">p</span> <span class=\"n\">_x.14</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.16</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"n\">USize.ofNat</span> <span class=\"n\">start</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.17</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"n\">USize.ofNat</span> <span class=\"n\">stop</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.18</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Array.anyMUnsafe.any</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span> <span class=\"n\">_x.10</span> <span class=\"n\">_f.15</span> <span class=\"n\">as</span> <span class=\"n\">_x.16</span> <span class=\"n\">_x.17</span><span class=\"bp\">;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">_x.18</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"n\">_x.14</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.19</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"bp\">;</span>\n        <span class=\"n\">return</span> <span class=\"n\">_x.19</span>\n</code></pre></div>",
        "id": 314554767,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1670446092
    }
]