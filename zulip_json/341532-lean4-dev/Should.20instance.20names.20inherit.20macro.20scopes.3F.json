[
    {
        "content": "<p>I ran into an unexpected issue with the <code>RpcEncodable</code> deriving handler and I am wondering as to the appropriate fix. What ends up happening is that two different modules <code>A.lean</code> and <code>B.lean</code> both run something like the following command</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n      <span class=\"n\">field</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n    <span class=\"n\">deriving</span> <span class=\"n\">ToJson</span><span class=\"o\">)</span>\n  <span class=\"n\">elabCommand</span> <span class=\"n\">stx</span>\n  <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n<p>The duplication of the name <code>Foo</code> is fine; macro hygiene turns it into something like <code> `Foo._@.WidgetKit.Component.HtmlDisplay._hyg.7 </code> (by the way, there doesn't seem to be a <code>pp</code> option to show this - is there? I had to resort to using <code>Repr Syntax</code>) so the struct names are not really duplicate. <em>But</em> the automatic instance name ends up being <code>instToJsonFoo</code> in both cases which clashes if we then import both <code>A</code> and <code>B</code>.  So I am wondering, is the command itself buggy? I didn't think so as macro hygiene should ensure names don't clash. If it is not, should the automatic instance name pick up macro scopes and become <code> `instToJsonFoo._@.Module._hyg.num </code>?</p>",
        "id": 321281924,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1673655062
    },
    {
        "content": "<p>Making instance names accessible for accessibly-named types makes sense, but for this usecase it seems they should be hygienic.</p>",
        "id": 321282040,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1673655143
    },
    {
        "content": "<p>Ah, I forgot to answer here. The problematic part when generating a compound name is always how to merge the macro scopes of the different parts, but <em>any</em> solution to that would be preferable to removing all scopes, yeah.</p>",
        "id": 321893246,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673978736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> should I make a GH issue for this?</p>",
        "id": 321978924,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674022124
    },
    {
        "content": "<p>Yes, please do!</p>",
        "id": 322002443,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674033007
    }
]