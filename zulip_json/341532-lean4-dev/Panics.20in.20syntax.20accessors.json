[
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/commit/a2631ce0374220ffdc148e0792b2b1be16ccba59\"> fix: panic when Syntax.missing</a></p>\n<p>I got a panic error message today in VS Code because of this function.<br>\nIt is weird because, as far as I can tell, this function is only used by<br>\nthe <code>register_simp_attr</code> macro, and this macro was not being used in<br>\nthe files I was editing.<br>\nI think the fix is resonable for a <code>Syntax.missing</code> case.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> Thanks for spotting this issue, I completely forgot that <code>.missing</code> is a valid syntax for every <code>TSyntax k</code>.</p>\n<p>Unfortunately, the same issue is present in a <em>lot</em> of other functions.  Just one example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"same\"</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"issue\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">n.getNat</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">same</span> <span class=\"n\">issue</span> <span class=\"c1\">-- PANIC</span>\n</code></pre></div>\n<p>Personally I'm not a fan of <code>panic!</code> at all, since it completely defies the principle of \"well-typed programs don't crash\".  Particularly with <code>Syntax</code>, we often get temporarily wrong syntax trees during editing, and the most common ways to access syntax (pattern matching, indexing) fail safely.  So my preference would be to remove the panic cases for these syntax accessors entirely, and return a default value instead (0, empty string, etc.).  Any thoughts?</p>",
        "id": 298554338,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663065299
    },
    {
        "content": "<p>Yes, <code>panic!</code>s behavior is a recurrent issue. </p>\n<blockquote>\n<p>Personally I'm not a fan of panic! at all, since it completely defies the principle of \"well-typed programs don't crash\".</p>\n</blockquote>\n<p>Note that the program only crashes if we set the environment variable <code>LEAN_ABORT_ON_PANIC</code>.</p>\n<blockquote>\n<p>So my preference would be to remove the panic cases for these syntax accessors entirely, and return a default value instead (0, empty string, etc.). Any thoughts?</p>\n</blockquote>\n<p>I am fine with this solution, but in the past others complained about silently returning the default value in similar situations.</p>",
        "id": 298555449,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663065687
    },
    {
        "content": "<blockquote>\n<p>but in the past others complained about silently returning the default value in similar situations.</p>\n</blockquote>\n<p>I think this is more of an issue with <code>List.head! []</code>, where <code>[]</code> is both a perfectly common value for <code>List Nat</code>, and a value which should be handled in a separate case.  With <code>Syntax.NumLit</code>, the only common value is <code>⟨.atom ..⟩</code>; the <code>⟨.missing⟩</code> value should not be treated differently since it only comes from parsing errors.</p>\n<p>Note that some <code>Syntax</code> functions are already non-panicking.  For example, <code>Syntax.getIdent</code> or <code>TSyntax.getIdent</code> return the anonymous name if the argument is not an identifier.  <code>stx[i]</code> returns <code>.missing</code> if the argument is not a node, etc.</p>",
        "id": 298558844,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663066834
    },
    {
        "content": "<blockquote>\n<p>Note that the program only crashes if we set the environment variable <code>LEAN_ABORT_ON_PANIC</code>.</p>\n</blockquote>\n<p>Okay, I was stretching the term \"crash\" here a bit.  For the user, it doesn't matter too much if the program terminates from an abort, from a segfault, or prints a pages-long scary warning message.  All of these are issues that need to be fixed.</p>",
        "id": 298561332,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663067807
    },
    {
        "content": "<blockquote>\n<p>Note that some Syntax functions are already non-panicking. For example, Syntax.getIdent or TSyntax.getIdent return the anonymous name if the argument is not an identifier. stx[i] returns .missing if the argument is not a node, etc.</p>\n</blockquote>\n<p>I am fine with not panicking in <code>Syntax</code> functions.</p>",
        "id": 298562478,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663068275
    }
]