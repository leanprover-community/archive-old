[
    {
        "content": "<p>Sometimes you wind up making small utilities that feel like they belong in a core lean 4 file as opposed to appearing \"randomly\" in e.g. a mathlib tactic. For example, I needed a <code>merge</code> and a <code>toKVMap</code> function for <code>KVMap</code>s. These seem basic and general enough (and not bespoke) that they might belong in the file where all the <code>KVMap</code> utilities are defined.</p>\n<p>However, basic utilities like this are often relatively minor—only a couple lines of code, without any significant design choices—so I wasn't sure if the \"RFC thread &gt; detailed issue &gt; get go-ahead\" procedure detailed in the contribution guidelines still applied. (I'm a relative newcomer working on tactic porting, so that's all that I know about; apologies if there are unwritten rules about this or if I missed the written ones!)</p>\n<p>So: are contributions of small but basic utilities like this welcome? If they are welcome, is the procedure the same as for other features? And if so, should they be talked about/PR'd file-by-file, utility-by-utility (assuming you're contributing a couple small utilities in the same file), or in one big thread/issue/PR spanning several files (if you're contributing utilities in different places)?</p>\n<p>I know there's a lot going on and not many core devs, so I don't want to inundate the dev team with small issues and PR's! But just thought I'd ask in case contributions like these would be useful. :)</p>",
        "id": 309093330,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1668119562
    },
    {
        "content": "<p>basic utilities generally speaking are a thing for <code>std4</code>, lean core is only what the compiler needs to bootstrap itself. You can talk to <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> about <code>std4</code> contributions.</p>",
        "id": 309093628,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1668119694
    },
    {
        "content": "<p>Sometimes it makes sense to put these things in mathlib4 as well. If it's useful for porting, but Mario doesn't have the bandwidth to put them in Std4, then mathlib4 will take them. :-)</p>",
        "id": 309094872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668120177
    },
    {
        "content": "<p>You can also make an issue on std4 if you think something from mathlib4 should be migrated, and I will get to it eventually</p>",
        "id": 309120154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668134296
    },
    {
        "content": "<p>Note that mathlib4 has an entire subdirectory <code>Mathlib.Lean</code> for \"things that feel like they ought to be in lean core but aren't\". For developing mathlib tactics that's where you should probably default to.</p>",
        "id": 309120303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668134432
    },
    {
        "content": "<p><code>Mathlib/Lean/</code></p>",
        "id": 309124133,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1668137889
    }
]