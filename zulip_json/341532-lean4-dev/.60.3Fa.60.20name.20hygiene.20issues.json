[
    {
        "content": "<p>This is minimized from an example in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LE</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Elab.Tactic.liftMetaTactic</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">Preorder.le_refl</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.le_refl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.size</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo.arr.size</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">foo.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">foo.arr</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"c1\">-- a: Nat := Foo.size foo   -- ?!</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"c1\">-- error</span>\n  <span class=\"c1\">-- type mismatch</span>\n  <span class=\"c1\">--   Foo.size foo</span>\n  <span class=\"c1\">-- has type</span>\n  <span class=\"c1\">--   Nat : Type</span>\n  <span class=\"c1\">-- but is expected to have type</span>\n  <span class=\"c1\">--   True : Prop</span>\n  <span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 310069169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668455483
    },
    {
        "content": "<p><code>?b</code> is also apparently assigned to <code>Foo.size foo</code> in this example, but <code>?c</code> is unassigned</p>",
        "id": 310069548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668455613
    },
    {
        "content": "<p>minimized further:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">foo.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">foo.arr.size</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Fin.val_lt_of_le</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"c1\">-- error</span>\n  <span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>it appears that the <code>apply Fin.val_lt_of_le</code> creates subgoals named <code>n</code>, <code>b</code>, <code>i</code>, <code>h</code> although the first three are assigned immediately</p>",
        "id": 310070397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1668455974
    },
    {
        "content": "<p>Another MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">Nat.add_comm</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">T</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">D</span>                         <span class=\"c1\">-- 6</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">D'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">T</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">z</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">D'</span>                        <span class=\"c1\">-- 7</span>\n</code></pre></div>",
        "id": 310774200,
        "sender_full_name": "Reid Barton",
        "timestamp": 1668762289
    },
    {
        "content": "<p>Here is another possibly related issue, where Lean exits with a stack overflow.<br>\nIf one of the commented lines is used instead of the corresponding uncommented line, then there is no stack overflow<br>\n(probably there is some error about unsolved goals instead).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Req</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Rfun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">→</span> <span class=\"n\">β'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">R'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ⇨ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Rfun</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Rap</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">α'</span> <span class=\"n\">β</span> <span class=\"n\">β'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R'</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">→</span> <span class=\"n\">β'</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β'</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">⇨</span> <span class=\"n\">R'</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">R'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bad</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Req</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">z</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"c1\">-- refine Rap (R := Req) ?g' ?y' ?rg' ?ry'</span>\n    <span class=\"c1\">-- refine' Rap ?g' ?y' ?rg' ?ry'</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Rap</span> <span class=\"bp\">?</span><span class=\"n\">g'</span> <span class=\"bp\">?</span><span class=\"n\">y'</span> <span class=\"bp\">?</span><span class=\"n\">rg'</span> <span class=\"bp\">?</span><span class=\"n\">ry'</span>\n  <span class=\"c1\">-- exact 0</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">z</span>\n</code></pre></div>",
        "id": 310811442,
        "sender_full_name": "Reid Barton",
        "timestamp": 1668775075
    },
    {
        "content": "<p>It also only seems to happen with this <code>?z</code> ... <code>?z</code> pattern, and maybe Lean is confused about the scope of the metavariable or something.</p>",
        "id": 310811591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1668775113
    }
]