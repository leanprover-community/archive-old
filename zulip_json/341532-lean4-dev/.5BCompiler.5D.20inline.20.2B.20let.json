[
    {
        "content": "<p>Suppose we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n  <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"bp\">...</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Do you expect <code>foo</code> to be inlined <code>n</code> times or not? I am assuming most users would expect it to be.<br>\nWhat about the following one?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">a</span>\n  <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"bp\">...</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I think some users may expect <code>foo</code> to be inlined only once, and the resulting <code>f</code> be lambda lifted.<br>\nThen, we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">n</span>\n  <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"bp\">...</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Here,  I am assuming most users would expect <code>foo</code> to be inlined only once, and <code>f</code> would only be inlined <code>n</code> times only if it is small. <br>\nDo you agree?</p>",
        "id": 301353181,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664413576
    },
    {
        "content": "<p>I would expect <code>foo</code> to be inlined only once in all three cases, into <code>f</code>. The decision of whether to inline <code>f</code> would depend on its inlining annotations (if they exist at all), or else whatever the default behavior is</p>",
        "id": 301354004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664414436
    },
    {
        "content": "<p>The semantics of <code>inline</code> are very vague (and right now the attribute affects decisions at multiple stages in the compiler, which I'm pretty sure almost nobody understands).  Most of the time I believe people just want to have the function inlined after specialization and erasure.</p>",
        "id": 301354014,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664414444
    },
    {
        "content": "<p>One thing to consider is that if the user writes an explicit extra let binding <code>let f := foo</code> (which is weird), they may very well be doing so in order to inhibit inlining</p>",
        "id": 301354077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664414513
    },
    {
        "content": "<p>But like Gabriel says, the actual semantics are not very clear, and I am generally used to compilers ignoring inline hints and substituting their own heuristics exactly because users can't get it right</p>",
        "id": 301354280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664414671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20inline.20.2B.20let/near/301354014\">said</a>:</p>\n<blockquote>\n<p>The semantics of <code>inline</code> are very vague (and right now the attribute affects decisions at multiple stages in the compiler, which I'm pretty sure almost nobody understands).  Most of the time I believe people just want to have the function inlined after specialization and erasure.</p>\n</blockquote>\n<p>In both old and new code generators, all proofs are eagerly erased before inlining is performed.<br>\nIn the new code generator, we are going to the LCNF format eagerly and some type information is lost, but can still be reconstructed in most cases. This is important because it enables us to apply user-provided theorems as optimization rules. Then, we want to inline at this stage because it creates many opportunities for applying optimization and these user-defined theorems. For example, I believe very few users would write <code>xs.map f |&gt;.map g</code>, but this code pattern can easily appear after we inline declarations.</p>",
        "id": 301354617,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664415116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20inline.20.2B.20let/near/301354077\">said</a>:</p>\n<blockquote>\n<p>One thing to consider is that if the user writes an explicit extra let binding <code>let f := foo</code> (which is weird), they may very well be doing so in order to inhibit inlining</p>\n</blockquote>\n<p>This is a good point. We can implement this semantics and document it. </p>\n<blockquote>\n<p>But like Gabriel says, the actual semantics are not very clear, and I am generally used to compilers ignoring inline hints and substituting their own heuristics exactly because users can't get it right</p>\n</blockquote>\n<p>I would be already very happy if all devs agreed with a semantics.  We can always document things and explain to users later.</p>",
        "id": 301354823,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664415311
    },
    {
        "content": "<p>I meant the semantics of <code>inline</code> generally, not just in the lean compiler</p>",
        "id": 301354851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664415344
    },
    {
        "content": "<p>I worry a bit about having <code>inline</code> mean <code>inline always</code> instead of just <code>inline (priority := high)</code></p>",
        "id": 301354935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664415428
    },
    {
        "content": "<p>at least, most other compilers seem to prefer that kind of interpretation</p>",
        "id": 301354948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664415458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20inline.20.2B.20let/near/301354948\">said</a>:</p>\n<blockquote>\n<p>at least, most other compilers seem to prefer that kind of interpretation</p>\n</blockquote>\n<p>Yes, they do. I think their approach is great for avoiding code size explosion, but I found this behavior very annoying a few times when using other programming languages.</p>",
        "id": 301355111,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664415611
    },
    {
        "content": "<p>one of the advantages of that approach is that you have a reasonable recourse when users put <code>@[inline]</code> on a recursive definition, you can just decide against it instead of going ahead with the stack overflow</p>",
        "id": 301355246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664415801
    },
    {
        "content": "<p>and I think you can have both - <code>@[inline always]</code> could be a thing</p>",
        "id": 301355313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664415846
    },
    {
        "content": "<p>I think I agree with those other compilers that \"inline always\" is not the best default because it has really bad failure modes</p>",
        "id": 301355335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664415877
    },
    {
        "content": "<p>But even setting the question of defaults aside, we don't have an <code>inline_more_vigorously</code> annotation in the first place, it's all or nothing</p>",
        "id": 301355472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20inline.20.2B.20let/near/301355246\">said</a>:</p>\n<blockquote>\n<p>one of the advantages of that approach is that you have a reasonable recourse when users put <code>@[inline]</code> on a recursive definition, you can just decide against it instead of going ahead with the stack overflow</p>\n</blockquote>\n<p>The stack overflow does not happen anymore we are track recursive inline applications.</p>",
        "id": 301355473,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664416029
    },
    {
        "content": "<p>It's still a stack overflow from the user perspective, since it causes an error</p>",
        "id": 301355497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416070
    },
    {
        "content": "<p>i.e. that code is just not legal</p>",
        "id": 301355501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416081
    },
    {
        "content": "<p>a compiler that takes <code>inline</code> as a strong recommendation will produce valid code in that case</p>",
        "id": 301355565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416107
    },
    {
        "content": "<p>because it will stop inlining once it reaches some threshold and not report an error but just continue with that</p>",
        "id": 301355596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20inline.20.2B.20let/near/301355497\">said</a>:</p>\n<blockquote>\n<p>It's still a stack overflow from the user perspective, since it causes an error</p>\n</blockquote>\n<p>To avoid the error, we can't simply leave the application there, otherwise future passes will keep trying to inline it again and again.<br>\nWe would need to add a mechanism for preventing this from happening.</p>",
        "id": 301355600,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664416155
    },
    {
        "content": "<p>right, that behavior makes sense for the \"inline always\" semantics. For \"inline probably\" you just want to tweak the presumably already existing heuristics on when to inline regular defs</p>",
        "id": 301355681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416219
    },
    {
        "content": "<p>We didn't get there yet. We want to have speculative inlining like flambda, but it is not implemented yet.</p>",
        "id": 301355800,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664416352
    },
    {
        "content": "<p>are regular defs just never inlined?</p>",
        "id": 301355810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416374
    },
    {
        "content": "<p>In the old code generator, they are inlined if they are very tiny, where tiny it is a value specified by the user (the default is 1). We will do the same in the new code generator, even if we do not implement speculative inlining.</p>",
        "id": 301355914,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664416466
    },
    {
        "content": "<p>does the <code>inline</code> <em>function</em> work as well?</p>",
        "id": 301355981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416549
    },
    {
        "content": "<p>this one -&gt; <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inline#doc\">docs4#inline</a></p>",
        "id": 301356026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416563
    },
    {
        "content": "<p>If I remember correctly, we have already implemented support for it in the new code generator. Is it not working for you?</p>",
        "id": 301356055,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664416609
    },
    {
        "content": "<p>No I hadn't checked, I'm just checking if we're still planning to support that interface</p>",
        "id": 301356309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416826
    },
    {
        "content": "<p>it sounds like the inlining case where you have a big function which is only used once would need an <code>inline</code> application to work correctly</p>",
        "id": 301356383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664416886
    },
    {
        "content": "<p>Not sure what did you mean by \"work correctly\" here. Not inlining a big function that is not tagged with <code>[inline]</code> is correct.</p>",
        "id": 301357025,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664417303
    },
    {
        "content": "<p>Well, there are two cases where inlining is good in general: (1) the function to inline is small (2) the function is only used once. Currently the compiler only does (1) AFAIK. You need global knowledge to do (2) correctly, unless the user helps along. You can't use an <code>@[inline]</code> annotation for (2) because it is a property of the caller, not the callee. The big function might be in a different library from the caller, and you would certainly not want to put an <code>@[inline]</code> on a big function without knowing how it's going to be used. So you need call-site annotation to do that.</p>",
        "id": 301358228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664418557
    },
    {
        "content": "<p>I agree. I thought you were implying it was a bug in the compiler.</p>",
        "id": 301358319,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664418628
    },
    {
        "content": "<p>Since this thread on the topic of inline , one feature I have always wanted from inline in other languages is use-site <code>inline</code> annotations, as opposed to (and in addition to) the usual def-site annotations. A bit of tangent, but something I think is worth keeping in mind.</p>",
        "id": 301360118,
        "sender_full_name": "Mac",
        "timestamp": 1664420367
    },
    {
        "content": "<p>Do you mean this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.result</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inline</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 301360234,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664420461
    },
    {
        "content": "<p>It is already implemented.</p>",
        "id": 301360251,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664420484
    },
    {
        "content": "<p>The old/current generator also supports this.</p>",
        "id": 301360274,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664420515
    },
    {
        "content": "<p>oh, I thought the syntax was <code>inline f (x + x)</code></p>",
        "id": 301360852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664421109
    },
    {
        "content": "<p>I suppose that could be problematic if <code>f</code> has some weird application stuff going on like implicits and auto params</p>",
        "id": 301360900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664421155
    },
    {
        "content": "<p>(I think I perpetuated my misunderstanding in the doc string)</p>",
        "id": 301360913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664421220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20inline.20.2B.20let/near/301360118\">said</a>:</p>\n<blockquote>\n<p>Since this thread on the topic of inline , one feature I have always wanted from inline in other languages is use-site <code>inline</code> annotations, as opposed to (and in addition to) the usual def-site annotations. A bit of tangent, but something I think is worth keeping in mind.</p>\n</blockquote>\n<p>Came here to say the same thing - call site annotations; glad to see that it already exists (as far as I can gather from the above).</p>\n<p>Even in C++, <code>inline</code> has now sort of become \"meaningless\" as an optimization hint, and in the other thread we've been talking about code folding and other link-time optimizations so perhaps it's best left to the compiler?</p>",
        "id": 301556017,
        "sender_full_name": "Tom",
        "timestamp": 1664499409
    }
]