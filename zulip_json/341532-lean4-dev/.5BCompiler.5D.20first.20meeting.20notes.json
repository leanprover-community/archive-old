[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"461231\">@Jad Ghalayini</span> <span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> <span class=\"user-mention\" data-user-id=\"515083\">@Tom</span> Thanks for joining <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> and me today.<br>\nHere are the relevant links /notes for the new code generator:</p>\n<ul>\n<li>We are using the master branch.</li>\n<li>The implementation is located at <a href=\"https://github.com/leanprover/lean4/tree/master/src/Lean/Compiler/LCNF\">https://github.com/leanprover/lean4/tree/master/src/Lean/Compiler/LCNF</a></li>\n<li>You can manually apply the new code generator using <code>#eval Lean.Compiler.compile #[...]</code> where <code>...</code> are the functions to be compiled. Heres is an example: <a href=\"https://github.com/leanprover/lean4/blob/4e8b4e96e9aa50134d1da518cc6ab20fc431a50e/tests/lean/run/lcnf1.lean#L1-L7\">https://github.com/leanprover/lean4/blob/4e8b4e96e9aa50134d1da518cc6ab20fc431a50e/tests/lean/run/lcnf1.lean#L1-L7</a></li>\n<li>Here is an example where Henrik adds a custom pass to ensure the <code>pullInstances</code> pass does not change the size of the code <a href=\"https://github.com/leanprover/lean4/blob/4ee9080a9b46e4e505045d0b744ea97e7c32b21f/tests/lean/CompilerPullInstances.lean\">https://github.com/leanprover/lean4/blob/4ee9080a9b46e4e505045d0b744ea97e7c32b21f/tests/lean/CompilerPullInstances.lean</a></li>\n<li>You can use <code>set_option trace.Compiler.result true</code> to see the code produced by the compiler passes that we have already implemented in the new code generator. We are also adding a <code>trace.Compiler.&lt;pass-name&gt;</code> for each new pass we add.</li>\n<li>The module <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Check.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Check.lean</a> checks whether LCNF code is well-formed, and is an excellent tool for debugging. It is currently executed after every single pass.</li>\n</ul>\n<p>Looking forward to seeing you again on Monday.</p>",
        "id": 298029681,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1662747570
    },
    {
        "content": "<p>Feel free to ask questions here, and we will try our best to answer them here or at our next meetings.</p>",
        "id": 298029957,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1662747675
    },
    {
        "content": "<p>Here is the example I have mentioned in the meeting similar to <code>Tuple α n</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Vec2</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">Vec2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span><span class=\"n\">x₂</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">y₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x₁</span><span class=\"bp\">+</span><span class=\"n\">y₁</span><span class=\"o\">,</span> <span class=\"n\">x₂</span><span class=\"bp\">+</span><span class=\"n\">y₂</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">Float</span> <span class=\"n\">Vec2</span> <span class=\"n\">Vec2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">x₁</span><span class=\"o\">,</span><span class=\"n\">x₂</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x₁</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x₂</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NFloatArray</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">FloatArray</span> <span class=\"bp\">//</span> <span class=\"n\">a.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n   <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span>\n   <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n     <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.set</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"bp\">+</span><span class=\"n\">y.1</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n   <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">Float</span> <span class=\"o\">(</span><span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NFloatArray</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n   <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span>\n   <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n     <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.set</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"gr\">sorry</span><span class=\"o\">)</span>\n   <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">⟩⟩</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">FloatVector</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Float</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Vec2</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">NFloatArray</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FloatVector.add</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">FloatVector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FloatVector</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>     <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">FloatVector</span> <span class=\"n\">at</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>     <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">FloatVector</span> <span class=\"n\">at</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">FloatVector</span> <span class=\"n\">at</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FloatVector.smul</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">FloatVector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FloatVector</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>     <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">FloatVector</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>     <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">FloatVector</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"bp\">+</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">unfold</span> <span class=\"n\">FloatVector</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">s</span><span class=\"bp\">*</span><span class=\"n\">x</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">FloatVector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.add</span> <span class=\"n\">y</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"n\">Float</span> <span class=\"o\">(</span><span class=\"n\">FloatVector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FloatVector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.smul</span> <span class=\"n\">s</span><span class=\"o\">⟩</span>\n\n\n<span class=\"c1\">-- Am I getting just addition on Vec2?</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">FloatVector</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.init</span> <span class=\"n\">true</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Compiler.compile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">foo1</span><span class=\"o\">]</span>\n\n\n<span class=\"c1\">-- Can we get this with only one `match n with`?</span>\n<span class=\"c1\">-- This is probably hard as it is similar to `(arr.map g).map f = arr.map (f∘g)`</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">FloatVector</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.init</span> <span class=\"n\">true</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Compiler.compile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">foo2</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 298466113,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1663011695
    },
    {
        "content": "<p>What is the plan for unboxed values in the new compiler? Would it be possible to somehow know that a type is 'plain old data' and have function to read and write them to <code>ByteArray</code>? This would hopefully remove the need for specialized <code>FloatArray</code>.</p>",
        "id": 298467750,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1663012221
    },
    {
        "content": "<p>Regarding the PassManager and the testing framework.<br>\nThe PassManager: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/PassManager.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/PassManager.lean</a></p>\n<p>In the new code generator we have the notion of a <code>Pass</code> which is in essence a function <code>Array Decl -&gt; CompilerM (Array Decl)</code> + a name and a few meta informations attached. This function will receive all the <code>Decl</code>s from a single Lean module and can proceed to do whatever it wants with it really, hypothetically a user could even write their own <code>Pass</code> which will remove all declarations from the pipeline and result in an empty binary.</p>\n<p>In order to execute these passes one after another we have a <code>PassManager</code> which stores an <code>Array Pass</code> of all passes known to the compiler, these are put there by a<code>PassInstaller</code>. A <code>PassInstaller</code> will receive all of the passes currently stored in the compiler and return a new list of passes with its own pass inserted, a built-in pass removed, a built-in pass in a wrapper function etc. there are quite a few functions available to ease the creation of <code>PassInstaller</code>s: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/PassManager.lean#L128-L175\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/PassManager.lean#L128-L175</a></p>\n<p>This is also where the meta data of a <code>Pass</code> gets relevant<code>, as you can see from its definition it has a </code>phase<code> an an </code>occurence<code>. Right now we have 3 phases documented here: https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/PassManager.lean#L14-L25 and Leo is currently working on writing the function that will transition the declarations into </code>mono<code> so all of the </code>Pass<code>es in the pipeline right now will operate on </code>base<code>. Once we have populated the pipeline with more phases and a user tries to insert say a </code>base<code> </code>Pass<code> after a </code>mono<code> </code>Pass<code> the </code>PassManager<code> will notice this and throw an error. Furthermore a single </code>Pass<code> can occur multiple times in the compilation pipeline, for example </code>simp<code> appears multiple times in the pipeline so the first occurence of simp will have </code>occurence<code> set to </code>0<code>, the second to </code>1<code>. This is done so you could for example insert your own </code>Pass<code> right after a certain occurence of a certain multi-occurence pass, or right at the end of </code>mono` before we transition to lambda RC etc.</p>\n<p>Once you have defined a <code>PassInstaller</code> you can tag it with the <code>cpass</code> attribute like for example here in the built-in passes: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Passes.lean,then\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Passes.lean,then</a> when you run the <code>Compiler.compile</code> function Lean will collect all the <code>PassInstaller</code>s tagged with <code>cpass</code>, execute them one after another to build a final <code>PassManager</code> state and run that pipeline on your input: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Main.lean#L59-L74\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Main.lean#L59-L74</a></p>\n<p>The basic testing framework: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Testing.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Testing.lean</a></p>\n<p>This is also how the testing framework is realized, for example the <code>CSE</code> (common subexpression elimination) test adds two <code>PassInstaller</code>s via <code>cpass</code> to the pipeline: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/CompilerCSE.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/CompilerCSE.lean</a></p>\n<p>And the test framework is really only specialized functions for inserting <code>Pass</code>es that will do some sort of assertion (which might throw an error) before continuing to push the input declaration through</p>\n<p>Right now it fully revolves around these types: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Testing.lean#L46-L53\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Testing.lean#L46-L53</a> where a <code>TestInstaller</code> is basically a function that you can pass the name of a <code>Pass</code> to test (i call these ones \"pass under test\" or PUT for short) as well as the name of your test and it will give you a <code>PassInstaller</code> There are roughly two kinds of tests to differentiate between, the \"simple tests\" which will be inserted after a certain pass (or all of its occurences) <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Testing.lean#L89-L168\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Testing.lean#L89-L168</a> and thus only have access to the output of a certain compiler pass, we can use these to for example:</p>\n<ul>\n<li>claim that the size is not greater than some fix value</li>\n<li>that we definitely inlined the occurence of a certain function</li>\n<li>...<br>\nthe other type is \"input output tests\", these will replace the pass under test with a wrapper <code>Pass</code> which will pass the input declarations to the pass under test and can then provide both the original input as well as the pass under test output to our assertion: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Testing.lean#L137-L177\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/Testing.lean#L137-L177</a>  so we can do things like \"the overall size of declarations in the pipeline was reduced by this pass\" etc.</li>\n</ul>\n<p>If you have further ideas for abstractions or how to improve the current ones please do tell me, it took me like 4 iterations until i was happy with the ones that are there right now.</p>\n<p>and below you can see the 3 types of tests that i have implemented on top of this framework so far:</p>\n<ul>\n<li>a fixpoint tests which will assert \"if we run the pass on its own output it will not change again\" i.e. is at a fixpoint</li>\n<li>several in-out based size tests</li>\n<li>a \"constant does not occur in output\" test which we use for asserting that functions have been inlined right now</li>\n</ul>\n<p>in general tests that we could imagine are:</p>\n<ul>\n<li>ones that statically assert that the code does not become bigger than a certain threshold, this is will allow us to detect code explosion, so we could take a look at the code of some functions right now, figure that their size as is is appropriate and add an assertion at the end of the pipeline (or a certain phase for that matter) that says \"this function may never get bigger than X\", this will help us not only catch bugs in the code generator as well but also in the elaborator of lean (this is how we call the process that goes from the highly sugared version of lean to plain <code>Expr</code>s) etc.</li>\n<li>in general functions that make assertions about statistics, count how many join points are around, how many lets are around, Yuri brought up the idea of a cost model, if we had that we could also make assertions about costs etc.</li>\n<li>find further functions that we always want to be inlined</li>\n<li>other fun ideas you come up with :P</li>\n</ul>\n<p>regarding what functions we want to run tests against:</p>\n<ul>\n<li>handcrafted examples that try to expose some weakness/bug in the compilation pipeline (these are obviously the hardest to build)</li>\n<li>functions where a human can very clearly predict what is going to happen, and basically assert that the things we expected to happen happen, this is mostly for making sure the compiler remains sort of stable</li>\n<li>biiiig functions from the Lean compiler itself which make use of these huge monad stacks etc. where we want to know that the monad stack is getting properly optimized, e.g. its binds getting inlined into matched instead of function calls etc.</li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span> <span class=\"user-mention\" data-user-id=\"515083\">@Tom</span></p>",
        "id": 298469340,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663012866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> and <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> is there an inventory of all the passes to be done for base but also for the other two phases?</p>",
        "id": 298496147,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663026911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> </p>\n<blockquote>\n<p>What is the plan for unboxed values in the new compiler?</p>\n</blockquote>\n<p>We are preserving more type information and planning to allocate values, such as <code>Prod</code> and <code>Exception</code>, on the stack. </p>\n<blockquote>\n<p>Would it be possible to somehow know that a type is 'plain old data' and have function to read and write them to ByteArray?</p>\n</blockquote>\n<p>We are considering having arrays of primitive types and structures. However, we are still figuring out what is the right interface when typing information is lost. For example, suppose we are representing <code>Array (Prod UInt32 UInt32)</code> as an array of pairs instead of an array of pointers to pairs (as it is now). Now, suppose we have <code>x : Array (Prod UInt32 UInt32)</code>, and <code>g ... x ...</code>, where the corresponding parameter in <code>g</code> has the  <code>Any</code> type because typing information was lost when converting to LCNF. We could produce a compilation error or add code to coerce the array of pairs into an array of pointers, but this is a linear time operation. We are also trying to decide whether we should provide mechanisms for controlling the process or not. In many cases, an array of pointers is a better runtime representation.</p>\n<blockquote>\n<p>-- Am I getting just addition on Vec2?</p>\n</blockquote>\n<p>If you add <code>@[inline]</code> at <code>FloatVector.add</code> and get today's bug fixes, then yes.</p>\n<p>As soon as we add support for user-defined rewriting rules in the compiler. You will also be able to write a theorem for the compiler stating that <br>\n<code>@FloatVector.add 2 x y = Vec2.add x y</code></p>",
        "id": 298503639,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663033691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20first.20meeting.20notes/near/298496147\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> and <span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> is there an inventory of all the passes to be done for base but also for the other two phases?</p>\n</blockquote>\n<p>For phase 1, the only remaining must-have pass is</p>\n<ul>\n<li><code>Specialize.lean</code> (it is not completed yet)</li>\n</ul>\n<p>We also want to have support for applying rewriting rules proved by the user, and constant propagation based on an interpreter for LCNF code.<br>\nWe also have the phase 0 <code>optimize_by</code> feature we discussed today that should be applied before we convert to LCNF.</p>\n<p>The phase 1 to phase 2 step will eliminate type parameters. That is, type parameters will be replaced with the <code>any</code> type if they have not been specialized by now. We will also remove universe levels, and will eliminate inductive types that have only one constructor that contains only one computationally relevant type (e.g., <code>Subtype</code>). We have to make sure <code>InferType</code> and <code>Check</code> also work for the phase 2 representation.</p>\n<p>The essential passes for phase 2 are </p>\n<ul>\n<li>Lambda lifting </li>\n<li>Dead parameter elimination</li>\n<li>Make sure <code>LCNF/Simp.lean</code> also works in phase 2</li>\n<li>Apply <code>implementedBy</code> attached to <code>casesOn</code> (we need it for the new computed fields feature)</li>\n<li>Eliminate dead branches in <code>cases</code> (it uses a small static analyzer that computes the shape of the objects a function can return</li>\n</ul>\n<p>In phase 3, the code is not considered pure anymore since we will insert reference counting operations</p>\n<ul>\n<li>Insert reset / reuse operations</li>\n<li>Infer additional borrow annotations</li>\n<li>Generate auxiliary definitions for creating closures. </li>\n<li>Insert inc / dec operations</li>\n<li>Inline (cheap) reset / reuse operations</li>\n<li>Eliminate the BaseIO monad overhead</li>\n<li>Eliminate redundant inc / dec operations using basic static analysis</li>\n</ul>",
        "id": 298504601,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663034748
    },
    {
        "content": "<p>Phase 3 is currently implemented at <code>src/Lean/Compiler/IR</code>, we want to redo it to using LCNF datastructures we discussed today, and preserving all type information we have left in phase 2.</p>",
        "id": 298504688,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663034830
    },
    {
        "content": "<p>Getting <code>Prod</code> on stack would be amazing!</p>",
        "id": 298515424,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1663046517
    },
    {
        "content": "<p>We were also planning on having a pass in phase 1 (it could easily also live in phase 2 though) that checks for duplication in the cases branches and turns the one with the most duplication into the \"default\" branch</p>",
        "id": 298519702,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663049534
    },
    {
        "content": "<p>Is there also plan for having <code>Sum</code> on the stack? The programming language <a href=\"https://github.com/google-research/dex-lang\">Dex</a> is doing some cool things with arrays indices and using products and sums of indices for it.</p>",
        "id": 298615526,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1663084281
    },
    {
        "content": "<blockquote>\n<p>Is there also plan for having Sum on the stack? </p>\n</blockquote>\n<p>Yes.</p>\n<blockquote>\n<p>The programming language Dex is doing some cool things with arrays indices and using products and sums of indices for it.</p>\n</blockquote>\n<p>Do you want to present the main ideas at the next meeting?</p>",
        "id": 298615895,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663084404
    },
    {
        "content": "<p>I need to look at the language a big more closely to give a reasonable overview, so maybe next week or the one after that.</p>",
        "id": 298617493,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1663084897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> I ran the compile test against the biggest lean declarations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Core</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">envOfImports</span> <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Environment</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"n\">importModules</span> <span class=\"o\">(</span><span class=\"n\">imports.map</span> <span class=\"o\">(</span><span class=\"n\">Import.mk</span> <span class=\"bp\">·</span> <span class=\"n\">false</span><span class=\"o\">))</span> <span class=\"n\">Options.empty</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expr.size</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mdata</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">size</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">letE</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">body</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">body</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">size</span> <span class=\"n\">fn</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">arg</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">size</span> <span class=\"n\">e</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isBlackListedAux</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span><span class=\"n\">findDeclarationRanges</span><span class=\"bp\">?</span> <span class=\"n\">declName</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">declName.isInternal</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;||&gt;</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isAuxRecursor</span> <span class=\"n\">env</span> <span class=\"n\">declName</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;||&gt;</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isNoConfusion</span> <span class=\"n\">env</span> <span class=\"n\">declName</span><span class=\"o\">)</span>\n    <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isRec</span> <span class=\"n\">declName</span>\n    <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isMatcher</span> <span class=\"n\">declName</span>\n    <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isInstance</span> <span class=\"n\">declName</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isBlackListed</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">isBlackListedAux</span> <span class=\"n\">declName</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ret</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">foo.toIO</span> <span class=\"o\">{</span> <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"CompileBiggest\"</span><span class=\"o\">,</span> <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span> <span class=\"o\">{}</span>\n  <span class=\"n\">return</span> <span class=\"n\">ret</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">limit</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">envOfImports</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Lean</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">Init</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">candidates</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">const</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">env.constants.toList</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">isBlackListed</span> <span class=\"n\">name</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">defnInfo</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">const</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">info.value</span>\n        <span class=\"k\">if</span> <span class=\"n\">Expr.size</span> <span class=\"n\">val</span> <span class=\"bp\">&gt;</span> <span class=\"n\">limit</span> <span class=\"k\">then</span>\n          <span class=\"n\">candidates</span> <span class=\"o\">:=</span> <span class=\"n\">candidates.push</span> <span class=\"n\">name</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Compiling the top {candidates.size} functions\"</span>\n  <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">candidates</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Compiler.compile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toIO</span> <span class=\"o\">{</span> <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"CompileBiggest\"</span><span class=\"o\">,</span> <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span>\n    <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{c} threw: {e}\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">foo</span> <span class=\"mi\">500</span>\n</code></pre></div>\n<p>its quite a primitive and arbitrary heuristic of course but it still exposed about 2 terminal screens of bugs caught by our checkers (hurray) for me so I wont paste them here^^</p>\n<p>How do you think we should deal with those?</p>",
        "id": 298638999,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663092250
    },
    {
        "content": "<p>Great.</p>\n<blockquote>\n<p>How do you think we should deal with those?</p>\n</blockquote>\n<p>A new gist with them?<br>\nHopefully they are many instances of a small set of bugs.</p>",
        "id": 298646063,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663094728
    },
    {
        "content": "<p>Yeah I'd hope that as well, the question on how to deal with them was meant as in will you just try to kill them all by yourself? Or shall we try and split work up here? Or something else?</p>",
        "id": 298651219,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663096649
    },
    {
        "content": "<p><a href=\"https://gist.github.com/hargoniX/30b6fb49af15797e664fdd86eb91a5dc\">https://gist.github.com/hargoniX/30b6fb49af15797e664fdd86eb91a5dc</a></p>",
        "id": 298652188,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663096977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Your help is very welcome. If you have time to investigate, please go ahead, and I will continue working on <code>Specialize.lean</code>.</p>",
        "id": 298658959,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663099421
    },
    {
        "content": "<p>I'll try to take a shot then <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 298659093,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663099456
    },
    {
        "content": "<p>I minimized the first issue to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">ReaderM</span> <span class=\"n\">Unit</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n    <span class=\"k\">match</span> <span class=\"n\">true</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>it will fail right in the init pass because the jp transformation on alternatives isnt working properly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler.init</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">32</span>\n    <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"n\">a.1</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">instDecidableEqBool</span> <span class=\"n\">_x.2</span> <span class=\"n\">_x.2</span>\n      <span class=\"n\">jp</span> <span class=\"n\">_jp.28</span> <span class=\"n\">_y.26</span> <span class=\"o\">:=</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.27</span> <span class=\"o\">:=</span> <span class=\"n\">_y.26</span> <span class=\"n\">a.1</span>\n        <span class=\"n\">_x.27</span>\n      <span class=\"n\">jp</span> <span class=\"n\">_jp.34</span> <span class=\"n\">_y.32</span> <span class=\"o\">:=</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.33</span> <span class=\"o\">:=</span> <span class=\"n\">_alt.19</span> <span class=\"n\">_y.32</span>\n        <span class=\"n\">goto</span> <span class=\"n\">_jp.28</span> <span class=\"n\">_x.33</span>\n      <span class=\"n\">jp</span> <span class=\"n\">_jp.31</span> <span class=\"n\">_y.29</span> <span class=\"o\">:=</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.30</span> <span class=\"o\">:=</span> <span class=\"n\">_alt.20</span> <span class=\"n\">_y.29</span>\n        <span class=\"n\">goto</span> <span class=\"n\">_jp.28</span> <span class=\"n\">_x.30</span>\n      <span class=\"n\">cases</span> <span class=\"n\">_x.3</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Decidable.isFalse</span> <span class=\"n\">x.4</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ReaderT.instApplicativeReaderT</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_x.5</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"bp\">#</span> <span class=\"mi\">1</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.8</span> <span class=\"o\">:=</span> <span class=\"n\">_x.7</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.9</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.10</span> <span class=\"o\">:=</span> <span class=\"n\">_x.8</span> <span class=\"n\">_</span> <span class=\"n\">_x.9</span>\n        <span class=\"n\">goto</span> <span class=\"n\">_jp.28</span> <span class=\"n\">_x.10</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Decidable.isTrue</span> <span class=\"n\">x.11</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">fun</span> <span class=\"n\">_f.18</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.12</span> <span class=\"o\">:=</span> <span class=\"n\">Id.instMonadId</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.13</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ReaderT.instApplicativeReaderT</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_x.12</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.14</span> <span class=\"o\">:=</span> <span class=\"n\">_x.13</span> <span class=\"bp\">#</span> <span class=\"mi\">1</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.15</span> <span class=\"o\">:=</span> <span class=\"n\">_x.14</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.16</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.17</span> <span class=\"o\">:=</span> <span class=\"n\">_x.15</span> <span class=\"n\">_</span> <span class=\"n\">_x.16</span>\n          <span class=\"n\">_x.17</span>\n        <span class=\"k\">let</span> <span class=\"n\">_alt.19</span> <span class=\"o\">:=</span> <span class=\"n\">_f.18</span>\n        <span class=\"k\">let</span> <span class=\"n\">_alt.20</span> <span class=\"o\">:=</span> <span class=\"n\">_f.18</span>\n        <span class=\"n\">cases</span> <span class=\"n\">_x.2</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.21</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n          <span class=\"n\">goto</span> <span class=\"n\">_jp.31</span> <span class=\"n\">_x.21</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.23</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n          <span class=\"n\">goto</span> <span class=\"n\">_jp.34</span> <span class=\"n\">_x.23</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">scope</span> <span class=\"n\">free</span> <span class=\"kd\">variable</span> <span class=\"n\">_alt.19</span>\n</code></pre></div>\n<p>so _jp.34 (as well as _jp.31) are incorrectly referring to out of scope variables that are defined when they are called. As I understand it we need to improve tracking of dependencies in the body of the jp in order to fix this?</p>",
        "id": 298672604,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663105621
    },
    {
        "content": "<p>Thanks a lot for isolating the problem. It was super useful. I pushed a fix for it.<br>\n<a href=\"https://github.com/leanprover/lean4/commit/8f2ab82408788611bbc261a6c1779430cf3d7074\">https://github.com/leanprover/lean4/commit/8f2ab82408788611bbc261a6c1779430cf3d7074</a></p>",
        "id": 298678086,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663108826
    },
    {
        "content": "<p>It was a dependency issue as you conjectured (line 128 at <code>ToLCNF.lean</code>).</p>",
        "id": 298678172,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663108883
    },
    {
        "content": "<p>Re the non termination issue, this is even provokable in the current compiler even though a little more elaborate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"bp\">|</span> <span class=\"n\">c3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">C</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">c1</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">c2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g1simp</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[csimp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">g1</span> <span class=\"bp\">=</span> <span class=\"n\">g1simp</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span>\n  <span class=\"n\">intro</span> <span class=\"n\">f</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">g1</span><span class=\"o\">,</span> <span class=\"n\">g2</span><span class=\"o\">,</span> <span class=\"n\">g1simp</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">dontTerminate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">dontTerminate</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {g1 0 dontTerminate}!\"</span>\n</code></pre></div>\n<p>will:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 299218818,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663352879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Thanks for posting the example. <br>\nI think we need to discuss in the compiler documentation this example and the other ones we covered in today's meeting.<br>\nI think we both agreed during the meeting that it is ok to eliminate a very expensive dead code. For example, it should be ok to quickly return <code>Hello, 0!</code> in the following variant of your example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">10000</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {g1 0 exp}!\"</span>\n</code></pre></div>\n<p>where <code>ack</code> is the Ackermann function. <br>\nThen, the issues we discussed today and the example above are fine if we interpret <code>partial</code> as a total function that terminates after an insanely huge amount of \"fuel\" has been exhausted. The result in this case that cannot be observed is the \"default\" value. Lean only allows us to use <code>partial</code> if the type is inhabited. <br>\nThe <code>dontTerminate</code> function above would morally be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dontTerminate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"n\">hugeFuel</span> <span class=\"n\">x</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">fuel</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">fuel</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">fuel</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 299227178,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663356044
    },
    {
        "content": "<p>If we use this interpretation of <code>partial</code>, all examples we discussed today should be fine.</p>",
        "id": 299228708,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663356686
    },
    {
        "content": "<p>Here are the examples discussed in today's meeting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"n\">c2</span> <span class=\"bp\">|</span> <span class=\"n\">c3</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">g2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">c1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">c1</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">g1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g2</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n\n<span class=\"c1\">-- The old and new code generators convert `g1` into the constant function that always return `0`</span>\n<span class=\"c1\">-- Now, what about?</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">g1'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g2</span> <span class=\"o\">(</span><span class=\"n\">g1'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- `g1'` is the function that always returns `default Nat`, and prints the unreachale code has been reached.</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">g1''</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g2</span> <span class=\"o\">(</span><span class=\"n\">g1''</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\">-- `g1''` produces a fatal error since it reached the `False.elim sorry`</span>\n<span class=\"c1\">-- #eval g1'' 0</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">ack</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span>   <span class=\"n\">y</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ack</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bad1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g2</span> <span class=\"o\">(</span><span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1000</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1000</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bad2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g2</span> <span class=\"o\">(</span><span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1000</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1000</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bad3</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">g2</span> <span class=\"o\">(</span><span class=\"n\">ack</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1000</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1000</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c1</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">c2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.elim</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 299228860,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663356731
    },
    {
        "content": "<p>Thinking about this semantics a bit more, I think it should be legal to optimize</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">dontTerminate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">dontTerminate</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">dontTerminate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">default</span>\n</code></pre></div>\n<p>because the compiler can see that the only possible return value of the function is <code>default</code> (after a <code>hugeFuel</code> number of iterations of a side-effect-free function)</p>",
        "id": 299627062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663614055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, the code generator is allowed to do that. It is not capable of applying this kind of transformation right now, but it is a valid one. We should make clear to users that this is the semantics we are using, and <code>dontTerminate</code> is a pure and total function in Lean.</p>",
        "id": 299628409,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663614554
    },
    {
        "content": "<p>BTW, there is a bug in the current/old code generator that is related to the partial semantics and related to the transformation you suggested above. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> created the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">swipc</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">swipc</span> <span class=\"o\">()</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In the current/old code generator, we have the following transformation. <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/IR/ElimDeadBranches.lean#L315\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/IR/ElimDeadBranches.lean#L315</a><br>\nIt uses a static analyzer that computes abstract values representing possible result values: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/IR/ElimDeadBranches.lean#L13\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/IR/ElimDeadBranches.lean#L13</a><br>\nThis static analyzer is not taking the semantics we have above into account. The default value must be taken into account for functions marked as <code>partial</code>.</p>",
        "id": 299631593,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663615885
    },
    {
        "content": "<p>I think there is another issue related to this, which is that you could end up returning <code>default</code> even though you only used a <code>Nonempty A</code> proof of existence</p>",
        "id": 299634235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663617005
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">computableChoice</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">computableChoice</span>\n</code></pre></div>\n<p>What is the semantics of calling this function?</p>",
        "id": 299634432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663617116
    },
    {
        "content": "<p>I think it is still okay to say that this function returns an unknown value (specifically, <code>Classical.choice α</code>), and if that makes it all the way to codegen then we can still use a loop to implement it</p>",
        "id": 299634921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663617297
    },
    {
        "content": "<p>but you would also have to take this into account in that ElimDeadBranches optimization pass</p>",
        "id": 299635022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663617349
    },
    {
        "content": "<p>I don't recall why we added support for <code>Nonempty</code> at <code>partial</code>, it is sufficient for ensuring we are preserving logical integrity, but is just creating problems for the code generator.</p>",
        "id": 299635097,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663617364
    },
    {
        "content": "<p>Another complication is that we also use </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mkInhabitantFor</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n   <span class=\"bp\">...</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findAssumption</span><span class=\"bp\">?</span> <span class=\"n\">xs</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">xs</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>for showing that the type is inhabited. We will also have to track this one. This one is easier to support, but we have to remember to support it too.</p>",
        "id": 299635405,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663617511
    },
    {
        "content": "<p>I think the best way to handle both problems is for the compiler to assume that the result of a partial function \"at the end\" is an arbitrary opaque value of the type rather than trying to use properties of it in CFG value analysis</p>",
        "id": 299635722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663617632
    },
    {
        "content": "<p>That is, the semantics would be more like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dontTerminate</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"n\">hugeFuel</span> <span class=\"n\">x</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">fuel</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">fuel</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nondeterministicChoice</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">fuel</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">fuel</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>where <code>nondeterministicChoice</code> is validly refined by any value of the type</p>",
        "id": 299636036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663617746
    },
    {
        "content": "<p>Yes, I agree this is the simplest solution, but any tail-recursive function marked as <code>partial</code> is now essentially returning <code>Top</code> (\"any\") from the point of view of <code>ElimDeadBranches</code>.</p>",
        "id": 299636345,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663617857
    },
    {
        "content": "<p>In a production application setting, I would be quite concerned about the compiler automatically turning non-terminating partials into a <code>default</code>result. In this case, this non-termination is like a bug and it needs to be fixed not by the compiler, but by the developer. It better be caught by some unit or integration tests. Or am I missing something?</p>",
        "id": 299636631,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663617975
    },
    {
        "content": "<p>I think the \"correct\" answer to that is that if you want proper nontermination you should be in a monad with effects like <code>BaseIO</code></p>",
        "id": 299636747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663618032
    },
    {
        "content": "<p>the compiler can and will assume that any pure function is terminating</p>",
        "id": 299636775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663618045
    },
    {
        "content": "<p>Unfortunately, diagnosing UB (which this basically is) is a really hard thing in general, so while it would be nice to report this surprising behavior to the programmer I doubt we can promise that in general</p>",
        "id": 299636957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663618117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20first.20meeting.20notes/near/299636747\">said</a>:</p>\n<blockquote>\n<p>I think the \"correct\" answer to that is that if you want proper nontermination you should be in a monad with effects like <code>BaseIO</code></p>\n</blockquote>\n<p>Exactly. Non-termination is an effect, and the <code>partial</code> keyword is not providing this effect. If users want this effect and a guarantee that it is preserved by the compiler, they must use a monad that provides it.</p>",
        "id": 299637161,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663618205
    }
]