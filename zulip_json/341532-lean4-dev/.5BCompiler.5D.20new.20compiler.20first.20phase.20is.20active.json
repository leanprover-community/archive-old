[
    {
        "content": "<p>The new compiler base phase is active at <code>master</code>.<br>\nThe main drawback is that the <code>.olean</code> are bigger now. They will get smaller after we replace the old code generator with the new one.<br>\nWe talked about having the new compiler intermediate code in a separate file, but this has not been implemented yet.<br>\nThe new code generator can compile the main Lean 4 repo, but it certainly contains bugs.<br>\nWe still need to run experiments and collect statistics for the new generated code.</p>",
        "id": 300591215,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664060648
    },
    {
        "content": "<p>Clarification: the first phase of the new compiler is active, but we are still using the old compiler to generate C code and IR.</p>",
        "id": 300664502,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664120710
    },
    {
        "content": "<p>The whole old compiler, not only those parts, correct?</p>",
        "id": 300664799,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664120906
    },
    {
        "content": "<p>If we want to avoid the size and speed overhead, we could introduce a Lean option for enabling the new compiler, which we would only activate when working on it, and only for stages &gt; 0.</p>",
        "id": 300664955,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664121010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/300664799\">said</a>:</p>\n<blockquote>\n<p>The whole old compiler, not only those parts, correct?</p>\n</blockquote>\n<p>Yes, the whole old compiler is still being used do generate code.<br>\nThen new compiler is being executed, and the result of the base phase is being saved.</p>",
        "id": 300665014,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664121062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/300664955\">said</a>:</p>\n<blockquote>\n<p>If we want to avoid the size and speed overhead, we could introduce a Lean option for enabling the new compiler, which we would only activate when working on it, and only for stages &gt; 0.</p>\n</blockquote>\n<p>I considered this option, but it is inconvenient because of dependencies. To turn the option on for <code>A.lean</code>, we need it on for all its dependencies.</p>",
        "id": 300665445,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664121283
    },
    {
        "content": "<p>Right, that's why I was thinking of enabling it for an entire stage. It could be as simple as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">+</span>    <span class=\"bp\">//</span> <span class=\"n\">uncomment</span> <span class=\"n\">this</span> <span class=\"n\">to</span> <span class=\"n\">test</span> <span class=\"n\">the</span> <span class=\"n\">new</span> <span class=\"n\">compiler</span>\n<span class=\"bp\">+</span>    <span class=\"bp\">//</span><span class=\"n\">opts</span> <span class=\"bp\">=</span> <span class=\"n\">opts.update</span><span class=\"o\">({</span><span class=\"s2\">\"compiler\"</span><span class=\"o\">,</span> <span class=\"s2\">\"new\"</span><span class=\"o\">}),</span> <span class=\"n\">true</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>in <code>src/stdlib_flags.h</code> (which would automatically limit it to stages &gt; 0).</p>",
        "id": 300665866,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664121547
    },
    {
        "content": "<p>Unless we have a major issue (e.g, <code>Mathlib4</code> cannot be compiled anymore), I prefer to keep it as-is. <br>\nThis is a temporary annoyance, we hope to replace the current code generator with the new one before the end of the year.</p>",
        "id": 300666382,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664121844
    },
    {
        "content": "<p>Am I right in understanding that it shouldn't actually do anything currently (other than throwing errors if the compiler fails on something)?</p>",
        "id": 300666778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664122072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/300666778\">said</a>:</p>\n<blockquote>\n<p>Am I right in understanding that it shouldn't actually do anything currently (other than throwing errors if the compiler fails on something)?</p>\n</blockquote>\n<p>Correct. The new compiler is executing all passes from the base phase, and checking the generated code (type checking, join points, etc) after each pass. <br>\nWe are also providing APIs for accessing the generated code, adding custom passes, and checks.</p>",
        "id": 300667225,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664122356
    },
    {
        "content": "<p>I assume that running it on std + mathlib won't actually reveal issues then, since even compiler errors are swallowed by the noncomputable checker IIUC</p>",
        "id": 300667553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664122548
    },
    {
        "content": "<p>I don't think the olean bloat is a problem as long as it's temporary. Seems better to have this stuff available for users who want to use the new APIs</p>",
        "id": 300667719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664122645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/300667553\">said</a>:</p>\n<blockquote>\n<p>I assume that running it on std + mathlib won't actually reveal issues then, since even compiler errors are swallowed by the noncomputable checker IIUC</p>\n</blockquote>\n<p>The new code generator is a Lean program, errors will <strong>not</strong> be swallowed. I had to fix a bunch of bugs to make sure I could process the Lean 4 repo using it.</p>",
        "id": 300667816,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664122692
    },
    {
        "content": "<p>Lake has already exposed issues in the new code generator too, and we had to fix some of the new compiler passes we have. The failures are produced by the new code generator <code>Check.lean</code>.</p>",
        "id": 300668050,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664122846
    },
    {
        "content": "<p>I'll run it later today and see if anything comes up</p>",
        "id": 300668087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664122871
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/300668087\">said</a>:</p>\n<blockquote>\n<p>I'll run it later today and see if anything comes up</p>\n</blockquote>\n<p>Thanks. <br>\nIf you have time to create nasty examples with dependent types, it would be very useful too.</p>",
        "id": 300668134,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664122916
    },
    {
        "content": "<p>One useful feature is that we can write programs in Lean to analyze the code produced by the new code generator. For example, here are the biggest functions generated by the new code generator. The first column is the size of the generated code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2150</span> <span class=\"n\">_private.Init.Meta.0.Lean.Meta.Simp.beqConfig._</span><span class=\"bp\">@.</span><span class=\"n\">Init.Meta._hyg.11775</span>\n<span class=\"mi\">2408</span> <span class=\"n\">Lean.Elab.Command.expandMacroArg.mkSyntaxAndPat</span>\n<span class=\"mi\">2513</span> <span class=\"n\">Lean.Elab.Term.Do.ToCodeBlock.doForToCode</span>\n<span class=\"mi\">2550</span> <span class=\"n\">Lean.Parser.Tactic._aux_Init_Meta___macroRules_Lean_Parser_Tactic_declareSimpLikeTactic_1</span>\n<span class=\"mi\">2629</span> <span class=\"n\">Lean.Meta.Closure.collectExprAux</span>\n<span class=\"mi\">2735</span> <span class=\"n\">Lean.Elab.Command.expandMacroArg.mkSyntaxAndPat</span>\n<span class=\"mi\">2854</span> <span class=\"n\">Lean.Elab.Command.expandMixfix</span>\n<span class=\"mi\">2899</span> <span class=\"n\">Lean.Elab.Term.Do.ToTerm.matchNestedTermResult</span>\n<span class=\"mi\">3963</span> <span class=\"n\">_private.Lean.Elab.Quotation.0.Lean.Elab.Term.Quotation.getHeadInfo</span>\n<span class=\"mi\">6038</span> <span class=\"n\">_private.Lean.Elab.Quotation.0.Lean.Elab.Term.Quotation.getHeadInfo</span>\n<span class=\"mi\">31593</span> <span class=\"n\">Lean.Json.Parser.escapedChar</span>\n</code></pre></div>\n<p>I found it very useful. The result for <code>Lean.Json.Parser.escapedChar</code> is exposing a code explosion issue at one of the optimizations in the new compiler. I am trying to fix it today.</p>",
        "id": 300668488,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664123121
    },
    {
        "content": "<p>Do you have the code for that so I can try it on the other repos?</p>",
        "id": 300668605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664123183
    },
    {
        "content": "<p>This should also reveal issues in explosion of derive handler generated expressions as well, yes?</p>",
        "id": 300668657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664123240
    },
    {
        "content": "<p>I guess huge proofs wouldn't show up though</p>",
        "id": 300668694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664123275
    },
    {
        "content": "<p>Why are there two results for <code>getHeadInfo</code> and why are they so different?</p>",
        "id": 300668805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664123342
    },
    {
        "content": "<p>We have the function <code>Lean.Compiler.LCNF.forEachDecl f</code> that executes <code>f</code> at each generated declaration.<br>\nTo generate the table above, I printed the size of all functions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Compiler.LCNF.forEachDecl</span> <span class=\"k\">fun</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{decl.size} {decl.name}\"</span>\n</code></pre></div>\n<p>Then used <code>sort -n out.txt | tail -50</code> to get the biggest ones.</p>",
        "id": 300668864,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664123399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/300668694\">said</a>:</p>\n<blockquote>\n<p>I guess huge proofs wouldn't show up though</p>\n</blockquote>\n<p>They should not.</p>",
        "id": 300668961,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664123444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/300668805\">said</a>:</p>\n<blockquote>\n<p>Why are there two results for <code>getHeadInfo</code> and why are they so different?</p>\n</blockquote>\n<p>I did not have time to investigate this issue yet. I am currently working on the <code>31593 Lean.Json.Parser.escapedChar</code> code explosion issue.</p>",
        "id": 300669027,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664123499
    },
    {
        "content": "<p>Another thing worth testing would be the code generated from <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> 's new do notation</p>",
        "id": 300669141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664123573
    },
    {
        "content": "<p>You can use <code>set_option trace.Compiler.result true</code> before a declaration to instruct Lean to display the new compiler generated (base phase) code for it.</p>",
        "id": 300669335,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664123695
    },
    {
        "content": "<p>The following auxiliary pp options are also useful.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean.Compiler</span>  <span class=\"c1\">-- enable scoped notation for `lcAny` and `lcErased`</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.funBinderTypes</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.letVarTypes</span> <span class=\"n\">true</span>  <span class=\"c1\">-- I seldom use this one, only when debugging</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span> <span class=\"c1\">-- I seldom use this one, it displays computationally irrelevant arguments.</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.result</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 300669792,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664124023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/300668657\">said</a>:</p>\n<blockquote>\n<p>This should also reveal issues in explosion of derive handler generated expressions as well, yes?</p>\n</blockquote>\n<p>Correct.</p>",
        "id": 300669896,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664124094
    },
    {
        "content": "<p>There is a new bug in the std/mathlib linter framework which I think is indirectly caused by this change. The <code>dupNamespace</code> linter tries to fire on <code>Lean.throwError._at_.Lean.throwErrorAt._at_.Lean.resolveGlobalConstNoOverload._at_._aux_Std_Tactic_NormCast_Lemmas___elabRules_commandAddElim__1.spec_1.spec_14.spec_14</code> (I guess because of the duplicated <code>spec_14</code>), but the declaration doesn't exist in the environment which seems impossible since we obtained the declaration by looping over the environment itself</p>",
        "id": 300688751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664138097
    },
    {
        "content": "<p>are the new compiler defs being added to the environment in a weird way?</p>",
        "id": 300688789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664138126
    },
    {
        "content": "<p>This is strange, we have a separate map for the new compiler. <br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/PhaseExt.lean#L23\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/LCNF/PhaseExt.lean#L23</a></p>\n<p>However, I am using the new API<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Environment.lean#L147\">https://github.com/leanprover/lean4/blob/master/src/Lean/Environment.lean#L147</a><br>\nto store in which module an auxiliary compiler declaration has been created.</p>",
        "id": 300689154,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664138412
    },
    {
        "content": "<p>Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">declName</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const2ModIdx.toArray</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">declName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isNone</span> <span class=\"k\">then</span>\n      <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"s2\">\"{declName}\"</span>\n</code></pre></div>\n<p>This returns lots of results, we're assuming it should be empty</p>",
        "id": 300689973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664139070
    },
    {
        "content": "<p>Ah, I guess your pointers are answering this question. The \"extra decls\" are in <code>const2ModIdx</code> even though they aren't in <code>constants</code></p>",
        "id": 300690218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664139296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/300690218\">said</a>:</p>\n<blockquote>\n<p>Ah, I guess your pointers are answering this question. The \"extra decls\" are in <code>const2ModIdx</code> even though they aren't in <code>constants</code></p>\n</blockquote>\n<p>Correct.</p>",
        "id": 300690383,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664139423
    },
    {
        "content": "<p>Here's the offending code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Get the list of all declarations in the specified package. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getDeclsInPackage</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">decls</span> <span class=\"bp\">←</span> <span class=\"n\">getDeclsInCurrModule</span>\n  <span class=\"n\">for</span> <span class=\"n\">decl</span> <span class=\"k\">in</span> <span class=\"n\">decls</span> <span class=\"k\">do</span>\n    <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">decl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span>\n  <span class=\"k\">let</span> <span class=\"n\">modules</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">header.moduleNames.map</span> <span class=\"o\">(</span><span class=\"n\">pkg.isPrefixOf</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">declName</span><span class=\"o\">,</span> <span class=\"n\">moduleIdx</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">const2ModIdx.toArray</span> <span class=\"k\">do</span> <span class=\"c1\">-- suspicious</span>\n    <span class=\"k\">if</span> <span class=\"n\">modules</span><span class=\"o\">[(</span><span class=\"n\">id</span> <span class=\"n\">moduleIdx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)]</span><span class=\"bp\">?</span> <span class=\"bp\">==</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">declName</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span>\n      <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">decls.push</span> <span class=\"n\">declName</span>\n  <span class=\"n\">pure</span> <span class=\"n\">decls</span>\n</code></pre></div>\n<p>It sounds like we should be looping over <code>constants</code> and just index into <code>const2ModIdx</code> instead of looping over the latter directly</p>",
        "id": 300690438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664139483
    },
    {
        "content": "<blockquote>\n<p>It sounds like we should be looping over constants and just index into const2ModIdx instead of looping over the latter directly</p>\n</blockquote>\n<p>Correct, or check whether <code>declName</code> is in <code>constants</code> or not.</p>",
        "id": 300690510,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664139538
    },
    {
        "content": "<p>Updated the <code>consts2ModIdx</code> docstring.</p>",
        "id": 300691205,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664140123
    },
    {
        "content": "<p>Oh wow, this change has almost doubled the nightly download size!  It adds 94 megabytes of zstd-compressed files to the releases. :-/</p>",
        "id": 300880829,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664218666
    },
    {
        "content": "<p>(This is almost as large as the previous oleans + llvm + clang + two binary builds (.so+.a)).)</p>",
        "id": 300881110,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1664218769
    },
    {
        "content": "<p>It has already got a bit better. Here are the Linux zstd file sizes </p>\n<ul>\n<li>09-20 138 Mb</li>\n<li>09-25 232 Mb</li>\n<li>09-27 180 Mb</li>\n</ul>",
        "id": 301140846,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664325688
    },
    {
        "content": "<p>The size of the biggest functions is also going down.</p>\n<ul>\n<li>09-26</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">size</span> <span class=\"bp\">|</span> <span class=\"n\">function</span> <span class=\"n\">name</span>\n<span class=\"c1\">--------------------------</span>\n<span class=\"mi\">2513</span> <span class=\"n\">Lean.Elab.Term.Do.ToCodeBlock.doForToCode</span>\n<span class=\"mi\">2529</span> <span class=\"n\">Lean.Parser.Tactic._aux_Init_Meta___macroRules_Lean_Parser_Tactic_declareSimpLikeTactic_1</span>\n<span class=\"mi\">2899</span> <span class=\"n\">Lean.Elab.Term.Do.ToTerm.matchNestedTermResult</span>\n<span class=\"mi\">3314</span> <span class=\"n\">_private.Lean.Elab.Quotation.0.Lean.Elab.Term.Quotation.getHeadInfo</span>\n</code></pre></div>\n<ul>\n<li>09-28</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2073</span> <span class=\"n\">Lean.Parser.Tactic._aux_Init_Meta___macroRules_Lean_Parser_Tactic_declareSimpLikeTactic_1</span>\n<span class=\"mi\">2118</span> <span class=\"n\">Lean.Elab.Term.Do.ToCodeBlock.doForToCode</span>\n<span class=\"mi\">2348</span> <span class=\"n\">Lean.Elab.Term.Do.ToTerm.matchNestedTermResult</span>\n<span class=\"mi\">2990</span> <span class=\"n\">_private.Lean.Elab.Quotation.0.Lean.Elab.Term.Quotation.getHeadInfo</span>\n</code></pre></div>",
        "id": 301351925,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664412394
    },
    {
        "content": "<ul>\n<li>09-29 </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1226</span> <span class=\"n\">Lean.Parser.Tactic._aux_Init_Meta___macroRules_Lean_Parser_Tactic_declareSimpLikeTactic_1</span>\n<span class=\"mi\">1297</span> <span class=\"n\">Lean.Elab.Term.Do.ToCodeBlock.doForToCode</span>\n<span class=\"mi\">1322</span> <span class=\"n\">Lean.Elab.Term.Do.ToTerm.matchNestedTermResult</span>\n<span class=\"mi\">1707</span> <span class=\"n\">Lean.Elab.Command.expandMacroArg.mkSyntaxAndPat</span>\n<span class=\"mi\">2103</span> <span class=\"n\">_private.Lean.Elab.Quotation.0.Lean.Elab.Term.Quotation.getHeadInfo</span>\n</code></pre></div>",
        "id": 301565485,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664507677
    },
    {
        "content": "<p>these metrics are really useful</p>",
        "id": 301569874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664512761
    },
    {
        "content": "<p>The recent improvements also helped with the Linux zstd file sizes. The Linux zstd files went from 180 to 160 Mb.</p>\n<ul>\n<li>09-20 138 Mb</li>\n<li>09-25 232 Mb</li>\n<li>09-27 180 Mb</li>\n<li>09-30 160 Mb</li>\n</ul>",
        "id": 301647339,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664544645
    },
    {
        "content": "<p>And this is including the old code generator stuff as well right? So we should see another significant decrease in size once we get around to removing that</p>",
        "id": 301678055,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664552862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20new.20compiler.20first.20phase.20is.20active/near/301678055\">said</a>:</p>\n<blockquote>\n<p>And this is including the old code generator stuff as well right? So we should see another significant decrease in size once we get around to removing that</p>\n</blockquote>\n<p>Yes, the .olean contains the old code generator code for its stage1, stage2, and low level IR</p>",
        "id": 301678295,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1664552933
    }
]