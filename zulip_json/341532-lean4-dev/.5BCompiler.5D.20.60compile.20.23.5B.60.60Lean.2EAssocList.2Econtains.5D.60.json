[
    {
        "content": "<p>So, I'm getting another compiler error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Compiler.compile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">Lean.AssocList.contains</span><span class=\"o\">]</span> <span class=\"c1\">-- outputs nothing</span>\n</code></pre></div>\n<p>I thought something was weird so I tried this too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Compiler</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Compiler.LCNF.getMonoDecl</span><span class=\"bp\">?</span> <span class=\"n\">name</span> <span class=\"bp\">|</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} was not found\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"found\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">find</span> <span class=\"bp\">``</span><span class=\"n\">Lean.AssocList.contains</span> <span class=\"c1\">-- Lean.AssocList.contains was not found</span>\n</code></pre></div>\n<p>So apparently the declaration just doesn't exist? What is going on here?</p>",
        "id": 315752047,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1671003523
    },
    {
        "content": "<p>Ah, wait, changing to <code>getBaseDecl?</code> works.</p>",
        "id": 315752576,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1671003736
    },
    {
        "content": "<p>Then, why is <code>Lean.AssocList.contains</code> getting eliminated in the <code>Mono</code> phase? Any explanation is appreciated! Thanks in advance</p>",
        "id": 315752935,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1671003845
    },
    {
        "content": "<p>Most likely because it gets specialized</p>",
        "id": 315757117,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1671005506
    },
    {
        "content": "<p>I thought so as well, but it seems that's not the case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Compiler</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"n\">compile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">Lean.HashMap.insert</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>when I test the following, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler.result</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">24</span>\n    <span class=\"kd\">def</span> <span class=\"n\">Lean.HashMap.insert._redArg</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Lean.HashMapImp</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span>\n      <span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Lean.HashMapImp</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Lean.HashMapImp.mk</span> <span class=\"n\">size.3</span> <span class=\"n\">buckets.4</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">buckets.4</span><span class=\"bp\">;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">x.2</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n        <span class=\"k\">let</span> <span class=\"n\">val.7</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Lean.HashMapImp.mkIdx</span> <span class=\"n\">_x.5</span> <span class=\"n\">_x.6</span> <span class=\"bp\">◾;</span>\n        <span class=\"k\">let</span> <span class=\"n\">bkt</span> <span class=\"o\">:=</span> <span class=\"n\">Array.uget</span> <span class=\"bp\">◾</span> <span class=\"n\">buckets.4</span> <span class=\"n\">val.7</span> <span class=\"bp\">◾;</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.8</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.AssocList.contains</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span> <span class=\"n\">x.1</span> <span class=\"n\">a</span> <span class=\"n\">bkt</span><span class=\"bp\">;</span>\n                 <span class=\"c1\">-- ^^^^ HERE</span>\n        <span class=\"n\">cases</span> <span class=\"n\">_x.8</span> <span class=\"o\">:</span> <span class=\"n\">Lean.HashMapImp</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.9</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span>\n          <span class=\"k\">let</span> <span class=\"n\">size'</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">size.3</span> <span class=\"n\">_x.9</span><span class=\"bp\">;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.10</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.AssocList.cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">bkt</span><span class=\"bp\">;</span>\n          <span class=\"k\">let</span> <span class=\"n\">buckets'</span> <span class=\"o\">:=</span> <span class=\"n\">Array.uset</span> <span class=\"bp\">◾</span> <span class=\"n\">buckets.4</span> <span class=\"n\">val.7</span> <span class=\"n\">_x.10</span> <span class=\"bp\">◾;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.11</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.numBucketsForCapacity</span> <span class=\"n\">size'</span><span class=\"bp\">;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.12</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.decLe</span> <span class=\"n\">_x.11</span> <span class=\"n\">_x.5</span><span class=\"bp\">;</span>\n          <span class=\"n\">cases</span> <span class=\"n\">_x.12</span> <span class=\"o\">:</span> <span class=\"n\">Lean.HashMapImp</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">let</span> <span class=\"n\">_x.13</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.HashMapImp.expand</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span> <span class=\"n\">x.2</span> <span class=\"n\">size'</span> <span class=\"n\">buckets'</span><span class=\"bp\">;</span>\n            <span class=\"n\">return</span> <span class=\"n\">_x.13</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">let</span> <span class=\"n\">_x.14</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.HashMapImp.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">size'</span> <span class=\"n\">buckets'</span><span class=\"bp\">;</span>\n            <span class=\"n\">return</span> <span class=\"n\">_x.14</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.15</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.AssocList.replace</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span> <span class=\"n\">x.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">bkt</span><span class=\"bp\">;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.16</span> <span class=\"o\">:=</span> <span class=\"n\">Array.uset</span> <span class=\"bp\">◾</span> <span class=\"n\">buckets.4</span> <span class=\"n\">val.7</span> <span class=\"n\">_x.15</span> <span class=\"bp\">◾;</span>\n          <span class=\"k\">let</span> <span class=\"n\">_x.17</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.HashMapImp.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">size.3</span> <span class=\"n\">_x.16</span><span class=\"bp\">;</span>\n          <span class=\"n\">return</span> <span class=\"n\">_x.17</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.result</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"kd\">def</span> <span class=\"n\">Lean.HashMap.insert</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Lean.HashMapImp</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.HashMap.insert._redArg</span> <span class=\"n\">x.1</span> <span class=\"n\">x.2</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.3</span>\n</code></pre></div>\n<p>which clearly calls <code>Lean.AssocList.contains</code>. (And this is after <code>mono</code>.)</p>",
        "id": 316114600,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1671130093
    },
    {
        "content": "<p>So, what is going on here? Any explanation would be greatly appreciated!</p>",
        "id": 316114929,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1671130193
    },
    {
        "content": "<p>Okay so I investigated a little further now. If I write my own polymorphic declaration the compiler trace output is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">init</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.init</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">5</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">_</span> <span class=\"n\">inst.1</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.3</span> <span class=\"n\">_x.4</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">_x.3</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.6</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">pullInstances</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.pullInstances</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">5</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">_</span> <span class=\"n\">inst.1</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.3</span> <span class=\"n\">_x.4</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">_x.3</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.6</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">cse</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.cse</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">5</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">_</span> <span class=\"n\">inst.1</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.3</span> <span class=\"n\">_x.4</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">_x.3</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.6</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">simp</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.7</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">floatLetIn</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.floatLetIn</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.7</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">findJoinPoints</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.findJoinPoints</span><span class=\"o\">]</span> <span class=\"n\">Found</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"n\">jp</span> <span class=\"n\">candidates</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.findJoinPoints</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.7</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">pullFunDecls</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.pullFunDecls</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.7</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">reduceJpArity</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.reduceJpArity</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.7</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">simp</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.7</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">eagerLambdaLifting</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.eagerLambdaLifting</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.7</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">specialize</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.specialize</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.7</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">simp</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">6</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.5</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.7</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">cse</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.cse</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">4</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">_x.4</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.5</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">saveBase</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.saveBase</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">4</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"n\">α</span> <span class=\"n\">inst.1</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">inst.1</span> <span class=\"bp\">#</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">_x.3</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">_x.2</span> <span class=\"n\">_x.4</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.5</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">toMono</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">simp</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">reduceJpArity</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">extendJoinPointContext</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">floatLetIn</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">reduceArity</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">commonJoinPointArgs</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">simp</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">floatLetIn</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">elimDeadBranches</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">lambdaLifting</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">extendJoinPointContext</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">simp</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">cse</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pass</span><span class=\"o\">:</span> <span class=\"n\">saveMono</span>\n</code></pre></div>\n<p>so it does indeed get filtered out for mono. It will also do this if I call another polymorphic declaration and the same filtering will also happen to the other polymorphic declaration.</p>\n<p>With a setup that calls it in a concrete situation I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span>  <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>I can see that foo and bar get specialized and the tracing on themselves does end after changing to the mono phase</p>\n<p>Digging further the same behaviour also happens with tracing on the AssocList.contains function directly. In AssocList.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">contains</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AssocList</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>         <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"n\">es</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"n\">a</span> <span class=\"bp\">||</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">es</span>\n</code></pre></div>\n<p>will produce the same log after the end of the base phase. Now interestingly <code>HashMap.insert</code> will not exhibit this behaviour and does in fact still call to AssocList.contains if the tracer is placed directly on the declaration. Now the reason this does not end up getting specialized is because <code>HashMap.insert</code> is not getting its BEq and Hashable instances via a type class parameter but instead as implicit arguments, basically dictionaries:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hw</span> <span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">m.insert</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span> <span class=\"n\">m'</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"k\">have</span> <span class=\"n\">aux</span> <span class=\"o\">:=</span> <span class=\"n\">WellFormed.insertWff</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">hw</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">aux</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>it's type is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>\n<p>What I suspect the Lean compiler is doing here (and I plan on verifying this) is that it will also keep the version of type class polymorphic functions before the mono phase in case someone decides to call them in this way so while you cannot necessarily get the <code>mono</code> declaration of <code>AssocList.contains</code> (but usually you'd want to since it could've been optimized better due to specialization) you can instead get the final base declaration as well.</p>\n<p>What I'm curious about is why <code>HashMap.insert</code> and friends are designed in this dictionary passing style instead of type class stuff. Maybe <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> or <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> have info on that?</p>",
        "id": 318279035,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672242512
    },
    {
        "content": "<p>Oh and probably <span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> wants to know this :D</p>",
        "id": 318279704,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672242750
    },
    {
        "content": "<p>Oh, that's an unexpected consequence of using <code>{_ : Hashable α}</code> instead of <code>[Hashable α]</code>. (cc: <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> ) Those changes are usually to work around elaboration behavior: <code>[Hashable α]</code> means to infer the class by typeclass inference and <code>{_ : Hashable α}</code> means to infer it by unification, which makes sense in this case since <code>m</code> carries the values of those types already. Gabriel went on a spree to make all these implicit a while back to improve typeclass inference performance on user code.</p>\n<p>My inclination is to say that the compiler shouldn't care at all about this difference and should not regress code because of it. It's a bit weird to be keying off the typeclass-ness in the first place, so I'm not sure what the best heuristic is, but one option (which is used sometimes in lean 3 too) is to look at whether the type is a <code>class</code>, regardless of the binder info used for the argument.</p>",
        "id": 318280306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672242975
    },
    {
        "content": "<p>But in theory you could modify a type class instance in line with something dynamic right? Wouldn't that make everything incredibly more complex? For example I could replace some functino at runtime based on an <code>IO</code> action, how is the compiler supposed to deal with that?</p>",
        "id": 318280730,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672243138
    },
    {
        "content": "<p>surely that wouldn't be monomorphized?</p>",
        "id": 318280957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672243215
    },
    {
        "content": "<p>Right but with your approach the compiler could try to do that no? Since it is passing a value of some type that is a <code>class</code> in the end.</p>",
        "id": 318281060,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672243257
    },
    {
        "content": "<p>ideally the check here should be more abstract / lambda-calculus-adjacent rather than looking at things like whether it is in <code>[]</code> brackets or uses a <code>class</code>. It should decide based on the structure of the value and/or input type whether monomorphization will be profitable</p>",
        "id": 318281189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672243302
    },
    {
        "content": "<p>We can test your example today by doing the same thing with a typeclass which wraps a dynamic value changed in an IO action</p>",
        "id": 318281430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672243386
    },
    {
        "content": "<p>my guess is that monomorphization simply isn't applicable unless certain constraints are met on the function, and changing the function dynamically would violate that constraint</p>",
        "id": 318281598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672243444
    },
    {
        "content": "<p>just like how you can't inline a recursive function</p>",
        "id": 318281647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672243456
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">a</span>  <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">newInst</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inst.add</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n  <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">bar</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">@</span><span class=\"n\">bar</span> <span class=\"n\">_</span> <span class=\"n\">newInst</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler.result</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n    <span class=\"kd\">def</span> <span class=\"n\">bar._at_.foo._at_.test.spec_0.spec_0</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">_x.1</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.2</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.result</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo._at_.test.spec_0._lam_0</span> <span class=\"n\">a</span> <span class=\"n\">x.1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.2</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.result</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">5</span>\n    <span class=\"kd\">def</span> <span class=\"n\">foo._at_.test.spec_0</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">newInst</span> <span class=\"o\">:=</span> <span class=\"n\">foo._at_.test.spec_0._lam_0</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.1</span> <span class=\"o\">:=</span> <span class=\"n\">bar._at_.foo._at_.test.spec_0.spec_0</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">a</span> <span class=\"n\">_x.1</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"bp\">◾</span> <span class=\"n\">newInst</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">_x.2</span> <span class=\"n\">_x.3</span><span class=\"bp\">;</span>\n      <span class=\"n\">return</span> <span class=\"n\">_x.4</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.result</span><span class=\"o\">]</span> <span class=\"n\">size</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">_x.1</span> <span class=\"o\">:=</span> <span class=\"n\">foo._at_.test.spec_0</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"n\">_x.1</span>\n</code></pre></div>\n<p>so indeed it only specializes once.</p>",
        "id": 318282102,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672243644
    },
    {
        "content": "<p>TIme to investigate the specialization pass!</p>",
        "id": 318282342,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672243748
    },
    {
        "content": "<p>Typeclasses aren't really special in any way in the type system, they have all the same possible behavior as regular values. Here's a factorial function implemented with typeclasses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">MyNat</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">myFact</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">[</span><span class=\"n\">MyNat</span><span class=\"o\">],</span> <span class=\"n\">MyNat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">myFact</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">n</span><span class=\"o\">⟩</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.n</span>\n</code></pre></div>",
        "id": 318282525,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672243809
    },
    {
        "content": "<p>this function should probably not be monomorphized</p>",
        "id": 318282588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672243842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20.60compile.20.23.5B.60.60Lean.2EAssocList.2Econtains.5D.60/near/318280306\">said</a>:</p>\n<blockquote>\n<p>Gabriel went on a spree to make all these implicit a while back to improve typeclass inference performance on user code.</p>\n</blockquote>\n<p>That's not my work. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> My best guess is that someone wanted to locally override a type class instance and didn't want to do the work to create a proper type alias.</p>",
        "id": 318328279,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672263466
    },
    {
        "content": "<p>The only thing I've been recently suggesting is to make some arguments implicit as a temporary workaround for 1901.</p>",
        "id": 318328368,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672263503
    }
]