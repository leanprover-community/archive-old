[
    {
        "content": "<p>I am curious about how Code size is computed. It this just a measure of what changed or is there a deeper significance?</p>\n<p>Here is the code that computes the Code size:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Code.size</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Code</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"n\">c</span> <span class=\"mi\">0</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Code</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">jp</span> <span class=\"n\">decl</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"k\">fun</span> <span class=\"n\">decl</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">go</span> <span class=\"n\">decl.value</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.alts.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">alt</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">alt.getCode</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">jmp</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">return</span> <span class=\"bp\">..</span> <span class=\"bp\">|</span> <span class=\"n\">unreach</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"c1\">-- `return` &amp; `unreach` have weight zero</span>\n</code></pre></div>\n<p>The let is the most obvious one. But why .jmp adds weight, but not .jp? Why does cases increments the weight in addition to each of the alternatives?</p>",
        "id": 303315335,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1665430193
    },
    {
        "content": "<p>a join point / function declaration doesn't actually <em>do</em> anything, it just declares a binding to be used later. A jump is an actual instruction</p>",
        "id": 303316168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665430613
    },
    {
        "content": "<p>Similarly a cases statement is an actual operation, a discriminant check, and I guess you can argue the additional +1 in the arms as saying that larger matches are more expensive (they usually lower to a chain of comparisons, so approximately linear work)</p>",
        "id": 303316367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665430724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 303316646,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665430891
    }
]