[
    {
        "content": "<p>Hi, I've gotten sucked into the <code>MetavarContext.lean</code> file (I know it's \"ancient\" at this point haha, just really want to get a handle on something relating to metavariables before I move on to frontend stuff) and I understand most of the motivation behind the code there at this point. One thing that has puzzled me a bit however, is this part of <code>elimMVar</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> If `mvarId` is the lhs of a delayed assignment `?m #[x_1, ... x_n] := ?mvarPending`,</span>\n<span class=\"cm\">   then `nestedFVars` is `#[x_1, ..., x_n]`.</span>\n<span class=\"cm\">   In this case, `newMVarId` is also `syntheticOpaque` and we add the delayed assignment delayed assignment</span>\n<span class=\"cm\">   ```</span>\n<span class=\"cm\">   ?newMVar #[y_1, ..., y_m, x_1, ... x_n] := ?m</span>\n<span class=\"cm\">   ```</span>\n<span class=\"cm\">   where `#[y_1, ..., y_m]` is `toRevert` after `collectForwardDeps`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvarIdPending</span><span class=\"o\">,</span> <span class=\"n\">nestedFVars</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getDelayedMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">fvars</span><span class=\"o\">,</span> <span class=\"n\">mvarIdPending</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">mvarIdPending</span><span class=\"o\">,</span> <span class=\"n\">fvars</span><span class=\"o\">)</span>\n<span class=\"n\">assignDelayedMVar</span> <span class=\"n\">newMVarId</span> <span class=\"o\">(</span><span class=\"n\">toRevert</span> <span class=\"bp\">++</span> <span class=\"n\">nestedFVars</span><span class=\"o\">)</span> <span class=\"n\">mvarIdPending</span>\n</code></pre></div>\n<p>Like, I understand exactly what we're doing here -- we're just extending the free variables that come from the original delayed assignment with <code>toRevert</code> from this one, and then associating it with the same underlying original metavariable. And I know how this case can arise in terms of how the function is called, if we call it first on a <code>syntheticOpaque</code> metavar with some free variables <code>xs</code> in the context, and then call it later on the resulting delayed assigned metavariable with a set of free variables <code>ys</code> that includes some free variables not in <code>xs</code>. I'm just trying to wrap my head around when exactly this would arise. Are there any MWEs you know of that fall into this case? Also having some concrete examples to walk through would really help me out with my understanding of this file hahaha. Thanks!</p>",
        "id": 298694912,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1663124086
    },
    {
        "content": "<p>(also lmk if this topic is better suited for the general Lean 4 stream, not sure if this is the right place for newbie questions relating to things not being actively developed atm)</p>",
        "id": 298694991,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1663124187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> Happy to do a walkthrough of the <code>MetavarContext.lean</code> in our next front-end meeting. It may also be a good opportunity to document the file better and simplify the implementation.<br>\n Not sure I fully understood the question, but I will try to give some pointers.</p>\n<ul>\n<li>Metavariables are holes/goals. They have a local context and a type. When we assign a value <code>e</code> to a metavariable <code>?m</code> with local context <code>ctx</code>, all free variables in <code>e</code> must be in <code>ctx</code>.</li>\n<li>Synthetic opaque metavariables <code>?m</code> are synthesized using procedures (e.g., by executing a tactic). These procedures may be on a to-do list, and are responsible for performing the assignment <code>?m := v</code></li>\n<li>When we create a (dependent) arrow or a lambda abstraction, we convert free variables into bound variables.</li>\n<li>Suppose we want to create a lambda abstraction using the term <code>Nat.add x ?m</code> by abstracting the free variable <code>x</code>. That is, we want to create <code>fun x =&gt; Nat.add x ?m</code>. Note that, the <code>x</code> in the body of the lambda is the bound variable <code>Exp.bvar 0</code>. Now, suppose that <code>x</code> is in the local context of <code>?m</code>. Now, suppose later we assign <code>?m := x</code>. We need to make sure that the free variable <code>x</code> also becomes <code>Expr.bvar 0</code>. Let's focus on the case <code>?m</code> is a synthetic opaque metavariable. Then, we create a new metavariable <code>?n</code> that does not contain the free variable <code>x</code> in its local context, and we add the delayed assignment <code>?n #[x] := ?m</code>. We can view this delay assignment as follows: when <code>?m</code> is assigned, abstract <code>x</code> and assign the result to <code>?n</code>. Then, our resulting lambda is <code>fun x =&gt; Nat.add x ?n</code>.</li>\n<li>Now, suppose we want to construct <code>fun y =&gt; fun x =&gt; Nat.add x ?n</code>, and <code>y</code> is in the local context of <code>?n</code>. This scenario will trigger the code in your message. </li>\n</ul>\n<p>To trigger the scenario, we need</p>\n<ul>\n<li>An opaque synthetic metavariable, we can create one using tactics.</li>\n<li>Abstract a term containing the metavariable, and then abstract the term again.</li>\n</ul>",
        "id": 298696865,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663125877
    },
    {
        "content": "<p>Here is an artificial example to reach the branch</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">fvars</span><span class=\"o\">,</span> <span class=\"n\">mvarIdPending</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">mvarIdPending</span><span class=\"o\">,</span> <span class=\"n\">fvars</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">constructor</span>\n  <span class=\"n\">h</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 298697608,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663126550
    },
    {
        "content": "<p>Thank you! Yes, a walkthough would be great, but no pressure at all if there's another topic more directly related to frontend that you wanted to talk about instead. I was just looking for a concrete example that would trigger it, so you've exactly answered my question :)</p>\n<p>I'll have to think about that a bit more, but I'm guessing that the <code>by constructor</code> tactic is what introduces the synthetic opaque metavar here?</p>",
        "id": 298698213,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1663127133
    },
    {
        "content": "<p>If we put an <code>assert! false</code> in the branch above. That is, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">fvars</span><span class=\"o\">,</span> <span class=\"n\">mvarIdPending</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"n\">false</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">mvarIdPending</span><span class=\"o\">,</span> <span class=\"n\">fvars</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then execute the example in the debugger with <code>LEAN_ABORT_ON_PANIC</code> set,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"n\">LEAN_ABORT_ON_PANIC</span><span class=\"bp\">=</span><span class=\"mi\">1</span> <span class=\"n\">gdb</span> <span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">(</span><span class=\"n\">gdb</span><span class=\"o\">)</span> <span class=\"n\">run</span>  <span class=\"n\">mvarEx.lean</span>\n</code></pre></div>\n<p>Where <code>mvarEx.lean</code> contains the example above, we get a stack trace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Starting</span> <span class=\"n\">program</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">leodemoura</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"n\">mvarEx.lean</span>\n<span class=\"o\">[</span><span class=\"n\">Thread</span> <span class=\"n\">debugging</span> <span class=\"n\">using</span> <span class=\"n\">libthread_db</span> <span class=\"n\">enabled</span><span class=\"o\">]</span>\n<span class=\"n\">Using</span> <span class=\"n\">host</span> <span class=\"n\">libthread_db</span> <span class=\"n\">library</span> <span class=\"s2\">\"/lib/x86_64-linux-gnu/libthread_db.so.1\"</span><span class=\"bp\">.</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">_private.Lean.MetavarContext.0.Lean.MetavarContext.MkBinding.elimMVar</span> <span class=\"n\">Lean.MetavarContext</span><span class=\"o\">:</span><span class=\"mi\">1075</span><span class=\"o\">:</span><span class=\"mi\">45</span><span class=\"o\">:</span> <span class=\"n\">assertion</span> <span class=\"n\">violation</span><span class=\"o\">:</span> <span class=\"n\">false</span>\n<span class=\"n\">backtrace</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">leodemoura</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">(</span><span class=\"n\">lean_panic_fn</span><span class=\"bp\">+</span><span class=\"mi\">0xa3</span><span class=\"o\">)[</span><span class=\"mi\">0x7ffff7b21a33</span><span class=\"o\">]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">leodemoura</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">(</span><span class=\"n\">l_panic___at___private_Lean_MetavarContext_0__Lean_MetavarContext_MkBinding_elimMVar___spec__6</span><span class=\"bp\">+</span><span class=\"mi\">0x19</span><span class=\"o\">)[</span><span class=\"mi\">0x7ffff78a59f9</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">leodemoura</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_mkLambdaFVars</span><span class=\"bp\">+</span><span class=\"mi\">0x400</span><span class=\"o\">)[</span><span class=\"mi\">0x7ffff69049f0</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">leodemoura</span><span class=\"bp\">/</span><span class=\"n\">projects</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">release</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Elab_Term_elabMutualDef_go___lambda__3</span><span class=\"bp\">+</span><span class=\"mi\">0x3</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>That is, we got the assertion when trying to abstract the <code>(x : True)</code> here<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/MutualDef.lean#L248\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/MutualDef.lean#L248</a></p>",
        "id": 298698308,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663127233
    },
    {
        "content": "<blockquote>\n<p>I'll have to think about that a bit more, but I'm guessing that the by constructor tactic is what introduces the synthetic opaque metavar here?</p>\n</blockquote>\n<p>Correct.</p>",
        "id": 298698323,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663127261
    },
    {
        "content": "<p>The first abstraction occurs at <code>fun _ =&gt; by constructor</code>, and the second when abstracting <code>(x : True)</code>.</p>",
        "id": 298698390,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663127315
    },
    {
        "content": "<p>Thank you very much! I'm going to give this another pass tomorrow, and try out that <code>gdb</code> run for myself.</p>",
        "id": 298698615,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1663127542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/Multiply.20delayed.20assignments.3F/near/298697608\">said</a>:</p>\n<blockquote>\n<p>Here is an artificial example to reach the branch</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">{</span> <span class=\"n\">fvars</span><span class=\"o\">,</span> <span class=\"n\">mvarIdPending</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">mvarIdPending</span><span class=\"o\">,</span> <span class=\"n\">fvars</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Example:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">→</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">constructor</span>\n  <span class=\"n\">h</span> <span class=\"n\">x</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is there some code/documentation I can read into to better understand the process/rationale of creating an opaque synthetic metavariable here?</p>",
        "id": 299370619,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1663455596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373814\">@Rish Vaishnav</span> I am not exactly sure what the question is. We can start the next frontend meeting (on Tuesday) discussing that. I think this is an important topic, and we would all benefit from additional documentation.</p>",
        "id": 299434736,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663507618
    },
    {
        "content": "<p>No worries! Yes that sounds like a great plan for Tuesday.</p>",
        "id": 299435135,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1663507811
    },
    {
        "content": "<p>I suppose I could rephrase my question as: which file is the logic that makes a synthetic opaque metavar for the <code>by constructor</code> tactic in the example above defined in? Is that part of the logic for the <code>constructor</code> tactic itself, or the more general tactic framework?</p>",
        "id": 299436919,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1663508973
    },
    {
        "content": "<p>(go-to-definition on <code>constructor</code> didn't work for me)</p>",
        "id": 299436992,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1663509008
    },
    {
        "content": "<p>The <code>constructor</code> tactic is a small wrapper around <code>apply</code> <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Constructor.lean#L25\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Constructor.lean#L25</a><br>\nThe <code>apply</code> tactic is creating the opaque metavariables here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Apply.lean#L140\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Apply.lean#L140</a></p>",
        "id": 299437698,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663509437
    },
    {
        "content": "<p>Ah, thank you! I'll investigate those files.</p>",
        "id": 299437824,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1663509502
    }
]