[
    {
        "content": "<p>The current/old compiler has a fixed set of primitives it performs constant propagation.<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/ConstFolding.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Compiler/ConstFolding.lean</a><br>\nThis module exports two primitives <code>foldBinOp</code> and <code>foldUnOp</code> which are used by <code>csimp.cpp</code>. The <code>csimp</code> pass is applied before and after erasure. This is why these two functions have a <code>beforeErasure</code> parameter.<br>\nIn the new compiler, we want a more flexible and extensible design where we can easily add new primitives.<br>\nAs a reference, here is the GHC implementation: <a href=\"https://github.com/ghc/ghc/blob/master/compiler/GHC/Core/Opt/ConstantFold.hs\">https://github.com/ghc/ghc/blob/master/compiler/GHC/Core/Opt/ConstantFold.hs</a><br>\nNote that GHC has support \"zero elements\", \"idempotency\", etc. We are going to add support for letting users register theorems as rewriting rules. In principle, support for \"zero elements\", and \"idempotency\" can be done using theorems. However, there is the issue of performance. We should also keep in mind that we only have sufficient information for using theorems in phase 1, but we can use constant folding in any phase. We are also planning to invoke constant folding from <code>Simp.lean</code> which allows the constant folding and other <code>Simp</code> optimizations to \"play together\" (e.g., speculative inlining). </p>\n<p>Here are some initial design notes:</p>\n<ul>\n<li>We have a global table from <code>Name</code> (the declaration name, e.g. <code>Nat.add</code>, <code>UInt16.mul</code>, etc) to \"folding function\". The function should be in <code>CompilerM</code> since it will need to access the local context. The function takes an <code>Expr</code> and returns a new <code>Expr</code>. That is, the folding function has type <code>Expr -&gt; CompilerM Expr</code></li>\n<li>We add new primitives using <code>builtin_initialize</code> </li>\n<li>We need helper functions for detecting whether a LCNF parameter is a literal or not. Here is an example of LCNF code at phase 1 that we want to reduce</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.17</span> <span class=\"o\">:=</span> <span class=\"n\">UInt16.ofNat</span> <span class=\"n\">_x.4</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.19</span> <span class=\"o\">:=</span> <span class=\"n\">UInt16.ofNat</span> <span class=\"n\">_x.7</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.21</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.22</span> <span class=\"o\">:=</span> <span class=\"n\">UInt16.ofNat</span> <span class=\"n\">_x.21</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.23</span> <span class=\"o\">:=</span> <span class=\"n\">UInt16.mul</span> <span class=\"n\">_x.22</span> <span class=\"n\">_x.19</span>  <span class=\"c1\">-- Target for constant folding</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.24</span> <span class=\"o\">:=</span> <span class=\"n\">UInt16.add</span> <span class=\"n\">_x.17</span> <span class=\"n\">_x.23</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.26</span> <span class=\"o\">:=</span> <span class=\"n\">UInt16.add</span> <span class=\"n\">x</span> <span class=\"n\">_x.24</span>\n      <span class=\"n\">_x.26</span>\n</code></pre></div>\n<p>Both, <code>UInt16.mul _x.22 _x.19</code> is a target for constant folding. since <code>_x.22</code> is <code>UInt16.ofNat 2</code>, and <code>_x.19</code> is <code>UInt16.ofNat 3</code>. We can find this information using <code>findLetDecl?</code>. In this example, the folding function for <code>UInt16.mul</code> wants to return <code>UInt16.ofNat 6</code>, but this is not a valid LCNF term, we must use <code>mkAuxLetDecl</code> to create <code>let _x.27 := 6</code>, and then return <code>UInt6.ofNat  _x.27</code>.</p>",
        "id": 299327837,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663424274
    },
    {
        "content": "<p>Okay I got a basic generic constant folding framework that respects LCNF and generates new valid LCNF expressions done now, I'm not quite sure about the integration point into the simplifier yet (basically you give it a <code>LetDecl</code> and it returns an <code>Option (Array LetDecl)</code> where if it is a <code>some</code> the <code>Array</code> contains the simplified <code>LetDecl</code> + optional auxiliary decls to keep respecting LCNF)</p>\n<p>For debugging purposes I just added it to <code>LCNF.Simp.simp</code>and printed its output, its looking good so far (I Added support for folding UInt16.add Nat.add and Nat.succ):</p>\n<p>UInt16:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">UInt16</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">what</span> <span class=\"n\">we</span> <span class=\"n\">got</span> <span class=\"k\">from</span> <span class=\"kd\">constant</span> <span class=\"n\">folding</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"k\">let</span> <span class=\"n\">_x.23</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">_x.20</span> <span class=\"o\">:=</span> <span class=\"n\">UInt16.ofNat</span> <span class=\"n\">_x.23</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Nat:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n  <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">what</span> <span class=\"n\">we</span> <span class=\"n\">got</span> <span class=\"k\">from</span> <span class=\"kd\">constant</span> <span class=\"n\">folding</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"k\">let</span> <span class=\"n\">_x.18</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Array/Nat.succ:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">what</span> <span class=\"n\">we</span> <span class=\"n\">got</span> <span class=\"k\">from</span> <span class=\"kd\">constant</span> <span class=\"n\">folding</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"k\">let</span> <span class=\"n\">_x.54</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">Found</span> <span class=\"n\">folder</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"n\">Nat.succ</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">what</span> <span class=\"n\">we</span> <span class=\"n\">got</span> <span class=\"k\">from</span> <span class=\"kd\">constant</span> <span class=\"n\">folding</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"k\">let</span> <span class=\"n\">_x.55</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">Found</span> <span class=\"n\">folder</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"n\">Nat.succ</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">what</span> <span class=\"n\">we</span> <span class=\"n\">got</span> <span class=\"k\">from</span> <span class=\"kd\">constant</span> <span class=\"n\">folding</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"k\">let</span> <span class=\"n\">_x.56</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">Found</span> <span class=\"n\">folder</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"n\">Nat.succ</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">what</span> <span class=\"n\">we</span> <span class=\"n\">got</span> <span class=\"k\">from</span> <span class=\"kd\">constant</span> <span class=\"n\">folding</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"k\">let</span> <span class=\"n\">_x.57</span> <span class=\"o\">:=</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">Found</span> <span class=\"n\">folder</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"n\">Nat.succ</span>\n<span class=\"o\">[</span><span class=\"n\">Compiler.simp</span><span class=\"o\">]</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">what</span> <span class=\"n\">we</span> <span class=\"n\">got</span> <span class=\"k\">from</span> <span class=\"kd\">constant</span> <span class=\"n\">folding</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"k\">let</span> <span class=\"n\">_x.58</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I guess the integration etc. is a good topic for Monday?</p>",
        "id": 299425040,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1663502475
    },
    {
        "content": "<p>Awesome!</p>\n<blockquote>\n<p>I guess the integration etc. is a good topic for Monday?</p>\n</blockquote>\n<p>Yes, it is a great topic for Monday <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> Let's do it.</p>",
        "id": 299434503,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663507486
    }
]