[
    {
        "content": "<p>Is it expected that when we test two projections <code>x.1 =?= y.1</code> for defeq, we try to test <code>x =?= y</code> even if <code>x</code> and <code>y</code> might not have the same type at all?</p>",
        "id": 322534871,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674227058
    },
    {
        "content": "<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Pair</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Triple</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myPair</span> <span class=\"o\">:</span> <span class=\"n\">Pair</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myTriple</span> <span class=\"o\">:</span> <span class=\"n\">Triple</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">myPair.1</span> <span class=\"bp\">=</span> <span class=\"n\">myTriple.1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 322534908,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674227064
    },
    {
        "content": "<p>trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Bool</span> <span class=\"bp\">=?=</span> <span class=\"n\">Bool</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Bool</span> <span class=\"bp\">=?=</span> <span class=\"n\">Bool</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Bool</span> <span class=\"bp\">=?=</span> <span class=\"n\">Bool</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Bool</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.796</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"n\">Bool</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.796</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.795</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Bool</span> <span class=\"bp\">=?=</span> <span class=\"n\">Bool</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Pair</span> <span class=\"bp\">=?=</span> <span class=\"n\">Pair</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Triple</span> <span class=\"bp\">=?=</span> <span class=\"n\">Triple</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">myPair.x</span> <span class=\"bp\">=</span> <span class=\"n\">myTriple.a</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.800</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.800</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Bool</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.799</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"n\">Bool</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.799</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.798</span> <span class=\"bp\">=?=</span> <span class=\"kt\">Type</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">myPair.x</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.800</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"n\">myPair.x</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.800</span> <span class=\"o\">[</span><span class=\"n\">assignable</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Bool</span> <span class=\"bp\">=?=</span> <span class=\"n\">Bool</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">myTriple.a</span> <span class=\"bp\">=?=</span> <span class=\"n\">myPair.x</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">myTriple.a</span> <span class=\"bp\">=?=</span> <span class=\"n\">myPair.x</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">myTriple.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">myPair.1</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">myTriple</span> <span class=\"bp\">=?=</span> <span class=\"n\">myPair</span>    <span class=\"bp\">&lt;</span><span class=\"c1\">--- ???</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Triple.mk</span> <span class=\"bp\">=?=</span> <span class=\"n\">Pair.mk</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span>\n            <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">true</span> <span class=\"bp\">=?=</span> <span class=\"n\">true</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">myPair.x</span> <span class=\"bp\">=</span> <span class=\"n\">myPair.x</span> <span class=\"bp\">=?=</span> <span class=\"n\">myPair.x</span> <span class=\"bp\">=</span> <span class=\"n\">myTriple.a</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">myPair.x</span> <span class=\"bp\">=?=</span> <span class=\"n\">myPair.x</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">myPair.x</span> <span class=\"bp\">=?=</span> <span class=\"n\">myTriple.a</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">myPair.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">myTriple.1</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">myPair</span> <span class=\"bp\">=?=</span> <span class=\"n\">myTriple</span>    <span class=\"bp\">&lt;</span><span class=\"c1\">--- ???</span>\n        <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Pair.mk</span> <span class=\"bp\">=?=</span> <span class=\"n\">Triple.mk</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n          <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">true</span> <span class=\"bp\">=?=</span> <span class=\"n\">true</span>\n  <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Bool</span> <span class=\"bp\">=?=</span> <span class=\"n\">Bool</span>\n</code></pre></div>",
        "id": 322534981,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674227086
    },
    {
        "content": "<p>Even if this is intentional, it seems like potentially you could do a lot of work reducing <code>x</code> and <code>y</code> without noticing that the types were not even the same in the first place</p>",
        "id": 322535138,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674227130
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2003#issuecomment-1380524624\">https://github.com/leanprover/lean4/pull/2003#issuecomment-1380524624</a> seems related</p>",
        "id": 322536803,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1674227528
    },
    {
        "content": "<p>Right and 2003 changes this behavior somewhat from what I remember (it checks that <code>x</code> and <code>y</code> are at least instances of the same <code>structure</code>, though other parameters in the type could still differ)</p>",
        "id": 322536973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674227574
    },
    {
        "content": "<p>e.g. if the first field in the structure is of some constant type, like <code>Int</code></p>",
        "id": 322537077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674227609
    },
    {
        "content": "<p>That PR also contains a bug fix for the issue you're seeing: <a href=\"https://github.com/leanprover/lean4/pull/2003/commits/31242cb497aa1c2c4e8de579df40dcb3327c0638\">https://github.com/leanprover/lean4/pull/2003/commits/31242cb497aa1c2c4e8de579df40dcb3327c0638</a></p>",
        "id": 322598297,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674242765
    }
]