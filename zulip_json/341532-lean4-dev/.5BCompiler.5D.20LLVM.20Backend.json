[
    {
        "content": "<p>The previously working windows build for LLVM 14 fails on <a href=\"https://github.com/bollu/lean4/actions/runs/3155790042/jobs/5134833368#step:8:4066\">LLVM 15</a>, this time thanks to not knowing <code>nullptr_t</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">D</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">__memory</span><span class=\"bp\">/</span><span class=\"n\">unique_ptr.h</span><span class=\"o\">:</span><span class=\"mi\">594</span><span class=\"o\">:</span><span class=\"mi\">45</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">type</span> <span class=\"n\">name</span> <span class=\"bp\">'</span><span class=\"n\">nullptr_t'</span>\n<span class=\"n\">operator</span><span class=\"bp\">==</span><span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"n\">unique_ptr</span><span class=\"bp\">&lt;</span><span class=\"n\">_T1</span><span class=\"o\">,</span> <span class=\"n\">_D1</span><span class=\"bp\">&gt;&amp;</span> <span class=\"n\">__x</span><span class=\"o\">,</span> <span class=\"n\">nullptr_t</span><span class=\"o\">)</span> <span class=\"n\">_NOEXCEPT</span>\n</code></pre></div>",
        "id": 301563442,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1664505800
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"122318\">@Tobias Grosser</span></p>",
        "id": 301563444,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1664505803
    },
    {
        "content": "<p>I've seen similarly puzzling errors before, it's usually due to (order of) include directories. The relevant setup line is <a href=\"https://github.com/leanprover/lean4/blob/9e6814b09e7ca9cdfbce219d6181ce5cf19cc63a/script/prepare-llvm-mingw.sh#L38\">https://github.com/leanprover/lean4/blob/9e6814b09e7ca9cdfbce219d6181ce5cf19cc63a/script/prepare-llvm-mingw.sh#L38</a></p>",
        "id": 301592564,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664525867
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I need another flag for the macOS build: <code>DLLVM_ENABLE_ZLIB=OFF</code>. I started a build against <code>bollu/lean-llvm</code>:<br>\n<a href=\"https://github.com/bollu/lean-llvm/pull/5\">https://github.com/bollu/lean-llvm/pull/5</a></p>\n<p>The PR against <code>lean4/lean-llvm</code> is here: <a href=\"https://github.com/leanprover/lean-llvm/pull/6\">https://github.com/leanprover/lean-llvm/pull/6</a></p>",
        "id": 301656098,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1664547026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> As I've written before, there was a specific issue or feature that led me to include zlib. Unfortunately I don't remember the specifics.</p>",
        "id": 301679714,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664553320
    },
    {
        "content": "<p>Ah, I see, so you'd like to keep <code>zlib</code> around. Very well, I'll investigate how we can get zlib working</p>",
        "id": 301682046,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1664553856
    },
    {
        "content": "<ul>\n<li>nix - llvm 15 WIP  <a href=\"https://github.com/NixOS/nixpkgs/issues/191132\">https://github.com/NixOS/nixpkgs/issues/191132</a></li>\n<li>macos: zlib dependency (add to CMake?)</li>\n<li>windows: <code>nullptr_t</code> error showed up suddenly (<a href=\"https://github.com/leanprover/lean4/actions/runs/3160293349/jobs/5144580974#step:8:3197\">https://github.com/leanprover/lean4/actions/runs/3160293349/jobs/5144580974#step:8:3197</a>). </li>\n<li>linux release: <em>should</em> work now (<code>llvm/lib</code> changed the shipping location of libraries like <code>libunwind</code>, so the loader was unable to find the dependency when we try to run <code>clang</code>.</li>\n</ul>",
        "id": 301701168,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1664559724
    },
    {
        "content": "<p><strong>Plan for this week</strong></p>\n<ul>\n<li>See how Rust handles the pain of LLVM shipping.</li>\n<li>Make slides for LLVM dev meeting in November. <strong>Everyone:</strong> If we have questions about how best to use LLVM in Lean, this is a great time to ask! I can add the questions to my slides, and chat with folks at <code>llvm-dev</code> for answers.</li>\n<li>Get the builds working (<span class=\"user-mention\" data-user-id=\"515083\">@Tom</span>  's spare cycles for debugging the window failure is super appreciated!)</li>\n</ul>",
        "id": 301704791,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1664560942
    },
    {
        "content": "<p>The <code>llvm-config</code> tool on macOS, when queried for system libraries, asks for <code>zstd</code> as well as <code>zlib</code>, and it's these dependencies which are breaking the macOS build.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">09</span><span class=\"bp\">-</span><span class=\"mi\">30</span><span class=\"n\">T17</span><span class=\"o\">:</span><span class=\"mi\">04</span><span class=\"o\">:</span><span class=\"mi\">28</span><span class=\"bp\">.</span><span class=\"mi\">3690430</span><span class=\"n\">Z</span> <span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">config</span><span class=\"o\">:</span> <span class=\"n\">libdir</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib'</span> <span class=\"bp\">|</span> <span class=\"n\">ldflags</span> <span class=\"bp\">''</span> <span class=\"bp\">|</span> <span class=\"n\">libs</span> <span class=\"bp\">'-</span><span class=\"n\">lLLVMWindowsManifest</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMWindowsDriver</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMXRay</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMLibDriver</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMDlltoolDriver</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMCoverage</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMLineEditor</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMX86TargetMCA</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMX86Disassembler</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMX86AsmParser</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMX86CodeGen</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMX86Desc</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMX86Info</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMWebAssemblyDisassembler</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMWebAssemblyAsmParser</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMWebAssemblyCodeGen</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMWebAssemblyDesc</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMWebAssemblyUtils</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMWebAssemblyInfo</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAArch64Disassembler</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAArch64AsmParser</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAArch64CodeGen</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAArch64Desc</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAArch64Utils</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAArch64Info</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMOrcJIT</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMMCJIT</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMJITLink</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMInterpreter</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMExecutionEngine</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMRuntimeDyld</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMOrcTargetProcess</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMOrcShared</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMDWP</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMDebugInfoGSYM</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMOption</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMObjectYAML</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMObjCopy</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMMCA</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMMCDisassembler</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMLTO</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMPasses</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMCFGuard</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMCoroutines</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMObjCARCOpts</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMipo</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMVectorize</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMLinker</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMInstrumentation</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMFrontendOpenMP</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMFrontendOpenACC</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMExtensions</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMDWARFLinker</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMGlobalISel</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMMIRParser</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAsmPrinter</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMSelectionDAG</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMCodeGen</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMIRReader</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAsmParser</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMInterfaceStub</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMFileCheck</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMFuzzMutate</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMTarget</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMScalarOpts</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMInstCombine</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAggressiveInstCombine</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMTransformUtils</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMBitWriter</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMAnalysis</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMProfileData</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMSymbolize</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMDebugInfoPDB</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMDebugInfoMSF</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMDebugInfoDWARF</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMObject</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMTextAPI</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMMCParser</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMMC</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMDebugInfoCodeView</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMBitReader</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMFuzzerCLI</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMCore</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMRemarks</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMBitstreamReader</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMBinaryFormat</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMTableGen</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMSupport</span> <span class=\"bp\">-</span><span class=\"n\">lLLVMDemangle'</span> <span class=\"bp\">|</span> <span class=\"n\">system</span> <span class=\"n\">libs</span> <span class=\"bp\">'-</span><span class=\"n\">lm</span> <span class=\"bp\">-</span><span class=\"n\">lz</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libzstd.1.5.2.dylib'</span> <span class=\"bp\">|</span> <span class=\"n\">cxxflags</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"kn\">include</span> <span class=\"bp\">-</span><span class=\"n\">std</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">++</span><span class=\"mi\">14</span> <span class=\"bp\">-</span><span class=\"n\">stdlib</span><span class=\"bp\">=</span><span class=\"n\">libc</span><span class=\"bp\">++</span>  <span class=\"bp\">-</span><span class=\"n\">fno</span><span class=\"bp\">-</span><span class=\"n\">exceptions</span> <span class=\"bp\">-</span><span class=\"n\">fno</span><span class=\"bp\">-</span><span class=\"n\">rtti</span> <span class=\"bp\">-</span><span class=\"n\">D__STDC_CONSTANT_MACROS</span> <span class=\"bp\">-</span><span class=\"n\">D__STDC_FORMAT_MACROS</span> <span class=\"bp\">-</span><span class=\"n\">D__STDC_LIMIT_MACROS</span> <span class=\"bp\">|</span> <span class=\"n\">includedir</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"kn\">include</span>\n</code></pre></div>\n<p>Notice the presence of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">system</span> <span class=\"n\">libs</span> <span class=\"bp\">'-</span><span class=\"n\">lm</span> <span class=\"bp\">-</span><span class=\"n\">lz</span> <span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"kn\">local</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libzstd.1.5.2.dylib'</span>\n</code></pre></div>\n<p>This leads to the build to break at :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">09</span><span class=\"bp\">-</span><span class=\"mi\">30</span><span class=\"n\">T17</span><span class=\"o\">:</span><span class=\"mi\">32</span><span class=\"o\">:</span><span class=\"mi\">59</span><span class=\"bp\">.</span><span class=\"mi\">2815460</span><span class=\"n\">Z</span> <span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">library</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"n\">for</span> <span class=\"bp\">-</span><span class=\"n\">lz</span>\n\n<span class=\"bp\">...</span>\n<span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">09</span><span class=\"bp\">-</span><span class=\"mi\">30</span><span class=\"n\">T17</span><span class=\"o\">:</span><span class=\"mi\">32</span><span class=\"o\">:</span><span class=\"mi\">59</span><span class=\"bp\">.</span><span class=\"mi\">4247420</span><span class=\"n\">Z</span> <span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">_ZSTD_isError</span>\n\n<span class=\"bp\">...</span>\n<span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">09</span><span class=\"bp\">-</span><span class=\"mi\">30</span><span class=\"n\">T17</span><span class=\"o\">:</span><span class=\"mi\">32</span><span class=\"o\">:</span><span class=\"mi\">59</span><span class=\"bp\">.</span><span class=\"mi\">4250370</span><span class=\"n\">Z</span> <span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">undefined</span> <span class=\"n\">symbol</span><span class=\"o\">:</span> <span class=\"n\">_ZSTD_compress</span>\n</code></pre></div>\n<p>Logs taken from: <a href=\"https://github.com/leanprover/lean4/actions/runs/3160293349/jobs/5144580776\">https://github.com/leanprover/lean4/actions/runs/3160293349/jobs/5144580776</a></p>",
        "id": 301925118,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1664711426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  A confusion I have about Lean4's build system: Why does <code>lean4</code> manually configure linker flags via <code>LEAN_EXTRA_LINKER_FLAGS</code>?</p>\n<p>In my little contact with CMake, I have more commonly seen a use of <code>find_package</code> + <code>target_link_libraries</code>to setup linker options, rather than \"manually\" passing linker flags.</p>",
        "id": 302171306,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1664842596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515083\">@Tom</span> It seems that the windows bug shows up by just bumping up the LLVM release to LLVM 15, with none of the other changes related to linking LLVM, etc: <a href=\"https://github.com/bollu/lean4/actions/runs/3178356182/jobs/5179754689\">https://github.com/bollu/lean4/actions/runs/3178356182/jobs/5179754689</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">D</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">__type_traits</span><span class=\"bp\">/</span><span class=\"n\">is_null_pointer.h</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">49</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">of</span> <span class=\"n\">undeclared</span> <span class=\"n\">identifier</span> <span class=\"bp\">'</span><span class=\"n\">nullptr_t'</span><span class=\"bp\">;</span> <span class=\"n\">did</span> <span class=\"n\">you</span> <span class=\"n\">mean</span> <span class=\"bp\">'</span><span class=\"n\">nullptr'</span><span class=\"bp\">?</span>\n<span class=\"n\">template</span> <span class=\"bp\">&lt;&gt;</span>          <span class=\"n\">struct</span> <span class=\"n\">__is_nullptr_t_impl</span><span class=\"bp\">&lt;</span><span class=\"n\">nullptr_t</span><span class=\"bp\">&gt;</span> <span class=\"o\">:</span> <span class=\"n\">public</span> <span class=\"n\">true_type</span> <span class=\"o\">{}</span><span class=\"bp\">;</span>\n                                                <span class=\"bp\">^</span>\n<span class=\"n\">D</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">__type_traits</span><span class=\"bp\">/</span><span class=\"n\">is_null_pointer.h</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">49</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">template</span> <span class=\"n\">argument</span> <span class=\"n\">for</span> <span class=\"n\">template</span> <span class=\"n\">type</span> <span class=\"kd\">parameter</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">type</span>\n<span class=\"n\">template</span> <span class=\"bp\">&lt;&gt;</span>          <span class=\"n\">struct</span> <span class=\"n\">__is_nullptr_t_impl</span><span class=\"bp\">&lt;</span><span class=\"n\">nullptr_t</span><span class=\"bp\">&gt;</span> <span class=\"o\">:</span> <span class=\"n\">public</span> <span class=\"n\">true_type</span> <span class=\"o\">{}</span><span class=\"bp\">;</span>\n                                                <span class=\"bp\">^~~~~~~~~</span>\n<span class=\"n\">D</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">__type_traits</span><span class=\"bp\">/</span><span class=\"n\">is_null_pointer.h</span><span class=\"o\">:</span><span class=\"mi\">23</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span> <span class=\"n\">note</span><span class=\"o\">:</span> <span class=\"n\">template</span> <span class=\"kd\">parameter</span> <span class=\"n\">is</span> <span class=\"n\">declared</span> <span class=\"n\">here</span>\n<span class=\"n\">template</span> <span class=\"bp\">&lt;</span><span class=\"kd\">class</span> <span class=\"n\">_Tp</span><span class=\"bp\">&gt;</span> <span class=\"n\">struct</span> <span class=\"n\">__is_nullptr_t_impl</span>       <span class=\"o\">:</span> <span class=\"n\">public</span> <span class=\"n\">false_type</span> <span class=\"o\">{}</span><span class=\"bp\">;</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 302172104,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1664843126
    },
    {
        "content": "<p>Is there any way you could send me the full command line of one of the files which is failing to compile?  You can do <code>cmake --build build --verbose</code> but don't run it in parallel.<br>\nThe error is coming from the clang's implementation of the C++ standard library (libc++), so it's unlikely that's broken <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 302176235,
        "sender_full_name": "Tom",
        "timestamp": 1664846022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20LLVM.20Backend/near/302171306\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>  A confusion I have about Lean4's build system: Why does <code>lean4</code> manually configure linker flags via <code>LEAN_EXTRA_LINKER_FLAGS</code>?</p>\n<p>In my little contact with CMake, I have more commonly seen a use of <code>find_package</code> + <code>target_link_libraries</code>to setup linker options, rather than \"manually\" passing linker flags.</p>\n</blockquote>\n<p>We already do all linking outside of CMake, so does it really matter?</p>",
        "id": 302209211,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664870468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> <a href=\"https://github.com/leanprover/lean-llvm/releases/tag/15.0.1\">https://github.com/leanprover/lean-llvm/releases/tag/15.0.1</a> now should have releases without zstd</p>",
        "id": 302336496,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1664913384
    },
    {
        "content": "<p>I opened a new PR: <a href=\"https://github.com/leanprover/lean4/pull/1691\">https://github.com/leanprover/lean4/pull/1691</a> , which isolates the windows build problem to just bumping up LLVM 15. This should be a clean jumping off point for debugging.</p>",
        "id": 302549905,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665006079
    },
    {
        "content": "<p>I can take a look this evening, though I'm not looking forward to it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> . I guess the first step would be to compare the include path order from <code>clang -v</code> to a successful standard build</p>",
        "id": 302605971,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665045640
    },
    {
        "content": "<p>I tried a couple of things, but without success. Difficult to debug this further without a windows machine / VM.</p>",
        "id": 302613614,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1665048585
    },
    {
        "content": "<p>See comments in the PR</p>",
        "id": 302616415,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1665049595
    },
    {
        "content": "<p>Yeah, include order, more specifically <code>stdlib.h</code>: <a href=\"/user_uploads/3121/GyJpLTtm029qJ0tYF30eamsD/image.png\">image.png</a> <br>\nSince <code>-isystem-after</code> apparently doesn't do what I want (??? <code>clang++: warning: argument unused during compilation: '-isystem-after C:/msys64/clang64/include/'</code>), I've had some success locally with just repeating the relevant implicit sysroot include dir before it: <a href=\"https://github.com/Kha/lean4/commit/06366815114601b4b4451c6d4ed2d3ab8ef39216#diff-5377d1dbc10b07eebe77acc2e4b55ddced6a480d3717d0586ba4e14ce2b28617R38\">https://github.com/Kha/lean4/commit/06366815114601b4b4451c6d4ed2d3ab8ef39216#diff-5377d1dbc10b07eebe77acc2e4b55ddced6a480d3717d0586ba4e14ce2b28617R38</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/GyJpLTtm029qJ0tYF30eamsD/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/GyJpLTtm029qJ0tYF30eamsD/image.png\"></a></div>",
        "id": 302742437,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665090973
    },
    {
        "content": "<p>All tests pass now on my machine</p>",
        "id": 302744380,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665091763
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, this was really helpful. I think this got us a step forward. Let's see if this build goes through: <a href=\"https://github.com/tobiasgrosser/lean4/pull/5\">https://github.com/tobiasgrosser/lean4/pull/5</a></p>",
        "id": 302791590,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1665126307
    },
    {
        "content": "<p>Perfect. <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span>'s changes also fix the linux build. So the LLVM upgrade to 15.1 seems to go through (modulo arch64).</p>",
        "id": 302807875,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1665133584
    },
    {
        "content": "<p>I am currently rerunning the patches that link with LLVM: <a href=\"https://github.com/tobiasgrosser/lean4/pull/6\">https://github.com/tobiasgrosser/lean4/pull/6</a></p>",
        "id": 302807941,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1665133609
    },
    {
        "content": "<p>Windows already passed, Linux is in stage 3, and MacOS just started. <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 302808074,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1665133655
    },
    {
        "content": "<p>As for <code>-lz</code> on macOS: if we make sure that we link against LLVM dynamically, I'm pretty sure we can just ignore <code>--system-libs</code></p>",
        "id": 302810930,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665134829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This leads to an interesting workflow question for me. </p>\n<p>I work on LLVM HEAD locally, and I was considering linking against LLVM HEAD while I work on lean4. The last time  I tried this, I needed <code>--system-libs</code> for the link to succeed (I don't remember what dependency was missing).</p>\n<p>I guess the best course of action is to have a separate worktree of LLVM for Lean4, where I mimic <code>script/prepare-llvm-linux.sh</code> to build LLVM.</p>\n<p>EDIT: No, it's much easier. I just pass <code>$(llvm-config --system-libs)</code> when configuring Lean4 :) Thanks for rubber ducking!</p>",
        "id": 302812878,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665135587
    },
    {
        "content": "<p>I want to add a link to the discussion on the commit message. However, the link on the  zulip archive (<a href=\"https://leanprover-community.github.io/archive/stream/341532-lean4-dev/topic/.5BCompiler.5D.20LLVM.20Backend.html\">https://leanprover-community.github.io/archive/stream/341532-lean4-dev/topic/.5BCompiler.5D.20LLVM.20Backend.html</a>) seems to be dead. It's unclear to me why this is the case. </p>\n<p>Shall I add a non-archive link to the commit message? (<a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20LLVM.20Backend/near/301563442\">https://leanprover.zulipchat.com/#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20LLVM.20Backend/near/301563442</a>)</p>",
        "id": 302813473,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665135833
    },
    {
        "content": "<p>Yeah, this stream is world-readable now</p>",
        "id": 302819426,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665138261
    },
    {
        "content": "<p>Btw, I wanted to quickly test what <code>llvm-config --system-libs --link-shared</code> even outputs on macOS and the result is... puzzling</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">config</span> <span class=\"c1\">--system-libs --link-shared</span>\n<span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">config</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">libLLVM</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"n\">dylib</span> <span class=\"n\">is</span> <span class=\"n\">missing</span>\n</code></pre></div>",
        "id": 302820001,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665138489
    },
    {
        "content": "<p>Ok, this looks better</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">cd</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">;</span> <span class=\"n\">ln</span> <span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"n\">libLLVM.dylib</span> <span class=\"n\">libLLVM</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"n\">dylib</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">config</span> <span class=\"c1\">--system-libs --link-shared</span>\n\n<span class=\"bp\">$</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">config</span> <span class=\"c1\">--libs --link-shared</span>\n<span class=\"bp\">-</span><span class=\"n\">lLLVM</span><span class=\"bp\">-</span><span class=\"mi\">15</span>\n<span class=\"bp\">$</span>\n</code></pre></div>",
        "id": 302820161,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665138571
    },
    {
        "content": "<p>The build that adds LLVM 15 succeeds: <a href=\"https://github.com/leanprover/lean4/pull/1691\">https://github.com/leanprover/lean4/pull/1691</a>, modulo <code>aarch64</code>.</p>",
        "id": 302826805,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665141261
    },
    {
        "content": "<p>Great. I assume you are confident by now that lean-llvm now contains everything you need? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Do you still have an aarch64-linux machine you could use for building lean-llvm?</p>",
        "id": 302827265,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665141429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I'd like to wait, until <a href=\"https://github.com/leanprover/lean4/pull/1497\">https://github.com/leanprover/lean4/pull/1497</a>  succeeds on macOS after removing <code>--system-libs</code> from the CMake configuration.</p>",
        "id": 302830757,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665142755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> do you have an account on the GCC compile farm (<a href=\"https://gcc.gnu.org/wiki/CompileFarm\">https://gcc.gnu.org/wiki/CompileFarm</a>)? I think they have aarch64 build machines you can use for testing lean builds.<br>\nAlternatively if you like I can try and find my account details there and run some builds there (if given precise instructions).</p>",
        "id": 302850053,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1665148766
    },
    {
        "content": "<p>I don't, first time I've heard of it!</p>",
        "id": 302850449,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665148892
    },
    {
        "content": "<p>I've stopped the VM a while ago, but I can start one again.  Not sure if I have time until next week though.</p>",
        "id": 302947959,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1665185046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> The commit that adds C bindings now passes on <code>macOS</code> (<a href=\"https://github.com/leanprover/lean4/pull/1497\">https://github.com/leanprover/lean4/pull/1497</a>). Could you verify for me that the <code>cmake</code> and <code>prepare-llvm-macos.sh</code> makes sense to you?</p>\n<p>I'm now confident that can build releases of <code>leanprover/lean-llvm</code> for  <code>aarch64</code>, since the above commit is green on CI for all platforms except aarch64.</p>",
        "id": 303221055,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665392216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Cool!<br>\nCould you please double-check the diff between the old and new \"List Install Tree\" CI step? Should anything new but <code>libLLVM.so</code> appear there?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- 829M used in 160 directories, 2130 files</span><span class=\"w\"></span>\n<span class=\"gi\">+ 1.2G used in 359 directories, 5865 files</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303223763,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665393226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Interesting, I'll take a look. Could you give me a link to the precise \"List Install Tree\" step you're talking about? (which machine, which commit...)</p>",
        "id": 303224000,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665393341
    },
    {
        "content": "<p>(I'm looking at the macOS build, which seems to still be 820M? <a href=\"https://github.com/leanprover/lean4/actions/runs/3203793716/jobs/5234311940#step:10:131\">https://github.com/leanprover/lean4/actions/runs/3203793716/jobs/5234311940#step:10:131</a>)</p>",
        "id": 303224313,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665393470
    },
    {
        "content": "<p>Ah, I see, you meant this build: <a href=\"https://github.com/leanprover/lean4/actions/runs/3214208813/jobs/5254435666#step:10:1352\">https://github.com/leanprover/lean4/actions/runs/3214208813/jobs/5254435666#step:10:1352</a></p>",
        "id": 303224414,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665393507
    },
    {
        "content": "<p>Yes!</p>",
        "id": 303224489,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665393551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I believe the size delta is because the macOS build copies in headers, and the library directory wholesale. The offending lines are:</p>\n<ol>\n<li><a href=\"https://github.com/leanprover/lean4/pull/1497/files#diff-0d112c28beff241f98979d3807483fed193e94d8e0e9db9df7d2f5bd878a6cb8R42\">https://github.com/leanprover/lean4/pull/1497/files#diff-0d112c28beff241f98979d3807483fed193e94d8e0e9db9df7d2f5bd878a6cb8R42</a></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gi\">+# includes (for LLVM backend)</span><span class=\"w\"></span>\n<span class=\"gi\">+cp -r llvm/include/* stage1/include/</span><span class=\"w\"></span>\n</code></pre></div>\n<ol start=\"2\">\n<li><a href=\"https://github.com/leanprover/lean4/pull/1497/files#diff-0d112c28beff241f98979d3807483fed193e94d8e0e9db9df7d2f5bd878a6cb8R35\">https://github.com/leanprover/lean4/pull/1497/files#diff-0d112c28beff241f98979d3807483fed193e94d8e0e9db9df7d2f5bd878a6cb8R35</a></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-$CP llvm/lib/lib{clang-cpp,LLVM}*.so* stage1/lib/</span><span class=\"w\"></span>\n<span class=\"gi\">+$CP -r llvm/lib/* stage1/lib/</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303226026,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665394335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Note the following part in <a href=\"http://prepare-llvm-macos.sh\">prepare-llvm-macos.sh</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span> <span class=\"k\">do</span> <span class=\"n\">not</span> <span class=\"n\">change</span> <span class=\"n\">C</span><span class=\"bp\">++</span> <span class=\"n\">compiler</span><span class=\"bp\">;</span> <span class=\"n\">libc</span><span class=\"bp\">++</span> <span class=\"n\">etc.</span> <span class=\"n\">being</span> <span class=\"n\">system</span> <span class=\"n\">libraries</span> <span class=\"n\">means</span> <span class=\"n\">there's</span> <span class=\"n\">no</span> <span class=\"n\">danger</span> <span class=\"n\">of</span> <span class=\"n\">conflicts</span><span class=\"o\">,</span>\n<span class=\"bp\">#</span> <span class=\"n\">and</span> <span class=\"n\">the</span> <span class=\"n\">custom</span> <span class=\"n\">clang</span><span class=\"bp\">++</span> <span class=\"n\">outputs</span> <span class=\"n\">a</span> <span class=\"n\">myriad</span> <span class=\"n\">of</span> <span class=\"n\">warnings</span> <span class=\"n\">when</span> <span class=\"n\">consuming</span> <span class=\"n\">the</span> <span class=\"n\">SDK</span>\n<span class=\"n\">echo</span> <span class=\"bp\">-</span><span class=\"n\">n</span> <span class=\"s2\">\" -DLEAN_EXTRA_CXX_FLAGS='${EXTRA_FLAGS:-} -I$PWD/stage1/include/'\"</span>\n</code></pre></div>\n<p>On the other platforms, we use <code>--sysroot $PWD/llvm</code>, which presumably makes them find <code>include/llvm</code> automatically. If the above workaround is still necessary, we probably need to add <code>$PWD/llvm/include</code> to the macOS include path, though with <code>-isystem</code> we may be back to include order issues...</p>",
        "id": 303278292,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665414751
    },
    {
        "content": "<p>I uploaded the macOS aarch64 release to <a href=\"https://github.com/leanprover/lean-llvm/releases/tag/15.0.1\">https://github.com/leanprover/lean-llvm/releases/tag/15.0.1</a>. <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> mentioned that he now has access to the GCC compile farm as well.</p>",
        "id": 303392118,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665481437
    },
    {
        "content": "<p>This is lovely</p>",
        "id": 303433451,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1665493627
    },
    {
        "content": "<p>It turns out the GCC farm build machines don't have an LLVM toolchain, and the LLVM releases don't have a binary build of clang for aarch64 (<a href=\"https://github.com/llvm/llvm-project/releases/tag/llvmorg-15.0.2\">https://github.com/llvm/llvm-project/releases/tag/llvmorg-15.0.2</a>). Thus, I have to build <code>clang</code> from source, so I have a <code>clang</code> which I can use to build <code>leanprover/lean-llvm</code></p>\n<p>Why does <code>leanprover/lean-llvm</code> build specifically ask for <code>-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++</code>? (is it  for name-mangling consistency?) Can  I switch the compiler over to <code>gcc/g++</code>?</p>",
        "id": 303436237,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665494547
    },
    {
        "content": "<p>15.0.1 has a binary though? <a href=\"https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.1/clang+llvm-15.0.1-aarch64-linux-gnu.tar.xz\">https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.1/clang+llvm-15.0.1-aarch64-linux-gnu.tar.xz</a></p>",
        "id": 303438054,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665495056
    },
    {
        "content": "<p>I don't know what's going on with the set of available binary releases, it looks almost random</p>",
        "id": 303438552,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665495231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20LLVM.20Backend/near/303436237\">said</a>:</p>\n<blockquote>\n<p>Why does <code>leanprover/lean-llvm</code> build specifically ask for <code>-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++</code> for name-mangling consistency? Can  I switch the compiler over to <code>gcc/g++</code>?</p>\n</blockquote>\n<p>I think that would work too if we do a proper two-stage build where the runtimes are built using the stage 1 clang. We're essentially taking a shortcut in lean-llvm by using the upstream binary releases as the first stage. Which might also explain why a new LLVM version in MSYS2 broke it.</p>",
        "id": 303439009,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665495362
    },
    {
        "content": "<p>I don't follow. What in Lean's build process is sensitive to whether the LLVM toolchain used to build Lean is a <code>stage1</code> or <code>stage2</code> build of the toolchain?</p>",
        "id": 303440635,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665495859
    },
    {
        "content": "<p>Oh, I think I got it backwards - it's clang/libLLVM that we want to be built against the LLVM runtimes. Which I think is only possible using clang, so we need two stages/clangs.</p>",
        "id": 303441170,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665496006
    },
    {
        "content": "<p>Specifically the shortcut consists of not using <code>LLVM_ENABLE_RUNTIMES</code>, which says</p>\n<blockquote>\n<p>Build libc++, libc++abi, libunwind or compiler-rt using the <strong>just-built compiler</strong>. This is the correct way to build runtimes when putting together a toolchain.</p>\n</blockquote>",
        "id": 303441674,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665496145
    },
    {
        "content": "<blockquote>\n<p>clang/libLLVM that we want to be built against the LLVM runtimes</p>\n</blockquote>\n<p>Why do we need this? (I'm trying to understand where this requirement comes from).</p>",
        "id": 303447055,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665497643
    },
    {
        "content": "<p>Because that's the runtimes we use for building Lean binaries, and there's no sense in shipping two variant runtimes</p>",
        "id": 303459193,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665500996
    },
    {
        "content": "<p>This is because <code>leanc</code> is a wrapper around <code>clang++</code>?</p>",
        "id": 303459877,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665501226
    },
    {
        "content": "<p>It is, but I'm not sure I understand the connection to the discussion. We have to ship a runtime for linking against and we have to ship executables linked against a runtime, and there's no sense in having the two be different, no?</p>",
        "id": 303471016,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665504506
    },
    {
        "content": "<p>Ah, okay, now I see what you mean :) Right, it makes sense to re-use the same C(++) runtime for lean's builds as well as the executables that lean produces.</p>",
        "id": 303476248,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665506192
    },
    {
        "content": "<p>And it probably becomes even more important when we link LLVM parts into <code>lean</code>. It might have worked either way for the standalone <code>clang</code>.</p>",
        "id": 303476427,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665506271
    },
    {
        "content": "<p>New error just dropped, in trying to get the <code>aarch64</code> build working: </p>\n<p><a href=\"https://github.com/leanprover/lean4/actions/runs/3235490234/jobs/5299994236#step:8:905\">https://github.com/leanprover/lean4/actions/runs/3235490234/jobs/5299994236#step:8:905</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"n\">file</span> <span class=\"n\">included</span> <span class=\"k\">from</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">host</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">__assert</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">host</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/../</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">__config</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span> <span class=\"n\">fatal</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">__config_site'</span> <span class=\"n\">file</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">__config_site</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 303681754,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665594097
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bollu</span><span class=\"bp\">@</span><span class=\"n\">gcc118</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">upstream</span><span class=\"bp\">-</span><span class=\"n\">copy</span><span class=\"bp\">/</span><span class=\"n\">aarch64</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">&gt;</span> <span class=\"n\">find</span> <span class=\"bp\">.</span> <span class=\"bp\">|</span> <span class=\"n\">grep</span> <span class=\"n\">__config_site</span>\n<span class=\"bp\">./</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">aarch64</span><span class=\"bp\">-</span><span class=\"n\">unknown</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">__config_site</span>\n</code></pre></div>\n<p>The requisite include seems to be at a path that's prefixed by the triple..</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bollu</span><span class=\"bp\">@</span><span class=\"n\">gcc118</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">test</span><span class=\"bp\">-</span><span class=\"n\">upstream</span><span class=\"bp\">-</span><span class=\"n\">copy</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">&gt;</span> <span class=\"n\">find</span> <span class=\"bp\">.</span> <span class=\"bp\">|</span> <span class=\"n\">grep</span> <span class=\"n\">__config_site</span>\n<span class=\"bp\">./</span><span class=\"kn\">include</span><span class=\"bp\">/</span><span class=\"n\">x86_64</span><span class=\"bp\">-</span><span class=\"n\">unknown</span><span class=\"bp\">-</span><span class=\"n\">linux</span><span class=\"bp\">-</span><span class=\"n\">gnu</span><span class=\"bp\">/</span><span class=\"n\">c</span><span class=\"bp\">++/</span><span class=\"n\">v1</span><span class=\"bp\">/</span><span class=\"n\">__config_site</span>\n</code></pre></div>",
        "id": 303687976,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665596102
    },
    {
        "content": "<p>They sure have been moving things around between releases, huh...</p>",
        "id": 303695148,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665598518
    },
    {
        "content": "<p><a href=\"https://github.com/llvm/llvm-project/issues/57104\">https://github.com/llvm/llvm-project/issues/57104</a></p>",
        "id": 303698452,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665599703
    },
    {
        "content": "<p>A final(?) error: <a href=\"https://github.com/leanprover/lean4/actions/runs/3237093374/jobs/5303732640#step:8:2510\">https://github.com/leanprover/lean4/actions/runs/3237093374/jobs/5303732640#step:8:2510</a></p>\n<blockquote>\n<p>ld.lld: error: cannot open Scrt1.o: No such file or directory<br>\nclang-15: error: linker command failed with exit code 1 (use -v to see invocation)</p>\n</blockquote>\n<p>I can't even _find_ <code>Scrti1.o</code> in the build tree:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>bollu@gcc118:~/lean-llvm/lean-llvm&gt; find . <span class=\"p\">|</span> grep -i scrt <span class=\"c1\"># nothing</span>\nbollu@gcc118:~/lean-llvm/lean-llvm&gt; find . <span class=\"p\">|</span> grep -i crt\n./include/llvm/ExecutionEngine/Orc/EPCGenericRTDyldMemoryManager.h\n./include/llvm/ExecutionEngine/Orc/Shared/OrcRTBridge.h\n./lib/cmake/llvm/ChooseMSVCCRT.cmake\n./lib/clang/15.0.1/lib/aarch64-unknown-linux-gnu/clang_rt.crtbegin.o\n./lib/clang/15.0.1/lib/aarch64-unknown-linux-gnu/clang_rt.crtend.o\n</code></pre></div>",
        "id": 303710016,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665604073
    },
    {
        "content": "<p>Not sure it's because of that, but setting the sysroot to the host compiler is definitely wrong. How is it supposed to find the arm runtimes that way?</p>",
        "id": 303710549,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665604277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I am clearly confused about the different components at play here.<br>\nWe use the <code>host</code> compiler (which is going to be <code>x86_64</code>), while linking against the <code>target</code>runtime (which is <code>aarch64</code>) to produce the Lean toolchain, correct?</p>\n<p>The <code>sysroot</code> option sets the path for the <code>host</code> compiler to pickup the runtimes for the <code>target</code>? So in our case, the <code>sysroot</code> should point to the <code>aarch64</code> runtime?</p>",
        "id": 303830625,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665667129
    },
    {
        "content": "<p>Yes, exactly!</p>",
        "id": 303830793,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665667200
    },
    {
        "content": "<p>I think you have to adapt your include fix to that as well :) . The host include files should be irrelevant.</p>",
        "id": 303832009,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665667563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20LLVM.20Backend/near/303710016\">said</a>:</p>\n<blockquote>\n<p>I can't even _find_ <code>Scrti1.o</code> in the build tree:</p>\n</blockquote>\n<p>I have no idea how this is breaking now, but this file is from glibc. We need to add it to the <code>cp $GLIBC</code>.</p>",
        "id": 303914045,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665691382
    },
    {
        "content": "<p>And that did it, whoo <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 303987952,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665737594
    },
    {
        "content": "<p>This was quite an adventure :D</p>",
        "id": 303989523,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665738157
    },
    {
        "content": "<p>Nice. Congratulations!</p>",
        "id": 303990919,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1665738707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20LLVM.20Backend/near/303989523\">said</a>:</p>\n<blockquote>\n<p>This was quite an adventure :D</p>\n</blockquote>\n<p>And here I hoped that only the initial bundling would be such an adventure, haha... looking forward to LLVM 16</p>",
        "id": 303991714,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665739029
    },
    {
        "content": "<p>So... can someone summarize what was done? Perhaps in the code generator meeting today.</p>",
        "id": 303992657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1665739386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Why is it using header files from the host compiler? That still sounds wrong.</p>",
        "id": 303994463,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665740015
    },
    {
        "content": "<p>I think I just screwed up the <code>cp</code></p>",
        "id": 303994798,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665740135
    },
    {
        "content": "<p>Ah, right, that's fair.</p>",
        "id": 303994916,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665740171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Could you rebase on master for the auto-cancellation logic? ...I feel like we might need a few more runs to figure this one out</p>",
        "id": 304002164,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665743196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Just rebased.</p>",
        "id": 304003831,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665743889
    },
    {
        "content": "<p>Hmm, now my last commit is gone</p>",
        "id": 304004041,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665743987
    },
    {
        "content": "<p>Let's see if I remember it</p>",
        "id": 304004076,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665743998
    },
    {
        "content": "<p>Thanks for the heroic push that led to this, <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> ! <a href=\"https://github.com/leanprover/lean4/pull/1691\">https://github.com/leanprover/lean4/pull/1691</a></p>",
        "id": 304050886,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1665759390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> How do you suggest giving <code>/path/to/libLLVM-15.so</code> to the  executables we build with <code>leanc</code>? Currently, the <a href=\"https://github.com/leanprover/lean4/actions/runs/3265474545/jobs/5367751084#step:15:3524\">linux release tests</a> fails in trying to find <code>libLLVM-15.so</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">++</span> <span class=\"n\">hello</span><span class=\"bp\">-</span><span class=\"n\">world</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">hello</span><span class=\"bp\">-</span><span class=\"n\">world</span>\n<span class=\"n\">hello</span><span class=\"bp\">-</span><span class=\"n\">world</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">hello</span><span class=\"bp\">-</span><span class=\"n\">world</span><span class=\"o\">:</span> <span class=\"n\">error</span> <span class=\"n\">while</span> <span class=\"n\">loading</span> <span class=\"n\">shared</span> <span class=\"n\">libraries</span><span class=\"o\">:</span>\n<span class=\"n\">libLLVM</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"bp\">.</span><span class=\"n\">so</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"kn\">open</span> <span class=\"n\">shared</span> <span class=\"n\">object</span> <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n\n          <span class=\"n\">Start</span> <span class=\"mi\">1591</span><span class=\"o\">:</span> <span class=\"n\">leanlaketest_targets</span>\n<span class=\"mi\">1588</span><span class=\"bp\">/</span><span class=\"mi\">1591</span> <span class=\"n\">Test</span> <span class=\"bp\">#</span><span class=\"mi\">1586</span><span class=\"o\">:</span> <span class=\"n\">leanlaketest_ffi</span> <span class=\"bp\">...................***</span><span class=\"n\">Failed</span>    <span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">50</span> <span class=\"n\">sec</span>\n</code></pre></div>\n<p>In a prior version of the build script, I had appended to <code>LD_LIBRARY_PATH</code>, which I now recognize is quite hacky. </p>\n<p>I'm considering adding a <code>runpath</code>option to <code>LEANC_EXTRA_FLAGS </code>. I don't know if this is janky, so I'm hoping you have a better idea of what the ideal way to set this up is.</p>",
        "id": 304467045,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666014946
    },
    {
        "content": "<p>Let's take a step or two back here, why would arbitrary executable be linked against libLLVM?</p>",
        "id": 304467573,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666015055
    },
    {
        "content": "<p>Indeed, that's fair. I was far too focused on getting <code>LLVM</code> to link against  _one_ executable we build with <code>leanc</code> (the compiler itself), that I did not take into account the implications of enabling this <em>everywhere</em> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 304468851,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666015369
    },
    {
        "content": "<p>More specifically, it should be <code>libleanshared</code> that's linked against libLLVM I assume, not <code>lean</code></p>",
        "id": 304469495,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666015527
    },
    {
        "content": "<p>Right.</p>",
        "id": 304469564,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666015549
    },
    {
        "content": "<p>Should end-users of the lean compiler have the ability to optionally link against the LLVM we ship with Lean? Concretely, should <code>leanc</code> learn a new flag, like <code>--print-llvm-{cxx,ld}flags</code> to allow end-users to easily link against Lean's bundled LLVM?</p>\n<p>I won't block <a href=\"https://github.com/leanprover/lean4/pull/1497\">https://github.com/leanprover/lean4/pull/1497</a> on this, but it would be useful for me to know if this is part of the story of shipping LLVM with Lean.</p>",
        "id": 304470064,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666015671
    },
    {
        "content": "<p>I don't think that's necessary if we decide not to ship LLVM's headers</p>",
        "id": 304475779,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666017172
    },
    {
        "content": "<p>People can just download <code>lean-llvm</code> instead, it doesn't change that often :)</p>",
        "id": 304475847,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666017192
    },
    {
        "content": "<p><strong>Offshoot from Monday call</strong></p>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Since I've been looking around the build system, I have some questions about some <code>CMake</code> flags, and some build architecture questions. It would be super useful if we could work through this in the next call <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<ol>\n<li>Why do we have a <code>leanshared</code> library and a <code>lean</code> executable?</li>\n<li>What is <code>LEAN_STANDALONE</code>?</li>\n<li><code>LEANC_INTERNAL_LINKER_FLAGS</code> ? (What is the difference between INTERNAL versus EXTRA?)</li>\n<li><code>LEANC_INTERNAL_FLAGS</code>? What is the difference between <code>INTERNAL_</code> versus <code>EXTRA_</code>?)</li>\n<li><code>LEAN_EXTRA_LINKER_FLAGS</code>: Linker flags that are passed to lld after the other linker flags, allows overriding? </li>\n<li>What is <code>src/bin/leanmake</code>?</li>\n<li>What is <code>src/lean.mk.in</code>?</li>\n</ol>",
        "id": 304521580,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666029102
    },
    {
        "content": "<p>Here's a larger google doc (<a href=\"https://docs.google.com/document/d/107TYPF6zhyAVQtOPWoxG97UQ9Qhorr8T8pjbYl8F4Xo/edit\">https://docs.google.com/document/d/107TYPF6zhyAVQtOPWoxG97UQ9Qhorr8T8pjbYl8F4Xo/edit</a>), with everything I was unsure about. I plan on sending a documentation PR once I'm sure the definitions are correct.</p>",
        "id": 304522173,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666029261
    },
    {
        "content": "<p>Thanks, more docs are always great. I tend to program and document CMake like Latex and bash: as soon as it works, I want to get out of there</p>",
        "id": 304532967,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666032280
    },
    {
        "content": "<p>Some quick hints:</p>\n<blockquote>\n<ol>\n<li>Why do we have a <code>leanshared</code> library and a <code>lean</code> executable?</li>\n</ol>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/issues/466\">https://github.com/leanprover/lean4/issues/466</a></p>\n<blockquote>\n<ol start=\"2\">\n<li>What is <code>LEAN_STANDALONE</code>?</li>\n</ol>\n</blockquote>\n<p>set by the <code>prepare-*</code> scripts building standalone toolchains</p>\n<blockquote>\n<ol start=\"3\">\n<li><code>LEANC_INTERNAL_LINKER_FLAGS</code> ? (What is the difference between INTERNAL versus EXTRA?)</li>\n</ol>\n</blockquote>\n<p>Extra flags are always appended, internal flags are used only when using the bundled clang. This distinction will likely vanish with the LLVM backend.</p>\n<blockquote>\n<ol start=\"7\">\n<li>What is <code>src/bin/leanmake</code>?</li>\n</ol>\n</blockquote>\n<p>Did you see the docs in it? :)</p>",
        "id": 304535864,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666033102
    },
    {
        "content": "<p>Looking at the remaining failures:</p>\n<ul>\n<li>Nix Linux: did the Nix changes vanish?</li>\n<li>Linux: we should not link against LLVM in stage 0 (see many <code>${STAGE} GREATER 0</code>)</li>\n<li>aarch64: regarding the issue mentioned in <a href=\"https://github.com/leanprover/lean4/pull/1497/commits/f5e0bfbaa26dc1a8746f1a83162d3190a7b3c73a\">https://github.com/leanprover/lean4/pull/1497/commits/f5e0bfbaa26dc1a8746f1a83162d3190a7b3c73a</a>, should we simply specify <code>LLVM_CONFIG_LDFLGAS</code> (sic) manually in the cross-compile/any release build? Linking manually against a single shared library can't be that hard/fragile, right?</li>\n</ul>",
        "id": 304933104,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666179439
    },
    {
        "content": "<p>It's pretty weird that LLVM now has these target-specific directories, but <code>llvm-config</code> has no way to actually select a different target</p>",
        "id": 304946739,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666183351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> </p>\n<ul>\n<li>we need more dependencies for <code>nix</code>, whichever nix package it is that supplies <code>llvm-config</code>. I'll backport the <code>nix</code> changes.</li>\n<li>Can you explain the <code>stage0</code> change to me? I don't understand the rationale. Is the idea this: we only use <code>stage0</code> to compile <code>stage1</code>, and we can use <code>stage0</code>'s C backend to compile <code>stage1</code>. Thus, <code>stage0</code> does not need LLVM support?</li>\n<li>I am mildly reluctant to not use <code>llvm-config</code>, as it is the \"best practice\" path. Let me experiment and see what happens?</li>\n</ul>",
        "id": 304960991,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666187822
    },
    {
        "content": "<blockquote>\n<p>we need more dependencies for nix, whichever nix package it is that supplies llvm-config. I'll backport the nix changes.</p>\n</blockquote>\n<p>It's <code>llvmPackages.llvm.dev</code>. Sorry if that was one of the packages I removed!</p>\n<blockquote>\n<p>Is the idea this: we only use stage0 to compile stage1, and we can use stage0's C backend to compile stage1. Thus, stage0 does not need LLVM support?</p>\n</blockquote>\n<p>Yes. Maybe we want to change that in the future, but we would need a ccache replacement first.</p>",
        "id": 304962387,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666188184
    },
    {
        "content": "<p>Putting this down here as something to understand tomorrow:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/actions/runs/3285800077/jobs/5413244431\">Link to action from which raw log was taken</a></li>\n<li><a href=\"https://pipelines.actions.githubusercontent.com/serviceHosts/a478744f-d04e-4945-ab82-85221d8ba2f1/_apis/pipelines/1/runs/14982/signedlogcontent/8?urlExpires=2022-10-20T00%3A00%3A41.8141355Z&amp;urlSigningMethod=HMACV1&amp;urlSignature=onb%2BUV2Z1zK9aXttNA8LOYr346Bk802AW04bKUYBIJk%3D\">Link to action log</a></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"n\">T23</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">7291777</span><span class=\"n\">Z</span> <span class=\"c1\">-- Found 'llvm-config' as /home/runner/work/lean4/lean4/build/llvm-host/bin/llvm-config</span>\n<span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">-</span><span class=\"mi\">19</span><span class=\"n\">T23</span><span class=\"o\">:</span><span class=\"mi\">56</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">7517658</span><span class=\"n\">Z</span> <span class=\"n\">TODO</span><span class=\"o\">:</span> <span class=\"n\">change</span> <span class=\"n\">to</span> <span class=\"n\">debug</span> <span class=\"bp\">|</span> <span class=\"n\">llvm</span><span class=\"bp\">-</span><span class=\"n\">config</span><span class=\"o\">:</span> <span class=\"n\">libdir</span> <span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lib'</span>\n</code></pre></div>\n<p>Even if the <code>llvm-config</code> was found at <code>llvm-host/...</code>, it still claims the path to the <code>libdir</code> is (correctly!) <code>llvm/lib</code>. How? Is the path somehow \"baked into\" the <code>llvm-config</code> binary at install time? And since we move <code>llvm</code> to <code>llvm-host</code>, it still points to the right path?</p>",
        "id": 305060877,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666224138
    },
    {
        "content": "<p>Recall that <code>llvm-host</code> is just a symlink to <code>llvm</code> in this configuration, so this is probably just path normalization</p>",
        "id": 305097175,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666252554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I am confused about an error when linking against the LLVM in the <code>macos-aarch64</code> configuration: (<a href=\"https://github.com/bollu/lean4/actions/runs/3314239163/jobs/5473328326#step:8:3025\">https://github.com/bollu/lean4/actions/runs/3314239163/jobs/5473328326#step:8:3025</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ld64.lld</span><span class=\"o\">:</span> <span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libLLVMX86AsmParser.a</span><span class=\"o\">(</span><span class=\"n\">X86AsmParser.cpp.o</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">architecture</span> <span class=\"n\">x86_64</span> <span class=\"n\">which</span> <span class=\"n\">is</span> <span class=\"n\">incompatible</span> <span class=\"k\">with</span> <span class=\"n\">target</span> <span class=\"n\">architecture</span> <span class=\"n\">arm64</span>\n</code></pre></div>\n<p>I downloaded the file <a href=\"https://github.com/leanprover/lean-llvm/releases/tag/15.0.1\"><code>lean-llvm-aarch64-apple-darwin.tar.zst </code></a>, and I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">✘</span> <span class=\"bp\">⚙</span> <span class=\"n\">bollu</span><span class=\"bp\">@</span><span class=\"n\">NC</span> <span class=\"bp\">~/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">aarch64</span><span class=\"bp\">-</span><span class=\"n\">apple</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">$</span> <span class=\"n\">file</span> <span class=\"n\">libLLVM.dylib</span>\n<span class=\"n\">libLLVM.dylib</span><span class=\"o\">:</span> <span class=\"n\">Mach</span><span class=\"bp\">-</span><span class=\"n\">O</span> <span class=\"mi\">64</span><span class=\"bp\">-</span><span class=\"n\">bit</span> <span class=\"n\">x86_64</span> <span class=\"n\">dynamically</span> <span class=\"n\">linked</span> <span class=\"n\">shared</span> <span class=\"n\">library</span><span class=\"o\">,</span> <span class=\"n\">flags</span><span class=\"o\">:</span><span class=\"bp\">&lt;</span><span class=\"n\">NOUNDEFS</span><span class=\"bp\">|</span><span class=\"n\">DYLDLINK</span><span class=\"bp\">|</span><span class=\"n\">TWOLEVEL</span><span class=\"bp\">|</span><span class=\"n\">WEAK_DEFINES</span><span class=\"bp\">|</span><span class=\"n\">BINDS_TO_WEAK</span><span class=\"bp\">|</span><span class=\"n\">NO_REEXPORTED_DYLIBS</span><span class=\"bp\">|</span><span class=\"n\">HAS_TLV_DESCRIPTORS</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>In particular, note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">libLLVM.dylib</span><span class=\"o\">:</span> <span class=\"n\">Mach</span><span class=\"bp\">-</span><span class=\"n\">O</span> <span class=\"mi\">64</span><span class=\"bp\">-</span><span class=\"n\">bit</span> <span class=\"n\">x86_64</span>\n</code></pre></div>\n<p>I would have expected it to be <code>aarch64</code>? Could you cross check for me that the release <code>lean-llvm-aarch64-apple-darwin.tar.zst</code> does indeed have an <code>aarch64</code> build? I may well be overlooking something obvious!</p>",
        "id": 305861101,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666629591
    },
    {
        "content": "<p>Oops that doesn't look good</p>",
        "id": 305863618,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666630432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Indeed. Could you upload a fresh version of the binaries for me, so I can test that mac build does indeed pass? Thanks!</p>",
        "id": 306012288,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1666699388
    },
    {
        "content": "<p>Unfortunately I'm out of office until next week, but I'll take a look then</p>",
        "id": 306111669,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1666728102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Quick ping on the PR. The failing build on linux <a href=\"https://github.com/leanprover/lean4/actions/runs/3356388873/jobs/5561420465\">https://github.com/leanprover/lean4/actions/runs/3356388873/jobs/5561420465</a> fails at rebootstrap, since it doesn't pick up the correct version of the bundled LLVM when rebootstrapping. I considered editing the rebootstrap in the <code>.github/ci/workflows.yml</code> to pass the <code>LLVM_CONFIG</code> path, but I do not know what the correct solution is. </p>\n<ul>\n<li>I wonder if this is the case where we should not even link against LLVM during the rebootstrap, since it only rebuilds stage0?</li>\n<li>What ought to happen, in terms of how we pick up the location of LLVM during rebootstrap?</li>\n</ul>",
        "id": 307000400,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1667158613
    },
    {
        "content": "<p>If <code>LLVM_CONFIG</code> should be forwarded to the stage 0 build, it should be whitelisted at <a href=\"https://github.com/leanprover/lean4/blob/8b9fe9b6c2714b51dc8b25c3f90304e488ec29a6/CMakeLists.txt#L14\">https://github.com/leanprover/lean4/blob/8b9fe9b6c2714b51dc8b25c3f90304e488ec29a6/CMakeLists.txt#L14</a></p>",
        "id": 307019197,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667174178
    },
    {
        "content": "<p>But your first question raises a more fundamental question to me: how is <code>-DLLVM=OFF</code> even supposed to work? <code>llvm.cpp</code> is compiled in unconditionally, no?</p>",
        "id": 307019355,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667174378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> We have <code>LEAN_LLVM</code> preprocessor flag. I was considering using it to <code>#ifdef</code> the entire implementation. I think this was how it used to work in <code>src/util/shell.cpp</code> </p>\n<p>I wonder if it's cleaner to configure this at the <code>CMake</code> level, by choosing whether we include the <code>llvm.cpp</code> file?</p>",
        "id": 307021075,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1667176172
    },
    {
        "content": "<p>That merely seems to move the issue around, do we conditionally include <code>LLVMBindings.lean</code> as well then? There is no such concept yet in our build system.</p>",
        "id": 307021437,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667176482
    },
    {
        "content": "<p>We <code>ifdef</code> the implementations to be empty/stubs. We'll still have the signatures.</p>",
        "id": 307022165,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1667177368
    },
    {
        "content": "<p>That ought to work, right?</p>",
        "id": 307022223,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1667177419
    },
    {
        "content": "<p>And otherwise we panic? That sounds workable, yeah!</p>",
        "id": 307027332,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667182958
    },
    {
        "content": "<p>Two more questions:</p>\n<ol>\n<li>Setting up the <a href=\"https://github.com/leanprover/lean4/pull/1497/commits/32cae3a34ff0dafcb2414dda7ed585bcf3ce8340\">argument forwarding</a> did not <a href=\"https://github.com/leanprover/lean4/actions/runs/3357711982/jobs/5563741186\">help with rebootstrap on linux</a>. Do you have a quick guess about what might have gone wrong?</li>\n<li>Which builds do we want with <code>-DLLVM=ON</code> and which with <code>-DLLVM=OFF</code>? Should we add another Nix runner, one for each flavor?</li>\n</ol>",
        "id": 307079442,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1667214782
    },
    {
        "content": "<blockquote>\n<p>Setting up the argument forwarding did not help with rebootstrap on linux. Do you have a quick guess about what might have gone wrong?</p>\n</blockquote>\n<p>You'll probably want to remove the <code>${STAGE} GREATER 0</code> check now, no?</p>\n<blockquote>\n<p>Which builds do we want with -DLLVM=ON and which with -DLLVM=OFF? Should we add another Nix runner, one for each flavor?</p>\n</blockquote>\n<p>I don't think we need a dedicated LLVM=OFF CI build. Though I wonder what the default experience for building Lean locally should be. Do we expect the code to work with most LLVM versions out there? Should LLVM support silently be deactivated if it is not found?</p>",
        "id": 307132246,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667229300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I am unsure what the default should be. I would prefer we are conservatively correct, and do not attempt to use LLVM unless explicitly asked for. </p>\n<p>We can still ensure that the releases have LLVM enabled, because we control the build environment.</p>",
        "id": 307165444,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1667238457
    },
    {
        "content": "<p>Sounds good to me. So I guess we won't have to worry about stage 0 after all if it defaults to <code>LLVM=OFF</code>.</p>",
        "id": 307173048,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667240785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Thanks for the review. I'm currently working towards a PLDI deadline, so I'll need a week before I can check that making everything <code>USize</code> works out fine and dandy <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 308424729,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1667838534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> any quick insight on how to build <code>libleanrt.bc</code> correctly? (<a href=\"https://github.com/leanprover/lean4/pull/1871\">https://github.com/leanprover/lean4/pull/1871</a>) I'm not sure what CMake incantation I need to invoke to get my hands on the correct <code>clang</code> flags to invoke it on this line: </p>\n<p><a href=\"https://github.com/leanprover/lean4/pull/1871/files#diff-b54200773c0b5ab32237121a90d2145324228571bce9b10a4c16e1f5361902baR32\">https://github.com/leanprover/lean4/pull/1871/files#diff-b54200773c0b5ab32237121a90d2145324228571bce9b10a4c16e1f5361902baR32</a></p>",
        "id": 311537272,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1669104220
    },
    {
        "content": "<p>Can we use <code>leanc</code> for that?</p>",
        "id": 311547056,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669107814
    },
    {
        "content": "<p>Now I'm confused as to why we included all runtime files in libleanrt.bc before, when all we want is the inlines</p>",
        "id": 311557663,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669111606
    },
    {
        "content": "<p>This seems to work: <a href=\"https://github.com/Kha/lean4/commit/7504fc6514433e50c1cc6a2a82a34df835e8371d\">https://github.com/Kha/lean4/commit/7504fc6514433e50c1cc6a2a82a34df835e8371d</a></p>",
        "id": 311572156,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669116895
    },
    {
        "content": "<p>I took the liberty to rename the file as it didn't fit the old name anymore</p>",
        "id": 311572190,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669116914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  I'm debugging  link failures of executables that <code>import Lean</code> complain about missing LLVM symbols:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bollu</span> <span class=\"bp\">●</span> <span class=\"bp\">λ</span> <span class=\"n\">cat</span> <span class=\"n\">bar.lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">return</span> <span class=\"o\">()</span>\n<span class=\"n\">bollu</span> <span class=\"bp\">●</span> <span class=\"bp\">λ</span> <span class=\"n\">lean</span> <span class=\"n\">bar.lean</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"n\">bar.cpp</span>\n\n<span class=\"n\">bollu</span> <span class=\"bp\">●</span> <span class=\"bp\">λ</span> <span class=\"n\">leanc</span> <span class=\"n\">bar.cpp</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">bar</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvmxx.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span>\n<span class=\"n\">llvmxx.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x74</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">LLVMPrintTypeToString'</span>\n</code></pre></div>\n<ul>\n<li>\n<p><code>import Lean</code> causes <code>lean_initialize();</code> to be emitted in the <code>c++</code> code, instead of <code>lean_initialize_runtime_module</code>.<br>\n    Disabling <code>lean_initialize</code> removes the missing symbols errors.</p>\n</li>\n<li>\n<p><code>lean_initialize</code> is defined at <code>src/initialize/init.cpp</code></p>\n</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">initialize</span><span class=\"o\">/</span><span class=\"n\">init</span><span class=\"p\">.</span><span class=\"n\">cpp</span><span class=\"w\"></span>\n<span class=\"mi\">26</span><span class=\"o\">:</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">lean_initialize</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">52</span><span class=\"o\">:</span><span class=\"w\">    </span><span class=\"n\">lean_initialize</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"mi\">55</span><span class=\"o\">:</span><span class=\"w\">    </span><span class=\"n\">See</span><span class=\"w\"> </span><span class=\"n\">also</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">lean_initialize</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"o\">*/</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>This shows up due to <code>libleancpp.a</code>:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_llvm_type_of'</span><span class=\"o\">:</span>\n<span class=\"n\">llvm.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x31ca</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">LLVMPrintValueToString'</span>\n</code></pre></div>\n<ul>\n<li><code>leanc --print-ldflags</code> tells us that <code>libleancpp.a</code> is included by _every_ executable that <code>leanc</code> builds:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bollu</span> <span class=\"bp\">●</span> <span class=\"bp\">λ</span> <span class=\"n\">leanc</span> <span class=\"c1\">--print-ldflags</span>\n<span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"kn\">include</span> <span class=\"bp\">-</span><span class=\"n\">fPIC</span> <span class=\"bp\">-</span><span class=\"n\">fvisibility</span><span class=\"bp\">=</span><span class=\"n\">hidden</span> <span class=\"bp\">-</span><span class=\"n\">L</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span> <span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--start-group -lleancpp -lLean -Wl,--end-group -Wl,--start-group -lInit -lleanrt -Wl,--end-group -lstdc++ -lm  /usr/lib/libgmp.so -ldl -pthread</span>\n</code></pre></div>\n<ul>\n<li>Option (1) treat <code>LLVM</code> like <code>gmp</code>, and add the flags to link LLVM into every executable we build via <code>leanc</code></li>\n<li>Option (2) add LLVM and the associated bindings as a library which is only included by <code>lean</code>, and nobody else.</li>\n<li>I assume we prefer Option (2)? It's not clear to me yet where in the CMake I ought to build the LLVM bindings and<br>\n  link them <em>only</em> into <code>lean</code>.</li>\n</ul>",
        "id": 312097614,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1669333948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> I think you misunderstand static archives. An archive file (even more precisely, a section of it) is included only if it is needed. Could you post the output of linking such a binary with <code>--trace-symbol=lean_llvm_type_of</code>?</p>",
        "id": 312140458,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669366801
    },
    {
        "content": "<p>Oh I see you added a new initializer called by <code>lean_initialize</code>, that certainly explains it</p>",
        "id": 312141676,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669367235
    },
    {
        "content": "<p>I would suggest to instead call the LLVM initializer directly in <code>shell.cpp</code>. We probably shouldn't worry about external users of the LLVM modules for now.</p>",
        "id": 312143758,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669368091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , <a href=\"https://gist.github.com/bollu/44089723e6782ff2eee50fb710417bfc\">here's the output from trace-symbol</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">bollu</span>  <span class=\"bp\">λ</span> <span class=\"n\">leanc</span> <span class=\"bp\">-</span><span class=\"n\">Wl</span><span class=\"o\">,</span><span class=\"c1\">--trace-symbol=lean_llvm_type_of bar.cpp -o bar.out</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">):</span> <span class=\"kd\">definition</span> <span class=\"n\">of</span> <span class=\"n\">lean_llvm_type_of</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libLean.a</span><span class=\"o\">(</span><span class=\"n\">LLVMBindings.o</span><span class=\"o\">):</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"n\">lean_llvm_type_of</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_llvm_create_context'</span><span class=\"o\">:</span>\n<span class=\"n\">llvm.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x1c5</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">LLVMContextCreate'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_llvm_create_module'</span><span class=\"o\">:</span>\n<span class=\"n\">llvm.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x22f</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">LLVMModuleCreateWithNameInContext'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_llvm_write_bitcode_to_file'</span><span class=\"o\">:</span>\n<span class=\"n\">llvm.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x299</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">LLVMWriteBitcodeToFile'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_llvm_module_to_string'</span><span class=\"o\">:</span>\n<span class=\"n\">llvm.cpp</span><span class=\"o\">:(</span><span class=\"bp\">.</span><span class=\"n\">text</span><span class=\"bp\">+</span><span class=\"mi\">0x335</span><span class=\"o\">):</span> <span class=\"n\">undefined</span> <span class=\"n\">reference</span> <span class=\"n\">to</span> <span class=\"bp\">`</span><span class=\"n\">LLVMPrintModuleToString'</span>\n<span class=\"bp\">/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">ld</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">bollu</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">stage1</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">libleancpp.a</span><span class=\"o\">(</span><span class=\"n\">llvm.cpp.o</span><span class=\"o\">):</span> <span class=\"k\">in</span> <span class=\"n\">function</span> <span class=\"bp\">`</span><span class=\"n\">lean_llvm_add_function'</span><span class=\"o\">:</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 312309905,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1669453198
    },
    {
        "content": "<p>Hmm, I guess we have to continue with <code>LLVMBindings.o</code> then :) ? Not sure how to best do that since the flag expects a symbol, not a whole file. But looking at your code again, I assume the reason is that you reference <code>lean_ir_emit_llvm</code> in <code>src/library/compiler/ir.cpp</code>. You should probably move that to <code>llvm.cpp</code> so that only <code>shell.cpp</code> depends on it.</p>",
        "id": 312311553,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669454094
    },
    {
        "content": "<p>Just to reiterate, yes, separating the LLVM parts into separate libraries on both the Lean and C++ side might have been a nicer approach! More setup but less guessing. But I think we're close now.</p>",
        "id": 312312737,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669454854
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/actions/runs/3641124687/jobs/6146687901\">https://github.com/leanprover/lean4/actions/runs/3641124687/jobs/6146687901</a></p>\n<ul>\n<li>Linux{Debug, aarch64, fsanitize}: now compiles successfully</li>\n<li>Linux release/Windows: Segfaults </li>\n<li>Macos: LLVM includes broke again, need to figure out what's going on.</li>\n<li>Nix: Due to the way the nix artifact is built, the path to <code>lib.h.bc</code> isn't resolved correctly. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , I'll send a more coherent explanation tomorrow, it would be nice to resolve this particular build issue.</li>\n</ul>",
        "id": 314523092,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1670436215
    },
    {
        "content": "<p>The Nix build is green now. Does the non-Nix build segfault for you locally as well or only on CI?</p>",
        "id": 314660003,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670500905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> :)</p>",
        "id": 314728881,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670521102
    },
    {
        "content": "<p>I can repro the segfault locally as well. I had to b aw q QQ 1ump up my local LLVM version to 15. LLVM 15 changed how pointers in LLVM work, which means the code I wrote based on old style pointers segfaults. Updating it to the new style now!</p>",
        "id": 314730561,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1670521636
    },
    {
        "content": "<p>I wonder what happens now with nix, since IIRC, we only have LLVM 14 on nix</p>",
        "id": 314730623,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1670521656
    },
    {
        "content": "<p>Oops. Either we'll have to disable LLVM support for Nix or I'll make it use lean-llvm (though weren't there some <code>patchelf</code> issues... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ). I guess the latter would have to happen anyway if we ever go serious and fork LLVM like Rust does.</p>",
        "id": 314732552,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670522189
    },
    {
        "content": "<p>\"I had to b aw q QQ 1ump\"</p>\n<p>You what? :D</p>",
        "id": 314737530,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670522673
    },
    {
        "content": "<p>I think some rogue pointers wrote some extra data into that message.</p>",
        "id": 314756151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670528285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Looks like the CI is green: <a href=\"https://github.com/leanprover/lean4/actions/runs/3674916789/jobs/6213714189\">https://github.com/leanprover/lean4/actions/runs/3674916789/jobs/6213714189</a></p>",
        "id": 315348209,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1670845893
    },
    {
        "content": "<p>Time to clean up the patch :)</p>",
        "id": 315348553,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1670846008
    },
    {
        "content": "<p>Yay!</p>",
        "id": 315348618,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670846031
    },
    {
        "content": "<p>I just realised -- I've never tested <code>stage2</code> with <code>-DLLVM=ON</code>, <del>and furthermore, this would fail, because the lean compiler has uses of <code>extern c inline</code> in a bunch of places which the LLVM backend cannot reasonably support, as it would require code generation of arbitrary C expressions into LLVM. </del> EDIT: that's not true, it would only fail if we invoke the stage2 build with the LLVM backend, which we don't have any support for anyway...  </p>\n<p>I propose we think about supporting <code>stage2</code> builds of LLVM, if we want it, <em>after</em> we merge this patch, please? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 315350276,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1670846558
    },
    {
        "content": "<p>Sure, as long as users are not expected to use it yet anyway :)</p>",
        "id": 315352422,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1670847270
    },
    {
        "content": "<p>This had been merged. Thank you all for this great effort so far. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span><span aria-label=\"clap\" class=\"emoji emoji-1f44f\" role=\"img\" title=\"clap\">:clap:</span></p>",
        "id": 318755941,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1672502006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> : We have 15 occurrences of <code>extern c inline</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">new</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">llvm</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">build</span> <span class=\"n\">rg</span> <span class=\"s2\">\"extern c inline\"</span> <span class=\"bp\">../</span><span class=\"n\">src</span>\n<span class=\"bp\">../</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Expr.lean</span>\n<span class=\"mi\">155</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"(uint64_t)#1\"]</span>\n<span class=\"mi\">462</span><span class=\"o\">:</span>  <span class=\"kd\">@[computed_field, extern c inline \"lean_ctor_get_uint64(#1, lean_ctor_num_objs(#1)*sizeof(void*))\"]</span>\n\n<span class=\"bp\">../</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Compiler</span><span class=\"bp\">/</span><span class=\"n\">IR</span><span class=\"bp\">/</span><span class=\"n\">Checker.lean</span>\n<span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"lean_box(LEAN_MAX_CTOR_FIELDS)\"]</span>\n<span class=\"mi\">15</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"lean_box(LEAN_MAX_CTOR_SCALARS_SIZE)\"]</span>\n<span class=\"mi\">19</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"lean_box(sizeof(size_t))\"]</span>\n\n<span class=\"bp\">../</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Core.lean</span>\n<span class=\"mi\">467</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"#1 || #2\"]</span> <span class=\"kd\">def</span> <span class=\"n\">strictOr</span>  <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b₁</span> <span class=\"bp\">||</span> <span class=\"n\">b₂</span>\n<span class=\"mi\">473</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"#1 &amp;&amp; #2\"]</span> <span class=\"kd\">def</span> <span class=\"n\">strictAnd</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b₁</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">b₂</span>\n\n<span class=\"bp\">../</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Meta.lean</span>\n<span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"lean_box(LEAN_VERSION_MAJOR)\"]</span>\n<span class=\"mi\">18</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"lean_box(LEAN_VERSION_MINOR)\"]</span>\n<span class=\"mi\">22</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"lean_box(LEAN_VERSION_PATCH)\"]</span>\n<span class=\"mi\">30</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"LEAN_VERSION_IS_RELEASE\"]</span>\n<span class=\"mi\">35</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"lean_mk_string(LEAN_SPECIAL_VERSION_DESC)\"]</span>\n<span class=\"mi\">64</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"LEAN_IS_STAGE0\"]</span>\n\n<span class=\"bp\">../</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">HashSet.lean</span>\n<span class=\"mi\">30</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"(size_t)(#2) &amp; (lean_unbox(#1) - 1)\"]</span>\n\n<span class=\"bp\">../</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">Init</span><span class=\"bp\">/</span><span class=\"n\">Prelude.lean</span>\n<span class=\"mi\">1595</span><span class=\"o\">:</span><span class=\"kd\">@[extern c inline \"lean_nat_sub(#1, lean_box(1))\"]</span>\n</code></pre></div>\n<p>Recall that I had moved one of the <code>extern c inline</code> definitions into <code>src/include/lean/lean.h</code>. I plan on moving all the rest as well for the <code>stage2</code> build. Does that sound sensible to you?</p>",
        "id": 320796727,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1673470900
    },
    {
        "content": "<p>Yes, I don't think <code>lean.h</code> is inappropriate here</p>",
        "id": 320798344,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673471484
    },
    {
        "content": "<p>I'm noting down a concern I have with moving inline <code>extern</code> definitions to become out-of-line, though I can't think of a good solution.</p>\n<p>As I port some of the <code>extern c inline</code> definitions we have, I see that an inductive such as <code>BinderInfo</code> which is a pure C style enumeration is compiled down to <code>uint8</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">BinderInfo</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Default binder annotation, e.g. `(x : α)` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">default</span>\n  <span class=\"sd\">/-- Implicit binder annotation, e.g., `{x : α}` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">implicit</span>\n  <span class=\"sd\">/-- Strict implict binder annotation, e.g., `{{ x : α  }}` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">strictImplicit</span>\n  <span class=\"sd\">/-- Local instance binder annotataion, e.g., `[Decidable α]` -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">instImplicit</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n</code></pre></div>\n<p>I am now concerned that changing the definition from:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern c inline \"(uint64_t)#1\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">BinderInfo.toUInt64</span> <span class=\"o\">:</span> <span class=\"n\">BinderInfo</span> <span class=\"bp\">→</span> <span class=\"n\">UInt64</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">default</span>        <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">implicit</span>       <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">strictImplicit</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">instImplicit</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern \"lean_expr_binderinfo_to_uint64\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">BinderInfo.toUInt64</span> <span class=\"o\">:</span> <span class=\"n\">BinderInfo</span> <span class=\"bp\">→</span> <span class=\"n\">UInt64</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">default</span>        <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">implicit</span>       <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">strictImplicit</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">instImplicit</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>with the function <code>lean_expr_binderinfo_to_uint64</code> defined in <code>lean.h</code>  could lead to hard to debug errors when the ABI changes.</p>",
        "id": 320956257,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1673534948
    },
    {
        "content": "<p>I think we're just missing better code generation for <code>toCtorIdx</code> to make this inline obsolete, so consider the move temporary</p>",
        "id": 320964288,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673536907
    },
    {
        "content": "<p>Huh, this code generation is surprisingly bad for clang. But they both do the right thing when <code>toCtorIdx</code> is just <code>return lean_unsigned_to_nat(x_1)</code> <a href=\"https://godbolt.org/z/4ddrvoW8x\">https://godbolt.org/z/4ddrvoW8x</a></p>",
        "id": 320969658,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673538215
    }
]