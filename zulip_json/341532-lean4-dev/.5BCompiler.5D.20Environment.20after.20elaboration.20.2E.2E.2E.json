[
    {
        "content": "<p>The following are some notes I took trying to understand the the concrete representation in the Environment after elaboration. My goal is to fully understand the inputs to the compiler/LCNF. I am posting it here for the benefit of others and possibly get some feedback, if any.</p>\n<p>If is by no means complete, but possibly useful anyway.</p>",
        "id": 300382817,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663944478
    },
    {
        "content": "<h1>Environment after elaboration</h1>\n<p>Lean has a large and extensible surface language that is elaborated into a smaller internal language (<a href=\"https://github.com/leanprover/lean4/blob/78927542b7f8222887b0277d52ed433d6a5f8e30/src/Lean/Declaration.lean#L368-L376\">ConstantInfo</a> + <a href=\"https://github.com/leanprover/lean4/blob/c65a206d6ab4a8f0bee7cfd97bf87d02ff19de37/src/Lean/Expr.lean#L301-L512\">Expr</a> + <a href=\"https://github.com/leanprover/lean4/blob/78927542b7f8222887b0277d52ed433d6a5f8e30/src/Lean/Declaration.lean#L154-L162\">Declaration</a>: what is this representation named? Core?). This core language is the starting point for the compiler optimizations and code generation.</p>\n<p>So, after elaboration, what does this core representation looks like? Following are some examples to make this representation more concrete and keeping types as simple as possible.</p>\n<h2>Function definitions</h2>\n<p>Here is a rather simple function definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">double</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Definitions have a direct representation in the Environment as <code>ConstantInfo.defnInfo</code>s. For each function<br>\ndefinition, there will be one <code>ConstantInfo.defnInfo</code> in the Environment.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.defnInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"double\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"bp\">`</span><span class=\"n\">x</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.default</span><span class=\"o\">)</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.lam</span>\n               <span class=\"bp\">`</span><span class=\"n\">x</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                   <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                     <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                       <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                         <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                           <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">HAdd.hAdd</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">,</span> <span class=\"n\">Lean.Level.zero</span><span class=\"o\">,</span> <span class=\"n\">Lean.Level.zero</span><span class=\"o\">])</span>\n                           <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n                         <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n                       <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n                     <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                       <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">instHAdd</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n                       <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">instAddNat</span> <span class=\"o\">[])))</span>\n                   <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.default</span><span class=\"o\">),</span>\n    <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.ReducibilityHints.regular</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.DefinitionSafety.safe</span><span class=\"o\">,</span>\n    <span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"double\"</span><span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 300382937,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663944497
    },
    {
        "content": "<h2>Inductive definitions</h2>\n<p>Here is the simplest example of an inductive type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Boolean</span>\n<span class=\"bp\">|</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>An inductive data type, will be represented separately in the Environment as a <code>ConstantInfo.inductInfo</code> named <code>Boolean</code> and many <code>ConstantInfo.ctorInfo</code>s, one for each constructor.</p>\n<p>Here is the corresponding <code>ConstantInfo.inductInfo</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.inductInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Boolean\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.sort</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">))</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">numParams</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">numIndices</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Boolean\"</span><span class=\"o\">],</span>\n    <span class=\"n\">ctors</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Boolean\"</span><span class=\"o\">)</span> <span class=\"s2\">\"true\"</span><span class=\"o\">,</span>\n              <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Boolean\"</span><span class=\"o\">)</span> <span class=\"s2\">\"false\"</span><span class=\"o\">],</span>\n    <span class=\"n\">isRec</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">isUnsafe</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">isReflexive</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">isNested</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>And here are the corresponding <code>ConstantInfo.ctorsInfo</code>s, namely <code>Boolean.true</code> and <code>Boolean.false</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.ctorInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Boolean\"</span><span class=\"o\">)</span> <span class=\"s2\">\"true\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Boolean</span> <span class=\"o\">[]</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">induct</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Boolean\"</span><span class=\"o\">,</span>\n    <span class=\"n\">cidx</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">numParams</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">numFields</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">isUnsafe</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.ctorInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Boolean\"</span><span class=\"o\">)</span> <span class=\"s2\">\"false\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Boolean</span> <span class=\"o\">[]</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">induct</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Boolean\"</span><span class=\"o\">,</span>\n    <span class=\"n\">cidx</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">numParams</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">numFields</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">isUnsafe</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Note that <code>ConstantInfo.ctorInfo</code> do no have a value because it can be automatically generated from its type (?).</p>",
        "id": 300383008,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663944516
    },
    {
        "content": "<h2>Structures</h2>\n<p>Structure are elaborated into <code>ConstantInfo.inductInfo</code> with a single constructor and with some extra support for default values and projections etc.</p>\n<p>For instance, here is an extremely simple structure with two fields:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Point</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>And here is the corresponding <code>ConstantInfo.inductInfo</code> in the environment. Note that the ctors field contains a single <code>Name</code> referencing the corresponding constructor.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.inductInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Point\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.sort</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">))</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">numParams</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">numIndices</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Point\"</span><span class=\"o\">],</span>\n    <span class=\"n\">ctors</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Point\"</span><span class=\"o\">)</span> <span class=\"s2\">\"mk\"</span><span class=\"o\">],</span>\n    <span class=\"n\">isRec</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">isUnsafe</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">isReflexive</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">isNested</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>And here is the corresponding <code>ConstantInfo.ctorInfo</code> containing the constructor type plus some additional metadata.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.ctorInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Point\"</span><span class=\"o\">)</span> <span class=\"s2\">\"mk\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"bp\">`</span><span class=\"n\">x</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"bp\">`</span><span class=\"n\">y</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Point</span> <span class=\"o\">[])</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.default</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.default</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">induct</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Point\"</span><span class=\"o\">,</span>\n    <span class=\"n\">cidx</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">numParams</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">numFields</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">isUnsafe</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>TBD: add projections and other helper functions automatically generated.</p>",
        "id": 300383241,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663944569
    },
    {
        "content": "<h2>Type classes</h2>\n<p>Type classes do not have an explicit representation in core but are elaborated into a <code>ConstantInfo.inductInfo</code> and a <code>ConstantInfo.ctorInfo</code>, and one <code>ConstantInfo.defnInfo</code> for each class method.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">default</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>The above type class is elaborated into the following <code>.inductInfo</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.inductInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Inhabited\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"u\"</span><span class=\"o\">],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"bp\">`</span><span class=\"n\">α</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.sort</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.sort</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Level.max</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.default</span><span class=\"o\">)</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">numParams</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">numIndices</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Inhabited\"</span><span class=\"o\">],</span>\n    <span class=\"n\">ctors</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Inhabited\"</span><span class=\"o\">)</span> <span class=\"s2\">\"mk\"</span><span class=\"o\">],</span>\n    <span class=\"n\">isRec</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">isUnsafe</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">isReflexive</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">isNested</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>And the <code>.ctorInfo</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.ctorInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Inhabited\"</span><span class=\"o\">)</span> <span class=\"s2\">\"mk\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"u\"</span><span class=\"o\">],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"bp\">`</span><span class=\"n\">α</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.sort</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"bp\">`</span><span class=\"n\">default</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.default</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.implicit</span><span class=\"o\">)</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">induct</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Inhabited\"</span><span class=\"o\">,</span>\n    <span class=\"n\">cidx</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">numParams</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">numFields</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">isUnsafe</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>In addition, the single type class method <code>Inhabited.default</code> elaborates into the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.defnInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Inhabited\"</span><span class=\"o\">)</span> <span class=\"s2\">\"default\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"u\"</span><span class=\"o\">],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"bp\">`</span><span class=\"n\">α</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.sort</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"bp\">`</span><span class=\"n\">self</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.instImplicit</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.implicit</span><span class=\"o\">)</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.lam</span>\n               <span class=\"bp\">`</span><span class=\"n\">α</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.Expr.sort</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">))</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.Expr.lam</span>\n                 <span class=\"bp\">`</span><span class=\"n\">self</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.param</span> <span class=\"bp\">`</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.Expr.proj</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.instImplicit</span><span class=\"o\">))</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.default</span><span class=\"o\">),</span>\n    <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.ReducibilityHints.abbrev</span><span class=\"o\">,</span>\n    <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.DefinitionSafety.safe</span><span class=\"o\">,</span>\n    <span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Inhabited\"</span><span class=\"o\">)</span> <span class=\"s2\">\"default\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 300383317,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663944591
    },
    {
        "content": "<h2>Type class instances</h2>\n<p>Now consider the <code>Option</code> instance for <code>Inhabited</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>This is the elaborated <code>ConstantInfo.defnInfo</code> for the above instance. Note that Lean automatically generated the name <code>instInhabitedOption</code> for it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.defnInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Lean\"</span><span class=\"o\">)</span> <span class=\"s2\">\"instInhabitedOption\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">a._</span><span class=\"bp\">@.</span><span class=\"n\">Lean.Data.Options._hyg</span> <span class=\"mi\">1158</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.sort</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">)))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.forallE</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">inst._</span><span class=\"bp\">@.</span><span class=\"n\">Lean.Data.Options._hyg</span> <span class=\"mi\">1170</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                        <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">)])</span>\n                        <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                        <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">)])</span>\n                        <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Option</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.instImplicit</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.implicit</span><span class=\"o\">)</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.lam</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">a._</span><span class=\"bp\">@.</span><span class=\"n\">Lean.Data.Options._hyg</span> <span class=\"mi\">1158</span><span class=\"o\">)</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.Expr.sort</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">)))</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.Expr.lam</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">inst._</span><span class=\"bp\">@.</span><span class=\"n\">Lean.Data.Options._hyg</span> <span class=\"mi\">1170</span><span class=\"o\">)</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">)])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                   <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                     <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited.mk</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">)])</span>\n                     <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Option</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n                   <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                     <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                       <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Option.mk</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                       <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                         <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                           <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited.default</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">)])</span>\n                           <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Name</span> <span class=\"o\">[]))</span>\n                         <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Lean.instInhabitedName</span> <span class=\"o\">[])))</span>\n                     <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                       <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                         <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Inhabited.default</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.succ</span> <span class=\"o\">(</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">)])</span>\n                         <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n                       <span class=\"o\">(</span><span class=\"n\">Lean.Expr.bvar</span> <span class=\"mi\">0</span><span class=\"o\">))))</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.instImplicit</span><span class=\"o\">))</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.BinderInfo.implicit</span><span class=\"o\">),</span>\n    <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.ReducibilityHints.regular</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.DefinitionSafety.safe</span><span class=\"o\">,</span>\n    <span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"Lean\"</span><span class=\"o\">)</span> <span class=\"s2\">\"instInhabitedOption\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>TBD: missing default instance method</p>",
        "id": 300383488,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663944625
    },
    {
        "content": "<h2>Opaque definitions</h2>\n<p>Opaque definitions have a direct core representation <code>.opaqueInfo</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Here is the corresponding core representation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.ConstantInfo.opaqueInfo</span> <span class=\"o\">{</span>\n    <span class=\"n\">toConstantVal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"O\"</span><span class=\"o\">,</span>\n        <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Expr.app</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">[</span><span class=\"n\">Lean.Level.zero</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[]))</span>\n                 <span class=\"o\">(</span><span class=\"n\">Lean.Expr.lit</span> <span class=\"o\">(</span><span class=\"n\">Lean.Literal.natVal</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n               <span class=\"o\">(</span><span class=\"n\">Lean.Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">instOfNatNat</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">Lean.Expr.lit</span> <span class=\"o\">(</span><span class=\"n\">Lean.Literal.natVal</span> <span class=\"mi\">1</span><span class=\"o\">))),</span>\n    <span class=\"n\">isUnsafe</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n    <span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">Lean.Name.str</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.anonymous</span><span class=\"o\">)</span> <span class=\"s2\">\"O\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 300383540,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663944643
    },
    {
        "content": "<p>My next goal is to look into the type and value <code>Expr</code>s , and toLCNF/toLCNFType.</p>",
        "id": 300385721,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1663945200
    }
]