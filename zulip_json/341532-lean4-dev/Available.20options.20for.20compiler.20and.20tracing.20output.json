[
    {
        "content": "<p>I have tried looking at some code using <code>set_option ... true in</code> to start looking at LCNF and to look a bit more into what the compiler is doing.  Are these options documented anywhere?</p>\n<p>As a second follow-up, I was trying to see if there's a way to see what the result of instance search is.  For example, if I have e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"bp\">.*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"bp\">.*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I can see the output of instance search/resolution.  However, is there a way to see the \"transformed\" code, where e.g. the <code>Functor.map</code> has been \"substituted\" with <code>List.map</code>, as per <code>map</code> in the functor instance?<br>\nI can for example look at the code at the LCNF level, e.g. using <code>set_option trace.Compiler true</code> but that's a bit low level.  </p>\n<p>Finally, is there an equivalent of the above, say to see what the result of operator application is?  E.g. <code>#eval (.*2) &lt;$&gt; [1,2,3]</code> </p>\n<p>Thanks!</p>",
        "id": 301979486,
        "sender_full_name": "Tom",
        "timestamp": 1664750620
    },
    {
        "content": "<p>Well there isn't really any substitution happening at the Lean level. For the the entirety of Lean, excluding the compiler, this is literally <a href=\"http://Functor.map\">Functor.map</a> but the implicit <code>[Functor List]</code> instance will have been inserted as an explicit argument in the internal <code>Expr</code> version of this you can make this visible like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">Functor.map</span> <span class=\"o\">(</span><span class=\"bp\">.*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Which will give you the term that Lean will actually operate on internally:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Functor.map</span> <span class=\"n\">List</span> <span class=\"n\">List.instFunctorList</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">Nat</span> <span class=\"n\">instMulNat</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons</span> <span class=\"n\">Nat</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons</span> <span class=\"n\">Nat</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.nil</span> <span class=\"n\">Nat</span><span class=\"o\">))))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>While using <code>List.map</code> could be proven to be equivalent (in fact even definitionally equivalent) Lean will never do this without the user telling it to do so ever. Only when we move to LCNF and start simplifying the code we will start to substitute these things in.</p>",
        "id": 301979731,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664750926
    },
    {
        "content": "<p>Oh and regarding the question of where these options are documented...basically nowhere since their definitions are spread all over the code and we are adding new ones every other day but if you do <code>set_option</code> the auto completion will give you an exhaustive list of suggestions</p>",
        "id": 301979800,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664751012
    },
    {
        "content": "<p>Perfect - the <code>pp.explicit</code> is what I was looking for - thanks!  What does <code>pp</code> stand for in this context?  I assume it's not the \"PreProcessor\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 301980661,
        "sender_full_name": "Tom",
        "timestamp": 1664751949
    },
    {
        "content": "<p>pretty printer</p>",
        "id": 301980801,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1664751989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/Available.20options.20for.20compiler.20and.20tracing.20output/near/301979800\">said</a>:</p>\n<blockquote>\n<p>Oh and regarding the question of where these options are documented...basically nowhere since their definitions are spread all over the code and we are adding new ones every other day but if you do <code>set_option</code> the auto completion will give you an exhaustive list of suggestions</p>\n</blockquote>\n<p>Thanks, I noticed but they are still alien to me; I assume most of them are pass-specific anyway.</p>",
        "id": 301980813,
        "sender_full_name": "Tom",
        "timestamp": 1664751991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/Available.20options.20for.20compiler.20and.20tracing.20output/near/301980801\">said</a>:</p>\n<blockquote>\n<p>pretty printer</p>\n</blockquote>\n<p>D'oh!</p>",
        "id": 301980830,
        "sender_full_name": "Tom",
        "timestamp": 1664752004
    },
    {
        "content": "<p>Most of the options are not compiler related at all, the ones for the new compiler are primarily in  <code>trace.Compiler</code></p>",
        "id": 301981942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664753267
    },
    {
        "content": "<p>the main useful one is <code>trace.Compiler.result</code> if you want to see the final result of compilation</p>",
        "id": 301982019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664753346
    },
    {
        "content": "<p>or <code>trace.compiler.ir.result</code> for the result of the old compiler</p>",
        "id": 301982036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1664753384
    },
    {
        "content": "<p>That's great to know, thank you both for your help!</p>",
        "id": 301982098,
        "sender_full_name": "Tom",
        "timestamp": 1664753417
    }
]