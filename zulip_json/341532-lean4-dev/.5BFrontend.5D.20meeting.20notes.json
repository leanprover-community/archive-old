[
    {
        "content": "<ul>\n<li>The examples used in today's meetings are here: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/frontend_meeting_2022_09_13.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/frontend_meeting_2022_09_13.lean</a></li>\n<li>For writing your own custom lean executable: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Frontend.lean#L98\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Frontend.lean#L98</a></li>\n<li>The Lean type checker in <code>Meta</code> is here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Check.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Check.lean</a> If it is too expensive for your purposes, it is not hard to use it as a template for writing your own custom version.</li>\n<li>The builtin tactics are implemented here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/BuiltinTactic.lean#L73\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/BuiltinTactic.lean#L73</a></li>\n</ul>",
        "id": 298620109,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663085695
    },
    {
        "content": "<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#reprint\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">e.raw.reprint</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"failed to reprint\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">val</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I'm not sure if I'm missing some background (EDIT: indeed I am, \"recreating the original source\" was the question), but in almost all cases you should avoid <code>Syntax.reprint</code> and use the pretty-printer instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#reprint\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">Elab.Command.liftCoreM</span> <span class=\"k\">do</span> <span class=\"n\">PrettyPrinter.ppTerm</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Also, as a general rule avoid <code>IO.println</code> and use <code>logInfo</code> instead.  The <code>IO.println</code> function can only produce plain text, while <code>logInfo</code> can show interactive expressions with popups, etc.</p>\n<p>In fact we have all kinds of nice API around logInfo, so you don't even need to call the pretty-printer yourself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#reprint\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 298621471,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663086131
    },
    {
        "content": "<blockquote>\n<p>(EDIT: indeed I am, \"recreating the original source\" was the question)</p>\n</blockquote>\n<p>Exactly. The pretty printer does not preserve the comments, original formatting, etc.</p>",
        "id": 298623073,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663086680
    },
    {
        "content": "<p>Comments are preserved, just not the formatting.</p>",
        "id": 298624563,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663087198
    },
    {
        "content": "<p>How close are we to being able to do \"try this\" tactics? That's the last major functionality we are missing for the port</p>",
        "id": 298640829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663092890
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover/lean4/pull/1494\">lean4#1494</a> and <a href=\"https://github.com/leanprover/lean4/pull/1551\">lean4#1551</a>, cc <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>.  I think we're pretty close to a MVP (replace one tactic by another one), but we should get started with the right API so that we can later extend it (see issues) and do all kinds of nice things in the background without anybody noticing (proper indentation, etc.).</p>",
        "id": 298641491,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1663093123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BFrontend.5D.20meeting.20notes/near/298620109\">said</a>:</p>\n<blockquote>\n<ul>\n<li>The examples used in today's meetings are here: <a href=\"https://github.com/leanprover/lean4/blob/master/tests/lean/run/frontend_meeting_2022_09_13.lean\">https://github.com/leanprover/lean4/blob/master/tests/lean/run/frontend_meeting_2022_09_13.lean</a></li>\n<li>For writing your own custom lean executable: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Frontend.lean#L98\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Frontend.lean#L98</a></li>\n<li>The Lean type checker in <code>Meta</code> is here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Check.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Check.lean</a> If it is too expensive for your purposes, it is not hard to use it as a template for writing your own custom version.</li>\n<li>The builtin tactics are implemented here: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/BuiltinTactic.lean#L73\">https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/BuiltinTactic.lean#L73</a></li>\n</ul>\n</blockquote>\n<p>To solve the problem that prompted these questions cleanly, <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> suggested a feature: a custom prelude besides <code>Init</code> for the lean compiler. Can I make this a feature request (will be useful in another context too)? Shall I make an issue on Github?</p>",
        "id": 298904460,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1663220409
    },
    {
        "content": "<p>As for the type-theoretic aside, here's what I was referring to for anyone interested in ITP history <a href=\"/user_uploads/3121/KAmfMoNuE79eh5OXLwVdqqcB/image.png\">image.png</a> <a href=\"https://arxiv.org/pdf/2203.01173.pdf\">https://arxiv.org/pdf/2203.01173.pdf</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KAmfMoNuE79eh5OXLwVdqqcB/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KAmfMoNuE79eh5OXLwVdqqcB/image.png\"></a></div>",
        "id": 299786203,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663687266
    },
    {
        "content": "<p>And files I mentioned for getting started with the server code: <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Server/README.md\">https://github.com/leanprover/lean4/blob/master/src/Lean/Server/README.md</a> <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Server/FileWorker/RequestHandling.lean\">https://github.com/leanprover/lean4/blob/master/src/Lean/Server/FileWorker/RequestHandling.lean</a></p>",
        "id": 299787407,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1663687585
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span>\n  <span class=\"n\">Probe.runOnModule</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Compiler.LCNF.CompilerM</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Probe.getExprs</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Probe.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">e.isApp</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">e.getAppFn.isConst</span><span class=\"o\">))</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Probe.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{e.getAppFn.constName!}\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Probe.countUniqueSorted</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Probe.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">count</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">count</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Probe.done</span>\n</code></pre></div>\n<p>#perfectlyfinemetalanguage <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 304088955,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1665770660
    },
    {
        "content": "<p>Also because we talked about join points that take a function as parameter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span>\n  <span class=\"n\">Probe.runGlobally</span> <span class=\"o\">(</span><span class=\"n\">phase</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mono</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Probe.filterByFunDecl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">_jp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isPrefixOf</span> <span class=\"n\">decl.binderName</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">false</span>\n    <span class=\"k\">let</span> <span class=\"n\">hasFunJp</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">decl.params.anyM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">param</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">param.type.isForall</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">hasFunJp</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Probe.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">decl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">decl.name</span><span class=\"o\">)</span>\n  <span class=\"n\">Probe.done</span>\n</code></pre></div>\n<p>-&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Lean.expandMacros</span><span class=\"o\">,</span> <span class=\"bp\">`¬´</span><span class=\"n\">_aux_Init_NotationExtra___macroRules_term</span><span class=\"bp\">%</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"bp\">|</span><span class=\"n\">_</span><span class=\"o\">]</span><span class=\"n\">_1</span><span class=\"bp\">¬ª</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">IO.FS.withIsolatedStreams._lambda_3</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"n\">Lean.MetavarContext.isWellFormed</span><span class=\"o\">,</span>\n  <span class=\"bp\">`</span><span class=\"n\">Array.foldlMUnsafe.fold._at_.Lean.PersistentArray.foldlM._at_.Lean.LocalContext.foldlM._at_.Lean.MetavarContext.MkBinding.collectForwardDeps.spec_3.spec_3.spec_3</span><span class=\"o\">,</span>\n  <span class=\"n\">Lean.Name.mkStr</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkStr</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkStr</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkStr</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_private.Lean.MetavarContext</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"s2\">\"Lean\"</span><span class=\"o\">)</span> <span class=\"s2\">\"MetavarContext\"</span><span class=\"o\">)</span> <span class=\"s2\">\"MkBinding\"</span><span class=\"o\">)</span> <span class=\"s2\">\"elimMVar\"</span><span class=\"o\">,</span>\n<span class=\"bp\">....</span>\n</code></pre></div>\n<p>so it seems<br>\na) this is very common<br>\nb) the name pretty printer is broken?</p>",
        "id": 304104204,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1665776528
    },
    {
        "content": "<p>There is no literal syntax for <code>Name.num</code></p>",
        "id": 304104519,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665776671
    },
    {
        "content": "<p>Well in that case...</p>",
        "id": 304104652,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1665776729
    },
    {
        "content": "<p>This is all it finds: <a href=\"https://pastebin.com/skMwMyQA\">https://pastebin.com/skMwMyQA</a> I guess they might be worth checking out?</p>",
        "id": 304104772,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1665776769
    },
    {
        "content": "<blockquote>\n<p>Also because we talked about join points that take a function as parameter:</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik B√∂ving</span> This is really cool. I am looking forward to playing with your <code>Probe</code> API.</p>",
        "id": 304112082,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665779558
    },
    {
        "content": "<p>Hey, just a heads-up that I can‚Äôt make today‚Äôs meeting unfortunately. I don‚Äôt have much of an update for this week (I got a bit distracted by a side project), but I‚Äôm going to fix up my two PRs later today or tomorrow, and will be looking for infoview-related issues I can help out with next week.</p>",
        "id": 316964312,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1671546873
    },
    {
        "content": "<p>Hi, looks like I can‚Äôt make this week either. No update again, my side project got a bit out of hand (and involved destroying my current keyboard setup), so I‚Äôm somewhat out of commission until that‚Äôs done (likely within the next couple of days though). But hopefully I‚Äôll have made some good progress on a new issue by next week‚Äôs meeting. Happy holidays!</p>",
        "id": 318108788,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1672152245
    },
    {
        "content": "<p>Ah, I'm not planning to be there today either</p>",
        "id": 318108942,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672152313
    },
    {
        "content": "<p>No meeting for me today either, I'm still in vacation</p>",
        "id": 319206152,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672756008
    },
    {
        "content": "<p>I won't be able to make it today.</p>",
        "id": 320454645,
        "sender_full_name": "Mac",
        "timestamp": 1673358575
    },
    {
        "content": "<p>If anyone else is interested in frontend development, please do join us at our weekly meeting at <a href=\"https://meet.jit.si/moderated/931c57a26b25473f93aeabc7b7b857012b44471f76a708e2112d62da1b4cc52b\">https://meet.jit.si/moderated/931c57a26b25473f93aeabc7b7b857012b44471f76a708e2112d62da1b4cc52b</a>, starting again from today on in 50min (<time datetime=\"2023-01-10T15:00:00Z\">2023-01-10T16:00:00+01:00</time>)!</p>",
        "id": 320459433,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1673359901
    },
    {
        "content": "<p>Sorry for missing today -- my clock was on the fritz.</p>",
        "id": 323317649,
        "sender_full_name": "Mac",
        "timestamp": 1674583189
    }
]