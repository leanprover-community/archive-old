[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> and <span class=\"user-mention\" data-user-id=\"112857\">@Leonardo de Moura</span> , we briefly discussed recursive join points a few weeks back as something we would want to introduce at some point. I assume that this means we don't have TCO yet in LCNF then.</p>\n<p>For instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">countdown</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span><span class=\"o\">(</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"n\">countdown</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- [Compiler.result] size: 9</span>\n<span class=\"c1\">--     def countdown x : PUnit :=</span>\n<span class=\"c1\">--       let _x.1 := 0</span>\n<span class=\"c1\">--       let _x.2 := Nat.decLe x _x.1</span>\n<span class=\"c1\">--       cases _x.2 : PUnit</span>\n<span class=\"c1\">--       | Bool.false =&gt;</span>\n<span class=\"c1\">--         let _x.3 := 1</span>\n<span class=\"c1\">--         let _x.4 := Nat.sub x _x.3</span>\n<span class=\"c1\">--         let _x.5 := countdown _x.4</span>\n<span class=\"c1\">--         _x.5</span>\n<span class=\"c1\">--       | Bool.true =&gt;</span>\n<span class=\"c1\">--         let _x.6 := PUnit.unit</span>\n<span class=\"c1\">--         _x.6</span>\n</code></pre></div>\n<p>I am assuming this would be more or less what we would be looking for in terms of basic tail-recursion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- [Compiler.result] size: 9</span>\n<span class=\"c1\">--     def countdown x : PUnit :=</span>\n<span class=\"c1\">--       let _x.1 := 0</span>\n<span class=\"c1\">--       let _x.2 := Nat.decLe x _x.1</span>\n<span class=\"c1\">--       jp rec _jp.1 _y.1 :=</span>\n<span class=\"c1\">--         cases _x.2 : PUnit</span>\n<span class=\"c1\">--         | Bool.false =&gt;</span>\n<span class=\"c1\">--           let _x.3 := 1</span>\n<span class=\"c1\">--           let _x.4 := Nat.sub x _x.3</span>\n<span class=\"c1\">--           let _x.5 := goto _jp.1 _x.4</span>\n<span class=\"c1\">--           _x.5</span>\n<span class=\"c1\">--         | Bool.true =&gt;</span>\n<span class=\"c1\">--           let _x.6 := PUnit.unit</span>\n<span class=\"c1\">--           _x.6</span>\n</code></pre></div>\n<p>Is this part of the short term plan?</p>",
        "id": 303343071,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1665448048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"463095\">@Yuri de Wit</span>  We don't have recursive join points in LCNF. Only top-level functions are recursive, and tail calls are eliminated when emit code.</p>",
        "id": 303344646,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665449385
    },
    {
        "content": "<p>To see join points in action consider this example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.result</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n  <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span> <span class=\"k\">then</span>\n    <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">aux</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">c</span> <span class=\"k\">then</span>\n    <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">aux</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">aux</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The LCNF code for it is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"kd\">def</span> <span class=\"n\">f._lambda_0</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.1</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">z</span> <span class=\"n\">z</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">z</span> <span class=\"n\">x</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">_x.1</span> <span class=\"n\">_x.2</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">z</span> <span class=\"n\">y</span>\n      <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">_x.3</span> <span class=\"n\">_x.4</span>\n      <span class=\"n\">_x.5</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n      <span class=\"n\">jp</span> <span class=\"n\">_jp.1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.2</span> <span class=\"o\">:=</span> <span class=\"n\">f._lambda_0</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">y</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.3</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">x</span> <span class=\"n\">_x.2</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.4</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">_x.3</span> <span class=\"n\">y</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.5</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.6</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">_x.4</span> <span class=\"n\">_x.5</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.7</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.8</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">_x.6</span> <span class=\"n\">_x.7</span>\n        <span class=\"n\">_x.8</span>\n      <span class=\"n\">jp</span> <span class=\"n\">_jp.9</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.10</span> <span class=\"o\">:=</span> <span class=\"n\">f._lambda_0</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.11</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">x</span> <span class=\"n\">_x.10</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.12</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul</span> <span class=\"n\">_x.11</span> <span class=\"n\">x</span>\n        <span class=\"k\">let</span> <span class=\"n\">_x.13</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.add</span> <span class=\"n\">y</span> <span class=\"n\">_x.12</span>\n        <span class=\"n\">_x.13</span>\n      <span class=\"n\">jp</span> <span class=\"n\">_jp.14</span> <span class=\"n\">_y.15</span> <span class=\"n\">_y.16</span> <span class=\"n\">_y.17</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n        <span class=\"n\">cases</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">cases</span> <span class=\"n\">_y.16</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">cases</span> <span class=\"n\">_y.15</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n            <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">cases</span> <span class=\"n\">_y.17</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n              <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"k\">let</span> <span class=\"n\">_x.18</span> <span class=\"o\">:=</span> <span class=\"n\">f._lambda_0</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x</span>\n                <span class=\"n\">_x.18</span>\n              <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n                <span class=\"n\">goto</span> <span class=\"n\">_jp.9</span>\n            <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">goto</span> <span class=\"n\">_jp.9</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">goto</span> <span class=\"n\">_jp.9</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">goto</span> <span class=\"n\">_jp.1</span>\n      <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">goto</span> <span class=\"n\">_jp.14</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">goto</span> <span class=\"n\">_jp.14</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Bool.false</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">goto</span> <span class=\"n\">_jp.14</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">c</span>\n          <span class=\"bp\">|</span> <span class=\"n\">Bool.true</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">goto</span> <span class=\"n\">_jp.1</span>\n</code></pre></div>",
        "id": 303344762,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1665449469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/341532-lean4-dev/topic/.5BCompiler.5D.20Recursive.20join.20points/near/303344646\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span>  We don't have recursive join points in LCNF. Only top-level functions are recursive, and tail calls are eliminated when emit code.</p>\n</blockquote>\n<p>I see. So not really represented explicitly in LCNF.</p>\n<p>There reason I got here was to try a dummy pass to find Tail Recustion Module Cons (TRMc) patterns in LCNF (as an exercise with potential future value). I then realized I wasn't 100% sure how we were representing tail calls in LCNF.</p>",
        "id": 303345034,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1665449705
    },
    {
        "content": "<p>Thanks for the example. This part is clear to me, I think.</p>",
        "id": 303345283,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1665449938
    },
    {
        "content": "<p>I already have a mechanism in the find join point pass for detecting tail calls to local functions. Basically LCNF has a tail call if we have</p>\n<p>let x := f a b c<br>\nx</p>\n<p>Somewhere in the code</p>",
        "id": 303365306,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1665468604
    },
    {
        "content": "<p>This is also documented at <a href=\"https://arxiv.org/pdf/1908.05647.pdf#page=7\">https://arxiv.org/pdf/1908.05647.pdf#page=7</a>, which as the paper introducing the old IR is still relevant I think because the corresponding LCNF phases will not look ~that~ different</p>",
        "id": 303382149,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1665477324
    }
]