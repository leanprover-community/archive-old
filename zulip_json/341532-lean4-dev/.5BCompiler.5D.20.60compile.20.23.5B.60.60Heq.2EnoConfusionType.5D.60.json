[
    {
        "content": "<p>When I try to compile <code>HEq.noConfusion</code>, I get an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Compiler.compile</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">``</span><span class=\"n\">HEq.noConfusion</span><span class=\"o\">]</span>  <span class=\"c1\">-- unsupported `HEq.casesOn` application during code generation</span>\n</code></pre></div>\n<p>The reason for the error makes sense to me, but is this expected behavior? I expected that <code>shouldGenerateCode</code> would catch this and not even attempt to compile it  at all.</p>",
        "id": 315177109,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1670748675
    },
    {
        "content": "<p>I think in principle nothing speaks against  HEq.noConfusion passing the current shouldGenerateCode checks since it returns something of type <code>HEq.noConfusionType</code> which is Sort polymorphic so it could in theory result in something of type <code>Type</code>. The issue only ever arises when the code generator looks at the declaration itself and notices that there is non compilable code in there.</p>",
        "id": 315198495,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670761224
    },
    {
        "content": "<p>That being said I do agree that shouldGenerateCode is supposed to catch this type of stuff I'm not just quite sure how yet. I guess in principle we could traverse it and check whether there is subexpressions that are not compilable there.</p>",
        "id": 315199962,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1670761941
    },
    {
        "content": "<p>Ok, I see, thanks for the info. I just manually removed all names ending with <code>noConfusionType</code> and <code>noConfusion</code>... not the best solution but it was pretty clean and worked.</p>",
        "id": 315751491,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1671003292
    }
]