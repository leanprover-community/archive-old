[
    {
        "content": "<p>I managed to define the Hopf fibration as a function from S^3 to S^2. I didn't even have to think about the calculation. <code>polyrith</code> is great!</p>\n<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, maybe tomorrow or Thursday you can help my project group and anyone else interested understand how to show that this is a smooth  map between the manifolds. The API is scary to me.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.instances.sphere</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.polyrith</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The relevant function from ℂ × ℂ to ℂ × ℝ is given by</span>\n\n<span class=\"cm\"> (z, w) ↦ (2 w* z, |z|^2 - |w|^2),</span>\n\n<span class=\"cm\"> i.e.</span>\n\n<span class=\"cm\">  (a + bi, c + di) ↦ (2 (ac + bd) + 2(bc-ad)i, a^2 + b^2 - (c^2 + d^2))</span>\n\n<span class=\"cm\">First, we express this as a function from ℝ^4 to ℝ^3.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hopf_fn</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">),</span>  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Then we show that it takes elements of S^3 maps to S^2.</span>\n<span class=\"cm\">We extract the relevant calculation for `polyrith`.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">useful</span> <span class=\"o\">{</span><span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v0</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v3</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v0</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"n\">v1</span> <span class=\"bp\">*</span> <span class=\"n\">v3</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v0</span> <span class=\"bp\">*</span> <span class=\"n\">v3</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v0</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v0</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hopf_map</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">sphere</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sphere</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span> <span class=\"n\">hopf_fn</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">v.property</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span> <span class=\"n\">norm_eq_of_mem_sphere</span><span class=\"o\">,</span> <span class=\"n\">euclidean_space.norm_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_fin_eq_sum_range</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hopf_fn</span><span class=\"o\">,</span> <span class=\"n\">euclidean_space.norm_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_fin_eq_sum_range</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">if_pos</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">useful</span> <span class=\"n\">this</span>\n  <span class=\"kd\">end</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 289408935,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1657679031
    },
    {
        "content": "<p>I guess <code>polyrith</code> will be the new <code>linarith</code> : people will come to complain that it doesn't solve their goal</p>",
        "id": 289409107,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657679175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> Nice!! Yes, let's meet.  I'm meeting with a different project at the start of the code review session tomorrow, how about we meet at 11:45?</p>",
        "id": 289409160,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657679251
    },
    {
        "content": "<p>Wikipedia has definitions of <a href=\"https://en.wikipedia.org/wiki/Hopf_fibration#Generalizations\">Hopf fibrations</a> over the reals, complexes, quaternions (in arbitrary dimensions), and octonions (in dim 1 and 2). I think this is the generality we should aim for; the classical Hopf fibration S^3 → S^2 is realized as S^3 ⊆ C^2\\{0} → CP^1 composed with a homeomorphism CP^1 → S^2 (probably stereographic projection from a pole?).</p>\n<p>Since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/projectivization\">docs#projectivization</a> hasn't been generalized to division rings, we should be content with the real and complex versions for now. Defining the smooth manifold structure on RP^n and CP^n would be a nice first project (and it's <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Working.20on.20the.20projective.20line/near/281612337\">already done for CP^1</a>) and exhibiting the diffeomorphism between CP^1 and S^2 would be another (where <code>polyrith</code> could be useful; maybe it will also be useful in dealing with inversion in spheres (e.g. in <a href=\"https://github.com/leanprover-community/mathlib/pull/14703\">#14703</a>), and isometry between / isometry group of different models of the hyperbolic space).</p>",
        "id": 289426972,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657699934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I suggested this explicit version of the Hopf fibration as a project.  But I agree, the smooth manifold structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">P</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{P}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> should eventually be added -- I would take a more co-ordinate free approach than the quickie code you linked for the Riemann sphere, though. We should have charts centred at any point, not just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> charts. Happy to talk to anyone interested here!</p>",
        "id": 289449388,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657714523
    },
    {
        "content": "<p>I'm also interested in discussing the right level of formalization for this project. It'd be cool to get as many of the Hopf fibrations at once. <br>\nI'm also wondering if it's possible to prove that the Hopf fibration is a nontrivial fiber bundle with fiber/base/total space being spheres. <a href=\"http://url\">https://leanprover-community.github.io/mathlib_docs/topology/fiber_bundle.html#top</a><br>\nHappy to chat at 11:45 or earlier.</p>",
        "id": 289467974,
        "sender_full_name": "Sam Freedman",
        "timestamp": 1657722802
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.instances.sphere</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.eval</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.polyrith</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.pi_L2</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n<span class=\"kn\">open</span> <span class=\"n\">metric</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">manifold</span>\n<span class=\"kn\">open</span> <span class=\"n\">finite_dimensional</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">E</span><span class=\"bp\">`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`𝕊`</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sphere</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">three</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_diff_euclidean_rng_iff_pi</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">@</span><span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">linear_equiv.refl</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_continuous_linear_equiv</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">φ.to_continuous_linear_map.cont_diff.comp</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">φ.symm.to_continuous_linear_map.cont_diff.comp</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_diff_euclidean_dom_iff_pi</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">@</span><span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ι</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">ℝ</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">linear_equiv.refl</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_continuous_linear_equiv</span> <span class=\"k\">in</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hf.comp</span> <span class=\"n\">φ.symm.to_continuous_linear_map.cont_diff</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hf.comp</span> <span class=\"n\">φ.to_continuous_linear_map.cont_diff</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_diff_euclidean</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">euclidean_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">cont_diff_euclidean_rng_iff_pi</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_pi</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The relevant function from ℂ × ℂ to ℂ × ℝ is given by</span>\n\n<span class=\"cm\"> (z, w) ↦ (2 w* z, |z|^2 - |w|^2),</span>\n\n<span class=\"cm\"> i.e.</span>\n\n<span class=\"cm\">  (a + bi, c + di) ↦ (2 (ac + bd) + 2(bc-ad)i, a^2 + b^2 - (c^2 + d^2))</span>\n\n<span class=\"cm\">First, we express this as a function from ℝ^4 to ℝ^3.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">hopf_fn</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"bp\">!</span><span class=\"o\">[</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">),</span>  <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Then we show that it takes elements of S^3 maps to S^2.</span>\n<span class=\"cm\">We extract the relevant calculation for `polyrith`.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">useful</span> <span class=\"o\">{</span><span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v0</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v3</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v0</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">+</span> <span class=\"n\">v1</span> <span class=\"bp\">*</span> <span class=\"n\">v3</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">-</span> <span class=\"n\">v0</span> <span class=\"bp\">*</span> <span class=\"n\">v3</span><span class=\"o\">))</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">v0</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">v1</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v2</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">v3</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">linear_combination</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v0</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v2</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v1</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">v3</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">hopf_map</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝕊</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕊</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.cod_restrict</span> <span class=\"o\">(</span><span class=\"n\">hopf_fn</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝕊</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">𝕊</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">v.property</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span> <span class=\"n\">norm_eq_of_mem_sphere</span><span class=\"o\">,</span> <span class=\"n\">euclidean_space.norm_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_fin_eq_sum_range</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hopf_fn</span><span class=\"o\">,</span> <span class=\"n\">euclidean_space.norm_eq</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_fin_eq_sum_range</span><span class=\"o\">,</span> <span class=\"n\">finset.sum_range_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">if_pos</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">useful</span> <span class=\"n\">this</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">We now show that the Hopf map from S^3 to S^2 is smooth</span>\n<span class=\"cm\">in the sense of smooth manifolds.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">smooth_hopf_map</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"o\">(</span><span class=\"bp\">𝓡</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">𝓡</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">hopf_map</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">cont_mdiff.cod_restrict_sphere</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">cont_mdiff.comp</span> <span class=\"n\">_</span> <span class=\"n\">cont_mdiff_coe_sphere</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cont_mdiff_iff_cont_diff</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cont_diff_euclidean</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">i</span><span class=\"bp\">;</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hopf_fn</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">ring_nf</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"n\">cont_diff_euclidean_dom_iff_pi</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">cont_diff.add</span><span class=\"o\">,</span> <span class=\"n\">cont_diff.mul</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_apply</span><span class=\"o\">,</span> <span class=\"n\">cont_diff.neg</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_const</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">cont_diff.sub</span><span class=\"o\">,</span> <span class=\"n\">cont_diff.mul</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_apply</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_const</span><span class=\"o\">],</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply_rules</span> <span class=\"o\">[</span><span class=\"n\">cont_diff.add</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_apply</span><span class=\"o\">,</span> <span class=\"n\">cont_diff.neg</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_const</span><span class=\"o\">,</span> <span class=\"n\">cont_diff.pow</span><span class=\"o\">],</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>We now have <code>smooth_hopf_map</code> working! Taking a break for the day.</p>",
        "id": 289521337,
        "sender_full_name": "Sam Freedman",
        "timestamp": 1657746566
    },
    {
        "content": "<p>Tomorrow I'll be virtual, but I'll be following on Zulip if there's interest in doing coding sessions. Or I'll just bug people for possible next steps.</p>",
        "id": 289521555,
        "sender_full_name": "Sam Freedman",
        "timestamp": 1657746672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513557\">@Sam Freedman</span> Congrats!!</p>",
        "id": 289522065,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657746958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513557\">@Sam Freedman</span> I think the two stupid sorries are in the library as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fact_finite_dimensional_of_finrank_eq_succ\">docs#fact_finite_dimensional_of_finrank_eq_succ</a></p>",
        "id": 289546390,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657767763
    },
    {
        "content": "<p>Actually, that's not true, sorry.  But here's some code for it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">module.free.fact_finrank_pi_fin</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">strong_rank_condition</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">module.free.finrank_pi</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">fintype.card_fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fact_finrank_euclidean</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">euclidean_space</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">module.free.fact_finrank_pi_fin</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span>\n\n<span class=\"c1\">-- only in your file, it shouldn't be a global instance (we can discuss why)</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">fact_finrank_euclidean</span>\n</code></pre></div>",
        "id": 289547511,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657769205
    },
    {
        "content": "<p>(Just so that someone else doesn't start to work on it, I'm working on the PR about differentiability in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space\">docs#euclidean_space</a>)</p>",
        "id": 289547588,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657769317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> On that note, do you think we should duplicate lemmas like the <code>cont_diff_euclidean</code> in the above code (which is a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff_pi\">docs#cont_diff_pi</a>), or should we just have the translation lemmas like <code>cont_diff_euclidean_rng_iff_pi</code> ?</p>",
        "id": 289547899,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657769811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> Actually, my instinct is to have <code>cont_diff_euclidean</code> but not <code>cont_diff_euclidean_rng_iff_pi</code>.  I think people will always prefer to use that form.</p>",
        "id": 289548057,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657770018
    },
    {
        "content": "<p>Okay but then we need to duplicate a bunch of other thing. Just for the code above we also need a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff_apply\">docs#cont_diff_apply</a></p>",
        "id": 289548079,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657770100
    },
    {
        "content": "<p>Well okay actually that might not be a bunch, this is somehow all you need to know it behaves like the product</p>",
        "id": 289548124,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657770130
    },
    {
        "content": "<p>So yeah I guess that works</p>",
        "id": 289548129,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657770148
    },
    {
        "content": "<p>(And yes, I also know you suggested to bypass <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_diff_apply\">docs#cont_diff_apply</a> by invoking linearity, but we felt like invoking this directly was fine too)</p>",
        "id": 289548145,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657770227
    },
    {
        "content": "<p>I was going to comment on that actually :)</p>",
        "id": 289548269,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657770369
    },
    {
        "content": "<p>Oh, sorry if I ruined the way you wanted to introduce things <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 289548284,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657770409
    },
    {
        "content": "<p>I think the principled way is to make a copy of <code>linear_map.proj</code> which uses Euclidean space as the domain rather than pi.</p>",
        "id": 289548290,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657770427
    },
    {
        "content": "<p>Similar to how <span class=\"user-mention\" data-user-id=\"467358\">@Daniel Packer</span> added <a href=\"https://leanprover-community.github.io/mathlib_docs/find/euclidean_space.single\">docs#euclidean_space.single</a> duplicating <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.single\">docs#pi.single</a>.</p>",
        "id": 289548371,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657770541
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>  for the code, I’ll remove those sorry’s</p>",
        "id": 289594146,
        "sender_full_name": "Sam Freedman",
        "timestamp": 1657806549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> what do you think is the next place to go? <br>\nI think it would be cool to show it’s a fiber bundle. Or maybe we can show the fibers are circles? Not sure how to formalize this notion of isomorphism because the level sets p^-1(a) for a in S^2 and the circle S^1</p>",
        "id": 289594516,
        "sender_full_name": "Sam Freedman",
        "timestamp": 1657806725
    },
    {
        "content": "<p>That's great!  Maybe also surjectivity ...</p>",
        "id": 289596541,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657807666
    },
    {
        "content": "<p>You said you were free until 11:45 today, but I'm not free til later unfortunately.</p>",
        "id": 289596718,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657807727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/330515-LftCM22/topic/Hopf.20fibration/near/289596718\">said</a>:</p>\n<blockquote>\n<p>You said you were free until 11:45 today, but I'm not free til later unfortunately.</p>\n</blockquote>\n<p>Oh, I don’t have a restriction like that. What time is good to chat?</p>",
        "id": 289599307,
        "sender_full_name": "Sam Freedman",
        "timestamp": 1657808930
    },
    {
        "content": "<p>Ah!  Do you want to talk after the teaching discussion then?</p>",
        "id": 289601068,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657809790
    },
    {
        "content": "<p>I think touching base at 12:30 sounds good!</p>",
        "id": 289601390,
        "sender_full_name": "Sam Freedman",
        "timestamp": 1657809933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513557\">@Sam Freedman</span> The teaching session just ended, I can talk now if you're free but I will probably be at lunch at 12:30!</p>",
        "id": 289610733,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657814090
    },
    {
        "content": "<p>Talking now is great—do you have a Zoom link?</p>",
        "id": 289611239,
        "sender_full_name": "Sam Freedman",
        "timestamp": 1657814323
    },
    {
        "content": "<p>PM'd you, others feel free to message me if you'd like to join.</p>",
        "id": 289611868,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657814581
    },
    {
        "content": "<p>Sorry I missed this... Busiso has been working on a calculation that shows that the fibers are circles in the simple case.</p>",
        "id": 289644123,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1657829910
    },
    {
        "content": "<p>Great!  We arranged to meet again in person tomorrow to discuss next steps.</p>",
        "id": 289644372,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657830028
    },
    {
        "content": "<p>Here is the euclidean space differentiability PR : <a href=\"https://github.com/leanprover-community/mathlib/pull/15363\">#15363</a></p>",
        "id": 289645270,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657830522
    }
]