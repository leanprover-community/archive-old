[
    {
        "content": "<p>A thread for the symplectic group</p>\n<p><span class=\"user-mention\" data-user-id=\"455674\">@Matej Penciak</span> and Fabien Clery.</p>",
        "id": 289344914,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1657640984
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513795\">@Fabien Cléry</span></p>",
        "id": 289345083,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1657641044
    },
    {
        "content": "<p>A thread for the symplectic group group ...</p>",
        "id": 289350121,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1657643047
    },
    {
        "content": "<p>right now we are only a monoid..</p>",
        "id": 289351395,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1657643639
    },
    {
        "content": "<p>I got kind of bogged down with some annoying technical things on the train back home. </p>\n<p>I made the repo: <a href=\"https://github.com/mpenciak/symplectic_groups\">https://github.com/mpenciak/symplectic_groups</a> if you want to check it out. I didn't quite get a group instance yet because I think I made a bad choice at some point to write all my theorems in terms of the hypotheses <br>\n<code>{A : matrix (l ⊕ l) (l ⊕ l) ℝ} (hA : A ∈ symplectic l)</code><br>\ninstead of<br>\n<code>(A : symplectic l)</code> <br>\nso I've run into a weird situation where I need to prove <code>⟨(↑A)⁻¹, _⟩ * A = 1</code></p>",
        "id": 289404946,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1657674275
    },
    {
        "content": "<p>(also people are welcome to <span aria-label=\"golf\" class=\"emoji emoji-1f3cc\" role=\"img\" title=\"golf\">:golf:</span>  my proofs)</p>",
        "id": 289405076,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1657674441
    },
    {
        "content": "<p>I just came back from dinner, but I will have a look now</p>",
        "id": 289408567,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1657678669
    },
    {
        "content": "<p>The code for <code>symplectic_inv</code> was removed, but it seems like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">symplectic_inv</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">⊕</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">⊕</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">symplectic_group</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">invertible</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span><span class=\"o\">]:</span>\n  <span class=\"n\">symplectic_group</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mem_symplectic_group_iff</span> <span class=\"n\">at</span> <span class=\"n\">hA</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">matrix.transpose_nonsing_inv</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⬝</span> <span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ⁻¹</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">hA.symm</span>\n    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span> <span class=\"bp\">⬝</span> <span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ⁻¹</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">matrix.mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">matrix.mul_assoc</span><span class=\"o\">]</span>\n    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">has_inv.inv</span> <span class=\"n\">A</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">refl</span>\n    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span> <span class=\"n\">A</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.inv_of_eq_nonsing_inv</span>\n    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"n\">A</span><span class=\"bp\">ᵀ⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.inv_of_mul_self</span>\n    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵀ</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"bp\">⅟</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵀ</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.inv_of_eq_nonsing_inv</span>\n    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">⬝</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">⬝</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">matrix.mul_inv_of_self</span>\n    <span class=\"bp\">...</span>                     <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"n\">l</span> <span class=\"n\">ℝ</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>would work.</p>\n<p>I find that I don't fully understand why matrices use <code>⬝</code> and the situation surrounding between <code>⅟ </code> versus <code>⁻¹</code> and between <code>has_inv</code>versus <code>invertible</code>.</p>",
        "id": 289418452,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1657691888
    },
    {
        "content": "<p>Isn't <code>invertible Aᵀ</code> redundant? You could do <code>haveI : invertible Aᵀ := // proof</code> after the <code>begin</code>.</p>",
        "id": 289419479,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657693053
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"466727\">@Jim Fowler</span>  actually both typeclasses are redunant, because we have <code>hA</code></p>",
        "id": 289421330,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1657695046
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/invertible\">docs#invertible</a> is a data-carrying class, unfortunately</p>",
        "id": 289421451,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657695148
    },
    {
        "content": "<p>One can completely get around using <code>invertible</code> and the weird inversion, see the current commit in Matej's repo (commit f356924).</p>",
        "id": 289424924,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1657698330
    },
    {
        "content": "<p>I'm new to all this, and I would have thought that typeclass inference could have produced the <code>[invertible A]</code> from <code>hA</code>, so I am not sure what effect including <code>[invertible A]</code> has.</p>",
        "id": 289455606,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1657717359
    },
    {
        "content": "<p>these are called typeclass-instances. A brief and not really correct explanation is that a typeclass behaves somewhat like a structure, but it is not type, so you can add additional fields to different types and an instance is the implementation, so that you can access the fields of <code>invertible</code>for <code>A</code></p>",
        "id": 289457979,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1657718480
    },
    {
        "content": "<p>But I would have thought having <code>hA</code> in the tactic state would mean that <code>1/</code> would infer the <code>invertible</code> instance, so I'm not sure what effect including <code>[invertible A]</code> had.</p>",
        "id": 289469220,
        "sender_full_name": "Jim Fowler",
        "timestamp": 1657723284
    }
]