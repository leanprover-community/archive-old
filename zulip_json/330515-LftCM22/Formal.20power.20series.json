[
    {
        "content": "<p>Here's a thread for the formal power series project (I'll dump some code here when it's a bit more polished)</p>",
        "id": 289253400,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657575583
    },
    {
        "content": "<p>Hi power series people! I have the first part (sine identity) down to proving the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">ℂ</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not sure how to manipulate the relevant power series coefficients.</p>",
        "id": 289266897,
        "sender_full_name": "Tyler Raven Billingsley",
        "timestamp": 1657586692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> <span class=\"user-mention\" data-user-id=\"513593\">@Phil Wood</span> and I worked on this a little bit and we eventually got somewhere, but the code is on Phil's computer.</p>",
        "id": 289270323,
        "sender_full_name": "Sam van G",
        "timestamp": 1657590806
    },
    {
        "content": "<p>Oh yeah we should definitely meet tomorrow to talk about it. Are you working on a common repo/branch, or completely separately ? As Sam said we solved a problem like that on Phil's code, and it was a bit painful because it's all \"obvious stuff\" and because the coefficients of the sine power series are defined in a strange way, exploiting the fact than natural number division floors the result, but we should be able to replicate it pretty easily now that we've identified the key lemmas for manipulating this</p>",
        "id": 289271203,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657591895
    },
    {
        "content": "<p>I hope we'll be able to get through the frustrating part of dealing with coercions and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_map\">docs#algebra_map</a> without too much damage, and if we manage that then it's kind of a good thing because knowing how to work around these kind of things is somewhat of a skill on its own imho</p>",
        "id": 289271629,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657592296
    },
    {
        "content": "<p>Here's my code from yesterday, including the lemma that <span class=\"user-mention\" data-user-id=\"410725\">@Tyler Raven Billingsley</span> needs. I think I managed to avoid the worst of the algebra map pain.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.power_series.well_known</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">power_series</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_sin_bit0</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">bit0</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sin</span><span class=\"o\">,</span> <span class=\"n\">coeff_mk</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"o\">(</span><span class=\"n\">even_bit0</span> <span class=\"n\">n</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.bit1_div_bit0</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">bit0</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">/</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat.div_two_mul_two_add_one_of_odd</span> <span class=\"o\">(</span><span class=\"n\">odd_bit1</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_two</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">nat.bit1_eq_bit1</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bit0_eq_two_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">nat.div_div_eq_div_mul</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">coeff_sin_bit1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">coeff</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sin</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">bit1</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sin</span><span class=\"o\">,</span> <span class=\"n\">coeff_mk</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"o\">(</span><span class=\"n\">nat.not_even_bit1</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">nat.bit1_div_bit0</span><span class=\"o\">,</span> <span class=\"n\">nat.div_one</span><span class=\"o\">,</span>\n  <span class=\"bp\">←</span><span class=\"n\">mul_one_div</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">map_neg</span><span class=\"o\">,</span> <span class=\"n\">map_one</span><span class=\"o\">,</span> <span class=\"n\">coeff_exp</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">sin</span> <span class=\"n\">ℂ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">rescale</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">rescale</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">coeff_rescale</span><span class=\"o\">,</span> <span class=\"n\">coeff_rescale</span><span class=\"o\">,</span> <span class=\"n\">neg_pow</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">one_sub_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">n.even_or_odd</span> <span class=\"k\">with</span> <span class=\"o\">(⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">I_pow_bit0</span><span class=\"o\">,</span> <span class=\"n\">neg_pow_bit0</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_zero</span><span class=\"o\">,</span> <span class=\"n\">coeff_sin_bit0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">neg_pow_bit1</span><span class=\"o\">,</span> <span class=\"n\">one_pow</span><span class=\"o\">,</span> <span class=\"n\">sub_neg_eq_add</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">bit0</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">I_pow_bit1</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span>\n        <span class=\"n\">inv_mul_cancel_left₀</span><span class=\"o\">,</span> <span class=\"n\">coeff_sin_bit1</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_ne_zero</span> <span class=\"n\">two_ne_zero'</span> <span class=\"n\">I_ne_zero</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">power_series</span>\n</code></pre></div>",
        "id": 289287657,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657610736
    },
    {
        "content": "<p>Okay so it seems like you are all working separately, right ? Would you be interested in setting up a lean project to put that in common (or at least set up a branch in mathlib) ? That would be a really good occasion to get some experience with GitHub if you aren't already sed to it (and I should say that, even when working alone on a project, you are still encouraged to set up a lean project / branch of mathlib to be able to share your code later)</p>",
        "id": 289326108,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1657633767
    },
    {
        "content": "<p>could we get non-master-branch write permissions (samvang, tyler-billingsley) please ? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 289327325,
        "sender_full_name": "Sam van G",
        "timestamp": 1657634267
    },
    {
        "content": "<p>philmwood as well</p>",
        "id": 289327735,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657634414
    },
    {
        "content": "<p>I've just sent an invite to <code>samvang</code> I'll do the others now.</p>",
        "id": 289327813,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1657634448
    },
    {
        "content": "<p>OK I've sent invites to Tyler and Phil now also. (This is actually the first time I've sent invites --- I believe I've clicked the right buttons but LMK if any issues.)</p>",
        "id": 289328110,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1657634575
    },
    {
        "content": "<p>(I did mess up the invites but I believe I have done it correctly now --- you may get some confusing emails from GitHub but hopefully all should work.)</p>",
        "id": 289330356,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1657635450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Can I get non-master-branch write permissions as well? My github username is <code>jakelev</code>.</p>",
        "id": 289331640,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1657635956
    },
    {
        "content": "<p>Done</p>",
        "id": 289331785,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1657635996
    },
    {
        "content": "<p>It worked for me, thanks <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span></p>",
        "id": 289332935,
        "sender_full_name": "Sam van G",
        "timestamp": 1657636431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513593\">@Phil Wood</span> Just realized that your alternate Catalan number recursion formula might be good for the Catalan file in mathlib!</p>",
        "id": 289787611,
        "sender_full_name": "Tyler Raven Billingsley",
        "timestamp": 1657921842
    },
    {
        "content": "<p>That is a good thought!  I need to think a bit on the proof though, since it is a huge mess of rw and nth_rewrite commands at the moment.  But if I can get that cleaned up, I may well give PR-ing a try!</p>",
        "id": 289788516,
        "sender_full_name": "Phil Wood",
        "timestamp": 1657922443
    }
]