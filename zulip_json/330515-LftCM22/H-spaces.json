[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513540\">@Flo</span> I see and I am happy to see that H-spaces seem interesting. How do you want to proceed? We can<br>\n1) have a Zoom call<br>\n2) I can show you some skeleton of what I would start doing<br>\n3) You can start on your own (I suggest picking up the references I provided in Serre's paper-I have the pdf) and write me if you need help.</p>",
        "id": 289236092,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657566553
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> , thanks for having me on the project! Could I get a copy of what you wrote in the pdf? I can probably find Serre's paper, but it you have the pdf, it helps if you send it to me.</p>\n<p>Once I have seen again what you want to prove, I will first see if I have any math questions, and then we can meet on Zoom to see how this is going to work (please remember than I am relatively new to Lean!).</p>\n<p>Would that work for you and other potential participants in this project?</p>",
        "id": 289236672,
        "sender_full_name": "Flo",
        "timestamp": 1657566824
    },
    {
        "content": "<p>Oh! it's OK, I kept the link to the pdf file with the projects from heather's talk :)</p>",
        "id": 289236999,
        "sender_full_name": "Flo",
        "timestamp": 1657566971
    },
    {
        "content": "<p>And here is Serre's paper: <a href=\"/user_uploads/3121/uEAPioXBMsXSPnFoLs4W3Cs6/Serre-Homologie-singulière-des-espaces-fibrés.pdf\">Serre-Homologie-singulière-des-espaces-fibrés.pdf</a></p>",
        "id": 289237060,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657567003
    },
    {
        "content": "<p>Please do not hesitate to contact me: for the time being, you are alone on the project, so we are free.</p>",
        "id": 289237123,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657567037
    },
    {
        "content": "<p>How is it going?</p>",
        "id": 289243173,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657569924
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> . So, here is a first take at what I believe the definition of an H-space should look like in Lean. </p>\n<p>Mathematically, an H-space is a triple (G,m,e) where G is a topological space m: G \\times G \\to G is a continuous map such that :<br>\n(i) m(e,e) = e.<br>\n(ii) the  continuous maps m(e,.): G \\to G and m(.,e): G \\to G are homotopic to id_G.</p>\n<p>This is Wikipedia's definition: <a href=\"https://en.wikipedia.org/wiki/H-space\">https://en.wikipedia.org/wiki/H-space</a>. It does not seem equivalent to Serre's definition on Page  474 of his paper (Serre says m is given and then there exists e such that etc). </p>\n<p>Let us ignore this issue, as well as the second condition in the definition, for now. Then, based on the analogy with (<a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/group.html#topological_group\">Lean's definition of a topological group</a>), the definition of an H-space should probably start like this: </p>\n<p>structure H-space (G : Type u_1)  [topological_space G]<br>\n Type u_1<br>\n(m : G → G → G)  --if I understand correctly, this is a map from G \\times G to G in Lean<br>\n-- here, I am not sure whether Lean already knows that m is continuous (I guess not)<br>\n(e : G)<br>\n(m_e_e  : m(e,e) = e)</p>\n<p>I do not feel confident enough to try that in Lean right now, but it should get us closer to having the definition that we are after. </p>\n<p>I think that you said that, after the definition is implemented, the first thing to prove is that topological groups are H-spaces, which sounds great to me.</p>\n<p>Perhaps we can meet and try it together at some point? We just need to take into account the different time zones:-) Perhaps we can exchange DMs at the conference tomorrow. Thanks!</p>",
        "id": 289388869,
        "sender_full_name": "Flo",
        "timestamp": 1657661762
    },
    {
        "content": "<p>OK, this is the way I am implementing this and what you suggest seems very good indeed. I am happy to chat tomorrow, are you in France right now? When would be a convenient time for you to discuss?</p>",
        "id": 289389352,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657662019
    },
    {
        "content": "<p>Yes, I am in France right now! Perhaps we can chat during the first coffee break? I am also free an hour before the first talk, but then it is early for you.</p>",
        "id": 289389602,
        "sender_full_name": "Flo",
        "timestamp": 1657662194
    },
    {
        "content": "<p>Well, let's see (jet-lag is not really helping...): before the first talk might be possible, otherwise at any rate the second part of the morning is dedicated to checking the projects, so it will be the perfect time.</p>",
        "id": 289389783,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657662304
    },
    {
        "content": "<p>After the last talk is also fine for me (for about 30-45min)</p>",
        "id": 289389832,
        "sender_full_name": "Flo",
        "timestamp": 1657662329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/330515-LftCM22/topic/H-spaces/near/289389783\">said</a>:</p>\n<blockquote>\n<p>Well, let's see (jet-lag is not really helping...): before the first talk might be possible, otherwise at any rate the second part of the morning is dedicated to checking the projects, so it will be the perfect time.</p>\n</blockquote>\n<p>Oh! Great, we can take advantage of that time :-)</p>",
        "id": 289389923,
        "sender_full_name": "Flo",
        "timestamp": 1657662364
    },
    {
        "content": "<p>In fact, it is probably the best option, isn't it? We start talking during the coffee break, and go into more details during the second session of the morning.</p>\n<p>Would that work for you?</p>",
        "id": 289390173,
        "sender_full_name": "Flo",
        "timestamp": 1657662494
    },
    {
        "content": "<p>Sure!</p>",
        "id": 289393066,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657664350
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> , are you around? Shall we talk on Zoom?</p>",
        "id": 289463895,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657721131
    },
    {
        "content": "<p>Yes, I am around! If you give me 10 minutes, I will find a room and set-up a Zoom call: I will post here the details of the call. Sounds good?</p>",
        "id": 289464039,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657721180
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 289464143,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657721229
    },
    {
        "content": "<p>Note: the next type will appear in the definition of an H-space, one way or another.</p>\n<p>structure continuous_map.homotopy  {X : Type u}  {Y : Type v} [topological_space X]  [topological_space Y]  (f₀ f₁ : C(X, Y)) :<br>\nType (max u v)<br>\nto_continuous_map : C(↥unit_interval × X, Y)<br>\nmap_zero_left' : ∀ (x : X), self.to_continuous_map.to_fun (0, x) = ⇑f₀ x<br>\nmap_one_left' : ∀ (x : X), self.to_continuous_map.to_fun (1, x) = ⇑f₁ x</p>\n<p>continuous_map.homotopy f₀ f₁ is the type of homotopies from f₀ to f₁.</p>",
        "id": 289465386,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657721788
    },
    {
        "content": "<p><a href=\"https://cnrs.zoom.us/j/92506672868?pwd=VWp2Z1p5UFlkMEhXamNOaU9Bak9vdz09\">https://cnrs.zoom.us/j/92506672868?pwd=VWp2Z1p5UFlkMEhXamNOaU9Bak9vdz09</a></p>",
        "id": 289465476,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657721823
    },
    {
        "content": "<p>Everybody interested is free to come!</p>",
        "id": 289465527,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657721842
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">H_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Hmul</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">cont'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">Hmul</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Hmul_e_e</span> <span class=\"o\">:</span> <span class=\"n\">Hmul</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">left_Hmul_e</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"bp\">@</span><span class=\"n\">continuous_map.homotopy_rel</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">⟨(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Hmul</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">continuous.comp</span> <span class=\"n\">cont'</span> <span class=\"o\">(</span><span class=\"n\">continuous_const.prod_mk</span> <span class=\"n\">continuous_id'</span><span class=\"o\">))⟩</span>\n  <span class=\"o\">⟨(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Hmul</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">continuous.comp</span> <span class=\"n\">cont'</span> <span class=\"o\">(</span><span class=\"n\">continuous_const.prod_mk</span> <span class=\"n\">continuous_id'</span><span class=\"o\">))⟩</span>\n  <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"n\">right_Hmul_e</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"bp\">@</span><span class=\"n\">continuous_map.homotopy_rel</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"o\">⟨(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Hmul</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">continuous.comp</span> <span class=\"n\">cont'</span><span class=\"o\">(</span><span class=\"n\">continuous_id'.prod_mk</span> <span class=\"n\">continuous_const</span><span class=\"o\">))⟩</span>\n  <span class=\"o\">⟨(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Hmul</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">continuous.comp</span> <span class=\"n\">cont'</span><span class=\"o\">(</span><span class=\"n\">continuous_id'.prod_mk</span> <span class=\"n\">continuous_const</span><span class=\"o\">))⟩</span>\n  <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 289474846,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657725615
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">test</span>\n</code></pre></div>",
        "id": 289475052,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657725706
    },
    {
        "content": "<p>Hi Florent! I really enjoyed our meeting today. Can you share the file please, so I can play with it?</p>",
        "id": 289495822,
        "sender_full_name": "Ángel González Prieto",
        "timestamp": 1657734441
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"513671\">@Ángel González Prieto</span> ! Yes, today was a lot of fun for me too! Sure, I'll post the code below. </p>\n<p>But actually, I wanted to ask <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> to create a repository on which we can all work (although I'm not yet sure how this works in practice), so that we can make progress on the file and continue working on this after this week. Also, is anybody else is interested in joining us, they could just go to the repository, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.homotopy.path</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">H_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"c1\">--(m : G → G → G)</span>\n<span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"c1\">--(m_e_e : m e e = e)</span>\n<span class=\"o\">(</span><span class=\"n\">m_e_e</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"c1\">-- m is continuous</span>\n<span class=\"o\">(</span><span class=\"n\">cont_m</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"c1\">-- this is a term of type continuous m</span>\n<span class=\"o\">(</span><span class=\"n\">m_e_dot_homotopic_to_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_map.homotopy_rel</span>\n  <span class=\"o\">⟨(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">continuous.comp</span> <span class=\"n\">cont_m</span> <span class=\"o\">(</span><span class=\"n\">continuous.prod_mk</span> <span class=\"n\">continuous_const</span> <span class=\"n\">continuous_id'</span><span class=\"o\">))⟩</span>\n  <span class=\"c1\">--⟨(λ g : G, g), continuous_id'⟩</span>\n  <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">continuous_id'</span><span class=\"o\">⟩</span>\n  <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"n\">m_dot_e_homotopic_to_id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"n\">continuous_map.homotopy_rel</span>\n  <span class=\"o\">⟨(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">continuous.comp</span> <span class=\"n\">cont_m</span> <span class=\"o\">(</span><span class=\"n\">continuous.prod_mk</span> <span class=\"n\">continuous_id'</span> <span class=\"n\">continuous_const</span><span class=\"o\">))⟩</span>\n  <span class=\"o\">⟨</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">continuous_id'</span><span class=\"o\">⟩</span>\n  <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">})</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">top_group_is_H_space</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">][</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">H_space</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span><span class=\"o\">,</span>\n\n<span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c1\">--#check H_space.mk</span>\n</code></pre></div>",
        "id": 289497410,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657735162
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span>  Sure, the repository is already there, and I will soon grant both of you access to it. I am just a bit busy now, but I will do this later this afternoon.</p>",
        "id": 289497863,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657735330
    },
    {
        "content": "<p>Can you give me your github name?</p>",
        "id": 289497881,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657735338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/330515-LftCM22/topic/H-spaces/near/289497881\">said</a>:</p>\n<blockquote>\n<p>Can you give me your github name?</p>\n</blockquote>\n<p>matematiflo</p>",
        "id": 289497983,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657735377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span> <span class=\"user-mention\" data-user-id=\"513671\">@Ángel González Prieto</span> : You should ask the maintainers for an access to the <code>mathlib</code> repository, the project is a branch there.</p>",
        "id": 289513751,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657742995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"513540\">@Flo (Florent Schaffhauser)</span> Well, rather than forking you can simply obtain mathlib (via <code>leanproject get mathlib</code>) and then <code>checkout </code> to the branch</p>",
        "id": 289517927,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657745041
    },
    {
        "content": "<p>The branch name is <code>fae_fundamental_group_lftcm22</code></p>",
        "id": 289518015,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657745067
    },
    {
        "content": "<p>I am working on this right now and the code is very messy.</p>",
        "id": 289518062,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657745092
    },
    {
        "content": "<p>At any rate, I have integrated what we did this morning.'</p>",
        "id": 289518090,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657745105
    },
    {
        "content": "<p>OK, I am more or less following (I don't know what checkout means or does). Maybe I wait until our next reunion and we do it all together?</p>",
        "id": 289519964,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657745906
    },
    {
        "content": "<p>Sure; at any rate, <code>checkout</code> is a basic <code>git</code> command that allows you to switch branch. Its usage is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">checkout</span> <span class=\"n\">fae_fundamental_group_lftcm22</span>\n</code></pre></div>\n<p>to access the required branch, but if you have never used <code>git</code> we can discuss this live, it will be easier.</p>",
        "id": 289520091,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657745987
    },
    {
        "content": "<p>I still have not figured out how to use the multiplication from the group G to prove that G has a map m of the type that we need to prove that it is an H-space.</p>",
        "id": 289520114,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657745999
    },
    {
        "content": "<p>Try with <code>function.uncurry has_mul.mul</code>: does it work?</p>",
        "id": 289520284,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657746059
    },
    {
        "content": "<p>Combining it with the <em>exact</em> tactic, yes, it works! Thanks :-)</p>",
        "id": 289520587,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657746202
    },
    {
        "content": "<p>Oh, sorry, I was in term mode (<code>exact</code> is not needed there)</p>",
        "id": 289520648,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657746230
    },
    {
        "content": "<p>Then I did this and it closed the second goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span>\n <span class=\"n\">exact</span> <span class=\"n\">has_one.one</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 289521109,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657746458
    },
    {
        "content": "<p>Anyway, I'm done for the day. Hope we can resume our discussion tomorrow! Also with <span class=\"user-mention\" data-user-id=\"513671\">@Ángel González Prieto</span></p>",
        "id": 289521330,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657746562
    },
    {
        "content": "<p>Hi Florent! I've been talking to Filippo. Do you want to connect in 3 minutes to talk about this stuff? I think Filippo has to work on a different project now, but we can discuss these things.</p>",
        "id": 289596670,
        "sender_full_name": "Ángel González Prieto",
        "timestamp": 1657807709
    },
    {
        "content": "<p>Yes, perfect! I will send you the Zoom address as a private message.</p>",
        "id": 289596836,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657807795
    },
    {
        "content": "<p>Cool!!! I'm ready now</p>",
        "id": 289597248,
        "sender_full_name": "Ángel González Prieto",
        "timestamp": 1657808018
    },
    {
        "content": "<p>Me too! I sent you the address as a PM.</p>",
        "id": 289597512,
        "sender_full_name": "Flo (Florent Schaffhauser)",
        "timestamp": 1657808120
    },
    {
        "content": "<p>Hi Filippo! We're having a situation with the git branch. I can access it and your code, but for some reason, the kernel is not able to finish the computation and the computation doesn't finish. I think you had a similar problem yesterday. Do you know what is going on?</p>",
        "id": 289605699,
        "sender_full_name": "Ángel González Prieto",
        "timestamp": 1657811748
    },
    {
        "content": "<p>Hi guys! I think I managed to prove that a topological space is a H-space. I posted the proof at git. Not a very important advance, but I think I'm getting clearer ideas now!</p>",
        "id": 289680031,
        "sender_full_name": "Ángel González Prieto",
        "timestamp": 1657851947
    },
    {
        "content": "<p>I hope you proved that a top group is a H-space....doing it for every topologicl space seems too much, no? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 289680097,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657851994
    },
    {
        "content": "<p>Thank you, at any rate, I will have a look and we can discuss this the next time!</p>",
        "id": 289680111,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657852026
    },
    {
        "content": "<p>Oh! Sure! Top. groups, obviously!</p>",
        "id": 289743672,
        "sender_full_name": "Ángel González Prieto",
        "timestamp": 1657899459
    }
]