[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458142\">@Daniel Hast</span> <span class=\"user-mention\" data-user-id=\"513555\">@Jackie Lang</span> it would be interesting to do some quadratic field stuff. Here are some thoughts!</p>",
        "id": 289234641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657565881
    },
    {
        "content": "<p>I think that a bad idea would be making an explicit model of quadratic fields, e.g. you could imagine a function which eats a squarefree integer d and spits out an explicit quadratic field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mi>d</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{d})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1822em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">d</span></span></span><span style=\"top:-2.8922em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1078em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and then one can go on and prove theorems about that quadratic field. The problem with this is that then when people come along with their own quadratic fields constructed in different ways, they will be <em>isomorphic</em> to the concrete definition but not <em>equal</em> to it, so one would be constantly porting definitions and theorems along isomorphisms.</p>",
        "id": 289234928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657566009
    },
    {
        "content": "<p>So perhaps one way to start would be a predicate on number fields (i.e. a function which eats a number field and outputs a true-false statement, saying \"I have degree 2 over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>\".</p>",
        "id": 289235071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657566069
    },
    {
        "content": "<p>That should be easy to do. And now one can start asking questions about this field. For example one could try and prove that there exists a unique squarefree integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> such that the quadratic field is isomorphic to the splitting field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">x^2-d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>.</p>",
        "id": 289235188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657566123
    },
    {
        "content": "<p>Once one has this, one can then prove the standard facts about what the integers of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mi>d</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{d})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1822em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">d</span></span></span><span style=\"top:-2.8922em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1078em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> are.</p>",
        "id": 289235331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657566191
    },
    {
        "content": "<p>Let me knock something up.</p>",
        "id": 289235373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657566207
    },
    {
        "content": "<p>I could live stream somewhere</p>",
        "id": 289235423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657566232
    },
    {
        "content": "<p>That sounds good; I don't know how to follow your livestream</p>",
        "id": 289235547,
        "sender_full_name": "Jackie Lang",
        "timestamp": 1657566278
    },
    {
        "content": "<p>I'll send you a Zoom link</p>",
        "id": 289235590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657566297
    },
    {
        "content": "<p>This <a href=\"https://imperial-ac-uk.zoom.us/j/98307531484?pwd=ejQ3Z2lyaUJlYmRaS01TVlFIRGxtUT09\">https://imperial-ac-uk.zoom.us/j/98307531484?pwd=ejQ3Z2lyaUJlYmRaS01TVlFIRGxtUT09</a> should work</p>",
        "id": 289235663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657566328
    },
    {
        "content": "<p>I am a little busy today and tomorrow, but then I will be happy to join this project</p>",
        "id": 289237654,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657567263
    },
    {
        "content": "<p>This project seems interesting to me. I'm still learning a lot of the basics of Lean, but I'll try to contribute to this.</p>",
        "id": 289239478,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657568090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458142\">@Daniel Hast</span> : how is it going?</p>",
        "id": 289243210,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657569951
    },
    {
        "content": "<p>Still brushing up on the basic syntax and familiarizing myself with some of the relevant library functions.</p>",
        "id": 289244090,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657570397
    },
    {
        "content": "<p>Sounds good! Do not hesitate if you have questions, I am outside the lecture room.</p>",
        "id": 289244152,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1657570433
    },
    {
        "content": "<p>I'm also happy to help out with some quadratic field stuff</p>",
        "id": 289290812,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657613184
    },
    {
        "content": "<p>A key lemma that I can't find in mathlib is the following: Given a number field K, the rank of the ring of integers of K (as a <strong>Z</strong>-module) is equal to the dimension of K (as a <strong>Q</strong>-vector space). Anyone know if this has been implemented anywhere, either in mathlib or otherwise?</p>",
        "id": 289345015,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657641016
    },
    {
        "content": "<p>I'm not sure. <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> and <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> know that part of the library best.</p>",
        "id": 289345946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1657641337
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rational.20basis.20of.20a.20number.20field\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rational.20basis.20of.20a.20number.20field</a></p>",
        "id": 289346113,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657641412
    },
    {
        "content": "<p>To show the algebraic integers span the number field over Q, it would be convenient to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/scale_roots\">docs#scale_roots</a>. (Linear independence was already done.)</p>",
        "id": 289347044,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657641724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"458142\">Daniel Hast</span> <a href=\"#narrow/stream/330515-LftCM22/topic/quadratic.20fields/near/289345015\">said</a>:</p>\n<blockquote>\n<p>A key lemma that I can't find in mathlib is the following: Given a number field K, the rank of the ring of integers of K (as a <strong>Z</strong>-module) is equal to the dimension of K (as a <strong>Q</strong>-vector space). Anyone know if this has been implemented anywhere, either in mathlib or otherwise?</p>\n</blockquote>\n<p>I don't think we have this in general (or at least I don't know where it is in mathlib) but the link above is a good place to start</p>",
        "id": 289347870,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657642095
    },
    {
        "content": "<p>This is not in mathlib I think</p>",
        "id": 289348044,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657642185
    },
    {
        "content": "<p>I am on mobile now, but I am afraid this requires some work</p>",
        "id": 289348184,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657642234
    },
    {
        "content": "<p>For cyclotomic fields I essentially avoided speaking of integral basis</p>",
        "id": 289348345,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657642310
    },
    {
        "content": "<p>But we were able to compute the discriminant and the ring of integers</p>",
        "id": 289348447,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657642335
    },
    {
        "content": "<p>We also know the dimension of the power basis for the ring of integers, so we should almost have it in the cyclotomic case</p>",
        "id": 289348544,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657642383
    },
    {
        "content": "<p>Note that all the traces/norms one has to consider are relative to the fields extension , even if we apply them to integral elements</p>",
        "id": 289348717,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657642443
    },
    {
        "content": "<p>That <code>linear_independent.of_fraction_ring</code> lemma at that link does look useful here; is it also not in mathlib yet? Anyway, I wonder if it would make sense to implement more of the general theory of rings of integers like this before doing the specifics of quadratic rings of integers.</p>",
        "id": 289348745,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657642457
    },
    {
        "content": "<p>Yes, for cyclotomic fields we have it since we have the ring of integers, using <a href=\"https://github.com/leanprover-community/mathlib/pull/14981\">#14981</a></p>",
        "id": 289348803,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657642481
    },
    {
        "content": "<p>But in general there is no integral power basis</p>",
        "id": 289348822,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657642492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458142\">@Daniel Hast</span> which lemma are you talking t? If it is in mathlib you can write <a href=\"https://leanprover-community.github.io/mathlib_docs/find/name\">docs#name</a> and it will create an hyperlink to the lemma</p>",
        "id": 289349879,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657642948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I meant the lemma at <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rational.20basis.20of.20a.20number.20field/near/271819591\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rational.20basis.20of.20a.20number.20field/near/271819591</a> that Junyan linked above. But I searched for that lemma name in mathlib and didn't find anything, so I'm guessing it hasn't made it into mathlib yet.</p>",
        "id": 289350198,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657643091
    },
    {
        "content": "<p>Ah, I see. If I remember correctly I merged it at some point so it should be there</p>",
        "id": 289350219,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643100
    },
    {
        "content": "<p>Do you know what name it has now?</p>",
        "id": 289350407,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657643165
    },
    {
        "content": "<p>I don't find it, strange</p>",
        "id": 289350511,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643220
    },
    {
        "content": "<p>Give me 5 minutes</p>",
        "id": 289350528,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643225
    },
    {
        "content": "<p>The PR is <a href=\"https://github.com/leanprover-community/mathlib/pull/13041\">#13041</a></p>",
        "id": 289350731,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643300
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 289350749,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643309
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_independent.localization\">docs#linear_independent.localization</a></p>",
        "id": 289351018,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643436
    },
    {
        "content": "<p>And friends below it</p>",
        "id": 289351075,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657643465
    },
    {
        "content": "<p>its <code>linear_independent.iff_fraction_ring</code></p>",
        "id": 289351138,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657643498
    },
    {
        "content": "<p>oh beat me to it!</p>",
        "id": 289351150,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657643508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458142\">@Daniel Hast</span> are you working on quadratic/number fields?</p>",
        "id": 289470232,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657723689
    },
    {
        "content": "<p>Yes, I'm working on proving some lemmas for rings of integers of number fields. Currently I'm working on a proof that the rank of the ring of integers is equal to the dimension of the number field over <strong>Q</strong>.</p>",
        "id": 289470758,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657723919
    },
    {
        "content": "<p>awesome! If you have any questions or want to post any code here for feedback then don't hesitate to do so.</p>",
        "id": 289472348,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1657724596
    },
    {
        "content": "<p>That is nice! What is your strategy?</p>",
        "id": 289474884,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657725629
    },
    {
        "content": "<p>First I'm writing up the proof that some nonzero multiple of an algebraic element is integral. Then I'm going to pretty much follow the standard proof where you show the ring of integers both contains and is contained in modules of the appropriate rank. Might need to prove some lemmas about the trace pairing along the way but I don't know of a simpler approach.</p>",
        "id": 289476022,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657726100
    },
    {
        "content": "<p>I might not have time to do all this, though; I'm leaving for PCMI in a few days and will be pretty busy with that for a few weeks.</p>",
        "id": 289476121,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657726155
    },
    {
        "content": "<p>Already the first result is interesting</p>",
        "id": 289479381,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657727417
    },
    {
        "content": "<p>It allows to define <em>the</em> discriminant of a number field</p>",
        "id": 289479438,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657727437
    },
    {
        "content": "<p>As a well defined integer</p>",
        "id": 289479466,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657727448
    },
    {
        "content": "<p>(and a well defined ideal in the relative case)</p>",
        "id": 289479546,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657727480
    },
    {
        "content": "<p>I'm sure I've done lots of inefficient or clunky things here, but I did complete the proof that an algebraic element has a nonzero multiple that's integral:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">algebraic_has_integral_multiple</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_algebraic</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">is_integral</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">is_algebraic_iff</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">C</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">f.leading_coeff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">apply</span> <span class=\"n\">polynomial.coeff_ne_zero_of_eq_degree</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">polynomial.degree_eq_iff_nat_degree_eq</span> <span class=\"n\">hf.left</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">x_zero</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">polynomial.X</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">x_zero</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"n\">use</span> <span class=\"n\">polynomial.integral_normalization</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">polynomial.monic_integral_normalization</span> <span class=\"n\">hf.left</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">nontriviality</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">is_fraction_ring.to_map_eq_zero_iff.mp</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_eq_zero.mp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">eq_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_scalar_tower.algebra_map_apply</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">polynomial.integral_normalization_eval₂_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">hf.right</span> <span class=\"n\">inj</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 289505916,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657739109
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">polynomial.monic_integral_normalization</span> <span class=\"n\">hf.left</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>could be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">polynomial.monic_integral_normalization</span> <span class=\"n\">hf.left</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n</code></pre></div>\n<p>: basically <code>refine \\&lt;_, _\\&gt;</code> is the same as <code>split</code> but you can sometimes save a line with this trick.</p>",
        "id": 289512113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657742224
    },
    {
        "content": "<p>...and now I just found that this is basically already exists in mathlib at <code>ring_theory.dedekind_domain.integral_closure.exists_integral_multiples</code>. The statements aren't identical but the slight extra generality in the version I wrote isn't actually relevant to the application to rings of integers. Oh well!</p>",
        "id": 289512206,
        "sender_full_name": "Daniel Hast",
        "timestamp": 1657742262
    },
    {
        "content": "<p>That's super nice! It is actually not enough to define the discriminant, but we are not far.</p>",
        "id": 289512682,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657742441
    },
    {
        "content": "<p>My idea is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.discr_eq_discr_of_to_matrix_coeff_is_integral\">docs#algebra.discr_eq_discr_of_to_matrix_coeff_is_integral</a></p>",
        "id": 289512768,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657742476
    },
    {
        "content": "<p>And in any case it is better to be as general as possible :D</p>",
        "id": 289513166,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657742650
    },
    {
        "content": "<p>I am thinking about the freeness of <code>𝓞 K</code>. We know that torsion free implies free for PID, so this is probably the fastest way to get there.</p>",
        "id": 289514604,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657743388
    },
    {
        "content": "<p>And once we now that <code>𝓞 K</code> is free it should be easy to prove that it has the right rank.</p>",
        "id": 289514643,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657743408
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.free_of_finite_type_torsion_free'\">docs#module.free_of_finite_type_torsion_free'</a></p>",
        "id": 289514692,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657743433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"458142\">Daniel Hast</span> <a href=\"#narrow/stream/330515-LftCM22/topic/quadratic.20fields/near/289512206\">said</a>:</p>\n<blockquote>\n<p>...and now I just found that this is basically already exists in mathlib at <code>ring_theory.dedekind_domain.integral_closure.exists_integral_multiples</code>. The statements aren't identical but the slight extra generality in the version I wrote isn't actually relevant to the application to rings of integers. Oh well!</p>\n</blockquote>\n<p>It's good practice! Your code looked very nice to me. The library is huge and it's hard to get on top of everything that is there quickly. This comes from experience. Thanks a lot for your efforts on this -- it's about time we got number fields into a solid state.</p>",
        "id": 289514958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1657743558
    },
    {
        "content": "<p>Do we know that <code>𝓞 K</code> is finite as <code>ℤ</code>-module?</p>",
        "id": 289516041,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657744128
    },
    {
        "content": "<p>Hmm, I am afraid we don't</p>",
        "id": 289516421,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657744316
    },
    {
        "content": "<p>OK, we probably need to follow the classical proof, but all the ingredients are there. Take <code>x</code> such that <code>K = ℚ(x)</code>, with <code>x</code> an algebraic integer. We know that <code>ℤ[x]</code> is finite, and to prove that <code>𝓞 K</code> is finite we can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.discr_mul_is_integral_mem_adjoin\">docs#algebra.discr_mul_is_integral_mem_adjoin</a></p>",
        "id": 289517987,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657745053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458142\">@Daniel Hast</span> if you want a precise goal that I am pretty sure it is not in mathlib, we need a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/power_basis\">docs#power_basis</a>  <code>B</code> of <code>K</code> such that <code>B.gen</code> is integral. We surely have a way to produce a power basis of <code>K</code> (over <code>ℚ</code>), and the rest shouldn't be too difficult.</p>",
        "id": 289518486,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657745260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"458142\">Daniel Hast</span> <a href=\"#narrow/stream/330515-LftCM22/topic/quadratic.20fields/near/289505916\">said</a>:</p>\n<blockquote>\n<p>... I did complete the proof that an algebraic element has a nonzero multiple that's integral:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_fraction_ring</span> <span class=\"n\">A</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">algebraic_has_integral_multiple</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">K</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_algebraic</span> <span class=\"n\">K</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">is_integral</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I am able to prove a possibly overly general version of the result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">eq_smul_is_integral_of_is_localization</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_localization</span> <span class=\"n\">M</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">B</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">is_integral</span> <span class=\"n\">A</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">is_unit</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>I think it's strictly more general, because if <code>B</code> is a field then we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.is_algebraic_iff_is_integral\">docs#algebra.is_algebraic_iff_is_integral</a>. The full proof is at <a href=\"https://gist.github.com/alreadydone/ab2de3d78ca1288ff96456d4c799b6ee\">this gist</a> and uses two lemmas, and one of them I believe is of some general interest:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">eq_map_of_frange_subset_srange</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">p.frange</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"n\">f.srange</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q.map</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"n\">q.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">p.nat_degree</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p.monic</span> <span class=\"bp\">→</span> <span class=\"n\">q.monic</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Its proof would be much easier if <code>f</code> is injective because <code>f.srange</code> would then be isomorphic to A and we can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.map\">docs#polynomial.map</a>. I might PR them some time but feel free to PR them for me if you need the result soon.</p>",
        "id": 289810340,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1657949961
    },
    {
        "content": "<p>Since this is strictly more general than a lemma already in the library I suggest to PR it as soon as possible. Short PRs are very welcome, and generalization is usually uncontroversial, so it can be merged quickly and then it won't be your problem to maintain the proof. (Mathlib changes very quickly, so a proof working today can be broken tomorrow.)</p>",
        "id": 289825974,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1657974689
    }
]