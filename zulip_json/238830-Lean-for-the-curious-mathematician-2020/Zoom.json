[
    {
        "content": "<p>Hello everyone!</p>\n<p>The Zoom meeting has not started yet for the install session. It will open around 9:00 AM CEST. You can join it with the link/ID and password below. This information will be posted on the website shortly.</p>\n<p>Topic: Lean for the Curious Mathematician<br>\nTime: Jul 13, 2020 07:00 AM Amsterdam, Berlin, Rome, Stockholm, Vienna<br>\nEvery day, 5 occurrence(s)<br>\nJul 13, 2020 07:00 AM<br>\nJul 14, 2020 07:00 AM<br>\nJul 15, 2020 07:00 AM<br>\nJul 16, 2020 07:00 AM<br>\nJul 17, 2020 07:00 AM<br>\nPlease download and import the following iCalendar (.ics) files to your calendar system.<br>\nDaily: <a href=\"https://vu-live.zoom.us/meeting/tJEpd-uopj4jGtRLTcJg_Y9FR5KHpW94me9h/ics?icsToken=98tyKuCtqjsoGtyQuRmHRowMBoiga_TxiCVEjbdvsCvmKSdsW1rQBLdpGqJISYzd\">https://vu-live.zoom.us/meeting/tJEpd-uopj4jGtRLTcJg_Y9FR5KHpW94me9h/ics?icsToken=98tyKuCtqjsoGtyQuRmHRowMBoiga_TxiCVEjbdvsCvmKSdsW1rQBLdpGqJISYzd</a></p>\n<p>Join Zoom Meeting<br>\n<a href=\"https://vu-live.zoom.us/j/95402085900\">https://vu-live.zoom.us/j/95402085900</a></p>\n<p>Meeting ID: 954 0208 5900<br>\nPassword: 333537</p>",
        "id": 203678811,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1594617375
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3174\">@LFTCM</span>  Hey everyone! Zoom is now open.</p>",
        "id": 203681425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594621193
    },
    {
        "content": "<p>Public Service Announcement: if you don't have Zoom installed, please install it. We'll start with the first talk in about 90 minutes.</p>",
        "id": 203694195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594632586
    },
    {
        "content": "<p>Hello everyone! The details for the Zoom meeting are posted in the thread. (Just scroll up a bit.)</p>",
        "id": 203699951,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594637028
    },
    {
        "content": "<p>(Or, in Zulip, you can always click on just the title of the thread, e.g. \"Zoom\" here, to read only that thread.)</p>",
        "id": 203700220,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594637179
    },
    {
        "content": "<p>We are starting in a couple of minutes. Please login on Zoom, if you haven't done so already.</p>",
        "id": 203700854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594637722
    },
    {
        "content": "<p>We are starting!</p>",
        "id": 203701201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594637997
    },
    {
        "content": "<p>For anyone who wants to inspect the proof I just wrote:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">infinitude_of_primes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">fact</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">min_fac_prime</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">fact_pos</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n\n  <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">fact</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac_dvd</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">fact</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">dvd_fact</span> <span class=\"n\">pp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_ge</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">dvd_add_right</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">not_dvd_one</span> <span class=\"n\">pp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203703811,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594639971
    },
    {
        "content": "<p>The Zoom link for the Monday afternoon metaprogramming session is:<br>\n<a href=\"https://vu-live.zoom.us/j/99368691219\">https://vu-live.zoom.us/j/99368691219</a> (Password: 654479)</p>\n<p>But I suggest watching (some of) the YouTube videos first!</p>",
        "id": 203704005,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594640158
    },
    {
        "content": "<p>(<a href=\"#narrow/stream/238830-Lean-for.20the.20curious.20mathematician.202020/topic/Monday.20afternoon.3A.20metaprogramming.20session\">https://leanprover.zulipchat.com/#narrow/stream/238830-Lean-for.20the.20curious.20mathematician.202020/topic/Monday.20afternoon.3A.20metaprogramming.20session</a>)</p>",
        "id": 203704061,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594640168
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/238830-Lean-for.20the.20curious.20mathematician.202020/topic/Zoom/near/203678811\">said</a>:</p>\n<blockquote>\n<p>Hello everyone!</p>\n<p>The Zoom meeting has not started yet for the install session. It will open around 9:00 AM CEST. You can join it with the link/ID and password below. This information will be posted on the website shortly.</p>\n<p>Topic: Lean for the Curious Mathematician<br>\nTime: Jul 13, 2020 07:00 AM Amsterdam, Berlin, Rome, Stockholm, Vienna<br>\nEvery day, 5 occurrence(s)<br>\nJul 13, 2020 07:00 AM<br>\nJul 14, 2020 07:00 AM<br>\nJul 15, 2020 07:00 AM<br>\nJul 16, 2020 07:00 AM<br>\nJul 17, 2020 07:00 AM<br>\nPlease download and import the following iCalendar (.ics) files to your calendar system.<br>\nDaily: <a href=\"https://vu-live.zoom.us/meeting/tJEpd-uopj4jGtRLTcJg_Y9FR5KHpW94me9h/ics?icsToken=98tyKuCtqjsoGtyQuRmHRowMBoiga_TxiCVEjbdvsCvmKSdsW1rQBLdpGqJISYzd\">https://vu-live.zoom.us/meeting/tJEpd-uopj4jGtRLTcJg_Y9FR5KHpW94me9h/ics?icsToken=98tyKuCtqjsoGtyQuRmHRowMBoiga_TxiCVEjbdvsCvmKSdsW1rQBLdpGqJISYzd</a></p>\n<p>Join Zoom Meeting<br>\n<a href=\"https://vu-live.zoom.us/j/95402085900\">https://vu-live.zoom.us/j/95402085900</a></p>\n<p>Meeting ID: 954 0208 5900<br>\nPassword: 333537</p>\n</blockquote>\n<p>Zoom is now open again. If you need help with some final things (e.g. involving installation) please head over there so that we can take a look (via screen sharing, for example).</p>",
        "id": 203804213,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594710283
    },
    {
        "content": "<p>Zoom is open again, but see the message at <a href=\"#narrow/stream/238830-Lean-for.20the.20curious.20mathematician.202020/topic/Wednesday.20morning/near/203924848\">https://leanprover.zulipchat.com/#narrow/stream/238830-Lean-for.20the.20curious.20mathematician.202020/topic/Wednesday.20morning/near/203924848</a></p>\n<p>Join Zoom Meeting<br>\n<a href=\"https://vu-live.zoom.us/j/95402085900\">https://vu-live.zoom.us/j/95402085900</a></p>\n<p>Meeting ID: 954 0208 5900<br>\nPassword: 333537</p>",
        "id": 203924877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594799101
    },
    {
        "content": "<p>git checkout -- , followed by git pull, still complains of changes to leanpkg.toml, which are not any changes I intended to make and don't mind losing.</p>",
        "id": 203926884,
        "sender_full_name": "Philip Vetter",
        "timestamp": 1594800715
    },
    {
        "content": "<p><code>git checkout -- leanpkg.toml</code> should hopefully fix that</p>",
        "id": 203926955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594800754
    },
    {
        "content": "<p>thanks. git stash worked, (but not really what I wanted to do)</p>",
        "id": 203926981,
        "sender_full_name": "Philip Vetter",
        "timestamp": 1594800793
    },
    {
        "content": "<p>What should we do with our local exercises? I have created a folder copied from <code>/src</code> in <code>lftcm2020</code> but may be we don't want that all participants upload them. Should I commit and <code>pull</code> but never <code>push</code>?</p>",
        "id": 203927242,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1594801001
    },
    {
        "content": "<p>Yes that sounds best (probably push would reject you anyway)</p>",
        "id": 203927291,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594801041
    },
    {
        "content": "<p>@Filippo, I would suggest never adding your local copies to <code>git</code>.</p>",
        "id": 203927294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594801045
    },
    {
        "content": "<p>If you don't add them, git will ignore them</p>",
        "id": 203927307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594801056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316505\">@Dima Pasechnik</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 203928237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594801706
    },
    {
        "content": "<p>Hi</p>",
        "id": 290604374,
        "sender_full_name": "Chandan Sah",
        "timestamp": 1658568901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/238830-Lean-for-the-curious-mathematician-2020/topic/Zoom/near/203703811\">said</a>:</p>\n<blockquote>\n<p>For anyone who wants to inspect the proof I just wrote:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">infinitude_of_primes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">fact</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">min_fac_prime</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">fact_pos</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">fact</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac_dvd</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">fact</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">prime.dvd_fact</span> <span class=\"n\">pp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_ge</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.dvd_add_right</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prime.not_dvd_one</span> <span class=\"n\">pp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>   When I type the 3rd line out it shoes the following error message</p>",
        "id": 290604442,
        "sender_full_name": "Chandan Sah",
        "timestamp": 1658568973
    },
    {
        "content": "<p>Error updating: Error fetching goals: {\"stack\":\"Error: Incorrect position 'file:///c%3A/Users/Aadarsh%20Sah/Documents/Codes_VS/lean4-samples/HelloWorld/Main.lean:3:0' in RPC call\\n\\tat c:\\\\Users\\\\Aadarsh Sah\\\\.vscode\\\\extensions\\\\leanprover.lean4-0.0.85\\\\dist\\\\extension.js:2:550160\\n\\tat c:\\\\Users\\\\Aadarsh Sah\\\\.vscode\\\\extensions\\\\leanprover.lean4-0.0.85\\\\dist\\\\extension.js:2:550454\\n\\tat Immediate.&lt;anonymous&gt; (c:\\\\Users\\\\Aadarsh Sah\\\\.vscode\\\\extensions\\\\leanprover.lean4-0.0.85\\\\dist\\\\extension.js:2:550816)\\n\\tat processImmediate (node:internal/timers:464:21)\",\"message\":\"Incorrect position 'file:///c%3A/Users/Aadarsh%20Sah/Documents/Codes_VS/lean4-samples/HelloWorld/Main.lean:3:0' in RPC call\",\"code\":-32602}</p>",
        "id": 290604454,
        "sender_full_name": "Chandan Sah",
        "timestamp": 1658568995
    },
    {
        "content": "<p><strong>It also gives output message saying \"unknown package 'data'\"</strong><br>\nHow to add this \"data\" package then? <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span></p>",
        "id": 290604464,
        "sender_full_name": "Chandan Sah",
        "timestamp": 1658569027
    },
    {
        "content": "<p>N needs a type (natural number)<br>\n<a href=\"/user_uploads/3121/6V8cn31MK9lq9KRhlKCaql9g/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/6V8cn31MK9lq9KRhlKCaql9g/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/6V8cn31MK9lq9KRhlKCaql9g/image.png\"></a></div>",
        "id": 290604800,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658569510
    },
    {
        "content": "<p>I didnt understand what you suggest me to do <span class=\"user-mention\" data-user-id=\"385848\">@Mark Gerads</span></p>",
        "id": 290605267,
        "sender_full_name": "Chandan Sah",
        "timestamp": 1658570254
    },
    {
        "content": "<p>My question is \"how to download the data package?\"</p>",
        "id": 290605329,
        "sender_full_name": "Chandan Sah",
        "timestamp": 1658570359
    },
    {
        "content": "<p>Well, You have an error with Lean4, so maybe that is why it did not work for me. I am using Lean3. I was showing you a screenshot of my error.</p>",
        "id": 290605330,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658570361
    },
    {
        "content": "<p>I was under the impression that Lean3 was easier to set up than Lean4. Is there a reason to not use Lean3?</p>",
        "id": 290605379,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658570418
    },
    {
        "content": "<p>I installed lean4 just because it is the newer version but now c0me to realize that it has got  errors</p>",
        "id": 290605412,
        "sender_full_name": "Chandan Sah",
        "timestamp": 1658570493
    },
    {
        "content": "<p>Okay. Lean4 is still considered experimental, Lean3 is the stable release. I suggest trying Lean3 <a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a></p>",
        "id": 290605488,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1658570599
    },
    {
        "content": "<p>Chandan, as you are finding out, Lean3 and Lean4 are incompatible.  Moreover, old versions of mathlib are usually also incompatible with newer versions!  This is an adaptation (still in Lean 3, but with the current mathlib) of Scott's code above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">infinitude_of_primes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">p.prime</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">N</span><span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">M.min_fac</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">nat.min_fac_prime</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"bp\">!</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">N.factorial_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span><span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">M.min_fac_dvd</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"n\">nat.dvd_factorial</span> <span class=\"n\">pp.pos</span> <span class=\"o\">(</span><span class=\"n\">not_le.mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.dvd_add_right</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">pp.not_dvd_one</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I used dot-notation more extensively, which is maybe not ideal pedagogically, but since now there are <code>prime</code> and <code>nat.prime</code>, simply writing <code>prime</code> is more ambiguous.</p>",
        "id": 290606697,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658572329
    },
    {
        "content": "<p>Note also the notation <code>N!</code> that likely did not exist when Scott wrote this demo and that is available if you use <code>open_locale nat</code> before you want to use it.</p>",
        "id": 290606729,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1658572414
    }
]