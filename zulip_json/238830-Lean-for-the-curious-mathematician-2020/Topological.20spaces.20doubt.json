[
    {
        "content": "<p>I'm curious about the dots in this function, what are they for?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">of_basic</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">metric_space_basic</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">compatible</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> this should when the above parts are complete -/</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"bp\">..@</span><span class=\"n\">metric_space_basic</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span> <span class=\"n\">m</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>(The file is lftcm2020/src/exercises_sources/wednesday/afternoon/topological_spaces.lean)</p>",
        "id": 204017848,
        "sender_full_name": "Eloi",
        "timestamp": 1594850083
    },
    {
        "content": "<p>For structure/record construction notation, <code>..m</code> means to include all of <code>m</code>'s fields.</p>",
        "id": 204018617,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594850589
    },
    {
        "content": "<p>Thanks, why commenting them does not give a type error?</p>",
        "id": 204018857,
        "sender_full_name": "Eloi",
        "timestamp": 1594850730
    },
    {
        "content": "<p>This is where the documentation for that notation should be, but it seems to be absent: <a href=\"https://leanprover.github.io/reference/declarations.html#id10\">https://leanprover.github.io/reference/declarations.html#id10</a> (I haven't been able to find where it's described...)</p>\n<p>I'll check what you're saying about commenting it out.</p>",
        "id": 204019167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594850920
    },
    {
        "content": "<p>Ah, in this case those are redundant because <code>metric_space</code> is defined to be a <code>class</code> (which is a <code>structure</code> with the <code>[class]</code> attribute and some special support for doing class things), so Lean is inferring the rest of the fields because  <code>metric_space</code> extends <code>topological_space</code> and <code>metric_space_basic</code>, and these are already implemented by <code>metric_space_basic</code> through instances defined previously.  Someone more knowledgeable than me would have a more informative answer -- I don't really know how this works expect through practice.</p>",
        "id": 204019935,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594851482
    },
    {
        "content": "<p>Try commenting out the <code>compatible</code> line to see the error you would normally get due to missing fields.</p>",
        "id": 204019992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594851515
    },
    {
        "content": "<p>Nice catch, it looks like lean is smarter than I gave it credit for?!. Like Kyle says it knows how to fill these fields automatically given the available info. If you put <code>#print of_basic</code> after and compare the results of deleting and undeleting the lines you can see that although it changes the definition visually, what lean puts is equivalent but a more compact way of writing what my definition gave.</p>",
        "id": 204020734,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594852012
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 204046822,
        "sender_full_name": "Eloi",
        "timestamp": 1594877508
    }
]