[
    {
        "content": "<p>Links:<br>\n1) pdf slides: <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/monday_NNG.pdf\">https://wwwf.imperial.ac.uk/~buzzard/xena/monday_NNG.pdf</a><br>\n2) Natural number game: <a href=\"https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/\">https://wwwf.imperial.ac.uk/~buzzard/xena/natural_number_game/</a><br>\n3) A tactic cheat sheet: <a href=\"https://github.com/kbuzzard/xena/blob/master/tactics.md\">https://github.com/kbuzzard/xena/blob/master/tactics.md</a></p>\n<p>Installing the natural number game on your own computer: <code>leanproject get ImperialCollegeLondon/natural_number_game</code> should work, and if it doesn't then <em>ask</em>. If it does work, then open the <em>project</em> (e.g. with <code>code .</code> in the <code>natural_number_game</code> directory, or with \"Open Folder\" in VS Code and opening the <code>natural_number_game</code> directory). Then open the file <code>src/game/world10/level18q.lean</code>and fill in the <code>sorry</code>s!</p>",
        "id": 203703423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594639643
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"3174\">@LFTCM</span> If you have any questions about NNG, please ask here.</p>",
        "id": 203705847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594641705
    },
    {
        "content": "<p>is it normal that clicking on <code>import data.real.basic</code> just says <code>Loading...</code> on the RHS, and nothing more?</p>",
        "id": 203706665,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1594642277
    },
    {
        "content": "<p>in vscode, thatis</p>",
        "id": 203706696,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1594642298
    },
    {
        "content": "<p>you have a not compiled mathlib</p>",
        "id": 203706703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594642299
    },
    {
        "content": "<p>Yes... I think it is. If you don't have anything else in the file.</p>",
        "id": 203706709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594642300
    },
    {
        "content": "<p>Ha John Cremona just ran into the </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Errno</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span><span class=\"o\">:</span> <span class=\"err\">&#39;</span><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">john</span><span class=\"bp\">/.</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"mi\">886</span><span class=\"n\">b15b5ea473ae51ed90de31b05f23de00be10d</span><span class=\"bp\">.</span><span class=\"n\">tar</span><span class=\"bp\">.</span><span class=\"n\">bz2&#39;</span>\n</code></pre></div>\n\n\n<p>problem with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">leanproject</span> <span class=\"n\">get</span> <span class=\"n\">ImperialCollegeLondon</span><span class=\"bp\">/</span><span class=\"n\">natural_number_game</span>\n</code></pre></div>\n\n\n<p>The easiest fix: delete the <code>natural_number_game</code> directory and type</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">leanproject</span> <span class=\"n\">get</span> <span class=\"n\">ImperialCollegeLondon</span><span class=\"bp\">/</span><span class=\"n\">natural_number_game</span>\n</code></pre></div>\n\n\n<p>again!</p>",
        "id": 203706738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594642317
    },
    {
        "content": "<p>not compiled mathlib? hmm...</p>",
        "id": 203706824,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1594642363
    },
    {
        "content": "<p>well, if it takes more than a few seconds to stop loading, that is</p>",
        "id": 203706855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594642380
    },
    {
        "content": "<p>try <code>leanproject up</code></p>",
        "id": 203706874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594642393
    },
    {
        "content": "<p>That's what I see</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n<span class=\"n\">excessive</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"err\">&#39;</span><span class=\"n\">expression</span> <span class=\"n\">traversal&#39;</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">threshold</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 203706947,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1594642442
    },
    {
        "content": "<p>Lean ran out of memory. Use Ctrl-Shift-P &gt; \"Lean: Restart\"</p>",
        "id": 203707003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594642474
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">$</span> <span class=\"n\">leanproject</span> <span class=\"n\">up</span>\n<span class=\"n\">configuring</span> <span class=\"bp\">_</span><span class=\"n\">user_local_packages</span> <span class=\"mi\">1</span>\n<span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">leanpkg</span> <span class=\"n\">configurations</span> <span class=\"n\">not</span> <span class=\"n\">specifying</span> <span class=\"bp\">`</span><span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;src&quot;</span><span class=\"bp\">`</span> <span class=\"n\">are</span> <span class=\"n\">deprecated</span><span class=\"bp\">.</span>\n<span class=\"n\">configuring</span> <span class=\"bp\">_</span><span class=\"n\">user_local_packages</span> <span class=\"mi\">1</span>\n<span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">leanpkg</span> <span class=\"n\">configurations</span> <span class=\"n\">not</span> <span class=\"n\">specifying</span> <span class=\"bp\">`</span><span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;src&quot;</span><span class=\"bp\">`</span> <span class=\"n\">are</span> <span class=\"n\">deprecated</span><span class=\"bp\">.</span>\n<span class=\"n\">This</span> <span class=\"n\">project</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"n\">mathlib</span>\n</code></pre></div>",
        "id": 203707120,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1594642550
    },
    {
        "content": "<p>here's a question: I'm trying the \"lost level\". At one point I have an hypothesis of the form h1: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a \\leq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>",
        "id": 203707133,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594642553
    },
    {
        "content": "<p>and I want to apply the lemma already proven that says le_zero (i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mn>0</mn><mo>⇒</mo><mi>a</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\"> a \\leq 0 \\Rightarrow a = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>)</p>",
        "id": 203707234,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594642589
    },
    {
        "content": "<p>but rw le_zero at h1 does not work</p>",
        "id": 203707254,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594642605
    },
    {
        "content": "<p><code>le_zero h1</code> is a term of type <code>a=0</code></p>",
        "id": 203707277,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594642617
    },
    {
        "content": "<p><code>have h2 : a = 0 := le_zero h1</code></p>",
        "id": 203707280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594642620
    },
    {
        "content": "<p>yeah I got around the issue but I was wonderin \"why it does not work\"</p>",
        "id": 203707303,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594642635
    },
    {
        "content": "<p>I'm going to move Dima's posts to the \"install session\" thread.</p>",
        "id": 203707312,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594642641
    },
    {
        "content": "<p>does rw only apply to equalities and iff's?</p>",
        "id": 203707324,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594642649
    },
    {
        "content": "<p>yes</p>",
        "id": 203707327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594642653
    },
    {
        "content": "<p>You can rw with <code>le_zero h1</code> though to replace <code>a</code> with <code>0</code></p>",
        "id": 203707352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594642670
    },
    {
        "content": "<p>rw le_zero h1 does not work btw</p>",
        "id": 203707530,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594642766
    },
    {
        "content": "<p>in what context?</p>",
        "id": 203707554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594642786
    },
    {
        "content": "<p>ok I think I needed le_zero a to apply the rw</p>",
        "id": 203707624,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594642805
    },
    {
        "content": "<p>Remember you can share your screen on Zoom so that some experienced user can see it</p>",
        "id": 203707681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594642847
    },
    {
        "content": "<p>That's why we have breakout rooms</p>",
        "id": 203707700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594642862
    },
    {
        "content": "<p>what's the name of the tactic that simplifies expressions involving only associativity and commutativity of + and *?</p>",
        "id": 203710073,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594644418
    },
    {
        "content": "<p><code>ring</code></p>",
        "id": 203710103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594644435
    },
    {
        "content": "<p>But using it in the game is cheating</p>",
        "id": 203710109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594644442
    },
    {
        "content": "<p>At least in the early worlds</p>",
        "id": 203710116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594644448
    },
    {
        "content": "<p>thanks!</p>",
        "id": 203710148,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594644479
    },
    {
        "content": "<p>I guess to prove a = a + (e + d + f) when I have an assumption h1: a = a + e + d + f can be resolved with ring?</p>",
        "id": 203710589,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594644769
    },
    {
        "content": "<p>yes, or <code>abel</code> or <code>simp [add_assoc]</code></p>",
        "id": 203710642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594644810
    },
    {
        "content": "<p>You could try <code>rw h1, ac_refl</code> which is more low-level than ring.</p>",
        "id": 203710643,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594644810
    },
    {
        "content": "<p>Hmm... neither of Mario's suggestions will actually use your hypothesis <code>h1</code>.</p>",
        "id": 203710726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594644851
    },
    {
        "content": "<p><code>ring</code> actually can't handle proofs using hypotheses, you would have to use <code>transitivity, apply h1</code> first</p>",
        "id": 203710742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594644865
    },
    {
        "content": "<p>my other suggestions would work after that</p>",
        "id": 203710758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594644881
    },
    {
        "content": "<p><code>simpa [add_assoc] using h1</code> should also work</p>",
        "id": 203710783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594644900
    },
    {
        "content": "<p>last one worked perfectly!</p>",
        "id": 203710835,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594644941
    },
    {
        "content": "<p>And to pile on, <code>linarith</code> will also solve this kind of thing, as long as you aren't subtracting natural numbers.</p>",
        "id": 203710908,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594644969
    },
    {
        "content": "<p>In level 5 of the multiplication world in the natural number game, my solution looks like</p>",
        "id": 203719033,
        "sender_full_name": "Peter Bruin",
        "timestamp": 1594649380
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">mynat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">induction</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">mul_succ</span><span class=\"o\">},</span>\n<span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>In the second part of the induction the <code>repeat</code> tactic works, but if I try to replace the three <code>rw mul_zero</code> lines in the first part by <code>repeat {rw mul_zero}</code> I get <code>invalid apply tactic, failed to unify a * b * succ d = a * (b * succ d) with [...]</code>. Does this mean you can only use <code>repeat</code> when there is a single goal?</p>",
        "id": 203719407,
        "sender_full_name": "Peter Bruin",
        "timestamp": 1594649562
    },
    {
        "content": "<p>(In the meantime I found out that the three <code>rw mul_zero</code> lines can be removed completely, but that doesn't really answer my question...)</p>",
        "id": 203719972,
        "sender_full_name": "Peter Bruin",
        "timestamp": 1594649831
    },
    {
        "content": "<p>What's happened is that you no longer need the refl.</p>",
        "id": 203719974,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594649833
    },
    {
        "content": "<p>This is a slight quirk of the way the natural number game is set up</p>",
        "id": 203720019,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594649853
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 203720052,
        "sender_full_name": "Peter Bruin",
        "timestamp": 1594649870
    },
    {
        "content": "<p>The <code>rw</code> inside the repeat is actually doing more than the <code>rw</code> outside, for pedagogical reasons rw in the game was made to do less so its clearer which step is doing what, but the repeat negates this</p>",
        "id": 203720164,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594649908
    },
    {
        "content": "<p>In other words, the remark that <code>rwa</code> will check if the goal can be proved by <code>refl</code> also applies to <code>repeat</code>?</p>",
        "id": 203720166,
        "sender_full_name": "Peter Bruin",
        "timestamp": 1594649909
    },
    {
        "content": "<p>To <code>rw</code> inside <code>repeat</code></p>",
        "id": 203720214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594649930
    },
    {
        "content": "<p>OK, thanks!</p>",
        "id": 203720276,
        "sender_full_name": "Peter Bruin",
        "timestamp": 1594649963
    },
    {
        "content": "<p>I have to say the NNG is totally addictive.  Every time I take down one boss I can't wait to fight the next one!  If video arcades were still a thing I could definitely see people lining up with quarters in hand to play this.</p>",
        "id": 203746931,
        "sender_full_name": "Andrew Sutherland",
        "timestamp": 1594662713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"320522\">@Andrew Sutherland</span> Wait till you get to the modular forms level!<br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Did you write it already?</p>",
        "id": 203747633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594663071
    },
    {
        "content": "<p><code>ring</code> doesn't work in NNG for a long time because we're rolling our own <code>nat</code> and half of the game is spent proving they're a commutative semiring; before this <code>ring</code> isn't going to work :-)</p>",
        "id": 203748196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594663274
    },
    {
        "content": "<p>I'm curious whether the elliptic curve quest went much further after I had to leave the super interesting discussion</p>",
        "id": 203752064,
        "sender_full_name": "Amos Turchet",
        "timestamp": 1594665007
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/Example-Lean-Projects/tree/master/src/elliptic_curves\">https://github.com/ImperialCollegeLondon/Example-Lean-Projects/tree/master/src/elliptic_curves</a></p>",
        "id": 203752371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594665129
    },
    {
        "content": "<p>We are embarrassingly stuck right now. I'll get back to it later :-)</p>",
        "id": 203753590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594665717
    }
]