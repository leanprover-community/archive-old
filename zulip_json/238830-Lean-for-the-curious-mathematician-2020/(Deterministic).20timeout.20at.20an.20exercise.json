[
    {
        "content": "<p>Hello,<br>\nI'm currently doing the exercise that the derivative of the determinant at the identity matrix is the trace. Twenty lines in I had just done enough work to arrive at the goal <code> ∥(B + 1).det - 1 - (⇑(matrix.trace_clm n) (B + 1) - ⇑(matrix.trace_clm n) 1)∥ ≤ c * ∥B + 1 - 1∥</code>, but the next step I got a <code>(deterministic) timeout</code>. I don't feel like I do anything weird in my code; I squeezed my simps, and all other steps seem fairly simple. Is there someway I can see what is taking Lean so long, so I can try to speed up the lines that need it the most?</p>\n<p>I guess the best solution is to first prove some lemmas that I could then use in the proof in order to make it shorter and hence faster, but I'd still like to understand why Lean is taking a lot more time than I expected.</p>\n<p>The minimal working example is pretty long, so I'm not sure sure sharing it would be very helpful. but let me know if I should!</p>",
        "id": 204288836,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595056611
    },
    {
        "content": "<p>Hi Pim! I think you were in one of the breakout rooms with me yesterday but never said a word to me :-) I'm glad you're speaking now! Yury suggested to me yesterday that this proof would be long to formalise in Lean, but definitely possible. I'm afraid that deterministic timeouts can occur for all manner of reasons in Lean, and it will be very hard to diagnose without you posting code. Just stick your code up as a gist or paste it in some other way, and maybe people will take a look. Sometimes one tiny typo can throw the elaborator into complete confusion and send it off looking for answers to questions which you didn't mean to ask it at all.</p>",
        "id": 204292514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595063201
    },
    {
        "content": "<p>Hi Kevin!<br>\nMy code is```</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 204292874,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595063889
    },
    {
        "content": "<p>There are three \"legitimate\" reasons for a deterministic timeout:</p>\n<ul>\n<li>you call a tactic that does something complicated, or could just try many things (e.g. <code>tidy</code>, and <code>library_search</code>)</li>\n<li>you call <code>simp</code> with a bad simp set that goes into a loop</li>\n<li>you call <code>refl</code> (or something that calls <code>refl</code> under the hood), that induces Lean to go crazy unfolding definitions (\"near misses\" on definitional equality are often the culprit: usually the solution is to identify something that should be <code>@[irreducible]</code>)</li>\n</ul>\n<p>But at least as often it's because of something \"dumb\", often a syntactical mishap in entering a term or tactic.</p>",
        "id": 204292875,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595063895
    },
    {
        "content": "<p>On further experiments, it seems the problem might be in fact with the <code>change</code> command (the line commented out in the previous version. Does that call <code>refl</code> unde the hood?</p>",
        "id": 204293086,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595064326
    },
    {
        "content": "<p>Yes! If you try to <code>change</code> <code>A</code> to <code>B</code> and <code>A</code> and <code>B</code> are not in fact definitionally equal, then when Lean uses <code>refl</code> to try and prove that they are equal it might go crazy.</p>",
        "id": 204293141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595064408
    },
    {
        "content": "<p>Before the <code>change</code> command, the hypothesis <code>hA</code> is of type <code>dist (B + 1) 1 &lt; eps</code>, and <code>0 + 1</code> is definitionally equal to <code>1</code> right?</p>",
        "id": 204293146,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595064433
    },
    {
        "content": "<p>Can you please post an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> in the sense of the link?</p>",
        "id": 204293150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595064453
    },
    {
        "content": "<p>PS whether <code>0 + 1</code> is definitionally equal to <code>1</code> will depend on what the types of <code>0</code> and <code>1</code> are. If they are naturals, then yes. If they are reals, I would be far less sure.</p>",
        "id": 204293200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595064497
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 204293208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595064539
    },
    {
        "content": "<p>They are in fact nxn-matrices, so then it does make more sense that 0 + 1 is not definitionally equal to 1</p>",
        "id": 204293349,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595064759
    },
    {
        "content": "<p>We even have:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n\n\n<p>that shows it's not definitionally equal</p>",
        "id": 204293461,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595064969
    },
    {
        "content": "<p>Weirdly enough,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">library_search</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>also timeouts...</p>",
        "id": 204293523,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595065095
    },
    {
        "content": "<p>but zero_add luckily proves this :)</p>",
        "id": 204293731,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595065524
    },
    {
        "content": "<p>Still, is there a way to explicitly see what is taking Lean so long? I would like to be able to automatically see where the timeout occurred, is that possible?</p>",
        "id": 204293959,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595066030
    },
    {
        "content": "<p>It's extremely hard to diagnose what's going on until you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 204294024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595066126
    },
    {
        "content": "<p>Ie I am too lazy to do the work which you can do easily</p>",
        "id": 204294029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595066154
    },
    {
        "content": "<p>Well, here the diagnosis, thanks to you and Scott, is that I was trying to <code>change</code> to something non-definitionally equal, so my specific problem is solved.</p>",
        "id": 204294129,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595066332
    },
    {
        "content": "<p>I was just wondering whether it is in general possible to automatically see where a timeout occurs?</p>",
        "id": 204294137,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595066387
    },
    {
        "content": "<p>Delete lines from the end of the proof?</p>",
        "id": 204294184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595066438
    },
    {
        "content": "<p>Use <code>extract_goal</code> to pull a suspicious step out into a separate lemma?</p>",
        "id": 204294188,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595066458
    },
    {
        "content": "<p>Try adding in implicit arguments by hand using <code>@</code>?</p>",
        "id": 204294205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595066491
    },
    {
        "content": "<p>None of these are automatic, but all helpful for running it down.</p>",
        "id": 204294207,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595066513
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">matrix</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">real</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">comm_ring_aux</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">bool</span> <span class=\"n\">bool</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 204294257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595066602
    },
    {
        "content": "<p>don't quite understand why the last one fails</p>",
        "id": 204294258,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1595066607
    },
    {
        "content": "<p>Ok, thanks! Deleting lines from the end of the proof already sounds like it should work most of the time, especially knowing that even something simple like <code>change</code> can cause timeouts.</p>",
        "id": 204294321,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595066728
    },
    {
        "content": "<p><code>change</code> sounds simple, but recall how unboundedly bad \"it's obvious\" proofs by human mathematics can become. <code>change</code> is pretty much the same thing.</p>",
        "id": 204294369,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1595066788
    },
    {
        "content": "<p>I guess the lesson for me is indeed that even definitional equality can be arbitrarily complicated</p>",
        "id": 204296559,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595071084
    },
    {
        "content": "<p>If you're a mathematician then you shouldn't get too hung up about definitional equality. It is an implementation issue. No mathematician would believe that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>0</mn><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n+0=n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>+</mo><mi>n</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">0+n=n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> were any different as statements, however if you set things up the way Peano did then one is definitional and the other isn't. The important thing for mathematicians is that they are both <code>simp</code> lemmas.</p>",
        "id": 204296579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595071188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319356\">@Pim Spelier</span> You might be looking for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n\n<p>Put it above your lemma...</p>",
        "id": 204299985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595077575
    },
    {
        "content": "<p>That seems to work, thanks!</p>",
        "id": 204301528,
        "sender_full_name": "Pim Spelier",
        "timestamp": 1595080497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I know what you mean, but to be fair I don't think Peano deserves the blame for this sordid state of affairs. I don't think such a convoluted notion of \"truth by definition\" for recursive functions appears in his axiomatization. You could blame lambda calculus but here it's not so much \"unfolding definitions\" as \"computing\" when you perform beta reduction. I don't know where this idea came from prior to CIC itself</p>",
        "id": 204308660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1595091930
    }
]