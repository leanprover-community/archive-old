[
    {
        "content": "<p>I am trying to follow the example found  here: <a href=\"#narrow/stream/238830-Lean-for.20the.20curious.20mathematician.202020/topic/Zoom/near/203703811\">https://leanprover.zulipchat.com/#narrow/stream/238830-Lean-for.20the.20curious.20mathematician.202020/topic/Zoom/near/203703811</a></p>\n<p>Am I correct to assume that the code as presented will not work in 2021?  E.g., 'fact N + 1' is now 'factorial N + 1'.   The variable 'a' is not identifiable in line 24.   I cannot get that script to compile as presented.</p>",
        "id": 239356592,
        "sender_full_name": "Andrey Rukhin",
        "timestamp": 1621392085
    },
    {
        "content": "<p>Here's the current version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">infinitude_of_primes</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">N</span><span class=\"bp\">!+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">refine</span> <span class=\"n\">min_fac_prime</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"bp\">!</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">factorial_pos</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_contradiction</span> <span class=\"n\">w</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span><span class=\"bp\">!</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac_dvd</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">N</span><span class=\"bp\">!</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">prime.dvd_factorial</span> <span class=\"n\">pp</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"n\">le_of_not_ge</span> <span class=\"n\">w</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.dvd_add_right</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prime.not_dvd_one</span> <span class=\"n\">pp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">pp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 239357747,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621393085
    },
    {
        "content": "<p>I started checking out Lean last weekend, and I've looked at the \"infinitude of primes - a Lean theorem prover\" demo.   As a way to get started and ensure that my tooling is working I'm working through this example in visual studio code while watching the video.   ... and that led me to a problem early on (see screenshot). <a href=\"/user_uploads/3121/tQ7mQubBtXRrBVu3oVy_ovEj/Screenshot-2021-06-22-at-18.56.20.png\">Screenshot-2021-06-22-at-18.56.20.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/tQ7mQubBtXRrBVu3oVy_ovEj/Screenshot-2021-06-22-at-18.56.20.png\" title=\"Screenshot-2021-06-22-at-18.56.20.png\"><img src=\"/user_uploads/3121/tQ7mQubBtXRrBVu3oVy_ovEj/Screenshot-2021-06-22-at-18.56.20.png\"></a></div><p>(I did initialize a lean project in a new directory using the \"leanproject new infinitude_of_primes\" command, and then I opened the directory in code before starting to edit the .lean file)</p>\n<p>It seems like I've done a silly mistake that stops '+' from doing what it is intended to do, but being a beginner I don't know what that mistake is.</p>\n<p>Any suggetions about what I'm doing wrong?</p>",
        "id": 243546627,
        "sender_full_name": "Bjørn Remseth",
        "timestamp": 1624381263
    },
    {
        "content": "<p>Lean thinks you're talking about another <code>fact</code> (one that means fact, not factorial)</p>",
        "id": 243546966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624381404
    },
    {
        "content": "<p>The error says \"fact N is a proposition, you can't add something to that!\". This is because since that video, we have a second usage of <code>fact</code> in the library and in fact factorial might be renamed now?</p>",
        "id": 243547015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624381425
    },
    {
        "content": "<p>Yes, <code>fact</code> is now called <code>factorial</code> (and has notation <code>!</code> if you  <code>open_locale nat</code>)</p>",
        "id": 243547179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624381478
    },
    {
        "content": "<p>That's a shame, that a video which people come across has some Lean code which no longer compiles, but I guess that's just life.</p>",
        "id": 243547267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1624381514
    },
    {
        "content": "<p>Okay.   I'm no longer confused :-) Thank you again.</p>",
        "id": 243547279,
        "sender_full_name": "Bjørn Remseth",
        "timestamp": 1624381517
    },
    {
        "content": "<p>The GitHub repository of this workshop is still updated but unfortunately we can't update the videos.</p>",
        "id": 243547361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1624381556
    },
    {
        "content": "<p>I see.  The video was nice though (added a comment in youtube)</p>",
        "id": 243547459,
        "sender_full_name": "Bjørn Remseth",
        "timestamp": 1624381589
    },
    {
        "content": "<p>Hello! I have formalized a problem from the International Mathematical Olympiad (IMO)  as part of my master's degree and I would like to include it at the next repository on GitHub:  <a href=\"https://github.com/leanprover-community/mathlib/tree/master/archive/imo\">https://github.com/leanprover-community/mathlib/tree/master/archive/imo</a>. Can someone explain to me how to do it? Thank you very much!</p>",
        "id": 245565203,
        "sender_full_name": "Sara Díaz Real",
        "timestamp": 1625942565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"371650\">@Sara Díaz Real</span> This youtube video explains it quite well: <a href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A\">https://www.youtube.com/watch?v=Bnc8w9lxe8A</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Bnc8w9lxe8A\" href=\"https://www.youtube.com/watch?v=Bnc8w9lxe8A\"><img src=\"https://uploads.zulipusercontent.net/ae6a5158c3c3f73f7cadb724ecaee86e98129753/68747470733a2f2f692e7974696d672e636f6d2f76692f426e633877396c786538412f64656661756c742e6a7067\"></a></div>",
        "id": 245565508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625943093
    },
    {
        "content": "<p>Hey that's great to hear! This message is not really in the right stream. The best way to do it would be to ask in #general for push access to non master branches of mathlib and give your github username and tag @ maintainers  . Then clone mathlib with <code>leanproject get mathlib</code> and add your file to the archive/imo directory and submit a pull request. Feel free to ask more questions if you need any details for any of the parts of this workflow.</p>",
        "id": 245565510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1625943096
    },
    {
        "content": "<p>Thank you very much! It is the first time I use zulip so I didn't  know how to use it quite well, sorry. I will try to do it in the next few days and I hope it will work!!</p>",
        "id": 245566007,
        "sender_full_name": "Sara Díaz Real",
        "timestamp": 1625943799
    }
]