[
    {
        "content": "<p>Hello.<br>\nI am stuck in Exercise 2 of topological_spaces.lean, desperately trying to prove <code>lemma is_open_prod_iff</code>, specifically the -&gt; implication,<br>\nthat if a set s of X \\times Y is open then for every (a,b) in s, there are open sets u in X and v in Y such that (a,b) \\in s \\subset u \\times v.<br>\nAfter <code>intros open_s a b ab_in_s</code>,  I have to enter the 4 cases of the inductive definition of <code>generated_open</code>, which I do with <code>cases open_s</code>, but I can't manage to make use of  the hypothesis<br>\n<code>open_s_a: generated_open (X × Y) {U : set (X × Y) | ∃ (Ux : set X) (Uy : set Y) (hx : is_open Ux) (hy : is_open Uy), U = Ux.prod Uy} open_s_A</code><br>\nthat I obtain.<br>\nI suspect a serious misunderstanding of my part somewhere, but where?</p>",
        "id": 204021992,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1594852912
    },
    {
        "content": "<p>I think this was not meant to be part of the exercise series. It was left intentionally without a proof.</p>",
        "id": 204022537,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594853300
    },
    {
        "content": "<p>Did you do induction on the hypothesis rather than cases?</p>",
        "id": 204022584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594853347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/238830-Lean-for.20the.20curious.20mathematician.202020/topic/topological.20spaces.20-.20generated.20topology/near/204022584\">said</a>:</p>\n<blockquote>\n<p>Did you do induction on the hypothesis rather than cases?</p>\n</blockquote>\n<p>Hum… that must be the problem… :-(</p>",
        "id": 204024104,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1594854428
    },
    {
        "content": "<p>So like Patrick says, I left it without proof, not as an exercise because really its best to build up a library of smaller results to prove this. But I did prove this direction just now with a brainless human powered tactic of me spamming the tactics <code>rcases?</code> <code>library_search</code> <code>use</code> <code>split</code> <code>simp</code> <code>dsimp</code> the result is this monstrosity:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">is_open_prod_iff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">is_open</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span>\n                                  <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">open_s</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">ab_in_s</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">open_s</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">open_s_H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">ab_in_s</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">ab_in_s</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ab_in_s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">univ</span><span class=\"o\">,</span><span class=\"n\">univ</span><span class=\"o\">,</span><span class=\"n\">univ_mem</span><span class=\"o\">,</span><span class=\"n\">univ_mem</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"bp\">_</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">subset_univ</span> <span class=\"bp\">_</span><span class=\"o\">,},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">open_s_ih_a</span> <span class=\"n\">ab_in_s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h_w</span><span class=\"o\">,</span> <span class=\"n\">h_h_left</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_left</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_right_left</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_right_right</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">⟩</span> <span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">open_s_ih_a_1</span> <span class=\"n\">ab_in_s</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">w2</span><span class=\"o\">,</span> <span class=\"n\">h_w2</span><span class=\"o\">,</span> <span class=\"n\">h_h_left2</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_left2</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_right_left2</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_right_right2</span><span class=\"o\">,</span> <span class=\"n\">k2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">w</span> <span class=\"err\">∩</span> <span class=\"n\">w2</span><span class=\"o\">],</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">h_w</span> <span class=\"err\">∩</span> <span class=\"n\">h_w2</span><span class=\"o\">],</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">inter</span> <span class=\"n\">w</span> <span class=\"n\">w2</span> <span class=\"n\">h_h_left</span> <span class=\"n\">h_h_left2</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">inter</span> <span class=\"n\">h_w</span> <span class=\"n\">h_w2</span> <span class=\"n\">h_h_right_left</span> <span class=\"n\">h_h_right_left2</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mem_inter</span> <span class=\"n\">h_h_right_right_left</span> <span class=\"n\">h_h_right_right_left2</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">mem_inter</span> <span class=\"n\">h_h_right_right_right</span> <span class=\"n\">h_h_right_right_right2</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">prod_inter_prod</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">w</span> <span class=\"n\">h_w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_left</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">w2</span> <span class=\"n\">h_w2</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">prod_inter_prod</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span> <span class=\"n\">k2</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">w</span> <span class=\"n\">h_w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inter_subset_right</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">w2</span> <span class=\"n\">h_w2</span><span class=\"o\">),</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">ab_in_s</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">hxy_w</span><span class=\"o\">,</span> <span class=\"n\">hxy_h_left</span><span class=\"o\">,</span> <span class=\"n\">hxy_h_right</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">open_s_a</span> <span class=\"bp\">_</span> <span class=\"n\">hxy_h_left</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">open_s_ih</span> <span class=\"bp\">_</span> <span class=\"n\">hxy_h_left</span> <span class=\"n\">hxy_h_right</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h_w</span><span class=\"o\">,</span> <span class=\"n\">h_h_left</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_left</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_right_left</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_right_right</span><span class=\"o\">,</span> <span class=\"n\">k</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h_h_left</span><span class=\"o\">,</span> <span class=\"n\">h_w</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_left</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_right_left</span><span class=\"o\">,</span> <span class=\"n\">h_h_right_right_right</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subset_sUnion_of_mem</span> <span class=\"n\">hxy_h_left</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">,},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204025813,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594855587
    },
    {
        "content": "<p>I'm sure it doesn't need to be anywhere near this bad, but I didn't want to think at all!</p>",
        "id": 204025883,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594855643
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> , I'll finish my own (hand made) version of the proof, and I'm not sure it'll be significantly different from that.<br>\n(I can't work on it today, but I'll come back to you soon!)</p>",
        "id": 204049671,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1594880895
    }
]