[
    {
        "content": "<p>Something that came up repeatedly in our breakout is that <code>pow_left_inj</code> creates some ugly conversions between two different types of power operator. Would it make sense to add this lemma to mathlib to avoid that ugliness?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_left_inj</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hnpos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hxyn</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pow_left_inj</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">Hnpos</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hxyn</span><span class=\"o\">])</span>\n</code></pre></div>",
        "id": 203936255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1594807785
    },
    {
        "content": "<p>I agree it's worth it to add this, especially since the lemma fills in the nonnegativity assumptions. The cleaner solution is to remove <code>nat.has_pow</code> entirely, but <a href=\"https://github.com/leanprover-community/lean/pull/128\">there are implementation issues with this</a>.</p>",
        "id": 203936626,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594808051
    },
    {
        "content": "<p>I think getting rid of this stupid <code>nat.has_pow</code> should have really high priority.</p>",
        "id": 203936850,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594808236
    },
    {
        "content": "<p>People who want it for programming should use a different notation (or no notation at all).</p>",
        "id": 203936868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594808252
    },
    {
        "content": "<p>I'm very upset that participants in my breakout room lost so much time because of this issue.</p>",
        "id": 203936953,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594808291
    },
    {
        "content": "<p>I think I had a similar problem a few months ago when I tried to prove irrationality of sqrt2, and the fix you told me was something like \"don't use ^2\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 203938989,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1594809878
    },
    {
        "content": "<p>Indeed Anatole, it's the very same issue. We simply need to fix it once and for all.</p>",
        "id": 203939967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594810502
    }
]