[
    {
        "content": "<p>I'm trying to continue Patrick's work on finiteness of the quotient <code>SL2Z \\ (Mat m)</code>.<br>\nThis is one (approximate) step that would be useful:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">reps</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">reps</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 133942386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536918853
    },
    {
        "content": "<p>I get a deterministic timeout just for parsing the type of <code>ι</code></p>",
        "id": 133942392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536918873
    },
    {
        "content": "<p>is that MWE?</p>",
        "id": 133942399,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536918896
    },
    {
        "content": "<p>Proof strategy: we need to prove that <code>reps</code> is finite. Do this by injecting into <code>fin m × fin m × fin m</code>.</p>",
        "id": 133942408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536918919
    },
    {
        "content": "<p>It is not exactly a MWE. You can find it by pulling the latest commits from <code>kbb</code></p>",
        "id": 133942412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536918939
    },
    {
        "content": "<p>I don't think that's a good strategy</p>",
        "id": 133942413,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536918944
    },
    {
        "content": "<p>Ok, so how do you prove that <code>reps</code> is a finset?</p>",
        "id": 133942416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536918959
    },
    {
        "content": "<p>equiv it with <code>finset.filter (finset.univ : (finset (fin m × fin m × fin m))) sorry</code></p>",
        "id": 133942530,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919115
    },
    {
        "content": "<p>also why <code>int.nat_abs</code>?</p>",
        "id": 133942548,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919157
    },
    {
        "content": "<p>Because I don't know better?</p>",
        "id": 133942605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536919219
    },
    {
        "content": "<p>that's not what I mean</p>",
        "id": 133942607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919229
    },
    {
        "content": "<p>That's what you were using in your inductive proof</p>",
        "id": 133942608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536919230
    },
    {
        "content": "<p>alright</p>",
        "id": 133942619,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919257
    },
    {
        "content": "<p>I think I'll prove that it's a fintype</p>",
        "id": 133942626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919268
    },
    {
        "content": "<p>ah</p>",
        "id": 133942779,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919518
    },
    {
        "content": "<p>of course it times out</p>",
        "id": 133942780,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919521
    },
    {
        "content": "<p><code>m</code> is an integer</p>",
        "id": 133942782,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919524
    },
    {
        "content": "<p><code>fin m</code> makes no sense</p>",
        "id": 133942783,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919527
    },
    {
        "content": "<p>Why did it time out? Why didn't it slap me in the face?</p>",
        "id": 133942860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536919669
    },
    {
        "content": "<p>It should just have errored immediately saying that <code>m</code> is not a nat.</p>",
        "id": 133942904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536919686
    },
    {
        "content": "<p>I think it's searching for a coercion from int to nat</p>",
        "id": 133942928,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536919753
    },
    {
        "content": "<p>also it still isn't a fintype</p>",
        "id": 133943083,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536920033
    },
    {
        "content": "<p>What isn't?</p>",
        "id": 133943209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536920208
    },
    {
        "content": "<p>if m=0 I don't think it's a fintype</p>",
        "id": 133943218,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536920231
    },
    {
        "content": "<p>the repr</p>",
        "id": 133943220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536920236
    },
    {
        "content": "<p>True. But you need <code>m ≠ 0</code></p>",
        "id": 133943224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536920253
    },
    {
        "content": "<p>Otherwise the orbits are parameterised by pairs <code>(a,b)</code> with <code>0 ≤ a</code> and <code>a,b</code> coprime.</p>",
        "id": 133943277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536920291
    },
    {
        "content": "<p>Inparticularinfinitelymanyorbits</p>",
        "id": 133943283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536920305
    },
    {
        "content": "<p>Maybe we should have assumed <code>m : ℕ</code> from the beginning.</p>",
        "id": 133943379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536920502
    },
    {
        "content": "<p>why on earth is there classical.prop_decidable in the beginning of the file?</p>",
        "id": 133945384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536923509
    },
    {
        "content": "<p>Because it's a math file</p>",
        "id": 133945453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536923626
    },
    {
        "content": "<p>about integers</p>",
        "id": 133945457,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536923639
    },
    {
        "content": "<p>The last lemma requires it</p>",
        "id": 133945508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536923693
    },
    {
        "content": "<p>it needs <code>decidable_eq (quotient (action_rel (SL2Z_M_ m)))</code></p>",
        "id": 133945515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536923709
    },
    {
        "content": "<p>I'll prove it</p>",
        "id": 133945520,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536923724
    },
    {
        "content": "<p>after dinner</p>",
        "id": 133945523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536923731
    },
    {
        "content": "<p>I guess we can't really avoid that</p>",
        "id": 133945571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536923769
    },
    {
        "content": "<p>you're welcome to prove it if you want</p>",
        "id": 133945584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536923822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Oo.ooo you released Kenny's inner wrath.</p>",
        "id": 133945588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536923826
    },
    {
        "content": "<p>I guess in this case you <em>can</em> prove that <code>decidable_eq</code> if you want to.</p>",
        "id": 133945593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536923845
    },
    {
        "content": "<p>I already proved it: <a href=\"https://github.com/semorrison/kbb/blob/757806ec7f9848a5eb405ca26f5a12d94932a197/src/SL2Z_generators.lean#L4\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/757806ec7f9848a5eb405ca26f5a12d94932a197/src/SL2Z_generators.lean#L4\">https://github.com/semorrison/kbb/blob/757806ec7f9848a5eb405ca26f5a12d94932a197/src/SL2Z_generators.lean#L4</a></p>",
        "id": 133945606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536923881
    },
    {
        "content": "<p>no you haven't</p>",
        "id": 133945647,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536923895
    },
    {
        "content": "<p>Cool! So now we have established finiteness of the orbit set!</p>",
        "id": 133964107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942354
    },
    {
        "content": "<blockquote>\n<p>Cool! So now we have established finiteness of the orbit set!</p>\n</blockquote>\n<p>Not quite, there has been some regression, let me fix that.</p>",
        "id": 133971507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536950536
    },
    {
        "content": "<p>eh... I'm editing SL2Z_generators.lean</p>",
        "id": 133971536,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536950566
    },
    {
        "content": "<p>Done: no more sorry in SL2Z_generators.lean</p>",
        "id": 133971539,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536950577
    },
    {
        "content": "<p>ah I see what you did</p>",
        "id": 133971561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536950602
    },
    {
        "content": "<p>done</p>",
        "id": 133979456,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536959724
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- correct if m ≠ 0 -/</span>\n<span class=\"n\">def</span> <span class=\"n\">reduce</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_rec_on</span> <span class=\"n\">n</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">A</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">then</span> <span class=\"k\">if</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"k\">then</span> <span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">)))</span> <span class=\"n\">A</span>\n  <span class=\"k\">else</span> <span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"bp\">/</span> <span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"k\">else</span> <span class=\"n\">ih</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">subst</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">reduce_aux</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)))</span> <span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">rfl</span>\n<span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">--#reduce reduce (-1) ⟨1, 3, 1, 2, by norm_num⟩</span>\n</pre></div>",
        "id": 133979472,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536959747
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">reps_equiv</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">action_rel</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"err\">≃</span> <span class=\"n\">reps</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 133979480,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536959760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 133979526,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536959778
    },
    {
        "content": "<p>Ah, that looks like a smart way to approach this!</p>",
        "id": 133995671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536985701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> The linecount in that file really exploded! You write Lean several orders of magnitude faster than I can read it.</p>",
        "id": 133995907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986119
    },
    {
        "content": "<p>lol</p>",
        "id": 133995980,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536986226
    },
    {
        "content": "<p>Also you seem to like refactoring code, whereas for me there is some nasty psychological barrier...</p>",
        "id": 133996045,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986337
    },
    {
        "content": "<p>Anyway, thanks a lot!</p>",
        "id": 133996052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Have you seen what happened?</p>",
        "id": 133996056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986362
    },
    {
        "content": "<p>what is this?</p>",
        "id": 133996060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536986385
    },
    {
        "content": "<p>We now have several hundreds of lines of code about a silly type called <code>SL2Z</code>, and it doesn't tie in to the <code>matrix</code> code at all.</p>",
        "id": 133996062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986398
    },
    {
        "content": "<p>Well, that is not strictly true, Kenny proved that <code>SL2Z</code> is <code>equiv</code> to <code>SL 2 int</code>.</p>",
        "id": 133996110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986433
    },
    {
        "content": "<p>But now this <code>SL2Z</code> is acting on different sets, etc... and all this extra structure has not been tied to regular matrices.</p>",
        "id": 133996137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986475
    },
    {
        "content": "<p>This makes me vaguely uncomfortable</p>",
        "id": 133996143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536986495
    },
    {
        "content": "<p>I think this was a great experiment, but I'm somewhat worried.</p>",
        "id": 133996145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986501
    },
    {
        "content": "<p>Would you mind scrolling through the repo a bit?</p>",
        "id": 133996150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986519
    },
    {
        "content": "<p>unless the properties are not shared by other dimensions or rings?</p>",
        "id": 133996190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536986525
    },
    {
        "content": "<p>SL2Z is generated by two matrices</p>",
        "id": 133996199,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536986553
    },
    {
        "content": "<p>Right.</p>",
        "id": 133996203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986564
    },
    {
        "content": "<p><code>induction_on</code> is frightening</p>",
        "id": 133996212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536986579
    },
    {
        "content": "<p>But the action of SL2Z on other 2x2-matrices is generic</p>",
        "id": 133996216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986586
    },
    {
        "content": "<p>And the action of SL2Z on the upper-half plane is a restriction of the action of <code>(GL 2 real)_+</code> on the upper half plane</p>",
        "id": 133996237,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986633
    },
    {
        "content": "<p>So certain things are really specific, others are not.</p>",
        "id": 133996267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986643
    },
    {
        "content": "<p>which is the restriction of GL2R acting on CP1</p>",
        "id": 133996281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536986658
    },
    {
        "content": "<p>where should I be looking?</p>",
        "id": 133996304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536986735
    },
    {
        "content": "<p>the frightening proof linked above appears to have been removed</p>",
        "id": 133996310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536986752
    },
    {
        "content": "<p>I made a function called reduce</p>",
        "id": 133996312,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536986754
    },
    {
        "content": "<p>You could start with <code>modular_forms.lean</code> and then drill down.</p>",
        "id": 133996316,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986759
    },
    {
        "content": "<p>on master?</p>",
        "id": 133996364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536986781
    },
    {
        "content": "<p>Most of the hard stuff is happening in <code>SL2Z_generators</code> and some in <code>modular_group.lean</code></p>",
        "id": 133996366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986782
    },
    {
        "content": "<p>Yes</p>",
        "id": 133996368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986788
    },
    {
        "content": "<p>We don't really use branches</p>",
        "id": 133996371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536986794
    },
    {
        "content": "<p>In the end, I would like <code>Hecke_operator</code> in <code>hecke_operators.lean</code> to have a somewhat readable definition.</p>",
        "id": 133996479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536987002
    },
    {
        "content": "<p>It feels to me like all the ingredients are now there... but as you can see, my attempt at writing the definition is <span class=\"emoji emoji-1f4a9\" title=\"poop\">:poop:</span></p>",
        "id": 133996541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536987047
    }
]