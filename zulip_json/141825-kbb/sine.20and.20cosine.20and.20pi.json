[
    {
        "content": "<p>I've started working on sine and cosine. I have cleaned the proofs up until <code>exp (x + y)</code> and I'm currently working on things like <code>sin (x + y)</code>. I have no idea how to define pi however. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what's the best way to do this?</p>",
        "id": 134008790,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537011255
    },
    {
        "content": "<p>Do you have complex exp or only real?</p>",
        "id": 134009489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537012609
    },
    {
        "content": "<p>complex. I'll define real.exp in terms of complex.exp</p>",
        "id": 134010115,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537013733
    },
    {
        "content": "<p>Ok, so <code>sin (x + y)</code> and friends follow immediately from <code>exp(x+y)</code>.</p>",
        "id": 134011693,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537016781
    },
    {
        "content": "<p>You're such a mathematician.</p>",
        "id": 134011700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537016816
    },
    {
        "content": "<p>Remember that you get a <code>/2</code> in those expressions. You need to convince Lean that you aren't dividing by zero.</p>",
        "id": 134011706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537016845
    },
    {
        "content": "<p>But Chris is pushing progress to the <code>exp</code> branch on community mathlib</p>",
        "id": 134011751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537016916
    },
    {
        "content": "<p>For <code>pi</code> you can prove that cos vanishes somewhere between 0 and 2 using the intermediate value theorem, and define pi as twice the first zero of cos. This is cheap but I guess proving other properties from that is painful. A better solution is probably to prove the classification of subgroups of (R, +), and define 2pi as the positive generator of ker(t mapsto exp(i*t)) (this kernel cannot be dense because exp is continuous and non-constant)</p>",
        "id": 134011752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537016918
    },
    {
        "content": "<p>Rights, so we need continuity of <code>exp</code>.</p>",
        "id": 134011758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537016951
    },
    {
        "content": "<p>For either definition.</p>",
        "id": 134011759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537016958
    },
    {
        "content": "<p>I both cases yes</p>",
        "id": 134011760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537016964
    },
    {
        "content": "<p>What is the best way to do this continuity proof?</p>",
        "id": 134011807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537017035
    },
    {
        "content": "<p>Generalise to arbitrary power series?</p>",
        "id": 134011809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537017045
    },
    {
        "content": "<p>We could also cheat and define pi using a random series, but then the link with exp and cos would be harder to establish</p>",
        "id": 134011813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537017052
    },
    {
        "content": "<p>I like your second definition.</p>",
        "id": 134011817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537017064
    },
    {
        "content": "<p>We should probably just check what Coq/Mizar/Isabelle do</p>",
        "id": 134011821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537017083
    },
    {
        "content": "<p>If you have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>e</mi><mrow><mi>x</mi><mo>+</mo><mi>y</mi></mrow></msup><mo>=</mo><msup><mi>e</mi><mi>x</mi></msup><msup><mi>e</mi><mi>y</mi></msup></mrow><annotation encoding=\"application/x-tex\">e^{x+y} = e^x e^y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">x</span><span class=\"mbin mtight\">+</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span></span></span></span> then it suffices to show that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding=\"application/x-tex\">e^x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span></span></span></span></span></span></span></span></span> is continuous at 0, and for this you can use a crude bound on the power series.</p>",
        "id": 134011825,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537017118
    },
    {
        "content": "<p>Ok, sounds good.</p>",
        "id": 134011879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537017213
    },
    {
        "content": "<p>Patrick, you still have to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>e</mi><mrow><mi>i</mi><mi>t</mi></mrow></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">e^{it} = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.824664em;\"></span><span class=\"strut bottom\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">i</span><span class=\"mord mathit mtight\">t</span></span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span></span></span></span> for some nonzero real <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.61508em;\"></span><span class=\"strut bottom\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">t</span></span></span></span> first, right?</p>",
        "id": 134011923,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537017262
    },
    {
        "content": "<p>indeed we must exclude that the kernel is trivial</p>",
        "id": 134011977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537017381
    },
    {
        "content": "<p>Does the definition of pi really rely on some explicit estimate like <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>cos</mi><mn>2</mn><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\cos 2 &lt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mop\">cos</span><span class=\"mord mathrm\">2</span><span class=\"mrel\">&lt;</span><span class=\"mord mathrm\">0</span></span></span></span>? <br>\nI guess if you have differential calculus at your disposal, you could show that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>sin</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\sin t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.66786em;\"></span><span class=\"strut bottom\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mop\">sin</span><span class=\"mord mathit\">t</span></span></span></span> is bounded, and then conclude that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>cos</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\cos t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.61508em;\"></span><span class=\"strut bottom\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mop\">cos</span><span class=\"mord mathit\">t</span></span></span></span> cannot be positive everywhere... wait no, I don't even see how to make this work.</p>",
        "id": 134012154,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537017756
    },
    {
        "content": "<p><a href=\"https://isabelle.in.tum.de/dist/library/HOL/HOL/Transcendental.html\" target=\"_blank\" title=\"https://isabelle.in.tum.de/dist/library/HOL/HOL/Transcendental.html\">https://isabelle.in.tum.de/dist/library/HOL/HOL/Transcendental.html</a> seems to use my first method</p>",
        "id": 134012167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537017836
    },
    {
        "content": "<p>Okay--if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>cos</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\cos t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.61508em;\"></span><span class=\"strut bottom\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mop\">cos</span><span class=\"mord mathit\">t</span></span></span></span> was positive everywhere then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>sin</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\sin t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.66786em;\"></span><span class=\"strut bottom\" style=\"height:0.66786em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mop\">sin</span><span class=\"mord mathit\">t</span></span></span></span> would be increasing, and then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>cos</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\cos t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.61508em;\"></span><span class=\"strut bottom\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mop\">cos</span><span class=\"mord mathit\">t</span></span></span></span> would have to lie below some line of negative slope, a contradiction.<br>\nNot sure if one can extract an \"elementary\" (no differential calculus) proof along these lines.</p>",
        "id": 134012218,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537017921
    },
    {
        "content": "<p>This all looks super tedious</p>",
        "id": 134012328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537018163
    },
    {
        "content": "<p>Let's do perfectoid spaces</p>",
        "id": 134012331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537018171
    },
    {
        "content": "<p>Hmmm, <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I can easily follow your maths proof that <code>exp</code> is continuous if it is ctu at <code>0</code>.</p>",
        "id": 134012706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018829
    },
    {
        "content": "<p>But how do I put this into Lean?</p>",
        "id": 134012709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018836
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/topological_structures.lean#L289\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/topological_structures.lean#L289\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/topological_structures.lean#L289</a> may help</p>",
        "id": 134012791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537018991
    },
    {
        "content": "<p>Aah thanks, that indeed looks useful.</p>",
        "id": 134012906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537019167
    },
    {
        "content": "<p>Do we know that <code>(exp x) \\ne 0</code>?</p>",
        "id": 134012930,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537019227
    },
    {
        "content": "<p>It's not yet merged in mathlib, but doesn't depend on much</p>",
        "id": 134012932,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537019228
    },
    {
        "content": "<p>Because then we know that <code>exp</code> is a group hom, which might also help.</p>",
        "id": 134012936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537019253
    },
    {
        "content": "<p>We do know exp \\ne 0</p>",
        "id": 134012999,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537019350
    },
    {
        "content": "<p>Hmmm, I'm horrible with these continuity proofs...</p>",
        "id": 134013589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537020432
    },
    {
        "content": "<p>So there is <code>squeeze_zero</code>, but I don't think there is a generic squeeze lemma, right?</p>",
        "id": 134013597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537020453
    },
    {
        "content": "<p>there is</p>",
        "id": 134013604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537020468
    },
    {
        "content": "<p>Ooh, my VScode didn't find it.</p>",
        "id": 134013612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537020478
    },
    {
        "content": "<p>Let me try again</p>",
        "id": 134013653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537020487
    },
    {
        "content": "<p>Aah, it only has squeeze in its docstring</p>",
        "id": 134013665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537020516
    },
    {
        "content": "<p>grep for sandwich in mathlib</p>",
        "id": 134013667,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537020521
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/5613d2ecc92ce8fae9555745bd94756dec61a323/analysis/topology/topological_structures.lean#L438\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/5613d2ecc92ce8fae9555745bd94756dec61a323/analysis/topology/topological_structures.lean#L438\">https://github.com/leanprover/mathlib/blob/5613d2ecc92ce8fae9555745bd94756dec61a323/analysis/topology/topological_structures.lean#L438</a></p>",
        "id": 134013671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537020531
    },
    {
        "content": "<p>grep for squeeze also works</p>",
        "id": 134013680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537020546
    },
    {
        "content": "<p>but grep for gendarme doesn't work</p>",
        "id": 134013687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537020571
    },
    {
        "content": "<p>Hmm snap, of course that doesn't help for continuity of the complex version.</p>",
        "id": 134013912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537020882
    },
    {
        "content": "<p>Anyway, the long term reasoning is clear: we don't want a trick, we want general results on power series</p>",
        "id": 134013997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537021005
    },
    {
        "content": "<p>Right. And I think I'dd rather work on the long term</p>",
        "id": 134014067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537021113
    },
    {
        "content": "<p>So, should we create <code>power_series.lean</code> on cocalc?</p>",
        "id": 134014074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537021136
    },
    {
        "content": "<p>Maybe Kevin will see it. I think I don't care</p>",
        "id": 134014085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537021150
    },
    {
        "content": "<p>Is that ok with others? Then we could multiplayer power series into existence.</p>",
        "id": 134014151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537021269
    },
    {
        "content": "<p>I'm quite addicted to that experience.</p>",
        "id": 134014152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537021280
    },
    {
        "content": "<p>I would wait until <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> tells us about how this is done in Isabelle (they have a lot of analysis there)</p>",
        "id": 134014192,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537021326
    },
    {
        "content": "<p>I will take a look</p>",
        "id": 134014543,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537022149
    },
    {
        "content": "<p>So, continuity of <code>exp</code> is proved using derivability. There is a section \"Term-by-Term Differentiability of Power Series\" in <a href=\"http://isabelle.in.tum.de/dist/library/HOL/HOL/Transcendental.html\" target=\"_blank\" title=\"http://isabelle.in.tum.de/dist/library/HOL/HOL/Transcendental.html\">http://isabelle.in.tum.de/dist/library/HOL/HOL/Transcendental.html</a> where most of it is proved. The central part is <code>termdiffs</code> which states: <code>DERIV (λx. ∑n. c n * x^n) x :&gt; (∑n. (diffs c) n * x^n)</code>.  Where <code>diffs c := (λn. of_nat (Suc n) * c (Suc n))</code> (<code>Suc</code> is <code>nat.succ</code> and <code>of_nat</code> is the coercion nat to a real_algebra).</p>",
        "id": 134014907,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537022917
    },
    {
        "content": "<p>The lemma <code>termdiffs</code> assumes that various power series converge.</p>",
        "id": 134014963,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537023006
    },
    {
        "content": "<p>So it would make sense to define power series, and then we need to change the definition of exp to use those power series.</p>",
        "id": 134015048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023202
    },
    {
        "content": "<p>Is that right?</p>",
        "id": 134015049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023205
    },
    {
        "content": "<p>I mean, there won't change that much</p>",
        "id": 134015051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023215
    },
    {
        "content": "<p>Yes, I think it would make sense to define power series. Also derivatives...</p>",
        "id": 134015240,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537023440
    },
    {
        "content": "<p>Ok, and this is purely algebraic stuff, right?</p>",
        "id": 134015325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023493
    },
    {
        "content": "<p>Or do you also mean the analytic derivative?</p>",
        "id": 134015338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023520
    },
    {
        "content": "<p>I guess we need to analytic derivative to prove continuity</p>",
        "id": 134015355,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537023562
    },
    {
        "content": "<p>Hmmm, ok</p>",
        "id": 134015413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023615
    },
    {
        "content": "<p>And we really need all of this to define pi?</p>",
        "id": 134015419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023627
    },
    {
        "content": "<p>Well, we will need this stuff anyway</p>",
        "id": 134015436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023687
    },
    {
        "content": "<p>I'm going to create a <code>power_series.lean</code> on CoCalc</p>",
        "id": 134015498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023784
    },
    {
        "content": "<p>In Isabelle:<br>\n<code>pi = 2 * (THE x. 0 ≤ x ∧ x ≤ 2 ∧ cos x = 0)</code> <br>\nand then even more algebric facts about <code>cos</code> and <code>sin</code></p>",
        "id": 134015586,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537023918
    },
    {
        "content": "<p>Right, but I guess there is a hidden proof that such <code>x</code> exists, not?</p>",
        "id": 134015647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537023986
    },
    {
        "content": "<p>of course</p>",
        "id": 134015653,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537024011
    },
    {
        "content": "<p><code>cos_is_zero: \"∃!x::real. 0 ≤ x ∧ x ≤ 2 ∧ cos x = 0\"</code></p>",
        "id": 134015655,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537024019
    },
    {
        "content": "<p>it uses IVT</p>",
        "id": 134015666,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537024036
    },
    {
        "content": "<p>Right, so we need continuity</p>",
        "id": 134015678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537024073
    },
    {
        "content": "<p>it also uses derivative of <code>cos</code> and that <code>sin 2 &gt; 0</code></p>",
        "id": 134015726,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537024092
    },
    {
        "content": "<p>Ok</p>",
        "id": 134015749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537024189
    },
    {
        "content": "<p>I just pushed a load of stuff to the <code>exp</code> branch of community mathlib. It's about as far as I can go without continuity of <code>exp</code> and I'm not sure what the best approach for that is.</p>",
        "id": 134021725,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537035570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> In metamath we used a very low brow approach to exp (it comes before analysis), which I think worked quite well.</p>\n<ul>\n<li>I assume you already have things like the addition formula and other algebraic stuff on sin and cos.</li>\n<li><code>exp</code> is continuous iff it is continuous at each point. By facts about multiplying functions continuous at a point, you can show that it suffices to prove <code>exp</code> is continuous at zero.</li>\n<li><code>1 + x &lt;= exp x</code> for positive <code>x</code> by taking away the rest of the summands; <code>exp x &lt;= 1/(1-x)</code> by comparing the infinite series of these two. Thus <code>exp</code> is continuous and even differentiable at zero by the sandwich lemma.</li>\n<li>It follows from basic topological ring action that <code>sin</code> is continuous.</li>\n<li><code>pi</code> is the infimum of the positive zeros of the <code>sin</code> function. We need to show this is well defined and a zero of the sin function.</li>\n<li>Suppose <code>a</code> is a zero of <code>sin</code> in the range <code>(2,4)</code>, and <code>b</code> is a positive zero of sin. Show that if <code>pi &lt; a</code> then <code>(pi + a) / 2 &lt;= b</code>, because <code>2*a - b</code> is also a zero of <code>sin</code>.</li>\n<li>By the intermediate value theorem applied to <code>sin</code>, and <code>sin 2 &gt; 0</code> and <code>sin 4 &lt; 0</code>, there is a zero <code>a</code> in this range, and <code>pi</code> exists. if <code>pi &lt; a</code>, then <code>(pi + a) / 2 &lt;= pi</code> by the above lemma, since <code>pi</code> is the infimum of all positive roots of sin. Thus <code>a &lt;= pi</code> and thus <code>pi</code> is the unique zero of sin in this range.</li>\n</ul>",
        "id": 134023255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537039026
    },
    {
        "content": "<p>Can you point me to the sandwich lemma, and the facts about multiplying functions continuous at points? I've never touched anything in the analysis folder before now.</p>",
        "id": 134023510,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537039654
    },
    {
        "content": "<p>For the bounds:</p>\n<ul>\n<li><code>sin 4 = 2 * sin 2 * cos 2</code> is negative because <code>sin 2</code> is positive and <code>cos 2</code> is negative</li>\n<li><code>-7/9 &lt; cos 2 &lt; -1/9</code> because <code>cos 2 = 2 * (cos 1)^2 - 1</code> and <code>1/3 &lt; cos 1 &lt; 2/3</code></li>\n<li><code>sin (2*x)</code> is positive for all <code>0&lt;x&lt;=1</code> because <code>sin x</code> and <code>cos x</code> are</li>\n<li><code>x - x^3/3 &lt; sin x &lt; x</code> and <code>1 - 2/3 * x^2 &lt; cos x &lt; 1 - x^2/3</code> on <code>(0, 1]</code> by infinite series bounds</li>\n</ul>",
        "id": 134023552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537039697
    },
    {
        "content": "<p>I'm not sure we have it, but it should be easy to show over the reals (or whatever generalization best encompasses the reals)</p>",
        "id": 134023609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537039845
    },
    {
        "content": "<p>By the way, metamath used to have a direct proof before analysis was developed, but now continuity of exp follows from differentiability, and continuity uses various topological notions and proofs. I think the definition of <code>exp</code> can be in <code>data.{real,complex}.basic</code>, but <code>pi</code> and other facts that depend on continuity should go in the topological part, at <code>analysis.{real,complex}</code></p>",
        "id": 134023667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537039988
    },
    {
        "content": "<p>Where are the relevant theorems in the lean library? Do we have IVT?</p>",
        "id": 134023818,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537040353
    },
    {
        "content": "<p>I don't think we do. I would want to just prove it over the reals for now</p>",
        "id": 134023917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537040534
    },
    {
        "content": "<p>How do I state continuous at a point?</p>",
        "id": 134024102,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537040997
    },
    {
        "content": "<p>In topology, <code>f : X -&gt; Y</code> is continuous at <code>x</code> if <code>tendsto f (nhds x) (nhds (f x))</code></p>",
        "id": 134024208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537041126
    },
    {
        "content": "<p>And what are the lemmas that let me prove that it's continuous everywhere if it's continuous at 0?</p>",
        "id": 134024352,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537041479
    },
    {
        "content": "<p>I'm not even sure why that's true.</p>",
        "id": 134024397,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537041545
    },
    {
        "content": "<p>I think I already answered that earlier today</p>",
        "id": 134024517,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537041742
    },
    {
        "content": "<p>I think I've worked out vaguely why it's true in maths, but not in lean.</p>",
        "id": 134024523,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537041766
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/topological_structures.lean#L289\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/topological_structures.lean#L289\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/topological_structures.lean#L289</a></p>",
        "id": 134024526,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537041777
    },
    {
        "content": "<p>Importing that and apply it to reals prove that <code>tendsto f (nhds x) (nhds (f x))</code> iff <code>tendsto (lambda h, f (x+h)) (nhds 0) (nhds (f x))</code></p>",
        "id": 134024575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537041844
    },
    {
        "content": "<p>this is a consequence of <code>(\\lam x, x + h)</code> being a homeo</p>",
        "id": 134024581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537041879
    },
    {
        "content": "<p>In case of exp you can rewrite f (x+h) as exp(x)*exp(h), use exp(x) converges (it's constant) and the result at zero</p>",
        "id": 134024583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537041899
    },
    {
        "content": "<p>Is this the correct statement of <code>exp</code> is continuous at x = 0 </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">continuous_exp</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134024634,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537041980
    },
    {
        "content": "<p>yes, hopefully you know <code>exp 0 = 1</code> already by algebraic stuff</p>",
        "id": 134024638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537042003
    },
    {
        "content": "<p>The name is bad, but the statement is ok</p>",
        "id": 134024640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537042018
    },
    {
        "content": "<p>assuming you know exp 0</p>",
        "id": 134024646,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537042027
    },
    {
        "content": "<p>that's true, it should say <code>tendsto_exp_zero</code> or something</p>",
        "id": 134024648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537042045
    },
    {
        "content": "<p>We should probably prove the lemma for general homomorphisms between topological group (continuity at zero implies continuity)</p>",
        "id": 134024700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537042150
    },
    {
        "content": "<p>And this only works for <code>real.exp</code> right?</p>",
        "id": 134024770,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537042320
    },
    {
        "content": "<p>Why?</p>",
        "id": 134024810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537042356
    },
    {
        "content": "<p>Didn't you prove the addition formula for complex numbers?</p>",
        "id": 134024811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537042372
    },
    {
        "content": "<p>Yes, but <code>tendsto_of_tendsto_of_tendsto_of_le_of_le</code> requires a partial order on complexes, unless I'm doing something wrong.</p>",
        "id": 134024860,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537042491
    },
    {
        "content": "<p>Oh, I meant that continuity at zero in C implies continuity everywhere</p>",
        "id": 134024868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537042522
    },
    {
        "content": "<p>The metamath comment says that the key step is <code>abs (exp x - x - 1) &lt;= (abs x) ^ 2 * 3/4</code></p>",
        "id": 134024869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537042527
    },
    {
        "content": "<p>But Mario's idea to prove continuity at zero works in R</p>",
        "id": 134024871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537042544
    },
    {
        "content": "<p>but he seems to have a new idea</p>",
        "id": 134024882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537042554
    },
    {
        "content": "<p>this bound works on complexes too</p>",
        "id": 134024883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537042554
    },
    {
        "content": "<p>it is a special case of the tail bound on exp</p>",
        "id": 134024925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537042571
    },
    {
        "content": "<p><code>abs (sum k = m,...,infty (x ^ n / n!)) &lt;= (abs a)^m * ((m + 1) / (m! * m))</code></p>",
        "id": 134024939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537042673
    },
    {
        "content": "<p>when <code>abs x &lt;= 1</code></p>",
        "id": 134024982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537042722
    },
    {
        "content": "<p>I need to go, sorry</p>",
        "id": 134024988,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537042750
    },
    {
        "content": "<p>How does the bound work on the complexes when they don't have linear order? What's the correct statement? <code>abs ∘ exp</code> is continuous doesn't seem like enough to prove <code>exp</code> is continuous. Bear in mind I know very little about analysis.</p>",
        "id": 134024991,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537042775
    },
    {
        "content": "<p>If I manage to turn my goal into something in terms of functions I recognize, I;m sure I'll be fine, but I just need to work out how to get from <code>nhds</code> to something I recognize.</p>",
        "id": 134025095,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537042962
    },
    {
        "content": "<p>you should go revise M1P1 :P</p>",
        "id": 134025197,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537043164
    },
    {
        "content": "<p>That doesn't mention anything to do with complex numbers.</p>",
        "id": 134025204,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537043212
    },
    {
        "content": "<p>The statement <code>abs (exp x - x - 1) &lt;= (abs x) ^ 2 * 3/4</code> is enough to prove that <code>exp</code> is differentiable at 0</p>",
        "id": 134025251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537043287
    },
    {
        "content": "<p>here <code>x</code> is a complex number</p>",
        "id": 134025253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537043301
    },
    {
        "content": "<p>I could probably manage that.</p>",
        "id": 134025255,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537043335
    },
    {
        "content": "<p>You'll have to help me turn that into anything about continuity.</p>",
        "id": 134025261,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537043356
    },
    {
        "content": "<p>For continuity you could probably just do the zeroth order tail bound, which is <code>abs (exp x - 1) &lt;= (abs x) * 2</code></p>",
        "id": 134025263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537043382
    },
    {
        "content": "<p>is it realistic to develop a general theory of complex power series?</p>",
        "id": 134025306,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537043438
    },
    {
        "content": "<p>maybe, but I'd prefer to defer it</p>",
        "id": 134025308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537043455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> are you currently working on exp?</p>",
        "id": 134088538,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537174250
    },
    {
        "content": "<p>No, and I am doing other things today. I might work on it tomorrow.</p>",
        "id": 134088612,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537174337
    },
    {
        "content": "<p>I made some progress. I proved IVT, though I'm not sure if there is some clever simple proof.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">IVT</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">hz₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hz₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">le_Sup</span> <span class=\"bp\">_</span> <span class=\"n\">hz₁</span> <span class=\"bp\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">Sup_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">hz₂</span> <span class=\"n\">hz₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">eq_of_forall_dist_le</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">ε0</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">hδ0</span><span class=\"o\">,</span> <span class=\"n\">hδ</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">continuous_iff_tendsto</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hf</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">ε</span> <span class=\"n\">ε0</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">le_total</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_of_not_gt</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hfε</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_0_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfε</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">Sup_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">hz₂</span> <span class=\"n\">hz₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n          <span class=\"o\">(</span><span class=\"n\">not_le_of_gt</span> <span class=\"o\">(</span><span class=\"n\">sub_lt_self</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hδ0</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">le_of_not_gt</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hgδ</span><span class=\"o\">,</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n              <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">hfε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub_lt_of_sub_lt</span>\n                <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_abs_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">))))),</span>\n        <span class=\"n\">rw</span> <span class=\"n\">abs_sub</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hδ</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_lt_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">sub_nonpos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">le_Sup</span> <span class=\"bp\">_</span> <span class=\"n\">hz₁</span> <span class=\"n\">hg</span><span class=\"o\">))</span> <span class=\"n\">hδ0</span><span class=\"o\">,</span>\n          <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n        <span class=\"kn\">end</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_of_not_gt</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hfε</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_0_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonpos</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfε</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">le_Sup</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">})</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n            <span class=\"n\">not_le_of_gt</span> <span class=\"o\">((</span><span class=\"n\">lt_add_iff_pos_left</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hδ0</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_sub_iff_add_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_abs_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hδ0</span><span class=\"o\">))]</span><span class=\"bp\">;</span>\n                      <span class=\"n\">exact</span> <span class=\"n\">half_lt_self</span> <span class=\"n\">hδ0</span><span class=\"o\">))))</span>\n                  <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_of_lt</span> <span class=\"n\">hfε</span><span class=\"o\">)),</span>\n                <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_Sup</span> <span class=\"bp\">_</span> <span class=\"n\">hz₁</span> <span class=\"bp\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">((</span><span class=\"n\">lt_add_iff_pos_left</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hδ0</span><span class=\"o\">))),</span>\n                <span class=\"n\">le_of_not_gt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hδy</span><span class=\"o\">,</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"n\">hy</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">sub_neg_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_abs_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hδ</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_lt_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                      <span class=\"n\">sub_lt_iff_lt_add</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">lt_add_of_le_of_pos</span>\n                        <span class=\"o\">((</span><span class=\"n\">Sup_le</span> <span class=\"bp\">_</span> <span class=\"n\">hz₂</span> <span class=\"n\">hz₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">hδ0</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">))))))</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"n\">hz₁</span>\n        <span class=\"kn\">end</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 134117371,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537207930
    },
    {
        "content": "<p>Well done!</p>",
        "id": 134117436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537208021
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I guess you could quite easily change the <code>0</code>s in the statement into a parameter, right?</p>",
        "id": 134117495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537208054
    },
    {
        "content": "<p>Hmm, but you are use <code>half_pos</code> and things like that.</p>",
        "id": 134117550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537208135
    },
    {
        "content": "<p>So maybe you should just leave this like it is.</p>",
        "id": 134117558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537208146
    },
    {
        "content": "<p>I can deduce the general statement from this quite easily I imagine.</p>",
        "id": 134117956,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537208529
    },
    {
        "content": "<p>Yes, agreed.</p>",
        "id": 134117967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537208542
    },
    {
        "content": "<p>The more important generalisation is that it only needs to be continuous on the interval.</p>",
        "id": 134117976,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537208560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> how much topology do you know?</p>",
        "id": 134118217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537208793
    },
    {
        "content": "<p>More or less none.</p>",
        "id": 134118244,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537208841
    },
    {
        "content": "<p>if x&lt;y and f(x)&lt;0 and f(y)&gt;0, then {t | f(t) &lt; 0} and {t | f(t) &gt; 0} are two disjoint open subsets of [x,y]. Since [x,y] is connected, the union of those two sets can't be the entirety of [x,y], so there must be something not belonging to those two sets, i.e. t such that f(t) = 0</p>",
        "id": 134118305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537208893
    },
    {
        "content": "<p>Do we know that intervals are connected?</p>",
        "id": 134118524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537209120
    },
    {
        "content": "<p>Does Lean even know what an interval is?</p>",
        "id": 134118620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537209173
    },
    {
        "content": "<p>I don't think we have connectedness yet</p>",
        "id": 134118624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537209178
    },
    {
        "content": "<p>We do have intervals though and Lean knows closed ones are compact</p>",
        "id": 134118642,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537209200
    },
    {
        "content": "<p>Basically it's a similar proof to the one above I think, except the set {a | f a &lt;= 0 ...} is now called U</p>",
        "id": 134118740,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537209268
    },
    {
        "content": "<p>right, we know they're compact but not that they're connected...?</p>",
        "id": 134118868,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537209409
    },
    {
        "content": "<p>right, the meat of this proof is showing that R is connected</p>",
        "id": 134119204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537209749
    },
    {
        "content": "<p>I think you can pretty trivially generalize the assumption to <code>∀ x, a &lt; x → x &lt; b → tendsto f (nhds x) (nhds (f x))</code></p>",
        "id": 134119343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537209893
    },
    {
        "content": "<p>If you prefer, you can prove the version assuming <code>continuous f</code> as a corollary</p>",
        "id": 134119442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537209969
    },
    {
        "content": "<p>other than that, I think this is fine for the first cut</p>",
        "id": 134119455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537209987
    },
    {
        "content": "<p>I almost generalized it to <code>∀ x, a &lt; x → x &lt; b → tendsto f (nhds x) (nhds (f x))</code>. I have <code>lt</code> instead of <code>le</code>. Generalizing it to <code>lt</code> seems to add quite a bit of complication.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">IVT</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hxy</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span> <span class=\"bp\">∧</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">Sup</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"k\">in</span>\n<span class=\"k\">have</span> <span class=\"n\">hz₁</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hz₂</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hxz</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_Sup</span> <span class=\"bp\">_</span> <span class=\"n\">hz₁</span> <span class=\"bp\">⟨</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hxy</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hzy</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">Sup_le</span> <span class=\"bp\">_</span> <span class=\"n\">hz₂</span> <span class=\"n\">hz₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n<span class=\"bp\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hxz</span><span class=\"o\">,</span> <span class=\"n\">hzy</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_of_forall_dist_le</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">ε0</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">hδ0</span><span class=\"o\">,</span> <span class=\"n\">hδ</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"bp\">_</span> <span class=\"n\">hxz</span> <span class=\"n\">hzy</span><span class=\"o\">)</span> <span class=\"n\">ε</span> <span class=\"n\">ε0</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">le_total</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_of_not_gt</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hfε</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_0_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfε</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">Sup_le</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"n\">hz₂</span> <span class=\"n\">hz₁</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n          <span class=\"o\">(</span><span class=\"n\">not_le_of_gt</span> <span class=\"o\">(</span><span class=\"n\">sub_lt_self</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hδ0</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">le_of_not_gt</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hgδ</span><span class=\"o\">,</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"n\">hg</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n              <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">hfε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub_lt_of_sub_lt</span>\n                <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_abs_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">))))),</span>\n        <span class=\"n\">rw</span> <span class=\"n\">abs_sub</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hδ</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_lt_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">sub_nonpos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">le_Sup</span> <span class=\"bp\">_</span> <span class=\"n\">hz₁</span> <span class=\"n\">hg</span><span class=\"o\">))</span> <span class=\"n\">hδ0</span><span class=\"o\">,</span>\n          <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">linarith</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n        <span class=\"kn\">end</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_of_not_gt</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">hfε</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_0_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonpos</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hfε</span><span class=\"o\">,</span>\n        <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"n\">le_Sup</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">})</span>\n          <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n            <span class=\"n\">not_le_of_gt</span> <span class=\"o\">((</span><span class=\"n\">lt_add_iff_pos_left</span> <span class=\"n\">z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hδ0</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_sub_iff_add_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_abs_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">hδ</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hδ0</span><span class=\"o\">))]</span><span class=\"bp\">;</span>\n                      <span class=\"n\">exact</span> <span class=\"n\">half_lt_self</span> <span class=\"n\">hδ0</span><span class=\"o\">))))</span>\n                  <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_of_lt</span> <span class=\"n\">hfε</span><span class=\"o\">)),</span>\n                <span class=\"n\">le_trans</span> <span class=\"n\">hxz</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">((</span><span class=\"n\">lt_add_iff_pos_left</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">hδ0</span><span class=\"o\">))),</span>\n                <span class=\"n\">le_of_not_gt</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hδy</span><span class=\"o\">,</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"n\">hy</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">sub_neg_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_abs_self</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">hδ</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_lt_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">z</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">linarith</span><span class=\"o\">,</span>\n                      <span class=\"n\">sub_lt_iff_lt_add</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">add_comm</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">lt_add_of_le_of_pos</span>\n                        <span class=\"n\">hzy</span> <span class=\"n\">hδ0</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">))))))</span><span class=\"bp\">⟩</span><span class=\"o\">))</span> <span class=\"n\">hz₁</span>\n        <span class=\"kn\">end</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 134120625,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537211238
    },
    {
        "content": "<p>In fact generalizing to <code>lt</code> makes the statement false I think.</p>",
        "id": 134120816,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537211445
    },
    {
        "content": "<p>Right, you need the closed interval.</p>",
        "id": 134120937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537211576
    },
    {
        "content": "<p>ah yes, you're right. In order to properly say \"continuous on [a, b]\" you would need <code>tendsto f (nhds a ⊓ principal (Icc a b)) (nhds (f a))</code></p>",
        "id": 134121041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537211696
    },
    {
        "content": "<p>What does that mean, and how is it different from my assumption?</p>",
        "id": 134121162,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537211856
    },
    {
        "content": "<p>Is it weaker or stronger than my assumption?</p>",
        "id": 134121414,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537212145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> you know about left/right-continuity at a point?</p>",
        "id": 134121530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537212292
    },
    {
        "content": "<p>My predicate says that <code>f</code> restricted to <code>[a, b]</code> is continuous</p>",
        "id": 134121551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537212337
    },
    {
        "content": "<p>so it might have discontinuity at a or b from outside the interval</p>",
        "id": 134121563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537212358
    },
    {
        "content": "<p>I see.</p>",
        "id": 134121604,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537212367
    },
    {
        "content": "<p>Eg: <code>f x = if x \\in [a,b] then 0 else 1</code></p>",
        "id": 134121609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537212388
    },
    {
        "content": "<p>But you should be able to extend any continuous function on [a,b] to one continuous in your sense anyway, so I wouldn't make a big deal about it</p>",
        "id": 134121627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537212416
    },
    {
        "content": "<p>I managed to prove this today. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">exp_continuous_aux</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>It's <code>5 / 6</code> instead of <code>3/4</code>, is that going to be a problem? I'm not sure where my extra <code>1/12</code> went</p>",
        "id": 134256188,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537377973
    },
    {
        "content": "<p>I suppose it depends on whether I can still prove the cos inequalities</p>",
        "id": 134256238,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537378062
    },
    {
        "content": "<p>that's weird, how did you prove it?</p>",
        "id": 134256650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537378507
    },
    {
        "content": "<p>I don't think we need any particular bound for this part, that's enough for continuity of course</p>",
        "id": 134256727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537378574
    },
    {
        "content": "<p>This is my proof. I think the lost information is probably in the step<br>\n<code>sum (range (j - 3)) (λ m, 1 / (m + 3).fact) ≤ sum (range (j - 3)) (λ m, 1 / 6 * (1 / 2) ^ m)</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">exp_continuous_aux</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">onesubhalf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">abshalf</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"n\">abs</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">of_real_div</span><span class=\"o\">,</span> <span class=\"n\">of_real_bit0</span><span class=\"o\">,</span> <span class=\"n\">of_real_inv</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_of_nonneg</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">lim_const</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">exp</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">lim_const</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"err\">←</span> <span class=\"n\">lim_neg</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">lim_neg</span><span class=\"o\">,</span> <span class=\"n\">lim_add</span><span class=\"o\">,</span> <span class=\"n\">lim_add</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">lim_abs</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">lim_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">cau_seq</span><span class=\"bp\">.</span><span class=\"n\">le_of_exists</span> <span class=\"bp\">⟨</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)),</span>\n  <span class=\"n\">exact</span> <span class=\"k\">calc</span> <span class=\"n\">abs</span> <span class=\"o\">((</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"k\">by</span> <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_succ_le</span> <span class=\"n\">hj</span><span class=\"o\">),</span> <span class=\"n\">sum_range_succ&#39;</span><span class=\"o\">,</span> <span class=\"n\">sum_range_succ&#39;</span><span class=\"o\">]}</span><span class=\"bp\">;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_sum</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">abs_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">by</span> <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_sub</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">sum_range_succ&#39;</span><span class=\"o\">]</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">,</span> <span class=\"n\">bit0</span><span class=\"o\">]</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_left</span>\n    <span class=\"o\">(</span><span class=\"k\">calc</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n          <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n        <span class=\"n\">abs_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n        <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">abshalf</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n        <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">abv_sum_le_sum_abv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n        <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">sum_le_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n          <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">is_absolute_value</span><span class=\"bp\">.</span><span class=\"n\">abv_pow</span> <span class=\"n\">abs</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">of_real_nat_cast</span><span class=\"o\">,</span>\n            <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">)]</span><span class=\"bp\">;</span>\n          <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">div_le_div_right</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_pos</span> <span class=\"bp\">_</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n            <span class=\"o\">(</span><span class=\"n\">pow_le_one</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">)))</span> <span class=\"bp\">_</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n        <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">sum_le_sum</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n          <span class=\"n\">clear</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n          <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n          <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_succ&#39;</span><span class=\"o\">,</span> <span class=\"n\">one_div_eq_inv</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_inv&#39;</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)],</span>\n            <span class=\"n\">refine</span> <span class=\"n\">mul_le_mul</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">inv_eq_one_div</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n              <span class=\"o\">(</span><span class=\"n\">inv_nonneg</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"n\">mul_nonneg</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pow_nonneg</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n            <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_div_eq_inv</span><span class=\"o\">],</span>\n            <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">inv_le_inv</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_pos</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_pos</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n              <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_two</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">dec_trivial</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n        <span class=\"kn\">end</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n        <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_sum</span><span class=\"o\">,</span> <span class=\"n\">geo_series_eq</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">norm_num</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span>\n        <span class=\"n\">add_le_add_right</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span> <span class=\"o\">((</span><span class=\"n\">div_le_div_right</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n          <span class=\"o\">(</span><span class=\"n\">sub_le_self</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">pow_nonneg</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span> <span class=\"bp\">_</span>\n      <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">pow_two_nonneg</span> <span class=\"o\">(</span><span class=\"n\">abs</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134256880,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537378762
    },
    {
        "content": "<p>Oh, you really did the case n=1 directly</p>",
        "id": 134256944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537378816
    },
    {
        "content": "<p>I was thinking you would just prove the general case, there is less stuff floating around that way</p>",
        "id": 134256959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537378843
    },
    {
        "content": "<p>well, it's done now, we can revisit later</p>",
        "id": 134256986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537378892
    },
    {
        "content": "<p>Not sure what the general case is.</p>",
        "id": 134256999,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537378905
    },
    {
        "content": "<blockquote>\n<p><code>abs (sum k = m,...,infty (x ^ n / n!)) &lt;= (abs a)^m * ((m + 1) / (m! * m))</code></p>\n</blockquote>",
        "id": 134257011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537378920
    },
    {
        "content": "<p>You can also write <code>exp x - finset.sum ...</code> instead of that tail sum if you prefer</p>",
        "id": 134257073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537378954
    },
    {
        "content": "<p>That makes way more sense.</p>",
        "id": 134257083,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537378970
    },
    {
        "content": "<p>By the way, how hard is it to get log once we have exp? Specifically how hard is it to show that every nonzero complex number is in the range of exp?</p>",
        "id": 134257611,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537379437
    },
    {
        "content": "<p>This comes fairly late in the development.</p>\n<ul>\n<li>First you do the real log function. exp is easily seen to be increasing so you get an inverse by IVT. I can expand on this</li>\n<li><code>sin</code> is a bijection from [-pi/2, pi/2] to [-1, 1]. Again, this has subparts</li>\n<li>Injectivity of <code>exp</code>: <code>exp x = 1</code> iff <code>x = 2*pi*i*n</code> for some <code>n</code></li>\n<li>The complex square root function exists. You can define it as <code>sqrt z = sqrt (abs z) * ((abs z + z) / abs (abs z + z))</code> off the negative real axis</li>\n<li>If <code>D</code> is an interval of length 2pi, and <code>y : D</code> is chosen to be a multiple of 2 pi from <code>2 * arcsin (im (sqrt z))</code>, then <code>z = exp (I * y)</code>, which shows surjectivity of the imaginary part</li>\n<li>By combining surjectivity on real and imaginary parts and injectivity, you get that <code>exp</code> is bijective in any domain of the form <code>{z | z.im \\in D}</code></li>\n</ul>",
        "id": 134258931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537380792
    },
    {
        "content": "<p>How do you get the bounds on cosine?</p>",
        "id": 134264128,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537386011
    },
    {
        "content": "<p>specifically <code>1/3 &lt; cos 1 &lt; 2 / 3</code> the fact that <code>exp x - x - 1 \\le abs x ^ 2 * 3 / 4</code> is only good enough for <code>1/4 \\le cos 1 \\le 7 / 4</code></p>",
        "id": 134264158,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537386096
    },
    {
        "content": "<p>do you need bounds on sine 1 and use cos^2 + sin^2 = 1</p>",
        "id": 134264219,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537386168
    },
    {
        "content": "<p>The claim is that <code>abs (cos x - (1 - x^2 / 2)) &lt; x^2 / 6</code> for <code>x \\in (0, 1]</code>. By the <code>m=4</code> case of the tail bound on exp, <code>cos x - (1 - x^2 / 2) = re (exp4 (I*x)) &lt;= abs (exp4 (I*x)) &lt;= x^4 * ((4 + 1) / (4! * 4)) &lt; x^4 / 6 &lt;= x^2 / 6</code>, where <code>exp4</code> is the tail of <code>exp</code> starting at 4.</p>",
        "id": 134265225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537387422
    },
    {
        "content": "<p>(sorry! looks like you do need more of the tail bound)</p>",
        "id": 134265277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537387449
    },
    {
        "content": "<p>in metamath, each inequality there is a sublemma (or instance of a lemma), probably don't pack it all together since it is independently useful</p>",
        "id": 134265313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537387525
    },
    {
        "content": "<p>Major progress. The following have now been proved. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how do I get continuous exp from the first one?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">exp_bound</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">cos_one_bound</span> <span class=\"o\">:</span> <span class=\"n\">abs&#39;</span> <span class=\"o\">(</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">18</span>\n</pre></div>",
        "id": 134308558,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537449472
    },
    {
        "content": "<p>you might want to specialize the <code>n</code> first if you want to prove continuity</p>",
        "id": 134308648,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537449552
    },
    {
        "content": "<p>and you want to prove continuity at 0 first</p>",
        "id": 134308663,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537449591
    },
    {
        "content": "<p>(since exp(y)-exp(x) = exp(x) [exp(y-x)-1])</p>",
        "id": 134308717,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537449613
    },
    {
        "content": "<p>As I mentioned, if you take <code>n = 1</code> then you have <code>abs (exp x - 1) &lt;= abs x</code></p>",
        "id": 134308725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537449621
    },
    {
        "content": "<p>so combining our statements, <code>|exp(y)-exp(x)| &lt;= exp(x) |y-x|</code></p>",
        "id": 134308769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537449654
    },
    {
        "content": "<p>so set <code>delta = epsilon/exp(x)</code></p>",
        "id": 134308802,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537449691
    },
    {
        "content": "<p>wait, isn't the bound off by one? the claim was about <code>sum m=n ... infty (x^m/m!)</code> which should be <code>abs (exp x - (range n).sum (λ m, x ^ m / m.fact))</code></p>",
        "id": 134308914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537449774
    },
    {
        "content": "<p>the RHS looks right</p>",
        "id": 134308960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537449839
    },
    {
        "content": "<p>well n=1 gives <code>|exp(x)-1-x| &lt;= |x|^2</code></p>",
        "id": 134309088,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537449940
    },
    {
        "content": "<p>I guess the order is right, the constant is a bit off</p>",
        "id": 134309323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450153
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma exp_bound {x : ℂ} (hx : abs x ≤ 1) {n : ℕ} (hn : 0 &lt; n) :\n  abs (exp x - (range n).sum (λ m, x ^ m / m.fact)) ≤ abs x ^ n * (n.succ / (n.fact * n)) := sorry\n</pre></div>",
        "id": 134309338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537450177
    },
    {
        "content": "<p>Does it matter? We have everything we need for pi</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">cos_one_le</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">9</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">18</span> <span class=\"o\">:</span> <span class=\"n\">sub_le_iff_le_add</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_le_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">cos_one_bound</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">9</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">le_cos_one</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"mi\">9</span> <span class=\"bp\">≤</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"mi\">9</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">18</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">sub_le_of_sub_le</span> <span class=\"o\">(</span><span class=\"n\">abs_sub_le_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">cos_one_bound</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">cos_two_le</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"mi\">31</span> <span class=\"bp\">/</span> <span class=\"mi\">81</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bit0</span><span class=\"o\">])</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">cos_two_mul</span> <span class=\"mi\">1</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"bp\">/</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:</span>\n  <span class=\"n\">sub_le_sub_right</span> <span class=\"o\">(</span><span class=\"n\">mul_le_mul_of_nonneg_left</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n    <span class=\"n\">mul_self_le_mul_self</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">le_cos_one</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">))</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">31</span> <span class=\"bp\">/</span> <span class=\"mi\">81</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n</pre></div>",
        "id": 134312362,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537453209
    },
    {
        "content": "<p>Wonderful! Can you get pi before tomorrow then?</p>",
        "id": 134312866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537453685
    },
    {
        "content": "<p>If someone tells me how to turn my inequalities about exp into a proof of continuity. I don't know what the lemma is.</p>",
        "id": 134312999,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537453806
    },
    {
        "content": "<p>Did you push everything?</p>",
        "id": 134313023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537453835
    },
    {
        "content": "<p>Doesn't seem so</p>",
        "id": 134313051,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537453866
    },
    {
        "content": "<p>Not yet</p>",
        "id": 134313053,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537453866
    },
    {
        "content": "<p>It would be easier to see what inequalities you have</p>",
        "id": 134313077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537453888
    },
    {
        "content": "<p>Just pushing now</p>",
        "id": 134313314,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537454109
    },
    {
        "content": "<p>Do we know that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">C</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> is a normed group?</p>",
        "id": 134313328,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537454126
    },
    {
        "content": "<p>I guess it would be quite easy to add. Then you should be able to use <code>tendsto_iff_norm_tendsto_zero</code> and <code>tendsto_of_tendsto_of_tendsto_of_le_of_le</code> somehow</p>",
        "id": 134313791,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537454578
    },
    {
        "content": "<p>or maybe even <code>squeeze_zero</code></p>",
        "id": 134313820,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537454622
    },
    {
        "content": "<p>There should be a theorem about continuity on metric spaces</p>",
        "id": 134313883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537454658
    },
    {
        "content": "<p><code>continuous_of_metric</code></p>",
        "id": 134313917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537454698
    },
    {
        "content": "<p>oh wait, you just want continuity at zero, that is <code>tendsto_nhds_of_metric</code></p>",
        "id": 134313943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537454729
    },
    {
        "content": "<p>just rewrite <code>dist 0 x</code> to <code>abs x</code> and you should be set with a straight epsilon delta proof</p>",
        "id": 134314004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537454769
    },
    {
        "content": "<p>You shouldn't make your constants too precise, it makes the proof harder for norm_num and the gain is not that great. In particular you should weaken the second theorem to <code>cos 2 &lt; 0</code></p>",
        "id": 134314065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537454864
    },
    {
        "content": "<p>So I have <code>lemma tendsto_exp_zero_one : tendsto exp (nhds 0) (nhds 1) :=</code></p>",
        "id": 134327309,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537468005
    },
    {
        "content": "<p>How do I get continuity?</p>",
        "id": 134327314,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537468012
    },
    {
        "content": "<p>note that exp(x+h) = exp(x) exp(h)</p>",
        "id": 134327360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537468061
    },
    {
        "content": "<p>do we know that C is a topological ring?</p>",
        "id": 134327365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537468064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> yes</p>",
        "id": 134327446,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537468109
    },
    {
        "content": "<p><code>\\forall x, tendsto (\\lambda h, exp x * exp h) (nhds 0) (nhds (exp x * 1))</code></p>",
        "id": 134327484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537468147
    },
    {
        "content": "<p><code>\\forall x, tendsto (\\lambda h, exp (x+h)) (nhds 0) (nhds (exp x))</code></p>",
        "id": 134327497,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537468160
    },
    {
        "content": "<p><code>\\forall x, tendsto exp (nhds x) (nhds (exp x))</code></p>",
        "id": 134327515,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537468181
    },
    {
        "content": "<p>What lemmas are you applying Kenny?</p>",
        "id": 134327544,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537468203
    },
    {
        "content": "<p>Ah, found it: <code>continuous_mul</code> is what you want</p>",
        "id": 134327620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537468251
    },
    {
        "content": "<p>to deduce the first of Kenny's statements</p>",
        "id": 134327646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537468277
    },
    {
        "content": "<p>wait no, <code>tendsto_mul</code></p>",
        "id": 134327667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537468310
    },
    {
        "content": "<p>the second one is easy/algebraic, and the third is that lemma that Patrick mentioned</p>",
        "id": 134327741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537468351
    },
    {
        "content": "<p>Alternatively you could just use continuity of subtraction to avoid mentioning homeos</p>",
        "id": 134327920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537468526
    },
    {
        "content": "<p>from 2 to 3 can be easily done with epsilon-delta</p>",
        "id": 134327987,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537468569
    },
    {
        "content": "<p>would not recommend epsilon-delta to deduce 1</p>",
        "id": 134327994,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537468579
    },
    {
        "content": "<p>don't listen to kenny, you are done with epsilons now</p>",
        "id": 134328003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537468594
    },
    {
        "content": "<p>we're in the post-epsilon stage of maths, right</p>",
        "id": 134328021,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537468619
    },
    {
        "content": "<p>if you know <code>tendsto (\\lambda h, exp (x+h)) (nhds 0) (nhds (exp x))</code> then if you compose with <code>(\\lambda y, y - x)</code> which is continuous then you get <code>tendsto (\\lambda y, exp (x+(y - x))) (nhds x) (nhds (exp x))</code></p>",
        "id": 134328141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537468715
    },
    {
        "content": "<p>My goal is <code>tendsto (λ (x_1 : ℂ), exp x) (nhds 0) (nhds 1)</code> I try <code>apply tendsto_exp_zero_one</code>, which looks like this <code>tendsto_exp_zero_one : tendsto (λ x : ℂ, exp x) (nhds (0 : ℂ)) (nhds (1 : ℂ))</code> and it hangs.</p>",
        "id": 134328347,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537468880
    },
    {
        "content": "<p>use exact</p>",
        "id": 134328427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537468931
    },
    {
        "content": "<p>apply will go crazy unfolding pis because of a bug</p>",
        "id": 134328505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537469008
    },
    {
        "content": "<p><code>exact this</code> fails</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">complex</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">complex</span><span class=\"o\">),</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nhds</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nhds</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"o\">))</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">complex</span><span class=\"o\">),</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exp</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nhds</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nhds</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">to_uniform_space&#39;</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_one</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">complex</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">has_one</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 134328583,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537469061
    },
    {
        "content": "<p>I see the problem.</p>",
        "id": 134328600,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537469076
    },
    {
        "content": "<p>Silly me</p>",
        "id": 134328612,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537469089
    },
    {
        "content": "<p>is that sarcasm? because I don't</p>",
        "id": 134328653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537469143
    },
    {
        "content": "<p><code>x_1</code> instead of <code>x</code> on first line</p>",
        "id": 134328719,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537469191
    },
    {
        "content": "<p>by the way, <code>convert</code> is a nice way to diagnose these bugs</p>",
        "id": 134328864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537469363
    },
    {
        "content": "<p>What's the lemma I use for composing with sub</p>",
        "id": 134329021,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537469501
    },
    {
        "content": "<p><code>tends.comp</code> d'oh</p>",
        "id": 134329079,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537469528
    },
    {
        "content": "<p>This must be easy surely</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134330094,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537470418
    },
    {
        "content": "<p>by the way I suggest you do all your compositions at the start, getting something like <code>tendsto (\\lam y, exp x * exp (y - x)) (nhds x) (nhds (exp x * exp (x - x)))</code></p>",
        "id": 134330122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537470443
    },
    {
        "content": "<p>I worked that bit out. Do I have to use <code>tendsto_sub</code> and the identity and constant functions?</p>",
        "id": 134330209,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537470508
    },
    {
        "content": "<p>yes</p>",
        "id": 134330229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537470532
    },
    {
        "content": "<p>that's the easiest way, at least</p>",
        "id": 134330252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537470551
    },
    {
        "content": "<p>exp is continuous is now a fact.</p>",
        "id": 134331002,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537471228
    },
    {
        "content": "<p>how much time do we still have?</p>",
        "id": 134331114,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537471345
    },
    {
        "content": "<p>Here it's 9:27pm</p>",
        "id": 134331370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537471672
    },
    {
        "content": "<p>So 8:27pm in London</p>",
        "id": 134331423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537471696
    },
    {
        "content": "<p>So we have 12 hours</p>",
        "id": 134331429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537471710
    },
    {
        "content": "<p>roughly</p>",
        "id": 134331434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537471716
    },
    {
        "content": "<p>Who's going to tell Kevin tomorrow? <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?</p>",
        "id": 134331458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537471746
    },
    {
        "content": "<p>How do you prove <code>continuous real.sin</code> from <code>continuous complex.sin</code>?</p>",
        "id": 134332215,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537472604
    },
    {
        "content": "<p>continuity of real part</p>",
        "id": 134332221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537472616
    },
    {
        "content": "<p>and continuity of real injection</p>",
        "id": 134332228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537472637
    },
    {
        "content": "<p>How did you define <code>real.sin</code>?</p>",
        "id": 134332274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537472663
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/4c670fc338c3e6cdff8c1f01e03f1279fd3926bd/data/complex/exponential.lean#L349\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/4c670fc338c3e6cdff8c1f01e03f1279fd3926bd/data/complex/exponential.lean#L349\">https://github.com/leanprover-community/mathlib/blob/4c670fc338c3e6cdff8c1f01e03f1279fd3926bd/data/complex/exponential.lean#L349</a></p>",
        "id": 134332761,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537473169
    },
    {
        "content": "<p>(complex.sin x).re</p>",
        "id": 134332776,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537473176
    },
    {
        "content": "<p>So continuity should indeed follow as Mario wrote</p>",
        "id": 134332789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537473202
    },
    {
        "content": "<p>I couldn't find <code>continuous_re</code></p>",
        "id": 134332800,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537473215
    },
    {
        "content": "<p>Do you want us to prove it, or did you do it already?</p>",
        "id": 134332815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537473242
    },
    {
        "content": "<p>I think there is a theorem that <code>re</code> is a contracting map, which is enough to prove continuity</p>",
        "id": 134333423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537473811
    },
    {
        "content": "<p><code>abs_re_le_abs</code></p>",
        "id": 134333500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537473892
    },
    {
        "content": "<p>I managed to work it out. I thought there was some simple proof without deltas, but deltas is really short anyway.</p>",
        "id": 134334686,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537475098
    },
    {
        "content": "<p>How far are you from pi then?</p>",
        "id": 134334711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537475123
    },
    {
        "content": "<p>More or less there. Just have to apply IVT which I have already proved.</p>",
        "id": 134334779,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537475170
    },
    {
        "content": "<p>So, who's writing to Kevin tomorrow?</p>",
        "id": 134334986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537475376
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">pi</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">exists_cos_eq_zero</span>\n</pre></div>",
        "id": 134335942,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537476376
    },
    {
        "content": "<p>then pi can be 3*3.14...?</p>",
        "id": 134336002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537476437
    },
    {
        "content": "<p>have you proven that <code>cos (pi/2) = 0</code>?</p>",
        "id": 134336024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537476456
    },
    {
        "content": "<p><code>lemma exists_cos_eq_zero : ∃ x, 1 ≤ x ∧ x ≤ 2 ∧ cos x = 0 </code> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 134336148,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537476544
    },
    {
        "content": "<p>fair enough</p>",
        "id": 134336153,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537476553
    },
    {
        "content": "<p>also <code>sin (pi/2) = 1</code></p>",
        "id": 134336162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537476563
    },
    {
        "content": "<p>the rest should be easy</p>",
        "id": 134336172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537476569
    },
    {
        "content": "<p>well sin(pi/2)=1 implies cos(pi/2)=0...</p>",
        "id": 134336183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537476586
    },
    {
        "content": "<p>but it looks like he proved <code>cos (pi/2) = 0</code>, which only implies <code>sin(pi/2) = +- 1</code></p>",
        "id": 134336248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537476617
    },
    {
        "content": "<p>Metamath uses the lemma that <code>sin x &gt; 0</code> on <code>(0, 2]</code> by double angle formulas on what you already have</p>",
        "id": 134336301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537476681
    },
    {
        "content": "<p>I'm sure that's all quite easily doable.</p>",
        "id": 134336386,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537476764
    },
    {
        "content": "<p>yes, it's mostly smooth sailing at this point</p>",
        "id": 134336400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537476783
    },
    {
        "content": "<p>I pushed.</p>",
        "id": 134336439,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537476831
    },
    {
        "content": "<p>I'm afraid it's now 05:03 AM in Hong Kong and I must leave now...</p>",
        "id": 134337086,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537477443
    },
    {
        "content": "<p>although I will wake up 4 hours later</p>",
        "id": 134337111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537477460
    },
    {
        "content": "<p>ooh, you are 12 hours away from me</p>",
        "id": 134337124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537477488
    },
    {
        "content": "<p>I've been 50 for about 10 minutes</p>",
        "id": 134343929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485036
    },
    {
        "content": "<p>Happy Birthday!</p>",
        "id": 134343951,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537485071
    },
    {
        "content": "<p>Holey Moley we have pi!</p>",
        "id": 134343958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485089
    },
    {
        "content": "<p>I am so happy!</p>",
        "id": 134343964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485096
    },
    {
        "content": "<p>I need to go to bed!</p>",
        "id": 134344081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485221
    }
]