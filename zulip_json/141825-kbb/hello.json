[
    {
        "content": "<p>Welcome to <a class=\"stream\" data-stream-id=\"141825\" href=\"/#narrow/stream/141825-kbb\">#kbb</a>.</p>",
        "id": 133758184,
        "sender_full_name": "Welcome Bot",
        "timestamp": 1536697600
    },
    {
        "content": "<p>This is a test: can anyone hear me?</p>",
        "id": 133758292,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536697684
    },
    {
        "content": "<p>Yes</p>",
        "id": 133758301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536697688
    },
    {
        "content": "<p>Does anyone has another Zulip account and could check what is visible?</p>",
        "id": 133758347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536697734
    },
    {
        "content": "<p>I thought about this, but I'm not sure whether the stream would be visible to external people. Yeah</p>",
        "id": 133758350,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536697739
    },
    {
        "content": "<p>Or, just remove me temporarily.</p>",
        "id": 133758362,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536697746
    },
    {
        "content": "<p>Funnily, I don't seem to be allowed to do that</p>",
        "id": 133758428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536697794
    },
    {
        "content": "<p>I see you</p>",
        "id": 133758563,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536697908
    },
    {
        "content": "<p>I'm creating another account</p>",
        "id": 133758631,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536697935
    },
    {
        "content": "<p>Also: this is a great idea</p>",
        "id": 133758642,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536697943
    },
    {
        "content": "<p>Did you need the help of an administrator to create this stream?</p>",
        "id": 133758677,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536697984
    },
    {
        "content": "<p>No</p>",
        "id": 133758727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698028
    },
    {
        "content": "<p>I think this stream is safe</p>",
        "id": 133758783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698049
    },
    {
        "content": "<p>The point is that group PM is not suitable for what we were doing. That generates too many notifications</p>",
        "id": 133758814,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698092
    },
    {
        "content": "<p>Amen</p>",
        "id": 133758822,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1536698105
    },
    {
        "content": "<p>Reid, do you see things here?</p>",
        "id": 133758908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698173
    },
    {
        "content": "<p>Reid should be back in</p>",
        "id": 133758983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698277
    },
    {
        "content": "<p>Yep, I am now.</p>",
        "id": 133759031,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536698289
    },
    {
        "content": "<p>And should see the full history, which is another advantage compared to group PM</p>",
        "id": 133759034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698296
    },
    {
        "content": "<p>Indeed I can</p>",
        "id": 133759035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1536698301
    },
    {
        "content": "<p>(this was an option when creating the stream)</p>",
        "id": 133759037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698306
    },
    {
        "content": "<p>Ok, let's stop using the group PM and its endless series of emails and notification popups</p>",
        "id": 133759059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698343
    },
    {
        "content": "<blockquote>\n<p>Did you need the help of an administrator to create this stream?</p>\n</blockquote>\n<p>No</p>",
        "id": 133759082,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698369
    },
    {
        "content": "<p>What's the story of <code>fast_matrix</code>? Is it fast to compute because it uses <code>vector</code>? Or is it only fast to type because of the notation?</p>",
        "id": 133759203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536698491
    },
    {
        "content": "<blockquote>\n<p>What's the story of <code>fast_matrix</code>? Is it fast to compute because it uses <code>vector</code>? Or is it only fast to type because of the notation?</p>\n</blockquote>\n<p>Shouldn't this go into a new thread <span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 133773618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536718938
    },
    {
        "content": "<p>To answer your question: <code>fast_matrix</code> is now obsolete, since <span class=\"user-mention\" data-user-id=\"120536\">@Jack Crawford</span> pushed an implementation that is a lot more fleshed out. His implementation is both supposed to be faster to compute with and easier to type. You can use the equation compiler to grab the <code>a b c d</code> out of a <code>2x2</code> matrix, which makes for readable definitions.</p>",
        "id": 133773678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536719096
    },
    {
        "content": "<p>Also: very good idea to create a private stream. I didn't know this was possible. We should have done that 1 week ago.</p>",
        "id": 133773689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536719132
    },
    {
        "content": "<p>The cool side effect is that we can give Kevin access, and he can read through the history of all of our discussions <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 133773735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536719178
    },
    {
        "content": "<p>ok so we have 4 days left</p>",
        "id": 134046203,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537087711
    },
    {
        "content": "<p>can we come up with a realistic list of goals</p>",
        "id": 134046204,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537087721
    },
    {
        "content": "<p>or a list of realistic goals?</p>",
        "id": 134046205,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537087724
    },
    {
        "content": "<p>Mario, do you see anything in this repo that could hope to get into mathlib?</p>",
        "id": 134059705,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537114089
    },
    {
        "content": "<p>Like I said, I'll be gone on Wednesday, so I can only contribute today and tomorrow.</p>",
        "id": 134078972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537157004
    },
    {
        "content": "<p>I think either: we start cleaning up; or we focus on the Hecke operator (on the complex vector space (=module <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span>) of modular forms.</p>",
        "id": 134079018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537157065
    },
    {
        "content": "<p>This second option will probably force us to clean up other stuff as well.</p>",
        "id": 134079020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537157079
    },
    {
        "content": "<p>Otoh, we could also leave the modular form part of the repo as it is.</p>",
        "id": 134079029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537157114
    },
    {
        "content": "<p>And then we could focus all our time on <code>exp</code> and friends.</p>",
        "id": 134079032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537157129
    },
    {
        "content": "<p><span class=\"emoji emoji-1f514\" title=\"bell\">:bell:</span> We have 99 commits in the <code>kbb</code> repository! Well done to everyone who contributed!</p>",
        "id": 134148818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537252880
    },
    {
        "content": "<p>What's the status of the Hecke operator file? I don't even understand the maths here. What is the meaning of the first displayed formula at <a href=\"https://en.wikipedia.org/wiki/Hecke_operator#Explicit_formula\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Hecke_operator#Explicit_formula\">https://en.wikipedia.org/wiki/Hecke_operator#Explicit_formula</a>? Is each term in the sum meant to be well defined? Or only the sum? If I naively try to change (a b c d) by multiplication by a element of SL2Z and use the weight formula for f, I don't seem to get the same term.</p>",
        "id": 134153709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537260751
    },
    {
        "content": "<p>You should get the same term, right? Or did I mess something up. I was quite convinced that every term in the sum was well-defined.</p>",
        "id": 134154192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537261496
    },
    {
        "content": "<p>But maybe we should just delete this file... I think I aimed to high.</p>",
        "id": 134154220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537261547
    },
    {
        "content": "<p>I don't understand the wikipedia page, so you don't need to mess up anything</p>",
        "id": 134154275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537261584
    },
    {
        "content": "<p>What is the pen and paper proof that each term in the sum is well-defined?</p>",
        "id": 134154286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537261609
    },
    {
        "content": "<p>I must be missing something obvious</p>",
        "id": 134154293,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537261621
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>c</mi><mi>z</mi><mo>+</mo><mi>d</mi><msup><mo>)</mo><mrow><mo>−</mo><mi>k</mi></mrow></msup><mi>f</mi><mo>(</mo><mfrac><mrow><mi>a</mi><mi>z</mi><mo>+</mo><mi>b</mi></mrow><mrow><mi>c</mi><mi>z</mi><mo>+</mo><mi>d</mi></mrow></mfrac><mo>)</mo><mo>=</mo><mo>(</mo><mi>c</mi><mi>z</mi><mo>+</mo><mi>d</mi><msup><mo>)</mo><mrow><mo>−</mo><mi>k</mi></mrow></msup><mi>f</mi><mo>(</mo><mrow><mo fence=\"true\">(</mo><mtable><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>a</mi></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>c</mi></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>d</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mi>z</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(cz + d)^{-k} f(\\frac{az + b}{cz + d}) = (cz + d)^{-k} f(\\begin{pmatrix} a &amp; b \\\\ c &amp; d \\end{pmatrix}z)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">c</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mbin\">+</span><span class=\"mord mathit\">d</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801079999999999em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">c</span><span class=\"mord mathit mtight\" style=\"margin-right:0.04398em;\">z</span><span class=\"mbin mtight\">+</span><span class=\"mord mathit mtight\">d</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">a</span><span class=\"mord mathit mtight\" style=\"margin-right:0.04398em;\">z</span><span class=\"mbin mtight\">+</span><span class=\"mord mathit mtight\">b</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mopen\">(</span><span class=\"mord mathit\">c</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mbin\">+</span><span class=\"mord mathit\">d</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">a</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">b</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span>, is that right?</p>",
        "id": 134154358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537261691
    },
    {
        "content": "<p>yes</p>",
        "id": 134154363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537261719
    },
    {
        "content": "<p>So now we take another representative: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mrow><mo fence=\"true\">(</mo><mtable><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>a</mi></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>c</mi></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>d</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">M\\begin{pmatrix}a &amp; b \\\\ c &amp; d \\end{pmatrix}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">a</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">b</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span></p>",
        "id": 134154371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537261738
    },
    {
        "content": "<p>The trouble is that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo separator=\"true\">,</mo><mi>d</mi><mo>↦</mo><mo>(</mo><mi>c</mi><mi>z</mi><mo>+</mo><mi>d</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">a, b, c, d \\mapsto  (cz+d)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span><span class=\"mpunct\">,</span><span class=\"mord mathit\">b</span><span class=\"mpunct\">,</span><span class=\"mord mathit\">c</span><span class=\"mpunct\">,</span><span class=\"mord mathit\">d</span><span class=\"mrel\">↦</span><span class=\"mopen\">(</span><span class=\"mord mathit\">c</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mbin\">+</span><span class=\"mord mathit\">d</span><span class=\"mclose\">)</span></span></span></span> is not a group morphism</p>",
        "id": 134154396,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537261798
    },
    {
        "content": "<p>Hmm, I'm also getting myself confused.</p>",
        "id": 134154440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537261815
    },
    {
        "content": "<p>If that were a group morphism then everything would be obviously ok</p>",
        "id": 134154477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537261912
    },
    {
        "content": "<p>Too bad we can't ask Kevin</p>",
        "id": 134154523,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537261929
    },
    {
        "content": "<p>It shouldn't be a group morphism, it should be a 1-cocycle, or something. Right? Because <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span></span></span></span> is changing too</p>",
        "id": 134154565,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537262000
    },
    {
        "content": "<p>oh yes, z is changing</p>",
        "id": 134154612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537262048
    },
    {
        "content": "<p>I think it's not changing enough on my paper</p>",
        "id": 134154613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537262057
    },
    {
        "content": "<p>Ok, it works now</p>",
        "id": 134154825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537262328
    },
    {
        "content": "<p>You can continue to do number theory, it's alright</p>",
        "id": 134154829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537262340
    },
    {
        "content": "<p>It was only a stupid copy-paste mistake</p>",
        "id": 134154857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537262360
    },
    {
        "content": "<p>It also works on my paper</p>",
        "id": 134154934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537262410
    },
    {
        "content": "<p>So, we've proven it! Let's move on to the next maths theorem (-;</p>",
        "id": 134154945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537262446
    },
    {
        "content": "<p>It shouldn't be that hard to Lean (modulo those f***ing cast and coes)</p>",
        "id": 134154949,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537262453
    },
    {
        "content": "<p>Right, Kenny did a lot of useful stuff (-;</p>",
        "id": 134154962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537262475
    },
    {
        "content": "<p>But all those actions of matrices on each other, and on the upper half plane...</p>",
        "id": 134154965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537262490
    },
    {
        "content": "<p>That's going to be quite a pain.</p>",
        "id": 134154969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537262496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Are you willing to take a shot at it?</p>",
        "id": 134155112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537262701
    },
    {
        "content": "<p>I may try in the afternoon</p>",
        "id": 134155121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537262719
    },
    {
        "content": "<p>I cleaned up a tiny bit but several things are weird. First I cannot sorry the proof. Lean complains there are remaining meta-variables, but I don't see where. And I have an hypothesis <code>H: A ≈ B</code> that I found no way to destruct into the existence of P in SL2 such that B = PA. This is not such a suprise because the beginning of the proof is really a mess</p>",
        "id": 134156129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537264407
    },
    {
        "content": "<p>I think this is a very bad start. <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> could you have a look?</p>",
        "id": 134156173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537264444
    },
    {
        "content": "<p>Right... my brain stopped working after I wrote the start of that file. Guess why...</p>",
        "id": 134156261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537264579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> where should I look? I have no idea what a Hecke operator is. Did you push your commits, I don't see anything in kbb.</p>",
        "id": 134156613,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537265075
    },
    {
        "content": "<p>There is a file called <code>Hecke_operator</code> or something</p>",
        "id": 134156640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537265126
    },
    {
        "content": "<p>The mathy definition is here: <a href=\"https://en.wikipedia.org/wiki/Hecke_operator#Explicit_formula\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Hecke_operator#Explicit_formula\">https://en.wikipedia.org/wiki/Hecke_operator#Explicit_formula</a></p>",
        "id": 134156648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537265147
    },
    {
        "content": "<p>To prove that the sum is over a finite set, we need to use the stuff that you cleaned up.</p>",
        "id": 134156694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537265168
    },
    {
        "content": "<p>Hm, the statements shouldn't change, besides <code>reduce_def</code> which is now <code>reduce_eq1</code>, <code>reduce_eq2, </code>reduce_eq3`.</p>",
        "id": 134156734,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537265258
    },
    {
        "content": "<p>Right, line 12 should be</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">SL2Z_M</span><span class=\"bp\">.</span><span class=\"n\">finiteness</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 134156921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537265520
    },
    {
        "content": "<p>Crap. I forgot to push</p>",
        "id": 134156983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537265583
    },
    {
        "content": "<p>And I left my computer</p>",
        "id": 134157050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537265672
    },
    {
        "content": "<p>Fixed</p>",
        "id": 134157917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537267198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Now you can have a look, sorry about the false start</p>",
        "id": 134157967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537267212
    },
    {
        "content": "<p>I'm a bit scared about the fact that we only know that <code>SL2Z_H</code> is a group action.</p>",
        "id": 134158356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537267951
    },
    {
        "content": "<p>It seems like we would want to know that <code>MAT2_H</code> is a monoid action.</p>",
        "id": 134158362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537267967
    },
    {
        "content": "<p>Oh yes, we need that</p>",
        "id": 134158374,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537267991
    },
    {
        "content": "<p>But refactoring <code>SL2Z</code> into a subtype of <code>MAT2</code> give me a headache</p>",
        "id": 134158376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537268000
    },
    {
        "content": "<p>I thought this was the reason you put det &gt; 0 everywhere instead of det = 1</p>",
        "id": 134158378,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537268008
    },
    {
        "content": "<p>Because that means we have to go through all of Kenny's code again</p>",
        "id": 134158379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537268011
    },
    {
        "content": "<p>And this is why I don't understand how term mode code could be easier to maintain</p>",
        "id": 134158385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537268040
    },
    {
        "content": "<p>They set things up in the correct way the first time.</p>",
        "id": 134158428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537268062
    },
    {
        "content": "<p>No, that's not what refactoring means</p>",
        "id": 134158435,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537268081
    },
    {
        "content": "<p>Instead of me: I only get it right after 42 attemts.</p>",
        "id": 134158436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537268082
    },
    {
        "content": "<p>You're right.</p>",
        "id": 134158439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537268099
    },
    {
        "content": "<p>But I agree that it is really confusing that we can not unfold that equivalence between <code>A</code> and <code>B</code></p>",
        "id": 134158448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537268125
    },
    {
        "content": "<p>After we have that, we could try to just battle on.</p>",
        "id": 134158453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537268135
    },
    {
        "content": "<p>Although it might be nicer to have the monoid action do some work for us</p>",
        "id": 134158464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537268153
    },
    {
        "content": "<p>Oh my goodness. If we want to generalise stuff to monoid actions there I'm so scared that everything breaks. I've learned a lesson: first try to think out some good API's.</p>",
        "id": 134159698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537269926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> So we have two problems: (1) how do we unfold the equivalence in <code>hecke_operator.lean</code>.</p>",
        "id": 134159883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270116
    },
    {
        "content": "<p>By definition <code>A</code> and <code>B</code> are equivalent if there is an <code>M : SL2Z</code> such that <code>A = MB</code>.</p>",
        "id": 134159892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270140
    },
    {
        "content": "<p>We want to get that <code>M</code> out.</p>",
        "id": 134159900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270148
    },
    {
        "content": "<p>And (2), to get a readable (and workable) version of the Hecke operator, it would be good to have <code>A • z</code> where <code>A</code> is any 2x2-matrix with integer coefficients, and <code>z : ℍ</code>.</p>",
        "id": 134159998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270246
    },
    {
        "content": "<p>In the end we will get <code>(M • B) • z</code>, and then we want to know that this is the same thing as <code>M • (B • z)</code></p>",
        "id": 134160047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270301
    },
    {
        "content": "<p>So, first I fixed the basic definition. We currently had some missing goals (the anonymous constructor was outside tactic mode, so some type class instances where missing)</p>",
        "id": 134160057,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537270308
    },
    {
        "content": "<p>Ok, I guess that helps a bit (-;</p>",
        "id": 134160259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270558
    },
    {
        "content": "<p>I suspected something like this</p>",
        "id": 134160307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537270570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Do you think it would be better if Möbius_transform turned into • notation?</p>",
        "id": 134160341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270660
    },
    {
        "content": "<p>Uh, overloading <code> • </code> could be problematic, at least annoying...</p>",
        "id": 134160401,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537270718
    },
    {
        "content": "<p>Why do we know that <code>A</code> an <code>B</code> are representatives?</p>",
        "id": 134160409,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537270732
    },
    {
        "content": "<p>so in<code>reps</code>?</p>",
        "id": 134160410,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537270738
    },
    {
        "content": "<p>No, we don't know that</p>",
        "id": 134160415,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270744
    },
    {
        "content": "<p>We don't need that</p>",
        "id": 134160419,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537270769
    },
    {
        "content": "<p>They are merely \"any representative\"</p>",
        "id": 134160421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270771
    },
    {
        "content": "<p>This reps story is all used up in the finiteness fact</p>",
        "id": 134160427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537270781
    },
    {
        "content": "<p>We won't use it again</p>",
        "id": 134160431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537270787
    },
    {
        "content": "<p>in this proof</p>",
        "id": 134160434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537270791
    },
    {
        "content": "<blockquote>\n<p>We won't use it again</p>\n</blockquote>\n<p>We promise.</p>",
        "id": 134160481,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270814
    },
    {
        "content": "<p>but we could use them to define the Hecke operator? Then we don't need to lift the quotients...</p>",
        "id": 134160483,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537270824
    },
    {
        "content": "<p>of course, later we need the proof anyway</p>",
        "id": 134160492,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537270838
    },
    {
        "content": "<p>Hmm, I suppose so.</p>",
        "id": 134160497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270857
    },
    {
        "content": "<p>That would be cheating</p>",
        "id": 134160506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537270868
    },
    {
        "content": "<p>And \"later\" will be after the birthday party.</p>",
        "id": 134160508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Why would we be overloading <code>•</code>? The monoid action <code>MAT2 → ℍ → ℍ</code> can be an instance of <code>has_scalar</code> right?</p>",
        "id": 134160594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537270985
    },
    {
        "content": "<p>We don't have <code>MAT2</code>, but I think every monoid action should be an instance of <code>has_scalar</code>.</p>",
        "id": 134160604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271012
    },
    {
        "content": "<p>ah, okay. I thought you wanted to add another <code>notation</code>...</p>",
        "id": 134160605,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537271018
    },
    {
        "content": "<p>It's interesting to know how far one should be allowed to go into definition cheating. Say I want to prove RH in Lean. I define the usual zeta, call it zeta', and then define zeta(z) to be zeta'(z) if z is not a surprising zero of zeta', and one otherwise. Then I prove RH, and all is left is proving my definition of zeta is equivalent to the usual one...</p>",
        "id": 134160610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537271030
    },
    {
        "content": "<p>what do you mean you want t get the <code>M</code> out? Like <code>rintros A B ⟨M, eq⟩,</code> works...</p>",
        "id": 134160688,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537271118
    },
    {
        "content": "<p>I guess so</p>",
        "id": 134160695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271134
    },
    {
        "content": "<p>I think it works because of your previous fix</p>",
        "id": 134160697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537271155
    },
    {
        "content": "<p>It definitely didn't work this morning</p>",
        "id": 134160700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537271162
    },
    {
        "content": "<p>Good!</p>",
        "id": 134160742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271180
    },
    {
        "content": "<p>Because now we can <code>rw</code> along <code>eq</code>, and then the fight begins!</p>",
        "id": 134160749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271198
    },
    {
        "content": "<p>The current state is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">...</span>\n<span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">SL2Z</span><span class=\"o\">,</span>\n<span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">SL2Z_M</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"n\">weight_f</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">SL2Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">ℍ</span><span class=\"o\">}),</span>\n    <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"err\">«</span><span class=\"n\">M</span><span class=\"err\">ö</span><span class=\"n\">bius_transform</span><span class=\"err\">»</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">z</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n      <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"err\">«</span><span class=\"n\">M</span><span class=\"err\">ö</span><span class=\"n\">bius_transform</span><span class=\"err\">»</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">=</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n      <span class=\"n\">f</span> <span class=\"bp\">⟨</span><span class=\"err\">«</span><span class=\"n\">M</span><span class=\"err\">ö</span><span class=\"n\">bius_transform</span><span class=\"err\">»</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"err\">↑</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span>\n</pre></div>\n\n\n<p>Is this what you want?</p>",
        "id": 134160764,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537271220
    },
    {
        "content": "<p>Yep</p>",
        "id": 134160780,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537271251
    },
    {
        "content": "<p>ah, okay. Its in <code>kbb</code> now</p>",
        "id": 134160800,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537271272
    },
    {
        "content": "<p>by the way: it is surely good style to define <code>Möbius_transform</code> on <code>Mat m</code> instead fof integer tuples.</p>",
        "id": 134160898,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537271400
    },
    {
        "content": "<p>I hate this integer tuples thing. I don't understand why we don't use matrices everywhere</p>",
        "id": 134160955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537271432
    },
    {
        "content": "<p>Right, so why don't we define it on <code>matrix (fin 2) (fin 2) R</code> where <code>R</code> is a subring of <code>ℝ</code>?</p>",
        "id": 134160962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271449
    },
    {
        "content": "<p>Also, can we have a coercion from <code>ℕ</code> to <code>fintype</code>, that sends <code>n</code> to <code>fin n</code>?</p>",
        "id": 134160981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271480
    },
    {
        "content": "<p>Then stuff becomes even more readable (-;</p>",
        "id": 134160986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think we should. But with an old version of matrices it was hard to actually write down examples.</p>",
        "id": 134161039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271530
    },
    {
        "content": "<p>Hm, having a coerion from <code>ℕ</code> to <code>Type</code> would be nice!</p>",
        "id": 134161089,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537271626
    },
    {
        "content": "<p>Ah, I see there is <code>SL2Z_H</code>. So maybe we want a similar form for <code>Mat m</code>?</p>",
        "id": 134161157,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537271663
    },
    {
        "content": "<p>It is in the repo, but I haven't pushed yet.</p>",
        "id": 134161158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271664
    },
    {
        "content": "<p>Well, <code>MAT2</code> really. And afterwards we can restrict to subtypes.</p>",
        "id": 134161173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271686
    },
    {
        "content": "<p><code>Mat m</code> is a bad algebraic structure</p>",
        "id": 134161174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271695
    },
    {
        "content": "<p>It isn't a monoid</p>",
        "id": 134161183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537271706
    },
    {
        "content": "<p>So, we have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">theorem</span> <span class=\"n\">one_val_ne</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">one_val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>in the matrices file. I would like Lean to try and figure out on its own if <code>h</code> is satisfied. In <code>fin 2</code> it should know that <code>0 ≠ 1</code>.</p>",
        "id": 134161855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537272573
    },
    {
        "content": "<p>Is this something that an <code>auto_param</code> like <code>dec_trivial</code> could do?</p>",
        "id": 134161860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537272593
    },
    {
        "content": "<p>Okay, I added <code>M_trans</code> anyway.</p>",
        "id": 134161865,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537272598
    },
    {
        "content": "<p>How do I need to change the statement?</p>",
        "id": 134161905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537272604
    },
    {
        "content": "<p>Either add a tactic: <code>dec_tac := ``[exact dec_trivial]</code> and use this: <code>(h : i ≠ j . dec_tac)</code></p>",
        "id": 134161966,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537272682
    },
    {
        "content": "<p>or use default parameter <code>(h : i ≠ j := dec_trivial)</code></p>",
        "id": 134161972,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537272697
    },
    {
        "content": "<p>I don't know if the default parameter work. If <code>dec_trivial</code> gets evaluated too early it might not work</p>",
        "id": 134162023,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537272730
    },
    {
        "content": "<p>I'll try.</p>",
        "id": 134162030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537272763
    },
    {
        "content": "<p>Ok, the <code>M_trans</code> is nice. So now we need to plug that into the definition of the Hecke operator.</p>",
        "id": 134162037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537272780
    },
    {
        "content": "<p>It isn't happy about <code>meta def dec_tac : tactic unit := ``[exact dec_trivial]</code></p>",
        "id": 134162127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537272920
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>maybe?</p>",
        "id": 134162193,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537272998
    },
    {
        "content": "<p>That worked</p>",
        "id": 134162212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537273052
    },
    {
        "content": "<p>So now my goal is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span>\n</pre></div>\n\n\n<p>If Kevin saw that goal...</p>",
        "id": 134162280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537273145
    },
    {
        "content": "<p><code>simp</code> didn't kill it.</p>",
        "id": 134162284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537273153
    },
    {
        "content": "<p>Does <code>unfold_coes</code> help?</p>",
        "id": 134162298,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537273194
    },
    {
        "content": "<p>Is that a tactic?</p>",
        "id": 134162386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537273293
    },
    {
        "content": "<p>yes</p>",
        "id": 134162389,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537273301
    },
    {
        "content": "<p>It doesn't help enough...</p>",
        "id": 134162554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537273495
    },
    {
        "content": "<p>I'll go back to the Hecke operator for a moment.</p>",
        "id": 134162562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537273506
    },
    {
        "content": "<p>Ok guys... I'm gone for a week. I might be able to check Zulip now and then, but I won't be able to do any serious Leaning until next week on Thursday.</p>",
        "id": 134171534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282747
    },
    {
        "content": "<p>I'm looking forward to Kevin's reaction on Friday</p>",
        "id": 134171542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282761
    },
    {
        "content": "<p>Thanks for all your help so far! I really enjoyed it!</p>",
        "id": 134171549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282777
    },
    {
        "content": "<p>Thanks for all your efforts</p>",
        "id": 134171554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537282782
    },
    {
        "content": "<p>But we still haven't decided what will happen on Friday</p>",
        "id": 134171562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537282795
    },
    {
        "content": "<p>Seriously, what are we doing tomorrow? <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> will you see Kevin tomorrow?</p>",
        "id": 134221099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537348914
    },
    {
        "content": "<p>Tomorrow is Thursday. I guess any cleaning up that we want to do should be done today or tomorrow. On Friday we give Kevin access to <code>kbb</code> and we PR the determinants file and the remainder of matrices.lean</p>",
        "id": 134221346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537349318
    },
    {
        "content": "<p>I don't think there is much in the modular form files that is ready to merge.</p>",
        "id": 134221361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537349351
    },
    {
        "content": "<p>What about sin and cos? We don't have pi yet, but we do have sin and cos.</p>",
        "id": 134221427,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537349414
    },
    {
        "content": "<p>I would veto the current definition of sin</p>",
        "id": 134221434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349433
    },
    {
        "content": "<p>unless it changed recently</p>",
        "id": 134221437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349440
    },
    {
        "content": "<p>How come?</p>",
        "id": 134221441,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537349452
    },
    {
        "content": "<p>What was wrong with it?</p>",
        "id": 134221442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537349453
    },
    {
        "content": "<p>Would you write this on a blackboard?</p>",
        "id": 134221456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349494
    },
    {
        "content": "<p><code>def sin (z : ℂ) : ℂ := ((exp (-z * I) - exp (z * I)) * I) / 2</code></p>",
        "id": 134221457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349504
    },
    {
        "content": "<p>come on</p>",
        "id": 134221458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349507
    },
    {
        "content": "<p>I don't see what's wrong with it</p>",
        "id": 134221460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537349518
    },
    {
        "content": "<p>Is it the definition in the UK?</p>",
        "id": 134221501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349534
    },
    {
        "content": "<p>I think a PR on <code>exp</code> would be nice. Possibly including <code>cos</code> und <code>sin</code>. Hopefully that will induce a rampage by some Lean-fu experts to prove continuity.</p>",
        "id": 134221507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537349553
    },
    {
        "content": "<p>I don't even know what definition of <code>sin</code> I saw. My training in analysis was terrible.</p>",
        "id": 134221514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537349579
    },
    {
        "content": "<p>Possibly it was the analytic continuation of <code>real.sin</code></p>",
        "id": 134221529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537349607
    },
    {
        "content": "<p>I don't know how <code>real.sin</code> was defined. Probably using angles etc...</p>",
        "id": 134221542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537349627
    },
    {
        "content": "<p>I'm going to have a serious bash on continuity today. The definition I saw was <code>((exp (z * I) - exp (-z * I))) / (2 * I)</code></p>",
        "id": 134221543,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537349629
    },
    {
        "content": "<p>In France, <code>sin z = (exp (z * I) - exp (-z * I)) * I) / (2*I)</code></p>",
        "id": 134221545,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349638
    },
    {
        "content": "<p>is there any difference?</p>",
        "id": 134221591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537349656
    },
    {
        "content": "<p>Yes. One is the definition people expect to see, the other one could be a useful lemma if Chris needs it</p>",
        "id": 134221595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349687
    },
    {
        "content": "<p>I multiplied by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">-i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\">−</span><span class=\"mord mathit\">i</span></span></span></span>, Patrick divided by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">i</span></span></span></span>.</p>",
        "id": 134221598,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537349692
    },
    {
        "content": "<p>Chris, why did you do that?</p>",
        "id": 134221622,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349757
    },
    {
        "content": "<p>It's easier to prove <code>sin (x + y)</code> because I have less division to deal with.</p>",
        "id": 134221668,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537349781
    },
    {
        "content": "<p>Then you could use a lemma</p>",
        "id": 134221671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349792
    },
    {
        "content": "<p>Actually I don't understand why you use these proofs for sin(x+y) etc.</p>",
        "id": 134221679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349812
    },
    {
        "content": "<p>Which proofs should I use?</p>",
        "id": 134221697,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537349839
    },
    {
        "content": "<p>Why not taking real and imaginary parts of the equation exp(i(x+y)) = exp(ix)exp(iy)?</p>",
        "id": 134221698,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349842
    },
    {
        "content": "<p>That's the real life proof</p>",
        "id": 134221700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349852
    },
    {
        "content": "<p>But I guess you should rather prove continuity and try to get pi</p>",
        "id": 134221757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349902
    },
    {
        "content": "<p>And also answer my question: will you see Kevin tomorrow?</p>",
        "id": 134221767,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537349926
    },
    {
        "content": "<p>Yes.</p>",
        "id": 134221789,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537349985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Why tomorrow? Don't you mean Friday? Or do you have some plan in mind?</p>",
        "id": 134221877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537350120
    },
    {
        "content": "<p>I won't see him on Friday.</p>",
        "id": 134221946,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537350202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Could you give Kevin access when it is Friday 09:00 your time? Because then it is 00:00 his time, I think.</p>",
        "id": 134222018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537350284
    },
    {
        "content": "<p>Sure.</p>",
        "id": 134222025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537350296
    },
    {
        "content": "<p>Nice <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 134222034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537350308
    },
    {
        "content": "<p>I meant Friday, sorry</p>",
        "id": 134222408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537350892
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> isn't back in the UK at that point, I guess?</p>",
        "id": 134222422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537350926
    },
    {
        "content": "<p>i'm not</p>",
        "id": 134222425,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537350936
    },
    {
        "content": "<p>Patrick, were you thinking of physically giving him some gift? A print-out of the files <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span> ?</p>",
        "id": 134222428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537350956
    },
    {
        "content": "<p>I wanted someone who could see his face and tell us.</p>",
        "id": 134222492,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537351063
    },
    {
        "content": "<p>Agreed, that would be nice.</p>",
        "id": 134222498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537351081
    },
    {
        "content": "<blockquote>\n<p>Why not taking real and imaginary parts of the equation exp(i(x+y)) = exp(ix)exp(iy)?</p>\n</blockquote>\n<p>That only proves the addition formulas for sin and cos when the arguments are real</p>",
        "id": 134252029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537373857
    },
    {
        "content": "<p>oh yes</p>",
        "id": 134252043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537373875
    },
    {
        "content": "<p>I don't think there is any substitute for just doing the algebra in the complex case</p>",
        "id": 134252084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537373885
    },
    {
        "content": "<p>I never thought about the complex case here</p>",
        "id": 134252094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537373895
    },
    {
        "content": "<p>crazy</p>",
        "id": 134252096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537373898
    },
    {
        "content": "<p>no problem. then just show that two holomorphic functions which agree on the real line are equal <span class=\"emoji emoji-1f643\" title=\"upside down\">:upside_down:</span></p>",
        "id": 134253196,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537374932
    },
    {
        "content": "<p>Great !</p>",
        "id": 134254330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537375987
    },
    {
        "content": "<p>This is so amazing! Awesome! That was an immense tour de force, Chris. Well done!</p>",
        "id": 134341776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537482474
    },
    {
        "content": "<p>I am about to go to bed. I'm sorry I won't be able to be online when Kevin gets his birthday present. I am sure that you guys will be able to break the surprise! I'll read up on it afterwards (-;</p>",
        "id": 134341931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537482609
    },
    {
        "content": "<p>I think the plan is that in 24 minutes I will add Kevin to the kbb repository.</p>",
        "id": 134342239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1537482981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Yes, that's a good plan!</p>",
        "id": 134342791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537483699
    },
    {
        "content": "<p>You can also add him to this stream on Zulip, and you can write a happy birthday post in the general stream.</p>",
        "id": 134342811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537483728
    },
    {
        "content": "<p>I should really go to bed now. Tomorrow I'll have 4 hard math-talks waiting for me...</p>",
        "id": 134342828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537483755
    },
    {
        "content": "<p>Happy PR'ing (-;</p>",
        "id": 134342841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537483786
    },
    {
        "content": "<p>wtf?</p>",
        "id": 134343917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537485012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  We hope you will enjoy reading back through all our crazy conversations of the last 10 days. <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 134357029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537506953
    },
    {
        "content": "<p>Did we bash Kevin in any of it?</p>",
        "id": 134357076,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1537506988
    },
    {
        "content": "<p>I don't remember doing it more than on the regular streams</p>",
        "id": 134360286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537512584
    },
    {
        "content": "<p>Kevin: the conversation about this project started in group PM but then it was generating a huge mess of notification for everybody, and I eventually found out anybody could create private streams. So the story of this stream starts in the middle.</p>",
        "id": 134360344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537512665
    },
    {
        "content": "<p>I think it's fair to point out that Johan came with this idea, on September 4th.</p>",
        "id": 134360501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537512922
    },
    {
        "content": "<p>In order to understand the mess in the repository, it may be relevant to know that, beyond Johan's idea of a birthday pi, the unrealistic idea that I proposed was to formal abstract <a href=\"https://www.sciencedirect.com/science/article/pii/S0022314X96900396?via%3Dihub\" target=\"_blank\" title=\"https://www.sciencedirect.com/science/article/pii/S0022314X96900396?via%3Dihub\">https://www.sciencedirect.com/science/article/pii/S0022314X96900396?via%3Dihub</a></p>",
        "id": 134360595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537513044
    },
    {
        "content": "<p>ROFL</p>",
        "id": 134370973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537528062
    },
    {
        "content": "<p>That is so funny. That is a fine abstract to formalise. It would be trivial if there was a half-decent API for modular forms, and Lean is perfect for that sort of thing.</p>",
        "id": 134371054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537528153
    },
    {
        "content": "<p>You could formalise a mathematically equivalent statement more easily -- the eigenvalues of a Hecke operator on a space of modular forms are the same as the eigenvalues of a corresponding Hecke operator on a certain group cohomology group, by a theorem of Eichler and Shimura. Formalising group cohomology would perhaps be easier than formalising modular forms -- I'm not really sure but it sounds easier to me. Group cohomology is just there waiting to be done.</p>",
        "id": 134371148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537528268
    },
    {
        "content": "<p>I wrote that paper after hearing a talk of Dinakar Ramakrishnan, when he mentioned that he had never seen a modular eigenform whose Hecke eigenvalues generated a non-solvable extension of the rationals. Talking to him afterwards it became clear that this was only because there were no computer programs to compute modular forms, and that we all knew exactly where to look. I took the trouble to look and there they were. Dinakar urged me to write it up.</p>",
        "id": 134371225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537528387
    },
    {
        "content": "<p>We are not so far away from having Hecke operators (they almost act on functions of a fixed weight, and it shouldn't be so hard to show they act on holomorphic functions and preserve boundedness at infinity). We also have characteristic polynomial, and Johannes has been working towards Galois groups. But we mostly gave up when Johan pointed out that we would need that modular forms of a fixed weight form a finite dimensional subspace of holomorphic functions (we do have a vector space structure on holomorphic functions on the upper half plane).</p>",
        "id": 134371722,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537529122
    },
    {
        "content": "<p>aie, yes, finite-dimensionality is needed. A trivial consequence of the fact that the global sections of a line bundle on a compact Riemann surface are finite-dimensional, so <code>by maths_undergraduate</code> should do it. I'm going to try and build that tactic at Imperial.</p>\n<p>Finite-dimensionality for the group cohomology would be a trivial consequence of the fact that a finite index subgroup of a finitely-generated group is finitely-generated, and the fact that SL(2,Z) is finitely-generated. I don't know how easy it is to prove the finite index result just by group theory, I am no algebraist. The proofs I know are topological. The group cohomology variant would be provably equal once we had something like Stokes' theorem.</p>",
        "id": 134430430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537609419
    },
    {
        "content": "<p>We have the fact that <code>S</code> and <code>T</code> generate <code>SL2Z</code> in your birthday repo <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 134431763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537612286
    },
    {
        "content": "<p>Right. But for finite-dimensionality of the cohomology group for general levels we'll need that a finite index subgroup of a f.g. group is f.g. But I see what you're saying -- this is enough to prove that level 1 modular forms are finite-dimensional.</p>",
        "id": 134434395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537616237
    },
    {
        "content": "<p>There is some kind of subtlety which I have only recently become aware of, and again it was a comment of <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> which clarified things for me. Without some general theory of global sections of line bundles on compact Riemann surfaces it's kind of a pain to prove that the space of modular forms is finite-dimensional. But it is finite-dimensional, so one can define the char poly of a Hecke operator to be \"if the space is infinite-dimensional then 37, and if it's finite-dimensional then the char poly\". This gives a sorry-free way of defining the char poly which is human-provably equivalent to the right thing. What one <em>cannot</em> do is to get away without defining the Hecke operator at all and just sorrying it -- because then the char poly has a sorry in too.</p>\n<p>One of the things I realise I want now is for a bunch of mathematicians to come along and say \"can you formalise theorem X or definition Y in Lean?\" because questions such as that are ways of discovering what kind of an API a normal mathematician (perhaps with no Lean training) wants. Who cares about proofs, they are too hard. I know that Mario feels that a definition is pointless without an application. How about if the application is some statements of theorems or conjectures?</p>",
        "id": 134434419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1537616270
    }
]