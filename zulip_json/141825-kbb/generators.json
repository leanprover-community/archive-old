[
    {
        "content": "<p>I just saw Kenny's work on generating SL2Z. It looks impressive</p>",
        "id": 133838138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780029
    },
    {
        "content": "<p>But I wonder how to properly generalize it.</p>",
        "id": 133838160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780066
    },
    {
        "content": "<blockquote>\n<p>I just saw Kenny's work on generating SL2Z. It looks impressive</p>\n</blockquote>\n<p>thanks!</p>",
        "id": 133838169,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536780078
    },
    {
        "content": "<p>I would have expected to see a predicate saying: this set generate this group. And then a mechanism constructor the eliminator from this</p>",
        "id": 133838236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780136
    },
    {
        "content": "<p>Is this counter-intuitive order related to constructivity?</p>",
        "id": 133838249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780164
    },
    {
        "content": "<p>not constructivity</p>",
        "id": 133838264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536780190
    },
    {
        "content": "<p>it's just the same reason we don't take quot.exists_rep as an axiom, but rather quot.ind</p>",
        "id": 133838278,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536780213
    },
    {
        "content": "<p>?</p>",
        "id": 133838398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780358
    },
    {
        "content": "<p>it's easier to use</p>",
        "id": 133838466,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536780405
    },
    {
        "content": "<p>Do you think there could be some tactic consuming a proof of generation and building the eliminator?</p>",
        "id": 133838826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536780846
    },
    {
        "content": "<p>I don't know about tactics</p>",
        "id": 133838930,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536780988
    },
    {
        "content": "<p>Maybe a tactic is not needed, I'm only trying to understand whether there could be an interface which looks more natural (to me at least)</p>",
        "id": 133838972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536781071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have any insight? We are discussing <a href=\"https://github.com/semorrison/kbb/blob/master/src/SL2Z_generators.lean#L49\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/master/src/SL2Z_generators.lean#L49\">https://github.com/semorrison/kbb/blob/master/src/SL2Z_generators.lean#L49</a> and <a href=\"https://github.com/semorrison/kbb/blob/master/src/SL2Z_generators.lean#L97\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/master/src/SL2Z_generators.lean#L97\">https://github.com/semorrison/kbb/blob/master/src/SL2Z_generators.lean#L97</a></p>",
        "id": 133839028,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536781107
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>protected theorem induction_on {C : SL2Z → Prop} (A : SL2Z)\n  (H1 : C 1) (HS : ∀ B, C B → C (S * B))\n  (HT : ∀ B, C B → C (T * B)) : C A :=\n</pre></div>\n\n\n<p>It's amazing how little this tells me</p>",
        "id": 133839676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536781834
    },
    {
        "content": "<p>everything is letters</p>",
        "id": 133839680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536781845
    },
    {
        "content": "<p>S and T are explicit elements of SL2Z defined a few lines earlier</p>",
        "id": 133839695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536781868
    },
    {
        "content": "<p>So this theorem is a really weird way to state those elements generate SL2Z</p>",
        "id": 133839707,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536781892
    },
    {
        "content": "<p>there is an <code>SL2Z</code> attribute?</p>",
        "id": 133839714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536781908
    },
    {
        "content": "<p><a href=\"https://github.com/semorrison/kbb/blob/master/src/modular_group.lean#L6\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/master/src/modular_group.lean#L6\">https://github.com/semorrison/kbb/blob/master/src/modular_group.lean#L6</a></p>",
        "id": 133839766,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536781948
    },
    {
        "content": "<p>seems like a fine induction statement</p>",
        "id": 133839773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536781966
    },
    {
        "content": "<p>Sure. But the question is: what is the proper general context and interface? Dealing with generating sets for groups</p>",
        "id": 133839785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782006
    },
    {
        "content": "<p>I don't think we have <code>span</code> for groups yet, I'm working on improving span for modules and we can do something similar in groups</p>",
        "id": 133839796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782038
    },
    {
        "content": "<p>I guess it's usually called closure in groups?</p>",
        "id": 133839840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782056
    },
    {
        "content": "<p>I did spans for group a <em>very</em> long time ago</p>",
        "id": 133839844,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782060
    },
    {
        "content": "<p>in mathlib?</p>",
        "id": 133839848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782066
    },
    {
        "content": "<p>no</p>",
        "id": 133839849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782072
    },
    {
        "content": "<p>I think I recall</p>",
        "id": 133839850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782076
    },
    {
        "content": "<p>I think closure is in mathlib</p>",
        "id": 133839853,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536782084
    },
    {
        "content": "<p>It's the first thing I did</p>",
        "id": 133839856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782088
    },
    {
        "content": "<p>you were doing something with norms in groups</p>",
        "id": 133839858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782090
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/invariant_norms.lean#L107\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/invariant_norms.lean#L107\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/invariant_norms.lean#L107</a></p>",
        "id": 133839885,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782133
    },
    {
        "content": "<p>But we don't need the general theory for this theorem, and it won't make the proof any easier</p>",
        "id": 133839888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782138
    },
    {
        "content": "<p>given what is currently available, this theorem is fine</p>",
        "id": 133839892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782151
    },
    {
        "content": "<p>Yes. I was trying to formalize the trivial part of <a href=\"https://arxiv.org/abs/1803.07997\" target=\"_blank\" title=\"https://arxiv.org/abs/1803.07997\">https://arxiv.org/abs/1803.07997</a></p>",
        "id": 133839935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782163
    },
    {
        "content": "<p>if and when we get spans in groups it would be natural to state <code>span {S, T} = top</code></p>",
        "id": 133839947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782184
    },
    {
        "content": "<p>guys, it's just closure</p>",
        "id": 133839970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536782218
    },
    {
        "content": "<p>?</p>",
        "id": 133840001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782254
    },
    {
        "content": "<p>From <code>subgroup.lean</code> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">in_closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">basic</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">inv</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">in_closure</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">in_closure</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">in_closure</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133840002,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536782255
    },
    {
        "content": "<p>It's not my question though: I would like to first prove the span is everything, and then deduce the eliminator, not the other way around</p>",
        "id": 133840007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782261
    },
    {
        "content": "<p>the proofs will be the same</p>",
        "id": 133840017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782274
    },
    {
        "content": "<p>Even better then. We can write things like we do in maths and have the same proofs</p>",
        "id": 133840087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782301
    },
    {
        "content": "<p>ah, okay so you can write <code>closure {S, T} = univ</code></p>",
        "id": 133840112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782324
    },
    {
        "content": "<p>and the proof is to prove <code>in_closure {S, T}</code> by exactly the same induction argument as used in that big proof</p>",
        "id": 133840133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782353
    },
    {
        "content": "<p>Mario, did you follow both links of the messages when I pinged you?</p>",
        "id": 133840136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782363
    },
    {
        "content": "<p>The second linked line contains <code>closure {S, T} = univ</code></p>",
        "id": 133840151,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782382
    },
    {
        "content": "<p>ah, so it does</p>",
        "id": 133840158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782389
    },
    {
        "content": "<p>However, the induction statement is a bit stronger than what you get from <code>closure</code></p>",
        "id": 133840236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782419
    },
    {
        "content": "<p>it says that <code>S</code> and <code>T</code> generate the group as a monoid</p>",
        "id": 133840251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782442
    },
    {
        "content": "<p>My questions were: 1) could we directly prove <code>closure {S, T} = univ</code> without more pain (you seem to say yes) 2) could you generate the induction statement automatically from there?</p>",
        "id": 133840253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782443
    },
    {
        "content": "<p>there is no mention of inverses in the induction theorem</p>",
        "id": 133840273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782472
    },
    {
        "content": "<p>but in the closure of a group you need to also assume closure by inverses</p>",
        "id": 133840290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782489
    },
    {
        "content": "<p>so the real equivalent statement would be <code>monoid.closure {S, T} = univ</code></p>",
        "id": 133840314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782517
    },
    {
        "content": "<p>Ok, let's assume we also define <code>monoid.closure</code>. How do we generate the eliminator?</p>",
        "id": 133840371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782545
    },
    {
        "content": "<p>Would that be a tactic?</p>",
        "id": 133840380,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782556
    },
    {
        "content": "<p>no, a theorem</p>",
        "id": 133840383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782562
    },
    {
        "content": "<p><code>monoid.closure</code> would be defined by an inductive type just like <code>in_closure</code> is</p>",
        "id": 133840392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782584
    },
    {
        "content": "<p>and its eliminator is basically exactly that theorem</p>",
        "id": 133840398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782592
    },
    {
        "content": "<p>You would prove that {x | C x} is a monoid containing <code>{S, T}</code> and so deduce it is <code>univ</code></p>",
        "id": 133840409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782615
    },
    {
        "content": "<p>Would you need to redo that for every generating set of every group, or would you have a general theorem?</p>",
        "id": 133840477,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536782655
    },
    {
        "content": "<p>the general theorem <em>is</em> the eliminator for <code>in_closure</code></p>",
        "id": 133840497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782679
    },
    {
        "content": "<p>the part that needs to be redone is the unfolding of the set <code>{S, T}</code> into two induction hypotheses about multiplying by <code>S</code> and <code>T</code></p>",
        "id": 133840526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536782726
    },
    {
        "content": "<p>I tried to do the exercise, but clearly I missed something because it looks very complicated</p>",
        "id": 133841661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536784044
    },
    {
        "content": "<p>I wrote, at the end of that file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">inductive</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">basic</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">induction_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">SL2Z</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">SL2Z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">HT</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span> <span class=\"o\">({</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">SL2Z</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">this</span> <span class=\"bp\">_</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>The first sorry is irrelevant. But the tactic state after the first sorry is not what I was hoping for. I tried to move on but it looked too complicated to be what you suggested</p>",
        "id": 133841998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536784398
    },
    {
        "content": "<p>There is a theorem that <code>in_closure</code> can be generated by only left multiplication by the generators</p>",
        "id": 133842668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536785150
    },
    {
        "content": "<p>If you want it to be by definition, you will need the following definition for <code>monoid.in_closure</code></p>\n<div class=\"codehilite\"><pre><span></span>inductive monoid.in_closure (s : set α) : α → Prop\n| one : monoid.in_closure 1\n| mul_basic {a b : α} : a ∈ s → monoid.in_closure b → monoid.in_closure (a * b)\n</pre></div>",
        "id": 133842747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536785216
    },
    {
        "content": "<p>Ok, thanks</p>",
        "id": 133843061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536785528
    },
    {
        "content": "<p>That theorem is indeed what I saw I needed to prove, and I was confused because it seemed to contradict the announced triviality</p>",
        "id": 133843071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536785562
    },
    {
        "content": "<p>With the stronger definition of <code>monoid.in_closure</code>, the new proof is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">induction_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">SL2Z</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">SL2Z</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">HT</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"bp\">*</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span> <span class=\"o\">({</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">SL2Z</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">in_closure</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">this</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"bp\">;</span> <span class=\"n\">finish</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133843094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536785596
    },
    {
        "content": "<p>which looks like it could admit a general version</p>",
        "id": 133843118,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536785637
    },
    {
        "content": "<p>Now, I need to go to bed, but I'll probably come back to all this tomorrow</p>",
        "id": 133843177,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536785660
    },
    {
        "content": "<p>Thanks again!</p>",
        "id": 133843182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536785662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> A really cool way to generalise this is to apply this strategy to the action of <code>SL2Z</code> on matrices with determinant <code>m</code>. You get the same sort of \"Euclidean algorithm\"-like induction steps. The end result is that you prove that every matrix is equivalent to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mo fence=\"true\">(</mo><mtable><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>a</mi></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>b</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mi>d</mi></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\begin{pmatrix} a &amp; b \\\\ 0 &amp; d \\end{pmatrix}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.45em;\"></span><span class=\"strut bottom\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"base\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">a</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">b</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathit\">d</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>d</mi><mo>=</mo><mi>m</mi><mo separator=\"true\">,</mo><mspace width=\"1em\"></mspace><mi>a</mi><mo>&gt;</mo><mn>0</mn><mo separator=\"true\">,</mo><mspace width=\"1em\"></mspace><mi>d</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a \\cdot d = m,\\quad a &gt; 0,\\quad d &gt; 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span><span class=\"mbin\">⋅</span><span class=\"mord mathit\">d</span><span class=\"mrel\">=</span><span class=\"mord mathit\">m</span><span class=\"mpunct\">,</span><span class=\"mord mathit\"><span class=\"mspace quad\"></span><span class=\"mord mathit\">a</span></span><span class=\"mrel\">&gt;</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathit\"><span class=\"mspace quad\"></span><span class=\"mord mathit\">d</span></span><span class=\"mrel\">&gt;</span><span class=\"mord mathrm\">0</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>b</mi><mo>&lt;</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le b &lt; d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathrm\">0</span><span class=\"mrel\">≤</span><span class=\"mord mathit\">b</span><span class=\"mrel\">&lt;</span><span class=\"mord mathit\">d</span></span></span></span>.</p>",
        "id": 133860592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536811045
    },
    {
        "content": "<p>In particular, the set of orbits is finite.</p>",
        "id": 133860598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536811055
    },
    {
        "content": "<p>If you apply this to the case <code>m = 1</code> you recover the result that <code>S</code> and <code>T</code> generate <code>SL2Z</code>.</p>",
        "id": 133860606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536811076
    },
    {
        "content": "<p>Once we know this set is finite for arbitrary <code>m : int</code>, then we can define Hecke operators!</p>",
        "id": 133860657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536811122
    },
    {
        "content": "<p>I think that would be a really cool move.</p>",
        "id": 133860676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536811157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> What do you think of this?</p>",
        "id": 133865425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536820286
    },
    {
        "content": "<p>great!</p>",
        "id": 133865474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536820342
    },
    {
        "content": "<p>How hard do you think it is to adapt your proof?</p>",
        "id": 133865482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536820375
    },
    {
        "content": "<p>maybe 30% hard!</p>",
        "id": 133865538,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536820483
    },
    {
        "content": "<p>can't wait to see someone implement it!</p>",
        "id": 133865539,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536820487
    },
    {
        "content": "<p>Lol</p>",
        "id": 133865541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536820494
    },
    {
        "content": "<p>Do we have notation for group actions?</p>",
        "id": 133865606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536820635
    },
    {
        "content": "<p>I used <code>\\ci</code> a long time ago</p>",
        "id": 133865720,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536820878
    },
    {
        "content": "<p>But it is not in mathlib?</p>",
        "id": 133865802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536821029
    },
    {
        "content": "<p>it isn't</p>",
        "id": 133865874,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536821157
    },
    {
        "content": "<p>Hmm, so I generalised the simp lemmas a bit. Now I need to cook up a new induction statement.</p>",
        "id": 133865918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536821180
    },
    {
        "content": "<p>Should <code>C 1</code> be replaced by the explicit representatives that I described above?</p>",
        "id": 133865931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536821217
    },
    {
        "content": "<p>sure</p>",
        "id": 133866151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536821595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Does this look good?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">HT</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 133866338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536821894
    },
    {
        "content": "<p>what if m is negative?</p>",
        "id": 133866356,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536821957
    },
    {
        "content": "<p>or 0?</p>",
        "id": 133866357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536821970
    },
    {
        "content": "<p>Hmm, good point, I guess I should drop my requirement on <code>d</code>.</p>",
        "id": 133866417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536822028
    },
    {
        "content": "<p>Let me think it through...</p>",
        "id": 133866422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536822045
    },
    {
        "content": "<p>For <code>m = 0</code> the statement might be false.</p>",
        "id": 133866507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536822168
    },
    {
        "content": "<p>You have matrices <code>(a, 0, 0, 0)</code>. And I think they are not sharing orbits, are they?</p>",
        "id": 133866514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536822212
    },
    {
        "content": "<p>So I drop <code>h3</code>, and <code>h5</code> becomes <code>b &lt; (abs d)</code>.</p>",
        "id": 133866572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536822282
    },
    {
        "content": "<p>What is the general strategy to kill this goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">det</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">}</span>\n<span class=\"err\">⊢</span> <span class=\"n\">C</span> <span class=\"n\">B</span>\n</pre></div>",
        "id": 133866862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536822811
    },
    {
        "content": "<p><code>exact H</code> doesn't work. Somehow I'dd like to prove it by some extensionality or something.</p>",
        "id": 133866866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536822840
    },
    {
        "content": "<p>Did you try convert H ?</p>",
        "id": 133867094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536823211
    },
    {
        "content": "<p><code>cases B; exact H</code></p>",
        "id": 133867109,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536823280
    },
    {
        "content": "<p>Kenny's solution is more efficient. But I think it's still good to keep in mind that <code>convert H, cases B, congr</code> works</p>",
        "id": 133867838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536824623
    },
    {
        "content": "<p>Because <code>convert H</code> is a natural thing to try when <code>exact H</code> refuses to work</p>",
        "id": 133867881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536824665
    },
    {
        "content": "<p>I disagree</p>",
        "id": 133867887,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536824685
    },
    {
        "content": "<p><code>congr</code> can go uncontrollable</p>",
        "id": 133867892,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536824697
    },
    {
        "content": "<p>(<code>convert</code> is just a kind of <code>congr</code>)</p>",
        "id": 133867893,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536824703
    },
    {
        "content": "<p>I'm not saying this will always work</p>",
        "id": 133867908,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536824733
    },
    {
        "content": "<p>I'm saying we shouldn't make <code>convert</code> our \"first resort\"</p>",
        "id": 133867912,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536824756
    },
    {
        "content": "<p>for lack of a better word</p>",
        "id": 133867952,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536824769
    },
    {
        "content": "<p>Here is what I've got so far</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">elab_as_eliminator</span><span class=\"o\">]</span>\n<span class=\"kn\">protected</span> <span class=\"kn\">theorem</span> <span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h1</span><span class=\"o\">]</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">HT</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">hSid</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"n\">B</span><span class=\"o\">))))</span> <span class=\"bp\">=</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">SL2Z_M_</span><span class=\"o\">],</span>\n<span class=\"k\">have</span> <span class=\"n\">HS&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">HS</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">HS</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">hSid</span> <span class=\"n\">B</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">hTinv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">S</span> <span class=\"n\">B</span><span class=\"o\">))))))</span> <span class=\"bp\">=</span> <span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span><span class=\"bp\">⁻¹</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">is_monoid_action</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">)]}</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">HT&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span><span class=\"bp\">⁻¹</span> <span class=\"n\">B</span><span class=\"o\">),</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">HS</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">HS</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">HT</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">HS</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">HT</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">HS</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hTinv</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">},</span>\n<span class=\"c1\">-- have HT2 : ∀ n : ℤ, C (T^n),</span>\n<span class=\"c1\">--   from λ n, int.induction_on n H1</span>\n<span class=\"c1\">--     (λ i ih, by rw [add_comm, gpow_add]; from HT _ ih)</span>\n<span class=\"c1\">--     (λ i ih, by rw [sub_eq_neg_add, gpow_add]; from HT1 _ ih),</span>\n<span class=\"k\">have</span> <span class=\"n\">HT3</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">HT&#39;</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">is_monoid_action</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_monoid_action</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">HT4</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span><span class=\"bp\">⁻¹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">HT</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"n\">T</span><span class=\"bp\">⁻¹</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">is_monoid_action</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_monoid_action</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">HT5</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gpow_zero</span><span class=\"o\">,</span> <span class=\"n\">is_monoid_action</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">)]</span><span class=\"bp\">;</span> <span class=\"k\">from</span> <span class=\"n\">id</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span><span class=\"o\">,</span> <span class=\"n\">ih1</span> <span class=\"err\">$</span> <span class=\"n\">HT3</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"k\">begin</span>\n      <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">is_monoid_action</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">ih2</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">gpow_add</span><span class=\"o\">,</span> <span class=\"n\">gpow_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"n\">assumption</span> <span class=\"kn\">end</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">ih1</span> <span class=\"n\">ih2</span><span class=\"o\">,</span> <span class=\"n\">ih1</span> <span class=\"err\">$</span> <span class=\"n\">HT4</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"k\">begin</span>\n      <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">is_monoid_action</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">ih2</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sub_eq_neg_add</span><span class=\"o\">,</span> <span class=\"n\">gpow_add</span><span class=\"o\">,</span> <span class=\"n\">gpow_neg_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"n\">assumption</span> <span class=\"kn\">end</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 133868391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536825531
    },
    {
        "content": "<p>Isn't it even more contrived to prove first the induction lemma in that case?</p>",
        "id": 133868669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536825992
    },
    {
        "content": "<p>I don't know. But if we want Hecke operators, we need it.</p>",
        "id": 133868818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536826209
    },
    {
        "content": "<p>Why don't you want to state the result you need in the way you would state it on paper, and then deduce the induction statement?</p>",
        "id": 133868845,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536826321
    },
    {
        "content": "<p>Is there an available written proof you are trying to follow?</p>",
        "id": 133869045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536826585
    },
    {
        "content": "<p>No, I just cooked up a proof this morning.</p>",
        "id": 133869613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536827326
    },
    {
        "content": "<p>There are probably proofs around, but I haven't found one yet.</p>",
        "id": 133869619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536827338
    },
    {
        "content": "<p>Do you need help here?</p>",
        "id": 133869714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536827453
    },
    {
        "content": "<p>I'm learning <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 133870014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536827970
    },
    {
        "content": "<p>I've pushed a proof that has 1 <code>sorry</code> for the case <code>A.c = 0</code>.</p>",
        "id": 133870584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536828672
    },
    {
        "content": "<p>I still need to learn how to juggle around hypotheses.</p>",
        "id": 133870594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536828694
    },
    {
        "content": "<p>A mathematician says: Ooh, if <code>A.a ≤ 0</code> then replace <code>A</code> by <code>-A</code>. I find it hard to make such a step in Lean.</p>",
        "id": 133870643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536828730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Do you want to teach me?</p>",
        "id": 133870668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536828781
    },
    {
        "content": "<p>where did you push?</p>",
        "id": 133870692,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536828809
    },
    {
        "content": "<p>well <code>S*S*A = -A</code></p>",
        "id": 133870698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536828819
    },
    {
        "content": "<p>so you prove it for <code>S*S*A</code> first</p>",
        "id": 133870707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536828833
    },
    {
        "content": "<p>Fail... I only commited. Now I pushed.</p>",
        "id": 133870708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536828834
    },
    {
        "content": "<p>I have <code>hneg : ∀ (B : Mat m), SL2Z_M_ m S (SL2Z_M_ m S B) = -B</code> in my context</p>",
        "id": 133870763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536828872
    },
    {
        "content": "<p>I also see <code>n n : ℕ,</code> which is a good recipe for confusion</p>",
        "id": 133870798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536828934
    },
    {
        "content": "<p>That is because of the <code>strong_induction</code></p>",
        "id": 133870954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536829105
    },
    {
        "content": "<p>I don't understand why <code>strong_induction</code> does this, but we could safely forget about the first <code>n</code>. It has played it's role, and the new <code>n</code> took over.</p>",
        "id": 133870981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536829164
    },
    {
        "content": "<p>Why don't you use another name for the new <code>n</code>?</p>",
        "id": 133870997,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536829185
    },
    {
        "content": "<p>Anyway, I can't help with this sorry without knowing what is the paper proof</p>",
        "id": 133871066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536829238
    },
    {
        "content": "<p>Never mind. I might have found a way out.</p>",
        "id": 133871215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536829474
    },
    {
        "content": "<p>I did find a way out, but it is becoming pretty crazy. (I also had lunch. Please don't be worried that I kept banging my head against this wall for 3 hours.)</p>",
        "id": 133876350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536836588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Would you want to take over?</p>",
        "id": 133876357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536836601
    },
    {
        "content": "<p>I’m not free now</p>",
        "id": 133876502,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536836795
    },
    {
        "content": "<p>There are 3 <code>sorry</code>s left in <a href=\"https://github.com/semorrison/kbb/blob/master/src/SL2Z_generators.lean#L118-L125\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/master/src/SL2Z_generators.lean#L118-L125\">https://github.com/semorrison/kbb/blob/master/src/SL2Z_generators.lean#L118-L125</a>,</p>",
        "id": 133879346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536840249
    },
    {
        "content": "<p>they should all be <code>by schoolkid</code>.</p>",
        "id": 133879350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536840257
    },
    {
        "content": "<p>Let's say I try the first one</p>",
        "id": 133886099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536846977
    },
    {
        "content": "<p>Ooh, I was just trying that one.</p>",
        "id": 133887384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536848055
    },
    {
        "content": "<p>I'm almost there!</p>",
        "id": 133887395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848071
    },
    {
        "content": "<p>I just finished a maths paper. So I am allowing myself some Lean time.</p>",
        "id": 133887396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536848071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I only need <code>1 ≤ A.d * A.d</code></p>",
        "id": 133887413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536848089
    },
    {
        "content": "<p>I'm at <code>this : A.d * A.d &gt; 0\n⊢ A.d * A.d - 1 ≥ 0</code></p>",
        "id": 133887417,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848091
    },
    {
        "content": "<p>Right, same place (-;</p>",
        "id": 133887434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536848106
    },
    {
        "content": "<p>I'll move to sorry₂</p>",
        "id": 133887447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536848120
    },
    {
        "content": "<p>Oh no, for Lean it's not the same place</p>",
        "id": 133887464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848133
    },
    {
        "content": "<p>I'm soo close <code>this : A.d * A.d &gt; 0 ⊢ 1 ≤ A.d * A.d</code></p>",
        "id": 133887759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848336
    },
    {
        "content": "<p>Done!</p>",
        "id": 133888301,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848723
    },
    {
        "content": "<p>Should I move to the third one?</p>",
        "id": 133888383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848776
    },
    {
        "content": "<p>Yes please.</p>",
        "id": 133888446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536848837
    },
    {
        "content": "<p>Did you push?</p>",
        "id": 133888450,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536848840
    },
    {
        "content": "<p>Do you want me to push?</p>",
        "id": 133888471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848859
    },
    {
        "content": "<p>I pushed</p>",
        "id": 133888556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536848917
    },
    {
        "content": "<p>This should be a standard lemma: <code>A.b / A.d * A.d ≤ A.b</code> But I can't find it...</p>",
        "id": 133888816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536849116
    },
    {
        "content": "<p>What is this <code>/</code>? Euclidean quotient?</p>",
        "id": 133888868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849139
    },
    {
        "content": "<p>seems so</p>",
        "id": 133888951,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849225
    },
    {
        "content": "<p>Right, so <code>(11 / (-3)) = -3</code></p>",
        "id": 133889038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536849290
    },
    {
        "content": "<p><code>int.div_mul_le</code>? Are you working over <code>int</code>? I'm not really following the context.</p>",
        "id": 133889145,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1536849371
    },
    {
        "content": "<p>bingo!</p>",
        "id": 133889184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Are you sure this sorry is true?</p>",
        "id": 133889768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849894
    },
    {
        "content": "<p>It actually looks really weird</p>",
        "id": 133889783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849906
    },
    {
        "content": "<p>I'm done with 2</p>",
        "id": 133889898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536849972
    },
    {
        "content": "<p>You're worried about 3?</p>",
        "id": 133889907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536849976
    },
    {
        "content": "<p>yes</p>",
        "id": 133889911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536849979
    },
    {
        "content": "<p>Hmm, I think it is fine. Proof by example: <code>abs (101 - (101/13 * 13)) ≤ abs(13)</code>, which reduces to <code>10 ≤ 13</code>.</p>",
        "id": 133890106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536850197
    },
    {
        "content": "<p>By the way, I pushed my fix of sorry₂</p>",
        "id": 133890209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536850264
    },
    {
        "content": "<p>hold on</p>",
        "id": 133890585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536850564
    },
    {
        "content": "<p>You sent me on a wrong track to make sure you'll be done first!</p>",
        "id": 133890611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536850577
    },
    {
        "content": "<p>Guess what, I have to catch a train. So I won't be Leaning for the next 90 minutes.</p>",
        "id": 133890810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536850733
    },
    {
        "content": "<p>And now you set me a deadline!</p>",
        "id": 133890829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536850749
    },
    {
        "content": "<p>And I haven't made any progress on sorry₃</p>",
        "id": 133890833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536850755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> is online <span class=\"emoji emoji-23f3\" title=\"time ticking\">:time_ticking:</span></p>",
        "id": 133890842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536850767
    },
    {
        "content": "<p>hi</p>",
        "id": 133890852,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536850779
    },
    {
        "content": "<p>done</p>",
        "id": 133893902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536853176
    },
    {
        "content": "<p>so much suffering...</p>",
        "id": 133893911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536853186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thank you so much!</p>",
        "id": 133898166,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536857534
    },
    {
        "content": "<p>The stupid lemma in the middle is now in mathlib</p>",
        "id": 133898533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536857946
    },
    {
        "content": "<p>I also removed a couple of simp that were in the middle of the proof hence frowned upon</p>",
        "id": 133898624,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536858042
    },
    {
        "content": "<p>Ok, I realised that it might have been easier to assume <code>m &gt; 0</code>. And then deduce the result for negative <code>m</code> via an <code>SL2Z</code>-equivariant isom between <code>Mat m</code> and <code>Mat -m</code>.</p>",
        "id": 133898828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536858299
    },
    {
        "content": "<p>Anyway, the next step would be to use this horrible lemma to prove that for <code>m ≠ 0</code> the set of orbits of <code>SL2Z_M_</code> is finite.</p>",
        "id": 133898847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536858330
    },
    {
        "content": "<p>Once we have that, we can define the Hecke operator.</p>",
        "id": 133898860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536858347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Are you interested in golfing what we came up with?</p>",
        "id": 133905932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536865161
    },
    {
        "content": "<p>after I finish with my PR</p>",
        "id": 133905941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536865174
    },
    {
        "content": "<p>Which PR?</p>",
        "id": 133906100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536865319
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/pull/345\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/345\">https://github.com/leanprover/mathlib/pull/345</a></p>",
        "id": 133906246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536865436
    },
    {
        "content": "<p>Nice!</p>",
        "id": 133906679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536865839
    },
    {
        "content": "<p>I made a small start on SL2Z\\SL2ZM, simply telling Lean what this mean, and somehow stating what I think Johan told us we should prove in order to get finiteness</p>",
        "id": 133912059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536871258
    },
    {
        "content": "<p>But what is stated may be false</p>",
        "id": 133912075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536871274
    },
    {
        "content": "<p>and the names are stupid too</p>",
        "id": 133912087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536871301
    },
    {
        "content": "<p>Thanks! That is exactly what I had in mind. (I do think we might need a bit more conditions in <code>reps</code>. I think we can/should just copy the condition from <code>H0</code> in the induction lemma.</p>",
        "id": 133922532,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536885677
    },
    {
        "content": "<p>The set of orbits is only finite if <code>m ≠ 0</code>. Otherwise it is parameterised by pairs of coprime integers (up to ±1).</p>",
        "id": 133922587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536885748
    },
    {
        "content": "<p>Done</p>",
        "id": 133937043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536910703
    },
    {
        "content": "<p>Note that a small modification of the setup is required to recover the generation theorem for SL2. The relevant action is not the action of the full SL2 on Mat m, but only the monoid spanned by S and T. But otherwise the proof should be the same</p>",
        "id": 133937107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536910805
    },
    {
        "content": "<p>Cool!</p>",
        "id": 133937363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536911263
    },
    {
        "content": "<p>I guess for the finiteness result that is still sorried, we could do the dual thing. Build an injection into a product of <code>fin</code>s.</p>",
        "id": 133937413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536911321
    },
    {
        "content": "<p>are we going to restate the SL2Z theorem as a special case?</p>",
        "id": 133938572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536912968
    },
    {
        "content": "<p>also, it doesn't compile because someone deleted mul_self_pos</p>",
        "id": 133938580,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536913002
    },
    {
        "content": "<p>It does compile</p>",
        "id": 133938658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536913166
    },
    {
        "content": "<p><code>mul_self_pos</code> is now in mathlib</p>",
        "id": 133938662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536913176
    },
    {
        "content": "<p>Did you try to compile using <code>leanpkg build</code>? (hint: the correct answer is yes)</p>",
        "id": 133938669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536913202
    },
    {
        "content": "<p>Yes, we could restate the SL2Z theorem as a special case. It should cost much and will be convenient</p>",
        "id": 133938729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536913251
    },
    {
        "content": "<p>Feel free to do so, I need to do real work now</p>",
        "id": 133938734,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536913261
    },
    {
        "content": "<blockquote>\n<p><code>mul_self_pos</code> is now in mathlib</p>\n</blockquote>\n<p>well I haven't updated mathlib, that's why</p>",
        "id": 133938801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536913352
    },
    {
        "content": "<p>leanpkg will do that for you</p>",
        "id": 133939553,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536914411
    },
    {
        "content": "<p>Use leanpkg build</p>",
        "id": 133939561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536914429
    },
    {
        "content": "<p>And restart Lean in VScode afterwards...</p>",
        "id": 133939915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536914939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  you see... I might change your proof if you don't mind</p>",
        "id": 133971124,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536950168
    },
    {
        "content": "<p>I just pushed a first start on hecke operators...</p>",
        "id": 133971164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536950237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Please assume <code>m &gt; 0</code></p>",
        "id": 133971202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536950276
    },
    {
        "content": "<p>what do you mean</p>",
        "id": 133971249,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536950285
    },
    {
        "content": "<p>It will probably make your life easier. And I now realise that we won't ever use <code>m &lt; 0</code></p>",
        "id": 133971264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536950297
    },
    {
        "content": "<p>Not in this project.</p>",
        "id": 133971274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536950316
    },
    {
        "content": "<p>oh well</p>",
        "id": 133971281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536950323
    },
    {
        "content": "<p>And outside the project, the can deduce the result by an <code>SL2Z</code>-equivariant map <code>Mat m → Mat -m</code></p>",
        "id": 133971297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536950343
    },
    {
        "content": "<p>right</p>",
        "id": 133971327,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536950374
    },
    {
        "content": "<blockquote>\n<p>Patrick Massot  you see... I might change your proof if you don't mind</p>\n</blockquote>\n<p>I have no idea what you are talking about</p>",
        "id": 133971438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536950504
    },
    {
        "content": "<p>your whole induction_on proof</p>",
        "id": 133971446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536950514
    },
    {
        "content": "<p>It's not my proof, I only contributed a handful of schoolkid lines</p>",
        "id": 133971559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536950600
    },
    {
        "content": "<p>oh, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> then</p>",
        "id": 133971567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536950610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Sure, go ahead!</p>",
        "id": 133971673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536950715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> this is the original base case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133972834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536951941
    },
    {
        "content": "<p>it can be changed to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">H0</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">nat_abs</span> <span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">),</span> <span class=\"n\">C</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 133972846,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536951959
    },
    {
        "content": "<p>1) <code>h1</code> is redundant. It follows from <code>h0</code> and <code>A.det</code>. (I realised this half-way writing my own proof.)<br>\n2) Now you have no upper-bound on <code>A.b</code>. So how will you prove finiteness of orbits?</p>",
        "id": 133972966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536952051
    },
    {
        "content": "<p>what do you mean I have no upper-bound on A.b?</p>",
        "id": 133973018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536952082
    },
    {
        "content": "<p>I changed two <code>le</code> to <code>lt</code></p>",
        "id": 133973037,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536952093
    },
    {
        "content": "<p>it restricted things</p>",
        "id": 133973041,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536952097
    },
    {
        "content": "<p>Aah, sorry, I didn't see the <code>h4</code>.</p>",
        "id": 133973056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536952116
    },
    {
        "content": "<p>Yes, I know you could make those restrictions, but I didn't know if it would make the proof easier.</p>",
        "id": 133973068,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536952133
    },
    {
        "content": "<p>I thought things would get harder.</p>",
        "id": 133973071,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536952139
    },
    {
        "content": "<p>I always do more work to ensure that the users do less work</p>",
        "id": 133973178,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536952207
    }
]