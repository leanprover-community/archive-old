[
    {
        "content": "<p>It would be great if we could push the splitting fields branch to the point where we can define the Galois group of a splitting field.</p>",
        "id": 133967305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536946116
    },
    {
        "content": "<p>So far we can adjoint the root of an irreducible polynomial. There is a <code>sorry</code>d statement of the universal property of adjoining a root.</p>",
        "id": 133967354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536946167
    },
    {
        "content": "<p>Ooh, the branch I'm talking about is not in this repo, but in the community mathlib.</p>",
        "id": 133967371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536946196
    },
    {
        "content": "<p>If we combine this with the stuff on Hecke operators, then we'll have the formal abstract of Kevin's paper (modulo one fact that requires a Mjölnir to prove).</p>",
        "id": 133967448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536946262
    },
    {
        "content": "<p>Little hole in the quotient ring api. I'll leave it to others to <span class=\"emoji emoji-1f3cc\" title=\"golf\">:golf:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">quotient_ring</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ideal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">quotient_ring</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">quotient_ring</span><span class=\"bp\">.</span><span class=\"n\">quotient_rel</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient_rel_eq</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">H</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134084535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537168323
    },
    {
        "content": "<p>Here is <code>adjoin_root.lift</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lift</span> <span class=\"o\">{</span><span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_field_hom</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">adjoin_root</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">L</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">quotient_ring</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">span</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"o\">({</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">is_ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">eval₂</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">span_singleton</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">eval₂_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134085269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169354
    },
    {
        "content": "<p>Which can undoubtly be golfed</p>",
        "id": 134085272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think the next step was some really crazy inductive proof, right?</p>",
        "id": 134085351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169442
    },
    {
        "content": "<p>yes</p>",
        "id": 134085364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537169468
    },
    {
        "content": "<p>the next step is the splitting field for one polynomial</p>",
        "id": 134085383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537169508
    },
    {
        "content": "<p>Do we know that every polynomial over a field has an irreducible factor?</p>",
        "id": 134085455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537169631
    },
    {
        "content": "<p>I think so</p>",
        "id": 134085540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169722
    },
    {
        "content": "<p>We know that <code>polynomial K</code> is a PID</p>",
        "id": 134085543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169729
    },
    {
        "content": "<p>and every PID is a UFD</p>",
        "id": 134085545,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169734
    },
    {
        "content": "<p>I think that latter fact is now also in mathlib</p>",
        "id": 134085546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169741
    },
    {
        "content": "<p>we have UFDs?</p>",
        "id": 134085548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537169748
    },
    {
        "content": "<p>Hmm, I guess there is a standard lemma on <code>lift_mk</code> or something?</p>",
        "id": 134085554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169760
    },
    {
        "content": "<p>We'll also need that.</p>",
        "id": 134085592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169764
    },
    {
        "content": "<p>yes</p>",
        "id": 134085596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537169768
    },
    {
        "content": "<p>Yes, Johannes added UFD's after Orsay</p>",
        "id": 134085598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169777
    },
    {
        "content": "<p>So we need this <code>lift_mk</code> for quotient rings, and then for adjoin root.</p>",
        "id": 134085606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169795
    },
    {
        "content": "<p>the fact you want about <code>lift</code> is composition with the coercion from <code>K</code>, and value at the root</p>",
        "id": 134085609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537169797
    },
    {
        "content": "<p>is the proof constructive? (i.e. is there a function from a polynomial to its smallest irreducible factor or something)</p>",
        "id": 134085677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537169910
    },
    {
        "content": "<p>Not only stuff from <code>K</code>, right? Also <code>K[X]</code></p>",
        "id": 134085678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169911
    },
    {
        "content": "<p>Hmm, factoring is hard.</p>",
        "id": 134085688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169931
    },
    {
        "content": "<p>that isn't needed, it follows by homness</p>",
        "id": 134085689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537169934
    },
    {
        "content": "<p>???</p>",
        "id": 134085693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537169945
    },
    {
        "content": "<p>but I guess the quotient map is equal to the eval map, we want to know that</p>",
        "id": 134085700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537169981
    },
    {
        "content": "<p>oh, you didn't prove <code>lift</code> is a field hom</p>",
        "id": 134085747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170025
    },
    {
        "content": "<p>we definitely need that</p>",
        "id": 134085751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170036
    },
    {
        "content": "<p>I didn't even prove it is a ring hom</p>",
        "id": 134085864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170238
    },
    {
        "content": "<p>Working on that now</p>",
        "id": 134085866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170241
    },
    {
        "content": "<p>I think those are the same</p>",
        "id": 134085909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I need some help to get the right statements for these API things: this is in the <code>quotient_ring</code> namespace:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ideal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">quotient_ring</span><span class=\"bp\">.</span><span class=\"n\">quotient</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">quotient_ring</span><span class=\"bp\">.</span><span class=\"n\">quotient_rel</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_submodule</span><span class=\"bp\">.</span><span class=\"n\">quotient_rel_eq</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">lift_mk</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_ideal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134086046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170556
    },
    {
        "content": "<p>Should the latter be a simp-lemma?</p>",
        "id": 134086049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170565
    },
    {
        "content": "<p>At the moment the <code>⟦a⟧</code> notation is broken.</p>",
        "id": 134086054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170587
    },
    {
        "content": "<p>This is my first time working with quotients in Lean...</p>",
        "id": 134086097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170610
    },
    {
        "content": "<p>I forget the details but I don't think <code>⟦⟧</code> is part of the interface</p>",
        "id": 134086098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170618
    },
    {
        "content": "<p>The only \"public\" functions are the map from <code>K</code>, and the root element</p>",
        "id": 134086108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170664
    },
    {
        "content": "<p>No, I'm working on quotient rings at the moment.</p>",
        "id": 134086163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170727
    },
    {
        "content": "<p>Splitting field will come later.</p>",
        "id": 134086165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170734
    },
    {
        "content": "<p>We don't even have <code>lift</code> for quotient rings at the moment.</p>",
        "id": 134086167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170744
    },
    {
        "content": "<p>I guess we want that notation for general quotient rings, right?</p>",
        "id": 134086182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170780
    },
    {
        "content": "<p>ah okay</p>",
        "id": 134086190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170794
    },
    {
        "content": "<p>you want to redefine <code>mk</code> for that</p>",
        "id": 134086193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170806
    },
    {
        "content": "<p>that way you can give it the right type and find it with typeclass inference</p>",
        "id": 134086200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170841
    },
    {
        "content": "<p>when you prove it is a ring hom</p>",
        "id": 134086240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170850
    },
    {
        "content": "<p>Aah, <code>local attribute [instance] quotient_rel</code> fixes it.</p>",
        "id": 134086263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537170939
    },
    {
        "content": "<p>that won't help outside the section</p>",
        "id": 134086321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537170999
    },
    {
        "content": "<p>you still want a public <code>mk</code> function</p>",
        "id": 134086330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537171011
    },
    {
        "content": "<p>Right. Quotient rings already had that. But they didn't have <code>lift</code></p>",
        "id": 134086494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537171218
    },
    {
        "content": "<p>in that case you should use it in the statement of <code>lift_mk</code></p>",
        "id": 134086539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537171288
    },
    {
        "content": "<p>Ok, this is what I now have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">quotient_ring</span> <span class=\"c1\">-- move this to the right file</span>\n<span class=\"kn\">open</span> <span class=\"n\">is_submodule</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">quotient_rel</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ideal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">quotient</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">@</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">quotient_rel</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">eq_of_sub_eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">quotient_rel_eq</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">H</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">lift_mk</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_ideal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">quotient_ring</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom_mk</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_ideal</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"k\">show</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"mi\">1</span><span class=\"err\">⟧</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"k\">show</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">mk</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a₁</span><span class=\"err\">⟧</span> <span class=\"bp\">+</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a₂</span><span class=\"err\">⟧</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_ring</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom_mk</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"err\">⟦</span><span class=\"n\">a₁</span> <span class=\"bp\">+</span> <span class=\"n\">a₂</span><span class=\"err\">⟧</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a₁</span><span class=\"err\">⟧</span> <span class=\"bp\">+</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a₂</span><span class=\"err\">⟧</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lift_mk</span><span class=\"o\">,</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"k\">show</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">mk</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a₁</span><span class=\"err\">⟧</span> <span class=\"bp\">*</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a₂</span><span class=\"err\">⟧</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">quotient_ring</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom_mk</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"err\">⟦</span><span class=\"n\">a₁</span> <span class=\"bp\">*</span> <span class=\"n\">a₂</span><span class=\"err\">⟧</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a₁</span><span class=\"err\">⟧</span> <span class=\"bp\">*</span> <span class=\"n\">lift</span> <span class=\"n\">S</span> <span class=\"n\">f</span> <span class=\"n\">H</span> <span class=\"err\">⟦</span><span class=\"n\">a₂</span><span class=\"err\">⟧</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lift_mk</span><span class=\"o\">,</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">quotient_ring</span>\n</pre></div>",
        "id": 134087318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537172381
    },
    {
        "content": "<p>You should be able to use <code>quotient.lift'</code> instead of <code>@quotient.lift ...</code></p>",
        "id": 134087827,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537173190
    },
    {
        "content": "<p>Yes, I've been golfing them a bit. I didn't use the <code>lift'</code> version though.</p>",
        "id": 134087890,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537173290
    },
    {
        "content": "<p>Ok, I pushed a bunch of changes</p>",
        "id": 134088444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537174144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think I might want to try the induction proof now...</p>",
        "id": 134088461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537174165
    },
    {
        "content": "<p>Hmm, so we have UFD's but we don't know that <code>K[X]</code> is an example of a UFD</p>",
        "id": 134089038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537174953
    },
    {
        "content": "<p>What we need to know is that if we have a polynomial <code>f</code> with a root <code>x</code>, then we can factor <code>f</code> as <code>(X - x) * g</code>, and the degree of <code>g</code> is lower than <code>degree f</code>.</p>",
        "id": 134089066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537175039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Did you have stuff like that in your QR project?</p>",
        "id": 134089116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537175054
    },
    {
        "content": "<p>This is Euclidean division</p>",
        "id": 134089125,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537175070
    },
    {
        "content": "<p>I think we have that</p>",
        "id": 134089129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537175076
    },
    {
        "content": "<p>It's in polynomial.lean</p>",
        "id": 134089131,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537175084
    },
    {
        "content": "<p>Great</p>",
        "id": 134089132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537175088
    },
    {
        "content": "<p>dvd_iff_is_root or something</p>",
        "id": 134089135,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537175097
    },
    {
        "content": "<p>Can't find it. We have similar stuff. <code>p %ₘ (X - C a) = C (p.eval a)</code> and <code>dvd_iff_mod_by_monic_eq_zero</code></p>",
        "id": 134089258,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537175263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Have you thought about PID → UFD in Lean?</p>",
        "id": 134089262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537175269
    },
    {
        "content": "<p>Euclidean_domain -&gt; UFD might be easier, and that all that's needed.</p>",
        "id": 134089321,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1537175321
    },
    {
        "content": "<p>I didn't think about it yet, but I surely want it. I guess that's my project for today  :-)</p>",
        "id": 134089398,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537175419
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 134089401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537175432
    },
    {
        "content": "<p>Your version of UFD is not a Prop. Do we also want a version where it is a prop?</p>",
        "id": 134089414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537175468
    },
    {
        "content": "<p>Johan, what's your plan? Are you still working towards a specific goal before the birthday?</p>",
        "id": 134089423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537175505
    },
    {
        "content": "<p>when is the b-day again?</p>",
        "id": 134089464,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537175523
    },
    {
        "content": "<p>Friday</p>",
        "id": 134089469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537175527
    },
    {
        "content": "<p>I'm not competent enough to work on <code>pi</code></p>",
        "id": 134089474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537175547
    },
    {
        "content": "<p>Maybe I shouldn't distract the experts, and let them work on that.</p>",
        "id": 134089476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537175558
    },
    {
        "content": "<p>I think what is really needed is Mario and Johannes telling us whether they think anything from the kbb repository could be PR'ed on Friday</p>",
        "id": 134089490,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537175609
    },
    {
        "content": "<p>How would you even show that <code>K[X]</code> is an example of a UFD, with the current definition of UFD? You have to give an algorithm that factors polynomials, right? I'm not sure if those even exist for arbitrary <code>K</code>...</p>",
        "id": 134096940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537186581
    },
    {
        "content": "<p>Or should we just use choice, somehow?</p>",
        "id": 134096959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537186625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> did you have a particular plan here?</p>",
        "id": 134096976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537186650
    },
    {
        "content": "<p>Yes, in the worst case I will use <code>choice</code>.</p>",
        "id": 134096996,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537186682
    },
    {
        "content": "<p>Ok, I see</p>",
        "id": 134097036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537186695
    },
    {
        "content": "<p>Here is a little hole in the <code>polynomial</code> api:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_id</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">id</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">polynomial</span>\n</pre></div>",
        "id": 134098587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537188828
    },
    {
        "content": "<p>How would I unsorry that?</p>",
        "id": 134098592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537188835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> By the way, <code>kbb</code> doesn't build for me: <code>SL2Z_M.finitely_many_orbits</code> is missing</p>",
        "id": 134098676,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537188960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <code>eval₂</code> is defined using the <code>finsupp.sum</code> operator. The combination of <code>single_eq_C_mul_X</code> and <code>finsupp.sum_single</code> should be enough. With <code>sum_single</code> you can proof that the polynomial <code>f</code> has a sum representation over <code>single</code> and with <code>single_eq_C_mul_X</code> you change the representation to <code>C (id a) * X^n</code></p>",
        "id": 134098925,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537189224
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> By the way, <code>kbb</code> doesn't build for me: <code>SL2Z_M.finitely_many_orbits</code> is missing</p>\n</blockquote>\n<p>Aaah, Kenny changed this. It is now</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">finiteness</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"err\">$</span> <span class=\"n\">action_rel</span> <span class=\"err\">$</span> <span class=\"n\">SL2Z_M_</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">of_equiv</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">reps</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reps_equiv</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n</pre></div>\n\n\n<p>on lines 344-345 of <code>SL2Z_generators.lean</code></p>",
        "id": 134099100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537189459
    },
    {
        "content": "<p>I think that error was in the Hecke operator file? I'm afraid that file won't really see any improvements. I don't have the time, and probably it is not realistic to work on it before Friday anyway.</p>",
        "id": 134099131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537189510
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">map_id</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"n\">id</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">map</span><span class=\"o\">,</span><span class=\"n\">eval₂</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">single_eq_C_mul_X</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 134099330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537189771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Thanks, done <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span></p>",
        "id": 134099343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537189787
    },
    {
        "content": "<p>I think that progress on splitting fields will require a bit of an api for <code>k[x]</code> as UFD. Things like units of <code>R[x]</code> is units of <code>R</code>. Every polynomial in <code>k[x]</code> of degree (not <code>nat_degree</code>!) equal to 0 is a unit, and vice versa. All polynomials of degree 1 are irreducible. Etc...</p>",
        "id": 134114645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537205199
    },
    {
        "content": "<p>I have not started on any of this. But I also found myself mentally blocked on writing down the definition of a splitting field.</p>",
        "id": 134114670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537205235
    },
    {
        "content": "<p>I suspect those issues are related.</p>",
        "id": 134114674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537205244
    },
    {
        "content": "<p>I don't know if this is still needed, but PID -&gt; UFD is finished now</p>",
        "id": 134259146,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537380987
    },
    {
        "content": "<p>Nice! I think the hope was to make progress on splitting field, which will probably not happen very soon. But this is good to know anyway.</p>",
        "id": 134259321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537381162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Cool. Thanks a lot! I think this should help with the splitting fields branch. The next steps there are probably proving that non-zero constants are exactly the units and linear polynomials are irreducible.</p>",
        "id": 134260767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537382444
    },
    {
        "content": "<p>Once that is know, I think we can start some sort of construction of splitting fields that inducts on the degree of the polynomial.</p>",
        "id": 134260795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537382483
    }
]