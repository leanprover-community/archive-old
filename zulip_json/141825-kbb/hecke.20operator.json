[
    {
        "content": "<p>The next step would be to define <a href=\"https://en.wikipedia.org/wiki/Hecke_operator#Explicit_formula\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Hecke_operator#Explicit_formula\">https://en.wikipedia.org/wiki/Hecke_operator#Explicit_formula</a> on the subspace of <code>Petersson_weight k</code> functions on the upper half plane.</p>",
        "id": 133964447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942779
    },
    {
        "content": "<p>Afterwards, we need to show that it preserves <code>holomorphic</code>, <code>bounded_at_infinity</code> and <code>zero_at_infinity</code>.</p>",
        "id": 133964469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942812
    },
    {
        "content": "<p>We also need to prove that it is linear.</p>",
        "id": 133964474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536942828
    },
    {
        "content": "<p>Ok, this stuff is a mess. I just wanted to plug a matrix with determinant <code>m</code> into the Möbius transform action. Of course that doesn't work...</p>",
        "id": 133972202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536951330
    },
    {
        "content": "<p>wow this is really a heck of an operator</p>",
        "id": 133972741,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536951843
    },
    {
        "content": "<p>Ok, I think we should forget about Hecke operators. We can define them if we want. But we won't even get close to formalising the abstract of Kevin's paper.</p>",
        "id": 133973372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536952401
    },
    {
        "content": "<p>Until 5 minutes ago, I thought that the only thing missing was the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>S</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is finite-dimensional (which requires Riemann–Roch).</p>",
        "id": 133973393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536952436
    },
    {
        "content": "<p>But of course, with the definition of the Hecke operator that we are now going after, we will get a linear operator on a complex vector space. This beast will have a characteristic polynomial defined over <code>complex</code>.</p>",
        "id": 133973470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536952500
    },
    {
        "content": "<p>Such polynomials do not have very interesting splitting fields.</p>",
        "id": 133973490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1536952515
    },
    {
        "content": "<p>How do you prove this polynomial has interesting coefficients in the real world?</p>",
        "id": 134012391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537018250
    },
    {
        "content": "<p>are the coefficients actually rational?</p>",
        "id": 134012447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537018346
    },
    {
        "content": "<p>I guess there are integers</p>",
        "id": 134012451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537018367
    },
    {
        "content": "<p>But I know no number theory</p>",
        "id": 134012458,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537018376
    },
    {
        "content": "<p>And it probably also requires Fourier series for modular forms</p>",
        "id": 134012512,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537018455
    },
    {
        "content": "<p>If they are actually integers, then can't we define the splitting field to be the smallest subfield of C which contains the roots?</p>",
        "id": 134012524,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537018541
    },
    {
        "content": "<p>The Hecke operator acts on the singular homology of the modular curve. This has Q coeffients</p>",
        "id": 134012563,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018565
    },
    {
        "content": "<p>Then we don't need either splitting fields or to prove that the coefficients are integers</p>",
        "id": 134012567,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537018567
    },
    {
        "content": "<p>By Hodge theory you recover the cusp forms in the complexification of this cohomology group.</p>",
        "id": 134012570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018585
    },
    {
        "content": "<p>But maybe I'm using a sledgehammer, there might be a more low-brow proof.</p>",
        "id": 134012574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018602
    },
    {
        "content": "<p>Of course then we wouldn't know that the this field is a finite extension...</p>",
        "id": 134012578,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537018621
    },
    {
        "content": "<p>Right...</p>",
        "id": 134012591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018654
    },
    {
        "content": "<p>Somehow I don't mind sorrying finite-dimensionality of S_k, but sorrying this fact feels like a big cheat.</p>",
        "id": 134012594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018681
    },
    {
        "content": "<p>I guess Hecke's point of view was less sophisticated</p>",
        "id": 134012653,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537018786
    },
    {
        "content": "<p>Probably. I think using Fourier coefficients there is another approach.</p>",
        "id": 134012721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018883
    },
    {
        "content": "<p>But then, we didn't want to do Fourier coefficients either.</p>",
        "id": 134012733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018920
    },
    {
        "content": "<p>So maybe we just define the Hecke operator over <code>complex</code>, and then wrap up the project.</p>",
        "id": 134012777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537018948
    },
    {
        "content": "<p>Let's put this discussion in the correct thread.</p>",
        "id": 134163084,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537274124
    },
    {
        "content": "<p>The following lemma is crucial:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">M_trans_SL2Z_H</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">SL2Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">M_trans</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_M</span> <span class=\"n\">m</span> <span class=\"n\">M</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">SL2Z_H</span> <span class=\"n\">M</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">M_trans</span> <span class=\"n\">h</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">funext</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">M_trans</span><span class=\"o\">,</span> <span class=\"n\">SL2Z_M</span><span class=\"o\">,</span> <span class=\"n\">SL2Z_H</span><span class=\"o\">,</span> <span class=\"err\">«</span><span class=\"n\">M</span><span class=\"err\">ö</span><span class=\"n\">bius_transform</span><span class=\"err\">»</span><span class=\"o\">],</span>\n\n<span class=\"c1\">-- m : ℤ,</span>\n<span class=\"c1\">-- h : m &gt; 0,</span>\n<span class=\"c1\">-- M : SL2Z,</span>\n<span class=\"c1\">-- A : Mat m,</span>\n<span class=\"c1\">-- z : ↥ℍ</span>\n<span class=\"c1\">-- ⊢ (↑(M.a) * ↑(A.b) + (↑(M.b) * ↑(A.d) + (↑(M.a) * ↑(A.a) + ↑(M.b) * ↑(A.c)) * ↑z)) /</span>\n<span class=\"c1\">--       (↑(M.c) * ↑(A.b) + (↑(M.d) * ↑(A.d) + (↑(M.c) * ↑(A.a) + ↑(M.d) * ↑(A.c)) * ↑z)) =</span>\n<span class=\"c1\">--     (↑(M.b) + ↑(M.a) * ((↑(A.b) + ↑(A.a) * ↑z) / (↑(A.d) + ↑(A.c) * ↑z))) /</span>\n<span class=\"c1\">--       (↑(M.d) + ↑(M.c) * ((↑(A.b) + ↑(A.a) * ↑z) / (↑(A.d) + ↑(A.c) * ↑z)))</span>\n\n  <span class=\"c1\">-- ring, -- fails</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 134163095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537274135
    },
    {
        "content": "<p>I'm not surprised that <code>ring</code> fails, because there are divisions. But boy, I really don't want to prove this stuff by hand.</p>",
        "id": 134163130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537274162
    },
    {
        "content": "<p>I could try since Johannes is working for me right now</p>",
        "id": 134163207,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537274210
    },
    {
        "content": "<p>Did you push everything?</p>",
        "id": 134163212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537274215
    },
    {
        "content": "<p>Hm, isabelle has <code>field_simps</code> for these kind of things. <code>field_simps</code> is a collection which applies distributivity, and tries to remove the <code>x / d</code>. Sometimes it needs to introduces <code>if</code> to check if <code>d = 0</code></p>",
        "id": 134163237,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537274254
    },
    {
        "content": "<p>We need this <em>so</em> badly</p>",
        "id": 134163272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537274282
    },
    {
        "content": "<p>I pushed some stuff</p>",
        "id": 134163669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537274728
    },
    {
        "content": "<p>I've got <code>M</code> out of <code>f</code>, so now we need to do the cocycle computation</p>",
        "id": 134163689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537274750
    },
    {
        "content": "<p>Which is just as ugly as the other thing I just posted.</p>",
        "id": 134163742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537274767
    },
    {
        "content": "<p>Did you do the other ugly thing?</p>",
        "id": 134163769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537274796
    },
    {
        "content": "<p>No, everything I did was pushed.</p>",
        "id": 134164244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537275313
    },
    {
        "content": "<p>I went to the last sorry: proving that the result again has weight <code>k</code></p>",
        "id": 134164251,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537275327
    },
    {
        "content": "<p>I now have the following goal</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on&#39;</span> <span class=\"n\">o</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">SL2Z_H</span> <span class=\"n\">M</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">M_trans</span> <span class=\"n\">h</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">SL2Z_H</span> <span class=\"n\">M</span> <span class=\"n\">z</span><span class=\"o\">)))</span>\n      <span class=\"bp\">_</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">M</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n      <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on&#39;</span> <span class=\"n\">o</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Mat</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">.</span><span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"err\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">M_trans</span> <span class=\"n\">h</span> <span class=\"n\">A</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 134164256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537275340
    },
    {
        "content": "<p>How do I get past that <code>quotient.lift_on'</code>?</p>",
        "id": 134164263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537275355
    },
    {
        "content": "<p>I'm working on M_trans_SL2Z_H</p>",
        "id": 134164264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537275356
    },
    {
        "content": "<p>eliminate <code>o</code>. Easiest: <code>rcases o with &lt;x&gt;</code>.</p>",
        "id": 134164721,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1537275892
    },
    {
        "content": "<p>Thanks, that worked!</p>",
        "id": 134164982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537276164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The name is wrong. The final <code>_H</code> should be <code>_M</code>.</p>",
        "id": 134164990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537276179
    },
    {
        "content": "<p>With <code>_H</code> it is another lemma, and I need that one now (-;</p>",
        "id": 134164995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537276193
    },
    {
        "content": "<p>but do you still want <code> {m : ℤ} {h : m &gt; 0} {M : SL2Z} {A : Mat m} : M_trans h (SL2Z_M m M A) = SL2Z_H M ∘ (M_trans h A)</code>?</p>",
        "id": 134165060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537276230
    },
    {
        "content": "<p>Or only the other one?</p>",
        "id": 134165078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537276249
    },
    {
        "content": "<p>No, the one you are working on is used</p>",
        "id": 134165198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537276351
    },
    {
        "content": "<p>I just realised that I had the wrong name.</p>",
        "id": 134165204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537276359
    },
    {
        "content": "<p>You can already see it being used</p>",
        "id": 134165210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537276373
    },
    {
        "content": "<p>In what I last pushed</p>",
        "id": 134165214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537276380
    },
    {
        "content": "<p>Aaahrg, the final sorry is a real pain. I'm now even confused about the maths again.</p>",
        "id": 134166605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537277788
    },
    {
        "content": "<p>OTOH, those are the better moments of theorem proving (-; I'm rather confused about the maths than that I'm fight silly <code>↑</code></p>",
        "id": 134166644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537277834
    },
    {
        "content": "<p>I just pushed something</p>",
        "id": 134167046,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537278271
    },
    {
        "content": "<p>Things are reduced to many variation on <a href=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/hecke_operator.lean#L16\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/hecke_operator.lean#L16\">https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/hecke_operator.lean#L16</a> which itself is a variation on <a href=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/upper_half_space.lean#L37\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/upper_half_space.lean#L37\">https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/upper_half_space.lean#L37</a></p>",
        "id": 134167084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537278342
    },
    {
        "content": "<p>But I'm tired of fighting this</p>",
        "id": 134167087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537278348
    },
    {
        "content": "<p>After writing <a href=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/hecke_operator.lean#L32-L49\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/hecke_operator.lean#L32-L49\">https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/hecke_operator.lean#L32-L49</a></p>",
        "id": 134167137,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537278376
    },
    {
        "content": "<p>One day we will think back and laugh. But right now it's only screaming: Lean is nowhere near ready!</p>",
        "id": 134167150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537278406
    },
    {
        "content": "<p>Right, it's really annoying</p>",
        "id": 134167160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537278426
    },
    {
        "content": "<p>I also pushed. I didn't really get very far.</p>",
        "id": 134167368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537278693
    },
    {
        "content": "<p>Maybe we can switch sides</p>",
        "id": 134167442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537278750
    },
    {
        "content": "<p>So, on my side that maths is confusing.</p>",
        "id": 134167477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537278799
    },
    {
        "content": "<p>If you take an <code>f</code> of weight <code>k</code>. After you plug it into Hecke, you want to check that the result has weight <code>k</code>.</p>",
        "id": 134167510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537278825
    },
    {
        "content": "<p>But this means that you get <code>f(A • M z)</code>, where <code>A : Mat m</code> and <code>M : SL2Z</code></p>",
        "id": 134167565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537278854
    },
    {
        "content": "<p>Now you can't use the weight property of <code>f</code>.</p>",
        "id": 134167575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537278867
    },
    {
        "content": "<p>Because the <code>M</code> is not on the left.</p>",
        "id": 134167579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537278876
    },
    {
        "content": "<p>But <code>A M A¯¹</code> doesn't have to be in <code>SL2Z</code>...</p>",
        "id": 134167618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537278942
    },
    {
        "content": "<p>So now I'm confused.</p>",
        "id": 134167622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537278947
    },
    {
        "content": "<p>M should be on the left</p>",
        "id": 134167681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537278974
    },
    {
        "content": "<p>We are acting from the left</p>",
        "id": 134167699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537278988
    },
    {
        "content": "<p>At least on my piece of paper</p>",
        "id": 134167710,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537279000
    },
    {
        "content": "<p>And on Wikipedia</p>",
        "id": 134167717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537279012
    },
    {
        "content": "<p>Yes, but <code>M</code> acts before <code>A</code> does, right?</p>",
        "id": 134167915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279202
    },
    {
        "content": "<p>It is <code>f (A • (M • z))</code>. So <code>M</code> is in fact acting on the left.</p>",
        "id": 134167998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279276
    },
    {
        "content": "<p>Yeah you want to write <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mi>M</mi><mo>=</mo><mi>M</mi><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">AM = MA'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> for some other <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">A'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> of det m, I think. The action of M will permute the terms of the sum</p>",
        "id": 134168094,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537279343
    },
    {
        "content": "<p>It didn't seem necessary earlier today</p>",
        "id": 134168109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537279372
    },
    {
        "content": "<p>I think using reflexivity of the equivalence relation is enough</p>",
        "id": 134168230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537279456
    },
    {
        "content": "<p>or reflexivity of equality</p>",
        "id": 134168259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537279485
    },
    {
        "content": "<p>Hmmm... Reid, that might be the trick</p>",
        "id": 134168287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279509
    },
    {
        "content": "<p>I tried writing <code>AM = M'A</code>, but then your <code>M'</code> is not in SL2Z</p>",
        "id": 134168312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279536
    },
    {
        "content": "<p>But maybe with your attack it works.</p>",
        "id": 134168320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279544
    },
    {
        "content": "<p>You need to prove to compute the term in the sum corresponding to AM until you get the one corresponding to M</p>",
        "id": 134168382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537279571
    },
    {
        "content": "<p>Because <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>A</mi><mo mathvariant=\"normal\">′</mo></msup><mo>=</mo><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>A</mi><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">A' = M^{-1}AM</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mord mathit\">A</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>M</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>∈</mo><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">L</mi><mn>2</mn><mi mathvariant=\"normal\">Z</mi></mrow></mrow><annotation encoding=\"application/x-tex\">M^{-1} \\in \\mathrm{SL2Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.853208em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mrel\">∈</span><span class=\"mord\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">L</span><span class=\"mord mathrm\">2</span><span class=\"mord mathrm\">Z</span></span></span></span></span></p>",
        "id": 134168396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I don't think that will work. You really need to use that <code>f</code> has weight <code>k</code> at some point. So you need to rewrite things.</p>",
        "id": 134168457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279641
    },
    {
        "content": "<p>of course you use that!</p>",
        "id": 134168465,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537279654
    },
    {
        "content": "<p>Ok, then I'm confused about your plan.</p>",
        "id": 134168470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279665
    },
    {
        "content": "<p>The book I have writes the action of SL(2, Z) (or more generally GL+(2, R)) on functions on the upper half plane as a right action, which I think makes more sense</p>",
        "id": 134168637,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537279817
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>f</mi><msub><mi mathvariant=\"normal\">∣</mi><mi>k</mi></msub><mi>γ</mi><mo>)</mo><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mi>det</mi><mi>γ</mi></mrow><mrow><mo>(</mo><mi>c</mi><mi>z</mi><mo>+</mo><mi>d</mi><msup><mo>)</mo><mi>k</mi></msup></mrow></mfrac><mi>f</mi><mo>(</mo><mi>γ</mi><mi>z</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(f|_k \\gamma)(z) = \\frac{\\det \\gamma}{(cz + d)^k} f(\\gamma z)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.9322159999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.4646359999999998em;vertical-align:-0.5324199999999999em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathrm\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9322159999999999em;\"><span style=\"top:-2.6425799999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathit mtight\">c</span><span class=\"mord mathit mtight\" style=\"margin-right:0.04398em;\">z</span><span class=\"mbin mtight\">+</span><span class=\"mord mathit mtight\">d</span><span class=\"mclose mtight\"><span class=\"mclose mtight\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7820285714285713em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.446108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mop mtight\">det</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05556em;\">γ</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5324199999999999em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mord mathit\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 134168658,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537279856
    },
    {
        "content": "<p>True, but it acts on the left on the plane, right?</p>",
        "id": 134168754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279944
    },
    {
        "content": "<p>and also the Hecke operators<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>f</mi><msub><mi mathvariant=\"normal\">∣</mi><mi>k</mi></msub><msub><mi>T</mi><mi>p</mi></msub><mo>)</mo><mo>=</mo><msup><mi>p</mi><mrow><mi>k</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn><mo>−</mo><mn>1</mn></mrow></msup><msub><mo>∑</mo><mi>δ</mi></msub><mi>f</mi><msub><mi mathvariant=\"normal\">∣</mi><mi>k</mi></msub><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">(f|_k T_p) = p^{k/2-1} \\sum_\\delta f|_k \\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.18771em;vertical-align:-0.29971000000000003em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathrm\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span><span class=\"mbin mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1863979999999999em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathrm\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> \"where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> runs over a set of representatives for the distinct right cosets of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">Γ</mi><mn>1</mn></msub><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\Gamma_1(N)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">Δ</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Delta_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span>\"</p>",
        "id": 134168764,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537279954
    },
    {
        "content": "<p>Yes</p>",
        "id": 134168767,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537279957
    },
    {
        "content": "<p>In Lean we only have the action on the plane, so far...</p>",
        "id": 134168805,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279988
    },
    {
        "content": "<p>Well, and the action on other matrices.</p>",
        "id": 134168811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537279999
    },
    {
        "content": "<p>Then to check that the Hecke operator preserves modular forms of weight k you need to show that<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><msub><mo>∑</mo><mi>δ</mi></msub><mi>f</mi><msub><mi mathvariant=\"normal\">∣</mi><mi>k</mi></msub><mi>δ</mi><mo>)</mo><msub><mi mathvariant=\"normal\">∣</mi><mi>k</mi></msub><mi>γ</mi><mo>=</mo><msub><mo>∑</mo><mi>δ</mi></msub><mi>f</mi><msub><mi mathvariant=\"normal\">∣</mi><mi>δ</mi></msub></mrow><annotation encoding=\"application/x-tex\">(\\sum_\\delta f|_k\\delta)|_k \\gamma = \\sum_\\delta f|_\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1863979999999999em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathrm\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathrm\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mrel\">=</span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1863979999999999em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\"><span class=\"mord mathrm\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03785em;\">δ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> and the strategy is going to be to move <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> past <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> and reindex</p>",
        "id": 134168877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537280067
    },
    {
        "content": "<p>Yeah, I'm just trying to show how to isolate the step where you reindex the sum</p>",
        "id": 134169028,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537280248
    },
    {
        "content": "<p>do we even know yet that the Hecke operator preserves holomorphic functions?</p>",
        "id": 134169140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537280349
    },
    {
        "content": "<p>That statement does not make sense yet (-;</p>",
        "id": 134169222,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280418
    },
    {
        "content": "<p>Hmmm, maybe we could turn it into a sensible statement.</p>",
        "id": 134169245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280435
    },
    {
        "content": "<p>At the moment the Hecke operators are being defined as operators on functions of weight k</p>",
        "id": 134169264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280453
    },
    {
        "content": "<p>do we know that (az + b)/(cz + d) is itself a holomorphic function?</p>",
        "id": 134169287,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537280466
    },
    {
        "content": "<p>Afterwards we want to check that the preserve holomorphic functions and functions bound at infinity.</p>",
        "id": 134169290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280471
    },
    {
        "content": "<p>right</p>",
        "id": 134169295,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537280476
    },
    {
        "content": "<p>We do not know that</p>",
        "id": 134169296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280476
    },
    {
        "content": "<p>I see</p>",
        "id": 134169301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1537280478
    },
    {
        "content": "<p>It might be a nice example of a holomorphic function (-;</p>",
        "id": 134169311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280491
    },
    {
        "content": "<p>are there any sorry that I can fill in?</p>",
        "id": 134169484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537280641
    },
    {
        "content": "<p><strong>YES</strong></p>",
        "id": 134169536,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537280660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> It might be good to read the discussion of the last 20 minutes</p>",
        "id": 134169571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280695
    },
    {
        "content": "<p>There is some non-trivialish math going into this. (Nothing you don't understand in 30 secs) But still...</p>",
        "id": 134169605,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280722
    },
    {
        "content": "<p>where is the sorry?</p>",
        "id": 134169681,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537280779
    },
    {
        "content": "<p>Look in the Hecke file</p>",
        "id": 134169717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280843
    },
    {
        "content": "<p>is it WIP?</p>",
        "id": 134169722,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537280851
    },
    {
        "content": "<p>I don't want to cause pull conflict</p>",
        "id": 134169736,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537280863
    },
    {
        "content": "<p>I stand by my claim we don't need any reordering</p>",
        "id": 134169829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537280946
    },
    {
        "content": "<p>I'm not working on it right now</p>",
        "id": 134169842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280971
    },
    {
        "content": "<p>Need to do some emails</p>",
        "id": 134169845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537280976
    },
    {
        "content": "<p>Hold on 10 sec</p>",
        "id": 134169848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537280980
    },
    {
        "content": "<p>Ok, look at <a href=\"https://github.com/semorrison/kbb/blob/master/src/hecke_operator.lean#L76\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/master/src/hecke_operator.lean#L76\">https://github.com/semorrison/kbb/blob/master/src/hecke_operator.lean#L76</a></p>",
        "id": 134169981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281074
    },
    {
        "content": "<p>I claim there is no problem here</p>",
        "id": 134169986,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281079
    },
    {
        "content": "<p>Except we miss a field tactic</p>",
        "id": 134169993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281089
    },
    {
        "content": "<p>Kenny: you can fill in all sorries in that file</p>",
        "id": 134170009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281121
    },
    {
        "content": "<p>well you just pulled</p>",
        "id": 134170053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537281137
    },
    {
        "content": "<p>pushed*</p>",
        "id": 134170054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537281140
    },
    {
        "content": "<p>yes</p>",
        "id": 134170062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281159
    },
    {
        "content": "<p>Don't forget what I wrote: Things are reduced to many variation on <a href=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/hecke_operator.lean#L16\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/hecke_operator.lean#L16\">https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/hecke_operator.lean#L16</a> which itself is a variation on <a href=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/upper_half_space.lean#L37\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/upper_half_space.lean#L37\">https://github.com/semorrison/kbb/blob/42b4509e2d9ca5beaeb712a17fc0f5754f73854c/src/upper_half_space.lean#L37</a></p>",
        "id": 134170066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281168
    },
    {
        "content": "<p>About the other sorries in that file</p>",
        "id": 134170071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281179
    },
    {
        "content": "<p>And if you really feel like impressing us, you can get rid of all quadruples of integers and use matrices everywhere</p>",
        "id": 134170090,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281213
    },
    {
        "content": "<p>I'm giving up on this.</p>",
        "id": 134170094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281222
    },
    {
        "content": "<p>Honestly I think the upshot of this story is that Lean is not yet ready for anything involving divisions</p>",
        "id": 134170167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281290
    },
    {
        "content": "<p>I don't feel like impressing anyone</p>",
        "id": 134170192,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537281310
    },
    {
        "content": "<p>You could always just apply division cancellation theorems, it's not that hard...</p>",
        "id": 134170199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537281317
    },
    {
        "content": "<p>Mario, did you see <a href=\"https://github.com/semorrison/kbb/blob/master/src/hecke_operator.lean#L32-L49\" target=\"_blank\" title=\"https://github.com/semorrison/kbb/blob/master/src/hecke_operator.lean#L32-L49\">https://github.com/semorrison/kbb/blob/master/src/hecke_operator.lean#L32-L49</a>?</p>",
        "id": 134170223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281358
    },
    {
        "content": "<p>I'm not too keen on replacing these direct and logical proofs with arcane tactic-generated proofs</p>",
        "id": 134170224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537281358
    },
    {
        "content": "<p>The trouble with division cancellations theorems is that terms must be next to each other</p>",
        "id": 134170283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281381
    },
    {
        "content": "<p>I am very keen on have a tactic that will write the direct and logical proof for me.</p>",
        "id": 134170285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537281384
    },
    {
        "content": "<p>hence the endless conv</p>",
        "id": 134170290,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281393
    },
    {
        "content": "<p>No, this is stupid</p>",
        "id": 134170297,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281407
    },
    {
        "content": "<p>We don't want to see this proof</p>",
        "id": 134170303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281418
    },
    {
        "content": "<p>We want Lean to compute, as with ring</p>",
        "id": 134170311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537281433
    },
    {
        "content": "<p>I think it can be done better than that</p>",
        "id": 134170313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537281435
    },
    {
        "content": "<p>plus a little <code>calc</code> would go a long way in that proof</p>",
        "id": 134170324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537281463
    },
    {
        "content": "<p>what is all the uparrow stuff?</p>",
        "id": 134170327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537281471
    },
    {
        "content": "<p>ℤ-matrices acting on ℂ</p>",
        "id": 134170367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537281485
    },
    {
        "content": "<p>There is a boatload of stuff in this repo that could be generalised. But some thing's can't... for example this lemma could be about arbitrary matrices in <code>GL2R+</code>. But that would shift the arrows somewhere else.</p>",
        "id": 134170408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537281563
    },
    {
        "content": "<p>I'm looking forward to Lean Forward... these things are the basic Lego blocks that Sander Dahmen works with.</p>",
        "id": 134170826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282049
    },
    {
        "content": "<p>Okay, I've downloaded and set up kbb. What area needs my attention?</p>",
        "id": 134170886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537282095
    },
    {
        "content": "<p><code>hecke_operator.lean</code></p>",
        "id": 134170900,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282107
    },
    {
        "content": "<p>You'll get pulled into the other files by <code>import</code></p>",
        "id": 134170907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282118
    },
    {
        "content": "<p>Beware, there are minor dragons in these files.</p>",
        "id": 134170919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282132
    },
    {
        "content": "<p>Every 10 lines will give you another opportunity for a major refactor (-;</p>",
        "id": 134170944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282150
    },
    {
        "content": "<p>The area where you write a field tactic</p>",
        "id": 134170952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537282172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> you might want to tell <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> which <code>sorry</code> you are working on.</p>",
        "id": 134170967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282195
    },
    {
        "content": "<p>all of them</p>",
        "id": 134171012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537282204
    },
    {
        "content": "<p>lol that's not happening before friday Patrick</p>",
        "id": 134171030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537282219
    },
    {
        "content": "<p>I'm sure Kevin will understand</p>",
        "id": 134171055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537282255
    },
    {
        "content": "<p>Do you think you could do it before he turns 60?</p>",
        "id": 134171072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537282273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Any improvements of the repo would be appreciated.</p>",
        "id": 134171083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282289
    },
    {
        "content": "<p><code>matrices</code> and <code>determinants</code> seem to be almost ready to merge. And independent of the other files.</p>",
        "id": 134171095,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537282306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what's the math proof of the thing that Patrick claims to be true?</p>",
        "id": 134172685,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537283998
    },
    {
        "content": "<p>and what is the second thing?</p>",
        "id": 134172738,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537284013
    },
    {
        "content": "<p>The maths proof is to expand everythings and compute</p>",
        "id": 134172751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537284042
    },
    {
        "content": "<p>But probably there is a better way to setup all this</p>",
        "id": 134172759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1537284058
    },
    {
        "content": "<p>I filled in two of the sorries</p>",
        "id": 134172828,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537284131
    },
    {
        "content": "<p>see if you can learn anything therefrom</p>",
        "id": 134172834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1537284136
    },
    {
        "content": "<p>Reid quoted some formulas containing the Petersson slash operator (of weight <code>k</code>). Would it make sense to mimic that notation, somehow? I think we should also wrap <code>M_trans</code> and <code>SL2Z_H</code> into notation (<code>has_scalar</code>). I hope it will make statements more readable. Maybe it will even improve proofs, I don't know.</p>",
        "id": 134223218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537352149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I agree with Patrick's claim. I made some small rewrites. Maybe now it is easier to math-see why it is true. I still wish <code>ring</code> would kill this. But it doesn't... because there are divisions. I hate divisions in Lean.</p>",
        "id": 134225022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537355069
    },
    {
        "content": "<p>(Oooh, I also pushed those small rewrites.)</p>",
        "id": 134225043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1537355105
    }
]