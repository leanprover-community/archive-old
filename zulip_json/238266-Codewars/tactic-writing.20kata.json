[
    {
        "content": "<p>Just to extract some discussion from the old general thread, I think \"write kata on codewars that require / teach tactic-writing\" might be an effective way to seed the community with tactic-writing knowledge. Quoting from the old thread:</p>\n<p>For such a kata, the initial solution would look like<br>\n<code>meta def submission_tactic :=</code><br>\nand the test cases would look like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test_prop1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">submission_tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test_prop2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">submission_tactic</span>\n</code></pre></div>\n\n\n<p>So an 8 kyu \"tactic-writing hello world\" might have an answer that's morally equivalent to</p>\n<p><code>meta def submission_tactic := repeat {apply lemma1 &lt;|&gt; apply lemma2}</code><br>\nand the test cases are things that fall to (possibly long) repeated applications of lemma1 and lemma2. That probably means that something morally equivalent to <br>\n<code>meta def submission_tactic := simp only [lemma1, lemma2]</code><br>\nworks too, but I'd be fine with that.</p>",
        "id": 197088086,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589156822
    },
    {
        "content": "<p>I am half-heartedly trying to learn enough from chapter 8 of programming in Lean to start doing this. I'd be thrilled for someone to beat me to it.</p>",
        "id": 197088108,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589156881
    },
    {
        "content": "<p>You can actually write <code> meta def submission_tactic := `[simp only [lemma1, lemma2]]</code> fyi</p>",
        "id": 197088975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589157848
    },
    {
        "content": "<blockquote>\n<p>and the test cases would look like<br>\n</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test_prop1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">submission_tactic</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">test_prop2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">submission_tactic</span>\n</code></pre></div>\n\n\n<p>Keep in mind to check the generated proofs for sorries and forbidden axioms; otherwise, I would imagine that one could just define their tactic to use <code>sorry</code> and pass all the tests.</p>",
        "id": 197100673,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1589173727
    }
]