[
    {
        "content": "<p><a href=\"https://www.codewars.com/kata/5ebeaec6cbb9c5000fd82c41/lean\">https://www.codewars.com/kata/5ebeaec6cbb9c5000fd82c41/lean</a></p>",
        "id": 197750181,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589575497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> how to hackproof this kata? I just hacked it</p>",
        "id": 197750200,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589575509
    },
    {
        "content": "<p>(I suppose I'll make it more fun to others by not revealing my hack)</p>",
        "id": 197750235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589575533
    },
    {
        "content": "<p>You could have users provide a <code>list name</code> and then do the <code>simp only</code> evaluation inside the test</p>",
        "id": 197750359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589575597
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 197750426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589575643
    },
    {
        "content": "<p>oh, I see now that you have pre-named the theorems</p>",
        "id": 197750468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589575670
    },
    {
        "content": "<p>(also cc <span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> )</p>",
        "id": 197750590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589575745
    },
    {
        "content": "<p>You can probably sneak things if the user makes a notation called <code>three_dvd\\1</code></p>",
        "id": 197750608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589575762
    },
    {
        "content": "<p>can I do \"SQL injection\" with notations though?</p>",
        "id": 197750689,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589575809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> I just updated the tests. Can you still hack it?</p>",
        "id": 197750755,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589575855
    },
    {
        "content": "<p>can you use conjunctions in <code>simp</code>?</p>",
        "id": 197750776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589575873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> is this a competition now? security through obscurity is dangerous</p>",
        "id": 197750830,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589575920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> bingo</p>",
        "id": 197750875,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589575925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> I'll tell you why:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Preloaded</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">secret_number</span> <span class=\"c1\">-- 57</span>\n</code></pre></div>",
        "id": 197750927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589575966
    },
    {
        "content": "<p>This is interesting to try to follow without looking at the kata</p>",
        "id": 197750973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589576005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> what's your perception of this reality?</p>",
        "id": 197751005,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576026
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/238266-Codewars/topic/hackproofing.20programming.20katas/near/197750927\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> I'll tell you why:</p>\n</blockquote>\n<p>Fair enough. What if the abbreviation is declared inside the tests?</p>",
        "id": 197751075,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589576053
    },
    {
        "content": "<p>I don't know but have you considered iterating over the environment?</p>",
        "id": 197751077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589576053
    },
    {
        "content": "<p>then your simp lemmas can't simplify it either</p>",
        "id": 197751131,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576097
    },
    {
        "content": "<p>wait why wasn't your solution marked invalid</p>",
        "id": 197751194,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576145
    },
    {
        "content": "<p>My solution works perfectly fine</p>",
        "id": 197751283,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589576182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> do we have a (pseudo) random number generator?</p>",
        "id": 197751285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576187
    },
    {
        "content": "<p>we do</p>",
        "id": 197751295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589576195
    },
    {
        "content": "<p>it's in <code>io</code> somewhere</p>",
        "id": 197751309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589576203
    },
    {
        "content": "<p>Ah, that's the best solution</p>",
        "id": 197751315,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589576210
    },
    {
        "content": "<p>I don't know if it's nondeterministic though</p>",
        "id": 197751347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589576229
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is thinking about SQL injection now?</p>",
        "id": 197751352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576231
    },
    {
        "content": "<p>Actually, can't you just royally mess up any test using io?</p>",
        "id": 197751384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589576252
    },
    {
        "content": "<p>how so?</p>",
        "id": 197751425,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576272
    },
    {
        "content": "<p>running arbitrary lean code is completely unsafe</p>",
        "id": 197751433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589576281
    },
    {
        "content": "<p>you can just e.g. call <code>rm test.lean</code> from <code>solution.lean</code></p>",
        "id": 197751503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589576303
    },
    {
        "content": "<p>if unsafe means I can hack CW then I presume CW has measures against it</p>",
        "id": 197751504,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576306
    },
    {
        "content": "<p>considering that it is originally for languages that are designed to have effects</p>",
        "id": 197751583,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589576369
    },
    {
        "content": "<p>you might not be able to mess with CW itself but I can definitely imagine breaking the test file</p>",
        "id": 197751595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589576381
    },
    {
        "content": "<p>if I can do it for Lean why can't I do it for Python?</p>",
        "id": 197751605,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576387
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;main.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">solution</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/home/codewarrior/solution.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;main.py&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n<span class=\"ne\">PermissionError</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">Errno</span> <span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"n\">Permission</span> <span class=\"n\">denied</span><span class=\"p\">:</span> <span class=\"s1\">&#39;main.py&#39;</span>\n</code></pre></div>",
        "id": 197752002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576614
    },
    {
        "content": "<p>so there you go <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 197752032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> <a href=\"#narrow/stream/238266-Codewars/topic/hackproofing.20programming.20katas/near/197751075\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/238266-Codewars/topic/hackproofing.20programming.20katas/near/197750927\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260921\">Markus Himmel</span> I'll tell you why:</p>\n</blockquote>\n<p>Fair enough. What if the abbreviation is declared inside the tests?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;main.py&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;r&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 197752387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589576848
    },
    {
        "content": "<p>Ok, impressive.</p>",
        "id": 197752779,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589577049
    },
    {
        "content": "<p>So is there a way around this issue short of exposing <code>std::random_device</code> to Lean?</p>",
        "id": 197753121,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589577183
    },
    {
        "content": "<p>the RNG is <a href=\"https://github.com/leanprover-community/lean/blob/master/library/system/random.lean\">https://github.com/leanprover-community/lean/blob/master/library/system/random.lean</a></p>",
        "id": 197753183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589577222
    },
    {
        "content": "<p>You can use io to get the time</p>",
        "id": 197753187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589577225
    },
    {
        "content": "<p>right</p>",
        "id": 197753197,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589577230
    },
    {
        "content": "<p>is there an API to chain both together?</p>",
        "id": 197753208,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589577237
    },
    {
        "content": "<p>I think <code>io.rand</code>?</p>",
        "id": 197753326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589577292
    },
    {
        "content": "<p>This appears to be nondeterministic in vscode, but it is deterministic when called via CLI</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">system</span><span class=\"bp\">.</span><span class=\"n\">io</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"n\">rand</span> <span class=\"mi\">1</span> <span class=\"mi\">100</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">io</span><span class=\"bp\">.</span><span class=\"kn\">print</span>\n</code></pre></div>",
        "id": 197753790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589577569
    },
    {
        "content": "<p>I'm pretty sure this is considered a feature</p>",
        "id": 197753815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589577587
    },
    {
        "content": "<p>I don't see anything obvious in the interface to let you seed the sequence</p>",
        "id": 197753959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589577668
    },
    {
        "content": "<p>I thought you can feed in the time</p>",
        "id": 197754053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589577722
    },
    {
        "content": "<p>you can, but there is no <code>time</code> function in the io interface, so you would have to call <code>date</code> via the CLI which is not very portable</p>",
        "id": 197754566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589578072
    },
    {
        "content": "<p>You could use Lean version number</p>",
        "id": 197754676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589578119
    },
    {
        "content": "<p>that is not random</p>",
        "id": 197754686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589578125
    },
    {
        "content": "<p>neither is the time</p>",
        "id": 197754718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589578143
    },
    {
        "content": "<p>yeah but the universally agreed definition of pseudorandom number is one uses the time as a seed</p>",
        "id": 197754907,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589578278
    },
    {
        "content": "<p>Probably because the NSA has got some sort of back door</p>",
        "id": 197755537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589578736
    },
    {
        "content": "<p>Yeah, they can control random numbers through the NIST time servers.</p>",
        "id": 197755649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589578823
    },
    {
        "content": "<p>FWIW, in my kata, I have now replaced <code>simp</code> by <code>repeat { rw lem &lt;|&gt; rw lem' &lt;|&gt; ... }, try { exact trivial }</code>, which does not split lemmas on conjuctions, <a href=\"https://github.com/leanprover-community/lean/blob/master/src/library/tactic/simp_lemmas.cpp#L526\">unlike the simplifier which does not have an option to turn this off</a>. This does not make working backwards from the tests impossible, but should make doing so more difficult than actually solving the kata.</p>",
        "id": 197780318,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1589610801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> I announce your kata hackproof.</p>",
        "id": 197837602,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589704135
    }
]