[
    {
        "content": "<p>I've been trying to complete the kata titled \"0.999... = 1? Prove it!\" and I've encountered something very confusing. The problem asks you to prove</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">theorem</span> <span class=\"n\">zero_point_nine_recurring_is_one</span> <span class=\"o\">:</span>\n<span class=\"n\">lim_to_inf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>where</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">lim_to_inf</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</code></pre></div>\n\n\n<p>However I noticed that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">10</span>\n</code></pre></div>\n\n\n<p>gives me <code>0</code> and likewise</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">reduce</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"mi\">10</span>\n</code></pre></div>\n\n\n<p>gives me <code>1</code>. It seems like what's going on is that Lean is interpreting<code>9/10</code> and <code>1/10</code> as natural numbers (which means they are both <code>0</code>). If so, doesn't this make the theorem impossible to prove?</p>\n<p>On the other hand, apparently 6 people have solved this problem on codewars, so maybe I am just confused about something?</p>",
        "id": 200137050,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591640702
    },
    {
        "content": "<p>Your reduce is assuming you are talking about <code>nat</code>s</p>",
        "id": 200137186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591640779
    },
    {
        "content": "<p>Where as <code>lim_to_inf</code> is talking about sequences of <code>real</code>s</p>",
        "id": 200137203,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591640793
    },
    {
        "content": "<p>Try <code>#reduce (blabla : real)</code></p>",
        "id": 200137226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591640814
    },
    {
        "content": "<p>Of course you will then discover that reals are not computable...</p>",
        "id": 200137293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591640860
    },
    {
        "content": "<p>So maybe try <code>rat</code> as a compromise</p>",
        "id": 200137330,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591640880
    },
    {
        "content": "<p>Also <code>#reduce</code> will probably timeout, but <code>#eval</code> will give you the answer in a blink of the eye</p>",
        "id": 200137413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591640908
    },
    {
        "content": "<p>So far when doing stuff in Lean I often have problems knowing when Lean will interpret numbers as natural numbers or real numbers and getting it to switch between them. Is there any general advice about this, or should I just find specific cases that are confusing me and ask about them on zulip?</p>",
        "id": 200139072,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591641564
    },
    {
        "content": "<p>lean defaults to <code>nat</code>.</p>",
        "id": 200139119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591641586
    },
    {
        "content": "<p>If you want something else, either the context should force it, or you should force it (by using <code>(bla : something_else)</code>)</p>",
        "id": 200139207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591641613
    },
    {
        "content": "<p>Generally Lean's type inference works outside-in, so here because <code>lim_to_inf</code> expects a function returning <code>real</code> all the operations and numeric literals are inferred to be reals.</p>",
        "id": 200139271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591641645
    },
    {
        "content": "<p>But in your <code>#reduce</code> examples there is no expected type.</p>",
        "id": 200139554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591641776
    },
    {
        "content": "<p>Is there some way to get Lean goal to show me what type it thinks everything is?</p>",
        "id": 200140203,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591642107
    },
    {
        "content": "<p><code>set_option pp.all true</code> will give you more than you asked for.</p>",
        "id": 200140449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591642225
    },
    {
        "content": "<p>Does hovering over a numeral give any information?</p>",
        "id": 200140769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591642346
    },
    {
        "content": "<p>Not for me</p>",
        "id": 200140901,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591642412
    },
    {
        "content": "<p>I have another question related to this same kata which is not related to my first one (I think). The question is basically, what is the one line way to prove the following theorem?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p><code>simp</code> and <code>norm_num</code> both fail and <code>library_search</code> times out. Perhaps there is some theorem in mathlib I could apply to solve it in one line, but I don't find it very easy to search for things in mathlib. So what I'm really asking for is not just a one line solution, but a way to painlessly discover a one line solution to theorems of this difficulty level</p>",
        "id": 200141930,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591642915
    },
    {
        "content": "<p><code>ring</code></p>",
        "id": 200142127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591643012
    },
    {
        "content": "<p>What does <code>hint</code> say?</p>",
        "id": 200142176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591643040
    },
    {
        "content": "<p><code>ring</code> solves things which follow from the axioms of a ring (i.e. +, - and * and their usual behavour). <code>linarith</code> solves inequalities. These are some of only a small number of high-powered tactics, so you should just painlessly learn of their existence :-)</p>",
        "id": 200142293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591643090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/238266-Codewars/topic/0.2E999.2E.2E.2E.20.3D.201.3F.20Prove.20it!/near/200142176\">said</a>:</p>\n<blockquote>\n<p>What does <code>hint</code> say?</p>\n</blockquote>\n<p>It says to try <code>ring</code> or <code>finish</code></p>",
        "id": 200142326,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591643112
    },
    {
        "content": "<p>I think I forgot that <code>ring</code> existed for some reason</p>",
        "id": 200142349,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591643132
    },
    {
        "content": "<p>I've gotten too used to using <code>norm_num</code> <code>simp</code> and <code>linarith</code></p>",
        "id": 200142368,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591643147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298851\">@Patrick Lutz</span> Well, you can forget about <code>ring</code> if you remember <code>hint</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 200142455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591643182
    },
    {
        "content": "<p>I'd never heard of <code>hint</code> or <code>finish</code> before</p>",
        "id": 200142483,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591643199
    },
    {
        "content": "<p>they both seem very useful potentially</p>",
        "id": 200142498,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591643207
    },
    {
        "content": "<p>we're on our way to building the slowest tactic ever</p>",
        "id": 200143569,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591643815
    },
    {
        "content": "<p>I don't think that <code>hint</code> suggests <code>hint</code>...</p>",
        "id": 200143974,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591644057
    },
    {
        "content": "<p>Does it suggest <code>library_search</code>?</p>",
        "id": 200144297,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591644255
    },
    {
        "content": "<p>Well, I've now solved the kata although I can't say my solution is especially nice looking</p>",
        "id": 200150636,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591647435
    },
    {
        "content": "<p>Thanks everybody for answering my dumb questions</p>",
        "id": 200150655,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591647450
    }
]