[
    {
        "content": "<p>not sure if this type of beginner question belongs here or in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a> -- feel free to tell me to move it. </p>\n<p>While working on the Easy Fermat kata I got stuck at on an embarrassingly  simple point:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">zmod</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"c1\">-- (I am not sure whether I need to open these namespaces or not, but that doesn&#39;t seem essential to my question here)</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span> <span class=\"n\">zmod</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dumb</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span> <span class=\"n\">hint</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Set aside the kata itself. I assume it probably can be done without using zmod at all if one were so inclined. I wanted to use the field <code>zmod 3</code> so that I could invoke facts like the following:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">3</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"err\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"err\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>which I intended to prove by convincing Lean that this is definitionally equivalent to Z/3 being an integral domain, then invoking the fact that <code>zmod 3</code> is a field because 3 is prime (by <code>norm_num</code>) and then applying some lemma from the algebra library to the effect that any field is a domain.</p>\n<p>Returning to <code>lemma dumb</code> above, I got stuck at the <code>sorry</code> when no <code>hint</code> was available. Perhaps a useful starting point would be to understand why the current tactic state seems to have lost the information of what type <code>a : ℕ</code> is being upcast to (namely <code>zmod 3</code>) in the goal <code>⊢ ↑a = 0 → 3 ∣ a</code>, when it would seem to me that information is crucial. (My suspicion is that the information hasn't actually been lost, it's just not being printed for some reason, perhaps because usually having all the casts explicit would add too much clutter to be useful.)</p>\n<p>Even though I managed to prove the <code>⊢ 3 ∣ a → ↑a = 0</code> branch of <code>lemma dumb</code> using <code>finish</code>, I'm not happy with my understanding of that branch either.  For one thing, even though <code>finish</code> worked to close the goal, <code>simp</code> did not (so <code>squeeze_simp</code> wasn't helpful). Perhaps I am wrong about this, but I inferred from this that in this case <code>finish</code> must be doing some complicated thing I don't understand involving <code>ematch</code> and congruence closure, whatever those are, which it falls back on when <code>simp</code> fails.</p>\n<p>Can someone point me towards enlightenment when it comes to understanding the proof of <code>lemma dumb</code>?</p>",
        "id": 197829386,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589688897
    },
    {
        "content": "<p>perhaps my mistake above is thinking that writing <code>(a : zmod 3)</code> is the right way to apply the map <code>ℕ ↪ ℤ ↠ ℤ/3ℤ</code>?</p>",
        "id": 197829631,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589689376
    },
    {
        "content": "<p>I'm not sure if you need more files imported or not, but library_search finds the right lemma for me to make the proof</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">char_p</span><span class=\"bp\">.</span><span class=\"n\">cast_eq_zero_iff</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">3</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n</code></pre></div>\n\n\n<p>I'm using a pretty recent mathlib also.</p>",
        "id": 197829816,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589689714
    },
    {
        "content": "<p>oh, that's helpful! <em>facepalm</em> for not trying library_search (which is apparently smarter than I'd naively thought it was)</p>",
        "id": 197829927,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589689924
    },
    {
        "content": "<p>thank you!</p>",
        "id": 197829940,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589690008
    },
    {
        "content": "<p>The general rule is that if it is a natural statement which looks like it might be useful to people other than you, it should be in the library.</p>",
        "id": 197837290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589703622
    },
    {
        "content": "<p>(there's <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> by the way)</p>",
        "id": 197848818,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589721586
    },
    {
        "content": "<p>Why does the following work</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zmodp_domain</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">exact</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>but not this special case:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">zmod3_domain</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">mul_eq_zero</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 197857172,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589733160
    },
    {
        "content": "<p>You need <code>haveI</code></p>",
        "id": 197857281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589733351
    },
    {
        "content": "<p>It's unfortunate, but new assumptions are not automatically added to the \"instance cache\"</p>",
        "id": 197857323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589733376
    },
    {
        "content": "<p>Alternatively, write <code>resetI</code> between the <code>have</code> and <code>exact</code> lines</p>",
        "id": 197857327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589733398
    },
    {
        "content": "<p>ah, thank you. is there a section in one of the standard references (TPIL &amp;c) that explains <code>haveI</code> and related things?</p>",
        "id": 197857334,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589733402
    },
    {
        "content": "<p>No, because they're mathlib only, I think</p>",
        "id": 197857352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589733418
    },
    {
        "content": "<p>But the mathlib docs might have a section on them</p>",
        "id": 197857355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589733426
    },
    {
        "content": "<p>Reading through the \"tactics\" chapter of the mathlib docs is very much recommended</p>",
        "id": 197857362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589733448
    },
    {
        "content": "<p>But <code>haveI</code> is just <code>have</code> + reset instance cache. Similar for <code>letI</code> and <code>exactI</code></p>",
        "id": 197857408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589733483
    },
    {
        "content": "<p>got it, thx\\</p>",
        "id": 197857416,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589733497
    },
    {
        "content": "<p>I suppose a natural question is: if Lean doesn't  automatically reset the instance cache because it causes performance problems, do people try to avoid using resetI for the same reason?</p>",
        "id": 197857451,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1589733595
    },
    {
        "content": "<p>Nope, just use it whenever you need it</p>",
        "id": 197857568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589733726
    },
    {
        "content": "<p>But only 1 out of 10 proofs need it (just some random guess)</p>",
        "id": 197857571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589733744
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics\">https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics</a></p>",
        "id": 197865171,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589743923
    }
]