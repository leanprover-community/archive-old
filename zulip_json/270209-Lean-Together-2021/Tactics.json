[
    {
        "content": "<p>In <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> 's talk, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> asked whether the new tactic framework would support simprocs and it was not clear what those exactly are. I'll try to clarify them to the best of my understanding: to define a simproc, you give a term pattern for which the simplifier should look for in the goal. Additionally you give a conversion, that is, a function that for a given term <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> gives you a theorem <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>≡</mo><msup><mi>t</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">t \\equiv t'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>t</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">t'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is a simplified version of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>. </p>\n<p>I will explain why you would do this instead of using the simplifier by giving an example: suppose we register a simproc that looks for occurences of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>is_prime </mtext><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">\\text{is\\_prime}\\ c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.97786em;vertical-align:-0.31em;\"></span><span class=\"mord text\"><span class=\"mord\">is_prime</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">c</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> is a literal number. Then, our function looks at the number and efficiently (without going through the inference kernel) computes a certificate that proves whether the number is prime or not. We then use the simplifier to turn the certificiate into a proof of primality. With this approach we avoid using the simplifier to compute the certificate which is slow (at least in Isabelle). </p>\n<p>The architecture that <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> talked about where you can register tactics as unsafe resolution rules roughly corresponds to what are called solvers/loopers in Isabelle. Those are tactics which are called when auto cannot make progress any more using the simplifier or resolution rules. I am not exactly sure about the order of those procedures in Isabelle but simprocs are also tried at that level, probably before loopers and solvers. Of course, the architecture could just make the pattern optional and thus unify the concept of a simproc and a solver. However, there should be some smart way to handle precedence between those procedures then. Maybe try from most specific to most general pattern first and then try those procedures without patterns or even with integer preferences?</p>\n<p>Anyway, I hope you will find this (hopefully mostly correct) explanation useful.</p>",
        "id": 221805671,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1609958683
    },
    {
        "content": "<p>Thank you very much! This matches what I thought simprocs were (which I did not convey very well during the Q&amp;A). I think of them as 'custom simp rules' in analogy with the 'custom resolution rules' I described: both are arbitrary tactics which effectively construct a rule on the fly.</p>\n<p>The exact order of things in Isabelle is something I should definitely look at again. My initial impression was that Isabelle's architecture is a bit cumbersome; it seemed like it may have developed as piecemeal extensions of the simplifier more so than a bigger search procedure which incorporates the simplifier. But it is equally possible that I just don't understand the reasons why the architecture is what it is.</p>",
        "id": 221826925,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1609968961
    },
    {
        "content": "<p>Can't you at least find out <em>who</em> wrote the Isabelle version? Or at least the name of someone knowing a lot about it. Talking to such people would certainly be much more productive than reading the source code, at least in the beginning.</p>",
        "id": 221827462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609969348
    },
    {
        "content": "<p>I saw Makarius was attending multiple of the talks today. He'd be my first lead into the Isabelle community.</p>",
        "id": 221827900,
        "sender_full_name": "Jacques Carette",
        "timestamp": 1609969648
    },
    {
        "content": "<p>I guess blast and auto (at least the first versions) were probably written by Larry Paulson.</p>",
        "id": 221828654,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609970075
    },
    {
        "content": "<p>A keyword is tableau-prover.</p>",
        "id": 221828829,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609970177
    },
    {
        "content": "<p><a href=\"https://www.cl.cam.ac.uk/~lp15/papers/Isabelle/blast.pdf\">https://www.cl.cam.ac.uk/~lp15/papers/Isabelle/blast.pdf</a></p>",
        "id": 221828871,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609970207
    },
    {
        "content": "<p>Yes, the credit for auto goes to Larry. It might also be worth taking a look at Bohua Zhan's auto2 . There are some good ideas there, though to some extent he was re-discovering existing methods, so his terminology is idiosyncratic.</p>\n<p>I think a contemporary update to auto should make use of key ideas from SMT solvers, most importantly, e-matching and the use of triggers to instantiate quantifiers.</p>",
        "id": 221829825,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1609970729
    },
    {
        "content": "<p>BTW, one more related feature I missed while porting some proof from Isabelle: ability to say that lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>applies only if <code>n</code> is not exactly <code>0</code>. I had to turn this lemma into <code>∃ c, ∀ n, f n = c + n * 3</code>.</p>",
        "id": 221838102,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1609975803
    },
    {
        "content": "<p>That would be useful for a lemma like <code>foo [subsingleton A] [has_one A] (a : A) : a = 1</code> too, which today can't be simp as it loops</p>",
        "id": 221838423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609976052
    },
    {
        "content": "<p>What about <code>bar [subsingleton A] [has_zero A] (a : A) : a = 0</code></p>",
        "id": 221838640,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609976217
    },
    {
        "content": "<p>Neither can really be <code>simp</code></p>",
        "id": 221838663,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609976241
    },
    {
        "content": "<p>Yeah, I guess you can't really have both, but if you picked just one and used a \"don't apply if syntactically equal\" rule you might be ok</p>",
        "id": 221839315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609976707
    },
    {
        "content": "<p>What do you do about <code>fin 1</code>?</p>",
        "id": 221839436,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1609976804
    },
    {
        "content": "<p>Perhaps then a <code>canonical_subsingleton</code> which specifies a canonical syntactic value</p>",
        "id": 221840979,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609977927
    },
    {
        "content": "<p>Which would obviously be 0 for fin 1</p>",
        "id": 221841002,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609977950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270209-Lean-Together.202021/topic/Tactics/near/221838423\">said</a>:</p>\n<blockquote>\n<p>That would be useful for a lemma like <code>foo [subsingleton A] [has_one A] (a : A) : a = 1</code> too, which today can't be simp as it loops</p>\n</blockquote>\n<p>Actually it can't be a simp lemma because it has a variable on the lhs, and even if it wasn't syntactically disallowed it would trigger on literally everything</p>",
        "id": 221861178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610000720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270209-Lean-Together.202021/topic/Tactics/near/221838423\">said</a>:</p>\n<blockquote>\n<p>That would be useful for a lemma like <code>foo [subsingleton A] [has_one A] (a : A) : a = 1</code> too, which today can't be simp as it loops</p>\n</blockquote>\n<p>As Mario has already said, the reason this doesn't work is because <code>a</code> is a variable and Lean ignores such lemmas.  However, it wouldn't loop:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">has_zero.zero</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.simplify.rewrite</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span> <span class=\"c1\">-- rewrites using foo, but doesn't loop</span>\n</code></pre></div>\n<p>(This is known as Floris' trick and we also use it in mathlib.)</p>",
        "id": 221921563,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610011901
    },
    {
        "content": "<p>The eta-expansion of the instance is only necessary so that the simplifier doesn't reject the lemma outright.</p>",
        "id": 221921624,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610011946
    },
    {
        "content": "<p>Do you have an example of where this is used in mathlib in mind?</p>",
        "id": 221932624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610020126
    },
    {
        "content": "<p>Here is the unit test: <a href=\"https://github.com/leanprover-community/mathlib/blob/95c70870d2e77bea6f74b23e339734b860375877/test/lint_simp_comm.lean#L24\">https://github.com/leanprover-community/mathlib/blob/95c70870d2e77bea6f74b23e339734b860375877/test/lint_simp_comm.lean#L24</a><br>\nAnd here is how it used in mathlib: <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/afbf47d5739ec69e6fdbb66fac2ce1d478f0ae64/src/data/finset/basic.lean#L1213\">https://github.com/leanprover-community/mathlib/blob/afbf47d5739ec69e6fdbb66fac2ce1d478f0ae64/src/data/finset/basic.lean#L1213</a></p>",
        "id": 221937581,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610023748
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> We can simplify an application of filter where the decidability is inferred in \"the wrong way\" -/</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">filter_congr_decidable</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s.filter</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">congr</span>\n</code></pre></div>",
        "id": 221937602,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1610023760
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 221937915,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610023996
    },
    {
        "content": "<p>Thanks you for all the references. To the degree that <code>auto</code> is similar to <code>blast</code>, I understand what's going on, but it seems like <code>auto</code> is significantly more popular, so I'd like to know where that comes from. I'll track down Makarius or Larry. E-matching and triggers are on the reading queue, and <code>auto2</code> on the re-reading queue, for when my CPP talk is done.</p>\n<p>The discussion about simp lemmas that require some syntactic condition on the term is very interesting. Seems like there are some compelling use cases for 'simprocs', so I'll look into how hard it would be to add something like this.</p>",
        "id": 221942797,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1610027213
    },
    {
        "content": "<p>In auto2, it is quite easy to make rules conditional to avoid loops.</p>",
        "id": 221943210,
        "sender_full_name": "Lukas Stevens",
        "timestamp": 1610027418
    }
]