[
    {
        "content": "<p>Leo: I tried some of the advent of code exercises in Lean4 and it was very pleasant to program in.  I really like the <code>foo (&lt;- bar)</code> notation.  It eliminates the need for a lot of monadic combinators.</p>",
        "id": 221551058,
        "sender_full_name": "Jason Rute",
        "timestamp": 1609780108
    },
    {
        "content": "<p>Question about persistent data structures: When you compare persistent data structures in C++ and Lean 4, do you use them persistently?</p>",
        "id": 221551371,
        "sender_full_name": "Jason Rute",
        "timestamp": 1609780240
    },
    {
        "content": "<p>i missed the zoom chat about porting mathlib to lean 4. did anyone conclude or plan anything, can someone share a TLDR of the conversation?</p>",
        "id": 221587056,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609797701
    },
    {
        "content": "<p>I didn’t happen on Zoom in the end (I think due to time).</p>",
        "id": 221592600,
        "sender_full_name": "Jason Rute",
        "timestamp": 1609800976
    },
    {
        "content": "<blockquote>\n<p>When you compare persistent data structures in C++ and Lean 4, do you use them persistently?</p>\n</blockquote>\n<p>No. The comparison I was referring to was on a benchmark where the tree was being used linearly.<br>\nIn benchmarks where persistency matter, the Lean 4 version is several orders of magnitude faster than the C++ std version since we have to keep copying the whole tree in C++.<br>\nWe believe the Lean and Koka implementations are faster than the C++ version because of two ingredients: \"counting immutable beans\" paper and mimalloc.</p>",
        "id": 221593063,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609801255
    },
    {
        "content": "<p>Binary trees in the STL are known to be slow right? So Lean 4 being faster on that front isn't really surprising.</p>",
        "id": 221599713,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1609806427
    },
    {
        "content": "<p>It was surprising to me and my colleagues. The STL version is performing destructive updates, and our version is pure. Our version is also much faster than Haskell. It was surprising to Simon PJ. He conjectured that we would only be faster when the trees were being updated linearly. However, when we tried nonlinear benchmarks, the Lean version was even faster. <br>\nBTW, when we reported our results, many were skeptical and doubted our experimental results were correct. Now, they were reproduced in Koka, this kind of doubt is gone.<br>\nThe Lean version is also much faster than the persistent red-black tree used in Lean 3 and implemented in C++. I implemented both versions :)</p>",
        "id": 221600457,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1609807010
    },
    {
        "content": "<p>To be clear, which C++ STL \"tree\" container are we comparing to here?</p>",
        "id": 221620957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609833722
    },
    {
        "content": "<p>set/map/multiset I guess</p>",
        "id": 221625077,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1609837461
    },
    {
        "content": "<p>so if I just have an STL <code>map&lt;string, int&gt;</code> and I insert a million entries into it and do a million random reads, I should expect the equivalent to be faster in Lean 4 than in C++?</p>",
        "id": 221671275,
        "sender_full_name": "Kevin Lacker",
        "timestamp": 1609865787
    }
]