[
    {
        "content": "<p>I just pushed a new file <code>src/statement.lean</code> that contains only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- some imports</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">breen_deligne.package</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">c_</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">BD.data.very_suitable</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">c_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">first_target_stmt</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)],</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">c₀</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">S</span><span class=\"o\">],</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">SemiNormedGroup.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">normed_with_aut</span> <span class=\"n\">r</span> <span class=\"n\">V</span><span class=\"o\">],</span>\n    <span class=\"bp\">​</span><span class=\"o\">((</span><span class=\"n\">BD.data.system</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">V</span> <span class=\"n\">r'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"bp\">$</span> <span class=\"n\">of</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">Mbar</span> <span class=\"n\">r'</span> <span class=\"n\">S</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">is_weak_bounded_exact</span> <span class=\"n\">k</span> <span class=\"n\">K</span> <span class=\"n\">m</span> <span class=\"n\">c₀</span>\n</code></pre></div>",
        "id": 240842164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622472591
    },
    {
        "content": "<p>The file <code>src/liquid.lean</code> now also contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"n\">r'</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">BD.data.very_suitable</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"n\">c_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">first_target_stmt</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span>\n<span class=\"n\">first_target</span> <span class=\"n\">BD</span> <span class=\"n\">c_</span> <span class=\"n\">r</span> <span class=\"n\">r'</span>\n</code></pre></div>",
        "id": 240842240,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622472621
    },
    {
        "content": "<p>One of our goals can now be to make sure that (i) the project keeps compiling sorry-free, as it does now, and (ii) <code>src/statement.lean</code> imports as few lines of code as possible.</p>",
        "id": 240842362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622472702
    },
    {
        "content": "<p>Working on (ii) will probably require splitting some files into pieces.</p>",
        "id": 240842385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622472718
    },
    {
        "content": "<p>The imports currently are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">pseudo_normed_group.system_of_complexes</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mbar.pseudo_normed_group</span>\n<span class=\"kn\">import</span> <span class=\"n\">breen_deligne.homotopy</span>\n</code></pre></div>",
        "id": 240842595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622472837
    }
]