[
    {
        "content": "<p>Do I understand correctly that we do not yet have a definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_{p}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> as comphausly filtered pseudo-normed group in Lean?</p>",
        "id": 253575946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631796736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> is working hard on Thm 6.9. Once we have that, we want to show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">M</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M_p(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> is a quotient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">M</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>T</mi><mo stretchy=\"false\">)</mo><msub><mo stretchy=\"false\">)</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathcal M(S, \\Z((T))_{r&#x27;})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathcal\">M</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> (for suitable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">r&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>). I think this space of \"integral Laurent measures\" is more or less completely formalized.</p>",
        "id": 253576153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631796835
    },
    {
        "content": "<p>I confess I have a bit lost track of what was going on outside of Thm 6.9, so I can't be of much help. I honestly don't even know if we already have that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> is a <code>comphaus_bla</code> (which I will need soon, at any rate). I remember <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  pushed something last week, though.</p>",
        "id": 253576499,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1631796990
    },
    {
        "content": "<p>Last week I proved that <code>CompHaus..._1</code> has all limits.</p>",
        "id": 253576903,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631797159
    },
    {
        "content": "<p>Still nothing about comhaus_filt... For M_p(S) with S finite</p>",
        "id": 253576964,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631797190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> At some point you formalized <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mover accent=\"true\"><mi mathvariant=\"script\">M</mi><mo stretchy=\"true\">‾</mo></mover><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></msub><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathcal M}_{r&#x27;}(S)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13333em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8833300000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathcal\">M</span></span></span><span style=\"top:-3.80333em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32797999999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6828285714285715em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span> as presheaf, I think.<br>\nThats everything coming after: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/Mbar/Mbar_le.lean#L501\">https://github.com/leanprover-community/lean-liquid/blob/master/src/Mbar/Mbar_le.lean#L501</a></p>\n<p>Should this be refactored to make use of the new <code>CompHaus..._1</code> stuff?</p>",
        "id": 253577204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631797264
    },
    {
        "content": "<p>I think if we have a functor <code>Fintype =&gt; CompHaus...</code> then it can be extended to <code>Profinte =&gt; CompHaus_1</code> quite formally, right?</p>",
        "id": 253577299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631797299
    },
    {
        "content": "<p>Yeah, that's the idea.</p>",
        "id": 253577340,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631797317
    },
    {
        "content": "<p>We have the stuff in for_mathlib/Profinite/extend.lean</p>",
        "id": 253577422,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631797338
    },
    {
        "content": "<p>Marvellous!</p>",
        "id": 253577523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631797405
    },
    {
        "content": "<p>So, do I understand correctly that we should now copypasta the Laurent measures directory, and build a version over the reals?</p>",
        "id": 253577595,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631797438
    },
    {
        "content": "<p>There is one missing thing in that extend.lean file: that the extension of a functor from Fintype preserves filtered colimits.</p>",
        "id": 253577661,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631797450
    },
    {
        "content": "<p>Also, can we state 9.4 for profinite <code>S</code> already?</p>",
        "id": 253577680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631797456
    },
    {
        "content": "<p>I don't know if we will actually need that, but it's what's left to have a more or less complete api</p>",
        "id": 253577713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631797474
    },
    {
        "content": "<p>I'll try to define <code>Mbar.functor : Profinite =&gt; ProFiltPseuNormGrp_1</code> using your machinery.</p>",
        "id": 253577893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631797553
    },
    {
        "content": "<p>We don't have ProFilt..._1, but we probably should <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 253577998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631797578
    },
    {
        "content": "<p>We actually need to target <code>ProFiltPseuNormGrpWithTinv r'</code></p>",
        "id": 253585847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631800638
    },
    {
        "content": "<p>I hope that it has all the right limits <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 253585901,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631800654
    },
    {
        "content": "<p>It should, as long as the basic structure mimics the definition of <code>CompHaus...\\_1</code> (including the exhaustive condition, and the strictness of morphisms)</p>",
        "id": 253586064,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631800698
    },
    {
        "content": "<p>maps are strict, but the filtration isn't exhaustive, as of now.</p>",
        "id": 253586128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631800724
    },
    {
        "content": "<p>The <code>Tinv</code> automorphism will not be an automorphism in the category itself, but we can still encode it in some other way</p>",
        "id": 253586144,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631800729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measures.20.2F.20R/near/253586128\">said</a>:</p>\n<blockquote>\n<p>maps are strict, but the filtration isn't exhaustive, as of now.</p>\n</blockquote>\n<p>the exhaustive condition is required to define the <code>lift</code> for a limit.</p>",
        "id": 253586268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631800776
    },
    {
        "content": "<p>For 9.4, we really need the <code>Tinv</code>, also in the case of profinite <code>S</code>.</p>",
        "id": 253588099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631801441
    },
    {
        "content": "<p>So we cannot make do with some \"easier\" category of comphaus filtered stuff or so.</p>",
        "id": 253588195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631801484
    },
    {
        "content": "<p>I don't think the <code>Tinv</code> will cause much trouble though. We just need to add the exhaustion to the conditions.</p>",
        "id": 253588255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631801514
    },
    {
        "content": "<p>No, it shouldn't. It should be possible to mimic what I've done in the comphaus case for the profinite_with_Tinv case.</p>",
        "id": 253588655,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631801653
    },
    {
        "content": "<p>I'm looking at the definition of the hom's now.</p>",
        "id": 253588684,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631801665
    },
    {
        "content": "<p>In fact, we can redefine these as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">profinitely_filtered_pseudo_normed_group_with_Tinv_hom</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">profinitely_filtered_pseudo_normed_group_with_Tinv</span> <span class=\"n\">r'</span> <span class=\"n\">M₁</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">profinitely_filtered_pseudo_normed_group_with_Tinv</span> <span class=\"n\">r'</span> <span class=\"n\">M₂</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">strict_comphaus_filtered_pseudo_normed_group_hom</span> <span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_Tinv'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">Tinv</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Tinv</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>which is defeq-ish to the previous definition</p>",
        "id": 253588959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631801777
    },
    {
        "content": "<p>Sure, makes sense.</p>",
        "id": 253589413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631801961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I just pushed a new file <code>Mbar/functor.lean</code> containing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `Mbar r' S` extends to a functor in `S`, for profinite `S`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">functor</span> <span class=\"o\">:</span> <span class=\"n\">Profinite</span> <span class=\"bp\">⥤</span> <span class=\"n\">ProFiltPseuNormGrpWithTinv</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span>\n<span class=\"n\">Profinite.extend</span> <span class=\"o\">(</span><span class=\"n\">fintype_functor</span> <span class=\"n\">r'</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and 1 sorry.</p>",
        "id": 253590010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631802192
    },
    {
        "content": "<p>The sorry is about those limits existing.</p>",
        "id": 253590036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631802205
    },
    {
        "content": "<p>Are you exhaustifying those objects atm? I guess this might imply a whole bunch of fixes throughout the library...</p>",
        "id": 253590514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631802392
    },
    {
        "content": "<p>Yeah, that sorry won't be true without exhaustifyingg.</p>",
        "id": 253590552,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631802408
    },
    {
        "content": "<p>I have a meeting soon, but I can try to exhaustify after that :)</p>",
        "id": 253590591,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631802425
    },
    {
        "content": "<p>We'll have to figure out how to handle products at some point... the current ad-hoc construction doesn't give a categorical product unless the index set is finite.</p>",
        "id": 253591041,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631802592
    },
    {
        "content": "<p>But we only need finite products, right?</p>",
        "id": 253591181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631802633
    },
    {
        "content": "<p>Problem solved? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 253591234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631802652
    },
    {
        "content": "<p>I've added: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">limits.has_limits</span> <span class=\"n\">ProFiltPseuNormGrp₁.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_limits_of_has_limits_creates_limits</span> <span class=\"n\">to_CHFPNG₁</span>\n</code></pre></div>",
        "id": 253627579,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631816762
    },
    {
        "content": "<p>For the <code>Tinv</code> stuff, I think the best thing to now do is to prove that the functor from <code>ProFilt...WithTinv</code> to <code>ProFiltPseuNormGrp₁</code> creates limits.</p>",
        "id": 253627688,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631816801
    },
    {
        "content": "<p>Hmm... it looks like exhaustifying <code>ProFiltPseuNormGrpWithTinv</code> is going to be a nontrivial refactor, and I don't think I have enough time for this today. If anyone wants to take it on, please do so!</p>",
        "id": 253632173,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631818581
    },
    {
        "content": "<p>It might be easier to just create a new category. Then the proof of 9.4 can use non-exhaustive objects.</p>",
        "id": 253683829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631849032
    },
    {
        "content": "<p>We can always clean up later.</p>",
        "id": 253683837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631849039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I've pushed <code>src/real_measures.lean</code>. I haven't done the topology yet.</p>",
        "id": 253687495,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631852497
    },
    {
        "content": "<p>Whoops! Never push code before breakfast <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <br>\nThe definition is all wrong.</p>",
        "id": 253693697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631857681
    },
    {
        "content": "<p>Looks good! How hard is proving the <code>comphaus_filtered_pseudo_normed_group</code> instance? Does mathlib know that the l^p ball is compact?</p>",
        "id": 253735123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631882295
    },
    {
        "content": "<p>Oh, one more think (looking at the commented out code): We want the functor to take place in <code>CompHausFiltPseuNormGrp_1</code> which is the category with limits, so <code>map_hom</code> should be in <code>strict_comphaus_filtered_pseudo_normed_group_hom</code></p>",
        "id": 253735706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631882580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measures.20.2F.20R/near/253683829\">said</a>:</p>\n<blockquote>\n<p>It might be easier to just create a new category. Then the proof of 9.4 can use non-exhaustive objects.</p>\n</blockquote>\n<p>Sure, that's probably the easiest approach. I'll try to do this later today.</p>",
        "id": 253735965,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631882702
    },
    {
        "content": "<p>So the diagram of all of these categories will look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code> CompHausFilt_1 --------&gt; CompHausFilt ---------&gt; Cond (Ab)\n    ^                          ^\n    |                          |\nProFinFilt_1   --------&gt; ProFinFilt\n    ^                         ^\n    |                         |\nProFinFiltWithTinv_1 --&gt; ProFinFiltWithTinv\n</code></pre></div>\n<p>The left hand side have an exhaustive filtration with strict morphisms, and will all have limits, and the middle column need not be exhaustive.</p>",
        "id": 253736317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631882913
    },
    {
        "content": "<p>Looks good!</p>",
        "id": 253736579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631883047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/spaces.20of.20measures.20.2F.20R/near/253735123\">said</a>:</p>\n<blockquote>\n<p>Looks good! How hard is proving the <code>comphaus_filtered_pseudo_normed_group</code> instance? Does mathlib know that the l^p ball is compact?</p>\n</blockquote>\n<p>I have no idea. I'll find out in the next few hours (-;</p>",
        "id": 253737070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631883283
    },
    {
        "content": "<p>I killed some sorries. Time to start thinking about the topology.</p>",
        "id": 253744562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631886536
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">pfpng_real_measures</span> <span class=\"o\">:</span> <span class=\"n\">comphaus_filtered_pseudo_normed_group</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>is sorry free, except for compactness.</p>",
        "id": 253748544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631888090
    },
    {
        "content": "<p>compactness is converging. but first I'll have dinner</p>",
        "id": 253759309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631892265
    },
    {
        "content": "<p>done</p>",
        "id": 253780864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631900962
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">CompHausFiltPseuNormGrp.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">CompHausFiltPseuNormGrp.of</span> <span class=\"bp\">$</span> <span class=\"n\">ℳ</span> <span class=\"n\">p</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>is now sorry free</p>",
        "id": 253785459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631902853
    },
    {
        "content": "<p>We need it in <code>CompHausFiltPseuNormGrp_1</code> ;) (so we can take limits)</p>",
        "id": 253785870,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631903031
    },
    {
        "content": "<p>yeah, but I imagine that will be an easy tweak (-;</p>",
        "id": 253786392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631903229
    },
    {
        "content": "<p>I just pushed</p>",
        "id": 253786399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631903233
    },
    {
        "content": "<p>Sure, it should be easy enough to tweak. Do you want me to do it?</p>",
        "id": 253786621,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631903325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I'm almost done</p>",
        "id": 253787105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631903505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I pushed the strictification</p>",
        "id": 253787829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631903795
    },
    {
        "content": "<p>Btw, I'm making <code>ℳ p S</code> local notation, so that we can use the same notation for the actual condensed abelian group.</p>",
        "id": 253790634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631905008
    },
    {
        "content": "<p>With a bit of luck, the statement of the challenge will look very similar to what is written in the blogpost.</p>",
        "id": 253790691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631905031
    },
    {
        "content": "<p>The following is now sorry-free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">limits.has_limits</span> <span class=\"o\">(</span><span class=\"n\">ProFiltPseuNormGrpWithTinv₁.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_limits_of_has_limits_creates_limits</span> <span class=\"o\">(</span><span class=\"n\">to_PFPNG₁</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 254258236,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1632250188
    },
    {
        "content": "<p>I was trying to define the following coercion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>to view a real number as the constant function on <code>S</code>. Although Lean does not complain on the nose, I get an error while doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">((</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"c1\">-- this works</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"c1\">-- this does not work: it runs for a minute or so and then says \"maximum class-instance</span>\n<span class=\"c1\">--resolution depth has been reached  (the limit can be increased by setting option</span>\n<span class=\"c1\">-- 'class.instance_max_depth') (the class-instance resolution trace can be visualized by</span>\n<span class=\"c1\">-- setting option 'trace.class_instances')\"</span>\n</code></pre></div>\n<p>Any idea?</p>",
        "id": 279394686,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650366949
    },
    {
        "content": "<p>Maybe there is a loop. Where can I test this?</p>",
        "id": 279395184,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650367296
    },
    {
        "content": "<p>I mean, in which file of LTE</p>",
        "id": 279395191,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650367306
    },
    {
        "content": "<p>I have just tried to introduce it in <code>laurent_measures/add_stable.lean</code>, the above code is commented on lines 32-34 of the version on <code>master</code></p>",
        "id": 279399357,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650370032
    },
    {
        "content": "<p><code>#check (↑a : (ℳ S))</code> works, so it should be something related to automatically insert <code>↑</code></p>",
        "id": 279401669,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650371450
    },
    {
        "content": "<p>Oh, thanks! That's weird, no?</p>",
        "id": 279401711,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650371474
    },
    {
        "content": "<p>Mmh, maybe you should use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_coe_to_fun\">docs#has_coe_to_fun</a></p>",
        "id": 279401776,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650371517
    },
    {
        "content": "<p>Ok, let me try. I confess I never understood the difference.</p>",
        "id": 279401957,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650371624
    },
    {
        "content": "<p><code>coe_fn</code> can be inserted where a function is expected. <code>coe</code> can't. Namely, <code>coe_fn f x</code> will elaborate while <code>coe f x</code> won't. But here that doesn't seem to be the problem because Lean isn't expecting a function as you aren't doing <code>a x</code> but just <code>a</code> (it just so happens that the expected type is a type of functions, but you aren't using it as such).</p>",
        "id": 279402287,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650371808
    },
    {
        "content": "<p>It's just a random try, I don't understand what's going on either</p>",
        "id": 279402324,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650371844
    },
    {
        "content": "<p>I see, but I ran into an even earlier problem: if I try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>it requires me to add an <code>out_parameter</code></p>",
        "id": 279402389,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650371882
    },
    {
        "content": "<p>That's not how you use <code>has_coe_to_fun</code>.</p>",
        "id": 279402485,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650371925
    },
    {
        "content": "<p>It's probably something like <code>instance : has_coe_to_fun ℝ (λ _, ℳ S) := ⟨λ a s, a⟩</code>, but it doesn't work</p>",
        "id": 279402528,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650371951
    },
    {
        "content": "<p>I'm not sure what <code>ℳ</code> is, but <code>has_coe_to_fun ℝ (λ _, ℳ S)</code> will get you closer.</p>",
        "id": 279402534,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650371955
    },
    {
        "content": "<p>I see, I guess I see the difference (and agree that I don't need it here). Yet, I don't understand why <code>has_coe</code> requires the upper-arrow, whereas it can normally detect it automagically.</p>",
        "id": 279402557,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650371971
    },
    {
        "content": "<p>It is not a huge deal, just a bit odd.</p>",
        "id": 279402676,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372032
    },
    {
        "content": "<p>Just to clarify, <code>ℳ</code> is defined by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">real_measures</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span>\n<span class=\"kd\">parameter</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℳ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">real_measures</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 279402692,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650372044
    },
    {
        "content": "<p>Ah so <code>ℳ</code> is the one that should get a <code>fun_like</code> instance!</p>",
        "id": 279402755,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650372086
    },
    {
        "content": "<p><code>has_coe_to_fun</code> seems like a red herring here</p>",
        "id": 279402911,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650372175
    },
    {
        "content": "<p>Well, I am very happy with <code>has_coe</code> indeed.</p>",
        "id": 279402979,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372218
    },
    {
        "content": "<p>What happens with <code>#check (a : (ℳ S))</code> if you <em>don't</em> define any new instance?</p>",
        "id": 279403248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650372351
    },
    {
        "content": "<p>Let me try</p>",
        "id": 279403292,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372364
    },
    {
        "content": "<p>invalid type ascription, term has type<br>\n  ℝ : Type<br>\nbut is expected to have type<br>\n  real_measures p S : Type u</p>",
        "id": 279403346,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372403
    },
    {
        "content": "<p>Well, but the <code>has_coe</code> works, as Riccardo pointed out. The funny behaviour is with the arrow, I find.</p>",
        "id": 279403456,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372476
    },
    {
        "content": "<p>I am trying with <code>set_option trace.class_instances true</code> (I've named the instance <code>foo</code>). There is a</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_13</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">ℝ</span> <span class=\"bp\">?</span><span class=\"n\">x_12</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"bp\">?</span><span class=\"n\">x_14</span> <span class=\"bp\">?</span><span class=\"n\">x_15</span> <span class=\"bp\">?</span><span class=\"n\">x_16</span> <span class=\"bp\">?</span><span class=\"n\">x_17</span> <span class=\"bp\">?</span><span class=\"n\">x_18</span> <span class=\"bp\">?</span><span class=\"n\">x_19</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_18</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_4</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">caching</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">_inst_4</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_17</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_4</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_17</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_3</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">caching</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">_inst_3</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_16</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_14</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_4</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_16</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_14</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_3</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_16</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_14</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_2</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">caching</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">_inst_2</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_15</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_4</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_15</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_3</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_15</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_2</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_15</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">_inst_1</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"n\">caching</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">_inst_1</span>\n</code></pre></div>",
        "id": 279403544,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650372511
    },
    {
        "content": "<p>That looks promising</p>",
        "id": 279403552,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650372516
    },
    {
        "content": "<p>Promising <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ?</p>",
        "id": 279403594,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372552
    },
    {
        "content": "<p>Maybe using <code>has_coe_t</code> would work</p>",
        "id": 279403759,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650372616
    },
    {
        "content": "<p>Mmh, maybe the problem is coming from all the <code>fact</code>.  At the beginning there is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">parmeter</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">r</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">r</span> <span class=\"n\">p</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℳ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">real_measures</span> <span class=\"n\">p</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℒ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">laurent_measures</span> <span class=\"n\">r</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span><span class=\"o\">)]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">((</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ϖ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Fintype.of</span> <span class=\"o\">(</span><span class=\"n\">punit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">θ_section</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℳ</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℒ</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">ϑ_section</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">p</span> <span class=\"n\">S</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">summable_ϑ_section</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">p</span> <span class=\"n\">S</span> <span class=\"n\">g</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"n\">ℳ</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 279403853,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650372669
    },
    {
        "content": "<p>And there are lines like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_399</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">real_measures</span> <span class=\"o\">(</span><span class=\"bp\">@«</span><span class=\"n\">r</span><span class=\"bp\">»</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">x_19</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_396</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">ray_vector.has_coe</span> <span class=\"bp\">?</span><span class=\"n\">x_431</span> <span class=\"bp\">?</span><span class=\"n\">x_432</span> <span class=\"bp\">?</span><span class=\"n\">x_433</span>\n</code></pre></div>\n<p>Even forgetting about <code>ray_vector.has_coe</code>, the fact that it is trying with <code>p * p * p</code> doesn't look good.</p>",
        "id": 279404007,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650372744
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))]</span>\n</code></pre></div>\n<p>I'm not even sure what this does considering it mentions no variables</p>",
        "id": 279404010,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650372749
    },
    {
        "content": "<p>Does that mean it is included in all definitions?</p>",
        "id": 279404062,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650372778
    },
    {
        "content": "<p>It is, or in most of them. I was not very happy with this line, but the problem is that some <em>construction</em> relies on a parameter <code>r</code> together with two facts that <code>0 &lt; r</code> and <code>r &lt; 1</code>. And here I am specializing to <code>r=1/2</code> so Lean asks for the corresponding facts.</p>",
        "id": 279404157,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372840
    },
    {
        "content": "<p>I think so, in the infoview of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"n\">_inst_4</span><span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 279404207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650372845
    },
    {
        "content": "<p>What if you move the has_coe declaration before the variables lines that set up the facts?</p>",
        "id": 279404306,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650372907
    },
    {
        "content": "<p>Let me try</p>",
        "id": 279404333,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372924
    },
    {
        "content": "<p>Oh, this works!</p>",
        "id": 279404457,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1650372972
    },
    {
        "content": "<p>YES!</p>",
        "id": 279404459,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372974
    },
    {
        "content": "<p>It works</p>",
        "id": 279404462,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372976
    },
    {
        "content": "<p>Great.</p>",
        "id": 279404469,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650372981
    },
    {
        "content": "<p>The issue is that since you mention p (implicitly because it is a parameter), any instance constraint becomes part of the constraints of the has_coe.</p>",
        "id": 279404527,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650373017
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 279404547,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650373031
    },
    {
        "content": "<p>Thanks</p>",
        "id": 279404571,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650373043
    },
    {
        "content": "<p>So we do the regular mathlib thing, where the definition works on all values</p>",
        "id": 279404594,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650373062
    },
    {
        "content": "<p>Thanks to Reid for suggesting the TC trace</p>",
        "id": 279404666,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650373089
    },
    {
        "content": "<p>I don't think I suggested that but I was about to when it appeared!</p>",
        "id": 279404706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650373115
    },
    {
        "content": "<p>And Riccardo for being proactive on it too :-)</p>",
        "id": 279404767,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1650373154
    },
    {
        "content": "<p>Shouldn't</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))]</span>\n</code></pre></div>\n<p>rather be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">one_half_pos</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 279405079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650373278
    },
    {
        "content": "<p>Yes, it should. You are right</p>",
        "id": 279405114,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650373301
    },
    {
        "content": "<p>The whole <code>fact</code> thing is completely out of control in LTE and I seem to spend half my life writing <code>fact.elim infer_instance</code> to extract a proof that 0&lt;r when I could just be writing <code>hr</code>.</p>",
        "id": 279410255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650375682
    },
    {
        "content": "<p>The variables are particularly problematic as we've just seen.</p>",
        "id": 279410359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650375728
    },
    {
        "content": "<p><code>fact.out _</code> is shorter.</p>",
        "id": 279410365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650375730
    },
    {
        "content": "<p>If you have <code>[hr : fact blah]</code> you can also write <code>hr.1</code>.</p>",
        "id": 279410393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650375748
    },
    {
        "content": "<p>yeah but we don't because they're unnamed variables!</p>",
        "id": 279410420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650375764
    },
    {
        "content": "<p>I am not at all convinced by this <code>fact</code> approach</p>",
        "id": 279410452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650375778
    },
    {
        "content": "<p>I am not clear about what problem it is supposed to be solving. If we have (r : R) [fact (r &lt; 1)] then r is explicit. If we have (hr : r &lt; 1) then we can make r implicit and just use hr instead of r (one character longer). Why get your hands dirty with <code>fact</code>s? We saw above an unpleasant consequence.</p>",
        "id": 279410726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650375916
    },
    {
        "content": "<p>Maybe I missed the part where they were actually useful, but the fact remains that I spent the last week working around them because random lemmas ask for the proofs explicitly.</p>",
        "id": 279411095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650376094
    },
    {
        "content": "<p>We have a bunch of files</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">facts</span><span class=\"bp\">/</span><span class=\"n\">int.lean</span>  <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">facts</span><span class=\"bp\">/</span><span class=\"n\">nnreal.lean</span>  <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">facts</span><span class=\"bp\">/</span><span class=\"n\">normed_group.lean</span>\n</code></pre></div>\n<p>that contain lots of trivialities. The idea is that those trivialities are applied transparently.</p>",
        "id": 279411099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650376096
    },
    {
        "content": "<p>I think that in the first part, this really worked well, and was used a lot.</p>",
        "id": 279411139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650376119
    },
    {
        "content": "<p>Aha</p>",
        "id": 279411153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650376126
    },
    {
        "content": "<p>OK so indeed I can report that <code>fact.out _</code> is far more powerful than what I was doing with <code>fact.elim _</code>. The point is that, rightly or wrongly, there is a ton of basic inequality stuff which the type class inference system has been taught; <code>fact.elim</code> demands you input the fact, but <code>fact.out</code> gets type class inference to find it for you. This is a very devious trick and one I had not properly understood until now. Did you guys get the green light from the CS people to do this??</p>",
        "id": 279519851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650447579
    },
    {
        "content": "<p>It's not mathlib policy compatible, and wouldn't scale to a library the size of mathlib in its current form</p>",
        "id": 279530420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650454691
    },
    {
        "content": "<p>You can get basically the same effect with a tactic that uses <code>apply_rules</code></p>",
        "id": 279530464,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650454729
    }
]