[
    {
        "content": "<p>Scott suggested that we do a mathlib sprint before continuing with the <code>col_exact</code> part of the proof. I think he has a very good point.</p>",
        "id": 237274921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620110040
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">jmc</span><span class=\"bp\">@</span><span class=\"n\">atarrimbo</span><span class=\"o\">:</span><span class=\"bp\">~/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">math</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">liquid</span><span class=\"bp\">$</span> <span class=\"n\">wc</span> <span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/*.</span><span class=\"n\">lean</span>\n    <span class=\"mi\">18</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">additive_functor.lean</span>\n    <span class=\"mi\">93</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">add_monoid_hom.lean</span>\n    <span class=\"mi\">89</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow.lean</span>\n    <span class=\"mi\">16</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">big_operators_basic.lean</span>\n    <span class=\"mi\">30</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">category.lean</span>\n     <span class=\"mi\">9</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">curry.lean</span>\n    <span class=\"mi\">42</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp.lean</span>\n    <span class=\"mi\">55</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">equalizers.lean</span>\n    <span class=\"mi\">31</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">extend_from_nat.lean</span>\n    <span class=\"mi\">36</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">filter_at_top_bot.lean</span>\n    <span class=\"mi\">44</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finsupp.lean</span>\n   <span class=\"mi\">400</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group.lean</span>\n   <span class=\"mi\">135</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n   <span class=\"mi\">100</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_examples.lean</span>\n   <span class=\"mi\">544</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading.lean</span>\n    <span class=\"mi\">54</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_monoid_algebra.lean</span>\n   <span class=\"mi\">165</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_zero_subring.lean</span>\n    <span class=\"mi\">58</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_grading_lemma.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">kronecker.lean</span>\n    <span class=\"mi\">70</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra.lean</span>\n    <span class=\"mi\">35</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnreal.lean</span>\n    <span class=\"mi\">99</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_bound_by.lean</span>\n   <span class=\"mi\">175</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_completion.lean</span>\n    <span class=\"mi\">96</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_equalizer.lean</span>\n    <span class=\"mi\">72</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom.lean</span>\n   <span class=\"mi\">167</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group.lean</span>\n   <span class=\"mi\">360</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_quotient.lean</span>\n    <span class=\"mi\">26</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">order_basic.lean</span>\n    <span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pi_nat_apply.lean</span>\n    <span class=\"mi\">74</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">preadditive_category.lean</span>\n    <span class=\"mi\">21</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite.lean</span>\n    <span class=\"mi\">34</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pseudo_metric.lean</span>\n    <span class=\"mi\">26</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">quotient_group.lean</span>\n    <span class=\"mi\">26</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">real_Inf.lean</span>\n    <span class=\"mi\">72</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">specific_limit.lean</span>\n    <span class=\"mi\">34</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">tsum.lean</span>\n    <span class=\"mi\">37</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">uniform_space_cauchy.lean</span>\n  <span class=\"mi\">3447</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 237274966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620110047
    },
    {
        "content": "<p>The biggest file there is <code>grading.lean</code> and I was hoping to leave it there until the proof of Gordan's lemma is done -- basically Gordan will be the proof that Eric and I have got gradings right</p>",
        "id": 237279881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620113192
    },
    {
        "content": "<p>Sure, we can leave the Gordan files there for now.</p>",
        "id": 237279970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620113273
    },
    {
        "content": "<p>But there is enough other stuff that can be moved to mathlib already <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 237280036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620113297
    },
    {
        "content": "<p>Some easy progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"mi\">75</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">add_monoid_hom.lean</span>\n    <span class=\"mi\">86</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">arrow.lean</span> <span class=\"c1\">-- PR exists</span>\n    <span class=\"mi\">16</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">big_operators_basic.lean</span>\n    <span class=\"mi\">32</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">category.lean</span> <span class=\"c1\">-- PR exists</span>\n    <span class=\"mi\">11</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">curry.lean</span> <span class=\"c1\">-- PR exists</span>\n    <span class=\"mi\">42</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp.lean</span>\n    <span class=\"mi\">55</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">equalizers.lean</span>\n    <span class=\"mi\">36</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">filter_at_top_bot.lean</span>\n    <span class=\"mi\">44</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">finsupp.lean</span>\n   <span class=\"mi\">400</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">free_abelian_group.lean</span>\n   <span class=\"mi\">135</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Gordan.lean</span>\n   <span class=\"mi\">100</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_examples.lean</span>\n   <span class=\"mi\">544</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading.lean</span>\n    <span class=\"mi\">54</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_monoid_algebra.lean</span>\n   <span class=\"mi\">165</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">grading_zero_subring.lean</span>\n    <span class=\"mi\">58</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">int_grading_lemma.lean</span>\n    <span class=\"mi\">90</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">kronecker.lean</span>\n    <span class=\"mi\">70</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra.lean</span>\n    <span class=\"mi\">35</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">nnreal.lean</span>\n    <span class=\"mi\">99</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_bound_by.lean</span>\n   <span class=\"mi\">175</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_completion.lean</span>\n    <span class=\"mi\">96</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom_equalizer.lean</span>\n    <span class=\"mi\">72</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_hom.lean</span>\n   <span class=\"mi\">167</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group.lean</span>\n   <span class=\"mi\">360</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">normed_group_quotient.lean</span>\n    <span class=\"mi\">26</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">order_basic.lean</span>\n    <span class=\"mi\">14</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pi_nat_apply.lean</span>\n    <span class=\"mi\">74</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">preadditive_category.lean</span>\n    <span class=\"mi\">21</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">Profinite.lean</span>\n    <span class=\"mi\">34</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">pseudo_metric.lean</span>\n    <span class=\"mi\">26</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">quotient_group.lean</span>\n    <span class=\"mi\">26</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">real_Inf.lean</span>\n    <span class=\"mi\">72</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">specific_limit.lean</span>\n    <span class=\"mi\">34</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">tsum.lean</span>\n    <span class=\"mi\">37</span> <span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">for_mathlib</span><span class=\"bp\">/</span><span class=\"n\">uniform_space_cauchy.lean</span>\n  <span class=\"mi\">3381</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 237285934,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620116564
    },
    {
        "content": "<p>I'll open topology PRs</p>",
        "id": 237288612,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620117899
    },
    {
        "content": "<p>Merci!</p>",
        "id": 237289047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620118090
    },
    {
        "content": "<p>I will do some <code>normed_group</code> stuff.</p>",
        "id": 237290207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620118773
    },
    {
        "content": "<p>You mentioned that the quotient has causes some diamond, right?</p>",
        "id": 237290214,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620118777
    },
    {
        "content": "<p>But with <code>pseudo_normed_group</code> which isn't moving to mathlib anytime soon, I think</p>",
        "id": 237290268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620118798
    },
    {
        "content": "<p>Ooh, I think you are refering to another issue.</p>",
        "id": 237290335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620118817
    },
    {
        "content": "<p>Yes, I don't fully understand it.</p>",
        "id": 237290345,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620118828
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/polyhedral_lattice/cech.lean#L156\">https://github.com/leanprover-community/lean-liquid/blob/master/src/polyhedral_lattice/cech.lean#L156</a> is quite evil</p>",
        "id": 237290446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620118863
    },
    {
        "content": "<p>My concern was much more basic: the quotient is a topological space in two ways, I don't if this is going to be a problem</p>",
        "id": 237290658,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620118943
    },
    {
        "content": "<p>It might very well be the problem that I was hitting</p>",
        "id": 237291013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620119126
    },
    {
        "content": "<p>And it certainly will start causing problems at some point.</p>",
        "id": 237291029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620119140
    },
    {
        "content": "<p>But this can be fixed by not using <code>of_core</code></p>",
        "id": 237291056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620119159
    },
    {
        "content": "<p>If you manually fill in all the fields the you can give it the quotient topology and prove that this is equal to the norm topology.</p>",
        "id": 237291125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620119181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/237279881\">said</a>:</p>\n<blockquote>\n<p>The biggest file there is <code>grading.lean</code> and I was hoping to leave it there until the proof of Gordan's lemma is done -- basically Gordan will be the proof that Eric and I have got gradings right</p>\n</blockquote>\n<p>I've got a few mathlib PRs open for grading-related things already; (<a href=\"https://github.com/leanprover-community/mathlib/issues/7380\">#7380</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/7420\">#7420</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/7422\">#7422</a>)</p>",
        "id": 237294078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620120756
    },
    {
        "content": "<p>These are all \"external grading\" PR's -- <code>grading.lean</code> is the \"internal grading\" version. I've been trying to make sure that our ideas glue together with one another.</p>",
        "id": 237295087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620121290
    },
    {
        "content": "<p>The first two of Eric's PRs are now on the queue. Nr3 depends on nr2, so has to wait a bit.</p>",
        "id": 237295224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620121360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> was this stuff that is also in <code>for_mathlib</code>?</p>",
        "id": 237295252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620121378
    },
    {
        "content": "<p>No I don't think so</p>",
        "id": 237295276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620121391
    },
    {
        "content": "<p>The <code>grading</code> file in <code>for_mathlib</code> can be split up into two pieces: there are unfortunately four stories here, or possibly even six if you do it properly. There's gradings of an add_comm_monoid by add_submonoids indexed by a type, gradings of an add_comm_group by add_subgroups indexed by a type (the types <code>submonoid G</code> and <code>subgroup G</code> are not defeq, and it seems to be practical just to do everything twice :-( ), and then there are gradings of a semiring and a ring by add_submonoids and add_subgroups respectively, indexed by both a monoid and an add_monoid (and goodness knows whether <code>to_additive</code> will work). In collaboration with Eric I've developed a bunch of the theory, but now it's getting to the point where I just want to get Gordan out of the way so I've started focussing on the case we're interested in, namely gradings of a ring by add_subgroups indexed by an add_monoid.</p>",
        "id": 237295683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620121609
    },
    {
        "content": "<p>Yes, sorry, I should have made the fact it was external clear. I kept trying to do internal ones and ending up finding the external version easier to prove</p>",
        "id": 237295693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620121615
    },
    {
        "content": "<p>Right now things are fine because I'm still tinkering with the API for internal stuff, and if it starts going into mathlib then this will add to the confusion.</p>",
        "id": 237295777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620121650
    },
    {
        "content": "<p>Ooops! My <code>wc -l</code> was too naive...</p>",
        "id": 237298510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620122975
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>jmc@atarrimbo:~/data/math/lean-liquid$ git ls-files <span class=\"p\">|</span> grep for_mathlib <span class=\"p\">|</span> xargs wc -l\n    <span class=\"m\">26</span> src/for_mathlib/Fintype/basic.lean\n   <span class=\"m\">135</span> src/for_mathlib/Gordan.lean\n    <span class=\"m\">30</span> src/for_mathlib/Profinite.lean\n  <span class=\"m\">1029</span> src/for_mathlib/Profinite/functorial_limit.lean\n    <span class=\"m\">46</span> src/for_mathlib/Profinite/limits.lean\n    <span class=\"m\">69</span> src/for_mathlib/Profinite/locally_constant.lean\n    <span class=\"m\">67</span> src/for_mathlib/Profinite/nhds.lean\n    <span class=\"m\">34</span> src/for_mathlib/Top/limits.lean\n    <span class=\"m\">86</span> src/for_mathlib/arrow.lean\n    <span class=\"m\">16</span> src/for_mathlib/big_operators_basic.lean\n    <span class=\"m\">32</span> src/for_mathlib/category.lean\n    <span class=\"m\">11</span> src/for_mathlib/curry.lean\n    <span class=\"m\">42</span> src/for_mathlib/dfinsupp.lean\n    <span class=\"m\">55</span> src/for_mathlib/equalizers.lean\n    <span class=\"m\">36</span> src/for_mathlib/filter_at_top_bot.lean\n    <span class=\"m\">44</span> src/for_mathlib/finsupp.lean\n   <span class=\"m\">400</span> src/for_mathlib/free_abelian_group.lean\n   <span class=\"m\">544</span> src/for_mathlib/grading.lean\n   <span class=\"m\">100</span> src/for_mathlib/grading_examples.lean\n    <span class=\"m\">54</span> src/for_mathlib/grading_monoid_algebra.lean\n   <span class=\"m\">165</span> src/for_mathlib/grading_zero_subring.lean\n    <span class=\"m\">58</span> src/for_mathlib/int_grading_lemma.lean\n    <span class=\"m\">90</span> src/for_mathlib/kronecker.lean\n    <span class=\"m\">70</span> src/for_mathlib/linear_algebra.lean\n    <span class=\"m\">35</span> src/for_mathlib/nnreal.lean\n   <span class=\"m\">167</span> src/for_mathlib/normed_group.lean\n    <span class=\"m\">72</span> src/for_mathlib/normed_group_hom.lean\n    <span class=\"m\">99</span> src/for_mathlib/normed_group_hom_bound_by.lean\n   <span class=\"m\">175</span> src/for_mathlib/normed_group_hom_completion.lean\n    <span class=\"m\">96</span> src/for_mathlib/normed_group_hom_equalizer.lean\n   <span class=\"m\">360</span> src/for_mathlib/normed_group_quotient.lean\n    <span class=\"m\">26</span> src/for_mathlib/order_basic.lean\n    <span class=\"m\">14</span> src/for_mathlib/pi_nat_apply.lean\n    <span class=\"m\">74</span> src/for_mathlib/preadditive_category.lean\n    <span class=\"m\">34</span> src/for_mathlib/pseudo_metric.lean\n    <span class=\"m\">26</span> src/for_mathlib/quotient_group.lean\n    <span class=\"m\">26</span> src/for_mathlib/real_Inf.lean\n    <span class=\"m\">81</span> src/for_mathlib/simplicial/augmented.lean\n   <span class=\"m\">158</span> src/for_mathlib/simplicial/complex.lean\n    <span class=\"m\">72</span> src/for_mathlib/specific_limit.lean\n    <span class=\"m\">34</span> src/for_mathlib/tsum.lean\n    <span class=\"m\">37</span> src/for_mathlib/uniform_space_cauchy.lean\n  <span class=\"m\">4825</span> total\n</code></pre></div>",
        "id": 237298635,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620123021
    },
    {
        "content": "<p>Moving all of this to mathlib is going to cut the de Bruijn constant of the project by 30%</p>",
        "id": 237298704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620123065
    },
    {
        "content": "<p>I PRed <code>filter_at_top_bot.lean</code> and <code>order_basic.lean</code></p>",
        "id": 237301036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620124300
    },
    {
        "content": "<p>and  <code>big_operators_basic.lean</code></p>",
        "id": 237301621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620124633
    },
    {
        "content": "<p>I opened a PR for <code>nnreal.lean</code> and created a temporary wiki page at <a href=\"https://github.com/leanprover-community/lean-liquid/wiki\">https://github.com/leanprover-community/lean-liquid/wiki</a></p>",
        "id": 237302975,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620125387
    },
    {
        "content": "<p>Thanks for creating that wiki page</p>",
        "id": 237303447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620125644
    },
    {
        "content": "<p>I didn't add PR numbers unless it was very quick to find the number with certainty</p>",
        "id": 237303558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620125706
    },
    {
        "content": "<p>Do we want to create dependent PRs or wait a bit for a first wave of merge? I think I'll be quickly stuck until <a href=\"https://github.com/leanprover-community/mathlib/issues/7469\">#7469</a> is merged.</p>",
        "id": 237303731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620125806
    },
    {
        "content": "<p>It would be nice if <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> could have a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/7469\">#7469</a> soon, it should be pretty quick, unless I missed existing lemmas or golfing opportunities.</p>",
        "id": 237303903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620125899
    },
    {
        "content": "<p>I think dependent PRs are fine, if you think the PR it depends on is completely straightforward, or if you don't mind backporting updates from the dependency to the depending PR</p>",
        "id": 237303914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620125908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/237290207\">said</a>:</p>\n<blockquote>\n<p>I will do some <code>normed_group</code> stuff.</p>\n</blockquote>\n<p>Do you mean the pseudo normed stuff or also my work?</p>",
        "id": 237303966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620125951
    },
    {
        "content": "<p>I think he meant quotients of (semi) normed groups</p>",
        "id": 237304004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620125975
    },
    {
        "content": "<p>Which are currently in the <code>normed_group_hom</code> namespace. (<span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> they should probably move out of that...)</p>",
        "id": 237304103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620126006
    },
    {
        "content": "<p>Yes, I meant quotient of seminormed groups. I am currently PRing  <code>for_mathlib/normed_group_hom.lean</code>, that is easy</p>",
        "id": 237304280,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620126084
    },
    {
        "content": "<p>This particular file is part of my work. I don't mind at all (although I would slightly prefer to PR my non-trivial stuff myself), I mostly want to avoid duplicating PRs.</p>",
        "id": 237304452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620126179
    },
    {
        "content": "<p>Ah sorry, I saw that the lemma were easy enough to PR them quite quickly. In any case I will do <code>normed_group_quotient.lean</code> next.</p>",
        "id": 237306256,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620127163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/237303903\">said</a>:</p>\n<blockquote>\n<p>It would be nice if <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> could have a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/7469\">#7469</a> soon, it should be pretty quick, unless I missed existing lemmas or golfing opportunities.</p>\n</blockquote>\n<p>Done.</p>",
        "id": 237308226,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620128382
    },
    {
        "content": "<p>I put a bunch of sorried statements into <code>polyhedral_lattice.basic</code> a few weeks ago, and I've now moved them out into their own <code>for_mathlib.finite_free</code> file. In case anyone decides to sprint towards them -- I'm sitting on these <code>sorry</code>s because Anne is bundling <code>is_basis</code> so all the proofs will break. All but one should be trivial, but one (kernel of a non-zero map from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Z^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> is finite free of rank one less than where you started) might be difficulr. <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> should I PR some of these (and then they become your problem) or sit on them until you've refactored?</p>",
        "id": 237310950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620129751
    },
    {
        "content": "<p>I was hoping to create the final bundled basis PR today after I fix the last lint errors, though merging might take a bit longer since I still have to check for any style issues. I could make a WIP pull request right now, to allow you to base your additions on top of it.</p>",
        "id": 237312084,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1620130287
    },
    {
        "content": "<p>I think we can wait for a couple of days (-;</p>",
        "id": 237313035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620130749
    },
    {
        "content": "<p>There is so much in flux right now that I don't think we should depend on a PR instead of mathlib master</p>",
        "id": 237313101,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620130788
    },
    {
        "content": "<p>Thanks Sébastien!</p>",
        "id": 237313328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620130874
    },
    {
        "content": "<p>Just catching up here... a mathlib sprint is a great idea! I opened <a href=\"https://github.com/leanprover-community/mathlib/issues/7448\">#7448</a> yesterday which takes care of <code>for_mathlib/***/limits.lean</code> where <code>*** = Top, Profinite</code>. I updated the wiki as well.</p>",
        "id": 237314451,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620131397
    },
    {
        "content": "<p>Did we already reached that 200 open PR score before?</p>",
        "id": 237314874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620131554
    },
    {
        "content": "<p>Surely not.</p>",
        "id": 237315122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620131644
    },
    {
        "content": "<p>Johan, why did you add check boxes to the wiki page? When to you want to tick off an item? When the PR is merged?</p>",
        "id": 237315385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620131748
    },
    {
        "content": "<p>For some reason the ticks didn't seem to work... but my idea was that we could tick off an item when a PR was made, and then remove the item when the PR is merged. But it's not very important.</p>",
        "id": 237315864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620131930
    },
    {
        "content": "<p>For <code>Fintype/basic.lean</code> we should decide whether to add <code>instance {A : Fintype} : topological_space A := ⊥</code> as a global instance ;)</p>",
        "id": 237316090,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620132029
    },
    {
        "content": "<p>It works if one writes <code>[x]</code>.</p>",
        "id": 237316186,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620132069
    },
    {
        "content": "<p>Right, but you can't just click on the checkbox. You need to edit. Well, I guess we need to edit anyway, to add PR numbers.</p>",
        "id": 237316368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620132137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/237316090\">said</a>:</p>\n<blockquote>\n<p>For <code>Fintype/basic.lean</code> we should decide whether to add <code>instance {A : Fintype} : topological_space A := ⊥</code> as a global instance ;)</p>\n</blockquote>\n<p>I vote for def, and then make it a local instance when needed.</p>",
        "id": 237316435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620132167
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7491\">#7491</a></p>",
        "id": 237318504,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620133054
    },
    {
        "content": "<p>We're doing something wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>    26 src/for_mathlib/Fintype/basic.lean\n   135 src/for_mathlib/Gordan.lean\n    30 src/for_mathlib/Profinite.lean\n  1029 src/for_mathlib/Profinite/functorial_limit.lean\n    46 src/for_mathlib/Profinite/limits.lean\n    69 src/for_mathlib/Profinite/locally_constant.lean\n    67 src/for_mathlib/Profinite/nhds.lean\n    34 src/for_mathlib/Top/limits.lean\n    86 src/for_mathlib/arrow.lean\n    16 src/for_mathlib/big_operators_basic.lean\n    32 src/for_mathlib/category.lean\n    11 src/for_mathlib/curry.lean\n    42 src/for_mathlib/dfinsupp.lean\n    55 src/for_mathlib/equalizers.lean\n    36 src/for_mathlib/filter_at_top_bot.lean\n   133 src/for_mathlib/finite_free.lean\n    44 src/for_mathlib/finsupp.lean\n   390 src/for_mathlib/free_abelian_group.lean\n   630 src/for_mathlib/grading.lean\n   104 src/for_mathlib/grading_examples.lean\n    54 src/for_mathlib/grading_monoid_algebra.lean\n   281 src/for_mathlib/grading_zero_subring.lean\n    58 src/for_mathlib/int_grading_lemma.lean\n    90 src/for_mathlib/kronecker.lean\n    70 src/for_mathlib/linear_algebra.lean\n    35 src/for_mathlib/nnreal.lean\n   167 src/for_mathlib/normed_group.lean\n    80 src/for_mathlib/normed_group_hom.lean\n    99 src/for_mathlib/normed_group_hom_bound_by.lean\n   175 src/for_mathlib/normed_group_hom_completion.lean\n    96 src/for_mathlib/normed_group_hom_equalizer.lean\n   360 src/for_mathlib/normed_group_quotient.lean\n    26 src/for_mathlib/order_basic.lean\n    14 src/for_mathlib/pi_nat_apply.lean\n    74 src/for_mathlib/preadditive_category.lean\n    34 src/for_mathlib/pseudo_metric.lean\n    26 src/for_mathlib/quotient_group.lean\n    26 src/for_mathlib/real_Inf.lean\n    76 src/for_mathlib/simplicial/augmented.lean\n   165 src/for_mathlib/simplicial/complex.lean\n    72 src/for_mathlib/specific_limit.lean\n    34 src/for_mathlib/tsum.lean\n    37 src/for_mathlib/uniform_space_cauchy.lean\n  5164 total\n</code></pre></div>",
        "id": 237490453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620219620
    },
    {
        "content": "<p>Total number of lines in <code>for_mathlib</code> is going up instead of down <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 237490513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620219644
    },
    {
        "content": "<p>Sorry... I think my changes to <code>for_mathlib/simplicial/*</code> added a net of 2 lines.</p>",
        "id": 237497053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620222286
    },
    {
        "content": "<p>Probably a bunch of grading stuff was added (-;</p>",
        "id": 237497244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620222373
    },
    {
        "content": "<p>Oh, you're doing simplicial stuff. Does that overlap in any way with the stuff Bhavik and I are doing to prove Sperner's Lemma? We define a simplicial complex as a set of finsets closed by inclusion and gluing nicely. From skimming through the files, I wouldn't say so, but I may be lacking insight.</p>",
        "id": 237498134,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620222745
    },
    {
        "content": "<p>No, we're not doing anything with that kind of simplicial complexes</p>",
        "id": 237498268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620222807
    },
    {
        "content": "<p>I guess there is a bit of clash in terminology there</p>",
        "id": 237498373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620222843
    },
    {
        "content": "<p>All this terminology with simplicial objects vs simplicial complexes is a bit of a mess...</p>",
        "id": 237498401,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1620222847
    },
    {
        "content": "<p>Yeah okay, that's what I was suspecting :)</p>",
        "id": 237498757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620222982
    },
    {
        "content": "<p>I am going to start working on <code>normed_group_quotient.lean</code>. Since there a little bit of work to do here and I am not very experienced with diamonds, I would to know if the following is the good strategy. The problem is that if <code>M</code> is a <code>semi_normed_group</code> and <code>S : add_subgroup M</code>, then <code>quotient S</code> is automatically a <code>uniform_space</code>, but equipping <code>quotient S</code> with a seminorm will equip it with another <code>uniform_space</code> structure. My idea is the following.</p>\n<ul>\n<li>Equip <code>quotient S</code> with a seminorm, providing <code>has_norm (quotient S)</code>.</li>\n<li>Equip <code>quotient S</code> with a pseudodistance, providing <code>has_dist (quotient S)</code>: <code>dist x y</code> will be defined as <code>∥x - y∥</code>.</li>\n<li>Prove all the relevant properties of <code>∥ ∥</code> (this is already done) and deduce the relevant properties of <code>dist</code>.</li>\n<li>Providing <code>pseudo_metric_space (quotient S)</code>:<br>\n      * <code>dist_self</code> <code>dist_comm</code>  <code>dist_triangle</code> are already proven.<br>\n      *  <code>edist</code> and <code>edist_dist</code> can be ignored.<br>\n      * <code>to_uniform_space : uniform_space (quotient S)</code> here I guess that <code>by apply_instance</code> should work, but in any case it is the one already there.</li>\n<li><code>uniformity_dist</code>: this is the main point that should be proven by hand.</li>\n<li>Redo everything for <code>normed_group</code> and a closed <code>S</code>.</li>\n</ul>",
        "id": 237538155,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620237194
    },
    {
        "content": "<p>That looks good to me.</p>",
        "id": 237538915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620237503
    },
    {
        "content": "<p>Note that \"Redo everything\" shouldn't be a lot of work, because you can probably reuse the <code>uniformity_dist</code> proof.</p>",
        "id": 237538988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620237536
    },
    {
        "content": "<p>Another option could be to make a type alias <code>sub_semi_normed_group</code> defined as add_subgroup and derive whatever you don't want to replicate</p>",
        "id": 237539691,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620237786
    },
    {
        "content": "<p>Sure! It's funny, this is not a Lean problem, <code>uniformity_dist</code> is a real mathematical theorem, whose standard proof is \"it's called quotient, so it has the quotient topology\".</p>",
        "id": 237539761,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620237810
    },
    {
        "content": "<p>That's exactly the trick that \"forgetful inheritance\" plays. You prove this theorem once and for all, and you never have to mention it again.</p>",
        "id": 237540419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620238033
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ git commit -am <span class=\"s2\">\"bump mathlib\"</span>\n<span class=\"o\">[</span>master 465cbd5<span class=\"o\">]</span> bump mathlib\n <span class=\"m\">10</span> files changed, <span class=\"m\">3</span> insertions<span class=\"o\">(</span>+<span class=\"o\">)</span>, <span class=\"m\">104</span> deletions<span class=\"o\">(</span>-<span class=\"o\">)</span>\n delete mode <span class=\"m\">100644</span> src/for_mathlib/big_operators_basic.lean\n delete mode <span class=\"m\">100644</span> src/for_mathlib/category.lean\n delete mode <span class=\"m\">100644</span> src/for_mathlib/filter_at_top_bot.lean\n</code></pre></div>",
        "id": 237610645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620281722
    },
    {
        "content": "<p>I need some  to solve the diamond about <code>semi_normed_group</code> quotient. I am really inexperienced in working with uniformity and stuff like that, so this can very well be not difficult but I don't know how to attack it. The specific lemma I need is here:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/61025a2661fac60cee1adc200681a31196ba584f/src/for_mathlib/normed_group_quotient.lean#L224\">https://github.com/leanprover-community/lean-liquid/blob/61025a2661fac60cee1adc200681a31196ba584f/src/for_mathlib/normed_group_quotient.lean#L224</a><br>\nThe second <code>sorry</code> is mathematically trivial, right? The identity from the space with the quotient topology to the same space with the topology induced by the metric is continuous since the composition with the projection (that is of course again the projection) is continuous. But I have no idea where to start<br>\nI don't mind doing the dirty work with the epsilon and so on, but I would appreciate some indication from some <code>uniform_space</code> guru.</p>",
        "id": 237731134,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620335664
    },
    {
        "content": "<p>is this on a special branch?</p>",
        "id": 237731524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620335773
    },
    {
        "content": "<p>Yes, it is my branch <code>riccardobrasca</code>, we decided that for the LTE we could just ignore the diamond and so use <code>normed_group.of_core</code></p>",
        "id": 237732043,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620335924
    },
    {
        "content": "<p>I started the work to PR it to mathlib so I did some modifications to the whole file that are irrelevant for this problem, the quickest way to show it was to add this instance to LTE (but not in master of course)</p>",
        "id": 237732291,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620336003
    },
    {
        "content": "<p>It's too late now, but I'll have a look tomorrow evening, don't worry.</p>",
        "id": 237732660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620336108
    },
    {
        "content": "<p>Thank's! If I make some progress I will push it to the same branch</p>",
        "id": 237732916,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620336176
    },
    {
        "content": "<p>Note that I am not 100% sure this is the statement we want. The problem  I want to solve is the following. If <code>M</code> is a <code>semi_normed_group</code> and <code>S : add_subgroup M</code>, then <code>quotient S</code> is automatically a <code>topological_space</code>, but equipping <code>quotient S</code> with a seminorm will equip it with another <code>topological_space</code> structure. We want these to be the same. The proposed solution is to first of all provide the <code>pseudo_metric_space</code> instance (via the norm of course, but by hand),  using <code>topological_add_group.to_uniform_space (quotient S)</code> as <code>uniformity</code>, so we need to prove <code>uniformity_dist</code> for this <code>uniformity</code>.</p>",
        "id": 237733967,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620336628
    },
    {
        "content": "<p>Hmm, I don't think that is the uniformity you want to use. Is there already something for quotients of <code>pseudo_metric_space</code>s?</p>",
        "id": 237765615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620360396
    },
    {
        "content": "<p>We don't have anything about quotient of metric spaces. Indeed in general there is no hope to make it a metric space, but it's possible to make it a pseudometric space. But  the compatibility with the quotient topology seems to be a subtle question, see for example here: <a href=\"https://mathoverflow.net/questions/195611/quotient-of-metric-spaces\">https://mathoverflow.net/questions/195611/quotient-of-metric-spaces</a><br>\nIn our case, <code>quotient S</code> is automatically a topological space (meaning that <code>apply_instance</code> works). There is no instance of <code>uniform_space</code> on it, but the doc for <code>topological_add_group.to_uniform_space</code> says \"The right uniformity on a topological group\", so I decided to work with it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">topological_add_group.to_uniform_space</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"bp\">=</span>\n  <span class=\"n\">quotient.topological_space</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works, so I think we are good here.</p>",
        "id": 237780053,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620372803
    },
    {
        "content": "<p>Hmm, but <code>topological_add_group.to_uniform_space</code> is somewhat non-canonical. It just chooses the right uniformity (why not the left). I would be surprised if that's the best thing to do here. But it might be the best way to avoid crazy headaches.<br>\nLet me read that MO thread.</p>",
        "id": 237780882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620373342
    },
    {
        "content": "<p>It's possible that there is no canonical uniformity on the quotient (although here the group commutative, so left and right should be the same).  I mean, of course there is one, since there is a norm. But the (canonical) topological space structure comes from free, without using the norm, I don't know if the same is true for the uniformity</p>",
        "id": 237781828,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620373920
    },
    {
        "content": "<p>Does mathlib have quotients of topological groups?</p>",
        "id": 237781914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620373950
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">topology</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">group.lean</span><span class=\"o\">:</span><span class=\"kd\">instance</span> <span class=\"n\">topological_group_quotient</span> <span class=\"o\">[</span><span class=\"n\">N.normal</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">topological_group</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>looks good</p>",
        "id": 237781983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620373995
    },
    {
        "content": "<p>Let's see what they do there</p>",
        "id": 237781987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374001
    },
    {
        "content": "<p>Yes, there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_add_group_quotient\">docs#topological_add_group_quotient</a></p>",
        "id": 237782002,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620374014
    },
    {
        "content": "<p>But it's only a topological space, not a uniform space</p>",
        "id": 237782015,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620374027
    },
    {
        "content": "<p>Right, it avoids the whole issue <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 237782124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374079
    },
    {
        "content": "<p>For the topology everything is clear, but in mathlib a metric space is a metric that is compatible with a uniformity, not with a topology</p>",
        "id": 237782141,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620374095
    },
    {
        "content": "<p>We need to define the uniformity on the quotient in terms of the uniformity upstairs.</p>",
        "id": 237782202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374132
    },
    {
        "content": "<p>And maybe this is hard in general, but I think that for group quotients it should be easier</p>",
        "id": 237782230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374155
    },
    {
        "content": "<p>On the other hand, if there are no other ways of putting a uniformity on a quotient, this cannot lead to a diamond</p>",
        "id": 237782352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374214
    },
    {
        "content": "<p>So maybe it is fine to use <code>topological_add_group.to_uniform_space</code> on the quotient group.</p>",
        "id": 237782384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374236
    },
    {
        "content": "<p>But the diamond would appear for the <code>topological_space</code> structure, right?</p>",
        "id": 237782413,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620374254
    },
    {
        "content": "<p>But that is solved by what you are doing.</p>",
        "id": 237782536,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374313
    },
    {
        "content": "<p>It appeared when using <code>normed_group.of_core</code>. Because then the topology wouldn't be the quotient topology.</p>",
        "id": 237782573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374341
    },
    {
        "content": "<p>I am far from an expert on uniformities, but isn't there something like a push-forward uniformity?</p>",
        "id": 237782694,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374404
    },
    {
        "content": "<p>I have no idea <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 237782758,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620374430
    },
    {
        "content": "<p>It looks like there is only a <code>comap</code> in general.</p>",
        "id": 237783139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374609
    },
    {
        "content": "<p>Wait! \"The right uniformity on a topological group.\" means \"The good uniformity on a topological group.\" or \"The not left uniformity on a topological group.\"??</p>",
        "id": 237783159,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620374624
    },
    {
        "content": "<p>It means the not left one</p>",
        "id": 237783189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620374643
    },
    {
        "content": "<p>The \"not left\" uniformity</p>",
        "id": 237783209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374644
    },
    {
        "content": "<p>But given that we are in the commutative setting, it doesn't matter up to defeq issues.</p>",
        "id": 237783272,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374671
    },
    {
        "content": "<p>And of course defeq is exactly what we care about now <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 237783283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374686
    },
    {
        "content": "<p><a href=\"https://core.ac.uk/download/pdf/82205121.pdf\">https://core.ac.uk/download/pdf/82205121.pdf</a> Thm 11 suggests that <code>{pi(U) | U is an entourage upstairs}</code> should be a uniformity on the quotient. (Here <code>pi</code> is the quotient map to the quotient group.)</p>",
        "id": 237783342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620374720
    },
    {
        "content": "<p>A uniformity is informally a way of saying \"a is as close to b as c is to d\". In a metric space we can say this as d(a,b)=d(c,d). In a topological space we can't say this because there is no way of comparing neighbourhoods of a to neighbourhoods of c. In a topological group however there are two ways of doing this -- left multiplication by c/a or right multiplication by a\\c.</p>",
        "id": 237783358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620374732
    },
    {
        "content": "<p>The first line of that paper seems to indicate that pushing forward a uniform structure along a quotient map is a problematic issue in general (which would explain the non-existence of <code>map</code> for uniform structures)</p>",
        "id": 237783664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620374891
    },
    {
        "content": "<p>I'm on my phone and won't get to a computer in the next 8 hours. But I promise I'll handle this tonight. Indeed there is no pushfoward uniformity in general.</p>",
        "id": 237784733,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620375520
    },
    {
        "content": "<p>BTW I just bumped mathlib, removing<code>src/for_mathlib/real_Inf.lean</code></p>",
        "id": 237785474,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620375970
    },
    {
        "content": "<p>Bunch of mathlib PRs merged. I'll do another bump</p>",
        "id": 237792811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620379880
    },
    {
        "content": "<p><code>normed_group_hom.ker_eq_preimage</code> has become <code>normed_group_hom.coe_ker</code></p>",
        "id": 237794176,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620380595
    },
    {
        "content": "<p>The mathlib bump was intterupted by a trip to Kindergarten to pick up my daughter. But now it's done.</p>",
        "id": 237801377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620384389
    },
    {
        "content": "<p>Thank you as ever!</p>\n<p>Grading -- I see no problems with pushing this stuff through, however I have just had around 10 days of solid marking dumped on my desk so I might be less active than usual for the next week or two. My two worries are that (a) we're going to need that the kernel of a nonzero map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">Z</mi><mi>n</mi></msup><mo>→</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z^n\\to\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> has rank <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> and (b) the is_basis refactor will break a bunch of stuff (but it will be easy to fix). Everything else, I can see the light at the end of the tunnel.</p>",
        "id": 237812684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620389937
    },
    {
        "content": "<p>Good luck... grading rings is sooo much more fun than grading exams.</p>",
        "id": 237812980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620390061
    },
    {
        "content": "<p>How far are we from the following proof? Given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mspace></mspace><mspace width=\"0.1111111111111111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333333333333333em\"/><msup><mi mathvariant=\"bold\">Z</mi><mi>n</mi></msup><mo>→</mo><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">f \\colon \\mathbf{Z}^n \\to \\mathbf{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111111111111111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.16666666666666666em;\"></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333333333333333em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord mathbf\">Z</span></span></span></span>, we know (even mathlib knows) that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{im}(f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">im</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> is free, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>→</mo><mi>ker</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi mathvariant=\"bold\">Z</mi><mi>n</mi></msup><mo>→</mo><mrow><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0 \\to \\ker (f) \\to \\mathbf{Z}^n  \\to \\mathrm{im}(f) \\to 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">ker</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">im</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> splits and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">Z</mi><mi>n</mi></msup><mo>≅</mo><mi>ker</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>⊕</mo><mrow><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">m</mi></mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Z}^n \\cong \\ker(f) \\oplus \\mathrm{im}(f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">ker</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">im</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> implies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">k</mi></mrow><mi>ker</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\mathrm{rk} \\ker(f) = n -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">rk</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">ker</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>",
        "id": 237814856,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620390923
    },
    {
        "content": "<p>We know that the rank is unique. So I think it's mostly the splitting that's needed.</p>",
        "id": 237815088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620391028
    },
    {
        "content": "<p>I don't know the situation of the direct sum, but the section is given by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_basis.constr\">docs#is_basis.constr</a></p>",
        "id": 237815559,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620391263
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/leanprover-community/mathlib/issues/7523\">#7523</a> is merged we can remove <code>quotient_group.lean</code> with the next bump. I don't have time this afternoon to look at it, but note that mk'_eq_mk'_iff has become quotient_add_group.eq_iff_sub_mem and it uses ↑ instead of mk'</p>",
        "id": 237827128,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620395922
    },
    {
        "content": "<p>thanks for the warning (-;</p>",
        "id": 237837988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620400090
    },
    {
        "content": "<p><code>src/for_mathlib/grading_examples.lean</code> is now broken, because polynomials are irreducible. I'm commenting it out for now. We can fix it after the mathlib bump.</p>",
        "id": 237840806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620401005
    },
    {
        "content": "<p>Mathlib is bumped again.</p>",
        "id": 237847675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620403519
    },
    {
        "content": "<p>Yes, we don't need that file in the proof.</p>",
        "id": 237875164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620414655
    },
    {
        "content": "<p>I'm back to my computer and I have time to work on Riccardo's issue, but I fail to understand the issue. Why do you want to provide the uniform structure here?</p>",
        "id": 237876892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620415373
    },
    {
        "content": "<p>I thought you had a diamond issue, but I don't see any diamond here.</p>",
        "id": 237877128,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620415473
    },
    {
        "content": "<p>You have a topology on the quotient, which is the quotient topology. If you endow the quotient with a norm using <code>of_core</code>, this creates a second topology, which is not definitionally equal to the former.</p>",
        "id": 237881348,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620417336
    },
    {
        "content": "<p>I see. I was confused because they were talking about uniform structures, but the issue is already with the topology.</p>",
        "id": 237883126,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620418083
    },
    {
        "content": "<p>I got distracted and I have to stop, but at least I can tell you this uniform structure equality is true and this has some mathematical content. I'll type the Lean proof tomorrow.</p>",
        "id": 237892838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620422985
    },
    {
        "content": "<p>I can also tell you it reduces to a statement that features no uniform structure. You need to prove that neighborhoods of zero in the quotient topology are exactly sets containing an open ball with positive radius around 0 for the norm we defined on the quotient.</p>",
        "id": 237893012,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620423076
    },
    {
        "content": "<p>Sorry for the late answer: indeed the diamond is at level of <code>topological_space</code> structure. My idea was to use the <code>uniformity</code> since <code>pseudo_metric_space</code> is set up that way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">topological_add_group.to_uniform_space</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"bp\">=</span>\n  <span class=\"n\">quotient.topological_space</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>works, so I think my strategy would solve the diamond.</p>",
        "id": 237898382,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620425779
    },
    {
        "content": "<p>I've started another mathlib bump on <code>bump-08-may</code>. This one needs a bit of care. A bunch of limit stuff for profinite sets has moved to mathlib. <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> if you have time, could you take a look please?</p>",
        "id": 237938013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620462369
    },
    {
        "content": "<p>I finished to prove quotient normed group have the correct uniformity, but I still don't know where I should push this since I don't know what is Riccardo's branch.</p>",
        "id": 237943915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620468301
    },
    {
        "content": "<p>Presumably I  should simply start writing mathlib PRs with all this.</p>",
        "id": 237943943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620468324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>, if you are curious, you can diff your version with <a href=\"https://gist.github.com/PatrickMassot/a499393c0affc16281e6b66f9506a781\">https://gist.github.com/PatrickMassot/a499393c0affc16281e6b66f9506a781</a></p>",
        "id": 237944005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620468377
    },
    {
        "content": "<p>You'll see I had to add a number of lemmas about groups that should be somewhere already. I'd be interested to know if you find them in mathlib</p>",
        "id": 237944032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620468408
    },
    {
        "content": "<p>For everybody, I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">quotient_group</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">monoid_hom.eq_iff</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹*</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">f.ker</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">f.map_mul</span><span class=\"o\">,</span> <span class=\"n\">f.map_inv</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">inv_mul_self</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">N.normal</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_group.mk'_eq_iff</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">mk'</span> <span class=\"n\">N</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">mk'</span> <span class=\"n\">N</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">y</span><span class=\"bp\">⁻¹*</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">mk'</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq_iff</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.ker_mk</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[to_additive, simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_group.mk'_eq_one</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">N</span><span class=\"o\">):</span> <span class=\"n\">mk'</span> <span class=\"n\">N</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">monoid_hom.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">quotient_group.ker_mk</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">quotient_group.preimage_image</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">((</span><span class=\"n\">mk'</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g_in</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">quotient_group.mk'_eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">g_in</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g_in</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">g_in</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 237944049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620468431
    },
    {
        "content": "<p>Isn't <code>mk'_eq_iff</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.eq\">docs#quotient_group.eq</a>?</p>",
        "id": 237944473,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620468872
    },
    {
        "content": "<p>Thank you!! I don't have time this weekend to work on it, if you want to PR feel free to do it!<br>\nMy plan was to PR the whole  <code>normed_group_quotient.lean</code> file, and this was needed to replace</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">semi_normed_group_quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">semi_normed_group</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">semi_normed_group.of_core</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">quotient.is_semi_normed_group.core</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 237944547,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620468963
    },
    {
        "content": "<p><code>mk'_eq_one</code> is a weaker version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.eq_one_iff\">docs#quotient_group.eq_one_iff</a></p>",
        "id": 237944601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620469024
    },
    {
        "content": "<p>I think  <code>mk'_eq_one</code> was exactly  <code>quotient_group.eq_one_iff</code> before I PRed it and Eric improved it</p>",
        "id": 237944670,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620469090
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/7523\">#7523</a></p>",
        "id": 237944718,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620469190
    },
    {
        "content": "<p>I don't know if we have <code>monoid_hom.eq_iff</code></p>",
        "id": 237944821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620469265
    },
    {
        "content": "<p>I knew I already wrote this!</p>",
        "id": 237947482,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620471840
    },
    {
        "content": "<p>I even wrote <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.preimage_image_coe\">docs#quotient_group.preimage_image_coe</a>, probably during the perfectoid project. But I used a direct image at that time, silly young me.</p>",
        "id": 237947867,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620472207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/237944473\">said</a>:</p>\n<blockquote>\n<p>Isn't <code>mk'_eq_iff</code> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.eq\">docs#quotient_group.eq</a>?</p>\n</blockquote>\n<p>This is true only up to defeq, which is annoying for rewriting.</p>",
        "id": 237948601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620472950
    },
    {
        "content": "<p>I get the feeling that <code>mk'</code> is not intended to be the simp-normal form</p>",
        "id": 237948708,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620473075
    },
    {
        "content": "<p>In the same way that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submonoid.subtype\">docs#submonoid.subtype</a> has few lemmas as coe is simp-normal</p>",
        "id": 237948821,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620473145
    },
    {
        "content": "<p>Perhaps we're missing a <code>quotient_group.mk'_apply : mk' N x = (x : quotient_group N)</code> or even <code>quotient_group.coe_mk' : ⇑(mk' N) = coe</code> simp lemma</p>",
        "id": 237948888,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620473195
    },
    {
        "content": "<p>This is not about simp normal forms. This is about explicit argument vs type class arguments.</p>",
        "id": 237951352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620475903
    },
    {
        "content": "<p>Your <code>quotient_group.mk'_apply : mk' N x = (x : quotient_group N)</code> doesn't make sense because <code>mk' N</code> is used only when there is no instance allowing to make sense of <code>(x : quotient_group N)</code></p>",
        "id": 237951425,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620475959
    },
    {
        "content": "<p>What instance / typeclass argument are you referring to?</p>",
        "id": 237953490,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620478108
    },
    {
        "content": "<p>This works fine for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.quotient_group</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">quotient_group</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">coe_mk'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">N.normal</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mk'_apply</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">N.normal</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">mk'</span> <span class=\"n\">N</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">quotient_group</span>\n</code></pre></div>",
        "id": 237953736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620478328
    },
    {
        "content": "<p>Sorry, I read too quickly what that file was doing.</p>",
        "id": 237953866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620478477
    },
    {
        "content": "<p>I think you have your point backwards - it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.mk'\">docs#quotient_group.mk'</a> that requires the extra <code>N.normal</code> instance argument, not <code>coe</code> (aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.quotient.has_coe_t\">docs#quotient_group.quotient.has_coe_t</a>)</p>",
        "id": 237953870,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620478485
    },
    {
        "content": "<p>To make matters worse, there's a third way to spell this, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.mk\">docs#quotient_group.mk</a></p>",
        "id": 237953989,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620478594
    },
    {
        "content": "<p>Yes, this whole area is a bit messy</p>",
        "id": 237954005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620478626
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/237938013\">said</a>:</p>\n<blockquote>\n<p>I've started another mathlib bump on <code>bump-08-may</code>. This one needs a bit of care. A bunch of limit stuff for profinite sets has moved to mathlib. <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> if you have time, could you take a look please?</p>\n</blockquote>\n<p>I'll take care of the profinite stuff this morning</p>",
        "id": 237959015,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620483207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/237959015\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/237938013\">said</a>:</p>\n<blockquote>\n<p>I've started another mathlib bump on <code>bump-08-may</code>. This one needs a bit of care. A bunch of limit stuff for profinite sets has moved to mathlib. <span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> if you have time, could you take a look please?</p>\n</blockquote>\n<p>I'll take care of the profinite stuff this morning</p>\n</blockquote>\n<p>Done! <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think  this makes up for the 2 lines I added to <code>for_mathlib</code> a few days ago:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/compare/20019f38e734170b5574079bd268b8d3fdcbc653...009816d18fe288043abdc8980fb6a5a83e424e7e\">https://github.com/leanprover-community/lean-liquid/compare/20019f38e734170b5574079bd268b8d3fdcbc653...009816d18fe288043abdc8980fb6a5a83e424e7e</a></p>",
        "id": 237962722,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620486807
    },
    {
        "content": "<p>Merci!</p>",
        "id": 237962825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620486901
    },
    {
        "content": "<p>C'est rien</p>",
        "id": 237962855,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620486925
    },
    {
        "content": "<p>BTW, I also have an open PR about the Cech nerve: <a href=\"https://github.com/leanprover-community/mathlib/issues/7547\">#7547</a> (it depends on  <a href=\"https://github.com/leanprover-community/mathlib/issues/7546\">#7546</a>) in case anyone wants to take a look</p>",
        "id": 237963059,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620487095
    },
    {
        "content": "<p>did you merge and push to master?</p>",
        "id": 237963606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620487624
    },
    {
        "content": "<p>No it's still in the brancch</p>",
        "id": 237963717,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620487734
    },
    {
        "content": "<p>I mean I pushed to the branch</p>",
        "id": 237963738,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620487752
    },
    {
        "content": "<p>Bah, I forgot about the other two files in profinite. I'll fix those now.</p>",
        "id": 237963767,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620487793
    },
    {
        "content": "<p>Okay, it should be fixed I think. I pushed to the branch again to see if CI is happy, then I'll merge to master</p>",
        "id": 237964563,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620488379
    },
    {
        "content": "<p>Thanks a lot</p>",
        "id": 237965289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620489019
    },
    {
        "content": "<p>Okay, it's now updated on master</p>",
        "id": 237965754,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620489416
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 237966941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620490353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> I pushed a mathlib branch at <a href=\"https://github.com/leanprover-community/mathlib/tree/group-stuff\">https://github.com/leanprover-community/mathlib/tree/group-stuff</a>. I still need to write a module docstring and maybe see if I can polish a bit, but you can already have a look and tell whether this looks good to you.</p>",
        "id": 237986160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620509620
    },
    {
        "content": "<p>I will have a look at it this evening or tomorrow, thank's!</p>",
        "id": 238017109,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620546064
    },
    {
        "content": "<p>Note that one thing to discuss in particular is naming, especially the famous \"namespace normed_group_hom -- probably needs to change\" from <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/normed_group_quotient.lean#L27\">here</a>. I put those things in the <code>add_subgroup</code> namespace instead so that the normed group homomorphism from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi mathvariant=\"normal\">/</mi><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">M/S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is <code>S.normed_mk</code>. I think having access to this dot notation is nice, but I'm open to any other name for <code>normed_mk</code>.  It cannot be <code>mk</code> because <code>add_subgroup.mk</code> is already the constructor for <code>add_subgroup</code>.</p>",
        "id": 238020272,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620549920
    },
    {
        "content": "<p>Maybe <code>S.proj</code> would be nicer but that sounds rather more like the algebraic version (ie. it should replace the ugly <code>mk' S</code>). We could look for a subscript or superscript evoking topology or norm, like the subscript l we use for linear maps.</p>",
        "id": 238020448,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620550108
    },
    {
        "content": "<p>For reference, the submodule version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_add_group.mk'\">docs#quotient_add_group.mk'</a> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.mkq\">docs#submodule.mkq</a></p>",
        "id": 238021713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620551359
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_add_group\">docs#quotient_add_group</a> is analogous to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.quotient\">docs#submodule.quotient</a>. If renaming is on people's minds right now, it might make sense to rename the two to be more similar.</p>",
        "id": 238022504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620552277
    },
    {
        "content": "<p>It would be nice to be consistent here. I'd be willing to implement any renaming if people tell me what they would like to see.</p>",
        "id": 238022868,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620552694
    },
    {
        "content": "<p>I'll be able to bump in about one hour.</p>",
        "id": 238089249,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620624679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> ooh, I just pushed a bump...</p>",
        "id": 238090479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620625990
    },
    {
        "content": "<p>Everything compiles, but maybe you had more cleanup in mind...</p>",
        "id": 238090490,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620626008
    },
    {
        "content": "<p>Yes there will be more cleanup.</p>",
        "id": 238091042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620626587
    },
    {
        "content": "<p>I pushed a bunch of changes to <a href=\"https://github.com/leanprover-community/mathlib/issues/7473\">#7473</a> (Scott's homology redesign). When that lands, some of the non-for-mathlib files of LTE can even be removed!</p>",
        "id": 238107012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620636649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Can you take a look at this please?</p>",
        "id": 238107031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620636662
    },
    {
        "content": "<p>It's going to be interesting, because when <a href=\"https://github.com/leanprover-community/mathlib/issues/7473\">#7473</a> lands we probably also want to have redesigned homotopies. So maybe we shouldn't try to bump mathlib in between those PRs</p>",
        "id": 238107775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620637111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> and Johan, could you have a look at <a href=\"https://github.com/leanprover-community/lean-liquid/commit/e96a6d19b273083864d4f79269f1a41909ef531a\">https://github.com/leanprover-community/lean-liquid/commit/e96a6d19b273083864d4f79269f1a41909ef531a</a>? The commit message explains what happens.</p>",
        "id": 238109069,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620637790
    },
    {
        "content": "<p>Thanks a lot! This is good progress!</p>",
        "id": 238109855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620638231
    },
    {
        "content": "<p>In the previous commit I also removed two files that had been PRed but were still in the repo</p>",
        "id": 238109914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620638274
    },
    {
        "content": "<p>Now <code>for_mathlib/normed_group_quotient.lean</code> is almost ready for PR as it is, there is one tiny lemma which belongs to <code>normed_group/basic.lean</code>. But I'll wait for Riccardo's opinion before opening the mathlib PR.</p>",
        "id": 238110085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620638357
    },
    {
        "content": "<p>In the mean time we'll get <a href=\"https://github.com/leanprover-community/mathlib/issues/7459\">#7459</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/7474\">#7474</a> which will unlock a lot of other stuff to PR.</p>",
        "id": 238110243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620638437
    },
    {
        "content": "<p>Sorry, I've been very busy in the last days. Having a look at it now</p>",
        "id": 238111091,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620638893
    },
    {
        "content": "<p>Can you get rid of the code duplication in <code>add_subgroup.normed_group_quotient</code> by using <code>.. add_subgroup.semi_normed_group_quotient</code>?</p>",
        "id": 238111254,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620638994
    },
    {
        "content": "<p>I'm afraid not, because they are new structures that don't extend each other.</p>",
        "id": 238111975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620639312
    },
    {
        "content": "<p>Yes but they have common ancestors like <code>has_dist</code> or <code>uniform_space</code>, so there could be some magic that unifies the fields. Does it really not work at all?</p>",
        "id": 238112343,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620639483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I think it's very good! We should just add a docstring missing at the beginning and probably <code>structure is_quotient</code> is useless for mathlib, but the rest is excellent</p>",
        "id": 238112691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620639655
    },
    {
        "content": "<p>And I agree with Johan that the code duplication is difficult to avoid. I don't remember the reasons at the end, but we discussed about having <code>normed_group</code> extending <code>semi_normed_group</code> and we decided to go the other way</p>",
        "id": 238112939,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620639796
    },
    {
        "content": "<p>I just checked, and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The quotient in the category of normed groups. -/</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">instance</span> <span class=\"n\">add_subgroup.normed_group_quotient</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">eq_of_dist_eq_zero</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">m'</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">mk'</span> <span class=\"n\">S</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">mk'</span> <span class=\"n\">S</span> <span class=\"n\">m'</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">mk'</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span><span class=\"o\">,</span> <span class=\"n\">quotient_norm_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">hS.closure_eq</span><span class=\"o\">,</span>\n         <span class=\"bp\">←</span> <span class=\"n\">quotient_add_group.eq_iff_sub_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">add_subgroup.semi_normed_group_quotient</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>seems to work fine.</p>",
        "id": 238112982,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620639827
    },
    {
        "content": "<p>(I understand the <code>.. foo</code> as: try to find in <code>foo</code> stuff that will fill some of the missing fields. No need that <code>bar</code> extends <code>foo</code> for this).</p>",
        "id": 238113215,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620639961
    },
    {
        "content": "<p>Oh, wow!!</p>",
        "id": 238113275,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620639981
    },
    {
        "content": "<p>I've just pushed directly to master. I hope it's allowed in LTE, otherwise don't hesitate to revert.</p>",
        "id": 238114523,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620640593
    },
    {
        "content": "<p>I push all sorts of crap directly to master :-/</p>",
        "id": 238114972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620640824
    },
    {
        "content": "<p>Perfect! :-)</p>",
        "id": 238114990,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1620640838
    },
    {
        "content": "<p>I added some docstring</p>",
        "id": 238115393,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620641056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/238114523\">said</a>:</p>\n<blockquote>\n<p>I've just pushed directly to master. I hope it's allowed in LTE, otherwise don't hesitate to revert.</p>\n</blockquote>\n<p>I wish you pushed more often <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 238115516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620641136
    },
    {
        "content": "<p>The <code>basis</code> refactor is in mathlib! Thanks a lot <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>!</p>",
        "id": 238144725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620654526
    },
    {
        "content": "<p>Time for another mathlib bump <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 238144739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620654534
    },
    {
        "content": "<p>Concerning mathlib bumps: as I alluded to a little bit in some post above, we have to coordinate the \"normal\" mathlib PRs coming from LTE with the big homological algebra redesign from Scott.</p>",
        "id": 238144829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620654576
    },
    {
        "content": "<p>Because we are relying on hand-rolled cochain complexes and homotopies in LTE. So that's going to need refactoring.</p>",
        "id": 238144895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620654603
    },
    {
        "content": "<p>And we probably don't want to mix that refactor with \"ordinary\" mathlib bumps.</p>",
        "id": 238145059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620654652
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7459\">#7459</a> is merged, so <code>subgroup.mem_map_of_mem</code> can be removed from <code>normed_group_hom.lean</code>. I think no modification is needed</p>",
        "id": 238148632,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620656021
    },
    {
        "content": "<p>I'm trying to bump it right now <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 238149261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620656255
    },
    {
        "content": "<p>mathlib bump is done.</p>",
        "id": 238151657,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620657132
    },
    {
        "content": "<p>I just noticed that the results in <code>for_mathlib/nnreal.lean</code> are never used in the project. We can maybe remove the file and the author (I think <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> ) can open a PR if he wants to. Unless the results are there to be used somewhere in the future</p>",
        "id": 238165820,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620662065
    },
    {
        "content": "<p>I have just finished marking for the day and could work on the inevitable breakage in the Gordan stuff in about 1 hour</p>",
        "id": 238166836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620662428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> maybe there is even a PR already? There is a PR about nnreal stuff</p>",
        "id": 238168144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620662926
    },
    {
        "content": "<p>Ah yes, sorry! I didn't see it somehow in the wiki</p>",
        "id": 238168272,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620662971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> is there a branch with new mathlib and broken is_basis stuff? </p>\n<p>After Gordan is done and I'm finished with marking I could take on the job of bumping LTE to use the new homology stuff by making a new branch which has Scott's mathlib branch as a dependency and then tries to fix everything up. This is worthwhile because Scott's ideas could be tested this way</p>",
        "id": 238177803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620666650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> there is no broken <code>is_basis</code> stuff anymore. I fixed the breakage.</p>",
        "id": 238178993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620667088
    },
    {
        "content": "<p>Oh thanks! I was about to start on Lean -- I'll go back to Gordan!</p>",
        "id": 238179201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620667183
    },
    {
        "content": "<p>Good luck! Bhavik claimed on the toric thread that he and Yael might have a topological proof done by the end of today (-;</p>",
        "id": 238179864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620667426
    },
    {
        "content": "<p>It was never clear to me that he was claiming that he'd prove what we're calling Gordan's Lemma. The other job I need to do is to start porting grading stuff into mathlib, parts of it are working well now although we still need to think about names.</p>",
        "id": 238180361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620667627
    },
    {
        "content": "<p>I would worry about PRing to mathlib after Gordan is done</p>",
        "id": 238180427,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620667659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/238180361\">said</a>:</p>\n<blockquote>\n<p>It was never clear to me that he was claiming that he'd prove what we're calling Gordan's Lemma. The other job I need to do is to start porting grading stuff into mathlib, parts of it are working well now although we still need to think about names.</p>\n</blockquote>\n<p>I am claiming this :)</p>",
        "id": 238180449,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620667667
    },
    {
        "content": "<p>The game is on!</p>",
        "id": 238180564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620667703
    },
    {
        "content": "<p>Oh I'm sure he will win easily! I still have a bunch of stuff to do and I am very limited in my lean time for the next two weeks. But I will keep trying in order to force him to see this through :D</p>",
        "id": 238180747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620667789
    },
    {
        "content": "<p>The only difference in my version is that <a href=\"https://github.com/leanprover-community/lean-liquid/blob/1c9a0dd21297646b88b31cea4e36f2adc0f19d3f/src/for_mathlib/Gordan.lean#L129\">https://github.com/leanprover-community/lean-liquid/blob/1c9a0dd21297646b88b31cea4e36f2adc0f19d3f/src/for_mathlib/Gordan.lean#L129</a> is changed from </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">explicit_gordan</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℤ</span> <span class=\"bp\">Λ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">finite_free</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">explicit_gordan</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">Λ</span> <span class=\"o\">:</span> <span class=\"n\">finite_free</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"bp\">Λ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n</code></pre></div>\n<p>since there's a clash between the module instance given there and from line 14 - I'm presuming this is an oversight in master rather than anything fundamental?</p>",
        "id": 238181075,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620667897
    },
    {
        "content": "<p>That module instance should have been deleted after the int_smul refactor</p>",
        "id": 238181306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620667979
    },
    {
        "content": "<p>In that case would a better temporary fix for me to be to locally disable that instance so that when the refactor goes through it doesn't break?</p>",
        "id": 238181916,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620668221
    },
    {
        "content": "<p>Which refactor?</p>",
        "id": 238182064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620668285
    },
    {
        "content": "<p>The int_smul refactor</p>",
        "id": 238182301,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620668394
    },
    {
        "content": "<p>That was done weeks ago.</p>",
        "id": 238182501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620668464
    },
    {
        "content": "<p>We just didn't carefully delete all the module instances.</p>",
        "id": 238182535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620668475
    },
    {
        "content": "<p>Check master again (-;</p>",
        "id": 238182544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620668480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> where are you writing up your approach to Gordan?</p>",
        "id": 238193459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620672772
    },
    {
        "content": "<p>Some mathlib branch?</p>",
        "id": 238193469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620672781
    },
    {
        "content": "<p>A branch of LTE, I haven't pushed yet</p>",
        "id": 238194758,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620673291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/mathlib.20sprint/near/238179864\">said</a>:</p>\n<blockquote>\n<p>Good luck! Bhavik claimed on the toric thread that he and Yael might have a topological proof done by the end of today (-;</p>\n</blockquote>\n<p>By the way, I'm not claiming to do anything, because Bhavik told me I'm supposed to do past papers <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 238197850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620674620
    },
    {
        "content": "<p>Do you still need Krein-Milman? What's stuck right now is that I want to polish exposed faces, and Bhavik wants to polish Hahn-Banach.</p>",
        "id": 238198281,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620674860
    },
    {
        "content": "<p>We need the thing we're calling Gordan's Lemma and I think that you guys have done enough for Bhavik to convince himself that he can get there quickly</p>",
        "id": 238198697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620675057
    },
    {
        "content": "<p>Exactly, I want to show that exposed faces form a complete lattice (in finite dimension), and even maybe a graded lattice (basically section 2 of the paper you sent). But I'm missing some framework, most crucially I can't seem to show transivity without the H-representation.</p>",
        "id": 238198757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1620675085
    },
    {
        "content": "<p>mathlib bumped again</p>",
        "id": 238254603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620711435
    },
    {
        "content": "<p>Dear All,</p>\n<p>I am back from my holiday and I see lots of great activity around Gordan: I am really pleased!</p>\n<p>Kevin / Bhavik-Yaël -- This feels like the saying on building a tunnel: start simultaneously from both ends.  You either finish in half the time or you have a two-lanes tunnel!</p>\n<p>Riccardo: my temporary fix had been to split the lemmas for mathlib, but I may not have actually used them in the project, since it was easy enough to simply replace them with their short proofs.  Also, when I started moving them to mathlib I decided to finally try to refactor the <code>ordered</code> hierarchy, since at the moment it is very limiting.  I am almost done with a first serious attempt at this.</p>",
        "id": 238258291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1620714778
    },
    {
        "content": "<p>Where is my tunnel emoji?</p>",
        "id": 238258359,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620714826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Do you prefer to PR <code>normed_group_quotient.lean</code> yourself? I think you wrote the most delicate parts so I don't want to steal it, but otherwise I can do it today (mentioning you as co-author of course)</p>",
        "id": 238315721,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620742889
    },
    {
        "content": "<p>Yes I'll do it tonight</p>",
        "id": 238322726,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620745360
    },
    {
        "content": "<p>Now that Scott's new complexes PR is merged, what's the plan with the next mathlib bump?</p>",
        "id": 238360597,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620757894
    },
    {
        "content": "<p>I think this project provides a perfect place to test his ideas</p>",
        "id": 238361683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620758317
    },
    {
        "content": "<p>I think we should wait till homotopies are merged before we refactor LTE to the new complexes</p>",
        "id": 238362640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620758770
    },
    {
        "content": "<p>Which PR defines homotopies?</p>",
        "id": 238367522,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620760815
    },
    {
        "content": "<p>Got it <a href=\"https://github.com/leanprover-community/mathlib/issues/7483\">#7483</a></p>",
        "id": 238367641,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620760878
    },
    {
        "content": "<p>In the meantime, I made another mathlib bump to include the Cech nerve, and I adapted the work I did previously obtaining the contracting homotopy needed for 8.19. This is now in the branch <code>bump-2021-05-11</code>. I wasn't sure whether there was anything else that should have been changed with the recent mathlib update, so please take a look at the diff<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/compare/bump-2021-05-11\">https://github.com/leanprover-community/lean-liquid/compare/bump-2021-05-11</a></p>",
        "id": 238416393,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620790429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> does it build? If so, just merge into master</p>",
        "id": 238423719,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620797811
    },
    {
        "content": "<p>others can then clean up on top of that</p>",
        "id": 238423726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620797821
    },
    {
        "content": "<p>I'm doing a bump on top of yours. Will merge it into master soon</p>",
        "id": 238425110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620799187
    },
    {
        "content": "<p>merged</p>",
        "id": 238426416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620800222
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/7603\">#7603</a></p>",
        "id": 238653145,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620926993
    },
    {
        "content": "<p>Very nice! It seems very good to me, I will have a closer look tomorrow</p>",
        "id": 238674319,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1620936866
    },
    {
        "content": "<p>I bumped mathlib again, but there might be some cleanup that I missed</p>",
        "id": 238870250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621056163
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7614\">#7614</a> dualizes the existing material on <code>simplicial_object</code> in mathlib, and incorporates Adam's <code>for_mathlib/simplicial/augmented.lean</code>.</p>",
        "id": 238880920,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621067820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, what is the <code>change_cone</code> stuff in <code>for_mathlib/Profinite/functorial_limit.lean</code> needed for? The bottom half of the file seems happy without it, and it isn't used elsewhere.</p>",
        "id": 238881873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621068915
    },
    {
        "content": "<p>Thanks for opening <a href=\"https://github.com/leanprover-community/mathlib/issues/7614\">#7614</a> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> ! </p>\n<p>I added the <code>change_cone</code> stuff just in case we ever need to use the functorial properties of the <code>Profinite.as_limit</code> construction, but you're right, it's not used anywhere yet. I don't think we should delete it just yet, in case we do end up using it for 8.19.</p>",
        "id": 238895271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621082759
    },
    {
        "content": "<p>Would it be reasonable to rename <code>NormedGroup</code> to <code>SemiNormedGroup</code>, since that's what it is?</p>",
        "id": 238895439,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621082897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> yes, it's been somewhere on my todo list for a while</p>",
        "id": 238895488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621082994
    },
    {
        "content": "<p>While you are in cleaning-up-mode. <code>locally_constant/Vhat.lean</code> is a huge mess, it's doing everything and is only marginally related to what it's name suggests.</p>",
        "id": 238895566,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621083053
    },
    {
        "content": "<p>Lots of stuff is more generally about <code>SemiNormedGroup</code></p>",
        "id": 238895576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621083072
    },
    {
        "content": "<p>Presumably in documentation it's fine to still just talk about normed groups, even when the constructions/theorems work for seminormed groups.</p>",
        "id": 238895722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621083233
    },
    {
        "content": "<p>Or would it be better to be precise, so it's clear what works for seminormed vs normed groups?</p>",
        "id": 238895790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621083270
    },
    {
        "content": "<p>I guess since we're mathlib we want to be precise (-;</p>",
        "id": 238895802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621083291
    },
    {
        "content": "<p>Is it okay to still use the phrase \"normed group hom\", or should that also be \"seminormed group hom\"?</p>",
        "id": 238895822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621083320
    },
    {
        "content": "<p>We call semiring homs ring homs...</p>",
        "id": 238895916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1621083428
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 238895924,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621083436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> yes, there I wouldn't make a distinction, also because a normed group hom is really just a semi normed group hom</p>",
        "id": 238896263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621083760
    },
    {
        "content": "<p>Some doc-strings refer to <code>LCC_Mbar_pow</code>, but it doesn't exist. Is this future or past? :-)</p>",
        "id": 238896320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621083796
    },
    {
        "content": "<p>Or just named differently?</p>",
        "id": 238896381,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621083849
    },
    {
        "content": "<p>ouch... that must be really old</p>",
        "id": 238896625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621083971
    },
    {
        "content": "<p>It's called <code>CLCFP</code> these days...</p>",
        "id": 238896638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621083984
    },
    {
        "content": "<p>aka \"<code>CompletionLocallyConstantFiltrationPow</code>\"... <span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span></p>",
        "id": 238896666,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621084023
    },
    {
        "content": "<p>but that is so long that I decided to abbreviate</p>",
        "id": 238896676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621084035
    },
    {
        "content": "<p>Okay, I did the renaming <code>NormedGroup</code> to <code>SemiNormedGroup</code>, and hopefully (semi?)normalized the doc-strings. :-)</p>",
        "id": 238897932,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621085187
    },
    {
        "content": "<p>Would <code>SemiNormedGroupNormNoninc</code> really be the preferred name? Couldn't we just use a prime or something?</p>",
        "id": 238898056,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621085329
    },
    {
        "content": "<p>I don't have a strong opinion. A <code>'</code> also seems reasonable to me</p>",
        "id": 238898206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621085476
    },
    {
        "content": "<p>Or maybe a subscript <code>1</code>?</p>",
        "id": 238898215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1621085485
    },
    {
        "content": "<p>I vote for <code>'</code></p>",
        "id": 238898333,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621085578
    },
    {
        "content": "<p>If only we could write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">N</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">d</mi><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">p</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}_{\\mathrm{SemiNormedGroup}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">SemiNormedGroup</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span></p>",
        "id": 238898518,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621085697
    },
    {
        "content": "<p>?</p>",
        "id": 238898949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1621086127
    },
    {
        "content": "<p>Sorry, maybe that joke is way too obscure... This is the \"unit ball\" of <code>SemiNormedGroup</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">O</mi><mi>v</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{O}_v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the unit ball of a Krull valuation v</p>",
        "id": 238899143,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1621086330
    }
]