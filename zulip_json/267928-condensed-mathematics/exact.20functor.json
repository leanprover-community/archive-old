[
    {
        "content": "<p>Do we have exact functors somewhere?<br>\ncc <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span></p>",
        "id": 278832528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649858493
    },
    {
        "content": "<p>additive + preserves finite colimits + prserves finite limits</p>\n<p>But we don't have the fact that it will preserve <code>exact_seq</code>s (although <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> and I did half of that some time ago for the 0th derived functor iso)</p>",
        "id": 278832762,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649858602
    },
    {
        "content": "<p>I don’t think there is distinguished triangles to distinguished triangles either</p>",
        "id": 278833032,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649858729
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.functor.preserves_exact_of_preserves_finite_colimits_of_epi\">docs#category_theory.abelian.functor.preserves_exact_of_preserves_finite_colimits_of_epi</a> and I think also the dual statement, so it's just a matter of putting things together.</p>",
        "id": 278833176,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649858792
    },
    {
        "content": "<p>Exact  also means “triangulated”</p>",
        "id": 278833235,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649858823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/exact.20functor/near/278833235\">said</a>:</p>\n<blockquote>\n<p>Exact also means “triangulated”</p>\n</blockquote>\n<p>Ah ok, yeah, we definitely don't have that, although I do think we have triangulated functors?</p>",
        "id": 278833285,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649858860
    },
    {
        "content": "<p>Sorry, exact functor is a synonym for additive functor between triangulated categories that commutes with shifts and sends distinguished triangles to distinguished triangles</p>",
        "id": 278833634,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649859034
    },
    {
        "content": "<p>Last I checked I didn’t find this</p>",
        "id": 278833733,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649859086
    },
    {
        "content": "<p>But it also makes sense between non-triangulated cats, right</p>",
        "id": 278834041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649859244
    },
    {
        "content": "<p>So any additive functor between homotopy categories is “exact” but descends to an exact functor in derived categories if it takes acyclic complexes to acyclic complexes</p>",
        "id": 278834138,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649859302
    },
    {
        "content": "<p>Here we are talking about taking acyclic to acyclics  right?</p>",
        "id": 278834189,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649859329
    },
    {
        "content": "<p>Or is it something else?</p>",
        "id": 278834403,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649859424
    },
    {
        "content": "<p>I have a complex <code>C</code>, and I'm applying an exact functor <code>F</code> to it. I want to know that homology of <code>F(C)</code> vanishes if homology of <code>C</code> vanishes.</p>",
        "id": 278834504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649859473
    },
    {
        "content": "<p>Exact as in <a href=\"https://stacks.math.columbia.edu/tag/0034\">stacks#0034</a> ?</p>",
        "id": 278834931,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649859661
    },
    {
        "content": "<p>This <code>sorry</code> is very stupid and annoying: <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/free_pfpng/acyclic.lean#L206\">https://github.com/leanprover-community/lean-liquid/blob/master/src/free_pfpng/acyclic.lean#L206</a></p>",
        "id": 278835496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649859896
    },
    {
        "content": "<p>In the lemma above it, I prove that <code>C</code> is an exact complex.</p>",
        "id": 278835547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649859914
    },
    {
        "content": "<p>Sorry, was afk for a bit. Anyway, the <code>sorry</code> wants to show that <code>Ab.ulift</code> applied to <code>C</code> is exact.</p>",
        "id": 278836413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649860305
    },
    {
        "content": "<p>Anyway, modulo that <code>sorry</code>, I would say that <a href=\"https://leanprover-community.github.io/liquid/sect0009.html#normed-to-cond-acyclic\">https://leanprover-community.github.io/liquid/sect0009.html#normed-to-cond-acyclic</a> is done</p>",
        "id": 278836588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649860363
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/liquid/sect0009.html#acyclic-sheaf\">https://leanprover-community.github.io/liquid/sect0009.html#acyclic-sheaf</a> done as well?!</p>",
        "id": 278837412,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649860703
    },
    {
        "content": "<p>Nope, not that one</p>",
        "id": 278837638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649860819
    },
    {
        "content": "<p>So it's really only a corollary</p>",
        "id": 278837670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649860829
    },
    {
        "content": "<p>But <code>acyclic-sheaf</code> should be fun. It's just that we still don't have LES yet.</p>",
        "id": 278837727,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649860864
    },
    {
        "content": "<p>I did add the statement of <code>acyclic-sheaf</code>.</p>",
        "id": 278838208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649861051
    }
]