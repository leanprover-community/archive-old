[
    {
        "content": "<p>In <code>condensed/rescale.lean</code> there's the following claim:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">rescale_preserves_limits_of_shape_discrete_quotient</span>\n  <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">limits.preserves_limits_of_shape.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">discrete_quotient.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">↥</span><span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">rescale.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>How about this for an approach: <code>rescale c</code> is an equivalence of categories, and equivalences preserve all limits -- but I can't find the latter. Do we have it? I'm working on the equivalence. Not sure if it's the quickest way but it seems nice to formalise.</p>",
        "id": 278427292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649533743
    },
    {
        "content": "<p>Yeah, I think that's a very sensible way of proving this.</p>",
        "id": 278427390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649533882
    },
    {
        "content": "<p>I'm sure we have it. Maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.equivalence_preserves_limits\">docs#category_theory.equivalence_preserves_limits</a></p>",
        "id": 278430930,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649538646
    },
    {
        "content": "<p>Oh nice. I looked in all the <code>preserves</code> files but not at adjunctions</p>",
        "id": 278432324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649540346
    },
    {
        "content": "<p>This is so messed up. <code>is_equivalence</code> isn't a Prop! Why can't we use is for props and has for data?</p>",
        "id": 278432389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649540418
    },
    {
        "content": "<p>It's because the essential inverse of an equivalence is only unique up to isomorphism.</p>",
        "id": 278435447,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649545148
    },
    {
        "content": "<p>Same goes for things like <code>is_right_adjoint</code></p>",
        "id": 278435459,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649545187
    },
    {
        "content": "<p>sure, but here we just need existence of an essential inverse.</p>",
        "id": 278435878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649545784
    },
    {
        "content": "<p>That's true. I guess we could mimic what we have for limits, where <code>has_limit</code> is a prop, which is then used to get the noncomputable <code>limit  F</code>, while we also have <code>is_limit</code> saying that a certain cone is a limit cone, and a bunch of API giving us the canonical isomorphisms.</p>",
        "id": 278436282,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649546379
    },
    {
        "content": "<p>That would be a significant refactor though</p>",
        "id": 278436287,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649546391
    },
    {
        "content": "<p>Oh dear, it never even occurred to me that <code>is_limit</code> and <code>has_limit</code> might be backwards by Kevin's rubric!</p>",
        "id": 278437042,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649547612
    },
    {
        "content": "<p>Maybe I'm fusing about nothing! I just have this dream that in the algebra hierarchy and beyond you can guess how to make eg Dedekind domains by assuming a base typeclass like <code> comm_ring</code> and then putting Prop-valued typeclasses all called is_something on top</p>",
        "id": 278450480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649570424
    },
    {
        "content": "<p>OK I pushed a proof of <code>rescale_preserves_limits_of_shape_discrete_quotient</code>. Basically I had to learn how to steer this stuff; once I got the hang of it all proofs were short. The idea is that when mapping between different <code>rescales</code> every map is <code>id</code> but if you write it as <code>λ m, (rescale.of (rescale.of (rescale.of.symm m))),</code> or whatever (this is how to get from <code>rescale (a * b) M</code> to <code>rescale b (rescale a M)</code>) then you don't get any <code>eq.rec</code>s in definitions and things come out really nicely.</p>\n<p>So out of interest, the abstract situation here is that we have an <code>nnreal</code>-indexed family of endofunctors <code>F r : C -&gt; C</code> from a category to itself, and the things I needed to explicitly define were: morphisms in both directions between <code>F 1 M</code> and <code>M</code>, morphisms in both directions between <code>F r (F s M)</code> and <code>F (s * r) M</code>, and finally if <code>r = s</code> a morphism from <code>F r M</code> to <code>F s M</code>. All of these maps are the identity on the underlying type (rescaling is moving around some of the other structure on the type), but it took me a while to understand how to prove that they played well with e.g. the topologies. Once I had these maps I could just compose them together to prove that <code>F r</code> and <code>F r^{-1}</code> were equivalences. There is probably some general story going on here -- monoids acting on categories? Not that it matters, it's all working now.</p>",
        "id": 278466930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649595517
    },
    {
        "content": "<p>This stuff can be considered as a monoidal functor from the positive reals (considered as a monoidal category) to the monoidal category of endofunctors. This is actually very similar to how <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.has_shift\">docs#category_theory.has_shift</a> is defined.</p>",
        "id": 278467222,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649595850
    },
    {
        "content": "<p>In fact, we could probably package these rescale functors into a <code>has_shift</code> instance with <code>nnreal</code> (although has_shift wants an additive monoids whereas here we would use the multiplicative monoid)</p>",
        "id": 278467322,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649596026
    },
    {
        "content": "<p>I dare you to write <code>@[to_additive]</code> in front of <code>has_shift</code> and see what happens. :-)</p>",
        "id": 278467671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649596554
    }
]