[
    {
        "content": "<p>Did we ever decide (in LTE and/or mathlib) how to talk about exact functors?</p>",
        "id": 281978419,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652281176
    },
    {
        "content": "<p>Not really. I think the idea was to say that they preserve finite (co)limits.</p>",
        "id": 281978645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652281226
    },
    {
        "content": "<p>But it hasn't been connected to <code>exact</code>.</p>",
        "id": 281978680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652281234
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.functor.preserves_exact_of_preserves_finite_colimits_of_epi\">docs#category_theory.abelian.functor.preserves_exact_of_preserves_finite_colimits_of_epi</a> and the dual <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.functor.preserves_exact_of_preserves_finite_limits_of_mono\">docs#category_theory.abelian.functor.preserves_exact_of_preserves_finite_limits_of_mono</a></p>",
        "id": 281979574,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1652281609
    },
    {
        "content": "<p>Nice, okay that should do it.</p>",
        "id": 281980167,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652281819
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Ooh, yes of course. Why did I forget about those!? Thanks for the pointers.</p>",
        "id": 281980230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652281849
    },
    {
        "content": "<p>I started an <code>AB4.lean</code> file which seems to be needed:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/ab4.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/ab4.lean</a></p>",
        "id": 281980234,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652281851
    },
    {
        "content": "<p>We'll probably need to show that <code>coproduct_functor</code> is exact given <code>AB4</code>.</p>",
        "id": 281980276,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652281876
    },
    {
        "content": "<p>Is this a missing piece for showing that <code>Ext</code> sends coproducts to products?</p>",
        "id": 281980600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652282009
    },
    {
        "content": "<p>Yeah</p>",
        "id": 281980738,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652282056
    },
    {
        "content": "<p>This is what's needed to show that homology commutes with coproducts.</p>",
        "id": 281980759,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652282070
    },
    {
        "content": "<p>(it's not true in general!)</p>",
        "id": 281980788,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652282080
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/a/146941\">https://mathoverflow.net/a/146941</a></p>",
        "id": 281980904,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652282122
    },
    {
        "content": "<p>Ok, and so we need to show that <code>Ab</code> satisfies AB4</p>",
        "id": 281983029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652282945
    },
    {
        "content": "<p>But we don't need it for <code>Cond(Ab)</code>, if I understand it correctly.</p>",
        "id": 281983042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652282949
    },
    {
        "content": "<p>No, I think we do need it for <code>Cond(Ab)</code>.</p>",
        "id": 281983336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652283056
    },
    {
        "content": "<p>Aren't we dealing with complexes of condensed abelian groups?</p>",
        "id": 281983384,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652283070
    },
    {
        "content": "<p>But to compute <code>Ext^n(foo, bar)</code> you only take homology of a complex of abelian groups, right?</p>",
        "id": 281983591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652283152
    },
    {
        "content": "<p>Oh, I should have specified -- we need this to show that a coproduct of quasi-isos is a quasi-iso.</p>",
        "id": 281983703,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652283199
    },
    {
        "content": "<p>Is that true without AB4?</p>",
        "id": 281983753,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652283219
    },
    {
        "content": "<p>Here is the target lemma:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/ba6f0cadbe3a895dcbaf5a70e0b1c18a42c05ea6/src/for_mathlib/derived/ext_coproducts.lean#L239\">https://github.com/leanprover-community/lean-liquid/blob/ba6f0cadbe3a895dcbaf5a70e0b1c18a42c05ea6/src/for_mathlib/derived/ext_coproducts.lean#L239</a></p>",
        "id": 281984133,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652283370
    },
    {
        "content": "<p>(is GH down?)</p>",
        "id": 281984172,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652283387
    },
    {
        "content": "<p>I see. I agree that AB4 certainly helps. I don't know if it is strictly necessary, but I guess it is.</p>",
        "id": 281984190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652283395
    },
    {
        "content": "<p>In Tohoku Grothendieck works with sheaves on Top, but there he observes that sheaves in abelian groups satisfy AB5, hence AB4. Is this not enough to deduce AB4 for <code>Cond Ab</code>?</p>",
        "id": 282000979,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1652290499
    },
    {
        "content": "<p>Oh, AB4 for <code>Cond Ab</code> should be pretty easy to prove.</p>",
        "id": 282002375,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652291141
    },
    {
        "content": "<p>That's not the issue, rather the issue is whether we need to prove it :)</p>",
        "id": 282002395,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652291152
    },
    {
        "content": "<p>Ah ok, I see. It sounded strange that it might not be true...</p>",
        "id": 282002504,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1652291185
    },
    {
        "content": "<p>Essentially every abelian category \"extra axiom\" is true for <code>Cond Ab</code>!</p>",
        "id": 282005930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652292587
    },
    {
        "content": "<p>And even better they all follow from <br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/d3188794d3b2232ff7c68c3b5e83ef2cef10d58c/src/condensed/extr/equivalence.lean#L371\">https://github.com/leanprover-community/lean-liquid/blob/d3188794d3b2232ff7c68c3b5e83ef2cef10d58c/src/condensed/extr/equivalence.lean#L371</a></p>",
        "id": 282006317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652292761
    },
    {
        "content": "<p>For an arbitrary category C (with finite products or whatever one needs for sheaves), one can consider C-valued sheaves on extremely disconnected sets or profinite sets or compact Hausdorff sets, with the topologies we use on these categories. Are these things all the same in this generality?</p>",
        "id": 282008917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652293918
    },
    {
        "content": "<p>Only if C has all limits</p>",
        "id": 282009068,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1652293969
    },
    {
        "content": "<p>I think in general C-sheaves on CHaus are a full subcategory of C-sheaves on ProFin are a full subcategory of C-sheaves on ExtrDisc, and the essential images are given by those sheaves where the limit that wants to define the value on some compact Hausdorff (resp. profinite) actually exists in C.</p>",
        "id": 282009402,
        "sender_full_name": "Peter Scholze",
        "timestamp": 1652294131
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/e948977da669ce56998eaa819ed5c402c0fb7002/src/condensed/ab4.lean#L178\">https://github.com/leanprover-community/lean-liquid/blob/e948977da669ce56998eaa819ed5c402c0fb7002/src/condensed/ab4.lean#L178</a></p>",
        "id": 282033057,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652306038
    },
    {
        "content": "<p>Good old <code>AB4_of_preserves_colimits_of_reflects_limits_of_AB4</code></p>",
        "id": 282037323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652308908
    },
    {
        "content": "<p>What's the stacks tag for that lemma? ;)</p>",
        "id": 282037561,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1652309062
    },
    {
        "content": "<p>I wonder if the Stacks proof contains lines such as <code>swap, { rintro i _ ⟨⟨⟨⟩⟩⟩, dsimp, simp, dsimp, simp },</code></p>",
        "id": 282038541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652309765
    },
    {
        "content": "<p>This really is all about knowing the correct abstractions in category theory isn't it. Very well done.</p>",
        "id": 282038605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652309832
    }
]