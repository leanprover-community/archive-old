[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13262\">#13262</a> is a PR I'd like to land in mathlib before I finish off the <code>triangulated.pretriangulated (bounded_derived_category A)</code> instance in <code>derived/derivated_cat.lean</code>. This instance is essentially done now.</p>",
        "id": 278384320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649473891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, I'd like to add the following lemmas about <code>lift</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_self</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">ùí¶</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_K_projective</span> <span class=\"n\">P.val</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_quasi_iso</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"n\">g</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lift_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_comp</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">ùí¶</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_K_projective</span> <span class=\"n\">P.val</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_quasi_iso</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lift_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_comp_lift_self</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">ùí¶</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_K_projective</span> <span class=\"n\">P.val</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_K_projective</span> <span class=\"n\">X.val</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_quasi_iso</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_quasi_iso</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">lift</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"n\">lift_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp, reassoc]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">lift_comp_lift_comp</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">ùí¶</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_K_projective</span> <span class=\"n\">P.val</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_K_projective</span> <span class=\"n\">X.val</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_quasi_iso</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_quasi_iso</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"n\">lift_unique</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Any objections?</p>",
        "id": 278386899,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649478007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I reviewed that PR, but CI is unhappy. So I gave a <code>bors d+</code></p>",
        "id": 278389882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649483228
    },
    {
        "content": "<p>It seems the linter crashed? I can't view the lint output. I'll restart CI.</p>",
        "id": 278389897,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649483278
    },
    {
        "content": "<p>Those lemmas look good to me!</p>",
        "id": 278393309,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649488563
    },
    {
        "content": "<p>I'm pretty unhappy with the current approach to constructing the shift on <code>bounded_derived_category</code>. It runs into lots of definitional equality problems, and suffers from the fact that people have previously abused <code>local attribute [reducible] endofunctor_monoidal_category</code> in setting up the theory of shifts....</p>\n<p>I'd like to rip this out and start over, by showing that a full subcategory of a category with a shift, which is closed under the shift, has an induced shift, and then apply this to the forgetful functor from <code>bounded_derived_category</code> to <code>bounded_homotopy_category</code>.</p>",
        "id": 278394657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649490547
    },
    {
        "content": "<p>Possibly doing the same for <code>bounded_homotopy_category ‚•§ homotopy_category</code>.</p>",
        "id": 278394674,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649490585
    },
    {
        "content": "<p>I guess that's fair.</p>",
        "id": 278398937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649495922
    },
    {
        "content": "<p>PR at <a href=\"https://github.com/leanprover-community/mathlib/pull/13265\">#13265</a>. I need to actually try it out in LTE still.</p>",
        "id": 278401627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649499868
    },
    {
        "content": "<p>Thanks, lgtm</p>",
        "id": 278404032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649502787
    },
    {
        "content": "<p>It works very nicely in LTE. Once <a href=\"https://github.com/leanprover-community/mathlib/pull/13265\">#13265</a> has hit <code>master</code>, we can merge the branch <code>shifts</code> on <code>lean-liquid</code>. After that <code>derived_cat.lean</code> is completely sorry free!</p>",
        "id": 278410732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649511642
    },
    {
        "content": "<p>I did create two sorries in an earlier file, but hopefully they are easy: the shift of a K-projective object is K-projective, and the shift of a quasi-isomorphism is a quasi-isomorphism.</p>",
        "id": 278410749,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649511684
    },
    {
        "content": "<p>I'm fairly sure I proved those two things somewhere.</p>",
        "id": 278411138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649512166
    },
    {
        "content": "<p>I couldn't find <code>is_K_projective.*shift</code> with <code>grep</code> <del>(similarly for <code>is_quasi_iso.*shift</code>)</del></p>",
        "id": 278411205,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649512250
    },
    {
        "content": "<p>I think it's in <code>derived/lemmas</code> with some strange auto-generated instance name</p>",
        "id": 278411226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649512295
    },
    {
        "content": "<p>yup, found it</p>",
        "id": 278411310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649512440
    },
    {
        "content": "<p>didn't find one for <code>is_K_projective</code>, however</p>",
        "id": 278411352,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649512451
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-liquid/blob/e40a6c1646b82a99a5cc1bf0d1e86601128e4f29/src/for_mathlib/derived/lemmas.lean#L389\">https://github.com/leanprover-community/lean-liquid/blob/e40a6c1646b82a99a5cc1bf0d1e86601128e4f29/src/for_mathlib/derived/lemmas.lean#L389</a></p>",
        "id": 278411451,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649512645
    },
    {
        "content": "<p>These funny [[ ]] brackets foiled my search. :-)</p>",
        "id": 278411652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649512886
    },
    {
        "content": "<p>I'm curious... What's the auto-generated name for that?</p>",
        "id": 278411741,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649513018
    },
    {
        "content": "<p>I manually named it :-)</p>",
        "id": 278411789,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649513057
    },
    {
        "content": "<p>BTW, I think the pretriangulated constructor for a subcat is the way to go. The stuff in the <code>for_mathlib/derived</code> folder should be considered as mostly experimental.</p>",
        "id": 278411864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649513167
    },
    {
        "content": "<p>I guess we could use the same constructor to obtain the pretriangulated structure on the bounded homotopy category as well.</p>",
        "id": 278412526,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649514258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/derived_cat/near/278394657\">said</a>:</p>\n<blockquote>\n<p>I'd like to rip this out and start over, by showing that a full subcategory of a category with a shift, which is closed under the shift, has an induced shift, and then apply this to the forgetful functor from <code>bounded_derived_category</code> to <code>bounded_homotopy_category</code>.</p>\n</blockquote>\n<p>The version of this for (pre)triangulated categories was the most used Lemma from my derived categories course.</p>",
        "id": 278570691,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1649690700
    },
    {
        "content": "<p>Yes, it sounds a good idea to have. It's on my intentions list, but I may have run out of significant mathlib time for a while.</p>",
        "id": 278620558,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649713026
    }
]