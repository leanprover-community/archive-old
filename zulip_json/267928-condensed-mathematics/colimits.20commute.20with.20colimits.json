[
    {
        "content": "<p>Do we actually know that colimits commute with colimits? I need to show that <code>A → A^{⊕n}</code> commutes with filtered colimits, and would like this to be automatic.</p>",
        "id": 275652155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647523867
    },
    {
        "content": "<p>The limit version is in <code>category_theory/limit/fubini</code>. Looks like we don't have the colimit version.</p>",
        "id": 275663198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647528212
    },
    {
        "content": "<p>But since you're using biproducts, it might be easier to do a one-off construction.</p>",
        "id": 275663449,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647528299
    },
    {
        "content": "<p>I can write something up real quick.</p>",
        "id": 275663515,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647528329
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I've done that part...</p>",
        "id": 275665971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647529226
    },
    {
        "content": "<p>But github didn't let me push it</p>",
        "id": 275665998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647529232
    },
    {
        "content": "<p>Oh ok.</p>",
        "id": 275666024,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647529241
    },
    {
        "content": "<p>Now it worked!</p>",
        "id": 275666033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647529243
    },
    {
        "content": "<p>Is GH down?</p>",
        "id": 275666034,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647529245
    },
    {
        "content": "<p>Half an hour ago I got errors</p>",
        "id": 275666052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647529251
    },
    {
        "content": "<p>So I first went for a run</p>",
        "id": 275666069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647529258
    },
    {
        "content": "<p>bors still seems to be down...</p>",
        "id": 275666404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647529364
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">eval_functor_preserves_filtered_colimits</span> <span class=\"o\">(</span><span class=\"n\">BD</span> <span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">preserves_filtered_colimits</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">preserves_filtered_colimits</span> <span class=\"o\">((</span><span class=\"n\">eval_functor</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">BD</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">preserves_filtered_colimits</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">introsI</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This shows that the <code>Q'</code>-construction preserves filtered colimits.</p>\n<ul>\n<li>It is currently parameterised by a functor <code>F</code>. This should be specialized to <code>ℤ[_]</code> later on. We still need to show that <code>ℤ[_]</code> preserves filtered colimits.</li>\n<li>For <a href=\"https://leanprover-community.github.io/liquid/sect0009.html#homology-Qprime\">https://leanprover-community.github.io/liquid/sect0009.html#homology-Qprime</a> we will also need to show that homology commutes with filtered colimits. That's the missing piece to tick off that box.</li>\n</ul>",
        "id": 275669947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647530638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> That second • should be well within the reach of your mathematical toolkit.</p>",
        "id": 275670051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647530665
    },
    {
        "content": "<p>[And once again, I can't push to github <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>]</p>",
        "id": 275670280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647530740
    },
    {
        "content": "<p>Mirabile dictu, I managed to push a minute ago!</p>",
        "id": 275676006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647532657
    },
    {
        "content": "<p>Great! will start looking at them tomorrow</p>",
        "id": 275680908,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1647533604
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mo>−</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[-]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mclose\">]</span></span></span></span> is by definition a left adjoint, so it preserves all colimits for free! (unless you're talking about a different functor?)</p>",
        "id": 275694959,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647536933
    },
    {
        "content": "<p>I guess what we're actually missing is the fact that the functor from <code>PFPNG</code> to <code>Condensed Set</code> can be computed as the colimit of the condensed sets associated to the profinite levels of the given PFPNG.</p>",
        "id": 275695359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647537074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> We mostly need to decide which implementation we use. Maybe we need multiple isomorphic versions of <code>ℤ[_]</code>.</p>",
        "id": 275697194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647537812
    },
    {
        "content": "<p>Do we have the CHPNG version of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mo>−</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[-]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mclose\">]</span></span></span></span> yet?</p>",
        "id": 275697246,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647537840
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> made a start on it.</p>",
        "id": 275697318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647537861
    },
    {
        "content": "<p>Or actually, he's defining <code>ℤ[T⁻¹][S]</code>, I think. (For finite <code>S</code>.)</p>",
        "id": 275697371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647537891
    },
    {
        "content": "<p>What I have is mostly contained in <code>Lbar.finsupp_instance</code> and <code>src/Lbar/kernel_truncate.lean</code>.</p>\n<p>The first file shows that <code>S</code>-indexed polynomials (in x^1, but viewed as polynomials in x) are a <code>pseudo_normed_group</code>.</p>\n<p>The second file is a beginning of showing that the kernel of the truncation map from Laurent measures to Lbar actually gives rise to <code>S</code>-indexed polynomials.</p>",
        "id": 275699421,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647538786
    },
    {
        "content": "<p>And <code>S</code> is a <code>Fintype</code>.</p>",
        "id": 275699437,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647538800
    },
    {
        "content": "<p>(The <code>S</code>-indexed polynomials are really the tails of the Laurent series.)</p>",
        "id": 275699571,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647538861
    },
    {
        "content": "<p>I started on the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>S</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[S]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">]</span></span></span></span> in terms of profinitely filtered pseudo normed groups in the folder <code>free_pfpng</code>. <br>\nThe file <code>free_pfpng/basic</code> has a few very simple sorry's that I don't have time to finish off right now.</p>",
        "id": 275740499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647558564
    },
    {
        "content": "<p>I've added the following stub for Prop 2.1 of <code>analytic.pdf</code> in <code>free_pfpng/main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Prop 2.1 of Analytic.pdf -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">free_pfpng_profinite_iso</span> <span class=\"o\">:</span>\n  <span class=\"n\">free_pfpng_profinite</span> <span class=\"bp\">⋙</span>\n  <span class=\"n\">ProFiltPseuNormGrp₁.enlarging_functor</span> <span class=\"bp\">⋙</span>\n  <span class=\"n\">ProFiltPseuNormGrp.to_CompHausFilt</span> <span class=\"bp\">⋙</span>\n  <span class=\"n\">CompHausFiltPseuNormGrp.to_Condensed</span> <span class=\"bp\">≅</span>\n  <span class=\"n\">Profinite_to_Condensed</span> <span class=\"bp\">⋙</span> <span class=\"n\">CondensedSet_to_Condensed_Ab</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 275833066,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647623035
    },
    {
        "content": "<p>Thanks for attacking this</p>",
        "id": 275836336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647624414
    },
    {
        "content": "<p>Should we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ProFiltPseuNormGrp₁.to_Condensed</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ProFiltPseuNormGrp₁.enlarging_functor</span> <span class=\"bp\">⋙</span>\n  <span class=\"n\">ProFiltPseuNormGrp.to_CompHausFilt</span> <span class=\"bp\">⋙</span>\n  <span class=\"n\">CompHausFiltPseuNormGrp.to_Condensed</span>\n</code></pre></div>",
        "id": 275836464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647624472
    },
    {
        "content": "<p>Sure. Maybe as an abbreviation?</p>",
        "id": 275836608,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647624531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/267928-condensed-mathematics/topic/colimits.20commute.20with.20colimits/near/275694959\">said</a>:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mo>−</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[-]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mclose\">]</span></span></span></span> is by definition a left adjoint, so it preserves all colimits for free! (unless you're talking about a different functor?)</p>\n</blockquote>\n<p>We actually need <code>ℤ[-]</code> as functor <code>Condensed Ab ⥤ Condensed Ab</code>. So you have to compose with <code>forget</code>. So I guess you really need to consider filtered colimits, right?</p>",
        "id": 276092122,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1647886243
    }
]